
PlungeCooler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095fc  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080098ac  080098ac  000198ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009970  08009970  00019970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009978  08009978  00019978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800997c  0800997c  0001997c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  24000000  08009980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009e9c  24000080  08009a00  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24009f1c  08009a00  00029f1c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017cda  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000284e  00000000  00000000  00037d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001140  00000000  00000000  0003a5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001058  00000000  00000000  0003b718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030e0b  00000000  00000000  0003c770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001779e  00000000  00000000  0006d57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140673  00000000  00000000  00084d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c538c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d34  00000000  00000000  001c53dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000080 	.word	0x24000080
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009894 	.word	0x08009894

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000084 	.word	0x24000084
 80002ec:	08009894 	.word	0x08009894

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <dispense>:
 */
#include "globals.h"
#include "main.h"
#include <stdio.h>

void dispense(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
//	char a[] = "DEPOSITING!!!\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)a, strlen(a), HAL_MAX_DELAY);
	HAL_GPIO_WritePin(DROP_GPIO_Port, DROP_Pin, 1); //Dispense drop
 80006aa:	2201      	movs	r2, #1
 80006ac:	2101      	movs	r1, #1
 80006ae:	480e      	ldr	r0, [pc, #56]	; (80006e8 <dispense+0x44>)
 80006b0:	f002 fbe6 	bl	8002e80 <HAL_GPIO_WritePin>
	for(int i=0; i<20000; i+=2) i--; 		//pseudo-delay. replace with a short timer setup is ideal
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	e005      	b.n	80006c6 <dispense+0x22>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3b01      	subs	r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3302      	adds	r3, #2
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80006cc:	4293      	cmp	r3, r2
 80006ce:	ddf4      	ble.n	80006ba <dispense+0x16>
	HAL_GPIO_WritePin(DROP_GPIO_Port, DROP_Pin, 0); //Dispense drop
 80006d0:	2200      	movs	r2, #0
 80006d2:	2101      	movs	r1, #1
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <dispense+0x44>)
 80006d6:	f002 fbd3 	bl	8002e80 <HAL_GPIO_WritePin>

	DEPOSITED = 1;
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <dispense+0x48>)
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	58021000 	.word	0x58021000
 80006ec:	24009e71 	.word	0x24009e71

080006f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	db0b      	blt.n	800071a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	f003 021f 	and.w	r2, r3, #31
 8000708:	4907      	ldr	r1, [pc, #28]	; (8000728 <__NVIC_EnableIRQ+0x38>)
 800070a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800070e:	095b      	lsrs	r3, r3, #5
 8000710:	2001      	movs	r0, #1
 8000712:	fa00 f202 	lsl.w	r2, r0, r2
 8000716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000e100 	.word	0xe000e100

0800072c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000738:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db0a      	blt.n	8000756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	490c      	ldr	r1, [pc, #48]	; (8000778 <__NVIC_SetPriority+0x4c>)
 8000746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	440b      	add	r3, r1
 8000750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000754:	e00a      	b.n	800076c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4908      	ldr	r1, [pc, #32]	; (800077c <__NVIC_SetPriority+0x50>)
 800075c:	88fb      	ldrh	r3, [r7, #6]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	3b04      	subs	r3, #4
 8000764:	0112      	lsls	r2, r2, #4
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	440b      	add	r3, r1
 800076a:	761a      	strb	r2, [r3, #24]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000e100 	.word	0xe000e100
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <move_tilt_steps>:
uint8_t rx_flag = 0;
int panPos = 0;
int tiltPos = 0;

/*** MOTOR CONTROL FUNCTIONS ***/
void move_tilt_steps(uint32_t delay, uint8_t dir, uint32_t num_steps) {
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b08b      	sub	sp, #44	; 0x2c
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	460b      	mov	r3, r1
 800078a:	607a      	str	r2, [r7, #4]
 800078c:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(TILT_EN_GPIO_Port, TILT_EN_Pin, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2140      	movs	r1, #64	; 0x40
 8000792:	4824      	ldr	r0, [pc, #144]	; (8000824 <move_tilt_steps+0xa4>)
 8000794:	f002 fb74 	bl	8002e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TILT_DIR_GPIO_Port, TILT_DIR_Pin, dir);
 8000798:	7afb      	ldrb	r3, [r7, #11]
 800079a:	461a      	mov	r2, r3
 800079c:	2120      	movs	r1, #32
 800079e:	4821      	ldr	r0, [pc, #132]	; (8000824 <move_tilt_steps+0xa4>)
 80007a0:	f002 fb6e 	bl	8002e80 <HAL_GPIO_WritePin>
	for(int i=0; i<num_steps; i++) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
 80007a8:	e012      	b.n	80007d0 <move_tilt_steps+0x50>
		HAL_GPIO_WritePin(TILT_STP_GPIO_Port, TILT_STP_Pin, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2120      	movs	r1, #32
 80007ae:	481e      	ldr	r0, [pc, #120]	; (8000828 <move_tilt_steps+0xa8>)
 80007b0:	f002 fb66 	bl	8002e80 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f001 fafb 	bl	8001db0 <HAL_Delay>
		HAL_GPIO_WritePin(TILT_STP_GPIO_Port, TILT_STP_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	481a      	ldr	r0, [pc, #104]	; (8000828 <move_tilt_steps+0xa8>)
 80007c0:	f002 fb5e 	bl	8002e80 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 80007c4:	68f8      	ldr	r0, [r7, #12]
 80007c6:	f001 faf3 	bl	8001db0 <HAL_Delay>
	for(int i=0; i<num_steps; i++) {
 80007ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007cc:	3301      	adds	r3, #1
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
 80007d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d8e8      	bhi.n	80007aa <move_tilt_steps+0x2a>


	}
	char b[] = "done steps\r\n";
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <move_tilt_steps+0xac>)
 80007da:	f107 0414 	add.w	r4, r7, #20
 80007de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007e0:	c407      	stmia	r4!, {r0, r1, r2}
 80007e2:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fd81 	bl	80002f0 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	f107 0114 	add.w	r1, r7, #20
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	480d      	ldr	r0, [pc, #52]	; (8000830 <move_tilt_steps+0xb0>)
 80007fc:	f005 fece 	bl	800659c <HAL_UART_Transmit>

	tiltPos += num_steps * (1 - 2 * dir); // + if dir is 0, else -
 8000800:	7afb      	ldrb	r3, [r7, #11]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	f1c3 0301 	rsb	r3, r3, #1
 8000808:	461a      	mov	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	fb02 f303 	mul.w	r3, r2, r3
 8000810:	4a08      	ldr	r2, [pc, #32]	; (8000834 <move_tilt_steps+0xb4>)
 8000812:	6812      	ldr	r2, [r2, #0]
 8000814:	4413      	add	r3, r2
 8000816:	461a      	mov	r2, r3
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <move_tilt_steps+0xb4>)
 800081a:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(TILT_EN_GPIO_Port, TILT_EN_Pin, 1);

}
 800081c:	bf00      	nop
 800081e:	372c      	adds	r7, #44	; 0x2c
 8000820:	46bd      	mov	sp, r7
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	58020000 	.word	0x58020000
 8000828:	58020800 	.word	0x58020800
 800082c:	080098ac 	.word	0x080098ac
 8000830:	24000180 	.word	0x24000180
 8000834:	24009ee8 	.word	0x24009ee8

08000838 <move_tilt_deg>:

void move_tilt_deg(uint32_t degrees, uint8_t dir) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	70fb      	strb	r3, [r7, #3]
	move_tilt_steps(TILT_DEFAULT_DELAY, dir, degrees*TILT_DEG_TO_STEPS);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	22c8      	movs	r2, #200	; 0xc8
 8000848:	fb03 f202 	mul.w	r2, r3, r2
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	4619      	mov	r1, r3
 8000850:	200a      	movs	r0, #10
 8000852:	f7ff ff95 	bl	8000780 <move_tilt_steps>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <move_pan_steps>:

void move_pan_steps(uint32_t delay, uint8_t dir, uint32_t num_steps) {
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b08b      	sub	sp, #44	; 0x2c
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	460b      	mov	r3, r1
 800086a:	607a      	str	r2, [r7, #4]
 800086c:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(PAN_EN_GPIO_Port, PAN_EN_Pin, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000874:	4824      	ldr	r0, [pc, #144]	; (8000908 <move_pan_steps+0xa8>)
 8000876:	f002 fb03 	bl	8002e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PAN_DIR_GPIO_Port, PAN_DIR_Pin, dir);
 800087a:	7afb      	ldrb	r3, [r7, #11]
 800087c:	461a      	mov	r2, r3
 800087e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000882:	4821      	ldr	r0, [pc, #132]	; (8000908 <move_pan_steps+0xa8>)
 8000884:	f002 fafc 	bl	8002e80 <HAL_GPIO_WritePin>
	for(int i=0; i<num_steps; i++) {
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
 800088c:	e012      	b.n	80008b4 <move_pan_steps+0x54>
		HAL_GPIO_WritePin(PAN_STP_GPIO_Port, PAN_STP_Pin, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	2140      	movs	r1, #64	; 0x40
 8000892:	481e      	ldr	r0, [pc, #120]	; (800090c <move_pan_steps+0xac>)
 8000894:	f002 faf4 	bl	8002e80 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000898:	68f8      	ldr	r0, [r7, #12]
 800089a:	f001 fa89 	bl	8001db0 <HAL_Delay>
		HAL_GPIO_WritePin(PAN_STP_GPIO_Port, PAN_STP_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2140      	movs	r1, #64	; 0x40
 80008a2:	481a      	ldr	r0, [pc, #104]	; (800090c <move_pan_steps+0xac>)
 80008a4:	f002 faec 	bl	8002e80 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f001 fa81 	bl	8001db0 <HAL_Delay>
	for(int i=0; i<num_steps; i++) {
 80008ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b0:	3301      	adds	r3, #1
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
 80008b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d8e8      	bhi.n	800088e <move_pan_steps+0x2e>
	}
	char b[] = "done steps\r\n";
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <move_pan_steps+0xb0>)
 80008be:	f107 0414 	add.w	r4, r7, #20
 80008c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008c4:	c407      	stmia	r4!, {r0, r1, r2}
 80008c6:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fd0f 	bl	80002f0 <strlen>
 80008d2:	4603      	mov	r3, r0
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	f107 0114 	add.w	r1, r7, #20
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <move_pan_steps+0xb4>)
 80008e0:	f005 fe5c 	bl	800659c <HAL_UART_Transmit>

	panPos += num_steps * (1 - 2 * dir); // + if dir is 0, else -
 80008e4:	7afb      	ldrb	r3, [r7, #11]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	f1c3 0301 	rsb	r3, r3, #1
 80008ec:	461a      	mov	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	fb02 f303 	mul.w	r3, r2, r3
 80008f4:	4a08      	ldr	r2, [pc, #32]	; (8000918 <move_pan_steps+0xb8>)
 80008f6:	6812      	ldr	r2, [r2, #0]
 80008f8:	4413      	add	r3, r2
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <move_pan_steps+0xb8>)
 80008fe:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(PAN_EN_GPIO_Port, PAN_EN_Pin, 1);

}
 8000900:	bf00      	nop
 8000902:	372c      	adds	r7, #44	; 0x2c
 8000904:	46bd      	mov	sp, r7
 8000906:	bd90      	pop	{r4, r7, pc}
 8000908:	58020400 	.word	0x58020400
 800090c:	58020800 	.word	0x58020800
 8000910:	080098ac 	.word	0x080098ac
 8000914:	24000180 	.word	0x24000180
 8000918:	24009ee4 	.word	0x24009ee4

0800091c <move_pan_deg>:

void move_pan_deg(uint32_t degrees, uint8_t dir) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	70fb      	strb	r3, [r7, #3]
	move_pan_steps(PAN_DEFAULT_DELAY, dir, degrees*PAN_DEG_TO_STEPS);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	22c8      	movs	r2, #200	; 0xc8
 800092c:	fb03 f202 	mul.w	r2, r3, r2
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	4619      	mov	r1, r3
 8000934:	200a      	movs	r0, #10
 8000936:	f7ff ff93 	bl	8000860 <move_pan_steps>
	char pos[30];
	sprintf(pos, "panPos: %d\r\n", panPos);
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <move_pan_deg+0x54>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	490c      	ldr	r1, [pc, #48]	; (8000974 <move_pan_deg+0x58>)
 8000944:	4618      	mov	r0, r3
 8000946:	f008 fb37 	bl	8008fb8 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)pos, strlen(pos), HAL_MAX_DELAY);
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fcce 	bl	80002f0 <strlen>
 8000954:	4603      	mov	r3, r0
 8000956:	b29a      	uxth	r2, r3
 8000958:	f107 0108 	add.w	r1, r7, #8
 800095c:	f04f 33ff 	mov.w	r3, #4294967295
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <move_pan_deg+0x5c>)
 8000962:	f005 fe1b 	bl	800659c <HAL_UART_Transmit>

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	24009ee4 	.word	0x24009ee4
 8000974:	080098bc 	.word	0x080098bc
 8000978:	24000180 	.word	0x24000180

0800097c <ack>:
void start_plunge(void) {

}

/*** USART Rx HANDLE ***/
void ack(void) {
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart3, tx_ack, 3, HAL_MAX_DELAY);
 8000980:	f04f 33ff 	mov.w	r3, #4294967295
 8000984:	2203      	movs	r2, #3
 8000986:	4903      	ldr	r1, [pc, #12]	; (8000994 <ack+0x18>)
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <ack+0x1c>)
 800098a:	f005 fe07 	bl	800659c <HAL_UART_Transmit>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	24000004 	.word	0x24000004
 8000998:	24000180 	.word	0x24000180

0800099c <bad>:

void bad(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, tx_bad, 3, HAL_MAX_DELAY);
 80009a0:	f04f 33ff 	mov.w	r3, #4294967295
 80009a4:	2203      	movs	r2, #3
 80009a6:	4903      	ldr	r1, [pc, #12]	; (80009b4 <bad+0x18>)
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <bad+0x1c>)
 80009aa:	f005 fdf7 	bl	800659c <HAL_UART_Transmit>
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	24000008 	.word	0x24000008
 80009b8:	24000180 	.word	0x24000180

080009bc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    rxBuffer[rxIndex] = received_character[0];
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_UART_RxCpltCallback+0x54>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_UART_RxCpltCallback+0x58>)
 80009cc:	7819      	ldrb	r1, [r3, #0]
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_UART_RxCpltCallback+0x5c>)
 80009d0:	5499      	strb	r1, [r3, r2]
	rxIndex++;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_UART_RxCpltCallback+0x54>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_UART_RxCpltCallback+0x54>)
 80009dc:	801a      	strh	r2, [r3, #0]

	if (received_character[0] == '\n' || received_character[0] == '\r') {
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <HAL_UART_RxCpltCallback+0x58>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b0a      	cmp	r3, #10
 80009e4:	d003      	beq.n	80009ee <HAL_UART_RxCpltCallback+0x32>
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_UART_RxCpltCallback+0x58>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b0d      	cmp	r3, #13
 80009ec:	d106      	bne.n	80009fc <HAL_UART_RxCpltCallback+0x40>
    	rxIndex = 0;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_UART_RxCpltCallback+0x54>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	801a      	strh	r2, [r3, #0]
    	rx_flag = 1;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_UART_RxCpltCallback+0x60>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
 80009fa:	e005      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x4c>
    } else {
        HAL_UART_Receive_IT(&huart3, received_character, 1);
 80009fc:	2201      	movs	r2, #1
 80009fe:	4905      	ldr	r1, [pc, #20]	; (8000a14 <HAL_UART_RxCpltCallback+0x58>)
 8000a00:	4807      	ldr	r0, [pc, #28]	; (8000a20 <HAL_UART_RxCpltCallback+0x64>)
 8000a02:	f005 fe59 	bl	80066b8 <HAL_UART_Receive_IT>
    }
}
 8000a06:	bf00      	nop
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	24009edc 	.word	0x24009edc
 8000a14:	24009ee0 	.word	0x24009ee0
 8000a18:	24009e78 	.word	0x24009e78
 8000a1c:	24009ee1 	.word	0x24009ee1
 8000a20:	24000180 	.word	0x24000180

08000a24 <rx_handle>:

void rx_handle(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b0ae      	sub	sp, #184	; 0xb8
 8000a28:	af00      	add	r7, sp, #0
	char num[30];
	HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	2203      	movs	r2, #3
 8000a30:	49b8      	ldr	r1, [pc, #736]	; (8000d14 <rx_handle+0x2f0>)
 8000a32:	48b9      	ldr	r0, [pc, #740]	; (8000d18 <rx_handle+0x2f4>)
 8000a34:	f005 fdb2 	bl	800659c <HAL_UART_Transmit>

	HAL_GPIO_WritePin(GPIOE, LD2_Pin, val);
 8000a38:	4bb8      	ldr	r3, [pc, #736]	; (8000d1c <rx_handle+0x2f8>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	2102      	movs	r1, #2
 8000a40:	48b7      	ldr	r0, [pc, #732]	; (8000d20 <rx_handle+0x2fc>)
 8000a42:	f002 fa1d 	bl	8002e80 <HAL_GPIO_WritePin>
	if(val)
 8000a46:	4bb5      	ldr	r3, [pc, #724]	; (8000d1c <rx_handle+0x2f8>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d003      	beq.n	8000a56 <rx_handle+0x32>
		val = 0;
 8000a4e:	4bb3      	ldr	r3, [pc, #716]	; (8000d1c <rx_handle+0x2f8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	e002      	b.n	8000a5c <rx_handle+0x38>
	else
		val = 1;
 8000a56:	4bb1      	ldr	r3, [pc, #708]	; (8000d1c <rx_handle+0x2f8>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
	//sprintf(num, "RX0: %d\r\n", rxBuffer[0]);
	//HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);
	switch(rxBuffer[0]) {
 8000a5c:	4bb1      	ldr	r3, [pc, #708]	; (8000d24 <rx_handle+0x300>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	3b31      	subs	r3, #49	; 0x31
 8000a62:	2b05      	cmp	r3, #5
 8000a64:	f200 819e 	bhi.w	8000da4 <rx_handle+0x380>
 8000a68:	a201      	add	r2, pc, #4	; (adr r2, 8000a70 <rx_handle+0x4c>)
 8000a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6e:	bf00      	nop
 8000a70:	08000a89 	.word	0x08000a89
 8000a74:	08000b19 	.word	0x08000b19
 8000a78:	08000da5 	.word	0x08000da5
 8000a7c:	08000d51 	.word	0x08000d51
 8000a80:	08000d5d 	.word	0x08000d5d
 8000a84:	08000d69 	.word	0x08000d69
    	case MOVE: ;
			uint32_t amount = (rxBuffer[2]-48) << 24 | (rxBuffer[3]-48) << 16 | (rxBuffer[4]-48) << 8 | (rxBuffer[5]-48);
 8000a88:	4ba6      	ldr	r3, [pc, #664]	; (8000d24 <rx_handle+0x300>)
 8000a8a:	789b      	ldrb	r3, [r3, #2]
 8000a8c:	3b30      	subs	r3, #48	; 0x30
 8000a8e:	061a      	lsls	r2, r3, #24
 8000a90:	4ba4      	ldr	r3, [pc, #656]	; (8000d24 <rx_handle+0x300>)
 8000a92:	78db      	ldrb	r3, [r3, #3]
 8000a94:	3b30      	subs	r3, #48	; 0x30
 8000a96:	041b      	lsls	r3, r3, #16
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	4ba2      	ldr	r3, [pc, #648]	; (8000d24 <rx_handle+0x300>)
 8000a9c:	791b      	ldrb	r3, [r3, #4]
 8000a9e:	3b30      	subs	r3, #48	; 0x30
 8000aa0:	021b      	lsls	r3, r3, #8
 8000aa2:	431a      	orrs	r2, r3
 8000aa4:	4b9f      	ldr	r3, [pc, #636]	; (8000d24 <rx_handle+0x300>)
 8000aa6:	795b      	ldrb	r3, [r3, #5]
 8000aa8:	3b30      	subs	r3, #48	; 0x30
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			char response[100];
			//sprintf(response, "%c%c received this amount: %d\r\n", (int)rxBuffer[0], (int)rxBuffer[1], (int)amount);
			//HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);

			switch(rxBuffer[1]) {
 8000ab0:	4b9c      	ldr	r3, [pc, #624]	; (8000d24 <rx_handle+0x300>)
 8000ab2:	785b      	ldrb	r3, [r3, #1]
 8000ab4:	3b31      	subs	r3, #49	; 0x31
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d82a      	bhi.n	8000b10 <rx_handle+0xec>
 8000aba:	a201      	add	r2, pc, #4	; (adr r2, 8000ac0 <rx_handle+0x9c>)
 8000abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac0:	08000ad1 	.word	0x08000ad1
 8000ac4:	08000ae1 	.word	0x08000ae1
 8000ac8:	08000af1 	.word	0x08000af1
 8000acc:	08000b01 	.word	0x08000b01
				case UP: ;
					move_tilt_deg(amount, DIR_TILT_UP);
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000ad6:	f7ff feaf 	bl	8000838 <move_tilt_deg>
					ack();
 8000ada:	f7ff ff4f 	bl	800097c <ack>
					break;
 8000ade:	e01a      	b.n	8000b16 <rx_handle+0xf2>
				case DOWN: ;
					move_tilt_deg(amount, DIR_TILT_DOWN);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000ae6:	f7ff fea7 	bl	8000838 <move_tilt_deg>
					ack();
 8000aea:	f7ff ff47 	bl	800097c <ack>
					break;
 8000aee:	e012      	b.n	8000b16 <rx_handle+0xf2>
				case LEFT: ;
					move_pan_deg(amount, DIR_PAN_LEFT);
 8000af0:	2101      	movs	r1, #1
 8000af2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000af6:	f7ff ff11 	bl	800091c <move_pan_deg>
					ack();
 8000afa:	f7ff ff3f 	bl	800097c <ack>
					break;
 8000afe:	e00a      	b.n	8000b16 <rx_handle+0xf2>
				case RIGHT: ;
					move_pan_deg(amount, DIR_PAN_RIGHT);
 8000b00:	2100      	movs	r1, #0
 8000b02:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000b06:	f7ff ff09 	bl	800091c <move_pan_deg>
					ack();
 8000b0a:	f7ff ff37 	bl	800097c <ack>
					break;
 8000b0e:	e002      	b.n	8000b16 <rx_handle+0xf2>
				default: ;
					bad();
 8000b10:	f7ff ff44 	bl	800099c <bad>
					break;
 8000b14:	bf00      	nop
			}

			break;
 8000b16:	e145      	b.n	8000da4 <rx_handle+0x380>

		case PLUNGE: ;
		/* retrieve info */
			plunge_done_flag = 0;
 8000b18:	4b83      	ldr	r3, [pc, #524]	; (8000d28 <rx_handle+0x304>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]

			uint32_t brake_pos = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			timepoint_pos = 0;
 8000b24:	4b81      	ldr	r3, [pc, #516]	; (8000d2c <rx_handle+0x308>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
			for(int i=1; i<=6; i++) {
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000b30:	e020      	b.n	8000b74 <rx_handle+0x150>
				 char digit = rxBuffer[i];
 8000b32:	4a7c      	ldr	r2, [pc, #496]	; (8000d24 <rx_handle+0x300>)
 8000b34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000b38:	4413      	add	r3, r2
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
				 if (digit >= '0' && digit <= '9') {
 8000b40:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8000b44:	2b2f      	cmp	r3, #47	; 0x2f
 8000b46:	d910      	bls.n	8000b6a <rx_handle+0x146>
 8000b48:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8000b4c:	2b39      	cmp	r3, #57	; 0x39
 8000b4e:	d80c      	bhi.n	8000b6a <rx_handle+0x146>
					 brake_pos = (brake_pos * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 8000b50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000b54:	4613      	mov	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8000b62:	4413      	add	r3, r2
 8000b64:	3b30      	subs	r3, #48	; 0x30
 8000b66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			for(int i=1; i<=6; i++) {
 8000b6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000b6e:	3301      	adds	r3, #1
 8000b70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000b74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000b78:	2b06      	cmp	r3, #6
 8000b7a:	ddda      	ble.n	8000b32 <rx_handle+0x10e>
				 }
			}
			for(int i=7; i<=12; i++) {
 8000b7c:	2307      	movs	r3, #7
 8000b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000b82:	e020      	b.n	8000bc6 <rx_handle+0x1a2>
				 char digit = rxBuffer[i];
 8000b84:	4a67      	ldr	r2, [pc, #412]	; (8000d24 <rx_handle+0x300>)
 8000b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b8a:	4413      	add	r3, r2
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
				 if (digit >= '0' && digit <= '9') {
 8000b92:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000b96:	2b2f      	cmp	r3, #47	; 0x2f
 8000b98:	d910      	bls.n	8000bbc <rx_handle+0x198>
 8000b9a:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000b9e:	2b39      	cmp	r3, #57	; 0x39
 8000ba0:	d80c      	bhi.n	8000bbc <rx_handle+0x198>
					 timepoint_pos = (timepoint_pos * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 8000ba2:	4b62      	ldr	r3, [pc, #392]	; (8000d2c <rx_handle+0x308>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	461a      	mov	r2, r3
 8000bb0:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000bb4:	4413      	add	r3, r2
 8000bb6:	3b30      	subs	r3, #48	; 0x30
 8000bb8:	4a5c      	ldr	r2, [pc, #368]	; (8000d2c <rx_handle+0x308>)
 8000bba:	6013      	str	r3, [r2, #0]
			for(int i=7; i<=12; i++) {
 8000bbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000bca:	2b0c      	cmp	r3, #12
 8000bcc:	ddda      	ble.n	8000b84 <rx_handle+0x160>
	//		HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);

			/***TODO: figure out what angle to tilt to given timepoint_pos***/

			/* reset tracking variables */
			log_position = 0;
 8000bce:	4b58      	ldr	r3, [pc, #352]	; (8000d30 <rx_handle+0x30c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
			running_sum = 0;
 8000bd4:	4b57      	ldr	r3, [pc, #348]	; (8000d34 <rx_handle+0x310>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
			memset(posLog, 0, sizeof(posLog));
 8000bda:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000bde:	2100      	movs	r1, #0
 8000be0:	4855      	ldr	r0, [pc, #340]	; (8000d38 <rx_handle+0x314>)
 8000be2:	f008 f9e1 	bl	8008fa8 <memset>
			DEPOSITED = 0;
 8000be6:	4b55      	ldr	r3, [pc, #340]	; (8000d3c <rx_handle+0x318>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]

			/* dispense position calculation */
			//						    us								mm						mm/s	   s->us
			dispense_delay_clocks = 10000;//(DISPENSE_LATENCY + (TARGET_DIST_ORTH*cos(tiltPos*M_PI/180))/DROP_SPEED*1000*1000)*US_TO_TICKS;
 8000bec:	4b54      	ldr	r3, [pc, #336]	; (8000d40 <rx_handle+0x31c>)
 8000bee:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bf2:	601a      	str	r2, [r3, #0]
			// ^ delay in ticks between dispensing and drop hit target in x direction


			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); //disengage brake
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2140      	movs	r1, #64	; 0x40
 8000bf8:	4852      	ldr	r0, [pc, #328]	; (8000d44 <rx_handle+0x320>)
 8000bfa:	f002 f941 	bl	8002e80 <HAL_GPIO_WritePin>


			/* configure tim4 for final dispense timing */
			TIM4->CR1  &= ~TIM_CR1_CEN;
 8000bfe:	4b52      	ldr	r3, [pc, #328]	; (8000d48 <rx_handle+0x324>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a51      	ldr	r2, [pc, #324]	; (8000d48 <rx_handle+0x324>)
 8000c04:	f023 0301 	bic.w	r3, r3, #1
 8000c08:	6013      	str	r3, [r2, #0]

			TIM4->CNT   =  0;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000c0a:	4b4f      	ldr	r3, [pc, #316]	; (8000d48 <rx_handle+0x324>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->ARR 	= brake_pos; 	// Counter rolls over at brake_pos which triggers an interrupt handled in TIM2_IRQHandler (stm32h7xx_it.c)
 8000c10:	4a4d      	ldr	r2, [pc, #308]	; (8000d48 <rx_handle+0x324>)
 8000c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000c16:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM4->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000c18:	4b4b      	ldr	r3, [pc, #300]	; (8000d48 <rx_handle+0x324>)
 8000c1a:	691b      	ldr	r3, [r3, #16]
 8000c1c:	4a4a      	ldr	r2, [pc, #296]	; (8000d48 <rx_handle+0x324>)
 8000c1e:	f023 0301 	bic.w	r3, r3, #1
 8000c22:	6113      	str	r3, [r2, #16]
			TIM4->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000c24:	4b48      	ldr	r3, [pc, #288]	; (8000d48 <rx_handle+0x324>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a47      	ldr	r2, [pc, #284]	; (8000d48 <rx_handle+0x324>)
 8000c2a:	f023 0302 	bic.w	r3, r3, #2
 8000c2e:	6013      	str	r3, [r2, #0]
			TIM4->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000c30:	4b45      	ldr	r3, [pc, #276]	; (8000d48 <rx_handle+0x324>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	4a44      	ldr	r2, [pc, #272]	; (8000d48 <rx_handle+0x324>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	60d3      	str	r3, [r2, #12]
			TIM4->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000c3c:	4b42      	ldr	r3, [pc, #264]	; (8000d48 <rx_handle+0x324>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a41      	ldr	r2, [pc, #260]	; (8000d48 <rx_handle+0x324>)
 8000c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c46:	6013      	str	r3, [r2, #0]

			/* configuring encoder counter */
			TIM2->CR1  &= ~TIM_CR1_CEN;
 8000c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c52:	f023 0301 	bic.w	r3, r3, #1
 8000c56:	6013      	str	r3, [r2, #0]

			TIM2->CNT   =  0;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->ARR 	= brake_pos; 		// Counter rolls over at brake_pos which triggers an interrupt handled in TIM2_IRQHandler (stm32h7xx_it.c)
 8000c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000c68:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000c6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c74:	f023 0301 	bic.w	r3, r3, #1
 8000c78:	6113      	str	r3, [r2, #16]
			TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000c7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c84:	f023 0302 	bic.w	r3, r3, #2
 8000c88:	6013      	str	r3, [r2, #0]
			TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000c8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	60d3      	str	r3, [r2, #12]
			TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000c9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca8:	6013      	str	r3, [r2, #0]

			TIM2->CR1  |=  TIM_CR1_CEN; 	//start counter
 8000caa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6013      	str	r3, [r2, #0]

			/* configuring data logging timer */
			TIM5->CR1  &= ~TIM_CR1_CEN; // Start TIM5 to commence data collection
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <rx_handle+0x328>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a23      	ldr	r2, [pc, #140]	; (8000d4c <rx_handle+0x328>)
 8000cc0:	f023 0301 	bic.w	r3, r3, #1
 8000cc4:	6013      	str	r3, [r2, #0]

			TIM5-> CNT  = 0;				//
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <rx_handle+0x328>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
			TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <rx_handle+0x328>)
 8000cce:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cd2:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <rx_handle+0x328>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a1c      	ldr	r2, [pc, #112]	; (8000d4c <rx_handle+0x328>)
 8000cda:	f023 0302 	bic.w	r3, r3, #2
 8000cde:	6013      	str	r3, [r2, #0]
			TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <rx_handle+0x328>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	4a19      	ldr	r2, [pc, #100]	; (8000d4c <rx_handle+0x328>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	60d3      	str	r3, [r2, #12]
			TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <rx_handle+0x328>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <rx_handle+0x328>)
 8000cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf6:	6013      	str	r3, [r2, #0]
			TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <rx_handle+0x328>)
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <rx_handle+0x328>)
 8000cfe:	f023 0301 	bic.w	r3, r3, #1
 8000d02:	6113      	str	r3, [r2, #16]

			TIM5->CR1  |= TIM_CR1_CEN; // Start TIM5 to commence data collection
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <rx_handle+0x328>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <rx_handle+0x328>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6013      	str	r3, [r2, #0]
//				char response[100] = {0};
//				enc_pos = TIM2->CNT;
//				sprintf(response, "enc: %d; disp_f: %d; runsum: %d; tim4: %d; log_pos: %d, clocks_to_disp: %d; disp: %d\r\n", (int)enc_pos, (int)disp_flag, (int)running_sum, (int)TIM4->CNT, (int)log_position, (int)TIM4->ARR, (int)DEPOSITED);
//				HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
//			}
			break;
 8000d10:	e048      	b.n	8000da4 <rx_handle+0x380>
 8000d12:	bf00      	nop
 8000d14:	24000004 	.word	0x24000004
 8000d18:	24000180 	.word	0x24000180
 8000d1c:	24000000 	.word	0x24000000
 8000d20:	58021000 	.word	0x58021000
 8000d24:	24009e78 	.word	0x24009e78
 8000d28:	24009e70 	.word	0x24009e70
 8000d2c:	24009e5c 	.word	0x24009e5c
 8000d30:	24009e54 	.word	0x24009e54
 8000d34:	24009e58 	.word	0x24009e58
 8000d38:	24000214 	.word	0x24000214
 8000d3c:	24009e71 	.word	0x24009e71
 8000d40:	24009e60 	.word	0x24009e60
 8000d44:	58020400 	.word	0x58020400
 8000d48:	40000800 	.word	0x40000800
 8000d4c:	40000c00 	.word	0x40000c00

		case RELEASE: ;
			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); //disengage brake
 8000d50:	2201      	movs	r2, #1
 8000d52:	2140      	movs	r1, #64	; 0x40
 8000d54:	4819      	ldr	r0, [pc, #100]	; (8000dbc <rx_handle+0x398>)
 8000d56:	f002 f893 	bl	8002e80 <HAL_GPIO_WritePin>
//			char j[100] = {0};
//			sprintf(j, "RELEASE\r\n");
//			HAL_UART_Transmit(&huart3, (uint8_t*)j, strlen(j), HAL_MAX_DELAY);

			break;
 8000d5a:	e023      	b.n	8000da4 <rx_handle+0x380>
		case '5': ;
			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 0); //engage brake
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2140      	movs	r1, #64	; 0x40
 8000d60:	4816      	ldr	r0, [pc, #88]	; (8000dbc <rx_handle+0x398>)
 8000d62:	f002 f88d 	bl	8002e80 <HAL_GPIO_WritePin>
//			char k[100] = {0};
//			sprintf(k, "BRAKE\r\n");
//			HAL_UART_Transmit(&huart3, (uint8_t*)k, strlen(k), HAL_MAX_DELAY);

			break;
 8000d66:	e01d      	b.n	8000da4 <rx_handle+0x380>
		case '6': ;
			char lm[100] = {0};
 8000d68:	2300      	movs	r3, #0
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2260      	movs	r2, #96	; 0x60
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f008 f918 	bl	8008fa8 <memset>
			sprintf(lm, "current position: %d\r\n braked at: %d\r\n", TIM2->CNT, posn_braked_at);
 8000d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <rx_handle+0x39c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4638      	mov	r0, r7
 8000d84:	490f      	ldr	r1, [pc, #60]	; (8000dc4 <rx_handle+0x3a0>)
 8000d86:	f008 f917 	bl	8008fb8 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)lm, strlen(lm), HAL_MAX_DELAY);
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff faaf 	bl	80002f0 <strlen>
 8000d92:	4603      	mov	r3, r0
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	4639      	mov	r1, r7
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9c:	480a      	ldr	r0, [pc, #40]	; (8000dc8 <rx_handle+0x3a4>)
 8000d9e:	f005 fbfd 	bl	800659c <HAL_UART_Transmit>
			break;
 8000da2:	bf00      	nop

    }
//	char b[] = "done handling\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

    rx_flag = 0;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <rx_handle+0x3a8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart3, received_character, 1);
 8000daa:	2201      	movs	r2, #1
 8000dac:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <rx_handle+0x3ac>)
 8000dae:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <rx_handle+0x3a4>)
 8000db0:	f005 fc82 	bl	80066b8 <HAL_UART_Receive_IT>
}
 8000db4:	bf00      	nop
 8000db6:	37b8      	adds	r7, #184	; 0xb8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	58020400 	.word	0x58020400
 8000dc0:	24009e6c 	.word	0x24009e6c
 8000dc4:	080098cc 	.word	0x080098cc
 8000dc8:	24000180 	.word	0x24000180
 8000dcc:	24009ee1 	.word	0x24009ee1
 8000dd0:	24009ee0 	.word	0x24009ee0

08000dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dda:	f000 ff57 	bl	8001c8c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dde:	f000 f897 	bl	8000f10 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de2:	f000 fa71 	bl	80012c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000de6:	f000 f909 	bl	8000ffc <MX_TIM2_Init>
  MX_USB_OTG_HS_USB_Init();
 8000dea:	f000 fa65 	bl	80012b8 <MX_USB_OTG_HS_USB_Init>
  MX_USART3_UART_Init();
 8000dee:	f000 fa17 	bl	8001220 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000df2:	f000 f9c7 	bl	8001184 <MX_TIM5_Init>
  MX_TIM4_Init();
 8000df6:	f000 f96d 	bl	80010d4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, received_character, 1); // initialize interrupts
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	493c      	ldr	r1, [pc, #240]	; (8000ef0 <main+0x11c>)
 8000dfe:	483d      	ldr	r0, [pc, #244]	; (8000ef4 <main+0x120>)
 8000e00:	f005 fc5a 	bl	80066b8 <HAL_UART_Receive_IT>

//  char msg[] = "program start \r\n";
//  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  // TIM2 for encoder tick counting
  NVIC_SetPriority(TIM2_IRQn, 1); // Braking is priority as long as dispense isnt happening
 8000e04:	2101      	movs	r1, #1
 8000e06:	201c      	movs	r0, #28
 8000e08:	f7ff fc90 	bl	800072c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000e0c:	201c      	movs	r0, #28
 8000e0e:	f7ff fc6f 	bl	80006f0 <__NVIC_EnableIRQ>

  // TIM5 for logkeeping and speed calculations and TIM4 setup
  NVIC_SetPriority(TIM5_IRQn, 2); // Log keeping should be interruptable
 8000e12:	2102      	movs	r1, #2
 8000e14:	2032      	movs	r0, #50	; 0x32
 8000e16:	f7ff fc89 	bl	800072c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8000e1a:	2032      	movs	r0, #50	; 0x32
 8000e1c:	f7ff fc68 	bl	80006f0 <__NVIC_EnableIRQ>

  // TIM4 for dispense timing after commenced by TIM5
  NVIC_SetPriority(TIM4_IRQn, 0); // Dispense accuracy is top priority
 8000e20:	2100      	movs	r1, #0
 8000e22:	201e      	movs	r0, #30
 8000e24:	f7ff fc82 	bl	800072c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8000e28:	201e      	movs	r0, #30
 8000e2a:	f7ff fc61 	bl	80006f0 <__NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
	  if(rx_flag) rx_handle();
 8000e2e:	4b32      	ldr	r3, [pc, #200]	; (8000ef8 <main+0x124>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <main+0x66>
 8000e36:	f7ff fdf5 	bl	8000a24 <rx_handle>


	  if(plunge_done_flag) {
 8000e3a:	4b30      	ldr	r3, [pc, #192]	; (8000efc <main+0x128>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d0f5      	beq.n	8000e2e <main+0x5a>
		  char rn[] = "\r\n";
 8000e42:	4a2f      	ldr	r2, [pc, #188]	; (8000f00 <main+0x12c>)
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	8019      	strh	r1, [r3, #0]
 8000e4e:	3302      	adds	r3, #2
 8000e50:	0c12      	lsrs	r2, r2, #16
 8000e52:	701a      	strb	r2, [r3, #0]
		  uint8_t bytes[4];
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295
 8000e58:	2203      	movs	r2, #3
 8000e5a:	492a      	ldr	r1, [pc, #168]	; (8000f04 <main+0x130>)
 8000e5c:	4825      	ldr	r0, [pc, #148]	; (8000ef4 <main+0x120>)
 8000e5e:	f005 fb9d 	bl	800659c <HAL_UART_Transmit>

		  for(int i=0 ; i<log_position; i++) {
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	e032      	b.n	8000ece <main+0xfa>
			  bytes[0] = ((posLog[i] >> 24) 	& 0xFF);
 8000e68:	4a27      	ldr	r2, [pc, #156]	; (8000f08 <main+0x134>)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e70:	0e1b      	lsrs	r3, r3, #24
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	713b      	strb	r3, [r7, #4]
			  bytes[1] = ((posLog[i] >> 16) 	& 0xFF);
 8000e76:	4a24      	ldr	r2, [pc, #144]	; (8000f08 <main+0x134>)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7e:	0c1b      	lsrs	r3, r3, #16
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	717b      	strb	r3, [r7, #5]
			  bytes[2] = ((posLog[i] >> 8) 		& 0xFF);
 8000e84:	4a20      	ldr	r2, [pc, #128]	; (8000f08 <main+0x134>)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	71bb      	strb	r3, [r7, #6]
			  bytes[3] = ((posLog[i])	 		& 0xFF);
 8000e92:	4a1d      	ldr	r2, [pc, #116]	; (8000f08 <main+0x134>)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	71fb      	strb	r3, [r7, #7]

			  HAL_UART_Transmit(&huart3, bytes, 4, HAL_MAX_DELAY);
 8000e9e:	1d39      	adds	r1, r7, #4
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	4813      	ldr	r0, [pc, #76]	; (8000ef4 <main+0x120>)
 8000ea8:	f005 fb78 	bl	800659c <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart3, (uint8_t*)rn, strlen(rn), HAL_MAX_DELAY);
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fa1d 	bl	80002f0 <strlen>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	f107 0108 	add.w	r1, r7, #8
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <main+0x120>)
 8000ec4:	f005 fb6a 	bl	800659c <HAL_UART_Transmit>
		  for(int i=0 ; i<log_position; i++) {
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <main+0x138>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d3c7      	bcc.n	8000e68 <main+0x94>
		  }

		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8000edc:	2203      	movs	r2, #3
 8000ede:	4909      	ldr	r1, [pc, #36]	; (8000f04 <main+0x130>)
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <main+0x120>)
 8000ee2:	f005 fb5b 	bl	800659c <HAL_UART_Transmit>

		  plunge_done_flag = 0;
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <main+0x128>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
	  if(rx_flag) rx_handle();
 8000eec:	e79f      	b.n	8000e2e <main+0x5a>
 8000eee:	bf00      	nop
 8000ef0:	24009ee0 	.word	0x24009ee0
 8000ef4:	24000180 	.word	0x24000180
 8000ef8:	24009ee1 	.word	0x24009ee1
 8000efc:	24009e70 	.word	0x24009e70
 8000f00:	080098f4 	.word	0x080098f4
 8000f04:	24000004 	.word	0x24000004
 8000f08:	24000214 	.word	0x24000214
 8000f0c:	24009e54 	.word	0x24009e54

08000f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b09c      	sub	sp, #112	; 0x70
 8000f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	224c      	movs	r2, #76	; 0x4c
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f008 f842 	bl	8008fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2220      	movs	r2, #32
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f008 f83c 	bl	8008fa8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000f30:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <SystemClock_Config+0xe4>)
 8000f32:	f04f 32ff 	mov.w	r2, #4294967295
 8000f36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f3a:	2004      	movs	r0, #4
 8000f3c:	f001 ffba 	bl	8002eb4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f40:	2300      	movs	r3, #0
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <SystemClock_Config+0xe8>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a2b      	ldr	r2, [pc, #172]	; (8000ff8 <SystemClock_Config+0xe8>)
 8000f4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <SystemClock_Config+0xe8>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f5c:	bf00      	nop
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <SystemClock_Config+0xe8>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f6a:	d1f8      	bne.n	8000f5e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000f6c:	2321      	movs	r3, #33	; 0x21
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f70:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f76:	2301      	movs	r3, #1
 8000f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000f86:	2318      	movs	r3, #24
 8000f88:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f96:	230c      	movs	r3, #12
 8000f98:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f001 ffde 	bl	8002f68 <HAL_RCC_OscConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fb2:	f000 fad7 	bl	8001564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb6:	233f      	movs	r3, #63	; 0x3f
 8000fb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2102      	movs	r1, #2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f002 fbf6 	bl	80037cc <HAL_RCC_ClockConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000fe6:	f000 fabd 	bl	8001564 <Error_Handler>
  }
}
 8000fea:	bf00      	nop
 8000fec:	3770      	adds	r7, #112	; 0x70
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	58024400 	.word	0x58024400
 8000ff8:	58024800 	.word	0x58024800

08000ffc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	; 0x30
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	2224      	movs	r2, #36	; 0x24
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f007 ffcc 	bl	8008fa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	463b      	mov	r3, r7
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800101a:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <MX_TIM2_Init+0xd4>)
 800101c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001020:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001022:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <MX_TIM2_Init+0xd4>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <MX_TIM2_Init+0xd4>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800102e:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <MX_TIM2_Init+0xd4>)
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <MX_TIM2_Init+0xd4>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <MX_TIM2_Init+0xd4>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001042:	2301      	movs	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800104a:	2301      	movs	r3, #1
 800104c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800105a:	2301      	movs	r3, #1
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4619      	mov	r1, r3
 800106c:	4818      	ldr	r0, [pc, #96]	; (80010d0 <MX_TIM2_Init+0xd4>)
 800106e:	f004 fd71 	bl	8005b54 <HAL_TIM_Encoder_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001078:	f000 fa74 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107c:	2300      	movs	r3, #0
 800107e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001084:	463b      	mov	r3, r7
 8001086:	4619      	mov	r1, r3
 8001088:	4811      	ldr	r0, [pc, #68]	; (80010d0 <MX_TIM2_Init+0xd4>)
 800108a:	f005 f98b 	bl	80063a4 <HAL_TIMEx_MasterConfigSynchronization>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001094:	f000 fa66 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 8001098:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	6013      	str	r3, [r2, #0]
	TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 80010a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b2:	f023 0301 	bic.w	r3, r3, #1
 80010b6:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 80010b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c2:	f023 0301 	bic.w	r3, r3, #1
 80010c6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	3730      	adds	r7, #48	; 0x30
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2400009c 	.word	0x2400009c

080010d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010da:	f107 0310 	add.w	r3, r7, #16
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <MX_TIM4_Init+0xa8>)
 80010f4:	4a22      	ldr	r2, [pc, #136]	; (8001180 <MX_TIM4_Init+0xac>)
 80010f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010f8:	4b20      	ldr	r3, [pc, #128]	; (800117c <MX_TIM4_Init+0xa8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <MX_TIM4_Init+0xa8>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <MX_TIM4_Init+0xa8>)
 8001106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_TIM4_Init+0xa8>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_TIM4_Init+0xa8>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001118:	4818      	ldr	r0, [pc, #96]	; (800117c <MX_TIM4_Init+0xa8>)
 800111a:	f004 fcc3 	bl	8005aa4 <HAL_TIM_Base_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001124:	f000 fa1e 	bl	8001564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	4619      	mov	r1, r3
 8001134:	4811      	ldr	r0, [pc, #68]	; (800117c <MX_TIM4_Init+0xa8>)
 8001136:	f004 fed3 	bl	8005ee0 <HAL_TIM_ConfigClockSource>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001140:	f000 fa10 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4619      	mov	r1, r3
 8001150:	480a      	ldr	r0, [pc, #40]	; (800117c <MX_TIM4_Init+0xa8>)
 8001152:	f005 f927 	bl	80063a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800115c:	f000 fa02 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
	TIM4->CR1 &= ~TIM_CR1_CEN; 	// dont start it
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <MX_TIM4_Init+0xac>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <MX_TIM4_Init+0xac>)
 8001166:	f023 0301 	bic.w	r3, r3, #1
 800116a:	6013      	str	r3, [r2, #0]
	TIM4->CNT = 0;				//reset it
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <MX_TIM4_Init+0xac>)
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END TIM4_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	240000e8 	.word	0x240000e8
 8001180:	40000800 	.word	0x40000800

08001184 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_TIM5_Init+0x94>)
 80011a4:	4a1d      	ldr	r2, [pc, #116]	; (800121c <MX_TIM5_Init+0x98>)
 80011a6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <MX_TIM5_Init+0x94>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_TIM5_Init+0x94>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <MX_TIM5_Init+0x94>)
 80011b6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <MX_TIM5_Init+0x94>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <MX_TIM5_Init+0x94>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011c8:	4813      	ldr	r0, [pc, #76]	; (8001218 <MX_TIM5_Init+0x94>)
 80011ca:	f004 fc6b 	bl	8005aa4 <HAL_TIM_Base_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80011d4:	f000 f9c6 	bl	8001564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4619      	mov	r1, r3
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <MX_TIM5_Init+0x94>)
 80011e6:	f004 fe7b 	bl	8005ee0 <HAL_TIM_ConfigClockSource>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80011f0:	f000 f9b8 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	4619      	mov	r1, r3
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_TIM5_Init+0x94>)
 8001202:	f005 f8cf 	bl	80063a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800120c:	f000 f9aa 	bl	8001564 <Error_Handler>
//  TIM5->DIER |= TIM_DIER_UIE; // Enable update interrupt
//  TIM5->ARR = ENC_DMA_POLL_FREQ; // Timebase

  /* USER CODE END TIM5_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	24000134 	.word	0x24000134
 800121c:	40000c00 	.word	0x40000c00

08001220 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <MX_USART3_UART_Init+0x90>)
 8001226:	4a23      	ldr	r2, [pc, #140]	; (80012b4 <MX_USART3_UART_Init+0x94>)
 8001228:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800122a:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <MX_USART3_UART_Init+0x90>)
 800122c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001230:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <MX_USART3_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <MX_USART3_UART_Init+0x90>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800123e:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <MX_USART3_UART_Init+0x90>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_USART3_UART_Init+0x90>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <MX_USART3_UART_Init+0x90>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_USART3_UART_Init+0x90>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <MX_USART3_UART_Init+0x90>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_USART3_UART_Init+0x90>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <MX_USART3_UART_Init+0x90>)
 8001264:	2200      	movs	r2, #0
 8001266:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001268:	4811      	ldr	r0, [pc, #68]	; (80012b0 <MX_USART3_UART_Init+0x90>)
 800126a:	f005 f947 	bl	80064fc <HAL_UART_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001274:	f000 f976 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001278:	2100      	movs	r1, #0
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <MX_USART3_UART_Init+0x90>)
 800127c:	f007 fd9f 	bl	8008dbe <HAL_UARTEx_SetTxFifoThreshold>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001286:	f000 f96d 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800128a:	2100      	movs	r1, #0
 800128c:	4808      	ldr	r0, [pc, #32]	; (80012b0 <MX_USART3_UART_Init+0x90>)
 800128e:	f007 fdd4 	bl	8008e3a <HAL_UARTEx_SetRxFifoThreshold>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001298:	f000 f964 	bl	8001564 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <MX_USART3_UART_Init+0x90>)
 800129e:	f007 fd55 	bl	8008d4c <HAL_UARTEx_DisableFifoMode>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80012a8:	f000 f95c 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	24000180 	.word	0x24000180
 80012b4:	40004800 	.word	0x40004800

080012b8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08e      	sub	sp, #56	; 0x38
 80012cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	4b9a      	ldr	r3, [pc, #616]	; (8001548 <MX_GPIO_Init+0x280>)
 80012e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012e4:	4a98      	ldr	r2, [pc, #608]	; (8001548 <MX_GPIO_Init+0x280>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012ee:	4b96      	ldr	r3, [pc, #600]	; (8001548 <MX_GPIO_Init+0x280>)
 80012f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	623b      	str	r3, [r7, #32]
 80012fa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012fc:	4b92      	ldr	r3, [pc, #584]	; (8001548 <MX_GPIO_Init+0x280>)
 80012fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001302:	4a91      	ldr	r2, [pc, #580]	; (8001548 <MX_GPIO_Init+0x280>)
 8001304:	f043 0320 	orr.w	r3, r3, #32
 8001308:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800130c:	4b8e      	ldr	r3, [pc, #568]	; (8001548 <MX_GPIO_Init+0x280>)
 800130e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001312:	f003 0320 	and.w	r3, r3, #32
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800131a:	4b8b      	ldr	r3, [pc, #556]	; (8001548 <MX_GPIO_Init+0x280>)
 800131c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001320:	4a89      	ldr	r2, [pc, #548]	; (8001548 <MX_GPIO_Init+0x280>)
 8001322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001326:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800132a:	4b87      	ldr	r3, [pc, #540]	; (8001548 <MX_GPIO_Init+0x280>)
 800132c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001334:	61bb      	str	r3, [r7, #24]
 8001336:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b83      	ldr	r3, [pc, #524]	; (8001548 <MX_GPIO_Init+0x280>)
 800133a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800133e:	4a82      	ldr	r2, [pc, #520]	; (8001548 <MX_GPIO_Init+0x280>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001348:	4b7f      	ldr	r3, [pc, #508]	; (8001548 <MX_GPIO_Init+0x280>)
 800134a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	4b7c      	ldr	r3, [pc, #496]	; (8001548 <MX_GPIO_Init+0x280>)
 8001358:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800135c:	4a7a      	ldr	r2, [pc, #488]	; (8001548 <MX_GPIO_Init+0x280>)
 800135e:	f043 0302 	orr.w	r3, r3, #2
 8001362:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001366:	4b78      	ldr	r3, [pc, #480]	; (8001548 <MX_GPIO_Init+0x280>)
 8001368:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001374:	4b74      	ldr	r3, [pc, #464]	; (8001548 <MX_GPIO_Init+0x280>)
 8001376:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800137a:	4a73      	ldr	r2, [pc, #460]	; (8001548 <MX_GPIO_Init+0x280>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001384:	4b70      	ldr	r3, [pc, #448]	; (8001548 <MX_GPIO_Init+0x280>)
 8001386:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001392:	4b6d      	ldr	r3, [pc, #436]	; (8001548 <MX_GPIO_Init+0x280>)
 8001394:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001398:	4a6b      	ldr	r2, [pc, #428]	; (8001548 <MX_GPIO_Init+0x280>)
 800139a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800139e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013a2:	4b69      	ldr	r3, [pc, #420]	; (8001548 <MX_GPIO_Init+0x280>)
 80013a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013b0:	4b65      	ldr	r3, [pc, #404]	; (8001548 <MX_GPIO_Init+0x280>)
 80013b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013b6:	4a64      	ldr	r2, [pc, #400]	; (8001548 <MX_GPIO_Init+0x280>)
 80013b8:	f043 0310 	orr.w	r3, r3, #16
 80013bc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013c0:	4b61      	ldr	r3, [pc, #388]	; (8001548 <MX_GPIO_Init+0x280>)
 80013c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d4:	485d      	ldr	r0, [pc, #372]	; (800154c <MX_GPIO_Init+0x284>)
 80013d6:	f001 fd53 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TILT_DIR_Pin|TILT_EN_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2160      	movs	r1, #96	; 0x60
 80013de:	485c      	ldr	r0, [pc, #368]	; (8001550 <MX_GPIO_Init+0x288>)
 80013e0:	f001 fd4e 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TILT_STP_Pin|PAN_STP_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2160      	movs	r1, #96	; 0x60
 80013e8:	485a      	ldr	r0, [pc, #360]	; (8001554 <MX_GPIO_Init+0x28c>)
 80013ea:	f001 fd49 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|BRAKE_Pin|PAN_DIR_Pin|PAN_EN_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	f244 3140 	movw	r1, #17216	; 0x4340
 80013f4:	4858      	ldr	r0, [pc, #352]	; (8001558 <MX_GPIO_Init+0x290>)
 80013f6:	f001 fd43 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DROP_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2103      	movs	r1, #3
 80013fe:	4857      	ldr	r0, [pc, #348]	; (800155c <MX_GPIO_Init+0x294>)
 8001400:	f001 fd3e 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	484e      	ldr	r0, [pc, #312]	; (8001554 <MX_GPIO_Init+0x28c>)
 800141a:	f001 fb81 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800141e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001424:	2301      	movs	r3, #1
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001434:	4619      	mov	r1, r3
 8001436:	4845      	ldr	r0, [pc, #276]	; (800154c <MX_GPIO_Init+0x284>)
 8001438:	f001 fb72 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : TILT_DIR_Pin TILT_EN_Pin */
  GPIO_InitStruct.Pin = TILT_DIR_Pin|TILT_EN_Pin;
 800143c:	2360      	movs	r3, #96	; 0x60
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001450:	4619      	mov	r1, r3
 8001452:	483f      	ldr	r0, [pc, #252]	; (8001550 <MX_GPIO_Init+0x288>)
 8001454:	f001 fb64 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : TILT_STP_Pin PAN_STP_Pin */
  GPIO_InitStruct.Pin = TILT_STP_Pin|PAN_STP_Pin;
 8001458:	2360      	movs	r3, #96	; 0x60
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146c:	4619      	mov	r1, r3
 800146e:	4839      	ldr	r0, [pc, #228]	; (8001554 <MX_GPIO_Init+0x28c>)
 8001470:	f001 fb56 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin PAN_DIR_Pin PAN_EN_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|PAN_DIR_Pin|PAN_EN_Pin;
 8001474:	f44f 4386 	mov.w	r3, #17152	; 0x4300
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148a:	4619      	mov	r1, r3
 800148c:	4832      	ldr	r0, [pc, #200]	; (8001558 <MX_GPIO_Init+0x290>)
 800148e:	f001 fb47 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001496:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	4619      	mov	r1, r3
 80014a6:	482e      	ldr	r0, [pc, #184]	; (8001560 <MX_GPIO_Init+0x298>)
 80014a8:	f001 fb3a 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80014ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	4619      	mov	r1, r3
 80014c0:	4823      	ldr	r0, [pc, #140]	; (8001550 <MX_GPIO_Init+0x288>)
 80014c2:	f001 fb2d 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80014c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80014d8:	230a      	movs	r3, #10
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	481b      	ldr	r0, [pc, #108]	; (8001550 <MX_GPIO_Init+0x288>)
 80014e4:	f001 fb1c 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80014e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	4813      	ldr	r0, [pc, #76]	; (8001550 <MX_GPIO_Init+0x288>)
 8001502:	f001 fb0d 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BRAKE_Pin */
  GPIO_InitStruct.Pin = BRAKE_Pin;
 8001506:	2340      	movs	r3, #64	; 0x40
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800150a:	2311      	movs	r3, #17
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BRAKE_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151a:	4619      	mov	r1, r3
 800151c:	480e      	ldr	r0, [pc, #56]	; (8001558 <MX_GPIO_Init+0x290>)
 800151e:	f001 faff 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : DROP_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DROP_Pin|LD2_Pin;
 8001522:	2303      	movs	r3, #3
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	4619      	mov	r1, r3
 8001538:	4808      	ldr	r0, [pc, #32]	; (800155c <MX_GPIO_Init+0x294>)
 800153a:	f001 faf1 	bl	8002b20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800153e:	bf00      	nop
 8001540:	3738      	adds	r7, #56	; 0x38
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	58024400 	.word	0x58024400
 800154c:	58021400 	.word	0x58021400
 8001550:	58020000 	.word	0x58020000
 8001554:	58020800 	.word	0x58020800
 8001558:	58020400 	.word	0x58020400
 800155c:	58021000 	.word	0x58021000
 8001560:	58021800 	.word	0x58021800

08001564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156c:	e7fe      	b.n	800156c <Error_Handler+0x8>
	...

08001570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <HAL_MspInit+0x30>)
 8001578:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800157c:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <HAL_MspInit+0x30>)
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_MspInit+0x30>)
 8001588:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	58024400 	.word	0x58024400

080015a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015c4:	d135      	bne.n	8001632 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <HAL_TIM_Encoder_MspInit+0x98>)
 80015c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015cc:	4a1b      	ldr	r2, [pc, #108]	; (800163c <HAL_TIM_Encoder_MspInit+0x98>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_TIM_Encoder_MspInit+0x98>)
 80015d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_TIM_Encoder_MspInit+0x98>)
 80015e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ea:	4a14      	ldr	r2, [pc, #80]	; (800163c <HAL_TIM_Encoder_MspInit+0x98>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_TIM_Encoder_MspInit+0x98>)
 80015f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PLUNGE_ENC_A_Pin|PLUNGE_ENC_B_Pin;
 8001602:	2303      	movs	r3, #3
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001612:	2301      	movs	r3, #1
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	4808      	ldr	r0, [pc, #32]	; (8001640 <HAL_TIM_Encoder_MspInit+0x9c>)
 800161e:	f001 fa7f 	bl	8002b20 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	201c      	movs	r0, #28
 8001628:	f000 fce1 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800162c:	201c      	movs	r0, #28
 800162e:	f000 fcf8 	bl	8002022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	58024400 	.word	0x58024400
 8001640:	58020000 	.word	0x58020000

08001644 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a1d      	ldr	r2, [pc, #116]	; (80016c8 <HAL_TIM_Base_MspInit+0x84>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d117      	bne.n	8001686 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001656:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <HAL_TIM_Base_MspInit+0x88>)
 8001658:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800165c:	4a1b      	ldr	r2, [pc, #108]	; (80016cc <HAL_TIM_Base_MspInit+0x88>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_TIM_Base_MspInit+0x88>)
 8001668:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	201e      	movs	r0, #30
 800167a:	f000 fcb8 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800167e:	201e      	movs	r0, #30
 8001680:	f000 fccf 	bl	8002022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001684:	e01b      	b.n	80016be <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a11      	ldr	r2, [pc, #68]	; (80016d0 <HAL_TIM_Base_MspInit+0x8c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d116      	bne.n	80016be <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_TIM_Base_MspInit+0x88>)
 8001692:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001696:	4a0d      	ldr	r2, [pc, #52]	; (80016cc <HAL_TIM_Base_MspInit+0x88>)
 8001698:	f043 0308 	orr.w	r3, r3, #8
 800169c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <HAL_TIM_Base_MspInit+0x88>)
 80016a2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	2032      	movs	r0, #50	; 0x32
 80016b4:	f000 fc9b 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80016b8:	2032      	movs	r0, #50	; 0x32
 80016ba:	f000 fcb2 	bl	8002022 <HAL_NVIC_EnableIRQ>
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40000800 	.word	0x40000800
 80016cc:	58024400 	.word	0x58024400
 80016d0:	40000c00 	.word	0x40000c00

080016d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b0ba      	sub	sp, #232	; 0xe8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	22c0      	movs	r2, #192	; 0xc0
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f007 fc57 	bl	8008fa8 <memset>
  if(huart->Instance==USART3)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a2b      	ldr	r2, [pc, #172]	; (80017ac <HAL_UART_MspInit+0xd8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d14e      	bne.n	80017a2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001704:	f04f 0202 	mov.w	r2, #2
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	4618      	mov	r0, r3
 800171c:	f002 fbe2 	bl	8003ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001726:	f7ff ff1d 	bl	8001564 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_UART_MspInit+0xdc>)
 800172c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001730:	4a1f      	ldr	r2, [pc, #124]	; (80017b0 <HAL_UART_MspInit+0xdc>)
 8001732:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001736:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <HAL_UART_MspInit+0xdc>)
 800173c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_UART_MspInit+0xdc>)
 800174a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800174e:	4a18      	ldr	r2, [pc, #96]	; (80017b0 <HAL_UART_MspInit+0xdc>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_UART_MspInit+0xdc>)
 800175a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001766:	f44f 7340 	mov.w	r3, #768	; 0x300
 800176a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001780:	2307      	movs	r3, #7
 8001782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001786:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800178a:	4619      	mov	r1, r3
 800178c:	4809      	ldr	r0, [pc, #36]	; (80017b4 <HAL_UART_MspInit+0xe0>)
 800178e:	f001 f9c7 	bl	8002b20 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	2027      	movs	r0, #39	; 0x27
 8001798:	f000 fc29 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800179c:	2027      	movs	r0, #39	; 0x27
 800179e:	f000 fc40 	bl	8002022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017a2:	bf00      	nop
 80017a4:	37e8      	adds	r7, #232	; 0xe8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40004800 	.word	0x40004800
 80017b0:	58024400 	.word	0x58024400
 80017b4:	58020c00 	.word	0x58020c00

080017b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <NMI_Handler+0x4>

080017be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <MemManage_Handler+0x4>

080017ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001804:	f000 fab4 	bl	8001d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//NOTE TO MORNING LEO: LOG SEEMS TO WORK, SHOULD TRANSMIT IT TO PC FOR EASY VISUALIZATION
	if ((TIM2->SR & TIM_SR_UIF) != 0) { // check if update interrupt occured
 8001810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d024      	beq.n	8001868 <TIM2_IRQHandler+0x5c>
		HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 0); //engage brake
 800181e:	2200      	movs	r2, #0
 8001820:	2140      	movs	r1, #64	; 0x40
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <TIM2_IRQHandler+0x68>)
 8001824:	f001 fb2c 	bl	8002e80 <HAL_GPIO_WritePin>
		posn_braked_at = TIM2->CNT;
 8001828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <TIM2_IRQHandler+0x6c>)
 8001830:	6013      	str	r3, [r2, #0]
		//also somehow stop motor

		plunge_done_flag = 1;
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <TIM2_IRQHandler+0x70>)
 8001834:	2201      	movs	r2, #1
 8001836:	701a      	strb	r2, [r3, #0]

		TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 8001838:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001842:	f043 0302 	orr.w	r3, r3, #2
 8001846:	6013      	str	r3, [r2, #0]
		TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 8001848:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;
 8001858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001862:	f023 0301 	bic.w	r3, r3, #1
 8001866:	6013      	str	r3, [r2, #0]
		//TIM2->ARR = 999999;			//massive so that we dont hit it when we try to move around. later i can just diable timer but for debugging i want to preserve tim2->cnt
    }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <TIM2_IRQHandler+0x74>)
 800186a:	f004 fa19 	bl	8005ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	58020400 	.word	0x58020400
 8001878:	24009e6c 	.word	0x24009e6c
 800187c:	24009e70 	.word	0x24009e70
 8001880:	2400009c 	.word	0x2400009c

08001884 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if ((TIM4->SR & TIM_SR_UIF) != 0) {
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <TIM4_IRQHandler+0x3c>)
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d010      	beq.n	80018b6 <TIM4_IRQHandler+0x32>
		DEPOSITED = 1;
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <TIM4_IRQHandler+0x40>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
		dispense();
 800189a:	f7fe ff03 	bl	80006a4 <dispense>
		TIM4->DIER &=  ~TIM_DIER_UIE; 	// update interrupt disabled
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <TIM4_IRQHandler+0x3c>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <TIM4_IRQHandler+0x3c>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	60d3      	str	r3, [r2, #12]
		TIM4->CR1 &= ~TIM_CR1_CEN; 	// only fire this timer once
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <TIM4_IRQHandler+0x3c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <TIM4_IRQHandler+0x3c>)
 80018b0:	f023 0301 	bic.w	r3, r3, #1
 80018b4:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018b6:	4804      	ldr	r0, [pc, #16]	; (80018c8 <TIM4_IRQHandler+0x44>)
 80018b8:	f004 f9f2 	bl	8005ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40000800 	.word	0x40000800
 80018c4:	24009e71 	.word	0x24009e71
 80018c8:	240000e8 	.word	0x240000e8

080018cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	//dispense();
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <USART3_IRQHandler+0x10>)
 80018d2:	f004 ff3d 	bl	8006750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	24000180 	.word	0x24000180

080018e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
		/* always dot he logging portion */
		/* TODO: Convert this datalogging to DMA to speed it up. actually a priority I think it would have big preformance gains*/
		log_position += 1; // increment number of data points taken
 80018e6:	4b6e      	ldr	r3, [pc, #440]	; (8001aa0 <TIM5_IRQHandler+0x1c0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3301      	adds	r3, #1
 80018ec:	4a6c      	ldr	r2, [pc, #432]	; (8001aa0 <TIM5_IRQHandler+0x1c0>)
 80018ee:	6013      	str	r3, [r2, #0]
		current_pos = TIM2->CNT;
 80018f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	4a6b      	ldr	r2, [pc, #428]	; (8001aa4 <TIM5_IRQHandler+0x1c4>)
 80018f8:	6013      	str	r3, [r2, #0]
		posLog[log_position] = current_pos; // update log of positions
 80018fa:	4b69      	ldr	r3, [pc, #420]	; (8001aa0 <TIM5_IRQHandler+0x1c0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a69      	ldr	r2, [pc, #420]	; (8001aa4 <TIM5_IRQHandler+0x1c4>)
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	4969      	ldr	r1, [pc, #420]	; (8001aa8 <TIM5_IRQHandler+0x1c8>)
 8001904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		running_sum += current_pos - prev_pos;
 8001908:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <TIM5_IRQHandler+0x1c4>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b67      	ldr	r3, [pc, #412]	; (8001aac <TIM5_IRQHandler+0x1cc>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	1ad2      	subs	r2, r2, r3
 8001912:	4b67      	ldr	r3, [pc, #412]	; (8001ab0 <TIM5_IRQHandler+0x1d0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a65      	ldr	r2, [pc, #404]	; (8001ab0 <TIM5_IRQHandler+0x1d0>)
 800191a:	6013      	str	r3, [r2, #0]
		prev_pos = current_pos;
 800191c:	4b61      	ldr	r3, [pc, #388]	; (8001aa4 <TIM5_IRQHandler+0x1c4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a62      	ldr	r2, [pc, #392]	; (8001aac <TIM5_IRQHandler+0x1cc>)
 8001922:	6013      	str	r3, [r2, #0]
		/* if disp hasnt triggered yet, calculate speed and find disp pos */
		if(!disp_flag){
 8001924:	4b63      	ldr	r3, [pc, #396]	; (8001ab4 <TIM5_IRQHandler+0x1d4>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	f040 80a3 	bne.w	8001a74 <TIM5_IRQHandler+0x194>
			if(log_position >= MOVING_AVG_LENGTH) {
 800192e:	4b5c      	ldr	r3, [pc, #368]	; (8001aa0 <TIM5_IRQHandler+0x1c0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2bc7      	cmp	r3, #199	; 0xc7
 8001934:	f240 809e 	bls.w	8001a74 <TIM5_IRQHandler+0x194>
				/*update running sum of most recent n data points*/
				running_sum -= (posLog[log_position - MOVING_AVG_LENGTH + 1] - posLog[log_position - MOVING_AVG_LENGTH]);
 8001938:	4b59      	ldr	r3, [pc, #356]	; (8001aa0 <TIM5_IRQHandler+0x1c0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3bc8      	subs	r3, #200	; 0xc8
 800193e:	4a5a      	ldr	r2, [pc, #360]	; (8001aa8 <TIM5_IRQHandler+0x1c8>)
 8001940:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001944:	4b56      	ldr	r3, [pc, #344]	; (8001aa0 <TIM5_IRQHandler+0x1c0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3bc7      	subs	r3, #199	; 0xc7
 800194a:	4957      	ldr	r1, [pc, #348]	; (8001aa8 <TIM5_IRQHandler+0x1c8>)
 800194c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001950:	1ad2      	subs	r2, r2, r3
 8001952:	4b57      	ldr	r3, [pc, #348]	; (8001ab0 <TIM5_IRQHandler+0x1d0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a55      	ldr	r2, [pc, #340]	; (8001ab0 <TIM5_IRQHandler+0x1d0>)
 800195a:	6013      	str	r3, [r2, #0]
				speed = (double)running_sum / (double)MOVING_AVG_LENGTH; // speed in pulses per log
 800195c:	4b54      	ldr	r3, [pc, #336]	; (8001ab0 <TIM5_IRQHandler+0x1d0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001968:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8001a90 <TIM5_IRQHandler+0x1b0>
 800196c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001970:	4b51      	ldr	r3, [pc, #324]	; (8001ab8 <TIM5_IRQHandler+0x1d8>)
 8001972:	ed83 7b00 	vstr	d7, [r3]

				uint32_t clocks_per_encoder_pulse = (CLOCKS_PER_LOG / speed); // a form of speed measurement
 8001976:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <TIM5_IRQHandler+0x1d8>)
 8001978:	ed93 6b00 	vldr	d6, [r3]
 800197c:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001a98 <TIM5_IRQHandler+0x1b8>
 8001980:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001984:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001988:	ee17 3a90 	vmov	r3, s15
 800198c:	607b      	str	r3, [r7, #4]

				next_next_pos = current_pos + 2*speed;	// predicted position 2 TIM5 updates from now. if this is beyond disp_pos we want to trigger TIM4
 800198e:	4b45      	ldr	r3, [pc, #276]	; (8001aa4 <TIM5_IRQHandler+0x1c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <TIM5_IRQHandler+0x1d8>)
 800199c:	ed93 7b00 	vldr	d7, [r3]
 80019a0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80019a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019a8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80019ac:	ee17 2a90 	vmov	r2, s15
 80019b0:	4b42      	ldr	r3, [pc, #264]	; (8001abc <TIM5_IRQHandler+0x1dc>)
 80019b2:	601a      	str	r2, [r3, #0]

				// enc				enc		   enc/log			clocks 				clocks/log
				dispense_pos = (timepoint_pos) - (speed * (dispense_delay_clocks / CLOCKS_PER_LOG));
 80019b4:	4b42      	ldr	r3, [pc, #264]	; (8001ac0 <TIM5_IRQHandler+0x1e0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	ee07 3a90 	vmov	s15, r3
 80019bc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80019c0:	4b40      	ldr	r3, [pc, #256]	; (8001ac4 <TIM5_IRQHandler+0x1e4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80019cc:	ed9f 4b32 	vldr	d4, [pc, #200]	; 8001a98 <TIM5_IRQHandler+0x1b8>
 80019d0:	ee87 5b04 	vdiv.f64	d5, d7, d4
 80019d4:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <TIM5_IRQHandler+0x1d8>)
 80019d6:	ed93 7b00 	vldr	d7, [r3]
 80019da:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019de:	ee36 7b47 	vsub.f64	d7, d6, d7
 80019e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80019e6:	ee17 2a90 	vmov	r2, s15
 80019ea:	4b37      	ldr	r3, [pc, #220]	; (8001ac8 <TIM5_IRQHandler+0x1e8>)
 80019ec:	601a      	str	r2, [r3, #0]
				//		(enc ticks @ intersection) - (encoder ticks between disp signal and contact )
				// dispense_delay_clocks is based on the geometry of the dipense (ie distance and speed that the drop is shooting at)

				if(next_next_pos > dispense_pos) { // dispense comes within the next timebase
 80019ee:	4b33      	ldr	r3, [pc, #204]	; (8001abc <TIM5_IRQHandler+0x1dc>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	4b35      	ldr	r3, [pc, #212]	; (8001ac8 <TIM5_IRQHandler+0x1e8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d93c      	bls.n	8001a74 <TIM5_IRQHandler+0x194>
					TIM5->ARR = TIM5->ARR * POST_DISP_LOG_SLOW_FACTOR; // slow down the logging rate after dispense since it is less essential
 80019fa:	4b34      	ldr	r3, [pc, #208]	; (8001acc <TIM5_IRQHandler+0x1ec>)
 80019fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fe:	4a33      	ldr	r2, [pc, #204]	; (8001acc <TIM5_IRQHandler+0x1ec>)
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	62d3      	str	r3, [r2, #44]	; 0x2c

					/* Insert a marker for when dispense happened */
					//log_position += 1;
					//posLog[log_position] = 12345678;

					disp_flag = 1;
 8001a04:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <TIM5_IRQHandler+0x1d4>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	701a      	strb	r2, [r3, #0]

					// using this with a third timer is likely the most accurate. allows inter-encoder values
					clocks_to_disp = clocks_per_encoder_pulse*(dispense_pos-current_pos);
 8001a0a:	4b2f      	ldr	r3, [pc, #188]	; (8001ac8 <TIM5_IRQHandler+0x1e8>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <TIM5_IRQHandler+0x1c4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	4a2d      	ldr	r2, [pc, #180]	; (8001ad0 <TIM5_IRQHandler+0x1f0>)
 8001a1c:	6013      	str	r3, [r2, #0]

					/* start TIM4 to count to clocks_to_disp */
					TIM4->CR1  &= ~TIM_CR1_CEN; 	//start counter
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <TIM5_IRQHandler+0x1f4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a2c      	ldr	r2, [pc, #176]	; (8001ad4 <TIM5_IRQHandler+0x1f4>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	6013      	str	r3, [r2, #0]
					TIM4->CNT   = 0;				// Reset count
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <TIM5_IRQHandler+0x1f4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24
					TIM4->ARR 	= clocks_to_disp; 	// Update event when we want to dispense
 8001a30:	4a28      	ldr	r2, [pc, #160]	; (8001ad4 <TIM5_IRQHandler+0x1f4>)
 8001a32:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <TIM5_IRQHandler+0x1f0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	62d3      	str	r3, [r2, #44]	; 0x2c
					TIM4->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8001a38:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <TIM5_IRQHandler+0x1f4>)
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	4a25      	ldr	r2, [pc, #148]	; (8001ad4 <TIM5_IRQHandler+0x1f4>)
 8001a3e:	f023 0301 	bic.w	r3, r3, #1
 8001a42:	6113      	str	r3, [r2, #16]
					TIM4->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <TIM5_IRQHandler+0x1f4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <TIM5_IRQHandler+0x1f4>)
 8001a4a:	f023 0302 	bic.w	r3, r3, #2
 8001a4e:	6013      	str	r3, [r2, #0]
					TIM4->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8001a50:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <TIM5_IRQHandler+0x1f4>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4a1f      	ldr	r2, [pc, #124]	; (8001ad4 <TIM5_IRQHandler+0x1f4>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	60d3      	str	r3, [r2, #12]
					TIM4->CR1  |=  TIM_CR1_ARPE;	// enable auto reload preload
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <TIM5_IRQHandler+0x1f4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <TIM5_IRQHandler+0x1f4>)
 8001a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a66:	6013      	str	r3, [r2, #0]
					TIM4->CR1  |=  TIM_CR1_CEN; 	//start counter
 8001a68:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <TIM5_IRQHandler+0x1f4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a19      	ldr	r2, [pc, #100]	; (8001ad4 <TIM5_IRQHandler+0x1f4>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6013      	str	r3, [r2, #0]
			}


		}

		TIM5->SR &= ~TIM_SR_UIF; // Clear the TIM5 update flag
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <TIM5_IRQHandler+0x1ec>)
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	4a14      	ldr	r2, [pc, #80]	; (8001acc <TIM5_IRQHandler+0x1ec>)
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a80:	4815      	ldr	r0, [pc, #84]	; (8001ad8 <TIM5_IRQHandler+0x1f8>)
 8001a82:	f004 f90d 	bl	8005ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	00000000 	.word	0x00000000
 8001a94:	40690000 	.word	0x40690000
 8001a98:	00000000 	.word	0x00000000
 8001a9c:	40c2c000 	.word	0x40c2c000
 8001aa0:	24009e54 	.word	0x24009e54
 8001aa4:	24009ef8 	.word	0x24009ef8
 8001aa8:	24000214 	.word	0x24000214
 8001aac:	24009efc 	.word	0x24009efc
 8001ab0:	24009e58 	.word	0x24009e58
 8001ab4:	24009e64 	.word	0x24009e64
 8001ab8:	24009ef0 	.word	0x24009ef0
 8001abc:	24009f00 	.word	0x24009f00
 8001ac0:	24009e5c 	.word	0x24009e5c
 8001ac4:	24009e60 	.word	0x24009e60
 8001ac8:	24009e68 	.word	0x24009e68
 8001acc:	40000c00 	.word	0x40000c00
 8001ad0:	24009e74 	.word	0x24009e74
 8001ad4:	40000800 	.word	0x40000800
 8001ad8:	24000134 	.word	0x24000134

08001adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <_sbrk+0x5c>)
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <_sbrk+0x60>)
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <_sbrk+0x64>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <_sbrk+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d207      	bcs.n	8001b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b0c:	f007 fa22 	bl	8008f54 <__errno>
 8001b10:	4603      	mov	r3, r0
 8001b12:	220c      	movs	r2, #12
 8001b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	e009      	b.n	8001b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <_sbrk+0x64>)
 8001b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	24100000 	.word	0x24100000
 8001b3c:	00000400 	.word	0x00000400
 8001b40:	24009f04 	.word	0x24009f04
 8001b44:	24009f20 	.word	0x24009f20

08001b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b4c:	4b32      	ldr	r3, [pc, #200]	; (8001c18 <SystemInit+0xd0>)
 8001b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b52:	4a31      	ldr	r2, [pc, #196]	; (8001c18 <SystemInit+0xd0>)
 8001b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b5c:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <SystemInit+0xd4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d807      	bhi.n	8001b78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b68:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <SystemInit+0xd4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f023 030f 	bic.w	r3, r3, #15
 8001b70:	4a2a      	ldr	r2, [pc, #168]	; (8001c1c <SystemInit+0xd4>)
 8001b72:	f043 0303 	orr.w	r3, r3, #3
 8001b76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b78:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <SystemInit+0xd8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a28      	ldr	r2, [pc, #160]	; (8001c20 <SystemInit+0xd8>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b84:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <SystemInit+0xd8>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b8a:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <SystemInit+0xd8>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4924      	ldr	r1, [pc, #144]	; (8001c20 <SystemInit+0xd8>)
 8001b90:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <SystemInit+0xdc>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <SystemInit+0xd4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <SystemInit+0xd4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 030f 	bic.w	r3, r3, #15
 8001baa:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <SystemInit+0xd4>)
 8001bac:	f043 0303 	orr.w	r3, r3, #3
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001bb2:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <SystemInit+0xd8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001bb8:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <SystemInit+0xd8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <SystemInit+0xd8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <SystemInit+0xd8>)
 8001bc6:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <SystemInit+0xe0>)
 8001bc8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <SystemInit+0xd8>)
 8001bcc:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <SystemInit+0xe4>)
 8001bce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <SystemInit+0xd8>)
 8001bd2:	4a17      	ldr	r2, [pc, #92]	; (8001c30 <SystemInit+0xe8>)
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <SystemInit+0xd8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <SystemInit+0xd8>)
 8001bde:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <SystemInit+0xe8>)
 8001be0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <SystemInit+0xd8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <SystemInit+0xd8>)
 8001bea:	4a11      	ldr	r2, [pc, #68]	; (8001c30 <SystemInit+0xe8>)
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <SystemInit+0xd8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <SystemInit+0xd8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <SystemInit+0xd8>)
 8001bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c00:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <SystemInit+0xd8>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <SystemInit+0xec>)
 8001c08:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c0c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00
 8001c1c:	52002000 	.word	0x52002000
 8001c20:	58024400 	.word	0x58024400
 8001c24:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c28:	02020200 	.word	0x02020200
 8001c2c:	01ff0000 	.word	0x01ff0000
 8001c30:	01010280 	.word	0x01010280
 8001c34:	52004000 	.word	0x52004000

08001c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c3c:	f7ff ff84 	bl	8001b48 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c40:	480c      	ldr	r0, [pc, #48]	; (8001c74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c42:	490d      	ldr	r1, [pc, #52]	; (8001c78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c44:	4a0d      	ldr	r2, [pc, #52]	; (8001c7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c48:	e002      	b.n	8001c50 <LoopCopyDataInit>

08001c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c4e:	3304      	adds	r3, #4

08001c50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c54:	d3f9      	bcc.n	8001c4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c58:	4c0a      	ldr	r4, [pc, #40]	; (8001c84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c5c:	e001      	b.n	8001c62 <LoopFillZerobss>

08001c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c60:	3204      	adds	r2, #4

08001c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c64:	d3fb      	bcc.n	8001c5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c66:	f007 f97b 	bl	8008f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c6a:	f7ff f8b3 	bl	8000dd4 <main>
  bx  lr
 8001c6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c70:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001c74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c78:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 8001c7c:	08009980 	.word	0x08009980
  ldr r2, =_sbss
 8001c80:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8001c84:	24009f1c 	.word	0x24009f1c

08001c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c88:	e7fe      	b.n	8001c88 <ADC_IRQHandler>
	...

08001c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c92:	2003      	movs	r0, #3
 8001c94:	f000 f9a0 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c98:	f001 ff4e 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_Init+0x68>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	0a1b      	lsrs	r3, r3, #8
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	4913      	ldr	r1, [pc, #76]	; (8001cf8 <HAL_Init+0x6c>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_Init+0x68>)
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <HAL_Init+0x6c>)
 8001cc0:	5cd3      	ldrb	r3, [r2, r3]
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <HAL_Init+0x70>)
 8001cce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <HAL_Init+0x74>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f000 f814 	bl	8001d04 <HAL_InitTick>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e002      	b.n	8001cec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce6:	f7ff fc43 	bl	8001570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	58024400 	.word	0x58024400
 8001cf8:	08009904 	.word	0x08009904
 8001cfc:	24000010 	.word	0x24000010
 8001d00:	2400000c 	.word	0x2400000c

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d0c:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_InitTick+0x60>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e021      	b.n	8001d5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <HAL_InitTick+0x64>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_InitTick+0x60>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	4619      	mov	r1, r3
 8001d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f985 	bl	800203e <HAL_SYSTICK_Config>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00e      	b.n	8001d5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b0f      	cmp	r3, #15
 8001d42:	d80a      	bhi.n	8001d5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d44:	2200      	movs	r2, #0
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4c:	f000 f94f 	bl	8001fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d50:	4a06      	ldr	r2, [pc, #24]	; (8001d6c <HAL_InitTick+0x68>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e000      	b.n	8001d5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	24000018 	.word	0x24000018
 8001d68:	2400000c 	.word	0x2400000c
 8001d6c:	24000014 	.word	0x24000014

08001d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_IncTick+0x20>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_IncTick+0x24>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <HAL_IncTick+0x24>)
 8001d82:	6013      	str	r3, [r2, #0]
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	24000018 	.word	0x24000018
 8001d94:	24009f08 	.word	0x24009f08

08001d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_GetTick+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	24009f08 	.word	0x24009f08

08001db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b0ac      	sub	sp, #176	; 0xb0
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff ffee 	bl	8001d98 <HAL_GetTick>
 8001dbc:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  uint32_t wait = Delay;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dce:	d007      	beq.n	8001de0 <HAL_Delay+0x30>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dd0:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <HAL_Delay+0x7c>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dda:	4413      	add	r3, r2
 8001ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  }

 8001de0:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <HAL_Delay+0x80>)
 8001de2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001de6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001de8:	c303      	stmia	r3!, {r0, r1}
 8001dea:	801a      	strh	r2, [r3, #0]
  while ((HAL_GetTick() - tickstart) < wait)
  {
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_Delay+0x84>)
 8001dee:	60bb      	str	r3, [r7, #8]
  }
 8001df0:	e00d      	b.n	8001e0e <HAL_Delay+0x5e>
}

 8001df2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fa7a 	bl	80002f0 <strlen>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001e04:	f107 0008 	add.w	r0, r7, #8
 8001e08:	2364      	movs	r3, #100	; 0x64
 8001e0a:	f004 fbc7 	bl	800659c <HAL_UART_Transmit>
  }
 8001e0e:	f7ff ffc3 	bl	8001d98 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d8e7      	bhi.n	8001df2 <HAL_Delay+0x42>
/**
  * @brief Suspend Tick increment.
  * @note In the default implementation , SysTick timer is the source of time base. It is
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	37b0      	adds	r7, #176	; 0xb0
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	24000018 	.word	0x24000018
 8001e30:	080098f8 	.word	0x080098f8
 8001e34:	40004800 	.word	0x40004800

08001e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <__NVIC_SetPriorityGrouping+0x40>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e54:	4013      	ands	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e66:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <__NVIC_SetPriorityGrouping+0x40>)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	60d3      	str	r3, [r2, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00
 8001e7c:	05fa0000 	.word	0x05fa0000

08001e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <__NVIC_GetPriorityGrouping+0x18>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	f003 0307 	and.w	r3, r3, #7
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	db0b      	blt.n	8001ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	f003 021f 	and.w	r2, r3, #31
 8001eb4:	4907      	ldr	r1, [pc, #28]	; (8001ed4 <__NVIC_EnableIRQ+0x38>)
 8001eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000e100 	.word	0xe000e100

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	; (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	; (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa4:	d301      	bcc.n	8001faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <SysTick_Config+0x40>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f7ff ff8e 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <SysTick_Config+0x40>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <SysTick_Config+0x40>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff29 	bl	8001e38 <__NVIC_SetPriorityGrouping>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ffc:	f7ff ff40 	bl	8001e80 <__NVIC_GetPriorityGrouping>
 8002000:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	6978      	ldr	r0, [r7, #20]
 8002008:	f7ff ff90 	bl	8001f2c <NVIC_EncodePriority>
 800200c:	4602      	mov	r2, r0
 800200e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff5f 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201a:	bf00      	nop
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800202c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff33 	bl	8001e9c <__NVIC_EnableIRQ>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ffa4 	bl	8001f94 <SysTick_Config>
 800204c:	4603      	mov	r3, r0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff fe9a 	bl	8001d98 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e2dc      	b.n	800262a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d008      	beq.n	800208e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e2cd      	b.n	800262a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a76      	ldr	r2, [pc, #472]	; (800226c <HAL_DMA_Abort+0x214>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d04a      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a74      	ldr	r2, [pc, #464]	; (8002270 <HAL_DMA_Abort+0x218>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d045      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a73      	ldr	r2, [pc, #460]	; (8002274 <HAL_DMA_Abort+0x21c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d040      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a71      	ldr	r2, [pc, #452]	; (8002278 <HAL_DMA_Abort+0x220>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d03b      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a70      	ldr	r2, [pc, #448]	; (800227c <HAL_DMA_Abort+0x224>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d036      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a6e      	ldr	r2, [pc, #440]	; (8002280 <HAL_DMA_Abort+0x228>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d031      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a6d      	ldr	r2, [pc, #436]	; (8002284 <HAL_DMA_Abort+0x22c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d02c      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a6b      	ldr	r2, [pc, #428]	; (8002288 <HAL_DMA_Abort+0x230>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d027      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a6a      	ldr	r2, [pc, #424]	; (800228c <HAL_DMA_Abort+0x234>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d022      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a68      	ldr	r2, [pc, #416]	; (8002290 <HAL_DMA_Abort+0x238>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01d      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a67      	ldr	r2, [pc, #412]	; (8002294 <HAL_DMA_Abort+0x23c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d018      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a65      	ldr	r2, [pc, #404]	; (8002298 <HAL_DMA_Abort+0x240>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a64      	ldr	r2, [pc, #400]	; (800229c <HAL_DMA_Abort+0x244>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00e      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a62      	ldr	r2, [pc, #392]	; (80022a0 <HAL_DMA_Abort+0x248>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d009      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a61      	ldr	r2, [pc, #388]	; (80022a4 <HAL_DMA_Abort+0x24c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d004      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a5f      	ldr	r2, [pc, #380]	; (80022a8 <HAL_DMA_Abort+0x250>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_DMA_Abort+0xda>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_DMA_Abort+0xdc>
 8002132:	2300      	movs	r3, #0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 021e 	bic.w	r2, r2, #30
 8002146:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002156:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e00a      	b.n	8002176 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 020e 	bic.w	r2, r2, #14
 800216e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a3c      	ldr	r2, [pc, #240]	; (800226c <HAL_DMA_Abort+0x214>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d072      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a3a      	ldr	r2, [pc, #232]	; (8002270 <HAL_DMA_Abort+0x218>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d06d      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a39      	ldr	r2, [pc, #228]	; (8002274 <HAL_DMA_Abort+0x21c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d068      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a37      	ldr	r2, [pc, #220]	; (8002278 <HAL_DMA_Abort+0x220>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d063      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a36      	ldr	r2, [pc, #216]	; (800227c <HAL_DMA_Abort+0x224>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d05e      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a34      	ldr	r2, [pc, #208]	; (8002280 <HAL_DMA_Abort+0x228>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d059      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a33      	ldr	r2, [pc, #204]	; (8002284 <HAL_DMA_Abort+0x22c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d054      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a31      	ldr	r2, [pc, #196]	; (8002288 <HAL_DMA_Abort+0x230>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d04f      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a30      	ldr	r2, [pc, #192]	; (800228c <HAL_DMA_Abort+0x234>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d04a      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a2e      	ldr	r2, [pc, #184]	; (8002290 <HAL_DMA_Abort+0x238>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d045      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a2d      	ldr	r2, [pc, #180]	; (8002294 <HAL_DMA_Abort+0x23c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d040      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a2b      	ldr	r2, [pc, #172]	; (8002298 <HAL_DMA_Abort+0x240>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d03b      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a2a      	ldr	r2, [pc, #168]	; (800229c <HAL_DMA_Abort+0x244>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d036      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a28      	ldr	r2, [pc, #160]	; (80022a0 <HAL_DMA_Abort+0x248>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d031      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a27      	ldr	r2, [pc, #156]	; (80022a4 <HAL_DMA_Abort+0x24c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d02c      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <HAL_DMA_Abort+0x250>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d027      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a24      	ldr	r2, [pc, #144]	; (80022ac <HAL_DMA_Abort+0x254>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d022      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <HAL_DMA_Abort+0x258>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01d      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a21      	ldr	r2, [pc, #132]	; (80022b4 <HAL_DMA_Abort+0x25c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d018      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <HAL_DMA_Abort+0x260>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1e      	ldr	r2, [pc, #120]	; (80022bc <HAL_DMA_Abort+0x264>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00e      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <HAL_DMA_Abort+0x268>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d009      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1b      	ldr	r2, [pc, #108]	; (80022c4 <HAL_DMA_Abort+0x26c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d004      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <HAL_DMA_Abort+0x270>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d132      	bne.n	80022cc <HAL_DMA_Abort+0x274>
 8002266:	2301      	movs	r3, #1
 8002268:	e031      	b.n	80022ce <HAL_DMA_Abort+0x276>
 800226a:	bf00      	nop
 800226c:	40020010 	.word	0x40020010
 8002270:	40020028 	.word	0x40020028
 8002274:	40020040 	.word	0x40020040
 8002278:	40020058 	.word	0x40020058
 800227c:	40020070 	.word	0x40020070
 8002280:	40020088 	.word	0x40020088
 8002284:	400200a0 	.word	0x400200a0
 8002288:	400200b8 	.word	0x400200b8
 800228c:	40020410 	.word	0x40020410
 8002290:	40020428 	.word	0x40020428
 8002294:	40020440 	.word	0x40020440
 8002298:	40020458 	.word	0x40020458
 800229c:	40020470 	.word	0x40020470
 80022a0:	40020488 	.word	0x40020488
 80022a4:	400204a0 	.word	0x400204a0
 80022a8:	400204b8 	.word	0x400204b8
 80022ac:	58025408 	.word	0x58025408
 80022b0:	5802541c 	.word	0x5802541c
 80022b4:	58025430 	.word	0x58025430
 80022b8:	58025444 	.word	0x58025444
 80022bc:	58025458 	.word	0x58025458
 80022c0:	5802546c 	.word	0x5802546c
 80022c4:	58025480 	.word	0x58025480
 80022c8:	58025494 	.word	0x58025494
 80022cc:	2300      	movs	r3, #0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6d      	ldr	r2, [pc, #436]	; (800249c <HAL_DMA_Abort+0x444>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d04a      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a6b      	ldr	r2, [pc, #428]	; (80024a0 <HAL_DMA_Abort+0x448>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d045      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a6a      	ldr	r2, [pc, #424]	; (80024a4 <HAL_DMA_Abort+0x44c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d040      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a68      	ldr	r2, [pc, #416]	; (80024a8 <HAL_DMA_Abort+0x450>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d03b      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a67      	ldr	r2, [pc, #412]	; (80024ac <HAL_DMA_Abort+0x454>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d036      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a65      	ldr	r2, [pc, #404]	; (80024b0 <HAL_DMA_Abort+0x458>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d031      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a64      	ldr	r2, [pc, #400]	; (80024b4 <HAL_DMA_Abort+0x45c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d02c      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a62      	ldr	r2, [pc, #392]	; (80024b8 <HAL_DMA_Abort+0x460>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d027      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a61      	ldr	r2, [pc, #388]	; (80024bc <HAL_DMA_Abort+0x464>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d022      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a5f      	ldr	r2, [pc, #380]	; (80024c0 <HAL_DMA_Abort+0x468>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01d      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a5e      	ldr	r2, [pc, #376]	; (80024c4 <HAL_DMA_Abort+0x46c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d018      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a5c      	ldr	r2, [pc, #368]	; (80024c8 <HAL_DMA_Abort+0x470>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d013      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a5b      	ldr	r2, [pc, #364]	; (80024cc <HAL_DMA_Abort+0x474>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d00e      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a59      	ldr	r2, [pc, #356]	; (80024d0 <HAL_DMA_Abort+0x478>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d009      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a58      	ldr	r2, [pc, #352]	; (80024d4 <HAL_DMA_Abort+0x47c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d004      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a56      	ldr	r2, [pc, #344]	; (80024d8 <HAL_DMA_Abort+0x480>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d108      	bne.n	8002394 <HAL_DMA_Abort+0x33c>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0201 	bic.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e007      	b.n	80023a4 <HAL_DMA_Abort+0x34c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0201 	bic.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80023a4:	e013      	b.n	80023ce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023a6:	f7ff fcf7 	bl	8001d98 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b05      	cmp	r3, #5
 80023b2:	d90c      	bls.n	80023ce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2203      	movs	r2, #3
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e12d      	b.n	800262a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1e5      	bne.n	80023a6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a2f      	ldr	r2, [pc, #188]	; (800249c <HAL_DMA_Abort+0x444>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d04a      	beq.n	800247a <HAL_DMA_Abort+0x422>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a2d      	ldr	r2, [pc, #180]	; (80024a0 <HAL_DMA_Abort+0x448>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d045      	beq.n	800247a <HAL_DMA_Abort+0x422>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a2c      	ldr	r2, [pc, #176]	; (80024a4 <HAL_DMA_Abort+0x44c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d040      	beq.n	800247a <HAL_DMA_Abort+0x422>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2a      	ldr	r2, [pc, #168]	; (80024a8 <HAL_DMA_Abort+0x450>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d03b      	beq.n	800247a <HAL_DMA_Abort+0x422>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a29      	ldr	r2, [pc, #164]	; (80024ac <HAL_DMA_Abort+0x454>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d036      	beq.n	800247a <HAL_DMA_Abort+0x422>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a27      	ldr	r2, [pc, #156]	; (80024b0 <HAL_DMA_Abort+0x458>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d031      	beq.n	800247a <HAL_DMA_Abort+0x422>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a26      	ldr	r2, [pc, #152]	; (80024b4 <HAL_DMA_Abort+0x45c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d02c      	beq.n	800247a <HAL_DMA_Abort+0x422>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a24      	ldr	r2, [pc, #144]	; (80024b8 <HAL_DMA_Abort+0x460>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d027      	beq.n	800247a <HAL_DMA_Abort+0x422>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a23      	ldr	r2, [pc, #140]	; (80024bc <HAL_DMA_Abort+0x464>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d022      	beq.n	800247a <HAL_DMA_Abort+0x422>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a21      	ldr	r2, [pc, #132]	; (80024c0 <HAL_DMA_Abort+0x468>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01d      	beq.n	800247a <HAL_DMA_Abort+0x422>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a20      	ldr	r2, [pc, #128]	; (80024c4 <HAL_DMA_Abort+0x46c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d018      	beq.n	800247a <HAL_DMA_Abort+0x422>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a1e      	ldr	r2, [pc, #120]	; (80024c8 <HAL_DMA_Abort+0x470>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_DMA_Abort+0x422>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <HAL_DMA_Abort+0x474>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00e      	beq.n	800247a <HAL_DMA_Abort+0x422>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <HAL_DMA_Abort+0x478>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d009      	beq.n	800247a <HAL_DMA_Abort+0x422>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <HAL_DMA_Abort+0x47c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d004      	beq.n	800247a <HAL_DMA_Abort+0x422>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a18      	ldr	r2, [pc, #96]	; (80024d8 <HAL_DMA_Abort+0x480>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d101      	bne.n	800247e <HAL_DMA_Abort+0x426>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_DMA_Abort+0x428>
 800247e:	2300      	movs	r3, #0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d02b      	beq.n	80024dc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002488:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	223f      	movs	r2, #63	; 0x3f
 8002494:	409a      	lsls	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	e02a      	b.n	80024f2 <HAL_DMA_Abort+0x49a>
 800249c:	40020010 	.word	0x40020010
 80024a0:	40020028 	.word	0x40020028
 80024a4:	40020040 	.word	0x40020040
 80024a8:	40020058 	.word	0x40020058
 80024ac:	40020070 	.word	0x40020070
 80024b0:	40020088 	.word	0x40020088
 80024b4:	400200a0 	.word	0x400200a0
 80024b8:	400200b8 	.word	0x400200b8
 80024bc:	40020410 	.word	0x40020410
 80024c0:	40020428 	.word	0x40020428
 80024c4:	40020440 	.word	0x40020440
 80024c8:	40020458 	.word	0x40020458
 80024cc:	40020470 	.word	0x40020470
 80024d0:	40020488 	.word	0x40020488
 80024d4:	400204a0 	.word	0x400204a0
 80024d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	2201      	movs	r2, #1
 80024ec:	409a      	lsls	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a4f      	ldr	r2, [pc, #316]	; (8002634 <HAL_DMA_Abort+0x5dc>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d072      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a4d      	ldr	r2, [pc, #308]	; (8002638 <HAL_DMA_Abort+0x5e0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d06d      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a4c      	ldr	r2, [pc, #304]	; (800263c <HAL_DMA_Abort+0x5e4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d068      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a4a      	ldr	r2, [pc, #296]	; (8002640 <HAL_DMA_Abort+0x5e8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d063      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a49      	ldr	r2, [pc, #292]	; (8002644 <HAL_DMA_Abort+0x5ec>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d05e      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a47      	ldr	r2, [pc, #284]	; (8002648 <HAL_DMA_Abort+0x5f0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d059      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a46      	ldr	r2, [pc, #280]	; (800264c <HAL_DMA_Abort+0x5f4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d054      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a44      	ldr	r2, [pc, #272]	; (8002650 <HAL_DMA_Abort+0x5f8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d04f      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a43      	ldr	r2, [pc, #268]	; (8002654 <HAL_DMA_Abort+0x5fc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d04a      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a41      	ldr	r2, [pc, #260]	; (8002658 <HAL_DMA_Abort+0x600>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d045      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a40      	ldr	r2, [pc, #256]	; (800265c <HAL_DMA_Abort+0x604>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d040      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a3e      	ldr	r2, [pc, #248]	; (8002660 <HAL_DMA_Abort+0x608>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d03b      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a3d      	ldr	r2, [pc, #244]	; (8002664 <HAL_DMA_Abort+0x60c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d036      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a3b      	ldr	r2, [pc, #236]	; (8002668 <HAL_DMA_Abort+0x610>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d031      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a3a      	ldr	r2, [pc, #232]	; (800266c <HAL_DMA_Abort+0x614>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d02c      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a38      	ldr	r2, [pc, #224]	; (8002670 <HAL_DMA_Abort+0x618>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d027      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a37      	ldr	r2, [pc, #220]	; (8002674 <HAL_DMA_Abort+0x61c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d022      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a35      	ldr	r2, [pc, #212]	; (8002678 <HAL_DMA_Abort+0x620>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01d      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a34      	ldr	r2, [pc, #208]	; (800267c <HAL_DMA_Abort+0x624>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d018      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a32      	ldr	r2, [pc, #200]	; (8002680 <HAL_DMA_Abort+0x628>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a31      	ldr	r2, [pc, #196]	; (8002684 <HAL_DMA_Abort+0x62c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00e      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2f      	ldr	r2, [pc, #188]	; (8002688 <HAL_DMA_Abort+0x630>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d009      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a2e      	ldr	r2, [pc, #184]	; (800268c <HAL_DMA_Abort+0x634>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d004      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a2c      	ldr	r2, [pc, #176]	; (8002690 <HAL_DMA_Abort+0x638>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_DMA_Abort+0x58e>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_DMA_Abort+0x590>
 80025e6:	2300      	movs	r3, #0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d015      	beq.n	8002618 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025f4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00c      	beq.n	8002618 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002608:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800260c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002616:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40020010 	.word	0x40020010
 8002638:	40020028 	.word	0x40020028
 800263c:	40020040 	.word	0x40020040
 8002640:	40020058 	.word	0x40020058
 8002644:	40020070 	.word	0x40020070
 8002648:	40020088 	.word	0x40020088
 800264c:	400200a0 	.word	0x400200a0
 8002650:	400200b8 	.word	0x400200b8
 8002654:	40020410 	.word	0x40020410
 8002658:	40020428 	.word	0x40020428
 800265c:	40020440 	.word	0x40020440
 8002660:	40020458 	.word	0x40020458
 8002664:	40020470 	.word	0x40020470
 8002668:	40020488 	.word	0x40020488
 800266c:	400204a0 	.word	0x400204a0
 8002670:	400204b8 	.word	0x400204b8
 8002674:	58025408 	.word	0x58025408
 8002678:	5802541c 	.word	0x5802541c
 800267c:	58025430 	.word	0x58025430
 8002680:	58025444 	.word	0x58025444
 8002684:	58025458 	.word	0x58025458
 8002688:	5802546c 	.word	0x5802546c
 800268c:	58025480 	.word	0x58025480
 8002690:	58025494 	.word	0x58025494

08002694 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e237      	b.n	8002b16 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d004      	beq.n	80026bc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2280      	movs	r2, #128	; 0x80
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e22c      	b.n	8002b16 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a5c      	ldr	r2, [pc, #368]	; (8002834 <HAL_DMA_Abort_IT+0x1a0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d04a      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5b      	ldr	r2, [pc, #364]	; (8002838 <HAL_DMA_Abort_IT+0x1a4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d045      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a59      	ldr	r2, [pc, #356]	; (800283c <HAL_DMA_Abort_IT+0x1a8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d040      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a58      	ldr	r2, [pc, #352]	; (8002840 <HAL_DMA_Abort_IT+0x1ac>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d03b      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a56      	ldr	r2, [pc, #344]	; (8002844 <HAL_DMA_Abort_IT+0x1b0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d036      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a55      	ldr	r2, [pc, #340]	; (8002848 <HAL_DMA_Abort_IT+0x1b4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d031      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a53      	ldr	r2, [pc, #332]	; (800284c <HAL_DMA_Abort_IT+0x1b8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d02c      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a52      	ldr	r2, [pc, #328]	; (8002850 <HAL_DMA_Abort_IT+0x1bc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d027      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a50      	ldr	r2, [pc, #320]	; (8002854 <HAL_DMA_Abort_IT+0x1c0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d022      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a4f      	ldr	r2, [pc, #316]	; (8002858 <HAL_DMA_Abort_IT+0x1c4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d01d      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a4d      	ldr	r2, [pc, #308]	; (800285c <HAL_DMA_Abort_IT+0x1c8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d018      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a4c      	ldr	r2, [pc, #304]	; (8002860 <HAL_DMA_Abort_IT+0x1cc>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d013      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a4a      	ldr	r2, [pc, #296]	; (8002864 <HAL_DMA_Abort_IT+0x1d0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00e      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a49      	ldr	r2, [pc, #292]	; (8002868 <HAL_DMA_Abort_IT+0x1d4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d009      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a47      	ldr	r2, [pc, #284]	; (800286c <HAL_DMA_Abort_IT+0x1d8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d004      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a46      	ldr	r2, [pc, #280]	; (8002870 <HAL_DMA_Abort_IT+0x1dc>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d101      	bne.n	8002760 <HAL_DMA_Abort_IT+0xcc>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <HAL_DMA_Abort_IT+0xce>
 8002760:	2300      	movs	r3, #0
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8086 	beq.w	8002874 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2204      	movs	r2, #4
 800276c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a2f      	ldr	r2, [pc, #188]	; (8002834 <HAL_DMA_Abort_IT+0x1a0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d04a      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2e      	ldr	r2, [pc, #184]	; (8002838 <HAL_DMA_Abort_IT+0x1a4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d045      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a2c      	ldr	r2, [pc, #176]	; (800283c <HAL_DMA_Abort_IT+0x1a8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d040      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a2b      	ldr	r2, [pc, #172]	; (8002840 <HAL_DMA_Abort_IT+0x1ac>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d03b      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a29      	ldr	r2, [pc, #164]	; (8002844 <HAL_DMA_Abort_IT+0x1b0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d036      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a28      	ldr	r2, [pc, #160]	; (8002848 <HAL_DMA_Abort_IT+0x1b4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d031      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a26      	ldr	r2, [pc, #152]	; (800284c <HAL_DMA_Abort_IT+0x1b8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d02c      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a25      	ldr	r2, [pc, #148]	; (8002850 <HAL_DMA_Abort_IT+0x1bc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d027      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a23      	ldr	r2, [pc, #140]	; (8002854 <HAL_DMA_Abort_IT+0x1c0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d022      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a22      	ldr	r2, [pc, #136]	; (8002858 <HAL_DMA_Abort_IT+0x1c4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d01d      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a20      	ldr	r2, [pc, #128]	; (800285c <HAL_DMA_Abort_IT+0x1c8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d018      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1f      	ldr	r2, [pc, #124]	; (8002860 <HAL_DMA_Abort_IT+0x1cc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d013      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <HAL_DMA_Abort_IT+0x1d0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00e      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1c      	ldr	r2, [pc, #112]	; (8002868 <HAL_DMA_Abort_IT+0x1d4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d009      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1a      	ldr	r2, [pc, #104]	; (800286c <HAL_DMA_Abort_IT+0x1d8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d004      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a19      	ldr	r2, [pc, #100]	; (8002870 <HAL_DMA_Abort_IT+0x1dc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d108      	bne.n	8002822 <HAL_DMA_Abort_IT+0x18e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e178      	b.n	8002b14 <HAL_DMA_Abort_IT+0x480>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	e16f      	b.n	8002b14 <HAL_DMA_Abort_IT+0x480>
 8002834:	40020010 	.word	0x40020010
 8002838:	40020028 	.word	0x40020028
 800283c:	40020040 	.word	0x40020040
 8002840:	40020058 	.word	0x40020058
 8002844:	40020070 	.word	0x40020070
 8002848:	40020088 	.word	0x40020088
 800284c:	400200a0 	.word	0x400200a0
 8002850:	400200b8 	.word	0x400200b8
 8002854:	40020410 	.word	0x40020410
 8002858:	40020428 	.word	0x40020428
 800285c:	40020440 	.word	0x40020440
 8002860:	40020458 	.word	0x40020458
 8002864:	40020470 	.word	0x40020470
 8002868:	40020488 	.word	0x40020488
 800286c:	400204a0 	.word	0x400204a0
 8002870:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 020e 	bic.w	r2, r2, #14
 8002882:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a6c      	ldr	r2, [pc, #432]	; (8002a3c <HAL_DMA_Abort_IT+0x3a8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d04a      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6b      	ldr	r2, [pc, #428]	; (8002a40 <HAL_DMA_Abort_IT+0x3ac>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d045      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a69      	ldr	r2, [pc, #420]	; (8002a44 <HAL_DMA_Abort_IT+0x3b0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d040      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a68      	ldr	r2, [pc, #416]	; (8002a48 <HAL_DMA_Abort_IT+0x3b4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d03b      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a66      	ldr	r2, [pc, #408]	; (8002a4c <HAL_DMA_Abort_IT+0x3b8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d036      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a65      	ldr	r2, [pc, #404]	; (8002a50 <HAL_DMA_Abort_IT+0x3bc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d031      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a63      	ldr	r2, [pc, #396]	; (8002a54 <HAL_DMA_Abort_IT+0x3c0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d02c      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a62      	ldr	r2, [pc, #392]	; (8002a58 <HAL_DMA_Abort_IT+0x3c4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d027      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a60      	ldr	r2, [pc, #384]	; (8002a5c <HAL_DMA_Abort_IT+0x3c8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d022      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a5f      	ldr	r2, [pc, #380]	; (8002a60 <HAL_DMA_Abort_IT+0x3cc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d01d      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a5d      	ldr	r2, [pc, #372]	; (8002a64 <HAL_DMA_Abort_IT+0x3d0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d018      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a5c      	ldr	r2, [pc, #368]	; (8002a68 <HAL_DMA_Abort_IT+0x3d4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d013      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a5a      	ldr	r2, [pc, #360]	; (8002a6c <HAL_DMA_Abort_IT+0x3d8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00e      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a59      	ldr	r2, [pc, #356]	; (8002a70 <HAL_DMA_Abort_IT+0x3dc>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d009      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a57      	ldr	r2, [pc, #348]	; (8002a74 <HAL_DMA_Abort_IT+0x3e0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d004      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a56      	ldr	r2, [pc, #344]	; (8002a78 <HAL_DMA_Abort_IT+0x3e4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d108      	bne.n	8002936 <HAL_DMA_Abort_IT+0x2a2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	e007      	b.n	8002946 <HAL_DMA_Abort_IT+0x2b2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0201 	bic.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a3c      	ldr	r2, [pc, #240]	; (8002a3c <HAL_DMA_Abort_IT+0x3a8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d072      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a3a      	ldr	r2, [pc, #232]	; (8002a40 <HAL_DMA_Abort_IT+0x3ac>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d06d      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a39      	ldr	r2, [pc, #228]	; (8002a44 <HAL_DMA_Abort_IT+0x3b0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d068      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a37      	ldr	r2, [pc, #220]	; (8002a48 <HAL_DMA_Abort_IT+0x3b4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d063      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a36      	ldr	r2, [pc, #216]	; (8002a4c <HAL_DMA_Abort_IT+0x3b8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d05e      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a34      	ldr	r2, [pc, #208]	; (8002a50 <HAL_DMA_Abort_IT+0x3bc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d059      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a33      	ldr	r2, [pc, #204]	; (8002a54 <HAL_DMA_Abort_IT+0x3c0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d054      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a31      	ldr	r2, [pc, #196]	; (8002a58 <HAL_DMA_Abort_IT+0x3c4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d04f      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a30      	ldr	r2, [pc, #192]	; (8002a5c <HAL_DMA_Abort_IT+0x3c8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d04a      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a2e      	ldr	r2, [pc, #184]	; (8002a60 <HAL_DMA_Abort_IT+0x3cc>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d045      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a2d      	ldr	r2, [pc, #180]	; (8002a64 <HAL_DMA_Abort_IT+0x3d0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d040      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a2b      	ldr	r2, [pc, #172]	; (8002a68 <HAL_DMA_Abort_IT+0x3d4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d03b      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a2a      	ldr	r2, [pc, #168]	; (8002a6c <HAL_DMA_Abort_IT+0x3d8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d036      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a28      	ldr	r2, [pc, #160]	; (8002a70 <HAL_DMA_Abort_IT+0x3dc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d031      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a27      	ldr	r2, [pc, #156]	; (8002a74 <HAL_DMA_Abort_IT+0x3e0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d02c      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a25      	ldr	r2, [pc, #148]	; (8002a78 <HAL_DMA_Abort_IT+0x3e4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d027      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <HAL_DMA_Abort_IT+0x3e8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d022      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a22      	ldr	r2, [pc, #136]	; (8002a80 <HAL_DMA_Abort_IT+0x3ec>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01d      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a21      	ldr	r2, [pc, #132]	; (8002a84 <HAL_DMA_Abort_IT+0x3f0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d018      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <HAL_DMA_Abort_IT+0x3f4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1e      	ldr	r2, [pc, #120]	; (8002a8c <HAL_DMA_Abort_IT+0x3f8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00e      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <HAL_DMA_Abort_IT+0x3fc>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d009      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <HAL_DMA_Abort_IT+0x400>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d004      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a19      	ldr	r2, [pc, #100]	; (8002a98 <HAL_DMA_Abort_IT+0x404>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d132      	bne.n	8002a9c <HAL_DMA_Abort_IT+0x408>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e031      	b.n	8002a9e <HAL_DMA_Abort_IT+0x40a>
 8002a3a:	bf00      	nop
 8002a3c:	40020010 	.word	0x40020010
 8002a40:	40020028 	.word	0x40020028
 8002a44:	40020040 	.word	0x40020040
 8002a48:	40020058 	.word	0x40020058
 8002a4c:	40020070 	.word	0x40020070
 8002a50:	40020088 	.word	0x40020088
 8002a54:	400200a0 	.word	0x400200a0
 8002a58:	400200b8 	.word	0x400200b8
 8002a5c:	40020410 	.word	0x40020410
 8002a60:	40020428 	.word	0x40020428
 8002a64:	40020440 	.word	0x40020440
 8002a68:	40020458 	.word	0x40020458
 8002a6c:	40020470 	.word	0x40020470
 8002a70:	40020488 	.word	0x40020488
 8002a74:	400204a0 	.word	0x400204a0
 8002a78:	400204b8 	.word	0x400204b8
 8002a7c:	58025408 	.word	0x58025408
 8002a80:	5802541c 	.word	0x5802541c
 8002a84:	58025430 	.word	0x58025430
 8002a88:	58025444 	.word	0x58025444
 8002a8c:	58025458 	.word	0x58025458
 8002a90:	5802546c 	.word	0x5802546c
 8002a94:	58025480 	.word	0x58025480
 8002a98:	58025494 	.word	0x58025494
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d028      	beq.n	8002af4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ab0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ad0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00c      	beq.n	8002af4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002af2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop

08002b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b2e:	4b89      	ldr	r3, [pc, #548]	; (8002d54 <HAL_GPIO_Init+0x234>)
 8002b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b32:	e194      	b.n	8002e5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2101      	movs	r1, #1
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8186 	beq.w	8002e58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d005      	beq.n	8002b64 <HAL_GPIO_Init+0x44>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d130      	bne.n	8002bc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2203      	movs	r2, #3
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	f003 0201 	and.w	r2, r3, #1
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d017      	beq.n	8002c02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d123      	bne.n	8002c56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	220f      	movs	r2, #15
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	08da      	lsrs	r2, r3, #3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3208      	adds	r2, #8
 8002c50:	69b9      	ldr	r1, [r7, #24]
 8002c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2203      	movs	r2, #3
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0203 	and.w	r2, r3, #3
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 80e0 	beq.w	8002e58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c98:	4b2f      	ldr	r3, [pc, #188]	; (8002d58 <HAL_GPIO_Init+0x238>)
 8002c9a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002c9e:	4a2e      	ldr	r2, [pc, #184]	; (8002d58 <HAL_GPIO_Init+0x238>)
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002ca8:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <HAL_GPIO_Init+0x238>)
 8002caa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cb6:	4a29      	ldr	r2, [pc, #164]	; (8002d5c <HAL_GPIO_Init+0x23c>)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a20      	ldr	r2, [pc, #128]	; (8002d60 <HAL_GPIO_Init+0x240>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d052      	beq.n	8002d88 <HAL_GPIO_Init+0x268>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <HAL_GPIO_Init+0x244>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d031      	beq.n	8002d4e <HAL_GPIO_Init+0x22e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <HAL_GPIO_Init+0x248>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d02b      	beq.n	8002d4a <HAL_GPIO_Init+0x22a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a1d      	ldr	r2, [pc, #116]	; (8002d6c <HAL_GPIO_Init+0x24c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d025      	beq.n	8002d46 <HAL_GPIO_Init+0x226>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <HAL_GPIO_Init+0x250>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01f      	beq.n	8002d42 <HAL_GPIO_Init+0x222>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a1b      	ldr	r2, [pc, #108]	; (8002d74 <HAL_GPIO_Init+0x254>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d019      	beq.n	8002d3e <HAL_GPIO_Init+0x21e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a1a      	ldr	r2, [pc, #104]	; (8002d78 <HAL_GPIO_Init+0x258>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <HAL_GPIO_Init+0x21a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <HAL_GPIO_Init+0x25c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00d      	beq.n	8002d36 <HAL_GPIO_Init+0x216>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a18      	ldr	r2, [pc, #96]	; (8002d80 <HAL_GPIO_Init+0x260>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d007      	beq.n	8002d32 <HAL_GPIO_Init+0x212>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <HAL_GPIO_Init+0x264>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d101      	bne.n	8002d2e <HAL_GPIO_Init+0x20e>
 8002d2a:	2309      	movs	r3, #9
 8002d2c:	e02d      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d2e:	230a      	movs	r3, #10
 8002d30:	e02b      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d32:	2308      	movs	r3, #8
 8002d34:	e029      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d36:	2307      	movs	r3, #7
 8002d38:	e027      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d3a:	2306      	movs	r3, #6
 8002d3c:	e025      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d3e:	2305      	movs	r3, #5
 8002d40:	e023      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d42:	2304      	movs	r3, #4
 8002d44:	e021      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d46:	2303      	movs	r3, #3
 8002d48:	e01f      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e01d      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e01b      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d52:	bf00      	nop
 8002d54:	58000080 	.word	0x58000080
 8002d58:	58024400 	.word	0x58024400
 8002d5c:	58000400 	.word	0x58000400
 8002d60:	58020000 	.word	0x58020000
 8002d64:	58020400 	.word	0x58020400
 8002d68:	58020800 	.word	0x58020800
 8002d6c:	58020c00 	.word	0x58020c00
 8002d70:	58021000 	.word	0x58021000
 8002d74:	58021400 	.word	0x58021400
 8002d78:	58021800 	.word	0x58021800
 8002d7c:	58021c00 	.word	0x58021c00
 8002d80:	58022000 	.word	0x58022000
 8002d84:	58022400 	.word	0x58022400
 8002d88:	2300      	movs	r3, #0
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	f002 0203 	and.w	r2, r2, #3
 8002d90:	0092      	lsls	r2, r2, #2
 8002d92:	4093      	lsls	r3, r2
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d9a:	4938      	ldr	r1, [pc, #224]	; (8002e7c <HAL_GPIO_Init+0x35c>)
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	089b      	lsrs	r3, r3, #2
 8002da0:	3302      	adds	r3, #2
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f47f ae63 	bne.w	8002b34 <HAL_GPIO_Init+0x14>
  }
}
 8002e6e:	bf00      	nop
 8002e70:	bf00      	nop
 8002e72:	3724      	adds	r7, #36	; 0x24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	58000400 	.word	0x58000400

08002e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e90:	787b      	ldrb	r3, [r7, #1]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e96:	887a      	ldrh	r2, [r7, #2]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e9c:	e003      	b.n	8002ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e9e:	887b      	ldrh	r3, [r7, #2]
 8002ea0:	041a      	lsls	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	619a      	str	r2, [r3, #24]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002ebc:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	2b06      	cmp	r3, #6
 8002ec6:	d00a      	beq.n	8002ede <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ec8:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <HAL_PWREx_ConfigSupply+0xb0>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d001      	beq.n	8002eda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e040      	b.n	8002f5c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e03e      	b.n	8002f5c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ede:	4b21      	ldr	r3, [pc, #132]	; (8002f64 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002ee6:	491f      	ldr	r1, [pc, #124]	; (8002f64 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002eee:	f7fe ff53 	bl	8001d98 <HAL_GetTick>
 8002ef2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ef4:	e009      	b.n	8002f0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ef6:	f7fe ff4f 	bl	8001d98 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f04:	d901      	bls.n	8002f0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e028      	b.n	8002f5c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f0a:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f16:	d1ee      	bne.n	8002ef6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b1e      	cmp	r3, #30
 8002f1c:	d008      	beq.n	8002f30 <HAL_PWREx_ConfigSupply+0x7c>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b2e      	cmp	r3, #46	; 0x2e
 8002f22:	d005      	beq.n	8002f30 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b1d      	cmp	r3, #29
 8002f28:	d002      	beq.n	8002f30 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b2d      	cmp	r3, #45	; 0x2d
 8002f2e:	d114      	bne.n	8002f5a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002f30:	f7fe ff32 	bl	8001d98 <HAL_GetTick>
 8002f34:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f36:	e009      	b.n	8002f4c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f38:	f7fe ff2e 	bl	8001d98 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f46:	d901      	bls.n	8002f4c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e007      	b.n	8002f5c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f58:	d1ee      	bne.n	8002f38 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	58024800 	.word	0x58024800

08002f68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08c      	sub	sp, #48	; 0x30
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d102      	bne.n	8002f7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f000 bc1f 	b.w	80037ba <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80b3 	beq.w	80030f0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f8a:	4b95      	ldr	r3, [pc, #596]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f94:	4b92      	ldr	r3, [pc, #584]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d007      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x48>
 8002fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa2:	2b18      	cmp	r3, #24
 8002fa4:	d112      	bne.n	8002fcc <HAL_RCC_OscConfig+0x64>
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d10d      	bne.n	8002fcc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb0:	4b8b      	ldr	r3, [pc, #556]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8098 	beq.w	80030ee <HAL_RCC_OscConfig+0x186>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f040 8093 	bne.w	80030ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e3f6      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd4:	d106      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x7c>
 8002fd6:	4b82      	ldr	r3, [pc, #520]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a81      	ldr	r2, [pc, #516]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8002fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	e058      	b.n	8003096 <HAL_RCC_OscConfig+0x12e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d112      	bne.n	8003012 <HAL_RCC_OscConfig+0xaa>
 8002fec:	4b7c      	ldr	r3, [pc, #496]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a7b      	ldr	r2, [pc, #492]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8002ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	4b79      	ldr	r3, [pc, #484]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a78      	ldr	r2, [pc, #480]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8002ffe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	4b76      	ldr	r3, [pc, #472]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a75      	ldr	r2, [pc, #468]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 800300a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	e041      	b.n	8003096 <HAL_RCC_OscConfig+0x12e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800301a:	d112      	bne.n	8003042 <HAL_RCC_OscConfig+0xda>
 800301c:	4b70      	ldr	r3, [pc, #448]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6f      	ldr	r2, [pc, #444]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8003022:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	4b6d      	ldr	r3, [pc, #436]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a6c      	ldr	r2, [pc, #432]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 800302e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a69      	ldr	r2, [pc, #420]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 800303a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	e029      	b.n	8003096 <HAL_RCC_OscConfig+0x12e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800304a:	d112      	bne.n	8003072 <HAL_RCC_OscConfig+0x10a>
 800304c:	4b64      	ldr	r3, [pc, #400]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a63      	ldr	r2, [pc, #396]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8003052:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	4b61      	ldr	r3, [pc, #388]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a60      	ldr	r2, [pc, #384]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 800305e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	4b5e      	ldr	r3, [pc, #376]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a5d      	ldr	r2, [pc, #372]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 800306a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	e011      	b.n	8003096 <HAL_RCC_OscConfig+0x12e>
 8003072:	4b5b      	ldr	r3, [pc, #364]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a5a      	ldr	r2, [pc, #360]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8003078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	4b58      	ldr	r3, [pc, #352]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a57      	ldr	r2, [pc, #348]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8003084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b55      	ldr	r3, [pc, #340]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a54      	ldr	r2, [pc, #336]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8003090:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003094:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d013      	beq.n	80030c6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fe fe7b 	bl	8001d98 <HAL_GetTick>
 80030a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a6:	f7fe fe77 	bl	8001d98 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b64      	cmp	r3, #100	; 0x64
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e380      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030b8:	4b49      	ldr	r3, [pc, #292]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x13e>
 80030c4:	e014      	b.n	80030f0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c6:	f7fe fe67 	bl	8001d98 <HAL_GetTick>
 80030ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ce:	f7fe fe63 	bl	8001d98 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b64      	cmp	r3, #100	; 0x64
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e36c      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030e0:	4b3f      	ldr	r3, [pc, #252]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f0      	bne.n	80030ce <HAL_RCC_OscConfig+0x166>
 80030ec:	e000      	b.n	80030f0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 808c 	beq.w	8003216 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fe:	4b38      	ldr	r3, [pc, #224]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003106:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003108:	4b35      	ldr	r3, [pc, #212]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <HAL_RCC_OscConfig+0x1bc>
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	2b18      	cmp	r3, #24
 8003118:	d137      	bne.n	800318a <HAL_RCC_OscConfig+0x222>
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d132      	bne.n	800318a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003124:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_OscConfig+0x1d4>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e33e      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800313c:	4b28      	ldr	r3, [pc, #160]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f023 0219 	bic.w	r2, r3, #25
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4925      	ldr	r1, [pc, #148]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314e:	f7fe fe23 	bl	8001d98 <HAL_GetTick>
 8003152:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003156:	f7fe fe1f 	bl	8001d98 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e328      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003168:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003174:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	061b      	lsls	r3, r3, #24
 8003182:	4917      	ldr	r1, [pc, #92]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003188:	e045      	b.n	8003216 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d028      	beq.n	80031e4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003192:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 0219 	bic.w	r2, r3, #25
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	4910      	ldr	r1, [pc, #64]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fe fdf8 	bl	8001d98 <HAL_GetTick>
 80031a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ac:	f7fe fdf4 	bl	8001d98 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e2fd      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	061b      	lsls	r3, r3, #24
 80031d8:	4901      	ldr	r1, [pc, #4]	; (80031e0 <HAL_RCC_OscConfig+0x278>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	604b      	str	r3, [r1, #4]
 80031de:	e01a      	b.n	8003216 <HAL_RCC_OscConfig+0x2ae>
 80031e0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e4:	4b97      	ldr	r3, [pc, #604]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a96      	ldr	r2, [pc, #600]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80031ea:	f023 0301 	bic.w	r3, r3, #1
 80031ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe fdd2 	bl	8001d98 <HAL_GetTick>
 80031f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f8:	f7fe fdce 	bl	8001d98 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e2d7      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800320a:	4b8e      	ldr	r3, [pc, #568]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b00      	cmp	r3, #0
 8003220:	d06a      	beq.n	80032f8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003222:	4b88      	ldr	r3, [pc, #544]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800322a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800322c:	4b85      	ldr	r3, [pc, #532]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b08      	cmp	r3, #8
 8003236:	d007      	beq.n	8003248 <HAL_RCC_OscConfig+0x2e0>
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b18      	cmp	r3, #24
 800323c:	d11b      	bne.n	8003276 <HAL_RCC_OscConfig+0x30e>
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d116      	bne.n	8003276 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003248:	4b7e      	ldr	r3, [pc, #504]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_RCC_OscConfig+0x2f8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	2b80      	cmp	r3, #128	; 0x80
 800325a:	d001      	beq.n	8003260 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e2ac      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003260:	4b78      	ldr	r3, [pc, #480]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	061b      	lsls	r3, r3, #24
 800326e:	4975      	ldr	r1, [pc, #468]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003270:	4313      	orrs	r3, r2
 8003272:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003274:	e040      	b.n	80032f8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d023      	beq.n	80032c6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800327e:	4b71      	ldr	r3, [pc, #452]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a70      	ldr	r2, [pc, #448]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328a:	f7fe fd85 	bl	8001d98 <HAL_GetTick>
 800328e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003292:	f7fe fd81 	bl	8001d98 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e28a      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032a4:	4b67      	ldr	r3, [pc, #412]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032b0:	4b64      	ldr	r3, [pc, #400]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	061b      	lsls	r3, r3, #24
 80032be:	4961      	ldr	r1, [pc, #388]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60cb      	str	r3, [r1, #12]
 80032c4:	e018      	b.n	80032f8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80032c6:	4b5f      	ldr	r3, [pc, #380]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a5e      	ldr	r2, [pc, #376]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80032cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d2:	f7fe fd61 	bl	8001d98 <HAL_GetTick>
 80032d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80032da:	f7fe fd5d 	bl	8001d98 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e266      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032ec:	4b55      	ldr	r3, [pc, #340]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1f0      	bne.n	80032da <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d036      	beq.n	8003372 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d019      	beq.n	8003340 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800330c:	4b4d      	ldr	r3, [pc, #308]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 800330e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003310:	4a4c      	ldr	r2, [pc, #304]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fe fd3e 	bl	8001d98 <HAL_GetTick>
 800331c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003320:	f7fe fd3a 	bl	8001d98 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e243      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003332:	4b44      	ldr	r3, [pc, #272]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0x3b8>
 800333e:	e018      	b.n	8003372 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003340:	4b40      	ldr	r3, [pc, #256]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003344:	4a3f      	ldr	r2, [pc, #252]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fe fd24 	bl	8001d98 <HAL_GetTick>
 8003350:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003354:	f7fe fd20 	bl	8001d98 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e229      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003366:	4b37      	ldr	r3, [pc, #220]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b00      	cmp	r3, #0
 800337c:	d036      	beq.n	80033ec <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d019      	beq.n	80033ba <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003386:	4b2f      	ldr	r3, [pc, #188]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a2e      	ldr	r2, [pc, #184]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 800338c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003390:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003392:	f7fe fd01 	bl	8001d98 <HAL_GetTick>
 8003396:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800339a:	f7fe fcfd 	bl	8001d98 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e206      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033ac:	4b25      	ldr	r3, [pc, #148]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f0      	beq.n	800339a <HAL_RCC_OscConfig+0x432>
 80033b8:	e018      	b.n	80033ec <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033ba:	4b22      	ldr	r3, [pc, #136]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a21      	ldr	r2, [pc, #132]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80033c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033c6:	f7fe fce7 	bl	8001d98 <HAL_GetTick>
 80033ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033ce:	f7fe fce3 	bl	8001d98 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e1ec      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033e0:	4b18      	ldr	r3, [pc, #96]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f0      	bne.n	80033ce <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80af 	beq.w	8003558 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033fa:	4b13      	ldr	r3, [pc, #76]	; (8003448 <HAL_RCC_OscConfig+0x4e0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a12      	ldr	r2, [pc, #72]	; (8003448 <HAL_RCC_OscConfig+0x4e0>)
 8003400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003404:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003406:	f7fe fcc7 	bl	8001d98 <HAL_GetTick>
 800340a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340e:	f7fe fcc3 	bl	8001d98 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b64      	cmp	r3, #100	; 0x64
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e1cc      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_RCC_OscConfig+0x4e0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d10b      	bne.n	800344c <HAL_RCC_OscConfig+0x4e4>
 8003434:	4b03      	ldr	r3, [pc, #12]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	4a02      	ldr	r2, [pc, #8]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	6713      	str	r3, [r2, #112]	; 0x70
 8003440:	e05b      	b.n	80034fa <HAL_RCC_OscConfig+0x592>
 8003442:	bf00      	nop
 8003444:	58024400 	.word	0x58024400
 8003448:	58024800 	.word	0x58024800
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d112      	bne.n	800347a <HAL_RCC_OscConfig+0x512>
 8003454:	4b9d      	ldr	r3, [pc, #628]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	4a9c      	ldr	r2, [pc, #624]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 800345a:	f023 0301 	bic.w	r3, r3, #1
 800345e:	6713      	str	r3, [r2, #112]	; 0x70
 8003460:	4b9a      	ldr	r3, [pc, #616]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	4a99      	ldr	r2, [pc, #612]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800346a:	6713      	str	r3, [r2, #112]	; 0x70
 800346c:	4b97      	ldr	r3, [pc, #604]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	4a96      	ldr	r2, [pc, #600]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003472:	f023 0304 	bic.w	r3, r3, #4
 8003476:	6713      	str	r3, [r2, #112]	; 0x70
 8003478:	e03f      	b.n	80034fa <HAL_RCC_OscConfig+0x592>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b05      	cmp	r3, #5
 8003480:	d112      	bne.n	80034a8 <HAL_RCC_OscConfig+0x540>
 8003482:	4b92      	ldr	r3, [pc, #584]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003486:	4a91      	ldr	r2, [pc, #580]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003488:	f043 0304 	orr.w	r3, r3, #4
 800348c:	6713      	str	r3, [r2, #112]	; 0x70
 800348e:	4b8f      	ldr	r3, [pc, #572]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	4a8e      	ldr	r2, [pc, #568]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003498:	6713      	str	r3, [r2, #112]	; 0x70
 800349a:	4b8c      	ldr	r3, [pc, #560]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4a8b      	ldr	r2, [pc, #556]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6713      	str	r3, [r2, #112]	; 0x70
 80034a6:	e028      	b.n	80034fa <HAL_RCC_OscConfig+0x592>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b85      	cmp	r3, #133	; 0x85
 80034ae:	d112      	bne.n	80034d6 <HAL_RCC_OscConfig+0x56e>
 80034b0:	4b86      	ldr	r3, [pc, #536]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b4:	4a85      	ldr	r2, [pc, #532]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80034b6:	f043 0304 	orr.w	r3, r3, #4
 80034ba:	6713      	str	r3, [r2, #112]	; 0x70
 80034bc:	4b83      	ldr	r3, [pc, #524]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c0:	4a82      	ldr	r2, [pc, #520]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80034c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c6:	6713      	str	r3, [r2, #112]	; 0x70
 80034c8:	4b80      	ldr	r3, [pc, #512]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	4a7f      	ldr	r2, [pc, #508]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6713      	str	r3, [r2, #112]	; 0x70
 80034d4:	e011      	b.n	80034fa <HAL_RCC_OscConfig+0x592>
 80034d6:	4b7d      	ldr	r3, [pc, #500]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	4a7c      	ldr	r2, [pc, #496]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	6713      	str	r3, [r2, #112]	; 0x70
 80034e2:	4b7a      	ldr	r3, [pc, #488]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	4a79      	ldr	r2, [pc, #484]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80034e8:	f023 0304 	bic.w	r3, r3, #4
 80034ec:	6713      	str	r3, [r2, #112]	; 0x70
 80034ee:	4b77      	ldr	r3, [pc, #476]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	4a76      	ldr	r2, [pc, #472]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80034f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d015      	beq.n	800352e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003502:	f7fe fc49 	bl	8001d98 <HAL_GetTick>
 8003506:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f7fe fc45 	bl	8001d98 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f241 3288 	movw	r2, #5000	; 0x1388
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e14c      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003520:	4b6a      	ldr	r3, [pc, #424]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0ee      	beq.n	800350a <HAL_RCC_OscConfig+0x5a2>
 800352c:	e014      	b.n	8003558 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fe fc33 	bl	8001d98 <HAL_GetTick>
 8003532:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fe fc2f 	bl	8001d98 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e136      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800354c:	4b5f      	ldr	r3, [pc, #380]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ee      	bne.n	8003536 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 812b 	beq.w	80037b8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003562:	4b5a      	ldr	r3, [pc, #360]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800356a:	2b18      	cmp	r3, #24
 800356c:	f000 80bb 	beq.w	80036e6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	2b02      	cmp	r3, #2
 8003576:	f040 8095 	bne.w	80036a4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357a:	4b54      	ldr	r3, [pc, #336]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a53      	ldr	r2, [pc, #332]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003580:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7fe fc07 	bl	8001d98 <HAL_GetTick>
 800358a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358e:	f7fe fc03 	bl	8001d98 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e10c      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035a0:	4b4a      	ldr	r3, [pc, #296]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f0      	bne.n	800358e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ac:	4b47      	ldr	r3, [pc, #284]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80035ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035b0:	4b47      	ldr	r3, [pc, #284]	; (80036d0 <HAL_RCC_OscConfig+0x768>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80035bc:	0112      	lsls	r2, r2, #4
 80035be:	430a      	orrs	r2, r1
 80035c0:	4942      	ldr	r1, [pc, #264]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	628b      	str	r3, [r1, #40]	; 0x28
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	3b01      	subs	r3, #1
 80035cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d4:	3b01      	subs	r3, #1
 80035d6:	025b      	lsls	r3, r3, #9
 80035d8:	b29b      	uxth	r3, r3
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e0:	3b01      	subs	r3, #1
 80035e2:	041b      	lsls	r3, r3, #16
 80035e4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ee:	3b01      	subs	r3, #1
 80035f0:	061b      	lsls	r3, r3, #24
 80035f2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80035f6:	4935      	ldr	r1, [pc, #212]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80035fc:	4b33      	ldr	r3, [pc, #204]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	4a32      	ldr	r2, [pc, #200]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003608:	4b30      	ldr	r3, [pc, #192]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 800360a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360c:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <HAL_RCC_OscConfig+0x76c>)
 800360e:	4013      	ands	r3, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003614:	00d2      	lsls	r2, r2, #3
 8003616:	492d      	ldr	r1, [pc, #180]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003618:	4313      	orrs	r3, r2
 800361a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800361c:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	f023 020c 	bic.w	r2, r3, #12
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	4928      	ldr	r1, [pc, #160]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 800362a:	4313      	orrs	r3, r2
 800362c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800362e:	4b27      	ldr	r3, [pc, #156]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	f023 0202 	bic.w	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	4924      	ldr	r1, [pc, #144]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 800363c:	4313      	orrs	r3, r2
 800363e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003640:	4b22      	ldr	r3, [pc, #136]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	4a21      	ldr	r2, [pc, #132]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800364c:	4b1f      	ldr	r3, [pc, #124]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	4a1e      	ldr	r2, [pc, #120]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003656:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003658:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	4a1b      	ldr	r2, [pc, #108]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 800365e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003662:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	4a18      	ldr	r2, [pc, #96]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a15      	ldr	r2, [pc, #84]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800367a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fe fb8c 	bl	8001d98 <HAL_GetTick>
 8003680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7fe fb88 	bl	8001d98 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e091      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003696:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x71c>
 80036a2:	e089      	b.n	80037b8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a4:	4b09      	ldr	r3, [pc, #36]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a08      	ldr	r2, [pc, #32]	; (80036cc <HAL_RCC_OscConfig+0x764>)
 80036aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fe fb72 	bl	8001d98 <HAL_GetTick>
 80036b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036b6:	e00f      	b.n	80036d8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fe fb6e 	bl	8001d98 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d908      	bls.n	80036d8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e077      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
 80036ca:	bf00      	nop
 80036cc:	58024400 	.word	0x58024400
 80036d0:	fffffc0c 	.word	0xfffffc0c
 80036d4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036d8:	4b3a      	ldr	r3, [pc, #232]	; (80037c4 <HAL_RCC_OscConfig+0x85c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e9      	bne.n	80036b8 <HAL_RCC_OscConfig+0x750>
 80036e4:	e068      	b.n	80037b8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80036e6:	4b37      	ldr	r3, [pc, #220]	; (80037c4 <HAL_RCC_OscConfig+0x85c>)
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80036ec:	4b35      	ldr	r3, [pc, #212]	; (80037c4 <HAL_RCC_OscConfig+0x85c>)
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d031      	beq.n	800375e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f003 0203 	and.w	r2, r3, #3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003704:	429a      	cmp	r2, r3
 8003706:	d12a      	bne.n	800375e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003714:	429a      	cmp	r2, r3
 8003716:	d122      	bne.n	800375e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d11a      	bne.n	800375e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	0a5b      	lsrs	r3, r3, #9
 800372c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003734:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003736:	429a      	cmp	r2, r3
 8003738:	d111      	bne.n	800375e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003748:	429a      	cmp	r2, r3
 800374a:	d108      	bne.n	800375e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	0e1b      	lsrs	r3, r3, #24
 8003750:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d001      	beq.n	8003762 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e02b      	b.n	80037ba <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003762:	4b18      	ldr	r3, [pc, #96]	; (80037c4 <HAL_RCC_OscConfig+0x85c>)
 8003764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003766:	08db      	lsrs	r3, r3, #3
 8003768:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800376c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	429a      	cmp	r2, r3
 8003776:	d01f      	beq.n	80037b8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003778:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <HAL_RCC_OscConfig+0x85c>)
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	4a11      	ldr	r2, [pc, #68]	; (80037c4 <HAL_RCC_OscConfig+0x85c>)
 800377e:	f023 0301 	bic.w	r3, r3, #1
 8003782:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003784:	f7fe fb08 	bl	8001d98 <HAL_GetTick>
 8003788:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800378a:	bf00      	nop
 800378c:	f7fe fb04 	bl	8001d98 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	4293      	cmp	r3, r2
 8003796:	d0f9      	beq.n	800378c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003798:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <HAL_RCC_OscConfig+0x85c>)
 800379a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <HAL_RCC_OscConfig+0x860>)
 800379e:	4013      	ands	r3, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037a4:	00d2      	lsls	r2, r2, #3
 80037a6:	4907      	ldr	r1, [pc, #28]	; (80037c4 <HAL_RCC_OscConfig+0x85c>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCC_OscConfig+0x85c>)
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	4a04      	ldr	r2, [pc, #16]	; (80037c4 <HAL_RCC_OscConfig+0x85c>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3730      	adds	r7, #48	; 0x30
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	58024400 	.word	0x58024400
 80037c8:	ffff0007 	.word	0xffff0007

080037cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e19c      	b.n	8003b1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037e0:	4b8a      	ldr	r3, [pc, #552]	; (8003a0c <HAL_RCC_ClockConfig+0x240>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 030f 	and.w	r3, r3, #15
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d910      	bls.n	8003810 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	4b87      	ldr	r3, [pc, #540]	; (8003a0c <HAL_RCC_ClockConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 020f 	bic.w	r2, r3, #15
 80037f6:	4985      	ldr	r1, [pc, #532]	; (8003a0c <HAL_RCC_ClockConfig+0x240>)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b83      	ldr	r3, [pc, #524]	; (8003a0c <HAL_RCC_ClockConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e184      	b.n	8003b1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d010      	beq.n	800383e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	4b7b      	ldr	r3, [pc, #492]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003828:	429a      	cmp	r2, r3
 800382a:	d908      	bls.n	800383e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800382c:	4b78      	ldr	r3, [pc, #480]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	4975      	ldr	r1, [pc, #468]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 800383a:	4313      	orrs	r3, r2
 800383c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d010      	beq.n	800386c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	4b70      	ldr	r3, [pc, #448]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003856:	429a      	cmp	r2, r3
 8003858:	d908      	bls.n	800386c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800385a:	4b6d      	ldr	r3, [pc, #436]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	496a      	ldr	r1, [pc, #424]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 8003868:	4313      	orrs	r3, r2
 800386a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	d010      	beq.n	800389a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699a      	ldr	r2, [r3, #24]
 800387c:	4b64      	ldr	r3, [pc, #400]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003884:	429a      	cmp	r2, r3
 8003886:	d908      	bls.n	800389a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003888:	4b61      	ldr	r3, [pc, #388]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	495e      	ldr	r1, [pc, #376]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 8003896:	4313      	orrs	r3, r2
 8003898:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d010      	beq.n	80038c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69da      	ldr	r2, [r3, #28]
 80038aa:	4b59      	ldr	r3, [pc, #356]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d908      	bls.n	80038c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80038b6:	4b56      	ldr	r3, [pc, #344]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	4953      	ldr	r1, [pc, #332]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d010      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	4b4d      	ldr	r3, [pc, #308]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d908      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e4:	4b4a      	ldr	r3, [pc, #296]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f023 020f 	bic.w	r2, r3, #15
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4947      	ldr	r1, [pc, #284]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d055      	beq.n	80039ae <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003902:	4b43      	ldr	r3, [pc, #268]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	4940      	ldr	r1, [pc, #256]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 8003910:	4313      	orrs	r3, r2
 8003912:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d107      	bne.n	800392c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800391c:	4b3c      	ldr	r3, [pc, #240]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d121      	bne.n	800396c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0f6      	b.n	8003b1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b03      	cmp	r3, #3
 8003932:	d107      	bne.n	8003944 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003934:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d115      	bne.n	800396c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0ea      	b.n	8003b1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d107      	bne.n	800395c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800394c:	4b30      	ldr	r3, [pc, #192]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d109      	bne.n	800396c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0de      	b.n	8003b1a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800395c:	4b2c      	ldr	r3, [pc, #176]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0d6      	b.n	8003b1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800396c:	4b28      	ldr	r3, [pc, #160]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f023 0207 	bic.w	r2, r3, #7
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4925      	ldr	r1, [pc, #148]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 800397a:	4313      	orrs	r3, r2
 800397c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397e:	f7fe fa0b 	bl	8001d98 <HAL_GetTick>
 8003982:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003984:	e00a      	b.n	800399c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003986:	f7fe fa07 	bl	8001d98 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	f241 3288 	movw	r2, #5000	; 0x1388
 8003994:	4293      	cmp	r3, r2
 8003996:	d901      	bls.n	800399c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e0be      	b.n	8003b1a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399c:	4b1c      	ldr	r3, [pc, #112]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d1eb      	bne.n	8003986 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d010      	beq.n	80039dc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d208      	bcs.n	80039dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ca:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f023 020f 	bic.w	r2, r3, #15
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	490e      	ldr	r1, [pc, #56]	; (8003a10 <HAL_RCC_ClockConfig+0x244>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_RCC_ClockConfig+0x240>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d214      	bcs.n	8003a14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <HAL_RCC_ClockConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 020f 	bic.w	r2, r3, #15
 80039f2:	4906      	ldr	r1, [pc, #24]	; (8003a0c <HAL_RCC_ClockConfig+0x240>)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <HAL_RCC_ClockConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e086      	b.n	8003b1a <HAL_RCC_ClockConfig+0x34e>
 8003a0c:	52002000 	.word	0x52002000
 8003a10:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d010      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	4b3f      	ldr	r3, [pc, #252]	; (8003b24 <HAL_RCC_ClockConfig+0x358>)
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d208      	bcs.n	8003a42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a30:	4b3c      	ldr	r3, [pc, #240]	; (8003b24 <HAL_RCC_ClockConfig+0x358>)
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	4939      	ldr	r1, [pc, #228]	; (8003b24 <HAL_RCC_ClockConfig+0x358>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d010      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	4b34      	ldr	r3, [pc, #208]	; (8003b24 <HAL_RCC_ClockConfig+0x358>)
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d208      	bcs.n	8003a70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a5e:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <HAL_RCC_ClockConfig+0x358>)
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	492e      	ldr	r1, [pc, #184]	; (8003b24 <HAL_RCC_ClockConfig+0x358>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d010      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699a      	ldr	r2, [r3, #24]
 8003a80:	4b28      	ldr	r3, [pc, #160]	; (8003b24 <HAL_RCC_ClockConfig+0x358>)
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d208      	bcs.n	8003a9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a8c:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <HAL_RCC_ClockConfig+0x358>)
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	4922      	ldr	r1, [pc, #136]	; (8003b24 <HAL_RCC_ClockConfig+0x358>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d010      	beq.n	8003acc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69da      	ldr	r2, [r3, #28]
 8003aae:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <HAL_RCC_ClockConfig+0x358>)
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d208      	bcs.n	8003acc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003aba:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <HAL_RCC_ClockConfig+0x358>)
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	4917      	ldr	r1, [pc, #92]	; (8003b24 <HAL_RCC_ClockConfig+0x358>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003acc:	f000 f834 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	4b14      	ldr	r3, [pc, #80]	; (8003b24 <HAL_RCC_ClockConfig+0x358>)
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	0a1b      	lsrs	r3, r3, #8
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	4912      	ldr	r1, [pc, #72]	; (8003b28 <HAL_RCC_ClockConfig+0x35c>)
 8003ade:	5ccb      	ldrb	r3, [r1, r3]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003aea:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <HAL_RCC_ClockConfig+0x358>)
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	4a0d      	ldr	r2, [pc, #52]	; (8003b28 <HAL_RCC_ClockConfig+0x35c>)
 8003af4:	5cd3      	ldrb	r3, [r2, r3]
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
 8003b00:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <HAL_RCC_ClockConfig+0x360>)
 8003b02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b04:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <HAL_RCC_ClockConfig+0x364>)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <HAL_RCC_ClockConfig+0x368>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe f8f8 	bl	8001d04 <HAL_InitTick>
 8003b14:	4603      	mov	r3, r0
 8003b16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	58024400 	.word	0x58024400
 8003b28:	08009904 	.word	0x08009904
 8003b2c:	24000010 	.word	0x24000010
 8003b30:	2400000c 	.word	0x2400000c
 8003b34:	24000014 	.word	0x24000014

08003b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	; 0x24
 8003b3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b3e:	4bb3      	ldr	r3, [pc, #716]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b46:	2b18      	cmp	r3, #24
 8003b48:	f200 8155 	bhi.w	8003df6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003b4c:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b52:	bf00      	nop
 8003b54:	08003bb9 	.word	0x08003bb9
 8003b58:	08003df7 	.word	0x08003df7
 8003b5c:	08003df7 	.word	0x08003df7
 8003b60:	08003df7 	.word	0x08003df7
 8003b64:	08003df7 	.word	0x08003df7
 8003b68:	08003df7 	.word	0x08003df7
 8003b6c:	08003df7 	.word	0x08003df7
 8003b70:	08003df7 	.word	0x08003df7
 8003b74:	08003bdf 	.word	0x08003bdf
 8003b78:	08003df7 	.word	0x08003df7
 8003b7c:	08003df7 	.word	0x08003df7
 8003b80:	08003df7 	.word	0x08003df7
 8003b84:	08003df7 	.word	0x08003df7
 8003b88:	08003df7 	.word	0x08003df7
 8003b8c:	08003df7 	.word	0x08003df7
 8003b90:	08003df7 	.word	0x08003df7
 8003b94:	08003be5 	.word	0x08003be5
 8003b98:	08003df7 	.word	0x08003df7
 8003b9c:	08003df7 	.word	0x08003df7
 8003ba0:	08003df7 	.word	0x08003df7
 8003ba4:	08003df7 	.word	0x08003df7
 8003ba8:	08003df7 	.word	0x08003df7
 8003bac:	08003df7 	.word	0x08003df7
 8003bb0:	08003df7 	.word	0x08003df7
 8003bb4:	08003beb 	.word	0x08003beb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bb8:	4b94      	ldr	r3, [pc, #592]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bc4:	4b91      	ldr	r3, [pc, #580]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	08db      	lsrs	r3, r3, #3
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	4a90      	ldr	r2, [pc, #576]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003bd6:	e111      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003bd8:	4b8d      	ldr	r3, [pc, #564]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bda:	61bb      	str	r3, [r7, #24]
      break;
 8003bdc:	e10e      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003bde:	4b8d      	ldr	r3, [pc, #564]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003be0:	61bb      	str	r3, [r7, #24]
      break;
 8003be2:	e10b      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003be4:	4b8c      	ldr	r3, [pc, #560]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003be6:	61bb      	str	r3, [r7, #24]
      break;
 8003be8:	e108      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bea:	4b88      	ldr	r3, [pc, #544]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003bf4:	4b85      	ldr	r3, [pc, #532]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	091b      	lsrs	r3, r3, #4
 8003bfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bfe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c00:	4b82      	ldr	r3, [pc, #520]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003c0a:	4b80      	ldr	r3, [pc, #512]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	08db      	lsrs	r3, r3, #3
 8003c10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	fb02 f303 	mul.w	r3, r2, r3
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80e1 	beq.w	8003df0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	f000 8083 	beq.w	8003d3c <HAL_RCC_GetSysClockFreq+0x204>
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	f200 80a1 	bhi.w	8003d80 <HAL_RCC_GetSysClockFreq+0x248>
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_RCC_GetSysClockFreq+0x114>
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d056      	beq.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c4a:	e099      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c4c:	4b6f      	ldr	r3, [pc, #444]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d02d      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c58:	4b6c      	ldr	r3, [pc, #432]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	08db      	lsrs	r3, r3, #3
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	4a6b      	ldr	r2, [pc, #428]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
 8003c68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	ee07 3a90 	vmov	s15, r3
 8003c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c82:	4b62      	ldr	r3, [pc, #392]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c96:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003e1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003cb2:	e087      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	ee07 3a90 	vmov	s15, r3
 8003cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cbe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003e20 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc6:	4b51      	ldr	r3, [pc, #324]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cce:	ee07 3a90 	vmov	s15, r3
 8003cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cda:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003e1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cf6:	e065      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d02:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003e24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d0a:	4b40      	ldr	r3, [pc, #256]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d12:	ee07 3a90 	vmov	s15, r3
 8003d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d1e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003e1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d3a:	e043      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	ee07 3a90 	vmov	s15, r3
 8003d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d46:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003e28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d4e:	4b2f      	ldr	r3, [pc, #188]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d56:	ee07 3a90 	vmov	s15, r3
 8003d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d62:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003e1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d7e:	e021      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003e24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d92:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003da6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003e1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dc2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003dc4:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	0a5b      	lsrs	r3, r3, #9
 8003dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dce:	3301      	adds	r3, #1
 8003dd0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	ee07 3a90 	vmov	s15, r3
 8003dd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ddc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003de8:	ee17 3a90 	vmov	r3, s15
 8003dec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003dee:	e005      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61bb      	str	r3, [r7, #24]
      break;
 8003df4:	e002      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003df6:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003df8:	61bb      	str	r3, [r7, #24]
      break;
 8003dfa:	bf00      	nop
  }

  return sysclockfreq;
 8003dfc:	69bb      	ldr	r3, [r7, #24]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3724      	adds	r7, #36	; 0x24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	58024400 	.word	0x58024400
 8003e10:	03d09000 	.word	0x03d09000
 8003e14:	003d0900 	.word	0x003d0900
 8003e18:	007a1200 	.word	0x007a1200
 8003e1c:	46000000 	.word	0x46000000
 8003e20:	4c742400 	.word	0x4c742400
 8003e24:	4a742400 	.word	0x4a742400
 8003e28:	4af42400 	.word	0x4af42400

08003e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003e32:	f7ff fe81 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 8003e36:	4602      	mov	r2, r0
 8003e38:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	0a1b      	lsrs	r3, r3, #8
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	490f      	ldr	r1, [pc, #60]	; (8003e80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e44:	5ccb      	ldrb	r3, [r1, r3]
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003e50:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	4a09      	ldr	r2, [pc, #36]	; (8003e80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e5a:	5cd3      	ldrb	r3, [r2, r3]
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	fa22 f303 	lsr.w	r3, r2, r3
 8003e66:	4a07      	ldr	r2, [pc, #28]	; (8003e84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e6a:	4a07      	ldr	r2, [pc, #28]	; (8003e88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e70:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e72:	681b      	ldr	r3, [r3, #0]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	58024400 	.word	0x58024400
 8003e80:	08009904 	.word	0x08009904
 8003e84:	24000010 	.word	0x24000010
 8003e88:	2400000c 	.word	0x2400000c

08003e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003e90:	f7ff ffcc 	bl	8003e2c <HAL_RCC_GetHCLKFreq>
 8003e94:	4602      	mov	r2, r0
 8003e96:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	4904      	ldr	r1, [pc, #16]	; (8003eb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ea2:	5ccb      	ldrb	r3, [r1, r3]
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	58024400 	.word	0x58024400
 8003eb4:	08009904 	.word	0x08009904

08003eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003ebc:	f7ff ffb6 	bl	8003e2c <HAL_RCC_GetHCLKFreq>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b06      	ldr	r3, [pc, #24]	; (8003edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	4904      	ldr	r1, [pc, #16]	; (8003ee0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ece:	5ccb      	ldrb	r3, [r1, r3]
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	58024400 	.word	0x58024400
 8003ee0:	08009904 	.word	0x08009904

08003ee4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee8:	b0c8      	sub	sp, #288	; 0x120
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f04:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003f08:	2500      	movs	r5, #0
 8003f0a:	ea54 0305 	orrs.w	r3, r4, r5
 8003f0e:	d049      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f1a:	d02f      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003f1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f20:	d828      	bhi.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f26:	d01a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f2c:	d822      	bhi.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f36:	d007      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f38:	e01c      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f3a:	4ba7      	ldr	r3, [pc, #668]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	4aa6      	ldr	r2, [pc, #664]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f46:	e01a      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	2102      	movs	r1, #2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f001 fc43 	bl	80057dc <RCCEx_PLL2_Config>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f5c:	e00f      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f62:	3328      	adds	r3, #40	; 0x28
 8003f64:	2102      	movs	r1, #2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 fcea 	bl	8005940 <RCCEx_PLL3_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f72:	e004      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f7a:	e000      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10a      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f86:	4b94      	ldr	r3, [pc, #592]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f94:	4a90      	ldr	r2, [pc, #576]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f96:	430b      	orrs	r3, r1
 8003f98:	6513      	str	r3, [r2, #80]	; 0x50
 8003f9a:	e003      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fa0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003fb0:	f04f 0900 	mov.w	r9, #0
 8003fb4:	ea58 0309 	orrs.w	r3, r8, r9
 8003fb8:	d047      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d82a      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003fc4:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08003fe1 	.word	0x08003fe1
 8003fd0:	08003fef 	.word	0x08003fef
 8003fd4:	08004005 	.word	0x08004005
 8003fd8:	08004023 	.word	0x08004023
 8003fdc:	08004023 	.word	0x08004023
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe0:	4b7d      	ldr	r3, [pc, #500]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	4a7c      	ldr	r2, [pc, #496]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fec:	e01a      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 fbf0 	bl	80057dc <RCCEx_PLL2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004002:	e00f      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004008:	3328      	adds	r3, #40	; 0x28
 800400a:	2100      	movs	r1, #0
 800400c:	4618      	mov	r0, r3
 800400e:	f001 fc97 	bl	8005940 <RCCEx_PLL3_Config>
 8004012:	4603      	mov	r3, r0
 8004014:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004018:	e004      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004020:	e000      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004022:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004024:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800402c:	4b6a      	ldr	r3, [pc, #424]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800402e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004030:	f023 0107 	bic.w	r1, r3, #7
 8004034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	4a67      	ldr	r2, [pc, #412]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800403c:	430b      	orrs	r3, r1
 800403e:	6513      	str	r3, [r2, #80]	; 0x50
 8004040:	e003      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004042:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004046:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800404a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004052:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004056:	f04f 0b00 	mov.w	fp, #0
 800405a:	ea5a 030b 	orrs.w	r3, sl, fp
 800405e:	d054      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004066:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800406a:	d036      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800406c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004070:	d82f      	bhi.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004076:	d032      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407c:	d829      	bhi.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800407e:	2bc0      	cmp	r3, #192	; 0xc0
 8004080:	d02f      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004082:	2bc0      	cmp	r3, #192	; 0xc0
 8004084:	d825      	bhi.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004086:	2b80      	cmp	r3, #128	; 0x80
 8004088:	d018      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800408a:	2b80      	cmp	r3, #128	; 0x80
 800408c:	d821      	bhi.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004092:	2b40      	cmp	r3, #64	; 0x40
 8004094:	d007      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004096:	e01c      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004098:	4b4f      	ldr	r3, [pc, #316]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	4a4e      	ldr	r2, [pc, #312]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800409e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80040a4:	e01e      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040aa:	3308      	adds	r3, #8
 80040ac:	2100      	movs	r1, #0
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 fb94 	bl	80057dc <RCCEx_PLL2_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80040ba:	e013      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c0:	3328      	adds	r3, #40	; 0x28
 80040c2:	2100      	movs	r1, #0
 80040c4:	4618      	mov	r0, r3
 80040c6:	f001 fc3b 	bl	8005940 <RCCEx_PLL3_Config>
 80040ca:	4603      	mov	r3, r0
 80040cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80040d0:	e008      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040d8:	e004      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80040da:	bf00      	nop
 80040dc:	e002      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80040de:	bf00      	nop
 80040e0:	e000      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80040e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80040ec:	4b3a      	ldr	r3, [pc, #232]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80040f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fa:	4a37      	ldr	r2, [pc, #220]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6513      	str	r3, [r2, #80]	; 0x50
 8004100:	e003      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004102:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004106:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800410a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004112:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004116:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800411a:	2300      	movs	r3, #0
 800411c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004120:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004124:	460b      	mov	r3, r1
 8004126:	4313      	orrs	r3, r2
 8004128:	d05c      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800412a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800412e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004130:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004134:	d03b      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004136:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800413a:	d834      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800413c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004140:	d037      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004146:	d82e      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004148:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800414c:	d033      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800414e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004152:	d828      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004158:	d01a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415e:	d822      	bhi.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004168:	d007      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800416a:	e01c      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800416c:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	4a19      	ldr	r2, [pc, #100]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004176:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004178:	e01e      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800417a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800417e:	3308      	adds	r3, #8
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f001 fb2a 	bl	80057dc <RCCEx_PLL2_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800418e:	e013      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004194:	3328      	adds	r3, #40	; 0x28
 8004196:	2100      	movs	r1, #0
 8004198:	4618      	mov	r0, r3
 800419a:	f001 fbd1 	bl	8005940 <RCCEx_PLL3_Config>
 800419e:	4603      	mov	r3, r0
 80041a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80041a4:	e008      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041ac:	e004      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80041ae:	bf00      	nop
 80041b0:	e002      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80041b2:	bf00      	nop
 80041b4:	e000      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80041b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10d      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80041c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ce:	4a02      	ldr	r2, [pc, #8]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041d0:	430b      	orrs	r3, r1
 80041d2:	6513      	str	r3, [r2, #80]	; 0x50
 80041d4:	e006      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80041d6:	bf00      	nop
 80041d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80041e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80041f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80041f4:	2300      	movs	r3, #0
 80041f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80041fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80041fe:	460b      	mov	r3, r1
 8004200:	4313      	orrs	r3, r2
 8004202:	d03a      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420a:	2b30      	cmp	r3, #48	; 0x30
 800420c:	d01f      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800420e:	2b30      	cmp	r3, #48	; 0x30
 8004210:	d819      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004212:	2b20      	cmp	r3, #32
 8004214:	d00c      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004216:	2b20      	cmp	r3, #32
 8004218:	d815      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d019      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800421e:	2b10      	cmp	r3, #16
 8004220:	d111      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004222:	4bae      	ldr	r3, [pc, #696]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	4aad      	ldr	r2, [pc, #692]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800422c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800422e:	e011      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004234:	3308      	adds	r3, #8
 8004236:	2102      	movs	r1, #2
 8004238:	4618      	mov	r0, r3
 800423a:	f001 facf 	bl	80057dc <RCCEx_PLL2_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004244:	e006      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800424c:	e002      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800424e:	bf00      	nop
 8004250:	e000      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004254:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800425c:	4b9f      	ldr	r3, [pc, #636]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800425e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004260:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426a:	4a9c      	ldr	r2, [pc, #624]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800426c:	430b      	orrs	r3, r1
 800426e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004270:	e003      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004272:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004276:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800427a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004286:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800428a:	2300      	movs	r3, #0
 800428c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004290:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004294:	460b      	mov	r3, r1
 8004296:	4313      	orrs	r3, r2
 8004298:	d051      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800429a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800429e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042a4:	d035      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80042a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042aa:	d82e      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80042ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042b0:	d031      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80042b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042b6:	d828      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80042b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042bc:	d01a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80042be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c2:	d822      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80042c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042cc:	d007      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80042ce:	e01c      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d0:	4b82      	ldr	r3, [pc, #520]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	4a81      	ldr	r2, [pc, #516]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80042dc:	e01c      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e2:	3308      	adds	r3, #8
 80042e4:	2100      	movs	r1, #0
 80042e6:	4618      	mov	r0, r3
 80042e8:	f001 fa78 	bl	80057dc <RCCEx_PLL2_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80042f2:	e011      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042f8:	3328      	adds	r3, #40	; 0x28
 80042fa:	2100      	movs	r1, #0
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 fb1f 	bl	8005940 <RCCEx_PLL3_Config>
 8004302:	4603      	mov	r3, r0
 8004304:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004308:	e006      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004310:	e002      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004312:	bf00      	nop
 8004314:	e000      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004318:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004320:	4b6e      	ldr	r3, [pc, #440]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004324:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800432c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800432e:	4a6b      	ldr	r2, [pc, #428]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004330:	430b      	orrs	r3, r1
 8004332:	6513      	str	r3, [r2, #80]	; 0x50
 8004334:	e003      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004336:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800433a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800433e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800434a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800434e:	2300      	movs	r3, #0
 8004350:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004354:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004358:	460b      	mov	r3, r1
 800435a:	4313      	orrs	r3, r2
 800435c:	d053      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800435e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004368:	d033      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800436a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800436e:	d82c      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004370:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004374:	d02f      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004376:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800437a:	d826      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800437c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004380:	d02b      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004382:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004386:	d820      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004388:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800438c:	d012      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800438e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004392:	d81a      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d022      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439c:	d115      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800439e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a2:	3308      	adds	r3, #8
 80043a4:	2101      	movs	r1, #1
 80043a6:	4618      	mov	r0, r3
 80043a8:	f001 fa18 	bl	80057dc <RCCEx_PLL2_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80043b2:	e015      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b8:	3328      	adds	r3, #40	; 0x28
 80043ba:	2101      	movs	r1, #1
 80043bc:	4618      	mov	r0, r3
 80043be:	f001 fabf 	bl	8005940 <RCCEx_PLL3_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80043c8:	e00a      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80043d0:	e006      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80043d2:	bf00      	nop
 80043d4:	e004      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80043d6:	bf00      	nop
 80043d8:	e002      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80043da:	bf00      	nop
 80043dc:	e000      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80043de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80043e8:	4b3c      	ldr	r3, [pc, #240]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80043f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043f6:	4a39      	ldr	r2, [pc, #228]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043f8:	430b      	orrs	r3, r1
 80043fa:	6513      	str	r3, [r2, #80]	; 0x50
 80043fc:	e003      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004402:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800440a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004412:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004416:	2300      	movs	r3, #0
 8004418:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800441c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004420:	460b      	mov	r3, r1
 8004422:	4313      	orrs	r3, r2
 8004424:	d060      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800442a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800442e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004432:	d039      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004434:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004438:	d832      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800443a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800443e:	d035      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004444:	d82c      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444a:	d031      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800444c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004450:	d826      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004452:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004456:	d02d      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004458:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800445c:	d820      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800445e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004462:	d012      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004468:	d81a      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d024      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800446e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004472:	d115      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004478:	3308      	adds	r3, #8
 800447a:	2101      	movs	r1, #1
 800447c:	4618      	mov	r0, r3
 800447e:	f001 f9ad 	bl	80057dc <RCCEx_PLL2_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004488:	e017      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800448a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800448e:	3328      	adds	r3, #40	; 0x28
 8004490:	2101      	movs	r1, #1
 8004492:	4618      	mov	r0, r3
 8004494:	f001 fa54 	bl	8005940 <RCCEx_PLL3_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800449e:	e00c      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044a6:	e008      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80044a8:	bf00      	nop
 80044aa:	e006      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80044ac:	bf00      	nop
 80044ae:	e004      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80044b0:	bf00      	nop
 80044b2:	e002      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80044b4:	bf00      	nop
 80044b6:	e000      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80044b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10e      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80044c2:	4b06      	ldr	r3, [pc, #24]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80044ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044d2:	4a02      	ldr	r2, [pc, #8]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044d4:	430b      	orrs	r3, r1
 80044d6:	6593      	str	r3, [r2, #88]	; 0x58
 80044d8:	e006      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80044da:	bf00      	nop
 80044dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80044f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044f8:	2300      	movs	r3, #0
 80044fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80044fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004502:	460b      	mov	r3, r1
 8004504:	4313      	orrs	r3, r2
 8004506:	d037      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800450c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800450e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004512:	d00e      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004518:	d816      	bhi.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d018      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800451e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004522:	d111      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004524:	4bc4      	ldr	r3, [pc, #784]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	4ac3      	ldr	r2, [pc, #780]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800452a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800452e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004530:	e00f      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004532:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004536:	3308      	adds	r3, #8
 8004538:	2101      	movs	r1, #1
 800453a:	4618      	mov	r0, r3
 800453c:	f001 f94e 	bl	80057dc <RCCEx_PLL2_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004546:	e004      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800454e:	e000      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004552:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10a      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800455a:	4bb7      	ldr	r3, [pc, #732]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800455c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004562:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004566:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004568:	4ab3      	ldr	r2, [pc, #716]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800456a:	430b      	orrs	r3, r1
 800456c:	6513      	str	r3, [r2, #80]	; 0x50
 800456e:	e003      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004570:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004574:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004584:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004588:	2300      	movs	r3, #0
 800458a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800458e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004592:	460b      	mov	r3, r1
 8004594:	4313      	orrs	r3, r2
 8004596:	d039      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800459c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d81c      	bhi.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80045a2:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080045e5 	.word	0x080045e5
 80045ac:	080045b9 	.word	0x080045b9
 80045b0:	080045c7 	.word	0x080045c7
 80045b4:	080045e5 	.word	0x080045e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045b8:	4b9f      	ldr	r3, [pc, #636]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	4a9e      	ldr	r2, [pc, #632]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80045c4:	e00f      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ca:	3308      	adds	r3, #8
 80045cc:	2102      	movs	r1, #2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f001 f904 	bl	80057dc <RCCEx_PLL2_Config>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80045da:	e004      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80045e2:	e000      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80045e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80045ee:	4b92      	ldr	r3, [pc, #584]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f2:	f023 0103 	bic.w	r1, r3, #3
 80045f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045fc:	4a8e      	ldr	r2, [pc, #568]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045fe:	430b      	orrs	r3, r1
 8004600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004602:	e003      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004604:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004608:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800460c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004618:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800461c:	2300      	movs	r3, #0
 800461e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004622:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004626:	460b      	mov	r3, r1
 8004628:	4313      	orrs	r3, r2
 800462a:	f000 8099 	beq.w	8004760 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800462e:	4b83      	ldr	r3, [pc, #524]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a82      	ldr	r2, [pc, #520]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004638:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800463a:	f7fd fbad 	bl	8001d98 <HAL_GetTick>
 800463e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004642:	e00b      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004644:	f7fd fba8 	bl	8001d98 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b64      	cmp	r3, #100	; 0x64
 8004652:	d903      	bls.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800465a:	e005      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800465c:	4b77      	ldr	r3, [pc, #476]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0ed      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004668:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800466c:	2b00      	cmp	r3, #0
 800466e:	d173      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004670:	4b71      	ldr	r3, [pc, #452]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004672:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004678:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800467c:	4053      	eors	r3, r2
 800467e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004682:	2b00      	cmp	r3, #0
 8004684:	d015      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004686:	4b6c      	ldr	r3, [pc, #432]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004692:	4b69      	ldr	r3, [pc, #420]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	4a68      	ldr	r2, [pc, #416]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800469c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800469e:	4b66      	ldr	r3, [pc, #408]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	4a65      	ldr	r2, [pc, #404]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80046aa:	4a63      	ldr	r2, [pc, #396]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80046b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046be:	d118      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fd fb6a 	bl	8001d98 <HAL_GetTick>
 80046c4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046c8:	e00d      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ca:	f7fd fb65 	bl	8001d98 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80046d4:	1ad2      	subs	r2, r2, r3
 80046d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80046da:	429a      	cmp	r2, r3
 80046dc:	d903      	bls.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80046e4:	e005      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046e6:	4b54      	ldr	r3, [pc, #336]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0eb      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80046f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d129      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800470a:	d10e      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800470c:	4b4a      	ldr	r3, [pc, #296]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004718:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800471c:	091a      	lsrs	r2, r3, #4
 800471e:	4b48      	ldr	r3, [pc, #288]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004720:	4013      	ands	r3, r2
 8004722:	4a45      	ldr	r2, [pc, #276]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004724:	430b      	orrs	r3, r1
 8004726:	6113      	str	r3, [r2, #16]
 8004728:	e005      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800472a:	4b43      	ldr	r3, [pc, #268]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	4a42      	ldr	r2, [pc, #264]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004730:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004734:	6113      	str	r3, [r2, #16]
 8004736:	4b40      	ldr	r3, [pc, #256]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004738:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800473a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800473e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004746:	4a3c      	ldr	r2, [pc, #240]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004748:	430b      	orrs	r3, r1
 800474a:	6713      	str	r3, [r2, #112]	; 0x70
 800474c:	e008      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800474e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004752:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004756:	e003      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004758:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800475c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	f002 0301 	and.w	r3, r2, #1
 800476c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004770:	2300      	movs	r3, #0
 8004772:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004776:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800477a:	460b      	mov	r3, r1
 800477c:	4313      	orrs	r3, r2
 800477e:	f000 8090 	beq.w	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800478a:	2b28      	cmp	r3, #40	; 0x28
 800478c:	d870      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800478e:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004794:	08004879 	.word	0x08004879
 8004798:	08004871 	.word	0x08004871
 800479c:	08004871 	.word	0x08004871
 80047a0:	08004871 	.word	0x08004871
 80047a4:	08004871 	.word	0x08004871
 80047a8:	08004871 	.word	0x08004871
 80047ac:	08004871 	.word	0x08004871
 80047b0:	08004871 	.word	0x08004871
 80047b4:	08004845 	.word	0x08004845
 80047b8:	08004871 	.word	0x08004871
 80047bc:	08004871 	.word	0x08004871
 80047c0:	08004871 	.word	0x08004871
 80047c4:	08004871 	.word	0x08004871
 80047c8:	08004871 	.word	0x08004871
 80047cc:	08004871 	.word	0x08004871
 80047d0:	08004871 	.word	0x08004871
 80047d4:	0800485b 	.word	0x0800485b
 80047d8:	08004871 	.word	0x08004871
 80047dc:	08004871 	.word	0x08004871
 80047e0:	08004871 	.word	0x08004871
 80047e4:	08004871 	.word	0x08004871
 80047e8:	08004871 	.word	0x08004871
 80047ec:	08004871 	.word	0x08004871
 80047f0:	08004871 	.word	0x08004871
 80047f4:	08004879 	.word	0x08004879
 80047f8:	08004871 	.word	0x08004871
 80047fc:	08004871 	.word	0x08004871
 8004800:	08004871 	.word	0x08004871
 8004804:	08004871 	.word	0x08004871
 8004808:	08004871 	.word	0x08004871
 800480c:	08004871 	.word	0x08004871
 8004810:	08004871 	.word	0x08004871
 8004814:	08004879 	.word	0x08004879
 8004818:	08004871 	.word	0x08004871
 800481c:	08004871 	.word	0x08004871
 8004820:	08004871 	.word	0x08004871
 8004824:	08004871 	.word	0x08004871
 8004828:	08004871 	.word	0x08004871
 800482c:	08004871 	.word	0x08004871
 8004830:	08004871 	.word	0x08004871
 8004834:	08004879 	.word	0x08004879
 8004838:	58024400 	.word	0x58024400
 800483c:	58024800 	.word	0x58024800
 8004840:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004848:	3308      	adds	r3, #8
 800484a:	2101      	movs	r1, #1
 800484c:	4618      	mov	r0, r3
 800484e:	f000 ffc5 	bl	80057dc <RCCEx_PLL2_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004858:	e00f      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800485a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800485e:	3328      	adds	r3, #40	; 0x28
 8004860:	2101      	movs	r1, #1
 8004862:	4618      	mov	r0, r3
 8004864:	f001 f86c 	bl	8005940 <RCCEx_PLL3_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800486e:	e004      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800487a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10b      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004882:	4bc0      	ldr	r3, [pc, #768]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800488a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800488e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004892:	4abc      	ldr	r2, [pc, #752]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004894:	430b      	orrs	r3, r1
 8004896:	6553      	str	r3, [r2, #84]	; 0x54
 8004898:	e003      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800489e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80048a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	f002 0302 	and.w	r3, r2, #2
 80048ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048b2:	2300      	movs	r3, #0
 80048b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80048b8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80048bc:	460b      	mov	r3, r1
 80048be:	4313      	orrs	r3, r2
 80048c0:	d043      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80048c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ca:	2b05      	cmp	r3, #5
 80048cc:	d824      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80048ce:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80048d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d4:	08004921 	.word	0x08004921
 80048d8:	080048ed 	.word	0x080048ed
 80048dc:	08004903 	.word	0x08004903
 80048e0:	08004921 	.word	0x08004921
 80048e4:	08004921 	.word	0x08004921
 80048e8:	08004921 	.word	0x08004921
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f0:	3308      	adds	r3, #8
 80048f2:	2101      	movs	r1, #1
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 ff71 	bl	80057dc <RCCEx_PLL2_Config>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004900:	e00f      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004906:	3328      	adds	r3, #40	; 0x28
 8004908:	2101      	movs	r1, #1
 800490a:	4618      	mov	r0, r3
 800490c:	f001 f818 	bl	8005940 <RCCEx_PLL3_Config>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004916:	e004      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800491e:	e000      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004922:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10b      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800492a:	4b96      	ldr	r3, [pc, #600]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	f023 0107 	bic.w	r1, r3, #7
 8004932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800493a:	4a92      	ldr	r2, [pc, #584]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800493c:	430b      	orrs	r3, r1
 800493e:	6553      	str	r3, [r2, #84]	; 0x54
 8004940:	e003      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004942:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004946:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800494a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	f002 0304 	and.w	r3, r2, #4
 8004956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800495a:	2300      	movs	r3, #0
 800495c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004960:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004964:	460b      	mov	r3, r1
 8004966:	4313      	orrs	r3, r2
 8004968:	d043      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800496a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004972:	2b05      	cmp	r3, #5
 8004974:	d824      	bhi.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004976:	a201      	add	r2, pc, #4	; (adr r2, 800497c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	080049c9 	.word	0x080049c9
 8004980:	08004995 	.word	0x08004995
 8004984:	080049ab 	.word	0x080049ab
 8004988:	080049c9 	.word	0x080049c9
 800498c:	080049c9 	.word	0x080049c9
 8004990:	080049c9 	.word	0x080049c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004998:	3308      	adds	r3, #8
 800499a:	2101      	movs	r1, #1
 800499c:	4618      	mov	r0, r3
 800499e:	f000 ff1d 	bl	80057dc <RCCEx_PLL2_Config>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80049a8:	e00f      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ae:	3328      	adds	r3, #40	; 0x28
 80049b0:	2101      	movs	r1, #1
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 ffc4 	bl	8005940 <RCCEx_PLL3_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80049be:	e004      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80049c6:	e000      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80049c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10b      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049d2:	4b6c      	ldr	r3, [pc, #432]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80049d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d6:	f023 0107 	bic.w	r1, r3, #7
 80049da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049e2:	4a68      	ldr	r2, [pc, #416]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80049e4:	430b      	orrs	r3, r1
 80049e6:	6593      	str	r3, [r2, #88]	; 0x58
 80049e8:	e003      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	f002 0320 	and.w	r3, r2, #32
 80049fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a02:	2300      	movs	r3, #0
 8004a04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	d055      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a1e:	d033      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a24:	d82c      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2a:	d02f      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a30:	d826      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004a32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a36:	d02b      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004a38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a3c:	d820      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a42:	d012      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a48:	d81a      	bhi.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d022      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004a4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a52:	d115      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a58:	3308      	adds	r3, #8
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 febd 	bl	80057dc <RCCEx_PLL2_Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004a68:	e015      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a6e:	3328      	adds	r3, #40	; 0x28
 8004a70:	2102      	movs	r1, #2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 ff64 	bl	8005940 <RCCEx_PLL3_Config>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004a7e:	e00a      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a86:	e006      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004a88:	bf00      	nop
 8004a8a:	e004      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004a8c:	bf00      	nop
 8004a8e:	e002      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004a90:	bf00      	nop
 8004a92:	e000      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10b      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a9e:	4b39      	ldr	r3, [pc, #228]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aae:	4a35      	ldr	r2, [pc, #212]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	6553      	str	r3, [r2, #84]	; 0x54
 8004ab4:	e003      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004aba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004ad4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4313      	orrs	r3, r2
 8004adc:	d058      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ae2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ae6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004aea:	d033      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004aec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004af0:	d82c      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af6:	d02f      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afc:	d826      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004afe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b02:	d02b      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004b04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b08:	d820      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0e:	d012      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b14:	d81a      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d022      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1e:	d115      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b24:	3308      	adds	r3, #8
 8004b26:	2100      	movs	r1, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fe57 	bl	80057dc <RCCEx_PLL2_Config>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004b34:	e015      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b3a:	3328      	adds	r3, #40	; 0x28
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fefe 	bl	8005940 <RCCEx_PLL3_Config>
 8004b44:	4603      	mov	r3, r0
 8004b46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004b4a:	e00a      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b52:	e006      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004b54:	bf00      	nop
 8004b56:	e004      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004b58:	bf00      	nop
 8004b5a:	e002      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004b5c:	bf00      	nop
 8004b5e:	e000      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10e      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b6a:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b7a:	4a02      	ldr	r2, [pc, #8]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b80:	e006      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004b82:	bf00      	nop
 8004b84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ba6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004baa:	460b      	mov	r3, r1
 8004bac:	4313      	orrs	r3, r2
 8004bae:	d055      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004bb8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004bbc:	d033      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004bbe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004bc2:	d82c      	bhi.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc8:	d02f      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bce:	d826      	bhi.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004bd0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004bd4:	d02b      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004bd6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004bda:	d820      	bhi.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004be0:	d012      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004be6:	d81a      	bhi.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d022      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf0:	d115      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fdee 	bl	80057dc <RCCEx_PLL2_Config>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c06:	e015      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c0c:	3328      	adds	r3, #40	; 0x28
 8004c0e:	2102      	movs	r1, #2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fe95 	bl	8005940 <RCCEx_PLL3_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c1c:	e00a      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c24:	e006      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004c26:	bf00      	nop
 8004c28:	e004      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004c2a:	bf00      	nop
 8004c2c:	e002      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004c2e:	bf00      	nop
 8004c30:	e000      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10b      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004c3c:	4ba1      	ldr	r3, [pc, #644]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c40:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c4c:	4a9d      	ldr	r2, [pc, #628]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	6593      	str	r3, [r2, #88]	; 0x58
 8004c52:	e003      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f002 0308 	and.w	r3, r2, #8
 8004c68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004c76:	460b      	mov	r3, r1
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	d01e      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c88:	d10c      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c8e:	3328      	adds	r3, #40	; 0x28
 8004c90:	2102      	movs	r1, #2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fe54 	bl	8005940 <RCCEx_PLL3_Config>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ca4:	4b87      	ldr	r3, [pc, #540]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb4:	4a83      	ldr	r2, [pc, #524]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	f002 0310 	and.w	r3, r2, #16
 8004cc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004cd0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	d01e      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ce6:	d10c      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cec:	3328      	adds	r3, #40	; 0x28
 8004cee:	2102      	movs	r1, #2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fe25 	bl	8005940 <RCCEx_PLL3_Config>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d02:	4b70      	ldr	r3, [pc, #448]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d12:	4a6c      	ldr	r2, [pc, #432]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d14:	430b      	orrs	r3, r1
 8004d16:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d2e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004d32:	460b      	mov	r3, r1
 8004d34:	4313      	orrs	r3, r2
 8004d36:	d03e      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d44:	d022      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d4a:	d81b      	bhi.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d54:	d00b      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004d56:	e015      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	2100      	movs	r1, #0
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 fd3b 	bl	80057dc <RCCEx_PLL2_Config>
 8004d66:	4603      	mov	r3, r0
 8004d68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004d6c:	e00f      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d72:	3328      	adds	r3, #40	; 0x28
 8004d74:	2102      	movs	r1, #2
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fde2 	bl	8005940 <RCCEx_PLL3_Config>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004d82:	e004      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d8a:	e000      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10b      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d96:	4b4b      	ldr	r3, [pc, #300]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004da2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004da6:	4a47      	ldr	r2, [pc, #284]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004da8:	430b      	orrs	r3, r1
 8004daa:	6593      	str	r3, [r2, #88]	; 0x58
 8004dac:	e003      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004db2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004dc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004dc8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	d03b      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004dde:	d01f      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004de0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004de4:	d818      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dea:	d003      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004dec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004df0:	d007      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004df2:	e011      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df4:	4b33      	ldr	r3, [pc, #204]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	4a32      	ldr	r2, [pc, #200]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e00:	e00f      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e06:	3328      	adds	r3, #40	; 0x28
 8004e08:	2101      	movs	r1, #1
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fd98 	bl	8005940 <RCCEx_PLL3_Config>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e16:	e004      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004e1e:	e000      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10b      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e2a:	4b26      	ldr	r3, [pc, #152]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3a:	4a22      	ldr	r2, [pc, #136]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	6553      	str	r3, [r2, #84]	; 0x54
 8004e40:	e003      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e52:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004e56:	673b      	str	r3, [r7, #112]	; 0x70
 8004e58:	2300      	movs	r3, #0
 8004e5a:	677b      	str	r3, [r7, #116]	; 0x74
 8004e5c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004e60:	460b      	mov	r3, r1
 8004e62:	4313      	orrs	r3, r2
 8004e64:	d034      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e74:	d007      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004e76:	e011      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e78:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	4a11      	ldr	r2, [pc, #68]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004e84:	e00e      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	2102      	movs	r1, #2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fca4 	bl	80057dc <RCCEx_PLL2_Config>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004e9a:	e003      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004ea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ea4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10d      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eba:	4a02      	ldr	r2, [pc, #8]	; (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ec0:	e006      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004ec2:	bf00      	nop
 8004ec4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ecc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004edc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ede:	2300      	movs	r3, #0
 8004ee0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ee2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	d00c      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef0:	3328      	adds	r3, #40	; 0x28
 8004ef2:	2102      	movs	r1, #2
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 fd23 	bl	8005940 <RCCEx_PLL3_Config>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004f12:	663b      	str	r3, [r7, #96]	; 0x60
 8004f14:	2300      	movs	r3, #0
 8004f16:	667b      	str	r3, [r7, #100]	; 0x64
 8004f18:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	d038      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f2e:	d018      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f34:	d811      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f3a:	d014      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f40:	d80b      	bhi.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d011      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4a:	d106      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f4c:	4bc3      	ldr	r3, [pc, #780]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	4ac2      	ldr	r2, [pc, #776]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004f58:	e008      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004f60:	e004      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004f62:	bf00      	nop
 8004f64:	e002      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004f66:	bf00      	nop
 8004f68:	e000      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004f6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f74:	4bb9      	ldr	r3, [pc, #740]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f84:	4ab5      	ldr	r2, [pc, #724]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f86:	430b      	orrs	r3, r1
 8004f88:	6553      	str	r3, [r2, #84]	; 0x54
 8004f8a:	e003      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004fa0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fa6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004faa:	460b      	mov	r3, r1
 8004fac:	4313      	orrs	r3, r2
 8004fae:	d009      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fb0:	4baa      	ldr	r3, [pc, #680]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fbe:	4aa7      	ldr	r2, [pc, #668]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004fd0:	653b      	str	r3, [r7, #80]	; 0x50
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	657b      	str	r3, [r7, #84]	; 0x54
 8004fd6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	d009      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fe0:	4b9e      	ldr	r3, [pc, #632]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fee:	4a9b      	ldr	r2, [pc, #620]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005000:	64bb      	str	r3, [r7, #72]	; 0x48
 8005002:	2300      	movs	r3, #0
 8005004:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005006:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800500a:	460b      	mov	r3, r1
 800500c:	4313      	orrs	r3, r2
 800500e:	d009      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005010:	4b92      	ldr	r3, [pc, #584]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8005018:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800501c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501e:	4a8f      	ldr	r2, [pc, #572]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005020:	430b      	orrs	r3, r1
 8005022:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005024:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005030:	643b      	str	r3, [r7, #64]	; 0x40
 8005032:	2300      	movs	r3, #0
 8005034:	647b      	str	r3, [r7, #68]	; 0x44
 8005036:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800503a:	460b      	mov	r3, r1
 800503c:	4313      	orrs	r3, r2
 800503e:	d00e      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005040:	4b86      	ldr	r3, [pc, #536]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	4a85      	ldr	r2, [pc, #532]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005046:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800504a:	6113      	str	r3, [r2, #16]
 800504c:	4b83      	ldr	r3, [pc, #524]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800504e:	6919      	ldr	r1, [r3, #16]
 8005050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005054:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005058:	4a80      	ldr	r2, [pc, #512]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800505a:	430b      	orrs	r3, r1
 800505c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800505e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800506a:	63bb      	str	r3, [r7, #56]	; 0x38
 800506c:	2300      	movs	r3, #0
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005070:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005074:	460b      	mov	r3, r1
 8005076:	4313      	orrs	r3, r2
 8005078:	d009      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800507a:	4b78      	ldr	r3, [pc, #480]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800507c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005088:	4a74      	ldr	r2, [pc, #464]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800508a:	430b      	orrs	r3, r1
 800508c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800508e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005096:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800509a:	633b      	str	r3, [r7, #48]	; 0x30
 800509c:	2300      	movs	r3, #0
 800509e:	637b      	str	r3, [r7, #52]	; 0x34
 80050a0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80050a4:	460b      	mov	r3, r1
 80050a6:	4313      	orrs	r3, r2
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050aa:	4b6c      	ldr	r3, [pc, #432]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ae:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80050b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ba:	4a68      	ldr	r2, [pc, #416]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80050bc:	430b      	orrs	r3, r1
 80050be:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80050c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	2100      	movs	r1, #0
 80050ca:	62b9      	str	r1, [r7, #40]	; 0x28
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050d2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80050d6:	460b      	mov	r3, r1
 80050d8:	4313      	orrs	r3, r2
 80050da:	d011      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e0:	3308      	adds	r3, #8
 80050e2:	2100      	movs	r1, #0
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 fb79 	bl	80057dc <RCCEx_PLL2_Config>
 80050ea:	4603      	mov	r3, r0
 80050ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80050f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	2100      	movs	r1, #0
 800510a:	6239      	str	r1, [r7, #32]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
 8005112:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005116:	460b      	mov	r3, r1
 8005118:	4313      	orrs	r3, r2
 800511a:	d011      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800511c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005120:	3308      	adds	r3, #8
 8005122:	2101      	movs	r1, #1
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fb59 	bl	80057dc <RCCEx_PLL2_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005130:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005138:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800513c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005140:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	2100      	movs	r1, #0
 800514a:	61b9      	str	r1, [r7, #24]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	61fb      	str	r3, [r7, #28]
 8005152:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005156:	460b      	mov	r3, r1
 8005158:	4313      	orrs	r3, r2
 800515a:	d011      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800515c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005160:	3308      	adds	r3, #8
 8005162:	2102      	movs	r1, #2
 8005164:	4618      	mov	r0, r3
 8005166:	f000 fb39 	bl	80057dc <RCCEx_PLL2_Config>
 800516a:	4603      	mov	r3, r0
 800516c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005170:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005178:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800517c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	2100      	movs	r1, #0
 800518a:	6139      	str	r1, [r7, #16]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005196:	460b      	mov	r3, r1
 8005198:	4313      	orrs	r3, r2
 800519a:	d011      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800519c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a0:	3328      	adds	r3, #40	; 0x28
 80051a2:	2100      	movs	r1, #0
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fbcb 	bl	8005940 <RCCEx_PLL3_Config>
 80051aa:	4603      	mov	r3, r0
 80051ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80051b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80051c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	2100      	movs	r1, #0
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80051d6:	460b      	mov	r3, r1
 80051d8:	4313      	orrs	r3, r2
 80051da:	d011      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e0:	3328      	adds	r3, #40	; 0x28
 80051e2:	2101      	movs	r1, #1
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fbab 	bl	8005940 <RCCEx_PLL3_Config>
 80051ea:	4603      	mov	r3, r0
 80051ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80051f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	2100      	movs	r1, #0
 800520a:	6039      	str	r1, [r7, #0]
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	607b      	str	r3, [r7, #4]
 8005212:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005216:	460b      	mov	r3, r1
 8005218:	4313      	orrs	r3, r2
 800521a:	d011      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800521c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005220:	3328      	adds	r3, #40	; 0x28
 8005222:	2102      	movs	r1, #2
 8005224:	4618      	mov	r0, r3
 8005226:	f000 fb8b 	bl	8005940 <RCCEx_PLL3_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005230:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005238:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800523c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8005240:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
}
 800524e:	4618      	mov	r0, r3
 8005250:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005254:	46bd      	mov	sp, r7
 8005256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800525a:	bf00      	nop
 800525c:	58024400 	.word	0x58024400

08005260 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005264:	f7fe fde2 	bl	8003e2c <HAL_RCC_GetHCLKFreq>
 8005268:	4602      	mov	r2, r0
 800526a:	4b06      	ldr	r3, [pc, #24]	; (8005284 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	091b      	lsrs	r3, r3, #4
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	4904      	ldr	r1, [pc, #16]	; (8005288 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005276:	5ccb      	ldrb	r3, [r1, r3]
 8005278:	f003 031f 	and.w	r3, r3, #31
 800527c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005280:	4618      	mov	r0, r3
 8005282:	bd80      	pop	{r7, pc}
 8005284:	58024400 	.word	0x58024400
 8005288:	08009904 	.word	0x08009904

0800528c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800528c:	b480      	push	{r7}
 800528e:	b089      	sub	sp, #36	; 0x24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005294:	4ba1      	ldr	r3, [pc, #644]	; (800551c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	f003 0303 	and.w	r3, r3, #3
 800529c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800529e:	4b9f      	ldr	r3, [pc, #636]	; (800551c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a2:	0b1b      	lsrs	r3, r3, #12
 80052a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80052aa:	4b9c      	ldr	r3, [pc, #624]	; (800551c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	091b      	lsrs	r3, r3, #4
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80052b6:	4b99      	ldr	r3, [pc, #612]	; (800551c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ba:	08db      	lsrs	r3, r3, #3
 80052bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	fb02 f303 	mul.w	r3, r2, r3
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 8111 	beq.w	80054fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	f000 8083 	beq.w	80053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	f200 80a1 	bhi.w	800542c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d056      	beq.n	80053a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80052f6:	e099      	b.n	800542c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052f8:	4b88      	ldr	r3, [pc, #544]	; (800551c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d02d      	beq.n	8005360 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005304:	4b85      	ldr	r3, [pc, #532]	; (800551c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	08db      	lsrs	r3, r3, #3
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	4a84      	ldr	r2, [pc, #528]	; (8005520 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005310:	fa22 f303 	lsr.w	r3, r2, r3
 8005314:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	ee07 3a90 	vmov	s15, r3
 800531c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800532e:	4b7b      	ldr	r3, [pc, #492]	; (800551c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800533e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005342:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800534a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800534e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800535e:	e087      	b.n	8005470 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	ee07 3a90 	vmov	s15, r3
 8005366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005528 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800536e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005372:	4b6a      	ldr	r3, [pc, #424]	; (800551c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005382:	ed97 6a03 	vldr	s12, [r7, #12]
 8005386:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800538a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800538e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053a2:	e065      	b.n	8005470 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	ee07 3a90 	vmov	s15, r3
 80053aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800552c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80053b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b6:	4b59      	ldr	r3, [pc, #356]	; (800551c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053e6:	e043      	b.n	8005470 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005530 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80053f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fa:	4b48      	ldr	r3, [pc, #288]	; (800551c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540a:	ed97 6a03 	vldr	s12, [r7, #12]
 800540e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800541e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800542a:	e021      	b.n	8005470 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005436:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800552c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800543a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800543e:	4b37      	ldr	r3, [pc, #220]	; (800551c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800544e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005452:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005524 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800545e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800546e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005470:	4b2a      	ldr	r3, [pc, #168]	; (800551c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	0a5b      	lsrs	r3, r3, #9
 8005476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800548a:	edd7 6a07 	vldr	s13, [r7, #28]
 800548e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005496:	ee17 2a90 	vmov	r2, s15
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800549e:	4b1f      	ldr	r3, [pc, #124]	; (800551c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	0c1b      	lsrs	r3, r3, #16
 80054a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054a8:	ee07 3a90 	vmov	s15, r3
 80054ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80054bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054c4:	ee17 2a90 	vmov	r2, s15
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80054cc:	4b13      	ldr	r3, [pc, #76]	; (800551c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d0:	0e1b      	lsrs	r3, r3, #24
 80054d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80054ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f2:	ee17 2a90 	vmov	r2, s15
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80054fa:	e008      	b.n	800550e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	609a      	str	r2, [r3, #8]
}
 800550e:	bf00      	nop
 8005510:	3724      	adds	r7, #36	; 0x24
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	58024400 	.word	0x58024400
 8005520:	03d09000 	.word	0x03d09000
 8005524:	46000000 	.word	0x46000000
 8005528:	4c742400 	.word	0x4c742400
 800552c:	4a742400 	.word	0x4a742400
 8005530:	4af42400 	.word	0x4af42400

08005534 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005534:	b480      	push	{r7}
 8005536:	b089      	sub	sp, #36	; 0x24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800553c:	4ba1      	ldr	r3, [pc, #644]	; (80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800553e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005540:	f003 0303 	and.w	r3, r3, #3
 8005544:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005546:	4b9f      	ldr	r3, [pc, #636]	; (80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554a:	0d1b      	lsrs	r3, r3, #20
 800554c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005550:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005552:	4b9c      	ldr	r3, [pc, #624]	; (80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005556:	0a1b      	lsrs	r3, r3, #8
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800555e:	4b99      	ldr	r3, [pc, #612]	; (80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005562:	08db      	lsrs	r3, r3, #3
 8005564:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	fb02 f303 	mul.w	r3, r2, r3
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005576:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 8111 	beq.w	80057a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	2b02      	cmp	r3, #2
 8005586:	f000 8083 	beq.w	8005690 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2b02      	cmp	r3, #2
 800558e:	f200 80a1 	bhi.w	80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d056      	beq.n	800564c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800559e:	e099      	b.n	80056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055a0:	4b88      	ldr	r3, [pc, #544]	; (80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0320 	and.w	r3, r3, #32
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d02d      	beq.n	8005608 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055ac:	4b85      	ldr	r3, [pc, #532]	; (80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	08db      	lsrs	r3, r3, #3
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	4a84      	ldr	r2, [pc, #528]	; (80057c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80055b8:	fa22 f303 	lsr.w	r3, r2, r3
 80055bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	ee07 3a90 	vmov	s15, r3
 80055c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d6:	4b7b      	ldr	r3, [pc, #492]	; (80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005602:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005606:	e087      	b.n	8005718 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	ee07 3a90 	vmov	s15, r3
 800560e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005612:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80057d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800561a:	4b6a      	ldr	r3, [pc, #424]	; (80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800562a:	ed97 6a03 	vldr	s12, [r7, #12]
 800562e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800563a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800563e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800564a:	e065      	b.n	8005718 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	ee07 3a90 	vmov	s15, r3
 8005652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005656:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800565a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800565e:	4b59      	ldr	r3, [pc, #356]	; (80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800566e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005672:	eddf 5a56 	vldr	s11, [pc, #344]	; 80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800567a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800567e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800568a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800568e:	e043      	b.n	8005718 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	ee07 3a90 	vmov	s15, r3
 8005696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80057d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800569e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a2:	4b48      	ldr	r3, [pc, #288]	; (80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80056b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056d2:	e021      	b.n	8005718 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	ee07 3a90 	vmov	s15, r3
 80056da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80056e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e6:	4b37      	ldr	r3, [pc, #220]	; (80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80056fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80057cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800570a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800570e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005716:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005718:	4b2a      	ldr	r3, [pc, #168]	; (80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	0a5b      	lsrs	r3, r3, #9
 800571e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800572e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005732:	edd7 6a07 	vldr	s13, [r7, #28]
 8005736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800573a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800573e:	ee17 2a90 	vmov	r2, s15
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005746:	4b1f      	ldr	r3, [pc, #124]	; (80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	0c1b      	lsrs	r3, r3, #16
 800574c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005750:	ee07 3a90 	vmov	s15, r3
 8005754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005758:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800575c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005760:	edd7 6a07 	vldr	s13, [r7, #28]
 8005764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800576c:	ee17 2a90 	vmov	r2, s15
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005774:	4b13      	ldr	r3, [pc, #76]	; (80057c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005778:	0e1b      	lsrs	r3, r3, #24
 800577a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005786:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800578a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800578e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800579a:	ee17 2a90 	vmov	r2, s15
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80057a2:	e008      	b.n	80057b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	609a      	str	r2, [r3, #8]
}
 80057b6:	bf00      	nop
 80057b8:	3724      	adds	r7, #36	; 0x24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	58024400 	.word	0x58024400
 80057c8:	03d09000 	.word	0x03d09000
 80057cc:	46000000 	.word	0x46000000
 80057d0:	4c742400 	.word	0x4c742400
 80057d4:	4a742400 	.word	0x4a742400
 80057d8:	4af42400 	.word	0x4af42400

080057dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057ea:	4b53      	ldr	r3, [pc, #332]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 80057ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d101      	bne.n	80057fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e099      	b.n	800592e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80057fa:	4b4f      	ldr	r3, [pc, #316]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a4e      	ldr	r2, [pc, #312]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 8005800:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005806:	f7fc fac7 	bl	8001d98 <HAL_GetTick>
 800580a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800580c:	e008      	b.n	8005820 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800580e:	f7fc fac3 	bl	8001d98 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d901      	bls.n	8005820 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e086      	b.n	800592e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005820:	4b45      	ldr	r3, [pc, #276]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1f0      	bne.n	800580e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800582c:	4b42      	ldr	r3, [pc, #264]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	031b      	lsls	r3, r3, #12
 800583a:	493f      	ldr	r1, [pc, #252]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 800583c:	4313      	orrs	r3, r2
 800583e:	628b      	str	r3, [r1, #40]	; 0x28
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	3b01      	subs	r3, #1
 8005846:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	3b01      	subs	r3, #1
 8005850:	025b      	lsls	r3, r3, #9
 8005852:	b29b      	uxth	r3, r3
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	3b01      	subs	r3, #1
 800585c:	041b      	lsls	r3, r3, #16
 800585e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	3b01      	subs	r3, #1
 800586a:	061b      	lsls	r3, r3, #24
 800586c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005870:	4931      	ldr	r1, [pc, #196]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 8005872:	4313      	orrs	r3, r2
 8005874:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005876:	4b30      	ldr	r3, [pc, #192]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	492d      	ldr	r1, [pc, #180]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 8005884:	4313      	orrs	r3, r2
 8005886:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005888:	4b2b      	ldr	r3, [pc, #172]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	f023 0220 	bic.w	r2, r3, #32
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	4928      	ldr	r1, [pc, #160]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 8005896:	4313      	orrs	r3, r2
 8005898:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800589a:	4b27      	ldr	r3, [pc, #156]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	4a26      	ldr	r2, [pc, #152]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 80058a0:	f023 0310 	bic.w	r3, r3, #16
 80058a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058a6:	4b24      	ldr	r3, [pc, #144]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 80058a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058aa:	4b24      	ldr	r3, [pc, #144]	; (800593c <RCCEx_PLL2_Config+0x160>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	69d2      	ldr	r2, [r2, #28]
 80058b2:	00d2      	lsls	r2, r2, #3
 80058b4:	4920      	ldr	r1, [pc, #128]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058ba:	4b1f      	ldr	r3, [pc, #124]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 80058bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058be:	4a1e      	ldr	r2, [pc, #120]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 80058c0:	f043 0310 	orr.w	r3, r3, #16
 80058c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d106      	bne.n	80058da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80058cc:	4b1a      	ldr	r3, [pc, #104]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	4a19      	ldr	r2, [pc, #100]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 80058d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058d8:	e00f      	b.n	80058fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d106      	bne.n	80058ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80058e0:	4b15      	ldr	r3, [pc, #84]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	4a14      	ldr	r2, [pc, #80]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 80058e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058ec:	e005      	b.n	80058fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80058ee:	4b12      	ldr	r3, [pc, #72]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 80058f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f2:	4a11      	ldr	r2, [pc, #68]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 80058f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80058fa:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a0e      	ldr	r2, [pc, #56]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 8005900:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005906:	f7fc fa47 	bl	8001d98 <HAL_GetTick>
 800590a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800590c:	e008      	b.n	8005920 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800590e:	f7fc fa43 	bl	8001d98 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e006      	b.n	800592e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005920:	4b05      	ldr	r3, [pc, #20]	; (8005938 <RCCEx_PLL2_Config+0x15c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0f0      	beq.n	800590e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	58024400 	.word	0x58024400
 800593c:	ffff0007 	.word	0xffff0007

08005940 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800594e:	4b53      	ldr	r3, [pc, #332]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	2b03      	cmp	r3, #3
 8005958:	d101      	bne.n	800595e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e099      	b.n	8005a92 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800595e:	4b4f      	ldr	r3, [pc, #316]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a4e      	ldr	r2, [pc, #312]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800596a:	f7fc fa15 	bl	8001d98 <HAL_GetTick>
 800596e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005970:	e008      	b.n	8005984 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005972:	f7fc fa11 	bl	8001d98 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e086      	b.n	8005a92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005984:	4b45      	ldr	r3, [pc, #276]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1f0      	bne.n	8005972 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005990:	4b42      	ldr	r3, [pc, #264]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005994:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	051b      	lsls	r3, r3, #20
 800599e:	493f      	ldr	r1, [pc, #252]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	628b      	str	r3, [r1, #40]	; 0x28
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	025b      	lsls	r3, r3, #9
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	3b01      	subs	r3, #1
 80059c0:	041b      	lsls	r3, r3, #16
 80059c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	061b      	lsls	r3, r3, #24
 80059d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059d4:	4931      	ldr	r1, [pc, #196]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80059da:	4b30      	ldr	r3, [pc, #192]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	492d      	ldr	r1, [pc, #180]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80059ec:	4b2b      	ldr	r3, [pc, #172]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	4928      	ldr	r1, [pc, #160]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80059fe:	4b27      	ldr	r3, [pc, #156]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a02:	4a26      	ldr	r2, [pc, #152]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a0a:	4b24      	ldr	r3, [pc, #144]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a0e:	4b24      	ldr	r3, [pc, #144]	; (8005aa0 <RCCEx_PLL3_Config+0x160>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	69d2      	ldr	r2, [r2, #28]
 8005a16:	00d2      	lsls	r2, r2, #3
 8005a18:	4920      	ldr	r1, [pc, #128]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a1e:	4b1f      	ldr	r3, [pc, #124]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	4a1e      	ldr	r2, [pc, #120]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a30:	4b1a      	ldr	r3, [pc, #104]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	4a19      	ldr	r2, [pc, #100]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005a36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a3c:	e00f      	b.n	8005a5e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d106      	bne.n	8005a52 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a44:	4b15      	ldr	r3, [pc, #84]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	4a14      	ldr	r2, [pc, #80]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005a4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a50:	e005      	b.n	8005a5e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a52:	4b12      	ldr	r3, [pc, #72]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a56:	4a11      	ldr	r2, [pc, #68]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005a58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a5e:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a0e      	ldr	r2, [pc, #56]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a6a:	f7fc f995 	bl	8001d98 <HAL_GetTick>
 8005a6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a70:	e008      	b.n	8005a84 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a72:	f7fc f991 	bl	8001d98 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e006      	b.n	8005a92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a84:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <RCCEx_PLL3_Config+0x15c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0f0      	beq.n	8005a72 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	58024400 	.word	0x58024400
 8005aa0:	ffff0007 	.word	0xffff0007

08005aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e049      	b.n	8005b4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fb fdba 	bl	8001644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	f000 fb26 	bl	8006134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e08f      	b.n	8005c88 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d106      	bne.n	8005b82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7fb fd11 	bl	80015a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2202      	movs	r2, #2
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6899      	ldr	r1, [r3, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	4b3e      	ldr	r3, [pc, #248]	; (8005c90 <HAL_TIM_Encoder_Init+0x13c>)
 8005b96:	400b      	ands	r3, r1
 8005b98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	f000 fac5 	bl	8006134 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4b31      	ldr	r3, [pc, #196]	; (8005c94 <HAL_TIM_Encoder_Init+0x140>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	4313      	orrs	r3, r2
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	4b2b      	ldr	r3, [pc, #172]	; (8005c98 <HAL_TIM_Encoder_Init+0x144>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4b2a      	ldr	r3, [pc, #168]	; (8005c9c <HAL_TIM_Encoder_Init+0x148>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	021b      	lsls	r3, r3, #8
 8005c00:	4313      	orrs	r3, r2
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	011a      	lsls	r2, r3, #4
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	031b      	lsls	r3, r3, #12
 8005c14:	4313      	orrs	r3, r2
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	4313      	orrs	r3, r2
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	fffebff8 	.word	0xfffebff8
 8005c94:	fffffcfc 	.word	0xfffffcfc
 8005c98:	fffff3f3 	.word	0xfffff3f3
 8005c9c:	ffff0f0f 	.word	0xffff0f0f

08005ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d122      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d11b      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0202 	mvn.w	r2, #2
 8005ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fa08 	bl	80060f8 <HAL_TIM_IC_CaptureCallback>
 8005ce8:	e005      	b.n	8005cf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f9fa 	bl	80060e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fa0b 	bl	800610c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d122      	bne.n	8005d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b04      	cmp	r3, #4
 8005d16:	d11b      	bne.n	8005d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f06f 0204 	mvn.w	r2, #4
 8005d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2202      	movs	r2, #2
 8005d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f9de 	bl	80060f8 <HAL_TIM_IC_CaptureCallback>
 8005d3c:	e005      	b.n	8005d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f9d0 	bl	80060e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f9e1 	bl	800610c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d122      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 0308 	and.w	r3, r3, #8
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d11b      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0208 	mvn.w	r2, #8
 8005d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2204      	movs	r2, #4
 8005d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f9b4 	bl	80060f8 <HAL_TIM_IC_CaptureCallback>
 8005d90:	e005      	b.n	8005d9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f9a6 	bl	80060e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f9b7 	bl	800610c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f003 0310 	and.w	r3, r3, #16
 8005dae:	2b10      	cmp	r3, #16
 8005db0:	d122      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b10      	cmp	r3, #16
 8005dbe:	d11b      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0210 	mvn.w	r2, #16
 8005dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2208      	movs	r2, #8
 8005dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f98a 	bl	80060f8 <HAL_TIM_IC_CaptureCallback>
 8005de4:	e005      	b.n	8005df2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f97c 	bl	80060e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f98d 	bl	800610c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d10e      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d107      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0201 	mvn.w	r2, #1
 8005e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f956 	bl	80060d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2e:	2b80      	cmp	r3, #128	; 0x80
 8005e30:	d10e      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3c:	2b80      	cmp	r3, #128	; 0x80
 8005e3e:	d107      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fb42 	bl	80064d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5e:	d10e      	bne.n	8005e7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6a:	2b80      	cmp	r3, #128	; 0x80
 8005e6c:	d107      	bne.n	8005e7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fb35 	bl	80064e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e88:	2b40      	cmp	r3, #64	; 0x40
 8005e8a:	d10e      	bne.n	8005eaa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b40      	cmp	r3, #64	; 0x40
 8005e98:	d107      	bne.n	8005eaa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f93b 	bl	8006120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d10e      	bne.n	8005ed6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d107      	bne.n	8005ed6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f06f 0220 	mvn.w	r2, #32
 8005ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 faf5 	bl	80064c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ed6:	bf00      	nop
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_TIM_ConfigClockSource+0x1c>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e0dc      	b.n	80060b6 <HAL_TIM_ConfigClockSource+0x1d6>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	4b6a      	ldr	r3, [pc, #424]	; (80060c0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a64      	ldr	r2, [pc, #400]	; (80060c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	f000 80a9 	beq.w	800608a <HAL_TIM_ConfigClockSource+0x1aa>
 8005f38:	4a62      	ldr	r2, [pc, #392]	; (80060c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	f200 80ae 	bhi.w	800609c <HAL_TIM_ConfigClockSource+0x1bc>
 8005f40:	4a61      	ldr	r2, [pc, #388]	; (80060c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	f000 80a1 	beq.w	800608a <HAL_TIM_ConfigClockSource+0x1aa>
 8005f48:	4a5f      	ldr	r2, [pc, #380]	; (80060c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	f200 80a6 	bhi.w	800609c <HAL_TIM_ConfigClockSource+0x1bc>
 8005f50:	4a5e      	ldr	r2, [pc, #376]	; (80060cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	f000 8099 	beq.w	800608a <HAL_TIM_ConfigClockSource+0x1aa>
 8005f58:	4a5c      	ldr	r2, [pc, #368]	; (80060cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	f200 809e 	bhi.w	800609c <HAL_TIM_ConfigClockSource+0x1bc>
 8005f60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005f64:	f000 8091 	beq.w	800608a <HAL_TIM_ConfigClockSource+0x1aa>
 8005f68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005f6c:	f200 8096 	bhi.w	800609c <HAL_TIM_ConfigClockSource+0x1bc>
 8005f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f74:	f000 8089 	beq.w	800608a <HAL_TIM_ConfigClockSource+0x1aa>
 8005f78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f7c:	f200 808e 	bhi.w	800609c <HAL_TIM_ConfigClockSource+0x1bc>
 8005f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f84:	d03e      	beq.n	8006004 <HAL_TIM_ConfigClockSource+0x124>
 8005f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f8a:	f200 8087 	bhi.w	800609c <HAL_TIM_ConfigClockSource+0x1bc>
 8005f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f92:	f000 8086 	beq.w	80060a2 <HAL_TIM_ConfigClockSource+0x1c2>
 8005f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f9a:	d87f      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x1bc>
 8005f9c:	2b70      	cmp	r3, #112	; 0x70
 8005f9e:	d01a      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0xf6>
 8005fa0:	2b70      	cmp	r3, #112	; 0x70
 8005fa2:	d87b      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x1bc>
 8005fa4:	2b60      	cmp	r3, #96	; 0x60
 8005fa6:	d050      	beq.n	800604a <HAL_TIM_ConfigClockSource+0x16a>
 8005fa8:	2b60      	cmp	r3, #96	; 0x60
 8005faa:	d877      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x1bc>
 8005fac:	2b50      	cmp	r3, #80	; 0x50
 8005fae:	d03c      	beq.n	800602a <HAL_TIM_ConfigClockSource+0x14a>
 8005fb0:	2b50      	cmp	r3, #80	; 0x50
 8005fb2:	d873      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x1bc>
 8005fb4:	2b40      	cmp	r3, #64	; 0x40
 8005fb6:	d058      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x18a>
 8005fb8:	2b40      	cmp	r3, #64	; 0x40
 8005fba:	d86f      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x1bc>
 8005fbc:	2b30      	cmp	r3, #48	; 0x30
 8005fbe:	d064      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x1aa>
 8005fc0:	2b30      	cmp	r3, #48	; 0x30
 8005fc2:	d86b      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x1bc>
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d060      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x1aa>
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d867      	bhi.n	800609c <HAL_TIM_ConfigClockSource+0x1bc>
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d05c      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x1aa>
 8005fd0:	2b10      	cmp	r3, #16
 8005fd2:	d05a      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x1aa>
 8005fd4:	e062      	b.n	800609c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	6899      	ldr	r1, [r3, #8]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f000 f9bd 	bl	8006364 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ff8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	609a      	str	r2, [r3, #8]
      break;
 8006002:	e04f      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	6899      	ldr	r1, [r3, #8]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f000 f9a6 	bl	8006364 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006026:	609a      	str	r2, [r3, #8]
      break;
 8006028:	e03c      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	6859      	ldr	r1, [r3, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	461a      	mov	r2, r3
 8006038:	f000 f916 	bl	8006268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2150      	movs	r1, #80	; 0x50
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f970 	bl	8006328 <TIM_ITRx_SetConfig>
      break;
 8006048:	e02c      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6818      	ldr	r0, [r3, #0]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	6859      	ldr	r1, [r3, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	461a      	mov	r2, r3
 8006058:	f000 f935 	bl	80062c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2160      	movs	r1, #96	; 0x60
 8006062:	4618      	mov	r0, r3
 8006064:	f000 f960 	bl	8006328 <TIM_ITRx_SetConfig>
      break;
 8006068:	e01c      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	6859      	ldr	r1, [r3, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	461a      	mov	r2, r3
 8006078:	f000 f8f6 	bl	8006268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2140      	movs	r1, #64	; 0x40
 8006082:	4618      	mov	r0, r3
 8006084:	f000 f950 	bl	8006328 <TIM_ITRx_SetConfig>
      break;
 8006088:	e00c      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4619      	mov	r1, r3
 8006094:	4610      	mov	r0, r2
 8006096:	f000 f947 	bl	8006328 <TIM_ITRx_SetConfig>
      break;
 800609a:	e003      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
      break;
 80060a0:	e000      	b.n	80060a4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80060a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	ffceff88 	.word	0xffceff88
 80060c4:	00100040 	.word	0x00100040
 80060c8:	00100030 	.word	0x00100030
 80060cc:	00100020 	.word	0x00100020

080060d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a40      	ldr	r2, [pc, #256]	; (8006248 <TIM_Base_SetConfig+0x114>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d013      	beq.n	8006174 <TIM_Base_SetConfig+0x40>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006152:	d00f      	beq.n	8006174 <TIM_Base_SetConfig+0x40>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a3d      	ldr	r2, [pc, #244]	; (800624c <TIM_Base_SetConfig+0x118>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00b      	beq.n	8006174 <TIM_Base_SetConfig+0x40>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a3c      	ldr	r2, [pc, #240]	; (8006250 <TIM_Base_SetConfig+0x11c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d007      	beq.n	8006174 <TIM_Base_SetConfig+0x40>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a3b      	ldr	r2, [pc, #236]	; (8006254 <TIM_Base_SetConfig+0x120>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d003      	beq.n	8006174 <TIM_Base_SetConfig+0x40>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a3a      	ldr	r2, [pc, #232]	; (8006258 <TIM_Base_SetConfig+0x124>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d108      	bne.n	8006186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a2f      	ldr	r2, [pc, #188]	; (8006248 <TIM_Base_SetConfig+0x114>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d01f      	beq.n	80061ce <TIM_Base_SetConfig+0x9a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006194:	d01b      	beq.n	80061ce <TIM_Base_SetConfig+0x9a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a2c      	ldr	r2, [pc, #176]	; (800624c <TIM_Base_SetConfig+0x118>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d017      	beq.n	80061ce <TIM_Base_SetConfig+0x9a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a2b      	ldr	r2, [pc, #172]	; (8006250 <TIM_Base_SetConfig+0x11c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d013      	beq.n	80061ce <TIM_Base_SetConfig+0x9a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a2a      	ldr	r2, [pc, #168]	; (8006254 <TIM_Base_SetConfig+0x120>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d00f      	beq.n	80061ce <TIM_Base_SetConfig+0x9a>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a29      	ldr	r2, [pc, #164]	; (8006258 <TIM_Base_SetConfig+0x124>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00b      	beq.n	80061ce <TIM_Base_SetConfig+0x9a>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a28      	ldr	r2, [pc, #160]	; (800625c <TIM_Base_SetConfig+0x128>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d007      	beq.n	80061ce <TIM_Base_SetConfig+0x9a>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a27      	ldr	r2, [pc, #156]	; (8006260 <TIM_Base_SetConfig+0x12c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d003      	beq.n	80061ce <TIM_Base_SetConfig+0x9a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a26      	ldr	r2, [pc, #152]	; (8006264 <TIM_Base_SetConfig+0x130>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d108      	bne.n	80061e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	4313      	orrs	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a10      	ldr	r2, [pc, #64]	; (8006248 <TIM_Base_SetConfig+0x114>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d00f      	beq.n	800622c <TIM_Base_SetConfig+0xf8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a12      	ldr	r2, [pc, #72]	; (8006258 <TIM_Base_SetConfig+0x124>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00b      	beq.n	800622c <TIM_Base_SetConfig+0xf8>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a11      	ldr	r2, [pc, #68]	; (800625c <TIM_Base_SetConfig+0x128>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d007      	beq.n	800622c <TIM_Base_SetConfig+0xf8>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a10      	ldr	r2, [pc, #64]	; (8006260 <TIM_Base_SetConfig+0x12c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d003      	beq.n	800622c <TIM_Base_SetConfig+0xf8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a0f      	ldr	r2, [pc, #60]	; (8006264 <TIM_Base_SetConfig+0x130>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d103      	bne.n	8006234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	615a      	str	r2, [r3, #20]
}
 800623a:	bf00      	nop
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	40010000 	.word	0x40010000
 800624c:	40000400 	.word	0x40000400
 8006250:	40000800 	.word	0x40000800
 8006254:	40000c00 	.word	0x40000c00
 8006258:	40010400 	.word	0x40010400
 800625c:	40014000 	.word	0x40014000
 8006260:	40014400 	.word	0x40014400
 8006264:	40014800 	.word	0x40014800

08006268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f023 0201 	bic.w	r2, r3, #1
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4313      	orrs	r3, r2
 800629c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f023 030a 	bic.w	r3, r3, #10
 80062a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	621a      	str	r2, [r3, #32]
}
 80062ba:	bf00      	nop
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b087      	sub	sp, #28
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	f023 0210 	bic.w	r2, r3, #16
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	031b      	lsls	r3, r3, #12
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006302:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	621a      	str	r2, [r3, #32]
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
	...

08006328 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4b09      	ldr	r3, [pc, #36]	; (8006360 <TIM_ITRx_SetConfig+0x38>)
 800633c:	4013      	ands	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	f043 0307 	orr.w	r3, r3, #7
 800634a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	609a      	str	r2, [r3, #8]
}
 8006352:	bf00      	nop
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	ffcfff8f 	.word	0xffcfff8f

08006364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800637e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	021a      	lsls	r2, r3, #8
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	431a      	orrs	r2, r3
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	4313      	orrs	r3, r2
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	4313      	orrs	r3, r2
 8006390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	609a      	str	r2, [r3, #8]
}
 8006398:	bf00      	nop
 800639a:	371c      	adds	r7, #28
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e06d      	b.n	8006498 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a30      	ldr	r2, [pc, #192]	; (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a2f      	ldr	r2, [pc, #188]	; (80064a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d108      	bne.n	8006402 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80063f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006408:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a20      	ldr	r2, [pc, #128]	; (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d022      	beq.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800642e:	d01d      	beq.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1d      	ldr	r2, [pc, #116]	; (80064ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d018      	beq.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1c      	ldr	r2, [pc, #112]	; (80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d013      	beq.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a1a      	ldr	r2, [pc, #104]	; (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d00e      	beq.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d009      	beq.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a16      	ldr	r2, [pc, #88]	; (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d004      	beq.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a15      	ldr	r2, [pc, #84]	; (80064bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d10c      	bne.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006472:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	4313      	orrs	r3, r2
 800647c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40010000 	.word	0x40010000
 80064a8:	40010400 	.word	0x40010400
 80064ac:	40000400 	.word	0x40000400
 80064b0:	40000800 	.word	0x40000800
 80064b4:	40000c00 	.word	0x40000c00
 80064b8:	40001800 	.word	0x40001800
 80064bc:	40014000 	.word	0x40014000

080064c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e042      	b.n	8006594 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006514:	2b00      	cmp	r3, #0
 8006516:	d106      	bne.n	8006526 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7fb f8d7 	bl	80016d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2224      	movs	r2, #36	; 0x24
 800652a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 0201 	bic.w	r2, r2, #1
 800653c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fce0 	bl	8006f04 <UART_SetConfig>
 8006544:	4603      	mov	r3, r0
 8006546:	2b01      	cmp	r3, #1
 8006548:	d101      	bne.n	800654e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e022      	b.n	8006594 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 fb40 	bl	8007bdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800656a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800657a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0201 	orr.w	r2, r2, #1
 800658a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 fbc7 	bl	8007d20 <UART_CheckIdleState>
 8006592:	4603      	mov	r3, r0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08a      	sub	sp, #40	; 0x28
 80065a0:	af02      	add	r7, sp, #8
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	603b      	str	r3, [r7, #0]
 80065a8:	4613      	mov	r3, r2
 80065aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	d17b      	bne.n	80066ae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <HAL_UART_Transmit+0x26>
 80065bc:	88fb      	ldrh	r3, [r7, #6]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e074      	b.n	80066b0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2221      	movs	r2, #33	; 0x21
 80065d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065d6:	f7fb fbdf 	bl	8001d98 <HAL_GetTick>
 80065da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	88fa      	ldrh	r2, [r7, #6]
 80065e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	88fa      	ldrh	r2, [r7, #6]
 80065e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f4:	d108      	bne.n	8006608 <HAL_UART_Transmit+0x6c>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d104      	bne.n	8006608 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	61bb      	str	r3, [r7, #24]
 8006606:	e003      	b.n	8006610 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800660c:	2300      	movs	r3, #0
 800660e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006610:	e030      	b.n	8006674 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2200      	movs	r2, #0
 800661a:	2180      	movs	r1, #128	; 0x80
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f001 fc29 	bl	8007e74 <UART_WaitOnFlagUntilTimeout>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2220      	movs	r2, #32
 800662c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e03d      	b.n	80066b0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10b      	bne.n	8006652 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006648:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	3302      	adds	r3, #2
 800664e:	61bb      	str	r3, [r7, #24]
 8006650:	e007      	b.n	8006662 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	781a      	ldrb	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	3301      	adds	r3, #1
 8006660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006668:	b29b      	uxth	r3, r3
 800666a:	3b01      	subs	r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800667a:	b29b      	uxth	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1c8      	bne.n	8006612 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2200      	movs	r2, #0
 8006688:	2140      	movs	r1, #64	; 0x40
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f001 fbf2 	bl	8007e74 <UART_WaitOnFlagUntilTimeout>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d005      	beq.n	80066a2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2220      	movs	r2, #32
 800669a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e006      	b.n	80066b0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	e000      	b.n	80066b0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80066ae:	2302      	movs	r3, #2
  }
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3720      	adds	r7, #32
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08a      	sub	sp, #40	; 0x28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	4613      	mov	r3, r2
 80066c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d137      	bne.n	8006740 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <HAL_UART_Receive_IT+0x24>
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e030      	b.n	8006742 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a18      	ldr	r2, [pc, #96]	; (800674c <HAL_UART_Receive_IT+0x94>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d01f      	beq.n	8006730 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d018      	beq.n	8006730 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	613b      	str	r3, [r7, #16]
   return(result);
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	623b      	str	r3, [r7, #32]
 800671e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	69f9      	ldr	r1, [r7, #28]
 8006722:	6a3a      	ldr	r2, [r7, #32]
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	61bb      	str	r3, [r7, #24]
   return(result);
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e6      	bne.n	80066fe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006730:	88fb      	ldrh	r3, [r7, #6]
 8006732:	461a      	mov	r2, r3
 8006734:	68b9      	ldr	r1, [r7, #8]
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f001 fc04 	bl	8007f44 <UART_Start_Receive_IT>
 800673c:	4603      	mov	r3, r0
 800673e:	e000      	b.n	8006742 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006740:	2302      	movs	r3, #2
  }
}
 8006742:	4618      	mov	r0, r3
 8006744:	3728      	adds	r7, #40	; 0x28
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	58000c00 	.word	0x58000c00

08006750 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b0ba      	sub	sp, #232	; 0xe8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006776:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800677a:	f640 030f 	movw	r3, #2063	; 0x80f
 800677e:	4013      	ands	r3, r2
 8006780:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006788:	2b00      	cmp	r3, #0
 800678a:	d11b      	bne.n	80067c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800678c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006790:	f003 0320 	and.w	r3, r3, #32
 8006794:	2b00      	cmp	r3, #0
 8006796:	d015      	beq.n	80067c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800679c:	f003 0320 	and.w	r3, r3, #32
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d105      	bne.n	80067b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d009      	beq.n	80067c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 8377 	beq.w	8006ea8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	4798      	blx	r3
      }
      return;
 80067c2:	e371      	b.n	8006ea8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80067c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 8123 	beq.w	8006a14 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80067ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80067d2:	4b8d      	ldr	r3, [pc, #564]	; (8006a08 <HAL_UART_IRQHandler+0x2b8>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d106      	bne.n	80067e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80067da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80067de:	4b8b      	ldr	r3, [pc, #556]	; (8006a0c <HAL_UART_IRQHandler+0x2bc>)
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 8116 	beq.w	8006a14 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d011      	beq.n	8006818 <HAL_UART_IRQHandler+0xc8>
 80067f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00b      	beq.n	8006818 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2201      	movs	r2, #1
 8006806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680e:	f043 0201 	orr.w	r2, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d011      	beq.n	8006848 <HAL_UART_IRQHandler+0xf8>
 8006824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00b      	beq.n	8006848 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2202      	movs	r2, #2
 8006836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683e:	f043 0204 	orr.w	r2, r3, #4
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d011      	beq.n	8006878 <HAL_UART_IRQHandler+0x128>
 8006854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00b      	beq.n	8006878 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2204      	movs	r2, #4
 8006866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686e:	f043 0202 	orr.w	r2, r3, #2
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800687c:	f003 0308 	and.w	r3, r3, #8
 8006880:	2b00      	cmp	r3, #0
 8006882:	d017      	beq.n	80068b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006888:	f003 0320 	and.w	r3, r3, #32
 800688c:	2b00      	cmp	r3, #0
 800688e:	d105      	bne.n	800689c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006890:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006894:	4b5c      	ldr	r3, [pc, #368]	; (8006a08 <HAL_UART_IRQHandler+0x2b8>)
 8006896:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00b      	beq.n	80068b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2208      	movs	r2, #8
 80068a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068aa:	f043 0208 	orr.w	r2, r3, #8
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d012      	beq.n	80068e6 <HAL_UART_IRQHandler+0x196>
 80068c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00c      	beq.n	80068e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068dc:	f043 0220 	orr.w	r2, r3, #32
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 82dd 	beq.w	8006eac <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d013      	beq.n	8006926 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b00      	cmp	r3, #0
 8006908:	d105      	bne.n	8006916 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800690a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800690e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d007      	beq.n	8006926 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693a:	2b40      	cmp	r3, #64	; 0x40
 800693c:	d005      	beq.n	800694a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800693e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006942:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006946:	2b00      	cmp	r3, #0
 8006948:	d054      	beq.n	80069f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 fc1c 	bl	8008188 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b40      	cmp	r3, #64	; 0x40
 800695c:	d146      	bne.n	80069ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3308      	adds	r3, #8
 8006964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006974:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800697c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3308      	adds	r3, #8
 8006986:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800698a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800698e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006996:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1d9      	bne.n	800695e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d017      	beq.n	80069e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ba:	4a15      	ldr	r2, [pc, #84]	; (8006a10 <HAL_UART_IRQHandler+0x2c0>)
 80069bc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7fb fe65 	bl	8002694 <HAL_DMA_Abort_IT>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d019      	beq.n	8006a04 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80069de:	4610      	mov	r0, r2
 80069e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e2:	e00f      	b.n	8006a04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fa77 	bl	8006ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ea:	e00b      	b.n	8006a04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fa73 	bl	8006ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f2:	e007      	b.n	8006a04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fa6f 	bl	8006ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006a02:	e253      	b.n	8006eac <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	bf00      	nop
    return;
 8006a06:	e251      	b.n	8006eac <HAL_UART_IRQHandler+0x75c>
 8006a08:	10000001 	.word	0x10000001
 8006a0c:	04000120 	.word	0x04000120
 8006a10:	08008255 	.word	0x08008255

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	f040 81e7 	bne.w	8006dec <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a22:	f003 0310 	and.w	r3, r3, #16
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 81e0 	beq.w	8006dec <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a30:	f003 0310 	and.w	r3, r3, #16
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 81d9 	beq.w	8006dec <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2210      	movs	r2, #16
 8006a40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b40      	cmp	r3, #64	; 0x40
 8006a4e:	f040 8151 	bne.w	8006cf4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a96      	ldr	r2, [pc, #600]	; (8006cb4 <HAL_UART_IRQHandler+0x564>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d068      	beq.n	8006b32 <HAL_UART_IRQHandler+0x3e2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a93      	ldr	r2, [pc, #588]	; (8006cb8 <HAL_UART_IRQHandler+0x568>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d061      	beq.n	8006b32 <HAL_UART_IRQHandler+0x3e2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a91      	ldr	r2, [pc, #580]	; (8006cbc <HAL_UART_IRQHandler+0x56c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d05a      	beq.n	8006b32 <HAL_UART_IRQHandler+0x3e2>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a8e      	ldr	r2, [pc, #568]	; (8006cc0 <HAL_UART_IRQHandler+0x570>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d053      	beq.n	8006b32 <HAL_UART_IRQHandler+0x3e2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a8c      	ldr	r2, [pc, #560]	; (8006cc4 <HAL_UART_IRQHandler+0x574>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d04c      	beq.n	8006b32 <HAL_UART_IRQHandler+0x3e2>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a89      	ldr	r2, [pc, #548]	; (8006cc8 <HAL_UART_IRQHandler+0x578>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d045      	beq.n	8006b32 <HAL_UART_IRQHandler+0x3e2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a87      	ldr	r2, [pc, #540]	; (8006ccc <HAL_UART_IRQHandler+0x57c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d03e      	beq.n	8006b32 <HAL_UART_IRQHandler+0x3e2>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a84      	ldr	r2, [pc, #528]	; (8006cd0 <HAL_UART_IRQHandler+0x580>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d037      	beq.n	8006b32 <HAL_UART_IRQHandler+0x3e2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a82      	ldr	r2, [pc, #520]	; (8006cd4 <HAL_UART_IRQHandler+0x584>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d030      	beq.n	8006b32 <HAL_UART_IRQHandler+0x3e2>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a7f      	ldr	r2, [pc, #508]	; (8006cd8 <HAL_UART_IRQHandler+0x588>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d029      	beq.n	8006b32 <HAL_UART_IRQHandler+0x3e2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a7d      	ldr	r2, [pc, #500]	; (8006cdc <HAL_UART_IRQHandler+0x58c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d022      	beq.n	8006b32 <HAL_UART_IRQHandler+0x3e2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a7a      	ldr	r2, [pc, #488]	; (8006ce0 <HAL_UART_IRQHandler+0x590>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d01b      	beq.n	8006b32 <HAL_UART_IRQHandler+0x3e2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a78      	ldr	r2, [pc, #480]	; (8006ce4 <HAL_UART_IRQHandler+0x594>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d014      	beq.n	8006b32 <HAL_UART_IRQHandler+0x3e2>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a75      	ldr	r2, [pc, #468]	; (8006ce8 <HAL_UART_IRQHandler+0x598>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00d      	beq.n	8006b32 <HAL_UART_IRQHandler+0x3e2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a73      	ldr	r2, [pc, #460]	; (8006cec <HAL_UART_IRQHandler+0x59c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d006      	beq.n	8006b32 <HAL_UART_IRQHandler+0x3e2>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a70      	ldr	r2, [pc, #448]	; (8006cf0 <HAL_UART_IRQHandler+0x5a0>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d106      	bne.n	8006b40 <HAL_UART_IRQHandler+0x3f0>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	e005      	b.n	8006b4c <HAL_UART_IRQHandler+0x3fc>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 81ab 	beq.w	8006eb0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b64:	429a      	cmp	r2, r3
 8006b66:	f080 81a3 	bcs.w	8006eb0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b80:	f000 8087 	beq.w	8006c92 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006bb2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1da      	bne.n	8006b84 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006be0:	f023 0301 	bic.w	r3, r3, #1
 8006be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3308      	adds	r3, #8
 8006bee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bf2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006bf6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006bfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006bfe:	e841 2300 	strex	r3, r2, [r1]
 8006c02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1e1      	bne.n	8006bce <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3308      	adds	r3, #8
 8006c10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3308      	adds	r3, #8
 8006c2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e3      	bne.n	8006c0a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c58:	e853 3f00 	ldrex	r3, [r3]
 8006c5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c60:	f023 0310 	bic.w	r3, r3, #16
 8006c64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c72:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e4      	bne.n	8006c50 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fb f9e3 	bl	8002058 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2202      	movs	r2, #2
 8006c96:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f91d 	bl	8006eec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cb2:	e0fd      	b.n	8006eb0 <HAL_UART_IRQHandler+0x760>
 8006cb4:	40020010 	.word	0x40020010
 8006cb8:	40020028 	.word	0x40020028
 8006cbc:	40020040 	.word	0x40020040
 8006cc0:	40020058 	.word	0x40020058
 8006cc4:	40020070 	.word	0x40020070
 8006cc8:	40020088 	.word	0x40020088
 8006ccc:	400200a0 	.word	0x400200a0
 8006cd0:	400200b8 	.word	0x400200b8
 8006cd4:	40020410 	.word	0x40020410
 8006cd8:	40020428 	.word	0x40020428
 8006cdc:	40020440 	.word	0x40020440
 8006ce0:	40020458 	.word	0x40020458
 8006ce4:	40020470 	.word	0x40020470
 8006ce8:	40020488 	.word	0x40020488
 8006cec:	400204a0 	.word	0x400204a0
 8006cf0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 80cf 	beq.w	8006eb4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006d16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 80ca 	beq.w	8006eb4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d42:	647b      	str	r3, [r7, #68]	; 0x44
 8006d44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e4      	bne.n	8006d20 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	623b      	str	r3, [r7, #32]
   return(result);
 8006d66:	6a3a      	ldr	r2, [r7, #32]
 8006d68:	4b55      	ldr	r3, [pc, #340]	; (8006ec0 <HAL_UART_IRQHandler+0x770>)
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3308      	adds	r3, #8
 8006d76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d7a:	633a      	str	r2, [r7, #48]	; 0x30
 8006d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e3      	bne.n	8006d56 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	60fb      	str	r3, [r7, #12]
   return(result);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 0310 	bic.w	r3, r3, #16
 8006db6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006dc4:	61fb      	str	r3, [r7, #28]
 8006dc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc8:	69b9      	ldr	r1, [r7, #24]
 8006dca:	69fa      	ldr	r2, [r7, #28]
 8006dcc:	e841 2300 	strex	r3, r2, [r1]
 8006dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e4      	bne.n	8006da2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f881 	bl	8006eec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006dea:	e063      	b.n	8006eb4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00e      	beq.n	8006e16 <HAL_UART_IRQHandler+0x6c6>
 8006df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d008      	beq.n	8006e16 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f001 ff7e 	bl	8008d10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e14:	e051      	b.n	8006eba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d014      	beq.n	8006e4c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d105      	bne.n	8006e3a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d008      	beq.n	8006e4c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d03a      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
    }
    return;
 8006e4a:	e035      	b.n	8006eb8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d009      	beq.n	8006e6c <HAL_UART_IRQHandler+0x71c>
 8006e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 fa0b 	bl	8008280 <UART_EndTransmit_IT>
    return;
 8006e6a:	e026      	b.n	8006eba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d009      	beq.n	8006e8c <HAL_UART_IRQHandler+0x73c>
 8006e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 ff57 	bl	8008d38 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e8a:	e016      	b.n	8006eba <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d010      	beq.n	8006eba <HAL_UART_IRQHandler+0x76a>
 8006e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	da0c      	bge.n	8006eba <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f001 ff3f 	bl	8008d24 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ea6:	e008      	b.n	8006eba <HAL_UART_IRQHandler+0x76a>
      return;
 8006ea8:	bf00      	nop
 8006eaa:	e006      	b.n	8006eba <HAL_UART_IRQHandler+0x76a>
    return;
 8006eac:	bf00      	nop
 8006eae:	e004      	b.n	8006eba <HAL_UART_IRQHandler+0x76a>
      return;
 8006eb0:	bf00      	nop
 8006eb2:	e002      	b.n	8006eba <HAL_UART_IRQHandler+0x76a>
      return;
 8006eb4:	bf00      	nop
 8006eb6:	e000      	b.n	8006eba <HAL_UART_IRQHandler+0x76a>
    return;
 8006eb8:	bf00      	nop
  }
}
 8006eba:	37e8      	adds	r7, #232	; 0xe8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	effffffe 	.word	0xeffffffe

08006ec4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f08:	b092      	sub	sp, #72	; 0x48
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	689a      	ldr	r2, [r3, #8]
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	431a      	orrs	r2, r3
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	4bbe      	ldr	r3, [pc, #760]	; (800722c <UART_SetConfig+0x328>)
 8006f34:	4013      	ands	r3, r2
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	6812      	ldr	r2, [r2, #0]
 8006f3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f3c:	430b      	orrs	r3, r1
 8006f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	68da      	ldr	r2, [r3, #12]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4ab3      	ldr	r2, [pc, #716]	; (8007230 <UART_SetConfig+0x32c>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d004      	beq.n	8006f70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689a      	ldr	r2, [r3, #8]
 8006f76:	4baf      	ldr	r3, [pc, #700]	; (8007234 <UART_SetConfig+0x330>)
 8006f78:	4013      	ands	r3, r2
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	6812      	ldr	r2, [r2, #0]
 8006f7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f80:	430b      	orrs	r3, r1
 8006f82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8a:	f023 010f 	bic.w	r1, r3, #15
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4aa6      	ldr	r2, [pc, #664]	; (8007238 <UART_SetConfig+0x334>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d177      	bne.n	8007094 <UART_SetConfig+0x190>
 8006fa4:	4ba5      	ldr	r3, [pc, #660]	; (800723c <UART_SetConfig+0x338>)
 8006fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fac:	2b28      	cmp	r3, #40	; 0x28
 8006fae:	d86d      	bhi.n	800708c <UART_SetConfig+0x188>
 8006fb0:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <UART_SetConfig+0xb4>)
 8006fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb6:	bf00      	nop
 8006fb8:	0800705d 	.word	0x0800705d
 8006fbc:	0800708d 	.word	0x0800708d
 8006fc0:	0800708d 	.word	0x0800708d
 8006fc4:	0800708d 	.word	0x0800708d
 8006fc8:	0800708d 	.word	0x0800708d
 8006fcc:	0800708d 	.word	0x0800708d
 8006fd0:	0800708d 	.word	0x0800708d
 8006fd4:	0800708d 	.word	0x0800708d
 8006fd8:	08007065 	.word	0x08007065
 8006fdc:	0800708d 	.word	0x0800708d
 8006fe0:	0800708d 	.word	0x0800708d
 8006fe4:	0800708d 	.word	0x0800708d
 8006fe8:	0800708d 	.word	0x0800708d
 8006fec:	0800708d 	.word	0x0800708d
 8006ff0:	0800708d 	.word	0x0800708d
 8006ff4:	0800708d 	.word	0x0800708d
 8006ff8:	0800706d 	.word	0x0800706d
 8006ffc:	0800708d 	.word	0x0800708d
 8007000:	0800708d 	.word	0x0800708d
 8007004:	0800708d 	.word	0x0800708d
 8007008:	0800708d 	.word	0x0800708d
 800700c:	0800708d 	.word	0x0800708d
 8007010:	0800708d 	.word	0x0800708d
 8007014:	0800708d 	.word	0x0800708d
 8007018:	08007075 	.word	0x08007075
 800701c:	0800708d 	.word	0x0800708d
 8007020:	0800708d 	.word	0x0800708d
 8007024:	0800708d 	.word	0x0800708d
 8007028:	0800708d 	.word	0x0800708d
 800702c:	0800708d 	.word	0x0800708d
 8007030:	0800708d 	.word	0x0800708d
 8007034:	0800708d 	.word	0x0800708d
 8007038:	0800707d 	.word	0x0800707d
 800703c:	0800708d 	.word	0x0800708d
 8007040:	0800708d 	.word	0x0800708d
 8007044:	0800708d 	.word	0x0800708d
 8007048:	0800708d 	.word	0x0800708d
 800704c:	0800708d 	.word	0x0800708d
 8007050:	0800708d 	.word	0x0800708d
 8007054:	0800708d 	.word	0x0800708d
 8007058:	08007085 	.word	0x08007085
 800705c:	2301      	movs	r3, #1
 800705e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007062:	e326      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007064:	2304      	movs	r3, #4
 8007066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800706a:	e322      	b.n	80076b2 <UART_SetConfig+0x7ae>
 800706c:	2308      	movs	r3, #8
 800706e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007072:	e31e      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007074:	2310      	movs	r3, #16
 8007076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800707a:	e31a      	b.n	80076b2 <UART_SetConfig+0x7ae>
 800707c:	2320      	movs	r3, #32
 800707e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007082:	e316      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007084:	2340      	movs	r3, #64	; 0x40
 8007086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800708a:	e312      	b.n	80076b2 <UART_SetConfig+0x7ae>
 800708c:	2380      	movs	r3, #128	; 0x80
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007092:	e30e      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a69      	ldr	r2, [pc, #420]	; (8007240 <UART_SetConfig+0x33c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d130      	bne.n	8007100 <UART_SetConfig+0x1fc>
 800709e:	4b67      	ldr	r3, [pc, #412]	; (800723c <UART_SetConfig+0x338>)
 80070a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	2b05      	cmp	r3, #5
 80070a8:	d826      	bhi.n	80070f8 <UART_SetConfig+0x1f4>
 80070aa:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <UART_SetConfig+0x1ac>)
 80070ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b0:	080070c9 	.word	0x080070c9
 80070b4:	080070d1 	.word	0x080070d1
 80070b8:	080070d9 	.word	0x080070d9
 80070bc:	080070e1 	.word	0x080070e1
 80070c0:	080070e9 	.word	0x080070e9
 80070c4:	080070f1 	.word	0x080070f1
 80070c8:	2300      	movs	r3, #0
 80070ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ce:	e2f0      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80070d0:	2304      	movs	r3, #4
 80070d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070d6:	e2ec      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80070d8:	2308      	movs	r3, #8
 80070da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070de:	e2e8      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80070e0:	2310      	movs	r3, #16
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070e6:	e2e4      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80070e8:	2320      	movs	r3, #32
 80070ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ee:	e2e0      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80070f0:	2340      	movs	r3, #64	; 0x40
 80070f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070f6:	e2dc      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80070f8:	2380      	movs	r3, #128	; 0x80
 80070fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070fe:	e2d8      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a4f      	ldr	r2, [pc, #316]	; (8007244 <UART_SetConfig+0x340>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d130      	bne.n	800716c <UART_SetConfig+0x268>
 800710a:	4b4c      	ldr	r3, [pc, #304]	; (800723c <UART_SetConfig+0x338>)
 800710c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	2b05      	cmp	r3, #5
 8007114:	d826      	bhi.n	8007164 <UART_SetConfig+0x260>
 8007116:	a201      	add	r2, pc, #4	; (adr r2, 800711c <UART_SetConfig+0x218>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	08007135 	.word	0x08007135
 8007120:	0800713d 	.word	0x0800713d
 8007124:	08007145 	.word	0x08007145
 8007128:	0800714d 	.word	0x0800714d
 800712c:	08007155 	.word	0x08007155
 8007130:	0800715d 	.word	0x0800715d
 8007134:	2300      	movs	r3, #0
 8007136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713a:	e2ba      	b.n	80076b2 <UART_SetConfig+0x7ae>
 800713c:	2304      	movs	r3, #4
 800713e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007142:	e2b6      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007144:	2308      	movs	r3, #8
 8007146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714a:	e2b2      	b.n	80076b2 <UART_SetConfig+0x7ae>
 800714c:	2310      	movs	r3, #16
 800714e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007152:	e2ae      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007154:	2320      	movs	r3, #32
 8007156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715a:	e2aa      	b.n	80076b2 <UART_SetConfig+0x7ae>
 800715c:	2340      	movs	r3, #64	; 0x40
 800715e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007162:	e2a6      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007164:	2380      	movs	r3, #128	; 0x80
 8007166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800716a:	e2a2      	b.n	80076b2 <UART_SetConfig+0x7ae>
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a35      	ldr	r2, [pc, #212]	; (8007248 <UART_SetConfig+0x344>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d130      	bne.n	80071d8 <UART_SetConfig+0x2d4>
 8007176:	4b31      	ldr	r3, [pc, #196]	; (800723c <UART_SetConfig+0x338>)
 8007178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717a:	f003 0307 	and.w	r3, r3, #7
 800717e:	2b05      	cmp	r3, #5
 8007180:	d826      	bhi.n	80071d0 <UART_SetConfig+0x2cc>
 8007182:	a201      	add	r2, pc, #4	; (adr r2, 8007188 <UART_SetConfig+0x284>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	080071a1 	.word	0x080071a1
 800718c:	080071a9 	.word	0x080071a9
 8007190:	080071b1 	.word	0x080071b1
 8007194:	080071b9 	.word	0x080071b9
 8007198:	080071c1 	.word	0x080071c1
 800719c:	080071c9 	.word	0x080071c9
 80071a0:	2300      	movs	r3, #0
 80071a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071a6:	e284      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80071a8:	2304      	movs	r3, #4
 80071aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ae:	e280      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80071b0:	2308      	movs	r3, #8
 80071b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071b6:	e27c      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80071b8:	2310      	movs	r3, #16
 80071ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071be:	e278      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80071c0:	2320      	movs	r3, #32
 80071c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071c6:	e274      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80071c8:	2340      	movs	r3, #64	; 0x40
 80071ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ce:	e270      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80071d0:	2380      	movs	r3, #128	; 0x80
 80071d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071d6:	e26c      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a1b      	ldr	r2, [pc, #108]	; (800724c <UART_SetConfig+0x348>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d142      	bne.n	8007268 <UART_SetConfig+0x364>
 80071e2:	4b16      	ldr	r3, [pc, #88]	; (800723c <UART_SetConfig+0x338>)
 80071e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	2b05      	cmp	r3, #5
 80071ec:	d838      	bhi.n	8007260 <UART_SetConfig+0x35c>
 80071ee:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <UART_SetConfig+0x2f0>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	0800720d 	.word	0x0800720d
 80071f8:	08007215 	.word	0x08007215
 80071fc:	0800721d 	.word	0x0800721d
 8007200:	08007225 	.word	0x08007225
 8007204:	08007251 	.word	0x08007251
 8007208:	08007259 	.word	0x08007259
 800720c:	2300      	movs	r3, #0
 800720e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007212:	e24e      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007214:	2304      	movs	r3, #4
 8007216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800721a:	e24a      	b.n	80076b2 <UART_SetConfig+0x7ae>
 800721c:	2308      	movs	r3, #8
 800721e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007222:	e246      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007224:	2310      	movs	r3, #16
 8007226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722a:	e242      	b.n	80076b2 <UART_SetConfig+0x7ae>
 800722c:	cfff69f3 	.word	0xcfff69f3
 8007230:	58000c00 	.word	0x58000c00
 8007234:	11fff4ff 	.word	0x11fff4ff
 8007238:	40011000 	.word	0x40011000
 800723c:	58024400 	.word	0x58024400
 8007240:	40004400 	.word	0x40004400
 8007244:	40004800 	.word	0x40004800
 8007248:	40004c00 	.word	0x40004c00
 800724c:	40005000 	.word	0x40005000
 8007250:	2320      	movs	r3, #32
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007256:	e22c      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007258:	2340      	movs	r3, #64	; 0x40
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725e:	e228      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007260:	2380      	movs	r3, #128	; 0x80
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007266:	e224      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4ab1      	ldr	r2, [pc, #708]	; (8007534 <UART_SetConfig+0x630>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d176      	bne.n	8007360 <UART_SetConfig+0x45c>
 8007272:	4bb1      	ldr	r3, [pc, #708]	; (8007538 <UART_SetConfig+0x634>)
 8007274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800727a:	2b28      	cmp	r3, #40	; 0x28
 800727c:	d86c      	bhi.n	8007358 <UART_SetConfig+0x454>
 800727e:	a201      	add	r2, pc, #4	; (adr r2, 8007284 <UART_SetConfig+0x380>)
 8007280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007284:	08007329 	.word	0x08007329
 8007288:	08007359 	.word	0x08007359
 800728c:	08007359 	.word	0x08007359
 8007290:	08007359 	.word	0x08007359
 8007294:	08007359 	.word	0x08007359
 8007298:	08007359 	.word	0x08007359
 800729c:	08007359 	.word	0x08007359
 80072a0:	08007359 	.word	0x08007359
 80072a4:	08007331 	.word	0x08007331
 80072a8:	08007359 	.word	0x08007359
 80072ac:	08007359 	.word	0x08007359
 80072b0:	08007359 	.word	0x08007359
 80072b4:	08007359 	.word	0x08007359
 80072b8:	08007359 	.word	0x08007359
 80072bc:	08007359 	.word	0x08007359
 80072c0:	08007359 	.word	0x08007359
 80072c4:	08007339 	.word	0x08007339
 80072c8:	08007359 	.word	0x08007359
 80072cc:	08007359 	.word	0x08007359
 80072d0:	08007359 	.word	0x08007359
 80072d4:	08007359 	.word	0x08007359
 80072d8:	08007359 	.word	0x08007359
 80072dc:	08007359 	.word	0x08007359
 80072e0:	08007359 	.word	0x08007359
 80072e4:	08007341 	.word	0x08007341
 80072e8:	08007359 	.word	0x08007359
 80072ec:	08007359 	.word	0x08007359
 80072f0:	08007359 	.word	0x08007359
 80072f4:	08007359 	.word	0x08007359
 80072f8:	08007359 	.word	0x08007359
 80072fc:	08007359 	.word	0x08007359
 8007300:	08007359 	.word	0x08007359
 8007304:	08007349 	.word	0x08007349
 8007308:	08007359 	.word	0x08007359
 800730c:	08007359 	.word	0x08007359
 8007310:	08007359 	.word	0x08007359
 8007314:	08007359 	.word	0x08007359
 8007318:	08007359 	.word	0x08007359
 800731c:	08007359 	.word	0x08007359
 8007320:	08007359 	.word	0x08007359
 8007324:	08007351 	.word	0x08007351
 8007328:	2301      	movs	r3, #1
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800732e:	e1c0      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007330:	2304      	movs	r3, #4
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007336:	e1bc      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007338:	2308      	movs	r3, #8
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800733e:	e1b8      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007340:	2310      	movs	r3, #16
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007346:	e1b4      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007348:	2320      	movs	r3, #32
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734e:	e1b0      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007350:	2340      	movs	r3, #64	; 0x40
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007356:	e1ac      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007358:	2380      	movs	r3, #128	; 0x80
 800735a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800735e:	e1a8      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a75      	ldr	r2, [pc, #468]	; (800753c <UART_SetConfig+0x638>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d130      	bne.n	80073cc <UART_SetConfig+0x4c8>
 800736a:	4b73      	ldr	r3, [pc, #460]	; (8007538 <UART_SetConfig+0x634>)
 800736c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	2b05      	cmp	r3, #5
 8007374:	d826      	bhi.n	80073c4 <UART_SetConfig+0x4c0>
 8007376:	a201      	add	r2, pc, #4	; (adr r2, 800737c <UART_SetConfig+0x478>)
 8007378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737c:	08007395 	.word	0x08007395
 8007380:	0800739d 	.word	0x0800739d
 8007384:	080073a5 	.word	0x080073a5
 8007388:	080073ad 	.word	0x080073ad
 800738c:	080073b5 	.word	0x080073b5
 8007390:	080073bd 	.word	0x080073bd
 8007394:	2300      	movs	r3, #0
 8007396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800739a:	e18a      	b.n	80076b2 <UART_SetConfig+0x7ae>
 800739c:	2304      	movs	r3, #4
 800739e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073a2:	e186      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80073a4:	2308      	movs	r3, #8
 80073a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073aa:	e182      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80073ac:	2310      	movs	r3, #16
 80073ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073b2:	e17e      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80073b4:	2320      	movs	r3, #32
 80073b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ba:	e17a      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80073bc:	2340      	movs	r3, #64	; 0x40
 80073be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073c2:	e176      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80073c4:	2380      	movs	r3, #128	; 0x80
 80073c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ca:	e172      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a5b      	ldr	r2, [pc, #364]	; (8007540 <UART_SetConfig+0x63c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d130      	bne.n	8007438 <UART_SetConfig+0x534>
 80073d6:	4b58      	ldr	r3, [pc, #352]	; (8007538 <UART_SetConfig+0x634>)
 80073d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073da:	f003 0307 	and.w	r3, r3, #7
 80073de:	2b05      	cmp	r3, #5
 80073e0:	d826      	bhi.n	8007430 <UART_SetConfig+0x52c>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <UART_SetConfig+0x4e4>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	08007401 	.word	0x08007401
 80073ec:	08007409 	.word	0x08007409
 80073f0:	08007411 	.word	0x08007411
 80073f4:	08007419 	.word	0x08007419
 80073f8:	08007421 	.word	0x08007421
 80073fc:	08007429 	.word	0x08007429
 8007400:	2300      	movs	r3, #0
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007406:	e154      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007408:	2304      	movs	r3, #4
 800740a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740e:	e150      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007410:	2308      	movs	r3, #8
 8007412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007416:	e14c      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007418:	2310      	movs	r3, #16
 800741a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741e:	e148      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007420:	2320      	movs	r3, #32
 8007422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007426:	e144      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007428:	2340      	movs	r3, #64	; 0x40
 800742a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800742e:	e140      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007430:	2380      	movs	r3, #128	; 0x80
 8007432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007436:	e13c      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a41      	ldr	r2, [pc, #260]	; (8007544 <UART_SetConfig+0x640>)
 800743e:	4293      	cmp	r3, r2
 8007440:	f040 8082 	bne.w	8007548 <UART_SetConfig+0x644>
 8007444:	4b3c      	ldr	r3, [pc, #240]	; (8007538 <UART_SetConfig+0x634>)
 8007446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007448:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800744c:	2b28      	cmp	r3, #40	; 0x28
 800744e:	d86d      	bhi.n	800752c <UART_SetConfig+0x628>
 8007450:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <UART_SetConfig+0x554>)
 8007452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007456:	bf00      	nop
 8007458:	080074fd 	.word	0x080074fd
 800745c:	0800752d 	.word	0x0800752d
 8007460:	0800752d 	.word	0x0800752d
 8007464:	0800752d 	.word	0x0800752d
 8007468:	0800752d 	.word	0x0800752d
 800746c:	0800752d 	.word	0x0800752d
 8007470:	0800752d 	.word	0x0800752d
 8007474:	0800752d 	.word	0x0800752d
 8007478:	08007505 	.word	0x08007505
 800747c:	0800752d 	.word	0x0800752d
 8007480:	0800752d 	.word	0x0800752d
 8007484:	0800752d 	.word	0x0800752d
 8007488:	0800752d 	.word	0x0800752d
 800748c:	0800752d 	.word	0x0800752d
 8007490:	0800752d 	.word	0x0800752d
 8007494:	0800752d 	.word	0x0800752d
 8007498:	0800750d 	.word	0x0800750d
 800749c:	0800752d 	.word	0x0800752d
 80074a0:	0800752d 	.word	0x0800752d
 80074a4:	0800752d 	.word	0x0800752d
 80074a8:	0800752d 	.word	0x0800752d
 80074ac:	0800752d 	.word	0x0800752d
 80074b0:	0800752d 	.word	0x0800752d
 80074b4:	0800752d 	.word	0x0800752d
 80074b8:	08007515 	.word	0x08007515
 80074bc:	0800752d 	.word	0x0800752d
 80074c0:	0800752d 	.word	0x0800752d
 80074c4:	0800752d 	.word	0x0800752d
 80074c8:	0800752d 	.word	0x0800752d
 80074cc:	0800752d 	.word	0x0800752d
 80074d0:	0800752d 	.word	0x0800752d
 80074d4:	0800752d 	.word	0x0800752d
 80074d8:	0800751d 	.word	0x0800751d
 80074dc:	0800752d 	.word	0x0800752d
 80074e0:	0800752d 	.word	0x0800752d
 80074e4:	0800752d 	.word	0x0800752d
 80074e8:	0800752d 	.word	0x0800752d
 80074ec:	0800752d 	.word	0x0800752d
 80074f0:	0800752d 	.word	0x0800752d
 80074f4:	0800752d 	.word	0x0800752d
 80074f8:	08007525 	.word	0x08007525
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007502:	e0d6      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007504:	2304      	movs	r3, #4
 8007506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750a:	e0d2      	b.n	80076b2 <UART_SetConfig+0x7ae>
 800750c:	2308      	movs	r3, #8
 800750e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007512:	e0ce      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007514:	2310      	movs	r3, #16
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751a:	e0ca      	b.n	80076b2 <UART_SetConfig+0x7ae>
 800751c:	2320      	movs	r3, #32
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007522:	e0c6      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007524:	2340      	movs	r3, #64	; 0x40
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752a:	e0c2      	b.n	80076b2 <UART_SetConfig+0x7ae>
 800752c:	2380      	movs	r3, #128	; 0x80
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007532:	e0be      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007534:	40011400 	.word	0x40011400
 8007538:	58024400 	.word	0x58024400
 800753c:	40007800 	.word	0x40007800
 8007540:	40007c00 	.word	0x40007c00
 8007544:	40011800 	.word	0x40011800
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4aad      	ldr	r2, [pc, #692]	; (8007804 <UART_SetConfig+0x900>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d176      	bne.n	8007640 <UART_SetConfig+0x73c>
 8007552:	4bad      	ldr	r3, [pc, #692]	; (8007808 <UART_SetConfig+0x904>)
 8007554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800755a:	2b28      	cmp	r3, #40	; 0x28
 800755c:	d86c      	bhi.n	8007638 <UART_SetConfig+0x734>
 800755e:	a201      	add	r2, pc, #4	; (adr r2, 8007564 <UART_SetConfig+0x660>)
 8007560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007564:	08007609 	.word	0x08007609
 8007568:	08007639 	.word	0x08007639
 800756c:	08007639 	.word	0x08007639
 8007570:	08007639 	.word	0x08007639
 8007574:	08007639 	.word	0x08007639
 8007578:	08007639 	.word	0x08007639
 800757c:	08007639 	.word	0x08007639
 8007580:	08007639 	.word	0x08007639
 8007584:	08007611 	.word	0x08007611
 8007588:	08007639 	.word	0x08007639
 800758c:	08007639 	.word	0x08007639
 8007590:	08007639 	.word	0x08007639
 8007594:	08007639 	.word	0x08007639
 8007598:	08007639 	.word	0x08007639
 800759c:	08007639 	.word	0x08007639
 80075a0:	08007639 	.word	0x08007639
 80075a4:	08007619 	.word	0x08007619
 80075a8:	08007639 	.word	0x08007639
 80075ac:	08007639 	.word	0x08007639
 80075b0:	08007639 	.word	0x08007639
 80075b4:	08007639 	.word	0x08007639
 80075b8:	08007639 	.word	0x08007639
 80075bc:	08007639 	.word	0x08007639
 80075c0:	08007639 	.word	0x08007639
 80075c4:	08007621 	.word	0x08007621
 80075c8:	08007639 	.word	0x08007639
 80075cc:	08007639 	.word	0x08007639
 80075d0:	08007639 	.word	0x08007639
 80075d4:	08007639 	.word	0x08007639
 80075d8:	08007639 	.word	0x08007639
 80075dc:	08007639 	.word	0x08007639
 80075e0:	08007639 	.word	0x08007639
 80075e4:	08007629 	.word	0x08007629
 80075e8:	08007639 	.word	0x08007639
 80075ec:	08007639 	.word	0x08007639
 80075f0:	08007639 	.word	0x08007639
 80075f4:	08007639 	.word	0x08007639
 80075f8:	08007639 	.word	0x08007639
 80075fc:	08007639 	.word	0x08007639
 8007600:	08007639 	.word	0x08007639
 8007604:	08007631 	.word	0x08007631
 8007608:	2301      	movs	r3, #1
 800760a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800760e:	e050      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007610:	2304      	movs	r3, #4
 8007612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007616:	e04c      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007618:	2308      	movs	r3, #8
 800761a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800761e:	e048      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007620:	2310      	movs	r3, #16
 8007622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007626:	e044      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007628:	2320      	movs	r3, #32
 800762a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762e:	e040      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007630:	2340      	movs	r3, #64	; 0x40
 8007632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007636:	e03c      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007638:	2380      	movs	r3, #128	; 0x80
 800763a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800763e:	e038      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a71      	ldr	r2, [pc, #452]	; (800780c <UART_SetConfig+0x908>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d130      	bne.n	80076ac <UART_SetConfig+0x7a8>
 800764a:	4b6f      	ldr	r3, [pc, #444]	; (8007808 <UART_SetConfig+0x904>)
 800764c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764e:	f003 0307 	and.w	r3, r3, #7
 8007652:	2b05      	cmp	r3, #5
 8007654:	d826      	bhi.n	80076a4 <UART_SetConfig+0x7a0>
 8007656:	a201      	add	r2, pc, #4	; (adr r2, 800765c <UART_SetConfig+0x758>)
 8007658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765c:	08007675 	.word	0x08007675
 8007660:	0800767d 	.word	0x0800767d
 8007664:	08007685 	.word	0x08007685
 8007668:	0800768d 	.word	0x0800768d
 800766c:	08007695 	.word	0x08007695
 8007670:	0800769d 	.word	0x0800769d
 8007674:	2302      	movs	r3, #2
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800767a:	e01a      	b.n	80076b2 <UART_SetConfig+0x7ae>
 800767c:	2304      	movs	r3, #4
 800767e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007682:	e016      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007684:	2308      	movs	r3, #8
 8007686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800768a:	e012      	b.n	80076b2 <UART_SetConfig+0x7ae>
 800768c:	2310      	movs	r3, #16
 800768e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007692:	e00e      	b.n	80076b2 <UART_SetConfig+0x7ae>
 8007694:	2320      	movs	r3, #32
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800769a:	e00a      	b.n	80076b2 <UART_SetConfig+0x7ae>
 800769c:	2340      	movs	r3, #64	; 0x40
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076a2:	e006      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80076a4:	2380      	movs	r3, #128	; 0x80
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076aa:	e002      	b.n	80076b2 <UART_SetConfig+0x7ae>
 80076ac:	2380      	movs	r3, #128	; 0x80
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a55      	ldr	r2, [pc, #340]	; (800780c <UART_SetConfig+0x908>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	f040 80f8 	bne.w	80078ae <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	dc46      	bgt.n	8007754 <UART_SetConfig+0x850>
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	db75      	blt.n	80077b6 <UART_SetConfig+0x8b2>
 80076ca:	3b02      	subs	r3, #2
 80076cc:	2b1e      	cmp	r3, #30
 80076ce:	d872      	bhi.n	80077b6 <UART_SetConfig+0x8b2>
 80076d0:	a201      	add	r2, pc, #4	; (adr r2, 80076d8 <UART_SetConfig+0x7d4>)
 80076d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d6:	bf00      	nop
 80076d8:	0800775b 	.word	0x0800775b
 80076dc:	080077b7 	.word	0x080077b7
 80076e0:	08007763 	.word	0x08007763
 80076e4:	080077b7 	.word	0x080077b7
 80076e8:	080077b7 	.word	0x080077b7
 80076ec:	080077b7 	.word	0x080077b7
 80076f0:	08007773 	.word	0x08007773
 80076f4:	080077b7 	.word	0x080077b7
 80076f8:	080077b7 	.word	0x080077b7
 80076fc:	080077b7 	.word	0x080077b7
 8007700:	080077b7 	.word	0x080077b7
 8007704:	080077b7 	.word	0x080077b7
 8007708:	080077b7 	.word	0x080077b7
 800770c:	080077b7 	.word	0x080077b7
 8007710:	08007783 	.word	0x08007783
 8007714:	080077b7 	.word	0x080077b7
 8007718:	080077b7 	.word	0x080077b7
 800771c:	080077b7 	.word	0x080077b7
 8007720:	080077b7 	.word	0x080077b7
 8007724:	080077b7 	.word	0x080077b7
 8007728:	080077b7 	.word	0x080077b7
 800772c:	080077b7 	.word	0x080077b7
 8007730:	080077b7 	.word	0x080077b7
 8007734:	080077b7 	.word	0x080077b7
 8007738:	080077b7 	.word	0x080077b7
 800773c:	080077b7 	.word	0x080077b7
 8007740:	080077b7 	.word	0x080077b7
 8007744:	080077b7 	.word	0x080077b7
 8007748:	080077b7 	.word	0x080077b7
 800774c:	080077b7 	.word	0x080077b7
 8007750:	080077a9 	.word	0x080077a9
 8007754:	2b40      	cmp	r3, #64	; 0x40
 8007756:	d02a      	beq.n	80077ae <UART_SetConfig+0x8aa>
 8007758:	e02d      	b.n	80077b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800775a:	f7fd fd81 	bl	8005260 <HAL_RCCEx_GetD3PCLK1Freq>
 800775e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007760:	e02f      	b.n	80077c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007766:	4618      	mov	r0, r3
 8007768:	f7fd fd90 	bl	800528c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007770:	e027      	b.n	80077c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007772:	f107 0318 	add.w	r3, r7, #24
 8007776:	4618      	mov	r0, r3
 8007778:	f7fd fedc 	bl	8005534 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007780:	e01f      	b.n	80077c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007782:	4b21      	ldr	r3, [pc, #132]	; (8007808 <UART_SetConfig+0x904>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b00      	cmp	r3, #0
 800778c:	d009      	beq.n	80077a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800778e:	4b1e      	ldr	r3, [pc, #120]	; (8007808 <UART_SetConfig+0x904>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	08db      	lsrs	r3, r3, #3
 8007794:	f003 0303 	and.w	r3, r3, #3
 8007798:	4a1d      	ldr	r2, [pc, #116]	; (8007810 <UART_SetConfig+0x90c>)
 800779a:	fa22 f303 	lsr.w	r3, r2, r3
 800779e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077a0:	e00f      	b.n	80077c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80077a2:	4b1b      	ldr	r3, [pc, #108]	; (8007810 <UART_SetConfig+0x90c>)
 80077a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077a6:	e00c      	b.n	80077c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077a8:	4b1a      	ldr	r3, [pc, #104]	; (8007814 <UART_SetConfig+0x910>)
 80077aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077ac:	e009      	b.n	80077c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077b4:	e005      	b.n	80077c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80077c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 81ee 	beq.w	8007ba6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	4a12      	ldr	r2, [pc, #72]	; (8007818 <UART_SetConfig+0x914>)
 80077d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077d4:	461a      	mov	r2, r3
 80077d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80077dc:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	4613      	mov	r3, r2
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	4413      	add	r3, r2
 80077e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d305      	bcc.n	80077fa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d910      	bls.n	800781c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007800:	e1d1      	b.n	8007ba6 <UART_SetConfig+0xca2>
 8007802:	bf00      	nop
 8007804:	40011c00 	.word	0x40011c00
 8007808:	58024400 	.word	0x58024400
 800780c:	58000c00 	.word	0x58000c00
 8007810:	03d09000 	.word	0x03d09000
 8007814:	003d0900 	.word	0x003d0900
 8007818:	08009914 	.word	0x08009914
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800781c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800781e:	2200      	movs	r2, #0
 8007820:	60bb      	str	r3, [r7, #8]
 8007822:	60fa      	str	r2, [r7, #12]
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	4ac0      	ldr	r2, [pc, #768]	; (8007b2c <UART_SetConfig+0xc28>)
 800782a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800782e:	b29b      	uxth	r3, r3
 8007830:	2200      	movs	r2, #0
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	607a      	str	r2, [r7, #4]
 8007836:	e9d7 2300 	ldrd	r2, r3, [r7]
 800783a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800783e:	f7f8 fdaf 	bl	80003a0 <__aeabi_uldivmod>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4610      	mov	r0, r2
 8007848:	4619      	mov	r1, r3
 800784a:	f04f 0200 	mov.w	r2, #0
 800784e:	f04f 0300 	mov.w	r3, #0
 8007852:	020b      	lsls	r3, r1, #8
 8007854:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007858:	0202      	lsls	r2, r0, #8
 800785a:	6979      	ldr	r1, [r7, #20]
 800785c:	6849      	ldr	r1, [r1, #4]
 800785e:	0849      	lsrs	r1, r1, #1
 8007860:	2000      	movs	r0, #0
 8007862:	460c      	mov	r4, r1
 8007864:	4605      	mov	r5, r0
 8007866:	eb12 0804 	adds.w	r8, r2, r4
 800786a:	eb43 0905 	adc.w	r9, r3, r5
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	469a      	mov	sl, r3
 8007876:	4693      	mov	fp, r2
 8007878:	4652      	mov	r2, sl
 800787a:	465b      	mov	r3, fp
 800787c:	4640      	mov	r0, r8
 800787e:	4649      	mov	r1, r9
 8007880:	f7f8 fd8e 	bl	80003a0 <__aeabi_uldivmod>
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	4613      	mov	r3, r2
 800788a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800788c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007892:	d308      	bcc.n	80078a6 <UART_SetConfig+0x9a2>
 8007894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800789a:	d204      	bcs.n	80078a6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078a2:	60da      	str	r2, [r3, #12]
 80078a4:	e17f      	b.n	8007ba6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80078ac:	e17b      	b.n	8007ba6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078b6:	f040 80bd 	bne.w	8007a34 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80078ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80078be:	2b20      	cmp	r3, #32
 80078c0:	dc48      	bgt.n	8007954 <UART_SetConfig+0xa50>
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	db7b      	blt.n	80079be <UART_SetConfig+0xaba>
 80078c6:	2b20      	cmp	r3, #32
 80078c8:	d879      	bhi.n	80079be <UART_SetConfig+0xaba>
 80078ca:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <UART_SetConfig+0x9cc>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	0800795b 	.word	0x0800795b
 80078d4:	08007963 	.word	0x08007963
 80078d8:	080079bf 	.word	0x080079bf
 80078dc:	080079bf 	.word	0x080079bf
 80078e0:	0800796b 	.word	0x0800796b
 80078e4:	080079bf 	.word	0x080079bf
 80078e8:	080079bf 	.word	0x080079bf
 80078ec:	080079bf 	.word	0x080079bf
 80078f0:	0800797b 	.word	0x0800797b
 80078f4:	080079bf 	.word	0x080079bf
 80078f8:	080079bf 	.word	0x080079bf
 80078fc:	080079bf 	.word	0x080079bf
 8007900:	080079bf 	.word	0x080079bf
 8007904:	080079bf 	.word	0x080079bf
 8007908:	080079bf 	.word	0x080079bf
 800790c:	080079bf 	.word	0x080079bf
 8007910:	0800798b 	.word	0x0800798b
 8007914:	080079bf 	.word	0x080079bf
 8007918:	080079bf 	.word	0x080079bf
 800791c:	080079bf 	.word	0x080079bf
 8007920:	080079bf 	.word	0x080079bf
 8007924:	080079bf 	.word	0x080079bf
 8007928:	080079bf 	.word	0x080079bf
 800792c:	080079bf 	.word	0x080079bf
 8007930:	080079bf 	.word	0x080079bf
 8007934:	080079bf 	.word	0x080079bf
 8007938:	080079bf 	.word	0x080079bf
 800793c:	080079bf 	.word	0x080079bf
 8007940:	080079bf 	.word	0x080079bf
 8007944:	080079bf 	.word	0x080079bf
 8007948:	080079bf 	.word	0x080079bf
 800794c:	080079bf 	.word	0x080079bf
 8007950:	080079b1 	.word	0x080079b1
 8007954:	2b40      	cmp	r3, #64	; 0x40
 8007956:	d02e      	beq.n	80079b6 <UART_SetConfig+0xab2>
 8007958:	e031      	b.n	80079be <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800795a:	f7fc fa97 	bl	8003e8c <HAL_RCC_GetPCLK1Freq>
 800795e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007960:	e033      	b.n	80079ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007962:	f7fc faa9 	bl	8003eb8 <HAL_RCC_GetPCLK2Freq>
 8007966:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007968:	e02f      	b.n	80079ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800796a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800796e:	4618      	mov	r0, r3
 8007970:	f7fd fc8c 	bl	800528c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007978:	e027      	b.n	80079ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800797a:	f107 0318 	add.w	r3, r7, #24
 800797e:	4618      	mov	r0, r3
 8007980:	f7fd fdd8 	bl	8005534 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007988:	e01f      	b.n	80079ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800798a:	4b69      	ldr	r3, [pc, #420]	; (8007b30 <UART_SetConfig+0xc2c>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0320 	and.w	r3, r3, #32
 8007992:	2b00      	cmp	r3, #0
 8007994:	d009      	beq.n	80079aa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007996:	4b66      	ldr	r3, [pc, #408]	; (8007b30 <UART_SetConfig+0xc2c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	08db      	lsrs	r3, r3, #3
 800799c:	f003 0303 	and.w	r3, r3, #3
 80079a0:	4a64      	ldr	r2, [pc, #400]	; (8007b34 <UART_SetConfig+0xc30>)
 80079a2:	fa22 f303 	lsr.w	r3, r2, r3
 80079a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079a8:	e00f      	b.n	80079ca <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80079aa:	4b62      	ldr	r3, [pc, #392]	; (8007b34 <UART_SetConfig+0xc30>)
 80079ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079ae:	e00c      	b.n	80079ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80079b0:	4b61      	ldr	r3, [pc, #388]	; (8007b38 <UART_SetConfig+0xc34>)
 80079b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079b4:	e009      	b.n	80079ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079bc:	e005      	b.n	80079ca <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80079c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80ea 	beq.w	8007ba6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	4a55      	ldr	r2, [pc, #340]	; (8007b2c <UART_SetConfig+0xc28>)
 80079d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079dc:	461a      	mov	r2, r3
 80079de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80079e4:	005a      	lsls	r2, r3, #1
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	085b      	lsrs	r3, r3, #1
 80079ec:	441a      	add	r2, r3
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	2b0f      	cmp	r3, #15
 80079fc:	d916      	bls.n	8007a2c <UART_SetConfig+0xb28>
 80079fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a04:	d212      	bcs.n	8007a2c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	f023 030f 	bic.w	r3, r3, #15
 8007a0e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a12:	085b      	lsrs	r3, r3, #1
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007a28:	60da      	str	r2, [r3, #12]
 8007a2a:	e0bc      	b.n	8007ba6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007a32:	e0b8      	b.n	8007ba6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a38:	2b20      	cmp	r3, #32
 8007a3a:	dc4b      	bgt.n	8007ad4 <UART_SetConfig+0xbd0>
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f2c0 8087 	blt.w	8007b50 <UART_SetConfig+0xc4c>
 8007a42:	2b20      	cmp	r3, #32
 8007a44:	f200 8084 	bhi.w	8007b50 <UART_SetConfig+0xc4c>
 8007a48:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <UART_SetConfig+0xb4c>)
 8007a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4e:	bf00      	nop
 8007a50:	08007adb 	.word	0x08007adb
 8007a54:	08007ae3 	.word	0x08007ae3
 8007a58:	08007b51 	.word	0x08007b51
 8007a5c:	08007b51 	.word	0x08007b51
 8007a60:	08007aeb 	.word	0x08007aeb
 8007a64:	08007b51 	.word	0x08007b51
 8007a68:	08007b51 	.word	0x08007b51
 8007a6c:	08007b51 	.word	0x08007b51
 8007a70:	08007afb 	.word	0x08007afb
 8007a74:	08007b51 	.word	0x08007b51
 8007a78:	08007b51 	.word	0x08007b51
 8007a7c:	08007b51 	.word	0x08007b51
 8007a80:	08007b51 	.word	0x08007b51
 8007a84:	08007b51 	.word	0x08007b51
 8007a88:	08007b51 	.word	0x08007b51
 8007a8c:	08007b51 	.word	0x08007b51
 8007a90:	08007b0b 	.word	0x08007b0b
 8007a94:	08007b51 	.word	0x08007b51
 8007a98:	08007b51 	.word	0x08007b51
 8007a9c:	08007b51 	.word	0x08007b51
 8007aa0:	08007b51 	.word	0x08007b51
 8007aa4:	08007b51 	.word	0x08007b51
 8007aa8:	08007b51 	.word	0x08007b51
 8007aac:	08007b51 	.word	0x08007b51
 8007ab0:	08007b51 	.word	0x08007b51
 8007ab4:	08007b51 	.word	0x08007b51
 8007ab8:	08007b51 	.word	0x08007b51
 8007abc:	08007b51 	.word	0x08007b51
 8007ac0:	08007b51 	.word	0x08007b51
 8007ac4:	08007b51 	.word	0x08007b51
 8007ac8:	08007b51 	.word	0x08007b51
 8007acc:	08007b51 	.word	0x08007b51
 8007ad0:	08007b43 	.word	0x08007b43
 8007ad4:	2b40      	cmp	r3, #64	; 0x40
 8007ad6:	d037      	beq.n	8007b48 <UART_SetConfig+0xc44>
 8007ad8:	e03a      	b.n	8007b50 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ada:	f7fc f9d7 	bl	8003e8c <HAL_RCC_GetPCLK1Freq>
 8007ade:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ae0:	e03c      	b.n	8007b5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ae2:	f7fc f9e9 	bl	8003eb8 <HAL_RCC_GetPCLK2Freq>
 8007ae6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ae8:	e038      	b.n	8007b5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fd fbcc 	bl	800528c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007af8:	e030      	b.n	8007b5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007afa:	f107 0318 	add.w	r3, r7, #24
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fd fd18 	bl	8005534 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b08:	e028      	b.n	8007b5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b0a:	4b09      	ldr	r3, [pc, #36]	; (8007b30 <UART_SetConfig+0xc2c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0320 	and.w	r3, r3, #32
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d012      	beq.n	8007b3c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b16:	4b06      	ldr	r3, [pc, #24]	; (8007b30 <UART_SetConfig+0xc2c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	08db      	lsrs	r3, r3, #3
 8007b1c:	f003 0303 	and.w	r3, r3, #3
 8007b20:	4a04      	ldr	r2, [pc, #16]	; (8007b34 <UART_SetConfig+0xc30>)
 8007b22:	fa22 f303 	lsr.w	r3, r2, r3
 8007b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b28:	e018      	b.n	8007b5c <UART_SetConfig+0xc58>
 8007b2a:	bf00      	nop
 8007b2c:	08009914 	.word	0x08009914
 8007b30:	58024400 	.word	0x58024400
 8007b34:	03d09000 	.word	0x03d09000
 8007b38:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007b3c:	4b24      	ldr	r3, [pc, #144]	; (8007bd0 <UART_SetConfig+0xccc>)
 8007b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b40:	e00c      	b.n	8007b5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b42:	4b24      	ldr	r3, [pc, #144]	; (8007bd4 <UART_SetConfig+0xcd0>)
 8007b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b46:	e009      	b.n	8007b5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b4e:	e005      	b.n	8007b5c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007b5a:	bf00      	nop
    }

    if (pclk != 0U)
 8007b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d021      	beq.n	8007ba6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	4a1c      	ldr	r2, [pc, #112]	; (8007bd8 <UART_SetConfig+0xcd4>)
 8007b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b70:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	085b      	lsrs	r3, r3, #1
 8007b7a:	441a      	add	r2, r3
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b84:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b88:	2b0f      	cmp	r3, #15
 8007b8a:	d909      	bls.n	8007ba0 <UART_SetConfig+0xc9c>
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b92:	d205      	bcs.n	8007ba0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	60da      	str	r2, [r3, #12]
 8007b9e:	e002      	b.n	8007ba6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007bc2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3748      	adds	r7, #72	; 0x48
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bd0:	03d09000 	.word	0x03d09000
 8007bd4:	003d0900 	.word	0x003d0900
 8007bd8:	08009914 	.word	0x08009914

08007bdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00a      	beq.n	8007c06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00a      	beq.n	8007c28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00a      	beq.n	8007c4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	430a      	orrs	r2, r1
 8007c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4e:	f003 0308 	and.w	r3, r3, #8
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c70:	f003 0310 	and.w	r3, r3, #16
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00a      	beq.n	8007c8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c92:	f003 0320 	and.w	r3, r3, #32
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00a      	beq.n	8007cb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d01a      	beq.n	8007cf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cda:	d10a      	bne.n	8007cf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	605a      	str	r2, [r3, #4]
  }
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b098      	sub	sp, #96	; 0x60
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d30:	f7fa f832 	bl	8001d98 <HAL_GetTick>
 8007d34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0308 	and.w	r3, r3, #8
 8007d40:	2b08      	cmp	r3, #8
 8007d42:	d12f      	bne.n	8007da4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f88e 	bl	8007e74 <UART_WaitOnFlagUntilTimeout>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d022      	beq.n	8007da4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d72:	653b      	str	r3, [r7, #80]	; 0x50
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e6      	bne.n	8007d5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e063      	b.n	8007e6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0304 	and.w	r3, r3, #4
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d149      	bne.n	8007e46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007db2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f857 	bl	8007e74 <UART_WaitOnFlagUntilTimeout>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d03c      	beq.n	8007e46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007de0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dea:	633b      	str	r3, [r7, #48]	; 0x30
 8007dec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e6      	bne.n	8007dcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3308      	adds	r3, #8
 8007e04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f023 0301 	bic.w	r3, r3, #1
 8007e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3308      	adds	r3, #8
 8007e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e1e:	61fa      	str	r2, [r7, #28]
 8007e20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	69b9      	ldr	r1, [r7, #24]
 8007e24:	69fa      	ldr	r2, [r7, #28]
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	617b      	str	r3, [r7, #20]
   return(result);
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e5      	bne.n	8007dfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2220      	movs	r2, #32
 8007e36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e012      	b.n	8007e6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2220      	movs	r2, #32
 8007e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2220      	movs	r2, #32
 8007e52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3758      	adds	r7, #88	; 0x58
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	603b      	str	r3, [r7, #0]
 8007e80:	4613      	mov	r3, r2
 8007e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e84:	e049      	b.n	8007f1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8c:	d045      	beq.n	8007f1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e8e:	f7f9 ff83 	bl	8001d98 <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d302      	bcc.n	8007ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e048      	b.n	8007f3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0304 	and.w	r3, r3, #4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d031      	beq.n	8007f1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	f003 0308 	and.w	r3, r3, #8
 8007ec0:	2b08      	cmp	r3, #8
 8007ec2:	d110      	bne.n	8007ee6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2208      	movs	r2, #8
 8007eca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 f95b 	bl	8008188 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2208      	movs	r2, #8
 8007ed6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e029      	b.n	8007f3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ef4:	d111      	bne.n	8007f1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007efe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 f941 	bl	8008188 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e00f      	b.n	8007f3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69da      	ldr	r2, [r3, #28]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	4013      	ands	r3, r2
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	bf0c      	ite	eq
 8007f2a:	2301      	moveq	r3, #1
 8007f2c:	2300      	movne	r3, #0
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	461a      	mov	r2, r3
 8007f32:	79fb      	ldrb	r3, [r7, #7]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d0a6      	beq.n	8007e86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
	...

08007f44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b0a3      	sub	sp, #140	; 0x8c
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	88fa      	ldrh	r2, [r7, #6]
 8007f5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	88fa      	ldrh	r2, [r7, #6]
 8007f64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f76:	d10e      	bne.n	8007f96 <UART_Start_Receive_IT+0x52>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d105      	bne.n	8007f8c <UART_Start_Receive_IT+0x48>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007f86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f8a:	e02d      	b.n	8007fe8 <UART_Start_Receive_IT+0xa4>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	22ff      	movs	r2, #255	; 0xff
 8007f90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f94:	e028      	b.n	8007fe8 <UART_Start_Receive_IT+0xa4>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10d      	bne.n	8007fba <UART_Start_Receive_IT+0x76>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d104      	bne.n	8007fb0 <UART_Start_Receive_IT+0x6c>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	22ff      	movs	r2, #255	; 0xff
 8007faa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fae:	e01b      	b.n	8007fe8 <UART_Start_Receive_IT+0xa4>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	227f      	movs	r2, #127	; 0x7f
 8007fb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fb8:	e016      	b.n	8007fe8 <UART_Start_Receive_IT+0xa4>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fc2:	d10d      	bne.n	8007fe0 <UART_Start_Receive_IT+0x9c>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d104      	bne.n	8007fd6 <UART_Start_Receive_IT+0x92>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	227f      	movs	r2, #127	; 0x7f
 8007fd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fd4:	e008      	b.n	8007fe8 <UART_Start_Receive_IT+0xa4>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	223f      	movs	r2, #63	; 0x3f
 8007fda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fde:	e003      	b.n	8007fe8 <UART_Start_Receive_IT+0xa4>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2222      	movs	r2, #34	; 0x22
 8007ff4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008002:	e853 3f00 	ldrex	r3, [r3]
 8008006:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800800a:	f043 0301 	orr.w	r3, r3, #1
 800800e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3308      	adds	r3, #8
 8008018:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800801c:	673a      	str	r2, [r7, #112]	; 0x70
 800801e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008022:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800802a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e3      	bne.n	8007ff8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008038:	d14f      	bne.n	80080da <UART_Start_Receive_IT+0x196>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008040:	88fa      	ldrh	r2, [r7, #6]
 8008042:	429a      	cmp	r2, r3
 8008044:	d349      	bcc.n	80080da <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800804e:	d107      	bne.n	8008060 <UART_Start_Receive_IT+0x11c>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d103      	bne.n	8008060 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4a47      	ldr	r2, [pc, #284]	; (8008178 <UART_Start_Receive_IT+0x234>)
 800805c:	675a      	str	r2, [r3, #116]	; 0x74
 800805e:	e002      	b.n	8008066 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4a46      	ldr	r2, [pc, #280]	; (800817c <UART_Start_Receive_IT+0x238>)
 8008064:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d01a      	beq.n	80080a4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008076:	e853 3f00 	ldrex	r3, [r3]
 800807a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800807c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800807e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008082:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	461a      	mov	r2, r3
 800808c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008092:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008094:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008096:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008098:	e841 2300 	strex	r3, r2, [r1]
 800809c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800809e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e4      	bne.n	800806e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3308      	adds	r3, #8
 80080aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ae:	e853 3f00 	ldrex	r3, [r3]
 80080b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3308      	adds	r3, #8
 80080c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80080c4:	64ba      	str	r2, [r7, #72]	; 0x48
 80080c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080cc:	e841 2300 	strex	r3, r2, [r1]
 80080d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e5      	bne.n	80080a4 <UART_Start_Receive_IT+0x160>
 80080d8:	e046      	b.n	8008168 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e2:	d107      	bne.n	80080f4 <UART_Start_Receive_IT+0x1b0>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d103      	bne.n	80080f4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4a24      	ldr	r2, [pc, #144]	; (8008180 <UART_Start_Receive_IT+0x23c>)
 80080f0:	675a      	str	r2, [r3, #116]	; 0x74
 80080f2:	e002      	b.n	80080fa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4a23      	ldr	r2, [pc, #140]	; (8008184 <UART_Start_Receive_IT+0x240>)
 80080f8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d019      	beq.n	8008136 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	e853 3f00 	ldrex	r3, [r3]
 800810e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008116:	677b      	str	r3, [r7, #116]	; 0x74
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	461a      	mov	r2, r3
 800811e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008120:	637b      	str	r3, [r7, #52]	; 0x34
 8008122:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008128:	e841 2300 	strex	r3, r2, [r1]
 800812c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e6      	bne.n	8008102 <UART_Start_Receive_IT+0x1be>
 8008134:	e018      	b.n	8008168 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	613b      	str	r3, [r7, #16]
   return(result);
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f043 0320 	orr.w	r3, r3, #32
 800814a:	67bb      	str	r3, [r7, #120]	; 0x78
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008154:	623b      	str	r3, [r7, #32]
 8008156:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	69f9      	ldr	r1, [r7, #28]
 800815a:	6a3a      	ldr	r2, [r7, #32]
 800815c:	e841 2300 	strex	r3, r2, [r1]
 8008160:	61bb      	str	r3, [r7, #24]
   return(result);
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e6      	bne.n	8008136 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	378c      	adds	r7, #140	; 0x8c
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	080089a9 	.word	0x080089a9
 800817c:	08008649 	.word	0x08008649
 8008180:	08008491 	.word	0x08008491
 8008184:	080082d9 	.word	0x080082d9

08008188 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008188:	b480      	push	{r7}
 800818a:	b095      	sub	sp, #84	; 0x54
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008198:	e853 3f00 	ldrex	r3, [r3]
 800819c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	461a      	mov	r2, r3
 80081ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ae:	643b      	str	r3, [r7, #64]	; 0x40
 80081b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081b6:	e841 2300 	strex	r3, r2, [r1]
 80081ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1e6      	bne.n	8008190 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	3308      	adds	r3, #8
 80081c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ca:	6a3b      	ldr	r3, [r7, #32]
 80081cc:	e853 3f00 	ldrex	r3, [r3]
 80081d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80081d2:	69fa      	ldr	r2, [r7, #28]
 80081d4:	4b1e      	ldr	r3, [pc, #120]	; (8008250 <UART_EndRxTransfer+0xc8>)
 80081d6:	4013      	ands	r3, r2
 80081d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3308      	adds	r3, #8
 80081e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ea:	e841 2300 	strex	r3, r2, [r1]
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1e5      	bne.n	80081c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d118      	bne.n	8008230 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	e853 3f00 	ldrex	r3, [r3]
 800820a:	60bb      	str	r3, [r7, #8]
   return(result);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	f023 0310 	bic.w	r3, r3, #16
 8008212:	647b      	str	r3, [r7, #68]	; 0x44
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	461a      	mov	r2, r3
 800821a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800821c:	61bb      	str	r3, [r7, #24]
 800821e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008220:	6979      	ldr	r1, [r7, #20]
 8008222:	69ba      	ldr	r2, [r7, #24]
 8008224:	e841 2300 	strex	r3, r2, [r1]
 8008228:	613b      	str	r3, [r7, #16]
   return(result);
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1e6      	bne.n	80081fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008244:	bf00      	nop
 8008246:	3754      	adds	r7, #84	; 0x54
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr
 8008250:	effffffe 	.word	0xeffffffe

08008254 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008260:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f7fe fe30 	bl	8006ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008278:	bf00      	nop
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	e853 3f00 	ldrex	r3, [r3]
 8008294:	60bb      	str	r3, [r7, #8]
   return(result);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800829c:	61fb      	str	r3, [r7, #28]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	61bb      	str	r3, [r7, #24]
 80082a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082aa:	6979      	ldr	r1, [r7, #20]
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	e841 2300 	strex	r3, r2, [r1]
 80082b2:	613b      	str	r3, [r7, #16]
   return(result);
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1e6      	bne.n	8008288 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2220      	movs	r2, #32
 80082be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7fe fdfb 	bl	8006ec4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082ce:	bf00      	nop
 80082d0:	3720      	adds	r7, #32
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
	...

080082d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b09c      	sub	sp, #112	; 0x70
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80082e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082f0:	2b22      	cmp	r3, #34	; 0x22
 80082f2:	f040 80be 	bne.w	8008472 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008300:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008304:	b2d9      	uxtb	r1, r3
 8008306:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800830a:	b2da      	uxtb	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008310:	400a      	ands	r2, r1
 8008312:	b2d2      	uxtb	r2, r2
 8008314:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008326:	b29b      	uxth	r3, r3
 8008328:	3b01      	subs	r3, #1
 800832a:	b29a      	uxth	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008338:	b29b      	uxth	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	f040 80a1 	bne.w	8008482 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800834e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008350:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008354:	66bb      	str	r3, [r7, #104]	; 0x68
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800835e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008360:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008364:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800836c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e6      	bne.n	8008340 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3308      	adds	r3, #8
 8008378:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	e853 3f00 	ldrex	r3, [r3]
 8008380:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008384:	f023 0301 	bic.w	r3, r3, #1
 8008388:	667b      	str	r3, [r7, #100]	; 0x64
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3308      	adds	r3, #8
 8008390:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008392:	647a      	str	r2, [r7, #68]	; 0x44
 8008394:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008396:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008398:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800839a:	e841 2300 	strex	r3, r2, [r1]
 800839e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1e5      	bne.n	8008372 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2220      	movs	r2, #32
 80083aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a33      	ldr	r2, [pc, #204]	; (800848c <UART_RxISR_8BIT+0x1b4>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d01f      	beq.n	8008404 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d018      	beq.n	8008404 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	e853 3f00 	ldrex	r3, [r3]
 80083de:	623b      	str	r3, [r7, #32]
   return(result);
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083e6:	663b      	str	r3, [r7, #96]	; 0x60
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	461a      	mov	r2, r3
 80083ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083f0:	633b      	str	r3, [r7, #48]	; 0x30
 80083f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083f8:	e841 2300 	strex	r3, r2, [r1]
 80083fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1e6      	bne.n	80083d2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008408:	2b01      	cmp	r3, #1
 800840a:	d12e      	bne.n	800846a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	e853 3f00 	ldrex	r3, [r3]
 800841e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f023 0310 	bic.w	r3, r3, #16
 8008426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008430:	61fb      	str	r3, [r7, #28]
 8008432:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	69b9      	ldr	r1, [r7, #24]
 8008436:	69fa      	ldr	r2, [r7, #28]
 8008438:	e841 2300 	strex	r3, r2, [r1]
 800843c:	617b      	str	r3, [r7, #20]
   return(result);
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e6      	bne.n	8008412 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	f003 0310 	and.w	r3, r3, #16
 800844e:	2b10      	cmp	r3, #16
 8008450:	d103      	bne.n	800845a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2210      	movs	r2, #16
 8008458:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7fe fd42 	bl	8006eec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008468:	e00b      	b.n	8008482 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7f8 faa6 	bl	80009bc <HAL_UART_RxCpltCallback>
}
 8008470:	e007      	b.n	8008482 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	699a      	ldr	r2, [r3, #24]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f042 0208 	orr.w	r2, r2, #8
 8008480:	619a      	str	r2, [r3, #24]
}
 8008482:	bf00      	nop
 8008484:	3770      	adds	r7, #112	; 0x70
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	58000c00 	.word	0x58000c00

08008490 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b09c      	sub	sp, #112	; 0x70
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800849e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084a8:	2b22      	cmp	r3, #34	; 0x22
 80084aa:	f040 80be 	bne.w	800862a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084bc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80084be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80084c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80084c6:	4013      	ands	r3, r2
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d2:	1c9a      	adds	r2, r3, #2
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084de:	b29b      	uxth	r3, r3
 80084e0:	3b01      	subs	r3, #1
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f040 80a1 	bne.w	800863a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008500:	e853 3f00 	ldrex	r3, [r3]
 8008504:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800850c:	667b      	str	r3, [r7, #100]	; 0x64
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008516:	657b      	str	r3, [r7, #84]	; 0x54
 8008518:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800851c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800851e:	e841 2300 	strex	r3, r2, [r1]
 8008522:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1e6      	bne.n	80084f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3308      	adds	r3, #8
 8008530:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008534:	e853 3f00 	ldrex	r3, [r3]
 8008538:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853c:	f023 0301 	bic.w	r3, r3, #1
 8008540:	663b      	str	r3, [r7, #96]	; 0x60
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3308      	adds	r3, #8
 8008548:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800854a:	643a      	str	r2, [r7, #64]	; 0x40
 800854c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008550:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008552:	e841 2300 	strex	r3, r2, [r1]
 8008556:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1e5      	bne.n	800852a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2220      	movs	r2, #32
 8008562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a33      	ldr	r2, [pc, #204]	; (8008644 <UART_RxISR_16BIT+0x1b4>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d01f      	beq.n	80085bc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d018      	beq.n	80085bc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	6a3b      	ldr	r3, [r7, #32]
 8008592:	e853 3f00 	ldrex	r3, [r3]
 8008596:	61fb      	str	r3, [r7, #28]
   return(result);
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800859e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	461a      	mov	r2, r3
 80085a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085aa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085b0:	e841 2300 	strex	r3, r2, [r1]
 80085b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e6      	bne.n	800858a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d12e      	bne.n	8008622 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	e853 3f00 	ldrex	r3, [r3]
 80085d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	f023 0310 	bic.w	r3, r3, #16
 80085de:	65bb      	str	r3, [r7, #88]	; 0x58
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	461a      	mov	r2, r3
 80085e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085e8:	61bb      	str	r3, [r7, #24]
 80085ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ec:	6979      	ldr	r1, [r7, #20]
 80085ee:	69ba      	ldr	r2, [r7, #24]
 80085f0:	e841 2300 	strex	r3, r2, [r1]
 80085f4:	613b      	str	r3, [r7, #16]
   return(result);
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e6      	bne.n	80085ca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	f003 0310 	and.w	r3, r3, #16
 8008606:	2b10      	cmp	r3, #16
 8008608:	d103      	bne.n	8008612 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2210      	movs	r2, #16
 8008610:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008618:	4619      	mov	r1, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7fe fc66 	bl	8006eec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008620:	e00b      	b.n	800863a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7f8 f9ca 	bl	80009bc <HAL_UART_RxCpltCallback>
}
 8008628:	e007      	b.n	800863a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	699a      	ldr	r2, [r3, #24]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f042 0208 	orr.w	r2, r2, #8
 8008638:	619a      	str	r2, [r3, #24]
}
 800863a:	bf00      	nop
 800863c:	3770      	adds	r7, #112	; 0x70
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	58000c00 	.word	0x58000c00

08008648 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b0ac      	sub	sp, #176	; 0xb0
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008656:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	69db      	ldr	r3, [r3, #28]
 8008660:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800867e:	2b22      	cmp	r3, #34	; 0x22
 8008680:	f040 8180 	bne.w	8008984 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800868a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800868e:	e123      	b.n	80088d8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800869a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800869e:	b2d9      	uxtb	r1, r3
 80086a0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086aa:	400a      	ands	r2, r1
 80086ac:	b2d2      	uxtb	r2, r2
 80086ae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b4:	1c5a      	adds	r2, r3, #1
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	3b01      	subs	r3, #1
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	69db      	ldr	r3, [r3, #28]
 80086d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80086d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086da:	f003 0307 	and.w	r3, r3, #7
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d053      	beq.n	800878a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d011      	beq.n	8008712 <UART_RxISR_8BIT_FIFOEN+0xca>
 80086ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00b      	beq.n	8008712 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2201      	movs	r2, #1
 8008700:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008708:	f043 0201 	orr.w	r2, r3, #1
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008716:	f003 0302 	and.w	r3, r3, #2
 800871a:	2b00      	cmp	r3, #0
 800871c:	d011      	beq.n	8008742 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800871e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00b      	beq.n	8008742 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2202      	movs	r2, #2
 8008730:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008738:	f043 0204 	orr.w	r2, r3, #4
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008746:	f003 0304 	and.w	r3, r3, #4
 800874a:	2b00      	cmp	r3, #0
 800874c:	d011      	beq.n	8008772 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800874e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00b      	beq.n	8008772 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2204      	movs	r2, #4
 8008760:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008768:	f043 0202 	orr.w	r2, r3, #2
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008778:	2b00      	cmp	r3, #0
 800877a:	d006      	beq.n	800878a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7fe fbab 	bl	8006ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008790:	b29b      	uxth	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	f040 80a0 	bne.w	80088d8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087a0:	e853 3f00 	ldrex	r3, [r3]
 80087a4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80087a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	461a      	mov	r2, r3
 80087b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80087bc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087be:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80087c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80087c2:	e841 2300 	strex	r3, r2, [r1]
 80087c6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80087c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1e4      	bne.n	8008798 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3308      	adds	r3, #8
 80087d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80087de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087e0:	4b6e      	ldr	r3, [pc, #440]	; (800899c <UART_RxISR_8BIT_FIFOEN+0x354>)
 80087e2:	4013      	ands	r3, r2
 80087e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3308      	adds	r3, #8
 80087ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087f2:	66ba      	str	r2, [r7, #104]	; 0x68
 80087f4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80087f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087fa:	e841 2300 	strex	r3, r2, [r1]
 80087fe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1e3      	bne.n	80087ce <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2220      	movs	r2, #32
 800880a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a60      	ldr	r2, [pc, #384]	; (80089a0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d021      	beq.n	8008868 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d01a      	beq.n	8008868 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800883a:	e853 3f00 	ldrex	r3, [r3]
 800883e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008842:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008854:	657b      	str	r3, [r7, #84]	; 0x54
 8008856:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800885a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800885c:	e841 2300 	strex	r3, r2, [r1]
 8008860:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e4      	bne.n	8008832 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800886c:	2b01      	cmp	r3, #1
 800886e:	d130      	bne.n	80088d2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887e:	e853 3f00 	ldrex	r3, [r3]
 8008882:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008886:	f023 0310 	bic.w	r3, r3, #16
 800888a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	461a      	mov	r2, r3
 8008894:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008898:	643b      	str	r3, [r7, #64]	; 0x40
 800889a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800889e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088a0:	e841 2300 	strex	r3, r2, [r1]
 80088a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1e4      	bne.n	8008876 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	f003 0310 	and.w	r3, r3, #16
 80088b6:	2b10      	cmp	r3, #16
 80088b8:	d103      	bne.n	80088c2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2210      	movs	r2, #16
 80088c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7fe fb0e 	bl	8006eec <HAL_UARTEx_RxEventCallback>
 80088d0:	e002      	b.n	80088d8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7f8 f872 	bl	80009bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80088d8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d006      	beq.n	80088ee <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80088e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088e4:	f003 0320 	and.w	r3, r3, #32
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f47f aed1 	bne.w	8008690 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80088f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d049      	beq.n	8008994 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008906:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800890a:	429a      	cmp	r2, r3
 800890c:	d242      	bcs.n	8008994 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3308      	adds	r3, #8
 8008914:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	e853 3f00 	ldrex	r3, [r3]
 800891c:	61fb      	str	r3, [r7, #28]
   return(result);
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3308      	adds	r3, #8
 800892e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008932:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008934:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008936:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800893a:	e841 2300 	strex	r3, r2, [r1]
 800893e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1e3      	bne.n	800890e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a16      	ldr	r2, [pc, #88]	; (80089a4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800894a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	e853 3f00 	ldrex	r3, [r3]
 8008958:	60bb      	str	r3, [r7, #8]
   return(result);
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	f043 0320 	orr.w	r3, r3, #32
 8008960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	461a      	mov	r2, r3
 800896a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800896e:	61bb      	str	r3, [r7, #24]
 8008970:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008972:	6979      	ldr	r1, [r7, #20]
 8008974:	69ba      	ldr	r2, [r7, #24]
 8008976:	e841 2300 	strex	r3, r2, [r1]
 800897a:	613b      	str	r3, [r7, #16]
   return(result);
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1e4      	bne.n	800894c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008982:	e007      	b.n	8008994 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	699a      	ldr	r2, [r3, #24]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f042 0208 	orr.w	r2, r2, #8
 8008992:	619a      	str	r2, [r3, #24]
}
 8008994:	bf00      	nop
 8008996:	37b0      	adds	r7, #176	; 0xb0
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	effffffe 	.word	0xeffffffe
 80089a0:	58000c00 	.word	0x58000c00
 80089a4:	080082d9 	.word	0x080082d9

080089a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b0ae      	sub	sp, #184	; 0xb8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089b6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089de:	2b22      	cmp	r3, #34	; 0x22
 80089e0:	f040 8184 	bne.w	8008cec <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089ea:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80089ee:	e127      	b.n	8008c40 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008a02:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008a06:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a18:	1c9a      	adds	r2, r3, #2
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	3b01      	subs	r3, #1
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	69db      	ldr	r3, [r3, #28]
 8008a36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008a3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a3e:	f003 0307 	and.w	r3, r3, #7
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d053      	beq.n	8008aee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d011      	beq.n	8008a76 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00b      	beq.n	8008a76 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2201      	movs	r2, #1
 8008a64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a6c:	f043 0201 	orr.w	r2, r3, #1
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a7a:	f003 0302 	and.w	r3, r3, #2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d011      	beq.n	8008aa6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008a82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00b      	beq.n	8008aa6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2202      	movs	r2, #2
 8008a94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a9c:	f043 0204 	orr.w	r2, r3, #4
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008aa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008aaa:	f003 0304 	and.w	r3, r3, #4
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d011      	beq.n	8008ad6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008ab2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00b      	beq.n	8008ad6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2204      	movs	r2, #4
 8008ac4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008acc:	f043 0202 	orr.w	r2, r3, #2
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d006      	beq.n	8008aee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7fe f9f9 	bl	8006ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f040 80a2 	bne.w	8008c40 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b04:	e853 3f00 	ldrex	r3, [r3]
 8008b08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b22:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e2      	bne.n	8008afc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b48:	4b6e      	ldr	r3, [pc, #440]	; (8008d04 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3308      	adds	r3, #8
 8008b56:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008b5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1e3      	bne.n	8008b36 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2220      	movs	r2, #32
 8008b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a60      	ldr	r2, [pc, #384]	; (8008d08 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d021      	beq.n	8008bd0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d01a      	beq.n	8008bd0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ba2:	e853 3f00 	ldrex	r3, [r3]
 8008ba6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008baa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008bae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008bbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bbe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bc4:	e841 2300 	strex	r3, r2, [r1]
 8008bc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1e4      	bne.n	8008b9a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d130      	bne.n	8008c3a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be6:	e853 3f00 	ldrex	r3, [r3]
 8008bea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bee:	f023 0310 	bic.w	r3, r3, #16
 8008bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c00:	647b      	str	r3, [r7, #68]	; 0x44
 8008c02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c08:	e841 2300 	strex	r3, r2, [r1]
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e4      	bne.n	8008bde <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	69db      	ldr	r3, [r3, #28]
 8008c1a:	f003 0310 	and.w	r3, r3, #16
 8008c1e:	2b10      	cmp	r3, #16
 8008c20:	d103      	bne.n	8008c2a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2210      	movs	r2, #16
 8008c28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7fe f95a 	bl	8006eec <HAL_UARTEx_RxEventCallback>
 8008c38:	e002      	b.n	8008c40 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7f7 febe 	bl	80009bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c40:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d006      	beq.n	8008c56 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008c48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c4c:	f003 0320 	and.w	r3, r3, #32
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f47f aecd 	bne.w	80089f0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c5c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008c60:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d049      	beq.n	8008cfc <UART_RxISR_16BIT_FIFOEN+0x354>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c6e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d242      	bcs.n	8008cfc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3308      	adds	r3, #8
 8008c7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	623b      	str	r3, [r7, #32]
   return(result);
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	3308      	adds	r3, #8
 8008c96:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008c9a:	633a      	str	r2, [r7, #48]	; 0x30
 8008c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e3      	bne.n	8008c76 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a16      	ldr	r2, [pc, #88]	; (8008d0c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008cb2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	e853 3f00 	ldrex	r3, [r3]
 8008cc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f043 0320 	orr.w	r3, r3, #32
 8008cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cd6:	61fb      	str	r3, [r7, #28]
 8008cd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cda:	69b9      	ldr	r1, [r7, #24]
 8008cdc:	69fa      	ldr	r2, [r7, #28]
 8008cde:	e841 2300 	strex	r3, r2, [r1]
 8008ce2:	617b      	str	r3, [r7, #20]
   return(result);
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1e4      	bne.n	8008cb4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008cea:	e007      	b.n	8008cfc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	699a      	ldr	r2, [r3, #24]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f042 0208 	orr.w	r2, r2, #8
 8008cfa:	619a      	str	r2, [r3, #24]
}
 8008cfc:	bf00      	nop
 8008cfe:	37b8      	adds	r7, #184	; 0xb8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	effffffe 	.word	0xeffffffe
 8008d08:	58000c00 	.word	0x58000c00
 8008d0c:	08008491 	.word	0x08008491

08008d10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d101      	bne.n	8008d62 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d5e:	2302      	movs	r3, #2
 8008d60:	e027      	b.n	8008db2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2224      	movs	r2, #36	; 0x24
 8008d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f022 0201 	bic.w	r2, r2, #1
 8008d88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2220      	movs	r2, #32
 8008da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d101      	bne.n	8008dd6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	e02d      	b.n	8008e32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2224      	movs	r2, #36	; 0x24
 8008de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f022 0201 	bic.w	r2, r2, #1
 8008dfc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f850 	bl	8008eb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2220      	movs	r2, #32
 8008e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d101      	bne.n	8008e52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e4e:	2302      	movs	r3, #2
 8008e50:	e02d      	b.n	8008eae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2224      	movs	r2, #36	; 0x24
 8008e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f022 0201 	bic.w	r2, r2, #1
 8008e78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	683a      	ldr	r2, [r7, #0]
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f812 	bl	8008eb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2220      	movs	r2, #32
 8008ea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
	...

08008eb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d108      	bne.n	8008eda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ed8:	e031      	b.n	8008f3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008eda:	2310      	movs	r3, #16
 8008edc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ede:	2310      	movs	r3, #16
 8008ee0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	0e5b      	lsrs	r3, r3, #25
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	f003 0307 	and.w	r3, r3, #7
 8008ef0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	0f5b      	lsrs	r3, r3, #29
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	f003 0307 	and.w	r3, r3, #7
 8008f00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f02:	7bbb      	ldrb	r3, [r7, #14]
 8008f04:	7b3a      	ldrb	r2, [r7, #12]
 8008f06:	4911      	ldr	r1, [pc, #68]	; (8008f4c <UARTEx_SetNbDataToProcess+0x94>)
 8008f08:	5c8a      	ldrb	r2, [r1, r2]
 8008f0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f0e:	7b3a      	ldrb	r2, [r7, #12]
 8008f10:	490f      	ldr	r1, [pc, #60]	; (8008f50 <UARTEx_SetNbDataToProcess+0x98>)
 8008f12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f14:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
 8008f22:	7b7a      	ldrb	r2, [r7, #13]
 8008f24:	4909      	ldr	r1, [pc, #36]	; (8008f4c <UARTEx_SetNbDataToProcess+0x94>)
 8008f26:	5c8a      	ldrb	r2, [r1, r2]
 8008f28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f2c:	7b7a      	ldrb	r2, [r7, #13]
 8008f2e:	4908      	ldr	r1, [pc, #32]	; (8008f50 <UARTEx_SetNbDataToProcess+0x98>)
 8008f30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f32:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f3e:	bf00      	nop
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	0800992c 	.word	0x0800992c
 8008f50:	08009934 	.word	0x08009934

08008f54 <__errno>:
 8008f54:	4b01      	ldr	r3, [pc, #4]	; (8008f5c <__errno+0x8>)
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	2400001c 	.word	0x2400001c

08008f60 <__libc_init_array>:
 8008f60:	b570      	push	{r4, r5, r6, lr}
 8008f62:	4d0d      	ldr	r5, [pc, #52]	; (8008f98 <__libc_init_array+0x38>)
 8008f64:	4c0d      	ldr	r4, [pc, #52]	; (8008f9c <__libc_init_array+0x3c>)
 8008f66:	1b64      	subs	r4, r4, r5
 8008f68:	10a4      	asrs	r4, r4, #2
 8008f6a:	2600      	movs	r6, #0
 8008f6c:	42a6      	cmp	r6, r4
 8008f6e:	d109      	bne.n	8008f84 <__libc_init_array+0x24>
 8008f70:	4d0b      	ldr	r5, [pc, #44]	; (8008fa0 <__libc_init_array+0x40>)
 8008f72:	4c0c      	ldr	r4, [pc, #48]	; (8008fa4 <__libc_init_array+0x44>)
 8008f74:	f000 fc8e 	bl	8009894 <_init>
 8008f78:	1b64      	subs	r4, r4, r5
 8008f7a:	10a4      	asrs	r4, r4, #2
 8008f7c:	2600      	movs	r6, #0
 8008f7e:	42a6      	cmp	r6, r4
 8008f80:	d105      	bne.n	8008f8e <__libc_init_array+0x2e>
 8008f82:	bd70      	pop	{r4, r5, r6, pc}
 8008f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f88:	4798      	blx	r3
 8008f8a:	3601      	adds	r6, #1
 8008f8c:	e7ee      	b.n	8008f6c <__libc_init_array+0xc>
 8008f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f92:	4798      	blx	r3
 8008f94:	3601      	adds	r6, #1
 8008f96:	e7f2      	b.n	8008f7e <__libc_init_array+0x1e>
 8008f98:	08009978 	.word	0x08009978
 8008f9c:	08009978 	.word	0x08009978
 8008fa0:	08009978 	.word	0x08009978
 8008fa4:	0800997c 	.word	0x0800997c

08008fa8 <memset>:
 8008fa8:	4402      	add	r2, r0
 8008faa:	4603      	mov	r3, r0
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d100      	bne.n	8008fb2 <memset+0xa>
 8008fb0:	4770      	bx	lr
 8008fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8008fb6:	e7f9      	b.n	8008fac <memset+0x4>

08008fb8 <siprintf>:
 8008fb8:	b40e      	push	{r1, r2, r3}
 8008fba:	b500      	push	{lr}
 8008fbc:	b09c      	sub	sp, #112	; 0x70
 8008fbe:	ab1d      	add	r3, sp, #116	; 0x74
 8008fc0:	9002      	str	r0, [sp, #8]
 8008fc2:	9006      	str	r0, [sp, #24]
 8008fc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fc8:	4809      	ldr	r0, [pc, #36]	; (8008ff0 <siprintf+0x38>)
 8008fca:	9107      	str	r1, [sp, #28]
 8008fcc:	9104      	str	r1, [sp, #16]
 8008fce:	4909      	ldr	r1, [pc, #36]	; (8008ff4 <siprintf+0x3c>)
 8008fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fd4:	9105      	str	r1, [sp, #20]
 8008fd6:	6800      	ldr	r0, [r0, #0]
 8008fd8:	9301      	str	r3, [sp, #4]
 8008fda:	a902      	add	r1, sp, #8
 8008fdc:	f000 f868 	bl	80090b0 <_svfiprintf_r>
 8008fe0:	9b02      	ldr	r3, [sp, #8]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	701a      	strb	r2, [r3, #0]
 8008fe6:	b01c      	add	sp, #112	; 0x70
 8008fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fec:	b003      	add	sp, #12
 8008fee:	4770      	bx	lr
 8008ff0:	2400001c 	.word	0x2400001c
 8008ff4:	ffff0208 	.word	0xffff0208

08008ff8 <__ssputs_r>:
 8008ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ffc:	688e      	ldr	r6, [r1, #8]
 8008ffe:	429e      	cmp	r6, r3
 8009000:	4682      	mov	sl, r0
 8009002:	460c      	mov	r4, r1
 8009004:	4690      	mov	r8, r2
 8009006:	461f      	mov	r7, r3
 8009008:	d838      	bhi.n	800907c <__ssputs_r+0x84>
 800900a:	898a      	ldrh	r2, [r1, #12]
 800900c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009010:	d032      	beq.n	8009078 <__ssputs_r+0x80>
 8009012:	6825      	ldr	r5, [r4, #0]
 8009014:	6909      	ldr	r1, [r1, #16]
 8009016:	eba5 0901 	sub.w	r9, r5, r1
 800901a:	6965      	ldr	r5, [r4, #20]
 800901c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009020:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009024:	3301      	adds	r3, #1
 8009026:	444b      	add	r3, r9
 8009028:	106d      	asrs	r5, r5, #1
 800902a:	429d      	cmp	r5, r3
 800902c:	bf38      	it	cc
 800902e:	461d      	movcc	r5, r3
 8009030:	0553      	lsls	r3, r2, #21
 8009032:	d531      	bpl.n	8009098 <__ssputs_r+0xa0>
 8009034:	4629      	mov	r1, r5
 8009036:	f000 fb63 	bl	8009700 <_malloc_r>
 800903a:	4606      	mov	r6, r0
 800903c:	b950      	cbnz	r0, 8009054 <__ssputs_r+0x5c>
 800903e:	230c      	movs	r3, #12
 8009040:	f8ca 3000 	str.w	r3, [sl]
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	f04f 30ff 	mov.w	r0, #4294967295
 8009050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009054:	6921      	ldr	r1, [r4, #16]
 8009056:	464a      	mov	r2, r9
 8009058:	f000 fabe 	bl	80095d8 <memcpy>
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009066:	81a3      	strh	r3, [r4, #12]
 8009068:	6126      	str	r6, [r4, #16]
 800906a:	6165      	str	r5, [r4, #20]
 800906c:	444e      	add	r6, r9
 800906e:	eba5 0509 	sub.w	r5, r5, r9
 8009072:	6026      	str	r6, [r4, #0]
 8009074:	60a5      	str	r5, [r4, #8]
 8009076:	463e      	mov	r6, r7
 8009078:	42be      	cmp	r6, r7
 800907a:	d900      	bls.n	800907e <__ssputs_r+0x86>
 800907c:	463e      	mov	r6, r7
 800907e:	6820      	ldr	r0, [r4, #0]
 8009080:	4632      	mov	r2, r6
 8009082:	4641      	mov	r1, r8
 8009084:	f000 fab6 	bl	80095f4 <memmove>
 8009088:	68a3      	ldr	r3, [r4, #8]
 800908a:	1b9b      	subs	r3, r3, r6
 800908c:	60a3      	str	r3, [r4, #8]
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	4433      	add	r3, r6
 8009092:	6023      	str	r3, [r4, #0]
 8009094:	2000      	movs	r0, #0
 8009096:	e7db      	b.n	8009050 <__ssputs_r+0x58>
 8009098:	462a      	mov	r2, r5
 800909a:	f000 fba5 	bl	80097e8 <_realloc_r>
 800909e:	4606      	mov	r6, r0
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d1e1      	bne.n	8009068 <__ssputs_r+0x70>
 80090a4:	6921      	ldr	r1, [r4, #16]
 80090a6:	4650      	mov	r0, sl
 80090a8:	f000 fabe 	bl	8009628 <_free_r>
 80090ac:	e7c7      	b.n	800903e <__ssputs_r+0x46>
	...

080090b0 <_svfiprintf_r>:
 80090b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b4:	4698      	mov	r8, r3
 80090b6:	898b      	ldrh	r3, [r1, #12]
 80090b8:	061b      	lsls	r3, r3, #24
 80090ba:	b09d      	sub	sp, #116	; 0x74
 80090bc:	4607      	mov	r7, r0
 80090be:	460d      	mov	r5, r1
 80090c0:	4614      	mov	r4, r2
 80090c2:	d50e      	bpl.n	80090e2 <_svfiprintf_r+0x32>
 80090c4:	690b      	ldr	r3, [r1, #16]
 80090c6:	b963      	cbnz	r3, 80090e2 <_svfiprintf_r+0x32>
 80090c8:	2140      	movs	r1, #64	; 0x40
 80090ca:	f000 fb19 	bl	8009700 <_malloc_r>
 80090ce:	6028      	str	r0, [r5, #0]
 80090d0:	6128      	str	r0, [r5, #16]
 80090d2:	b920      	cbnz	r0, 80090de <_svfiprintf_r+0x2e>
 80090d4:	230c      	movs	r3, #12
 80090d6:	603b      	str	r3, [r7, #0]
 80090d8:	f04f 30ff 	mov.w	r0, #4294967295
 80090dc:	e0d1      	b.n	8009282 <_svfiprintf_r+0x1d2>
 80090de:	2340      	movs	r3, #64	; 0x40
 80090e0:	616b      	str	r3, [r5, #20]
 80090e2:	2300      	movs	r3, #0
 80090e4:	9309      	str	r3, [sp, #36]	; 0x24
 80090e6:	2320      	movs	r3, #32
 80090e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80090f0:	2330      	movs	r3, #48	; 0x30
 80090f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800929c <_svfiprintf_r+0x1ec>
 80090f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090fa:	f04f 0901 	mov.w	r9, #1
 80090fe:	4623      	mov	r3, r4
 8009100:	469a      	mov	sl, r3
 8009102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009106:	b10a      	cbz	r2, 800910c <_svfiprintf_r+0x5c>
 8009108:	2a25      	cmp	r2, #37	; 0x25
 800910a:	d1f9      	bne.n	8009100 <_svfiprintf_r+0x50>
 800910c:	ebba 0b04 	subs.w	fp, sl, r4
 8009110:	d00b      	beq.n	800912a <_svfiprintf_r+0x7a>
 8009112:	465b      	mov	r3, fp
 8009114:	4622      	mov	r2, r4
 8009116:	4629      	mov	r1, r5
 8009118:	4638      	mov	r0, r7
 800911a:	f7ff ff6d 	bl	8008ff8 <__ssputs_r>
 800911e:	3001      	adds	r0, #1
 8009120:	f000 80aa 	beq.w	8009278 <_svfiprintf_r+0x1c8>
 8009124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009126:	445a      	add	r2, fp
 8009128:	9209      	str	r2, [sp, #36]	; 0x24
 800912a:	f89a 3000 	ldrb.w	r3, [sl]
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 80a2 	beq.w	8009278 <_svfiprintf_r+0x1c8>
 8009134:	2300      	movs	r3, #0
 8009136:	f04f 32ff 	mov.w	r2, #4294967295
 800913a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800913e:	f10a 0a01 	add.w	sl, sl, #1
 8009142:	9304      	str	r3, [sp, #16]
 8009144:	9307      	str	r3, [sp, #28]
 8009146:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800914a:	931a      	str	r3, [sp, #104]	; 0x68
 800914c:	4654      	mov	r4, sl
 800914e:	2205      	movs	r2, #5
 8009150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009154:	4851      	ldr	r0, [pc, #324]	; (800929c <_svfiprintf_r+0x1ec>)
 8009156:	f7f7 f8d3 	bl	8000300 <memchr>
 800915a:	9a04      	ldr	r2, [sp, #16]
 800915c:	b9d8      	cbnz	r0, 8009196 <_svfiprintf_r+0xe6>
 800915e:	06d0      	lsls	r0, r2, #27
 8009160:	bf44      	itt	mi
 8009162:	2320      	movmi	r3, #32
 8009164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009168:	0711      	lsls	r1, r2, #28
 800916a:	bf44      	itt	mi
 800916c:	232b      	movmi	r3, #43	; 0x2b
 800916e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009172:	f89a 3000 	ldrb.w	r3, [sl]
 8009176:	2b2a      	cmp	r3, #42	; 0x2a
 8009178:	d015      	beq.n	80091a6 <_svfiprintf_r+0xf6>
 800917a:	9a07      	ldr	r2, [sp, #28]
 800917c:	4654      	mov	r4, sl
 800917e:	2000      	movs	r0, #0
 8009180:	f04f 0c0a 	mov.w	ip, #10
 8009184:	4621      	mov	r1, r4
 8009186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800918a:	3b30      	subs	r3, #48	; 0x30
 800918c:	2b09      	cmp	r3, #9
 800918e:	d94e      	bls.n	800922e <_svfiprintf_r+0x17e>
 8009190:	b1b0      	cbz	r0, 80091c0 <_svfiprintf_r+0x110>
 8009192:	9207      	str	r2, [sp, #28]
 8009194:	e014      	b.n	80091c0 <_svfiprintf_r+0x110>
 8009196:	eba0 0308 	sub.w	r3, r0, r8
 800919a:	fa09 f303 	lsl.w	r3, r9, r3
 800919e:	4313      	orrs	r3, r2
 80091a0:	9304      	str	r3, [sp, #16]
 80091a2:	46a2      	mov	sl, r4
 80091a4:	e7d2      	b.n	800914c <_svfiprintf_r+0x9c>
 80091a6:	9b03      	ldr	r3, [sp, #12]
 80091a8:	1d19      	adds	r1, r3, #4
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	9103      	str	r1, [sp, #12]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	bfbb      	ittet	lt
 80091b2:	425b      	neglt	r3, r3
 80091b4:	f042 0202 	orrlt.w	r2, r2, #2
 80091b8:	9307      	strge	r3, [sp, #28]
 80091ba:	9307      	strlt	r3, [sp, #28]
 80091bc:	bfb8      	it	lt
 80091be:	9204      	strlt	r2, [sp, #16]
 80091c0:	7823      	ldrb	r3, [r4, #0]
 80091c2:	2b2e      	cmp	r3, #46	; 0x2e
 80091c4:	d10c      	bne.n	80091e0 <_svfiprintf_r+0x130>
 80091c6:	7863      	ldrb	r3, [r4, #1]
 80091c8:	2b2a      	cmp	r3, #42	; 0x2a
 80091ca:	d135      	bne.n	8009238 <_svfiprintf_r+0x188>
 80091cc:	9b03      	ldr	r3, [sp, #12]
 80091ce:	1d1a      	adds	r2, r3, #4
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	9203      	str	r2, [sp, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	bfb8      	it	lt
 80091d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80091dc:	3402      	adds	r4, #2
 80091de:	9305      	str	r3, [sp, #20]
 80091e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80092ac <_svfiprintf_r+0x1fc>
 80091e4:	7821      	ldrb	r1, [r4, #0]
 80091e6:	2203      	movs	r2, #3
 80091e8:	4650      	mov	r0, sl
 80091ea:	f7f7 f889 	bl	8000300 <memchr>
 80091ee:	b140      	cbz	r0, 8009202 <_svfiprintf_r+0x152>
 80091f0:	2340      	movs	r3, #64	; 0x40
 80091f2:	eba0 000a 	sub.w	r0, r0, sl
 80091f6:	fa03 f000 	lsl.w	r0, r3, r0
 80091fa:	9b04      	ldr	r3, [sp, #16]
 80091fc:	4303      	orrs	r3, r0
 80091fe:	3401      	adds	r4, #1
 8009200:	9304      	str	r3, [sp, #16]
 8009202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009206:	4826      	ldr	r0, [pc, #152]	; (80092a0 <_svfiprintf_r+0x1f0>)
 8009208:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800920c:	2206      	movs	r2, #6
 800920e:	f7f7 f877 	bl	8000300 <memchr>
 8009212:	2800      	cmp	r0, #0
 8009214:	d038      	beq.n	8009288 <_svfiprintf_r+0x1d8>
 8009216:	4b23      	ldr	r3, [pc, #140]	; (80092a4 <_svfiprintf_r+0x1f4>)
 8009218:	bb1b      	cbnz	r3, 8009262 <_svfiprintf_r+0x1b2>
 800921a:	9b03      	ldr	r3, [sp, #12]
 800921c:	3307      	adds	r3, #7
 800921e:	f023 0307 	bic.w	r3, r3, #7
 8009222:	3308      	adds	r3, #8
 8009224:	9303      	str	r3, [sp, #12]
 8009226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009228:	4433      	add	r3, r6
 800922a:	9309      	str	r3, [sp, #36]	; 0x24
 800922c:	e767      	b.n	80090fe <_svfiprintf_r+0x4e>
 800922e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009232:	460c      	mov	r4, r1
 8009234:	2001      	movs	r0, #1
 8009236:	e7a5      	b.n	8009184 <_svfiprintf_r+0xd4>
 8009238:	2300      	movs	r3, #0
 800923a:	3401      	adds	r4, #1
 800923c:	9305      	str	r3, [sp, #20]
 800923e:	4619      	mov	r1, r3
 8009240:	f04f 0c0a 	mov.w	ip, #10
 8009244:	4620      	mov	r0, r4
 8009246:	f810 2b01 	ldrb.w	r2, [r0], #1
 800924a:	3a30      	subs	r2, #48	; 0x30
 800924c:	2a09      	cmp	r2, #9
 800924e:	d903      	bls.n	8009258 <_svfiprintf_r+0x1a8>
 8009250:	2b00      	cmp	r3, #0
 8009252:	d0c5      	beq.n	80091e0 <_svfiprintf_r+0x130>
 8009254:	9105      	str	r1, [sp, #20]
 8009256:	e7c3      	b.n	80091e0 <_svfiprintf_r+0x130>
 8009258:	fb0c 2101 	mla	r1, ip, r1, r2
 800925c:	4604      	mov	r4, r0
 800925e:	2301      	movs	r3, #1
 8009260:	e7f0      	b.n	8009244 <_svfiprintf_r+0x194>
 8009262:	ab03      	add	r3, sp, #12
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	462a      	mov	r2, r5
 8009268:	4b0f      	ldr	r3, [pc, #60]	; (80092a8 <_svfiprintf_r+0x1f8>)
 800926a:	a904      	add	r1, sp, #16
 800926c:	4638      	mov	r0, r7
 800926e:	f3af 8000 	nop.w
 8009272:	1c42      	adds	r2, r0, #1
 8009274:	4606      	mov	r6, r0
 8009276:	d1d6      	bne.n	8009226 <_svfiprintf_r+0x176>
 8009278:	89ab      	ldrh	r3, [r5, #12]
 800927a:	065b      	lsls	r3, r3, #25
 800927c:	f53f af2c 	bmi.w	80090d8 <_svfiprintf_r+0x28>
 8009280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009282:	b01d      	add	sp, #116	; 0x74
 8009284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009288:	ab03      	add	r3, sp, #12
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	462a      	mov	r2, r5
 800928e:	4b06      	ldr	r3, [pc, #24]	; (80092a8 <_svfiprintf_r+0x1f8>)
 8009290:	a904      	add	r1, sp, #16
 8009292:	4638      	mov	r0, r7
 8009294:	f000 f87a 	bl	800938c <_printf_i>
 8009298:	e7eb      	b.n	8009272 <_svfiprintf_r+0x1c2>
 800929a:	bf00      	nop
 800929c:	0800993c 	.word	0x0800993c
 80092a0:	08009946 	.word	0x08009946
 80092a4:	00000000 	.word	0x00000000
 80092a8:	08008ff9 	.word	0x08008ff9
 80092ac:	08009942 	.word	0x08009942

080092b0 <_printf_common>:
 80092b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b4:	4616      	mov	r6, r2
 80092b6:	4699      	mov	r9, r3
 80092b8:	688a      	ldr	r2, [r1, #8]
 80092ba:	690b      	ldr	r3, [r1, #16]
 80092bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092c0:	4293      	cmp	r3, r2
 80092c2:	bfb8      	it	lt
 80092c4:	4613      	movlt	r3, r2
 80092c6:	6033      	str	r3, [r6, #0]
 80092c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092cc:	4607      	mov	r7, r0
 80092ce:	460c      	mov	r4, r1
 80092d0:	b10a      	cbz	r2, 80092d6 <_printf_common+0x26>
 80092d2:	3301      	adds	r3, #1
 80092d4:	6033      	str	r3, [r6, #0]
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	0699      	lsls	r1, r3, #26
 80092da:	bf42      	ittt	mi
 80092dc:	6833      	ldrmi	r3, [r6, #0]
 80092de:	3302      	addmi	r3, #2
 80092e0:	6033      	strmi	r3, [r6, #0]
 80092e2:	6825      	ldr	r5, [r4, #0]
 80092e4:	f015 0506 	ands.w	r5, r5, #6
 80092e8:	d106      	bne.n	80092f8 <_printf_common+0x48>
 80092ea:	f104 0a19 	add.w	sl, r4, #25
 80092ee:	68e3      	ldr	r3, [r4, #12]
 80092f0:	6832      	ldr	r2, [r6, #0]
 80092f2:	1a9b      	subs	r3, r3, r2
 80092f4:	42ab      	cmp	r3, r5
 80092f6:	dc26      	bgt.n	8009346 <_printf_common+0x96>
 80092f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092fc:	1e13      	subs	r3, r2, #0
 80092fe:	6822      	ldr	r2, [r4, #0]
 8009300:	bf18      	it	ne
 8009302:	2301      	movne	r3, #1
 8009304:	0692      	lsls	r2, r2, #26
 8009306:	d42b      	bmi.n	8009360 <_printf_common+0xb0>
 8009308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800930c:	4649      	mov	r1, r9
 800930e:	4638      	mov	r0, r7
 8009310:	47c0      	blx	r8
 8009312:	3001      	adds	r0, #1
 8009314:	d01e      	beq.n	8009354 <_printf_common+0xa4>
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	68e5      	ldr	r5, [r4, #12]
 800931a:	6832      	ldr	r2, [r6, #0]
 800931c:	f003 0306 	and.w	r3, r3, #6
 8009320:	2b04      	cmp	r3, #4
 8009322:	bf08      	it	eq
 8009324:	1aad      	subeq	r5, r5, r2
 8009326:	68a3      	ldr	r3, [r4, #8]
 8009328:	6922      	ldr	r2, [r4, #16]
 800932a:	bf0c      	ite	eq
 800932c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009330:	2500      	movne	r5, #0
 8009332:	4293      	cmp	r3, r2
 8009334:	bfc4      	itt	gt
 8009336:	1a9b      	subgt	r3, r3, r2
 8009338:	18ed      	addgt	r5, r5, r3
 800933a:	2600      	movs	r6, #0
 800933c:	341a      	adds	r4, #26
 800933e:	42b5      	cmp	r5, r6
 8009340:	d11a      	bne.n	8009378 <_printf_common+0xc8>
 8009342:	2000      	movs	r0, #0
 8009344:	e008      	b.n	8009358 <_printf_common+0xa8>
 8009346:	2301      	movs	r3, #1
 8009348:	4652      	mov	r2, sl
 800934a:	4649      	mov	r1, r9
 800934c:	4638      	mov	r0, r7
 800934e:	47c0      	blx	r8
 8009350:	3001      	adds	r0, #1
 8009352:	d103      	bne.n	800935c <_printf_common+0xac>
 8009354:	f04f 30ff 	mov.w	r0, #4294967295
 8009358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935c:	3501      	adds	r5, #1
 800935e:	e7c6      	b.n	80092ee <_printf_common+0x3e>
 8009360:	18e1      	adds	r1, r4, r3
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	2030      	movs	r0, #48	; 0x30
 8009366:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800936a:	4422      	add	r2, r4
 800936c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009374:	3302      	adds	r3, #2
 8009376:	e7c7      	b.n	8009308 <_printf_common+0x58>
 8009378:	2301      	movs	r3, #1
 800937a:	4622      	mov	r2, r4
 800937c:	4649      	mov	r1, r9
 800937e:	4638      	mov	r0, r7
 8009380:	47c0      	blx	r8
 8009382:	3001      	adds	r0, #1
 8009384:	d0e6      	beq.n	8009354 <_printf_common+0xa4>
 8009386:	3601      	adds	r6, #1
 8009388:	e7d9      	b.n	800933e <_printf_common+0x8e>
	...

0800938c <_printf_i>:
 800938c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009390:	7e0f      	ldrb	r7, [r1, #24]
 8009392:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009394:	2f78      	cmp	r7, #120	; 0x78
 8009396:	4691      	mov	r9, r2
 8009398:	4680      	mov	r8, r0
 800939a:	460c      	mov	r4, r1
 800939c:	469a      	mov	sl, r3
 800939e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093a2:	d807      	bhi.n	80093b4 <_printf_i+0x28>
 80093a4:	2f62      	cmp	r7, #98	; 0x62
 80093a6:	d80a      	bhi.n	80093be <_printf_i+0x32>
 80093a8:	2f00      	cmp	r7, #0
 80093aa:	f000 80d8 	beq.w	800955e <_printf_i+0x1d2>
 80093ae:	2f58      	cmp	r7, #88	; 0x58
 80093b0:	f000 80a3 	beq.w	80094fa <_printf_i+0x16e>
 80093b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093bc:	e03a      	b.n	8009434 <_printf_i+0xa8>
 80093be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093c2:	2b15      	cmp	r3, #21
 80093c4:	d8f6      	bhi.n	80093b4 <_printf_i+0x28>
 80093c6:	a101      	add	r1, pc, #4	; (adr r1, 80093cc <_printf_i+0x40>)
 80093c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093cc:	08009425 	.word	0x08009425
 80093d0:	08009439 	.word	0x08009439
 80093d4:	080093b5 	.word	0x080093b5
 80093d8:	080093b5 	.word	0x080093b5
 80093dc:	080093b5 	.word	0x080093b5
 80093e0:	080093b5 	.word	0x080093b5
 80093e4:	08009439 	.word	0x08009439
 80093e8:	080093b5 	.word	0x080093b5
 80093ec:	080093b5 	.word	0x080093b5
 80093f0:	080093b5 	.word	0x080093b5
 80093f4:	080093b5 	.word	0x080093b5
 80093f8:	08009545 	.word	0x08009545
 80093fc:	08009469 	.word	0x08009469
 8009400:	08009527 	.word	0x08009527
 8009404:	080093b5 	.word	0x080093b5
 8009408:	080093b5 	.word	0x080093b5
 800940c:	08009567 	.word	0x08009567
 8009410:	080093b5 	.word	0x080093b5
 8009414:	08009469 	.word	0x08009469
 8009418:	080093b5 	.word	0x080093b5
 800941c:	080093b5 	.word	0x080093b5
 8009420:	0800952f 	.word	0x0800952f
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	1d1a      	adds	r2, r3, #4
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	602a      	str	r2, [r5, #0]
 800942c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009434:	2301      	movs	r3, #1
 8009436:	e0a3      	b.n	8009580 <_printf_i+0x1f4>
 8009438:	6820      	ldr	r0, [r4, #0]
 800943a:	6829      	ldr	r1, [r5, #0]
 800943c:	0606      	lsls	r6, r0, #24
 800943e:	f101 0304 	add.w	r3, r1, #4
 8009442:	d50a      	bpl.n	800945a <_printf_i+0xce>
 8009444:	680e      	ldr	r6, [r1, #0]
 8009446:	602b      	str	r3, [r5, #0]
 8009448:	2e00      	cmp	r6, #0
 800944a:	da03      	bge.n	8009454 <_printf_i+0xc8>
 800944c:	232d      	movs	r3, #45	; 0x2d
 800944e:	4276      	negs	r6, r6
 8009450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009454:	485e      	ldr	r0, [pc, #376]	; (80095d0 <_printf_i+0x244>)
 8009456:	230a      	movs	r3, #10
 8009458:	e019      	b.n	800948e <_printf_i+0x102>
 800945a:	680e      	ldr	r6, [r1, #0]
 800945c:	602b      	str	r3, [r5, #0]
 800945e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009462:	bf18      	it	ne
 8009464:	b236      	sxthne	r6, r6
 8009466:	e7ef      	b.n	8009448 <_printf_i+0xbc>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	6820      	ldr	r0, [r4, #0]
 800946c:	1d19      	adds	r1, r3, #4
 800946e:	6029      	str	r1, [r5, #0]
 8009470:	0601      	lsls	r1, r0, #24
 8009472:	d501      	bpl.n	8009478 <_printf_i+0xec>
 8009474:	681e      	ldr	r6, [r3, #0]
 8009476:	e002      	b.n	800947e <_printf_i+0xf2>
 8009478:	0646      	lsls	r6, r0, #25
 800947a:	d5fb      	bpl.n	8009474 <_printf_i+0xe8>
 800947c:	881e      	ldrh	r6, [r3, #0]
 800947e:	4854      	ldr	r0, [pc, #336]	; (80095d0 <_printf_i+0x244>)
 8009480:	2f6f      	cmp	r7, #111	; 0x6f
 8009482:	bf0c      	ite	eq
 8009484:	2308      	moveq	r3, #8
 8009486:	230a      	movne	r3, #10
 8009488:	2100      	movs	r1, #0
 800948a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800948e:	6865      	ldr	r5, [r4, #4]
 8009490:	60a5      	str	r5, [r4, #8]
 8009492:	2d00      	cmp	r5, #0
 8009494:	bfa2      	ittt	ge
 8009496:	6821      	ldrge	r1, [r4, #0]
 8009498:	f021 0104 	bicge.w	r1, r1, #4
 800949c:	6021      	strge	r1, [r4, #0]
 800949e:	b90e      	cbnz	r6, 80094a4 <_printf_i+0x118>
 80094a0:	2d00      	cmp	r5, #0
 80094a2:	d04d      	beq.n	8009540 <_printf_i+0x1b4>
 80094a4:	4615      	mov	r5, r2
 80094a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80094aa:	fb03 6711 	mls	r7, r3, r1, r6
 80094ae:	5dc7      	ldrb	r7, [r0, r7]
 80094b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094b4:	4637      	mov	r7, r6
 80094b6:	42bb      	cmp	r3, r7
 80094b8:	460e      	mov	r6, r1
 80094ba:	d9f4      	bls.n	80094a6 <_printf_i+0x11a>
 80094bc:	2b08      	cmp	r3, #8
 80094be:	d10b      	bne.n	80094d8 <_printf_i+0x14c>
 80094c0:	6823      	ldr	r3, [r4, #0]
 80094c2:	07de      	lsls	r6, r3, #31
 80094c4:	d508      	bpl.n	80094d8 <_printf_i+0x14c>
 80094c6:	6923      	ldr	r3, [r4, #16]
 80094c8:	6861      	ldr	r1, [r4, #4]
 80094ca:	4299      	cmp	r1, r3
 80094cc:	bfde      	ittt	le
 80094ce:	2330      	movle	r3, #48	; 0x30
 80094d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094d8:	1b52      	subs	r2, r2, r5
 80094da:	6122      	str	r2, [r4, #16]
 80094dc:	f8cd a000 	str.w	sl, [sp]
 80094e0:	464b      	mov	r3, r9
 80094e2:	aa03      	add	r2, sp, #12
 80094e4:	4621      	mov	r1, r4
 80094e6:	4640      	mov	r0, r8
 80094e8:	f7ff fee2 	bl	80092b0 <_printf_common>
 80094ec:	3001      	adds	r0, #1
 80094ee:	d14c      	bne.n	800958a <_printf_i+0x1fe>
 80094f0:	f04f 30ff 	mov.w	r0, #4294967295
 80094f4:	b004      	add	sp, #16
 80094f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094fa:	4835      	ldr	r0, [pc, #212]	; (80095d0 <_printf_i+0x244>)
 80094fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009500:	6829      	ldr	r1, [r5, #0]
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	f851 6b04 	ldr.w	r6, [r1], #4
 8009508:	6029      	str	r1, [r5, #0]
 800950a:	061d      	lsls	r5, r3, #24
 800950c:	d514      	bpl.n	8009538 <_printf_i+0x1ac>
 800950e:	07df      	lsls	r7, r3, #31
 8009510:	bf44      	itt	mi
 8009512:	f043 0320 	orrmi.w	r3, r3, #32
 8009516:	6023      	strmi	r3, [r4, #0]
 8009518:	b91e      	cbnz	r6, 8009522 <_printf_i+0x196>
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	f023 0320 	bic.w	r3, r3, #32
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	2310      	movs	r3, #16
 8009524:	e7b0      	b.n	8009488 <_printf_i+0xfc>
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	f043 0320 	orr.w	r3, r3, #32
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	2378      	movs	r3, #120	; 0x78
 8009530:	4828      	ldr	r0, [pc, #160]	; (80095d4 <_printf_i+0x248>)
 8009532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009536:	e7e3      	b.n	8009500 <_printf_i+0x174>
 8009538:	0659      	lsls	r1, r3, #25
 800953a:	bf48      	it	mi
 800953c:	b2b6      	uxthmi	r6, r6
 800953e:	e7e6      	b.n	800950e <_printf_i+0x182>
 8009540:	4615      	mov	r5, r2
 8009542:	e7bb      	b.n	80094bc <_printf_i+0x130>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	6826      	ldr	r6, [r4, #0]
 8009548:	6961      	ldr	r1, [r4, #20]
 800954a:	1d18      	adds	r0, r3, #4
 800954c:	6028      	str	r0, [r5, #0]
 800954e:	0635      	lsls	r5, r6, #24
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	d501      	bpl.n	8009558 <_printf_i+0x1cc>
 8009554:	6019      	str	r1, [r3, #0]
 8009556:	e002      	b.n	800955e <_printf_i+0x1d2>
 8009558:	0670      	lsls	r0, r6, #25
 800955a:	d5fb      	bpl.n	8009554 <_printf_i+0x1c8>
 800955c:	8019      	strh	r1, [r3, #0]
 800955e:	2300      	movs	r3, #0
 8009560:	6123      	str	r3, [r4, #16]
 8009562:	4615      	mov	r5, r2
 8009564:	e7ba      	b.n	80094dc <_printf_i+0x150>
 8009566:	682b      	ldr	r3, [r5, #0]
 8009568:	1d1a      	adds	r2, r3, #4
 800956a:	602a      	str	r2, [r5, #0]
 800956c:	681d      	ldr	r5, [r3, #0]
 800956e:	6862      	ldr	r2, [r4, #4]
 8009570:	2100      	movs	r1, #0
 8009572:	4628      	mov	r0, r5
 8009574:	f7f6 fec4 	bl	8000300 <memchr>
 8009578:	b108      	cbz	r0, 800957e <_printf_i+0x1f2>
 800957a:	1b40      	subs	r0, r0, r5
 800957c:	6060      	str	r0, [r4, #4]
 800957e:	6863      	ldr	r3, [r4, #4]
 8009580:	6123      	str	r3, [r4, #16]
 8009582:	2300      	movs	r3, #0
 8009584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009588:	e7a8      	b.n	80094dc <_printf_i+0x150>
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	462a      	mov	r2, r5
 800958e:	4649      	mov	r1, r9
 8009590:	4640      	mov	r0, r8
 8009592:	47d0      	blx	sl
 8009594:	3001      	adds	r0, #1
 8009596:	d0ab      	beq.n	80094f0 <_printf_i+0x164>
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	079b      	lsls	r3, r3, #30
 800959c:	d413      	bmi.n	80095c6 <_printf_i+0x23a>
 800959e:	68e0      	ldr	r0, [r4, #12]
 80095a0:	9b03      	ldr	r3, [sp, #12]
 80095a2:	4298      	cmp	r0, r3
 80095a4:	bfb8      	it	lt
 80095a6:	4618      	movlt	r0, r3
 80095a8:	e7a4      	b.n	80094f4 <_printf_i+0x168>
 80095aa:	2301      	movs	r3, #1
 80095ac:	4632      	mov	r2, r6
 80095ae:	4649      	mov	r1, r9
 80095b0:	4640      	mov	r0, r8
 80095b2:	47d0      	blx	sl
 80095b4:	3001      	adds	r0, #1
 80095b6:	d09b      	beq.n	80094f0 <_printf_i+0x164>
 80095b8:	3501      	adds	r5, #1
 80095ba:	68e3      	ldr	r3, [r4, #12]
 80095bc:	9903      	ldr	r1, [sp, #12]
 80095be:	1a5b      	subs	r3, r3, r1
 80095c0:	42ab      	cmp	r3, r5
 80095c2:	dcf2      	bgt.n	80095aa <_printf_i+0x21e>
 80095c4:	e7eb      	b.n	800959e <_printf_i+0x212>
 80095c6:	2500      	movs	r5, #0
 80095c8:	f104 0619 	add.w	r6, r4, #25
 80095cc:	e7f5      	b.n	80095ba <_printf_i+0x22e>
 80095ce:	bf00      	nop
 80095d0:	0800994d 	.word	0x0800994d
 80095d4:	0800995e 	.word	0x0800995e

080095d8 <memcpy>:
 80095d8:	440a      	add	r2, r1
 80095da:	4291      	cmp	r1, r2
 80095dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80095e0:	d100      	bne.n	80095e4 <memcpy+0xc>
 80095e2:	4770      	bx	lr
 80095e4:	b510      	push	{r4, lr}
 80095e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095ee:	4291      	cmp	r1, r2
 80095f0:	d1f9      	bne.n	80095e6 <memcpy+0xe>
 80095f2:	bd10      	pop	{r4, pc}

080095f4 <memmove>:
 80095f4:	4288      	cmp	r0, r1
 80095f6:	b510      	push	{r4, lr}
 80095f8:	eb01 0402 	add.w	r4, r1, r2
 80095fc:	d902      	bls.n	8009604 <memmove+0x10>
 80095fe:	4284      	cmp	r4, r0
 8009600:	4623      	mov	r3, r4
 8009602:	d807      	bhi.n	8009614 <memmove+0x20>
 8009604:	1e43      	subs	r3, r0, #1
 8009606:	42a1      	cmp	r1, r4
 8009608:	d008      	beq.n	800961c <memmove+0x28>
 800960a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800960e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009612:	e7f8      	b.n	8009606 <memmove+0x12>
 8009614:	4402      	add	r2, r0
 8009616:	4601      	mov	r1, r0
 8009618:	428a      	cmp	r2, r1
 800961a:	d100      	bne.n	800961e <memmove+0x2a>
 800961c:	bd10      	pop	{r4, pc}
 800961e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009622:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009626:	e7f7      	b.n	8009618 <memmove+0x24>

08009628 <_free_r>:
 8009628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800962a:	2900      	cmp	r1, #0
 800962c:	d044      	beq.n	80096b8 <_free_r+0x90>
 800962e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009632:	9001      	str	r0, [sp, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	f1a1 0404 	sub.w	r4, r1, #4
 800963a:	bfb8      	it	lt
 800963c:	18e4      	addlt	r4, r4, r3
 800963e:	f000 f913 	bl	8009868 <__malloc_lock>
 8009642:	4a1e      	ldr	r2, [pc, #120]	; (80096bc <_free_r+0x94>)
 8009644:	9801      	ldr	r0, [sp, #4]
 8009646:	6813      	ldr	r3, [r2, #0]
 8009648:	b933      	cbnz	r3, 8009658 <_free_r+0x30>
 800964a:	6063      	str	r3, [r4, #4]
 800964c:	6014      	str	r4, [r2, #0]
 800964e:	b003      	add	sp, #12
 8009650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009654:	f000 b90e 	b.w	8009874 <__malloc_unlock>
 8009658:	42a3      	cmp	r3, r4
 800965a:	d908      	bls.n	800966e <_free_r+0x46>
 800965c:	6825      	ldr	r5, [r4, #0]
 800965e:	1961      	adds	r1, r4, r5
 8009660:	428b      	cmp	r3, r1
 8009662:	bf01      	itttt	eq
 8009664:	6819      	ldreq	r1, [r3, #0]
 8009666:	685b      	ldreq	r3, [r3, #4]
 8009668:	1949      	addeq	r1, r1, r5
 800966a:	6021      	streq	r1, [r4, #0]
 800966c:	e7ed      	b.n	800964a <_free_r+0x22>
 800966e:	461a      	mov	r2, r3
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	b10b      	cbz	r3, 8009678 <_free_r+0x50>
 8009674:	42a3      	cmp	r3, r4
 8009676:	d9fa      	bls.n	800966e <_free_r+0x46>
 8009678:	6811      	ldr	r1, [r2, #0]
 800967a:	1855      	adds	r5, r2, r1
 800967c:	42a5      	cmp	r5, r4
 800967e:	d10b      	bne.n	8009698 <_free_r+0x70>
 8009680:	6824      	ldr	r4, [r4, #0]
 8009682:	4421      	add	r1, r4
 8009684:	1854      	adds	r4, r2, r1
 8009686:	42a3      	cmp	r3, r4
 8009688:	6011      	str	r1, [r2, #0]
 800968a:	d1e0      	bne.n	800964e <_free_r+0x26>
 800968c:	681c      	ldr	r4, [r3, #0]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	6053      	str	r3, [r2, #4]
 8009692:	4421      	add	r1, r4
 8009694:	6011      	str	r1, [r2, #0]
 8009696:	e7da      	b.n	800964e <_free_r+0x26>
 8009698:	d902      	bls.n	80096a0 <_free_r+0x78>
 800969a:	230c      	movs	r3, #12
 800969c:	6003      	str	r3, [r0, #0]
 800969e:	e7d6      	b.n	800964e <_free_r+0x26>
 80096a0:	6825      	ldr	r5, [r4, #0]
 80096a2:	1961      	adds	r1, r4, r5
 80096a4:	428b      	cmp	r3, r1
 80096a6:	bf04      	itt	eq
 80096a8:	6819      	ldreq	r1, [r3, #0]
 80096aa:	685b      	ldreq	r3, [r3, #4]
 80096ac:	6063      	str	r3, [r4, #4]
 80096ae:	bf04      	itt	eq
 80096b0:	1949      	addeq	r1, r1, r5
 80096b2:	6021      	streq	r1, [r4, #0]
 80096b4:	6054      	str	r4, [r2, #4]
 80096b6:	e7ca      	b.n	800964e <_free_r+0x26>
 80096b8:	b003      	add	sp, #12
 80096ba:	bd30      	pop	{r4, r5, pc}
 80096bc:	24009f0c 	.word	0x24009f0c

080096c0 <sbrk_aligned>:
 80096c0:	b570      	push	{r4, r5, r6, lr}
 80096c2:	4e0e      	ldr	r6, [pc, #56]	; (80096fc <sbrk_aligned+0x3c>)
 80096c4:	460c      	mov	r4, r1
 80096c6:	6831      	ldr	r1, [r6, #0]
 80096c8:	4605      	mov	r5, r0
 80096ca:	b911      	cbnz	r1, 80096d2 <sbrk_aligned+0x12>
 80096cc:	f000 f8bc 	bl	8009848 <_sbrk_r>
 80096d0:	6030      	str	r0, [r6, #0]
 80096d2:	4621      	mov	r1, r4
 80096d4:	4628      	mov	r0, r5
 80096d6:	f000 f8b7 	bl	8009848 <_sbrk_r>
 80096da:	1c43      	adds	r3, r0, #1
 80096dc:	d00a      	beq.n	80096f4 <sbrk_aligned+0x34>
 80096de:	1cc4      	adds	r4, r0, #3
 80096e0:	f024 0403 	bic.w	r4, r4, #3
 80096e4:	42a0      	cmp	r0, r4
 80096e6:	d007      	beq.n	80096f8 <sbrk_aligned+0x38>
 80096e8:	1a21      	subs	r1, r4, r0
 80096ea:	4628      	mov	r0, r5
 80096ec:	f000 f8ac 	bl	8009848 <_sbrk_r>
 80096f0:	3001      	adds	r0, #1
 80096f2:	d101      	bne.n	80096f8 <sbrk_aligned+0x38>
 80096f4:	f04f 34ff 	mov.w	r4, #4294967295
 80096f8:	4620      	mov	r0, r4
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
 80096fc:	24009f10 	.word	0x24009f10

08009700 <_malloc_r>:
 8009700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009704:	1ccd      	adds	r5, r1, #3
 8009706:	f025 0503 	bic.w	r5, r5, #3
 800970a:	3508      	adds	r5, #8
 800970c:	2d0c      	cmp	r5, #12
 800970e:	bf38      	it	cc
 8009710:	250c      	movcc	r5, #12
 8009712:	2d00      	cmp	r5, #0
 8009714:	4607      	mov	r7, r0
 8009716:	db01      	blt.n	800971c <_malloc_r+0x1c>
 8009718:	42a9      	cmp	r1, r5
 800971a:	d905      	bls.n	8009728 <_malloc_r+0x28>
 800971c:	230c      	movs	r3, #12
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	2600      	movs	r6, #0
 8009722:	4630      	mov	r0, r6
 8009724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009728:	4e2e      	ldr	r6, [pc, #184]	; (80097e4 <_malloc_r+0xe4>)
 800972a:	f000 f89d 	bl	8009868 <__malloc_lock>
 800972e:	6833      	ldr	r3, [r6, #0]
 8009730:	461c      	mov	r4, r3
 8009732:	bb34      	cbnz	r4, 8009782 <_malloc_r+0x82>
 8009734:	4629      	mov	r1, r5
 8009736:	4638      	mov	r0, r7
 8009738:	f7ff ffc2 	bl	80096c0 <sbrk_aligned>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	4604      	mov	r4, r0
 8009740:	d14d      	bne.n	80097de <_malloc_r+0xde>
 8009742:	6834      	ldr	r4, [r6, #0]
 8009744:	4626      	mov	r6, r4
 8009746:	2e00      	cmp	r6, #0
 8009748:	d140      	bne.n	80097cc <_malloc_r+0xcc>
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	4631      	mov	r1, r6
 800974e:	4638      	mov	r0, r7
 8009750:	eb04 0803 	add.w	r8, r4, r3
 8009754:	f000 f878 	bl	8009848 <_sbrk_r>
 8009758:	4580      	cmp	r8, r0
 800975a:	d13a      	bne.n	80097d2 <_malloc_r+0xd2>
 800975c:	6821      	ldr	r1, [r4, #0]
 800975e:	3503      	adds	r5, #3
 8009760:	1a6d      	subs	r5, r5, r1
 8009762:	f025 0503 	bic.w	r5, r5, #3
 8009766:	3508      	adds	r5, #8
 8009768:	2d0c      	cmp	r5, #12
 800976a:	bf38      	it	cc
 800976c:	250c      	movcc	r5, #12
 800976e:	4629      	mov	r1, r5
 8009770:	4638      	mov	r0, r7
 8009772:	f7ff ffa5 	bl	80096c0 <sbrk_aligned>
 8009776:	3001      	adds	r0, #1
 8009778:	d02b      	beq.n	80097d2 <_malloc_r+0xd2>
 800977a:	6823      	ldr	r3, [r4, #0]
 800977c:	442b      	add	r3, r5
 800977e:	6023      	str	r3, [r4, #0]
 8009780:	e00e      	b.n	80097a0 <_malloc_r+0xa0>
 8009782:	6822      	ldr	r2, [r4, #0]
 8009784:	1b52      	subs	r2, r2, r5
 8009786:	d41e      	bmi.n	80097c6 <_malloc_r+0xc6>
 8009788:	2a0b      	cmp	r2, #11
 800978a:	d916      	bls.n	80097ba <_malloc_r+0xba>
 800978c:	1961      	adds	r1, r4, r5
 800978e:	42a3      	cmp	r3, r4
 8009790:	6025      	str	r5, [r4, #0]
 8009792:	bf18      	it	ne
 8009794:	6059      	strne	r1, [r3, #4]
 8009796:	6863      	ldr	r3, [r4, #4]
 8009798:	bf08      	it	eq
 800979a:	6031      	streq	r1, [r6, #0]
 800979c:	5162      	str	r2, [r4, r5]
 800979e:	604b      	str	r3, [r1, #4]
 80097a0:	4638      	mov	r0, r7
 80097a2:	f104 060b 	add.w	r6, r4, #11
 80097a6:	f000 f865 	bl	8009874 <__malloc_unlock>
 80097aa:	f026 0607 	bic.w	r6, r6, #7
 80097ae:	1d23      	adds	r3, r4, #4
 80097b0:	1af2      	subs	r2, r6, r3
 80097b2:	d0b6      	beq.n	8009722 <_malloc_r+0x22>
 80097b4:	1b9b      	subs	r3, r3, r6
 80097b6:	50a3      	str	r3, [r4, r2]
 80097b8:	e7b3      	b.n	8009722 <_malloc_r+0x22>
 80097ba:	6862      	ldr	r2, [r4, #4]
 80097bc:	42a3      	cmp	r3, r4
 80097be:	bf0c      	ite	eq
 80097c0:	6032      	streq	r2, [r6, #0]
 80097c2:	605a      	strne	r2, [r3, #4]
 80097c4:	e7ec      	b.n	80097a0 <_malloc_r+0xa0>
 80097c6:	4623      	mov	r3, r4
 80097c8:	6864      	ldr	r4, [r4, #4]
 80097ca:	e7b2      	b.n	8009732 <_malloc_r+0x32>
 80097cc:	4634      	mov	r4, r6
 80097ce:	6876      	ldr	r6, [r6, #4]
 80097d0:	e7b9      	b.n	8009746 <_malloc_r+0x46>
 80097d2:	230c      	movs	r3, #12
 80097d4:	603b      	str	r3, [r7, #0]
 80097d6:	4638      	mov	r0, r7
 80097d8:	f000 f84c 	bl	8009874 <__malloc_unlock>
 80097dc:	e7a1      	b.n	8009722 <_malloc_r+0x22>
 80097de:	6025      	str	r5, [r4, #0]
 80097e0:	e7de      	b.n	80097a0 <_malloc_r+0xa0>
 80097e2:	bf00      	nop
 80097e4:	24009f0c 	.word	0x24009f0c

080097e8 <_realloc_r>:
 80097e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ec:	4680      	mov	r8, r0
 80097ee:	4614      	mov	r4, r2
 80097f0:	460e      	mov	r6, r1
 80097f2:	b921      	cbnz	r1, 80097fe <_realloc_r+0x16>
 80097f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097f8:	4611      	mov	r1, r2
 80097fa:	f7ff bf81 	b.w	8009700 <_malloc_r>
 80097fe:	b92a      	cbnz	r2, 800980c <_realloc_r+0x24>
 8009800:	f7ff ff12 	bl	8009628 <_free_r>
 8009804:	4625      	mov	r5, r4
 8009806:	4628      	mov	r0, r5
 8009808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800980c:	f000 f838 	bl	8009880 <_malloc_usable_size_r>
 8009810:	4284      	cmp	r4, r0
 8009812:	4607      	mov	r7, r0
 8009814:	d802      	bhi.n	800981c <_realloc_r+0x34>
 8009816:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800981a:	d812      	bhi.n	8009842 <_realloc_r+0x5a>
 800981c:	4621      	mov	r1, r4
 800981e:	4640      	mov	r0, r8
 8009820:	f7ff ff6e 	bl	8009700 <_malloc_r>
 8009824:	4605      	mov	r5, r0
 8009826:	2800      	cmp	r0, #0
 8009828:	d0ed      	beq.n	8009806 <_realloc_r+0x1e>
 800982a:	42bc      	cmp	r4, r7
 800982c:	4622      	mov	r2, r4
 800982e:	4631      	mov	r1, r6
 8009830:	bf28      	it	cs
 8009832:	463a      	movcs	r2, r7
 8009834:	f7ff fed0 	bl	80095d8 <memcpy>
 8009838:	4631      	mov	r1, r6
 800983a:	4640      	mov	r0, r8
 800983c:	f7ff fef4 	bl	8009628 <_free_r>
 8009840:	e7e1      	b.n	8009806 <_realloc_r+0x1e>
 8009842:	4635      	mov	r5, r6
 8009844:	e7df      	b.n	8009806 <_realloc_r+0x1e>
	...

08009848 <_sbrk_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	4d06      	ldr	r5, [pc, #24]	; (8009864 <_sbrk_r+0x1c>)
 800984c:	2300      	movs	r3, #0
 800984e:	4604      	mov	r4, r0
 8009850:	4608      	mov	r0, r1
 8009852:	602b      	str	r3, [r5, #0]
 8009854:	f7f8 f942 	bl	8001adc <_sbrk>
 8009858:	1c43      	adds	r3, r0, #1
 800985a:	d102      	bne.n	8009862 <_sbrk_r+0x1a>
 800985c:	682b      	ldr	r3, [r5, #0]
 800985e:	b103      	cbz	r3, 8009862 <_sbrk_r+0x1a>
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	bd38      	pop	{r3, r4, r5, pc}
 8009864:	24009f14 	.word	0x24009f14

08009868 <__malloc_lock>:
 8009868:	4801      	ldr	r0, [pc, #4]	; (8009870 <__malloc_lock+0x8>)
 800986a:	f000 b811 	b.w	8009890 <__retarget_lock_acquire_recursive>
 800986e:	bf00      	nop
 8009870:	24009f18 	.word	0x24009f18

08009874 <__malloc_unlock>:
 8009874:	4801      	ldr	r0, [pc, #4]	; (800987c <__malloc_unlock+0x8>)
 8009876:	f000 b80c 	b.w	8009892 <__retarget_lock_release_recursive>
 800987a:	bf00      	nop
 800987c:	24009f18 	.word	0x24009f18

08009880 <_malloc_usable_size_r>:
 8009880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009884:	1f18      	subs	r0, r3, #4
 8009886:	2b00      	cmp	r3, #0
 8009888:	bfbc      	itt	lt
 800988a:	580b      	ldrlt	r3, [r1, r0]
 800988c:	18c0      	addlt	r0, r0, r3
 800988e:	4770      	bx	lr

08009890 <__retarget_lock_acquire_recursive>:
 8009890:	4770      	bx	lr

08009892 <__retarget_lock_release_recursive>:
 8009892:	4770      	bx	lr

08009894 <_init>:
 8009894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009896:	bf00      	nop
 8009898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800989a:	bc08      	pop	{r3}
 800989c:	469e      	mov	lr, r3
 800989e:	4770      	bx	lr

080098a0 <_fini>:
 80098a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a2:	bf00      	nop
 80098a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a6:	bc08      	pop	{r3}
 80098a8:	469e      	mov	lr, r3
 80098aa:	4770      	bx	lr
