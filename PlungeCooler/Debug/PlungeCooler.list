
PlungeCooler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b038  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800b2e8  0800b2e8  0001b2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b358  0800b358  0001b358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b360  0800b360  0001b360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b364  0800b364  0001b364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  24000000  0800b368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001d834  24000068  0800b3d0  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2401d89c  0800b3d0  0002d89c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001acc9  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002d0e  00000000  00000000  0003ada2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000014f8  00000000  00000000  0003dab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000106c  00000000  00000000  0003efa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00032a26  00000000  00000000  00040014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001b762  00000000  00000000  00072a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00153f2d  00000000  00000000  0008e19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006024  00000000  00000000  001e20cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001e80f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000068 	.word	0x24000068
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b2d0 	.word	0x0800b2d0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	0800b2d0 	.word	0x0800b2d0

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db0b      	blt.n	80006c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	f003 021f 	and.w	r2, r3, #31
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <__NVIC_EnableIRQ+0x38>)
 80006b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ba:	095b      	lsrs	r3, r3, #5
 80006bc:	2001      	movs	r0, #1
 80006be:	fa00 f202 	lsl.w	r2, r0, r2
 80006c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db0a      	blt.n	8000702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	490c      	ldr	r1, [pc, #48]	; (8000724 <__NVIC_SetPriority+0x4c>)
 80006f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000700:	e00a      	b.n	8000718 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4908      	ldr	r1, [pc, #32]	; (8000728 <__NVIC_SetPriority+0x50>)
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	3b04      	subs	r3, #4
 8000710:	0112      	lsls	r2, r2, #4
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	440b      	add	r3, r1
 8000716:	761a      	strb	r2, [r3, #24]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000e100 	.word	0xe000e100
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <HAL_UART_RxCpltCallback>:
void bad(void) {
	HAL_UART_Transmit(&huart3, tx_bad, 3, HAL_MAX_DELAY);
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    rxBuffer[rxIndex] = received_character[0];
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_UART_RxCpltCallback+0x54>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_UART_RxCpltCallback+0x58>)
 800073c:	7819      	ldrb	r1, [r3, #0]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_UART_RxCpltCallback+0x5c>)
 8000740:	5499      	strb	r1, [r3, r2]
	rxIndex++;
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <HAL_UART_RxCpltCallback+0x54>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	b29a      	uxth	r2, r3
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <HAL_UART_RxCpltCallback+0x54>)
 800074c:	801a      	strh	r2, [r3, #0]

	if (received_character[0] == '\n' || received_character[0] == '\r') { //ie end of message, stop receiving. 
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_UART_RxCpltCallback+0x58>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b0a      	cmp	r3, #10
 8000754:	d003      	beq.n	800075e <HAL_UART_RxCpltCallback+0x32>
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <HAL_UART_RxCpltCallback+0x58>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b0d      	cmp	r3, #13
 800075c:	d105      	bne.n	800076a <HAL_UART_RxCpltCallback+0x3e>
    	rxIndex = 0;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <HAL_UART_RxCpltCallback+0x54>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
    	rx_handle();
 8000764:	f000 f814 	bl	8000790 <rx_handle>
 8000768:	e005      	b.n	8000776 <HAL_UART_RxCpltCallback+0x4a>
    } else {
        HAL_UART_Receive_IT(&huart3, received_character, 1);
 800076a:	2201      	movs	r2, #1
 800076c:	4905      	ldr	r1, [pc, #20]	; (8000784 <HAL_UART_RxCpltCallback+0x58>)
 800076e:	4807      	ldr	r0, [pc, #28]	; (800078c <HAL_UART_RxCpltCallback+0x60>)
 8000770:	f007 fcbc 	bl	80080ec <HAL_UART_Receive_IT>
    }
}
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	2401d73c 	.word	0x2401d73c
 8000784:	2401d740 	.word	0x2401d740
 8000788:	2401d6d8 	.word	0x2401d6d8
 800078c:	24000180 	.word	0x24000180

08000790 <rx_handle>:

void rx_handle(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, val);
 8000796:	4b49      	ldr	r3, [pc, #292]	; (80008bc <rx_handle+0x12c>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	2102      	movs	r1, #2
 800079e:	4848      	ldr	r0, [pc, #288]	; (80008c0 <rx_handle+0x130>)
 80007a0:	f003 fa5e 	bl	8003c60 <HAL_GPIO_WritePin>
	if(val)
 80007a4:	4b45      	ldr	r3, [pc, #276]	; (80008bc <rx_handle+0x12c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d003      	beq.n	80007b4 <rx_handle+0x24>
		val = 0;
 80007ac:	4b43      	ldr	r3, [pc, #268]	; (80008bc <rx_handle+0x12c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	e002      	b.n	80007ba <rx_handle+0x2a>
	else
		val = 1;
 80007b4:	4b41      	ldr	r3, [pc, #260]	; (80008bc <rx_handle+0x12c>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
	//sprintf(num, "RX0: %d\r\n", rxBuffer[0]);
	//HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);
	switch(rxBuffer[0]) {
 80007ba:	4b42      	ldr	r3, [pc, #264]	; (80008c4 <rx_handle+0x134>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b34      	cmp	r3, #52	; 0x34
 80007c0:	d02b      	beq.n	800081a <rx_handle+0x8a>
 80007c2:	2b34      	cmp	r3, #52	; 0x34
 80007c4:	dc71      	bgt.n	80008aa <rx_handle+0x11a>
 80007c6:	2b32      	cmp	r3, #50	; 0x32
 80007c8:	d002      	beq.n	80007d0 <rx_handle+0x40>
 80007ca:	2b33      	cmp	r3, #51	; 0x33
 80007cc:	d050      	beq.n	8000870 <rx_handle+0xe0>
 80007ce:	e06c      	b.n	80008aa <rx_handle+0x11a>
		case PLUNGE: ;

			/* reset tracking variables */
			log_position = 0;
 80007d0:	4b3d      	ldr	r3, [pc, #244]	; (80008c8 <rx_handle+0x138>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
			memset(posLog, 0, sizeof(posLog));
 80007d6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80007da:	2100      	movs	r1, #0
 80007dc:	483b      	ldr	r0, [pc, #236]	; (80008cc <rx_handle+0x13c>)
 80007de:	f00a f8f3 	bl	800a9c8 <memset>
      memset(thermoLog, 0, sizeof(thermoLog));
 80007e2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80007e6:	2100      	movs	r1, #0
 80007e8:	4839      	ldr	r0, [pc, #228]	; (80008d0 <rx_handle+0x140>)
 80007ea:	f00a f8ed 	bl	800a9c8 <memset>

			TIM2->CR1  |=  TIM_CR1_CEN; 	//start counter for encoder 
 80007ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6013      	str	r3, [r2, #0]

			TIM5->CR1  |= TIM_CR1_CEN; // Start TIM5 to commence data collection
 80007fe:	4b35      	ldr	r3, [pc, #212]	; (80008d4 <rx_handle+0x144>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a34      	ldr	r2, [pc, #208]	; (80008d4 <rx_handle+0x144>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6013      	str	r3, [r2, #0]

      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	2203      	movs	r2, #3
 8000810:	4931      	ldr	r1, [pc, #196]	; (80008d8 <rx_handle+0x148>)
 8000812:	4832      	ldr	r0, [pc, #200]	; (80008dc <rx_handle+0x14c>)
 8000814:	f007 fbdc 	bl	8007fd0 <HAL_UART_Transmit>

			break;
 8000818:	e047      	b.n	80008aa <rx_handle+0x11a>

    case NUDGE: ; 
      HAL_ADC_Start(&hadc1);
 800081a:	4831      	ldr	r0, [pc, #196]	; (80008e0 <rx_handle+0x150>)
 800081c:	f001 fb6a 	bl	8001ef4 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000820:	f04f 31ff 	mov.w	r1, #4294967295
 8000824:	482e      	ldr	r0, [pc, #184]	; (80008e0 <rx_handle+0x150>)
 8000826:	f001 fc1f 	bl	8002068 <HAL_ADC_PollForConversion>
      nudge_temp = HAL_ADC_GetValue(&hadc1);
 800082a:	482d      	ldr	r0, [pc, #180]	; (80008e0 <rx_handle+0x150>)
 800082c:	f001 fcf4 	bl	8002218 <HAL_ADC_GetValue>
 8000830:	4603      	mov	r3, r0
 8000832:	b29a      	uxth	r2, r3
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <rx_handle+0x154>)
 8000836:	801a      	strh	r2, [r3, #0]
      char msg[10];
      sprintf(msg, "%u\n", nudge_temp);
 8000838:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <rx_handle+0x154>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4929      	ldr	r1, [pc, #164]	; (80008e8 <rx_handle+0x158>)
 8000842:	4618      	mov	r0, r3
 8000844:	f00a f8a0 	bl	800a988 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fd50 	bl	80002f0 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	1d39      	adds	r1, r7, #4
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
 800085a:	4820      	ldr	r0, [pc, #128]	; (80008dc <rx_handle+0x14c>)
 800085c:	f007 fbb8 	bl	8007fd0 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	2203      	movs	r2, #3
 8000866:	491c      	ldr	r1, [pc, #112]	; (80008d8 <rx_handle+0x148>)
 8000868:	481c      	ldr	r0, [pc, #112]	; (80008dc <rx_handle+0x14c>)
 800086a:	f007 fbb1 	bl	8007fd0 <HAL_UART_Transmit>

      break;
 800086e:	e01c      	b.n	80008aa <rx_handle+0x11a>

    case END: ;

      TIM5->CR1  |= TIM_CR1_UDIS;	// make sure update is disabled
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <rx_handle+0x144>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <rx_handle+0x144>)
 8000876:	f043 0302 	orr.w	r3, r3, #2
 800087a:	6013      	str	r3, [r2, #0]
      TIM5->DIER &=  ~TIM_DIER_UIE; 	// update interrupt disabled
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <rx_handle+0x144>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <rx_handle+0x144>)
 8000882:	f023 0301 	bic.w	r3, r3, #1
 8000886:	60d3      	str	r3, [r2, #12]
      TIM2->CR1 &= ~TIM_CR1_CEN;		// disable tim2
 8000888:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000892:	f023 0301 	bic.w	r3, r3, #1
 8000896:	6013      	str	r3, [r2, #0]
		  TIM5->CR1  &= ~TIM_CR1_CEN; 	// disable tim5 
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <rx_handle+0x144>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <rx_handle+0x144>)
 800089e:	f023 0301 	bic.w	r3, r3, #1
 80008a2:	6013      	str	r3, [r2, #0]
      plunge_done_flag = 1; 
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <rx_handle+0x15c>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]


//	char b[] = "done handling\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

    HAL_UART_Receive_IT(&huart3, received_character, 1);
 80008aa:	2201      	movs	r2, #1
 80008ac:	4910      	ldr	r1, [pc, #64]	; (80008f0 <rx_handle+0x160>)
 80008ae:	480b      	ldr	r0, [pc, #44]	; (80008dc <rx_handle+0x14c>)
 80008b0:	f007 fc1c 	bl	80080ec <HAL_UART_Receive_IT>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	24000000 	.word	0x24000000
 80008c0:	58021000 	.word	0x58021000
 80008c4:	2401d6d8 	.word	0x2401d6d8
 80008c8:	2401d6d4 	.word	0x2401d6d4
 80008cc:	24000214 	.word	0x24000214
 80008d0:	2400ec74 	.word	0x2400ec74
 80008d4:	40000c00 	.word	0x40000c00
 80008d8:	24000004 	.word	0x24000004
 80008dc:	24000180 	.word	0x24000180
 80008e0:	24000084 	.word	0x24000084
 80008e4:	2401d742 	.word	0x2401d742
 80008e8:	0800b2e8 	.word	0x0800b2e8
 80008ec:	2401d741 	.word	0x2401d741
 80008f0:	2401d740 	.word	0x2401d740

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fa:	f000 ff2d 	bl	8001758 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fe:	f000 f93d 	bl	8000b7c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000902:	f000 fb37 	bl	8000f74 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000906:	f000 fa27 	bl	8000d58 <MX_TIM2_Init>
  MX_USB_OTG_HS_USB_Init();
 800090a:	f000 fb2b 	bl	8000f64 <MX_USB_OTG_HS_USB_Init>
  MX_USART3_UART_Init();
 800090e:	f000 fadd 	bl	8000ecc <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000912:	f000 fa8d 	bl	8000e30 <MX_TIM5_Init>
  MX_ADC1_Init();
 8000916:	f000 f9a7 	bl	8000c68 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* configuring encoder counter */
  TIM2->CR1  &= ~TIM_CR1_CEN;
 800091a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000924:	f023 0301 	bic.w	r3, r3, #1
 8000928:	6013      	str	r3, [r2, #0]

  TIM2->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 800092a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800092e:	2264      	movs	r2, #100	; 0x64
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->ARR 	= 40000; 		// Counter will not roll over in entire plunge path, will be stopped and reset by usart interupt handler. 
 8000932:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000936:	f649 4240 	movw	r2, #40000	; 0x9c40
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 800093c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000940:	691b      	ldr	r3, [r3, #16]
 8000942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000946:	f023 0301 	bic.w	r3, r3, #1
 800094a:	6113      	str	r3, [r2, #16]
  TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 800094c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000956:	f023 0302 	bic.w	r3, r3, #2
 800095a:	6013      	str	r3, [r2, #0]
  TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 800095c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	60d3      	str	r3, [r2, #12]
  TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 800096c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097a:	6013      	str	r3, [r2, #0]

    /* configuring data logging timer */
  TIM5->CR1  &= ~TIM_CR1_CEN; 
 800097c:	4b76      	ldr	r3, [pc, #472]	; (8000b58 <main+0x264>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a75      	ldr	r2, [pc, #468]	; (8000b58 <main+0x264>)
 8000982:	f023 0301 	bic.w	r3, r3, #1
 8000986:	6013      	str	r3, [r2, #0]

  TIM5-> CNT  = 100;				//
 8000988:	4b73      	ldr	r3, [pc, #460]	; (8000b58 <main+0x264>)
 800098a:	2264      	movs	r2, #100	; 0x64
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 800098e:	4b72      	ldr	r3, [pc, #456]	; (8000b58 <main+0x264>)
 8000990:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000996:	4b70      	ldr	r3, [pc, #448]	; (8000b58 <main+0x264>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a6f      	ldr	r2, [pc, #444]	; (8000b58 <main+0x264>)
 800099c:	f023 0302 	bic.w	r3, r3, #2
 80009a0:	6013      	str	r3, [r2, #0]
  TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 80009a2:	4b6d      	ldr	r3, [pc, #436]	; (8000b58 <main+0x264>)
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	4a6c      	ldr	r2, [pc, #432]	; (8000b58 <main+0x264>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	60d3      	str	r3, [r2, #12]
  TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 80009ae:	4b6a      	ldr	r3, [pc, #424]	; (8000b58 <main+0x264>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a69      	ldr	r2, [pc, #420]	; (8000b58 <main+0x264>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6013      	str	r3, [r2, #0]
  TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 80009ba:	4b67      	ldr	r3, [pc, #412]	; (8000b58 <main+0x264>)
 80009bc:	691b      	ldr	r3, [r3, #16]
 80009be:	4a66      	ldr	r2, [pc, #408]	; (8000b58 <main+0x264>)
 80009c0:	f023 0301 	bic.w	r3, r3, #1
 80009c4:	6113      	str	r3, [r2, #16]


  HAL_UART_Receive_IT(&huart3, received_character, 1); // initialize interrupts
 80009c6:	2201      	movs	r2, #1
 80009c8:	4964      	ldr	r1, [pc, #400]	; (8000b5c <main+0x268>)
 80009ca:	4865      	ldr	r0, [pc, #404]	; (8000b60 <main+0x26c>)
 80009cc:	f007 fb8e 	bl	80080ec <HAL_UART_Receive_IT>

//  char msg[] = "program start \r\n";
//  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  // TIM2 for encoder tick counting
  NVIC_SetPriority(TIM2_IRQn, 1); // Braking is priority as long as dispense isnt happening
 80009d0:	2101      	movs	r1, #1
 80009d2:	201c      	movs	r0, #28
 80009d4:	f7ff fe80 	bl	80006d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80009d8:	201c      	movs	r0, #28
 80009da:	f7ff fe5f 	bl	800069c <__NVIC_EnableIRQ>

  // TIM5 for logkeeping and speed calculations and TIM4 setup
  NVIC_SetPriority(TIM5_IRQn, 2); // Log keeping should be interruptable
 80009de:	2102      	movs	r1, #2
 80009e0:	2032      	movs	r0, #50	; 0x32
 80009e2:	f7ff fe79 	bl	80006d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 80009e6:	2032      	movs	r0, #50	; 0x32
 80009e8:	f7ff fe58 	bl	800069c <__NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
	  if(plunge_done_flag) {
 80009ec:	4b5d      	ldr	r3, [pc, #372]	; (8000b64 <main+0x270>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0fb      	beq.n	80009ec <main+0xf8>
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295
 80009f8:	2203      	movs	r2, #3
 80009fa:	495b      	ldr	r1, [pc, #364]	; (8000b68 <main+0x274>)
 80009fc:	4858      	ldr	r0, [pc, #352]	; (8000b60 <main+0x26c>)
 80009fe:	f007 fae7 	bl	8007fd0 <HAL_UART_Transmit>
		  char msg[10];
		  for(int i=0 ; i<log_position; i++) {
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	e018      	b.n	8000a3a <main+0x146>
			  sprintf(msg, "%u\n", posLog[i]);
 8000a08:	4a58      	ldr	r2, [pc, #352]	; (8000b6c <main+0x278>)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a10:	461a      	mov	r2, r3
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4956      	ldr	r1, [pc, #344]	; (8000b70 <main+0x27c>)
 8000a16:	4618      	mov	r0, r3
 8000a18:	f009 ffb6 	bl	800a988 <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fc66 	bl	80002f0 <strlen>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	1d39      	adds	r1, r7, #4
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	484c      	ldr	r0, [pc, #304]	; (8000b60 <main+0x26c>)
 8000a30:	f007 face 	bl	8007fd0 <HAL_UART_Transmit>
		  for(int i=0 ; i<log_position; i++) {
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	3301      	adds	r3, #1
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	4b4d      	ldr	r3, [pc, #308]	; (8000b74 <main+0x280>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d3e1      	bcc.n	8000a08 <main+0x114>
		  }
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
 8000a48:	2203      	movs	r2, #3
 8000a4a:	4947      	ldr	r1, [pc, #284]	; (8000b68 <main+0x274>)
 8000a4c:	4844      	ldr	r0, [pc, #272]	; (8000b60 <main+0x26c>)
 8000a4e:	f007 fabf 	bl	8007fd0 <HAL_UART_Transmit>

      for(int i=0 ; i<log_position; i++) {
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	e018      	b.n	8000a8a <main+0x196>
			  sprintf(msg, "%u\n", thermoLog[i]);
 8000a58:	4a47      	ldr	r2, [pc, #284]	; (8000b78 <main+0x284>)
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a60:	461a      	mov	r2, r3
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	4942      	ldr	r1, [pc, #264]	; (8000b70 <main+0x27c>)
 8000a66:	4618      	mov	r0, r3
 8000a68:	f009 ff8e 	bl	800a988 <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fc3e 	bl	80002f0 <strlen>
 8000a74:	4603      	mov	r3, r0
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	1d39      	adds	r1, r7, #4
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	4838      	ldr	r0, [pc, #224]	; (8000b60 <main+0x26c>)
 8000a80:	f007 faa6 	bl	8007fd0 <HAL_UART_Transmit>
      for(int i=0 ; i<log_position; i++) {
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	3301      	adds	r3, #1
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <main+0x280>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d3e1      	bcc.n	8000a58 <main+0x164>
		  }

      //Prepare timers for the next plunge, do not enable yet 
      TIM2->CR1  &= ~TIM_CR1_CEN;
 8000a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a9e:	f023 0301 	bic.w	r3, r3, #1
 8000aa2:	6013      	str	r3, [r2, #0]

      TIM2->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aa8:	2264      	movs	r2, #100	; 0x64
 8000aaa:	625a      	str	r2, [r3, #36]	; 0x24
      TIM2->ARR 	= 40000; 		// Counter will not roll over in entire plunge path, will be stopped and reset by usart interupt handler. 
 8000aac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab0:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000ab4:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000ab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac0:	f023 0301 	bic.w	r3, r3, #1
 8000ac4:	6113      	str	r3, [r2, #16]
      TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000ac6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad0:	f023 0302 	bic.w	r3, r3, #2
 8000ad4:	6013      	str	r3, [r2, #0]
      TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000ad6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	60d3      	str	r3, [r2, #12]
      TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000ae6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af4:	6013      	str	r3, [r2, #0]

        /* configuring data logging timer */
      TIM5->CR1  &= ~TIM_CR1_CEN; 
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <main+0x264>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <main+0x264>)
 8000afc:	f023 0301 	bic.w	r3, r3, #1
 8000b00:	6013      	str	r3, [r2, #0]

      TIM5-> CNT  = 100;				
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <main+0x264>)
 8000b04:	2264      	movs	r2, #100	; 0x64
 8000b06:	625a      	str	r2, [r3, #36]	; 0x24
      TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <main+0x264>)
 8000b0a:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <main+0x264>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <main+0x264>)
 8000b16:	f023 0302 	bic.w	r3, r3, #2
 8000b1a:	6013      	str	r3, [r2, #0]
      TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <main+0x264>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <main+0x264>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	60d3      	str	r3, [r2, #12]
      TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <main+0x264>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <main+0x264>)
 8000b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b32:	6013      	str	r3, [r2, #0]
      TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <main+0x264>)
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <main+0x264>)
 8000b3a:	f023 0301 	bic.w	r3, r3, #1
 8000b3e:	6113      	str	r3, [r2, #16]

      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	2203      	movs	r2, #3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <main+0x274>)
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <main+0x26c>)
 8000b4a:	f007 fa41 	bl	8007fd0 <HAL_UART_Transmit>
		  plunge_done_flag = 0;
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <main+0x270>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
	  if(plunge_done_flag) {
 8000b54:	e74a      	b.n	80009ec <main+0xf8>
 8000b56:	bf00      	nop
 8000b58:	40000c00 	.word	0x40000c00
 8000b5c:	2401d740 	.word	0x2401d740
 8000b60:	24000180 	.word	0x24000180
 8000b64:	2401d741 	.word	0x2401d741
 8000b68:	24000004 	.word	0x24000004
 8000b6c:	24000214 	.word	0x24000214
 8000b70:	0800b2e8 	.word	0x0800b2e8
 8000b74:	2401d6d4 	.word	0x2401d6d4
 8000b78:	2400ec74 	.word	0x2400ec74

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b09c      	sub	sp, #112	; 0x70
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	224c      	movs	r2, #76	; 0x4c
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f009 ff1c 	bl	800a9c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2220      	movs	r2, #32
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f009 ff16 	bl	800a9c8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000b9c:	4b30      	ldr	r3, [pc, #192]	; (8000c60 <SystemClock_Config+0xe4>)
 8000b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ba6:	2004      	movs	r0, #4
 8000ba8:	f003 f874 	bl	8003c94 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bac:	2300      	movs	r3, #0
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	4b2c      	ldr	r3, [pc, #176]	; (8000c64 <SystemClock_Config+0xe8>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a2b      	ldr	r2, [pc, #172]	; (8000c64 <SystemClock_Config+0xe8>)
 8000bb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <SystemClock_Config+0xe8>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bc8:	bf00      	nop
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <SystemClock_Config+0xe8>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bd6:	d1f8      	bne.n	8000bca <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bd8:	2321      	movs	r3, #33	; 0x21
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bdc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000be2:	2301      	movs	r3, #1
 8000be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bea:	2302      	movs	r3, #2
 8000bec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000bf2:	2318      	movs	r3, #24
 8000bf4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c02:	230c      	movs	r3, #12
 8000c04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4618      	mov	r0, r3
 8000c14:	f003 f898 	bl	8003d48 <HAL_RCC_OscConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c1e:	f000 fac3 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c22:	233f      	movs	r3, #63	; 0x3f
 8000c24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c26:	2303      	movs	r3, #3
 8000c28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2102      	movs	r1, #2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 fcb0 	bl	80045ac <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000c52:	f000 faa9 	bl	80011a8 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3770      	adds	r7, #112	; 0x70
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	58024400 	.word	0x58024400
 8000c64:	58024800 	.word	0x58024800

08000c68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
 8000c88:	615a      	str	r2, [r3, #20]
 8000c8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c8c:	4b2f      	ldr	r3, [pc, #188]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000c8e:	4a30      	ldr	r2, [pc, #192]	; (8000d50 <MX_ADC1_Init+0xe8>)
 8000c90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c92:	4b2e      	ldr	r3, [pc, #184]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000c98:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c9e:	4b2b      	ldr	r3, [pc, #172]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca4:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000caa:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cb0:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000cb6:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc2:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cc8:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ce8:	4818      	ldr	r0, [pc, #96]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000cea:	f000 ffa9 	bl	8001c40 <HAL_ADC_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cf4:	f000 fa58 	bl	80011a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	4812      	ldr	r0, [pc, #72]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000d04:	f001 feec 	bl	8002ae0 <HAL_ADCEx_MultiModeConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000d0e:	f000 fa4b 	bl	80011a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <MX_ADC1_Init+0xec>)
 8000d14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d16:	2306      	movs	r3, #6
 8000d18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d1e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d22:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d24:	2304      	movs	r3, #4
 8000d26:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d30:	463b      	mov	r3, r7
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_ADC1_Init+0xe4>)
 8000d36:	f001 fa7d 	bl	8002234 <HAL_ADC_ConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000d40:	f000 fa32 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	24000084 	.word	0x24000084
 8000d50:	40022000 	.word	0x40022000
 8000d54:	14f00020 	.word	0x14f00020

08000d58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	; 0x30
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	2224      	movs	r2, #36	; 0x24
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f009 fe2e 	bl	800a9c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d76:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <MX_TIM2_Init+0xd4>)
 8000d78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d7e:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <MX_TIM2_Init+0xd4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d84:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <MX_TIM2_Init+0xd4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d8a:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <MX_TIM2_Init+0xd4>)
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d92:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <MX_TIM2_Init+0xd4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d98:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <MX_TIM2_Init+0xd4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000da6:	2301      	movs	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000db6:	2301      	movs	r3, #1
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4818      	ldr	r0, [pc, #96]	; (8000e2c <MX_TIM2_Init+0xd4>)
 8000dca:	f006 fbdd 	bl	8007588 <HAL_TIM_Encoder_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000dd4:	f000 f9e8 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	4619      	mov	r1, r3
 8000de4:	4811      	ldr	r0, [pc, #68]	; (8000e2c <MX_TIM2_Init+0xd4>)
 8000de6:	f006 fff7 	bl	8007dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000df0:	f000 f9da 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 8000df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	6013      	str	r3, [r2, #0]
	TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 8000e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e0e:	f023 0301 	bic.w	r3, r3, #1
 8000e12:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8000e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e1e:	f023 0301 	bic.w	r3, r3, #1
 8000e22:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3730      	adds	r7, #48	; 0x30
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	240000e8 	.word	0x240000e8

08000e30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <MX_TIM5_Init+0x94>)
 8000e50:	4a1d      	ldr	r2, [pc, #116]	; (8000ec8 <MX_TIM5_Init+0x98>)
 8000e52:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_TIM5_Init+0x94>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <MX_TIM5_Init+0x94>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_TIM5_Init+0x94>)
 8000e62:	f04f 32ff 	mov.w	r2, #4294967295
 8000e66:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_TIM5_Init+0x94>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <MX_TIM5_Init+0x94>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e74:	4813      	ldr	r0, [pc, #76]	; (8000ec4 <MX_TIM5_Init+0x94>)
 8000e76:	f006 fb2f 	bl	80074d8 <HAL_TIM_Base_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e80:	f000 f992 	bl	80011a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <MX_TIM5_Init+0x94>)
 8000e92:	f006 fd3f 	bl	8007914 <HAL_TIM_ConfigClockSource>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000e9c:	f000 f984 	bl	80011a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_TIM5_Init+0x94>)
 8000eae:	f006 ff93 	bl	8007dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000eb8:	f000 f976 	bl	80011a8 <Error_Handler>
//  TIM5->DIER |= TIM_DIER_UIE; // Enable update interrupt
//  TIM5->ARR = ENC_DMA_POLL_FREQ; // Timebase

  /* USER CODE END TIM5_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	24000134 	.word	0x24000134
 8000ec8:	40000c00 	.word	0x40000c00

08000ecc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <MX_USART3_UART_Init+0x90>)
 8000ed2:	4a23      	ldr	r2, [pc, #140]	; (8000f60 <MX_USART3_UART_Init+0x94>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ed6:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <MX_USART3_UART_Init+0x90>)
 8000ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000edc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <MX_USART3_UART_Init+0x90>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <MX_USART3_UART_Init+0x90>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_USART3_UART_Init+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_USART3_UART_Init+0x90>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_USART3_UART_Init+0x90>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_USART3_UART_Init+0x90>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_USART3_UART_Init+0x90>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_USART3_UART_Init+0x90>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_USART3_UART_Init+0x90>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f14:	4811      	ldr	r0, [pc, #68]	; (8000f5c <MX_USART3_UART_Init+0x90>)
 8000f16:	f007 f80b 	bl	8007f30 <HAL_UART_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f20:	f000 f942 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f24:	2100      	movs	r1, #0
 8000f26:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_USART3_UART_Init+0x90>)
 8000f28:	f009 fc63 	bl	800a7f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f32:	f000 f939 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f36:	2100      	movs	r1, #0
 8000f38:	4808      	ldr	r0, [pc, #32]	; (8000f5c <MX_USART3_UART_Init+0x90>)
 8000f3a:	f009 fc98 	bl	800a86e <HAL_UARTEx_SetRxFifoThreshold>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f44:	f000 f930 	bl	80011a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_USART3_UART_Init+0x90>)
 8000f4a:	f009 fc19 	bl	800a780 <HAL_UARTEx_DisableFifoMode>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f54:	f000 f928 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	24000180 	.word	0x24000180
 8000f60:	40004800 	.word	0x40004800

08000f64 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08e      	sub	sp, #56	; 0x38
 8000f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	4b80      	ldr	r3, [pc, #512]	; (800118c <MX_GPIO_Init+0x218>)
 8000f8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f90:	4a7e      	ldr	r2, [pc, #504]	; (800118c <MX_GPIO_Init+0x218>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f9a:	4b7c      	ldr	r3, [pc, #496]	; (800118c <MX_GPIO_Init+0x218>)
 8000f9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	623b      	str	r3, [r7, #32]
 8000fa6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fa8:	4b78      	ldr	r3, [pc, #480]	; (800118c <MX_GPIO_Init+0x218>)
 8000faa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fae:	4a77      	ldr	r2, [pc, #476]	; (800118c <MX_GPIO_Init+0x218>)
 8000fb0:	f043 0320 	orr.w	r3, r3, #32
 8000fb4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fb8:	4b74      	ldr	r3, [pc, #464]	; (800118c <MX_GPIO_Init+0x218>)
 8000fba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fbe:	f003 0320 	and.w	r3, r3, #32
 8000fc2:	61fb      	str	r3, [r7, #28]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc6:	4b71      	ldr	r3, [pc, #452]	; (800118c <MX_GPIO_Init+0x218>)
 8000fc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fcc:	4a6f      	ldr	r2, [pc, #444]	; (800118c <MX_GPIO_Init+0x218>)
 8000fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fd6:	4b6d      	ldr	r3, [pc, #436]	; (800118c <MX_GPIO_Init+0x218>)
 8000fd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe0:	61bb      	str	r3, [r7, #24]
 8000fe2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b69      	ldr	r3, [pc, #420]	; (800118c <MX_GPIO_Init+0x218>)
 8000fe6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fea:	4a68      	ldr	r2, [pc, #416]	; (800118c <MX_GPIO_Init+0x218>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ff4:	4b65      	ldr	r3, [pc, #404]	; (800118c <MX_GPIO_Init+0x218>)
 8000ff6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	4b62      	ldr	r3, [pc, #392]	; (800118c <MX_GPIO_Init+0x218>)
 8001004:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001008:	4a60      	ldr	r2, [pc, #384]	; (800118c <MX_GPIO_Init+0x218>)
 800100a:	f043 0302 	orr.w	r3, r3, #2
 800100e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001012:	4b5e      	ldr	r3, [pc, #376]	; (800118c <MX_GPIO_Init+0x218>)
 8001014:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001020:	4b5a      	ldr	r3, [pc, #360]	; (800118c <MX_GPIO_Init+0x218>)
 8001022:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001026:	4a59      	ldr	r2, [pc, #356]	; (800118c <MX_GPIO_Init+0x218>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001030:	4b56      	ldr	r3, [pc, #344]	; (800118c <MX_GPIO_Init+0x218>)
 8001032:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800103e:	4b53      	ldr	r3, [pc, #332]	; (800118c <MX_GPIO_Init+0x218>)
 8001040:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001044:	4a51      	ldr	r2, [pc, #324]	; (800118c <MX_GPIO_Init+0x218>)
 8001046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800104e:	4b4f      	ldr	r3, [pc, #316]	; (800118c <MX_GPIO_Init+0x218>)
 8001050:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800105c:	4b4b      	ldr	r3, [pc, #300]	; (800118c <MX_GPIO_Init+0x218>)
 800105e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001062:	4a4a      	ldr	r2, [pc, #296]	; (800118c <MX_GPIO_Init+0x218>)
 8001064:	f043 0310 	orr.w	r3, r3, #16
 8001068:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800106c:	4b47      	ldr	r3, [pc, #284]	; (800118c <MX_GPIO_Init+0x218>)
 800106e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001080:	4843      	ldr	r0, [pc, #268]	; (8001190 <MX_GPIO_Init+0x21c>)
 8001082:	f002 fded 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800108c:	4841      	ldr	r0, [pc, #260]	; (8001194 <MX_GPIO_Init+0x220>)
 800108e:	f002 fde7 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2102      	movs	r1, #2
 8001096:	4840      	ldr	r0, [pc, #256]	; (8001198 <MX_GPIO_Init+0x224>)
 8001098:	f002 fde2 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800109c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ae:	4619      	mov	r1, r3
 80010b0:	483a      	ldr	r0, [pc, #232]	; (800119c <MX_GPIO_Init+0x228>)
 80010b2:	f002 fc25 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80010b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010cc:	4619      	mov	r1, r3
 80010ce:	4830      	ldr	r0, [pc, #192]	; (8001190 <MX_GPIO_Init+0x21c>)
 80010d0:	f002 fc16 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80010d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	4829      	ldr	r0, [pc, #164]	; (8001194 <MX_GPIO_Init+0x220>)
 80010ee:	f002 fc07 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001104:	4619      	mov	r1, r3
 8001106:	4826      	ldr	r0, [pc, #152]	; (80011a0 <MX_GPIO_Init+0x22c>)
 8001108:	f002 fbfa 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800110c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001112:	2300      	movs	r3, #0
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111e:	4619      	mov	r1, r3
 8001120:	4820      	ldr	r0, [pc, #128]	; (80011a4 <MX_GPIO_Init+0x230>)
 8001122:	f002 fbed 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001138:	230a      	movs	r3, #10
 800113a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001140:	4619      	mov	r1, r3
 8001142:	4818      	ldr	r0, [pc, #96]	; (80011a4 <MX_GPIO_Init+0x230>)
 8001144:	f002 fbdc 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001148:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	4810      	ldr	r0, [pc, #64]	; (80011a4 <MX_GPIO_Init+0x230>)
 8001162:	f002 fbcd 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001166:	2302      	movs	r3, #2
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117a:	4619      	mov	r1, r3
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <MX_GPIO_Init+0x224>)
 800117e:	f002 fbbf 	bl	8003900 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001182:	bf00      	nop
 8001184:	3738      	adds	r7, #56	; 0x38
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	58024400 	.word	0x58024400
 8001190:	58021400 	.word	0x58021400
 8001194:	58020400 	.word	0x58020400
 8001198:	58021000 	.word	0x58021000
 800119c:	58020800 	.word	0x58020800
 80011a0:	58021800 	.word	0x58021800
 80011a4:	58020000 	.word	0x58020000

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <Error_Handler+0x8>
	...

080011b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_MspInit+0x30>)
 80011bc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011c0:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <HAL_MspInit+0x30>)
 80011c2:	f043 0302 	orr.w	r3, r3, #2
 80011c6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_MspInit+0x30>)
 80011cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	58024400 	.word	0x58024400

080011e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b0ba      	sub	sp, #232	; 0xe8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	22c0      	movs	r2, #192	; 0xc0
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f009 fbdd 	bl	800a9c8 <memset>
  if(hadc->Instance==ADC1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a2b      	ldr	r2, [pc, #172]	; (80012c0 <HAL_ADC_MspInit+0xd8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d14f      	bne.n	80012b8 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001218:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001224:	2301      	movs	r3, #1
 8001226:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001228:	2310      	movs	r3, #16
 800122a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 800122c:	2303      	movs	r3, #3
 800122e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001230:	2302      	movs	r3, #2
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001234:	2302      	movs	r3, #2
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001238:	23c0      	movs	r3, #192	; 0xc0
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800123c:	2300      	movs	r3, #0
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4618      	mov	r0, r3
 8001250:	f003 fd38 	bl	8004cc4 <HAL_RCCEx_PeriphCLKConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800125a:	f7ff ffa5 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_ADC_MspInit+0xdc>)
 8001260:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <HAL_ADC_MspInit+0xdc>)
 8001266:	f043 0320 	orr.w	r3, r3, #32
 800126a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_ADC_MspInit+0xdc>)
 8001270:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001274:	f003 0320 	and.w	r3, r3, #32
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <HAL_ADC_MspInit+0xdc>)
 800127e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001282:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <HAL_ADC_MspInit+0xdc>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800128c:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_ADC_MspInit+0xdc>)
 800128e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = THERMOCOUPLE_Pin;
 800129a:	2302      	movs	r3, #2
 800129c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a0:	2303      	movs	r3, #3
 80012a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(THERMOCOUPLE_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <HAL_ADC_MspInit+0xe0>)
 80012b4:	f002 fb24 	bl	8003900 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012b8:	bf00      	nop
 80012ba:	37e8      	adds	r7, #232	; 0xe8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40022000 	.word	0x40022000
 80012c4:	58024400 	.word	0x58024400
 80012c8:	58020400 	.word	0x58020400

080012cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ec:	d135      	bne.n	800135a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ee:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <HAL_TIM_Encoder_MspInit+0x98>)
 80012f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012f4:	4a1b      	ldr	r2, [pc, #108]	; (8001364 <HAL_TIM_Encoder_MspInit+0x98>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_TIM_Encoder_MspInit+0x98>)
 8001300:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_TIM_Encoder_MspInit+0x98>)
 800130e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001312:	4a14      	ldr	r2, [pc, #80]	; (8001364 <HAL_TIM_Encoder_MspInit+0x98>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_TIM_Encoder_MspInit+0x98>)
 800131e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PLUNGE_ENC_A_Pin|PLUNGE_ENC_B_Pin;
 800132a:	2303      	movs	r3, #3
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800133a:	2301      	movs	r3, #1
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4808      	ldr	r0, [pc, #32]	; (8001368 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001346:	f002 fadb 	bl	8003900 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	201c      	movs	r0, #28
 8001350:	f001 fd3d 	bl	8002dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001354:	201c      	movs	r0, #28
 8001356:	f001 fd54 	bl	8002e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	58024400 	.word	0x58024400
 8001368:	58020000 	.word	0x58020000

0800136c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <HAL_TIM_Base_MspInit+0x48>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d116      	bne.n	80013ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001380:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001384:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001386:	f043 0308 	orr.w	r3, r3, #8
 800138a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_TIM_Base_MspInit+0x4c>)
 8001390:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2100      	movs	r1, #0
 80013a0:	2032      	movs	r0, #50	; 0x32
 80013a2:	f001 fd14 	bl	8002dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80013a6:	2032      	movs	r0, #50	; 0x32
 80013a8:	f001 fd2b 	bl	8002e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40000c00 	.word	0x40000c00
 80013b8:	58024400 	.word	0x58024400

080013bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b0ba      	sub	sp, #232	; 0xe8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	22c0      	movs	r2, #192	; 0xc0
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f009 faf3 	bl	800a9c8 <memset>
  if(huart->Instance==USART3)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a2b      	ldr	r2, [pc, #172]	; (8001494 <HAL_UART_MspInit+0xd8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d14e      	bne.n	800148a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013ec:	f04f 0202 	mov.w	r2, #2
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4618      	mov	r0, r3
 8001404:	f003 fc5e 	bl	8004cc4 <HAL_RCCEx_PeriphCLKConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800140e:	f7ff fecb 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001412:	4b21      	ldr	r3, [pc, #132]	; (8001498 <HAL_UART_MspInit+0xdc>)
 8001414:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001418:	4a1f      	ldr	r2, [pc, #124]	; (8001498 <HAL_UART_MspInit+0xdc>)
 800141a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_UART_MspInit+0xdc>)
 8001424:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HAL_UART_MspInit+0xdc>)
 8001432:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001436:	4a18      	ldr	r2, [pc, #96]	; (8001498 <HAL_UART_MspInit+0xdc>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_UART_MspInit+0xdc>)
 8001442:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800144e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001468:	2307      	movs	r3, #7
 800146a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001472:	4619      	mov	r1, r3
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <HAL_UART_MspInit+0xe0>)
 8001476:	f002 fa43 	bl	8003900 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	2027      	movs	r0, #39	; 0x27
 8001480:	f001 fca5 	bl	8002dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001484:	2027      	movs	r0, #39	; 0x27
 8001486:	f001 fcbc 	bl	8002e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	37e8      	adds	r7, #232	; 0xe8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40004800 	.word	0x40004800
 8001498:	58024400 	.word	0x58024400
 800149c:	58020c00 	.word	0x58020c00

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <NMI_Handler+0x4>

080014a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ec:	f000 f9a6 	bl	800183c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <TIM2_IRQHandler+0x10>)
 80014fa:	f006 f8eb 	bl	80076d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	240000e8 	.word	0x240000e8

08001508 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <USART3_IRQHandler+0x10>)
 800150e:	f006 fe39 	bl	8008184 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	24000180 	.word	0x24000180

0800151c <TIM5_IRQHandler>:
/**
  * @brief This function handles TIM5 global interrupt.
  */

void TIM5_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* always do the logging portion */
  /* TODO: Convert this datalogging to DMA to speed it up. actually a priority I think it would have big performance gains*/
  log_position += 1; // increment number of data points taken
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <TIM5_IRQHandler+0x6c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	4a18      	ldr	r2, [pc, #96]	; (8001588 <TIM5_IRQHandler+0x6c>)
 8001528:	6013      	str	r3, [r2, #0]
  current_pos = TIM2->CNT;
 800152a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	4a16      	ldr	r2, [pc, #88]	; (800158c <TIM5_IRQHandler+0x70>)
 8001532:	6013      	str	r3, [r2, #0]
  HAL_ADC_Start(&hadc1);
 8001534:	4816      	ldr	r0, [pc, #88]	; (8001590 <TIM5_IRQHandler+0x74>)
 8001536:	f000 fcdd 	bl	8001ef4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800153a:	f04f 31ff 	mov.w	r1, #4294967295
 800153e:	4814      	ldr	r0, [pc, #80]	; (8001590 <TIM5_IRQHandler+0x74>)
 8001540:	f000 fd92 	bl	8002068 <HAL_ADC_PollForConversion>
  current_temp = HAL_ADC_GetValue(&hadc1);
 8001544:	4812      	ldr	r0, [pc, #72]	; (8001590 <TIM5_IRQHandler+0x74>)
 8001546:	f000 fe67 	bl	8002218 <HAL_ADC_GetValue>
 800154a:	4603      	mov	r3, r0
 800154c:	4a11      	ldr	r2, [pc, #68]	; (8001594 <TIM5_IRQHandler+0x78>)
 800154e:	6013      	str	r3, [r2, #0]
  posLog[log_position] = current_pos; // update log of positions
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <TIM5_IRQHandler+0x70>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <TIM5_IRQHandler+0x6c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	b291      	uxth	r1, r2
 800155a:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <TIM5_IRQHandler+0x7c>)
 800155c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  thermoLog[log_position] = current_temp; 
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <TIM5_IRQHandler+0x78>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <TIM5_IRQHandler+0x6c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	b291      	uxth	r1, r2
 800156a:	4a0c      	ldr	r2, [pc, #48]	; (800159c <TIM5_IRQHandler+0x80>)
 800156c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

  TIM5->SR &= ~TIM_SR_UIF; // Clear the TIM5 update flag
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <TIM5_IRQHandler+0x84>)
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <TIM5_IRQHandler+0x84>)
 8001576:	f023 0301 	bic.w	r3, r3, #1
 800157a:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <TIM5_IRQHandler+0x88>)
 800157e:	f006 f8a9 	bl	80076d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2401d6d4 	.word	0x2401d6d4
 800158c:	2401d744 	.word	0x2401d744
 8001590:	24000084 	.word	0x24000084
 8001594:	2401d748 	.word	0x2401d748
 8001598:	24000214 	.word	0x24000214
 800159c:	2400ec74 	.word	0x2400ec74
 80015a0:	40000c00 	.word	0x40000c00
 80015a4:	24000134 	.word	0x24000134

080015a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b0:	4a14      	ldr	r2, [pc, #80]	; (8001604 <_sbrk+0x5c>)
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <_sbrk+0x60>)
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <_sbrk+0x64>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <_sbrk+0x68>)
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d207      	bcs.n	80015e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d8:	f009 f9fe 	bl	800a9d8 <__errno>
 80015dc:	4603      	mov	r3, r0
 80015de:	220c      	movs	r2, #12
 80015e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e009      	b.n	80015fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <_sbrk+0x64>)
 80015f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	24100000 	.word	0x24100000
 8001608:	00000400 	.word	0x00000400
 800160c:	2401d74c 	.word	0x2401d74c
 8001610:	2401d8a0 	.word	0x2401d8a0

08001614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001618:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <SystemInit+0xd0>)
 800161a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161e:	4a31      	ldr	r2, [pc, #196]	; (80016e4 <SystemInit+0xd0>)
 8001620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001628:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <SystemInit+0xd4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 030f 	and.w	r3, r3, #15
 8001630:	2b02      	cmp	r3, #2
 8001632:	d807      	bhi.n	8001644 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001634:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <SystemInit+0xd4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f023 030f 	bic.w	r3, r3, #15
 800163c:	4a2a      	ldr	r2, [pc, #168]	; (80016e8 <SystemInit+0xd4>)
 800163e:	f043 0303 	orr.w	r3, r3, #3
 8001642:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <SystemInit+0xd8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a28      	ldr	r2, [pc, #160]	; (80016ec <SystemInit+0xd8>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001650:	4b26      	ldr	r3, [pc, #152]	; (80016ec <SystemInit+0xd8>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <SystemInit+0xd8>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4924      	ldr	r1, [pc, #144]	; (80016ec <SystemInit+0xd8>)
 800165c:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <SystemInit+0xdc>)
 800165e:	4013      	ands	r3, r2
 8001660:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <SystemInit+0xd4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800166e:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <SystemInit+0xd4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 030f 	bic.w	r3, r3, #15
 8001676:	4a1c      	ldr	r2, [pc, #112]	; (80016e8 <SystemInit+0xd4>)
 8001678:	f043 0303 	orr.w	r3, r3, #3
 800167c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800167e:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <SystemInit+0xd8>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <SystemInit+0xd8>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <SystemInit+0xd8>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <SystemInit+0xd8>)
 8001692:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <SystemInit+0xe0>)
 8001694:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <SystemInit+0xd8>)
 8001698:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <SystemInit+0xe4>)
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <SystemInit+0xd8>)
 800169e:	4a17      	ldr	r2, [pc, #92]	; (80016fc <SystemInit+0xe8>)
 80016a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <SystemInit+0xd8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016a8:	4b10      	ldr	r3, [pc, #64]	; (80016ec <SystemInit+0xd8>)
 80016aa:	4a14      	ldr	r2, [pc, #80]	; (80016fc <SystemInit+0xe8>)
 80016ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <SystemInit+0xd8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <SystemInit+0xd8>)
 80016b6:	4a11      	ldr	r2, [pc, #68]	; (80016fc <SystemInit+0xe8>)
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <SystemInit+0xd8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <SystemInit+0xd8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a09      	ldr	r2, [pc, #36]	; (80016ec <SystemInit+0xd8>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <SystemInit+0xd8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <SystemInit+0xec>)
 80016d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80016d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00
 80016e8:	52002000 	.word	0x52002000
 80016ec:	58024400 	.word	0x58024400
 80016f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80016f4:	02020200 	.word	0x02020200
 80016f8:	01ff0000 	.word	0x01ff0000
 80016fc:	01010280 	.word	0x01010280
 8001700:	52004000 	.word	0x52004000

08001704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800173c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001708:	f7ff ff84 	bl	8001614 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800170c:	480c      	ldr	r0, [pc, #48]	; (8001740 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800170e:	490d      	ldr	r1, [pc, #52]	; (8001744 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001710:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001714:	e002      	b.n	800171c <LoopCopyDataInit>

08001716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171a:	3304      	adds	r3, #4

0800171c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800171c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001720:	d3f9      	bcc.n	8001716 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001724:	4c0a      	ldr	r4, [pc, #40]	; (8001750 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001728:	e001      	b.n	800172e <LoopFillZerobss>

0800172a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800172c:	3204      	adds	r2, #4

0800172e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001730:	d3fb      	bcc.n	800172a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001732:	f009 f957 	bl	800a9e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001736:	f7ff f8dd 	bl	80008f4 <main>
  bx  lr
 800173a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800173c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001740:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001744:	24000068 	.word	0x24000068
  ldr r2, =_sidata
 8001748:	0800b368 	.word	0x0800b368
  ldr r2, =_sbss
 800174c:	24000068 	.word	0x24000068
  ldr r4, =_ebss
 8001750:	2401d89c 	.word	0x2401d89c

08001754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001754:	e7fe      	b.n	8001754 <ADC_IRQHandler>
	...

08001758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800175e:	2003      	movs	r0, #3
 8001760:	f001 fb2a 	bl	8002db8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001764:	f003 f8d8 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 8001768:	4602      	mov	r2, r0
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_Init+0x68>)
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	0a1b      	lsrs	r3, r3, #8
 8001770:	f003 030f 	and.w	r3, r3, #15
 8001774:	4913      	ldr	r1, [pc, #76]	; (80017c4 <HAL_Init+0x6c>)
 8001776:	5ccb      	ldrb	r3, [r1, r3]
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	fa22 f303 	lsr.w	r3, r2, r3
 8001780:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <HAL_Init+0x68>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <HAL_Init+0x6c>)
 800178c:	5cd3      	ldrb	r3, [r2, r3]
 800178e:	f003 031f 	and.w	r3, r3, #31
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
 8001798:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <HAL_Init+0x70>)
 800179a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800179c:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <HAL_Init+0x74>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017a2:	2000      	movs	r0, #0
 80017a4:	f000 f814 	bl	80017d0 <HAL_InitTick>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e002      	b.n	80017b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017b2:	f7ff fcff 	bl	80011b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	58024400 	.word	0x58024400
 80017c4:	0800b2ec 	.word	0x0800b2ec
 80017c8:	2400000c 	.word	0x2400000c
 80017cc:	24000008 	.word	0x24000008

080017d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_InitTick+0x60>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e021      	b.n	8001828 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_InitTick+0x64>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_InitTick+0x60>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f001 fb0f 	bl	8002e1e <HAL_SYSTICK_Config>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e00e      	b.n	8001828 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d80a      	bhi.n	8001826 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001810:	2200      	movs	r2, #0
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f001 fad9 	bl	8002dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800181c:	4a06      	ldr	r2, [pc, #24]	; (8001838 <HAL_InitTick+0x68>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	e000      	b.n	8001828 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	24000014 	.word	0x24000014
 8001834:	24000008 	.word	0x24000008
 8001838:	24000010 	.word	0x24000010

0800183c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x20>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x24>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_IncTick+0x24>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	24000014 	.word	0x24000014
 8001860:	2401d750 	.word	0x2401d750

08001864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return uwTick;
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <HAL_GetTick+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	2401d750 	.word	0x2401d750

0800187c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	609a      	str	r2, [r3, #8]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	609a      	str	r2, [r3, #8]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
 80018f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3360      	adds	r3, #96	; 0x60
 80018f6:	461a      	mov	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	430b      	orrs	r3, r1
 8001912:	431a      	orrs	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001918:	bf00      	nop
 800191a:	371c      	adds	r7, #28
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	f003 031f 	and.w	r3, r3, #31
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	431a      	orrs	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	611a      	str	r2, [r3, #16]
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001956:	b480      	push	{r7}
 8001958:	b087      	sub	sp, #28
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	3360      	adds	r3, #96	; 0x60
 8001966:	461a      	mov	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	431a      	orrs	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	601a      	str	r2, [r3, #0]
  }
}
 8001980:	bf00      	nop
 8001982:	371c      	adds	r7, #28
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b087      	sub	sp, #28
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3330      	adds	r3, #48	; 0x30
 80019c2:	461a      	mov	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	0a1b      	lsrs	r3, r3, #8
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	4413      	add	r3, r2
 80019d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	211f      	movs	r1, #31
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	401a      	ands	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	0e9b      	lsrs	r3, r3, #26
 80019ea:	f003 011f 	and.w	r1, r3, #31
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	431a      	orrs	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019fe:	bf00      	nop
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b087      	sub	sp, #28
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	3314      	adds	r3, #20
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	0e5b      	lsrs	r3, r3, #25
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	4413      	add	r3, r2
 8001a28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	0d1b      	lsrs	r3, r3, #20
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2107      	movs	r1, #7
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	401a      	ands	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	0d1b      	lsrs	r3, r3, #20
 8001a44:	f003 031f 	and.w	r3, r3, #31
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a54:	bf00      	nop
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f003 0318 	and.w	r3, r3, #24
 8001a82:	4908      	ldr	r1, [pc, #32]	; (8001aa4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a84:	40d9      	lsrs	r1, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	400b      	ands	r3, r1
 8001a8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	000fffff 	.word	0x000fffff

08001aa8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 031f 	and.w	r3, r3, #31
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6093      	str	r3, [r2, #8]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	5fffffc0 	.word	0x5fffffc0

08001b04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b18:	d101      	bne.n	8001b1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	6fffffc0 	.word	0x6fffffc0

08001b54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b68:	d101      	bne.n	8001b6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <LL_ADC_Enable+0x24>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	f043 0201 	orr.w	r2, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	7fffffc0 	.word	0x7fffffc0

08001ba4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <LL_ADC_IsEnabled+0x18>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <LL_ADC_IsEnabled+0x1a>
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <LL_ADC_REG_StartConversion+0x24>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	f043 0204 	orr.w	r2, r3, #4
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	7fffffc0 	.word	0x7fffffc0

08001bf4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d101      	bne.n	8001c0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d101      	bne.n	8001c32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e138      	b.n	8001ecc <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d109      	bne.n	8001c7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff fabd 	bl	80011e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff3f 	bl	8001b04 <LL_ADC_IsDeepPowerDownEnabled>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff25 	bl	8001ae0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ff5a 	bl	8001b54 <LL_ADC_IsInternalRegulatorEnabled>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d114      	bne.n	8001cd0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff3e 	bl	8001b2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cb0:	4b88      	ldr	r3, [pc, #544]	; (8001ed4 <HAL_ADC_Init+0x294>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	099b      	lsrs	r3, r3, #6
 8001cb6:	4a88      	ldr	r2, [pc, #544]	; (8001ed8 <HAL_ADC_Init+0x298>)
 8001cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbc:	099b      	lsrs	r3, r3, #6
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cc2:	e002      	b.n	8001cca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f9      	bne.n	8001cc4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff3d 	bl	8001b54 <LL_ADC_IsInternalRegulatorEnabled>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10d      	bne.n	8001cfc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce4:	f043 0210 	orr.w	r2, r3, #16
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	f043 0201 	orr.w	r2, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff77 	bl	8001bf4 <LL_ADC_REG_IsConversionOngoing>
 8001d06:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f040 80d2 	bne.w	8001eba <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f040 80ce 	bne.w	8001eba <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d22:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d26:	f043 0202 	orr.w	r2, r3, #2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ff36 	bl	8001ba4 <LL_ADC_IsEnabled>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d110      	bne.n	8001d60 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d3e:	4867      	ldr	r0, [pc, #412]	; (8001edc <HAL_ADC_Init+0x29c>)
 8001d40:	f7ff ff30 	bl	8001ba4 <LL_ADC_IsEnabled>
 8001d44:	4604      	mov	r4, r0
 8001d46:	4866      	ldr	r0, [pc, #408]	; (8001ee0 <HAL_ADC_Init+0x2a0>)
 8001d48:	f7ff ff2c 	bl	8001ba4 <LL_ADC_IsEnabled>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4323      	orrs	r3, r4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d105      	bne.n	8001d60 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4862      	ldr	r0, [pc, #392]	; (8001ee4 <HAL_ADC_Init+0x2a4>)
 8001d5c:	f7ff fd8e 	bl	800187c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7d5b      	ldrb	r3, [r3, #21]
 8001d64:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d6a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001d70:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7f1b      	ldrb	r3, [r3, #28]
 8001d76:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7f1b      	ldrb	r3, [r3, #28]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d106      	bne.n	8001d92 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	045b      	lsls	r3, r3, #17
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d009      	beq.n	8001dae <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	4b4c      	ldr	r3, [pc, #304]	; (8001ee8 <HAL_ADC_Init+0x2a8>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	69b9      	ldr	r1, [r7, #24]
 8001dbe:	430b      	orrs	r3, r1
 8001dc0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ff14 	bl	8001bf4 <LL_ADC_REG_IsConversionOngoing>
 8001dcc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff21 	bl	8001c1a <LL_ADC_INJ_IsConversionOngoing>
 8001dd8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d14a      	bne.n	8001e76 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d147      	bne.n	8001e76 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7d1b      	ldrb	r3, [r3, #20]
 8001dea:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	4b3c      	ldr	r3, [pc, #240]	; (8001eec <HAL_ADC_Init+0x2ac>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	69b9      	ldr	r1, [r7, #24]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d11b      	bne.n	8001e4a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	4b34      	ldr	r3, [pc, #208]	; (8001ef0 <HAL_ADC_Init+0x2b0>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e26:	3a01      	subs	r2, #1
 8001e28:	0411      	lsls	r1, r2, #16
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e2e:	4311      	orrs	r1, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e34:	4311      	orrs	r1, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	611a      	str	r2, [r3, #16]
 8001e48:	e007      	b.n	8001e5a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0201 	bic.w	r2, r2, #1
 8001e58:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fd41 	bl	80028f8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d10c      	bne.n	8001e98 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	f023 010f 	bic.w	r1, r3, #15
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	1e5a      	subs	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30
 8001e96:	e007      	b.n	8001ea8 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 020f 	bic.w	r2, r2, #15
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	f023 0303 	bic.w	r3, r3, #3
 8001eb0:	f043 0201 	orr.w	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	655a      	str	r2, [r3, #84]	; 0x54
 8001eb8:	e007      	b.n	8001eca <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebe:	f043 0210 	orr.w	r2, r3, #16
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eca:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3724      	adds	r7, #36	; 0x24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd90      	pop	{r4, r7, pc}
 8001ed4:	24000008 	.word	0x24000008
 8001ed8:	053e2d63 	.word	0x053e2d63
 8001edc:	40022000 	.word	0x40022000
 8001ee0:	40022100 	.word	0x40022100
 8001ee4:	40022300 	.word	0x40022300
 8001ee8:	fff0c003 	.word	0xfff0c003
 8001eec:	ffffbffc 	.word	0xffffbffc
 8001ef0:	fc00f81e 	.word	0xfc00f81e

08001ef4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001efc:	4856      	ldr	r0, [pc, #344]	; (8002058 <HAL_ADC_Start+0x164>)
 8001efe:	f7ff fdd3 	bl	8001aa8 <LL_ADC_GetMultimode>
 8001f02:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fe73 	bl	8001bf4 <LL_ADC_REG_IsConversionOngoing>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f040 809a 	bne.w	800204a <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_ADC_Start+0x30>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e095      	b.n	8002050 <HAL_ADC_Start+0x15c>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fc67 	bl	8002800 <ADC_Enable>
 8001f32:	4603      	mov	r3, r0
 8001f34:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f36:	7dfb      	ldrb	r3, [r7, #23]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f040 8081 	bne.w	8002040 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f42:	4b46      	ldr	r3, [pc, #280]	; (800205c <HAL_ADC_Start+0x168>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a43      	ldr	r2, [pc, #268]	; (8002060 <HAL_ADC_Start+0x16c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d002      	beq.n	8001f5e <HAL_ADC_Start+0x6a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	e000      	b.n	8001f60 <HAL_ADC_Start+0x6c>
 8001f5e:	4b41      	ldr	r3, [pc, #260]	; (8002064 <HAL_ADC_Start+0x170>)
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d002      	beq.n	8001f6e <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f86:	d106      	bne.n	8001f96 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	f023 0206 	bic.w	r2, r3, #6
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	659a      	str	r2, [r3, #88]	; 0x58
 8001f94:	e002      	b.n	8001f9c <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	221c      	movs	r2, #28
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2b      	ldr	r2, [pc, #172]	; (8002060 <HAL_ADC_Start+0x16c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d002      	beq.n	8001fbc <HAL_ADC_Start+0xc8>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	e000      	b.n	8001fbe <HAL_ADC_Start+0xca>
 8001fbc:	4b29      	ldr	r3, [pc, #164]	; (8002064 <HAL_ADC_Start+0x170>)
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d008      	beq.n	8001fd8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b05      	cmp	r3, #5
 8001fd0:	d002      	beq.n	8001fd8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	2b09      	cmp	r3, #9
 8001fd6:	d114      	bne.n	8002002 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d007      	beq.n	8001ff6 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fde6 	bl	8001bcc <LL_ADC_REG_StartConversion>
 8002000:	e025      	b.n	800204e <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a13      	ldr	r2, [pc, #76]	; (8002060 <HAL_ADC_Start+0x16c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d002      	beq.n	800201e <HAL_ADC_Start+0x12a>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	e000      	b.n	8002020 <HAL_ADC_Start+0x12c>
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_ADC_Start+0x170>)
 8002020:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00f      	beq.n	800204e <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002032:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002036:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	655a      	str	r2, [r3, #84]	; 0x54
 800203e:	e006      	b.n	800204e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002048:	e001      	b.n	800204e <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800204a:	2302      	movs	r3, #2
 800204c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800204e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40022300 	.word	0x40022300
 800205c:	fffff0fe 	.word	0xfffff0fe
 8002060:	40022100 	.word	0x40022100
 8002064:	40022000 	.word	0x40022000

08002068 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002072:	4866      	ldr	r0, [pc, #408]	; (800220c <HAL_ADC_PollForConversion+0x1a4>)
 8002074:	f7ff fd18 	bl	8001aa8 <LL_ADC_GetMultimode>
 8002078:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b08      	cmp	r3, #8
 8002080:	d102      	bne.n	8002088 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002082:	2308      	movs	r3, #8
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	e02a      	b.n	80020de <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b05      	cmp	r3, #5
 8002092:	d002      	beq.n	800209a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b09      	cmp	r3, #9
 8002098:	d111      	bne.n	80020be <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d007      	beq.n	80020b8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ac:	f043 0220 	orr.w	r2, r3, #32
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0a4      	b.n	8002202 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80020b8:	2304      	movs	r3, #4
 80020ba:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80020bc:	e00f      	b.n	80020de <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80020be:	4853      	ldr	r0, [pc, #332]	; (800220c <HAL_ADC_PollForConversion+0x1a4>)
 80020c0:	f7ff fd00 	bl	8001ac4 <LL_ADC_GetMultiDMATransfer>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d007      	beq.n	80020da <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	f043 0220 	orr.w	r2, r3, #32
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e093      	b.n	8002202 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80020da:	2304      	movs	r3, #4
 80020dc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80020de:	f7ff fbc1 	bl	8001864 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020e4:	e021      	b.n	800212a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d01d      	beq.n	800212a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80020ee:	f7ff fbb9 	bl	8001864 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d302      	bcc.n	8002104 <HAL_ADC_PollForConversion+0x9c>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d112      	bne.n	800212a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10b      	bne.n	800212a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002116:	f043 0204 	orr.w	r2, r3, #4
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e06b      	b.n	8002202 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0d6      	beq.n	80020e6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fc1f 	bl	800198c <LL_ADC_REG_IsTriggerSourceSWStart>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01c      	beq.n	800218e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7d5b      	ldrb	r3, [r3, #21]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d118      	bne.n	800218e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b08      	cmp	r3, #8
 8002168:	d111      	bne.n	800218e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d105      	bne.n	800218e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	f043 0201 	orr.w	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1f      	ldr	r2, [pc, #124]	; (8002210 <HAL_ADC_PollForConversion+0x1a8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d002      	beq.n	800219e <HAL_ADC_PollForConversion+0x136>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	e000      	b.n	80021a0 <HAL_ADC_PollForConversion+0x138>
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_ADC_PollForConversion+0x1ac>)
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d008      	beq.n	80021ba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d002      	beq.n	80021ba <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	2b09      	cmp	r3, #9
 80021b8:	d104      	bne.n	80021c4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	e00c      	b.n	80021de <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a11      	ldr	r2, [pc, #68]	; (8002210 <HAL_ADC_PollForConversion+0x1a8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d002      	beq.n	80021d4 <HAL_ADC_PollForConversion+0x16c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	e000      	b.n	80021d6 <HAL_ADC_PollForConversion+0x16e>
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <HAL_ADC_PollForConversion+0x1ac>)
 80021d6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d104      	bne.n	80021ee <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2208      	movs	r2, #8
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	e008      	b.n	8002200 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d103      	bne.n	8002200 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	220c      	movs	r2, #12
 80021fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40022300 	.word	0x40022300
 8002210:	40022100 	.word	0x40022100
 8002214:	40022000 	.word	0x40022000

08002218 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b0a1      	sub	sp, #132	; 0x84
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a9a      	ldr	r2, [pc, #616]	; (80024b8 <HAL_ADC_ConfigChannel+0x284>)
 800224e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_ADC_ConfigChannel+0x2a>
 800225a:	2302      	movs	r3, #2
 800225c:	e2bc      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x5a4>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fcc2 	bl	8001bf4 <LL_ADC_REG_IsConversionOngoing>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	f040 82a1 	bne.w	80027ba <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002280:	2b00      	cmp	r3, #0
 8002282:	d108      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x62>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	2201      	movs	r2, #1
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	e016      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x90>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022a6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80022ae:	2320      	movs	r3, #32
 80022b0:	e003      	b.n	80022ba <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80022b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	2201      	movs	r2, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	69d1      	ldr	r1, [r2, #28]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	430b      	orrs	r3, r1
 80022d0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	6859      	ldr	r1, [r3, #4]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	f7ff fb67 	bl	80019b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fc83 	bl	8001bf4 <LL_ADC_REG_IsConversionOngoing>
 80022ee:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fc90 	bl	8001c1a <LL_ADC_INJ_IsConversionOngoing>
 80022fa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 80a0 	bne.w	8002444 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002306:	2b00      	cmp	r3, #0
 8002308:	f040 809c 	bne.w	8002444 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6819      	ldr	r1, [r3, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	461a      	mov	r2, r3
 800231a:	f7ff fb76 	bl	8001a0a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10b      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x110>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	e00a      	b.n	800235a <HAL_ADC_ConfigChannel+0x126>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b04      	cmp	r3, #4
 8002362:	d027      	beq.n	80023b4 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6919      	ldr	r1, [r3, #16]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002372:	f7ff fab7 	bl	80018e4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6919      	ldr	r1, [r3, #16]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	7e5b      	ldrb	r3, [r3, #25]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d102      	bne.n	800238c <HAL_ADC_ConfigChannel+0x158>
 8002386:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800238a:	e000      	b.n	800238e <HAL_ADC_ConfigChannel+0x15a>
 800238c:	2300      	movs	r3, #0
 800238e:	461a      	mov	r2, r3
 8002390:	f7ff fae1 	bl	8001956 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6919      	ldr	r1, [r3, #16]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	7e1b      	ldrb	r3, [r3, #24]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d102      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x176>
 80023a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023a8:	e000      	b.n	80023ac <HAL_ADC_ConfigChannel+0x178>
 80023aa:	2300      	movs	r3, #0
 80023ac:	461a      	mov	r2, r3
 80023ae:	f7ff fab9 	bl	8001924 <LL_ADC_SetDataRightShift>
 80023b2:	e047      	b.n	8002444 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	069b      	lsls	r3, r3, #26
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d107      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023d6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	069b      	lsls	r3, r3, #26
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d107      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023fa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002402:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	069b      	lsls	r3, r3, #26
 800240c:	429a      	cmp	r2, r3
 800240e:	d107      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800241e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002426:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	069b      	lsls	r3, r3, #26
 8002430:	429a      	cmp	r2, r3
 8002432:	d107      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002442:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fbab 	bl	8001ba4 <LL_ADC_IsEnabled>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	f040 81bb 	bne.w	80027cc <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6819      	ldr	r1, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	461a      	mov	r2, r3
 8002464:	f7ff fafc 	bl	8001a60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <HAL_ADC_ConfigChannel+0x284>)
 800246e:	4293      	cmp	r3, r2
 8002470:	f040 8130 	bne.w	80026d4 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10b      	bne.n	800249c <HAL_ADC_ConfigChannel+0x268>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	3301      	adds	r3, #1
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2b09      	cmp	r3, #9
 8002492:	bf94      	ite	ls
 8002494:	2301      	movls	r3, #1
 8002496:	2300      	movhi	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	e01b      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x2a0>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80024aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80024ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d103      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80024b4:	2320      	movs	r3, #32
 80024b6:	e005      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x290>
 80024b8:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80024bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	3301      	adds	r3, #1
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	2b09      	cmp	r3, #9
 80024cc:	bf94      	ite	ls
 80024ce:	2301      	movls	r3, #1
 80024d0:	2300      	movhi	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d079      	beq.n	80025cc <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d107      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x2c0>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	3301      	adds	r3, #1
 80024ec:	069b      	lsls	r3, r3, #26
 80024ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024f2:	e015      	b.n	8002520 <HAL_ADC_ConfigChannel+0x2ec>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002504:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800250c:	2320      	movs	r3, #32
 800250e:	e003      	b.n	8002518 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	3301      	adds	r3, #1
 800251a:	069b      	lsls	r3, r3, #26
 800251c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x30c>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	3301      	adds	r3, #1
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	2101      	movs	r1, #1
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	e017      	b.n	8002570 <HAL_ADC_ConfigChannel+0x33c>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800254e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002550:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002558:	2320      	movs	r3, #32
 800255a:	e003      	b.n	8002564 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 800255c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	3301      	adds	r3, #1
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	2101      	movs	r1, #1
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	ea42 0103 	orr.w	r1, r2, r3
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10a      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x362>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0e9b      	lsrs	r3, r3, #26
 8002586:	3301      	adds	r3, #1
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	051b      	lsls	r3, r3, #20
 8002594:	e018      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x394>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80025a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80025ae:	2320      	movs	r3, #32
 80025b0:	e003      	b.n	80025ba <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 80025b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b4:	fab3 f383 	clz	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c8:	430b      	orrs	r3, r1
 80025ca:	e07e      	b.n	80026ca <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d107      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x3b4>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	3301      	adds	r3, #1
 80025e0:	069b      	lsls	r3, r3, #26
 80025e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025e6:	e015      	b.n	8002614 <HAL_ADC_ConfigChannel+0x3e0>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e003      	b.n	800260c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	3301      	adds	r3, #1
 800260e:	069b      	lsls	r3, r3, #26
 8002610:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800261c:	2b00      	cmp	r3, #0
 800261e:	d109      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x400>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	0e9b      	lsrs	r3, r3, #26
 8002626:	3301      	adds	r3, #1
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	2101      	movs	r1, #1
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	e017      	b.n	8002664 <HAL_ADC_ConfigChannel+0x430>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	61bb      	str	r3, [r7, #24]
  return result;
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 800264c:	2320      	movs	r3, #32
 800264e:	e003      	b.n	8002658 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	3301      	adds	r3, #1
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	2101      	movs	r1, #1
 8002660:	fa01 f303 	lsl.w	r3, r1, r3
 8002664:	ea42 0103 	orr.w	r1, r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10d      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x45c>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	3301      	adds	r3, #1
 800267c:	f003 021f 	and.w	r2, r3, #31
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	3b1e      	subs	r3, #30
 8002688:	051b      	lsls	r3, r3, #20
 800268a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800268e:	e01b      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x494>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	60fb      	str	r3, [r7, #12]
  return result;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80026a8:	2320      	movs	r3, #32
 80026aa:	e003      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	f003 021f 	and.w	r2, r3, #31
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	3b1e      	subs	r3, #30
 80026c2:	051b      	lsls	r3, r3, #20
 80026c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c8:	430b      	orrs	r3, r1
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	6892      	ldr	r2, [r2, #8]
 80026ce:	4619      	mov	r1, r3
 80026d0:	f7ff f99b 	bl	8001a0a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	da77      	bge.n	80027cc <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026dc:	4840      	ldr	r0, [pc, #256]	; (80027e0 <HAL_ADC_ConfigChannel+0x5ac>)
 80026de:	f7ff f8f3 	bl	80018c8 <LL_ADC_GetCommonPathInternalCh>
 80026e2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026e4:	483f      	ldr	r0, [pc, #252]	; (80027e4 <HAL_ADC_ConfigChannel+0x5b0>)
 80026e6:	f7ff fa5d 	bl	8001ba4 <LL_ADC_IsEnabled>
 80026ea:	4604      	mov	r4, r0
 80026ec:	483e      	ldr	r0, [pc, #248]	; (80027e8 <HAL_ADC_ConfigChannel+0x5b4>)
 80026ee:	f7ff fa59 	bl	8001ba4 <LL_ADC_IsEnabled>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4323      	orrs	r3, r4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d155      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a3b      	ldr	r2, [pc, #236]	; (80027ec <HAL_ADC_ConfigChannel+0x5b8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d122      	bne.n	800274a <HAL_ADC_ConfigChannel+0x516>
 8002704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002706:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d11d      	bne.n	800274a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a35      	ldr	r2, [pc, #212]	; (80027e8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d159      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800271e:	4619      	mov	r1, r3
 8002720:	482f      	ldr	r0, [pc, #188]	; (80027e0 <HAL_ADC_ConfigChannel+0x5ac>)
 8002722:	f7ff f8be 	bl	80018a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002726:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <HAL_ADC_ConfigChannel+0x5bc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	099b      	lsrs	r3, r3, #6
 800272c:	4a31      	ldr	r2, [pc, #196]	; (80027f4 <HAL_ADC_ConfigChannel+0x5c0>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	099b      	lsrs	r3, r3, #6
 8002734:	3301      	adds	r3, #1
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800273a:	e002      	b.n	8002742 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	3b01      	subs	r3, #1
 8002740:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f9      	bne.n	800273c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002748:	e040      	b.n	80027cc <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a2a      	ldr	r2, [pc, #168]	; (80027f8 <HAL_ADC_ConfigChannel+0x5c4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d111      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x544>
 8002754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10c      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a21      	ldr	r2, [pc, #132]	; (80027e8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d131      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800276e:	4619      	mov	r1, r3
 8002770:	481b      	ldr	r0, [pc, #108]	; (80027e0 <HAL_ADC_ConfigChannel+0x5ac>)
 8002772:	f7ff f896 	bl	80018a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002776:	e029      	b.n	80027cc <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <HAL_ADC_ConfigChannel+0x5c8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d124      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x598>
 8002782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d11f      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a15      	ldr	r2, [pc, #84]	; (80027e8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d11a      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002798:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800279c:	4619      	mov	r1, r3
 800279e:	4810      	ldr	r0, [pc, #64]	; (80027e0 <HAL_ADC_ConfigChannel+0x5ac>)
 80027a0:	f7ff f87f 	bl	80018a2 <LL_ADC_SetCommonPathInternalCh>
 80027a4:	e012      	b.n	80027cc <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	f043 0220 	orr.w	r2, r3, #32
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80027b8:	e008      	b.n	80027cc <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	f043 0220 	orr.w	r2, r3, #32
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027d4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3784      	adds	r7, #132	; 0x84
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd90      	pop	{r4, r7, pc}
 80027e0:	40022300 	.word	0x40022300
 80027e4:	40022000 	.word	0x40022000
 80027e8:	40022100 	.word	0x40022100
 80027ec:	cb840000 	.word	0xcb840000
 80027f0:	24000008 	.word	0x24000008
 80027f4:	053e2d63 	.word	0x053e2d63
 80027f8:	bac04000 	.word	0xbac04000
 80027fc:	cfb80000 	.word	0xcfb80000

08002800 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff f9c9 	bl	8001ba4 <LL_ADC_IsEnabled>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d161      	bne.n	80028dc <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	4b32      	ldr	r3, [pc, #200]	; (80028e8 <ADC_Enable+0xe8>)
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00d      	beq.n	8002842 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	f043 0210 	orr.w	r2, r3, #16
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	f043 0201 	orr.w	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e04d      	b.n	80028de <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff f998 	bl	8001b7c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800284c:	f7ff f80a 	bl	8001864 <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002852:	4826      	ldr	r0, [pc, #152]	; (80028ec <ADC_Enable+0xec>)
 8002854:	f7ff f928 	bl	8001aa8 <LL_ADC_GetMultimode>
 8002858:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a24      	ldr	r2, [pc, #144]	; (80028f0 <ADC_Enable+0xf0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d002      	beq.n	800286a <ADC_Enable+0x6a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	e000      	b.n	800286c <ADC_Enable+0x6c>
 800286a:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <ADC_Enable+0xf4>)
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	4293      	cmp	r3, r2
 8002872:	d02c      	beq.n	80028ce <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d130      	bne.n	80028dc <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800287a:	e028      	b.n	80028ce <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff f98f 	bl	8001ba4 <LL_ADC_IsEnabled>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d104      	bne.n	8002896 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff f973 	bl	8001b7c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002896:	f7fe ffe5 	bl	8001864 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d914      	bls.n	80028ce <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d00d      	beq.n	80028ce <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	f043 0210 	orr.w	r2, r3, #16
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e007      	b.n	80028de <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d1cf      	bne.n	800287c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	8000003f 	.word	0x8000003f
 80028ec:	40022300 	.word	0x40022300
 80028f0:	40022100 	.word	0x40022100
 80028f4:	40022000 	.word	0x40022000

080028f8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002900:	4b60      	ldr	r3, [pc, #384]	; (8002a84 <ADC_ConfigureBoostMode+0x18c>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01c      	beq.n	8002946 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800290c:	f002 f97e 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8002910:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800291a:	d010      	beq.n	800293e <ADC_ConfigureBoostMode+0x46>
 800291c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002920:	d873      	bhi.n	8002a0a <ADC_ConfigureBoostMode+0x112>
 8002922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002926:	d002      	beq.n	800292e <ADC_ConfigureBoostMode+0x36>
 8002928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800292c:	d16d      	bne.n	8002a0a <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	0c1b      	lsrs	r3, r3, #16
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	fbb2 f3f3 	udiv	r3, r2, r3
 800293a:	60fb      	str	r3, [r7, #12]
        break;
 800293c:	e068      	b.n	8002a10 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	089b      	lsrs	r3, r3, #2
 8002942:	60fb      	str	r3, [r7, #12]
        break;
 8002944:	e064      	b.n	8002a10 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002946:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800294a:	f04f 0100 	mov.w	r1, #0
 800294e:	f003 fb77 	bl	8006040 <HAL_RCCEx_GetPeriphCLKFreq>
 8002952:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800295c:	d051      	beq.n	8002a02 <ADC_ConfigureBoostMode+0x10a>
 800295e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002962:	d854      	bhi.n	8002a0e <ADC_ConfigureBoostMode+0x116>
 8002964:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002968:	d047      	beq.n	80029fa <ADC_ConfigureBoostMode+0x102>
 800296a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800296e:	d84e      	bhi.n	8002a0e <ADC_ConfigureBoostMode+0x116>
 8002970:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002974:	d03d      	beq.n	80029f2 <ADC_ConfigureBoostMode+0xfa>
 8002976:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800297a:	d848      	bhi.n	8002a0e <ADC_ConfigureBoostMode+0x116>
 800297c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002980:	d033      	beq.n	80029ea <ADC_ConfigureBoostMode+0xf2>
 8002982:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002986:	d842      	bhi.n	8002a0e <ADC_ConfigureBoostMode+0x116>
 8002988:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800298c:	d029      	beq.n	80029e2 <ADC_ConfigureBoostMode+0xea>
 800298e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002992:	d83c      	bhi.n	8002a0e <ADC_ConfigureBoostMode+0x116>
 8002994:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002998:	d01a      	beq.n	80029d0 <ADC_ConfigureBoostMode+0xd8>
 800299a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800299e:	d836      	bhi.n	8002a0e <ADC_ConfigureBoostMode+0x116>
 80029a0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80029a4:	d014      	beq.n	80029d0 <ADC_ConfigureBoostMode+0xd8>
 80029a6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80029aa:	d830      	bhi.n	8002a0e <ADC_ConfigureBoostMode+0x116>
 80029ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029b0:	d00e      	beq.n	80029d0 <ADC_ConfigureBoostMode+0xd8>
 80029b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029b6:	d82a      	bhi.n	8002a0e <ADC_ConfigureBoostMode+0x116>
 80029b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029bc:	d008      	beq.n	80029d0 <ADC_ConfigureBoostMode+0xd8>
 80029be:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029c2:	d824      	bhi.n	8002a0e <ADC_ConfigureBoostMode+0x116>
 80029c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029c8:	d002      	beq.n	80029d0 <ADC_ConfigureBoostMode+0xd8>
 80029ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029ce:	d11e      	bne.n	8002a0e <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	0c9b      	lsrs	r3, r3, #18
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	fbb2 f3f3 	udiv	r3, r2, r3
 80029de:	60fb      	str	r3, [r7, #12]
        break;
 80029e0:	e016      	b.n	8002a10 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	60fb      	str	r3, [r7, #12]
        break;
 80029e8:	e012      	b.n	8002a10 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	60fb      	str	r3, [r7, #12]
        break;
 80029f0:	e00e      	b.n	8002a10 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	099b      	lsrs	r3, r3, #6
 80029f6:	60fb      	str	r3, [r7, #12]
        break;
 80029f8:	e00a      	b.n	8002a10 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	09db      	lsrs	r3, r3, #7
 80029fe:	60fb      	str	r3, [r7, #12]
        break;
 8002a00:	e006      	b.n	8002a10 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	60fb      	str	r3, [r7, #12]
        break;
 8002a08:	e002      	b.n	8002a10 <ADC_ConfigureBoostMode+0x118>
        break;
 8002a0a:	bf00      	nop
 8002a0c:	e000      	b.n	8002a10 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002a0e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	085b      	lsrs	r3, r3, #1
 8002a14:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <ADC_ConfigureBoostMode+0x190>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d808      	bhi.n	8002a30 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a2c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a2e:	e025      	b.n	8002a7c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4a16      	ldr	r2, [pc, #88]	; (8002a8c <ADC_ConfigureBoostMode+0x194>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d80a      	bhi.n	8002a4e <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a4a:	609a      	str	r2, [r3, #8]
}
 8002a4c:	e016      	b.n	8002a7c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4a0f      	ldr	r2, [pc, #60]	; (8002a90 <ADC_ConfigureBoostMode+0x198>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d80a      	bhi.n	8002a6c <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a68:	609a      	str	r2, [r3, #8]
}
 8002a6a:	e007      	b.n	8002a7c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002a7a:	609a      	str	r2, [r3, #8]
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40022300 	.word	0x40022300
 8002a88:	005f5e10 	.word	0x005f5e10
 8002a8c:	00bebc20 	.word	0x00bebc20
 8002a90:	017d7840 	.word	0x017d7840

08002a94 <LL_ADC_IsEnabled>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <LL_ADC_IsEnabled+0x18>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <LL_ADC_IsEnabled+0x1a>
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_ADC_REG_IsConversionOngoing>:
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d101      	bne.n	8002ad2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b09f      	sub	sp, #124	; 0x7c
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e080      	b.n	8002c00 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002b06:	2300      	movs	r3, #0
 8002b08:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a3d      	ldr	r2, [pc, #244]	; (8002c08 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d102      	bne.n	8002b1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b18:	4b3c      	ldr	r3, [pc, #240]	; (8002c0c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	e001      	b.n	8002b22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10b      	bne.n	8002b40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e05f      	b.n	8002c00 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ffb9 	bl	8002aba <LL_ADC_REG_IsConversionOngoing>
 8002b48:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff ffb3 	bl	8002aba <LL_ADC_REG_IsConversionOngoing>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d141      	bne.n	8002bde <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d13e      	bne.n	8002bde <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b60:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002b62:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b7e:	4822      	ldr	r0, [pc, #136]	; (8002c08 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002b80:	f7ff ff88 	bl	8002a94 <LL_ADC_IsEnabled>
 8002b84:	4604      	mov	r4, r0
 8002b86:	4821      	ldr	r0, [pc, #132]	; (8002c0c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002b88:	f7ff ff84 	bl	8002a94 <LL_ADC_IsEnabled>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	4323      	orrs	r3, r4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d12e      	bne.n	8002bf2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	4b1e      	ldr	r3, [pc, #120]	; (8002c14 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	6811      	ldr	r1, [r2, #0]
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	6892      	ldr	r2, [r2, #8]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002baa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bac:	e021      	b.n	8002bf2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bba:	4813      	ldr	r0, [pc, #76]	; (8002c08 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002bbc:	f7ff ff6a 	bl	8002a94 <LL_ADC_IsEnabled>
 8002bc0:	4604      	mov	r4, r0
 8002bc2:	4812      	ldr	r0, [pc, #72]	; (8002c0c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002bc4:	f7ff ff66 	bl	8002a94 <LL_ADC_IsEnabled>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4323      	orrs	r3, r4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d110      	bne.n	8002bf2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bda:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bdc:	e009      	b.n	8002bf2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be2:	f043 0220 	orr.w	r2, r3, #32
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002bf0:	e000      	b.n	8002bf4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bf2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bfc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	377c      	adds	r7, #124	; 0x7c
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd90      	pop	{r4, r7, pc}
 8002c08:	40022000 	.word	0x40022000
 8002c0c:	40022100 	.word	0x40022100
 8002c10:	40022300 	.word	0x40022300
 8002c14:	fffff0e0 	.word	0xfffff0e0

08002c18 <__NVIC_SetPriorityGrouping>:
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <__NVIC_SetPriorityGrouping+0x40>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c34:	4013      	ands	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <__NVIC_SetPriorityGrouping+0x44>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c46:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <__NVIC_SetPriorityGrouping+0x40>)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	60d3      	str	r3, [r2, #12]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000ed00 	.word	0xe000ed00
 8002c5c:	05fa0000 	.word	0x05fa0000

08002c60 <__NVIC_GetPriorityGrouping>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c64:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <__NVIC_GetPriorityGrouping+0x18>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	0a1b      	lsrs	r3, r3, #8
 8002c6a:	f003 0307 	and.w	r3, r3, #7
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <__NVIC_EnableIRQ>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	db0b      	blt.n	8002ca6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8e:	88fb      	ldrh	r3, [r7, #6]
 8002c90:	f003 021f 	and.w	r2, r3, #31
 8002c94:	4907      	ldr	r1, [pc, #28]	; (8002cb4 <__NVIC_EnableIRQ+0x38>)
 8002c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	e000e100 	.word	0xe000e100

08002cb8 <__NVIC_SetPriority>:
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	db0a      	blt.n	8002ce2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	490c      	ldr	r1, [pc, #48]	; (8002d04 <__NVIC_SetPriority+0x4c>)
 8002cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cd6:	0112      	lsls	r2, r2, #4
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	440b      	add	r3, r1
 8002cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ce0:	e00a      	b.n	8002cf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4908      	ldr	r1, [pc, #32]	; (8002d08 <__NVIC_SetPriority+0x50>)
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	3b04      	subs	r3, #4
 8002cf0:	0112      	lsls	r2, r2, #4
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	761a      	strb	r2, [r3, #24]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000e100 	.word	0xe000e100
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b089      	sub	sp, #36	; 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f1c3 0307 	rsb	r3, r3, #7
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	bf28      	it	cs
 8002d2a:	2304      	movcs	r3, #4
 8002d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	d902      	bls.n	8002d3c <NVIC_EncodePriority+0x30>
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3b03      	subs	r3, #3
 8002d3a:	e000      	b.n	8002d3e <NVIC_EncodePriority+0x32>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	f04f 32ff 	mov.w	r2, #4294967295
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	401a      	ands	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d54:	f04f 31ff 	mov.w	r1, #4294967295
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	43d9      	mvns	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	4313      	orrs	r3, r2
         );
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3724      	adds	r7, #36	; 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d84:	d301      	bcc.n	8002d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d86:	2301      	movs	r3, #1
 8002d88:	e00f      	b.n	8002daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <SysTick_Config+0x40>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d92:	210f      	movs	r1, #15
 8002d94:	f04f 30ff 	mov.w	r0, #4294967295
 8002d98:	f7ff ff8e 	bl	8002cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <SysTick_Config+0x40>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002da2:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <SysTick_Config+0x40>)
 8002da4:	2207      	movs	r2, #7
 8002da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	e000e010 	.word	0xe000e010

08002db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff ff29 	bl	8002c18 <__NVIC_SetPriorityGrouping>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ddc:	f7ff ff40 	bl	8002c60 <__NVIC_GetPriorityGrouping>
 8002de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	6978      	ldr	r0, [r7, #20]
 8002de8:	f7ff ff90 	bl	8002d0c <NVIC_EncodePriority>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff5f 	bl	8002cb8 <__NVIC_SetPriority>
}
 8002dfa:	bf00      	nop
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff33 	bl	8002c7c <__NVIC_EnableIRQ>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ffa4 	bl	8002d74 <SysTick_Config>
 8002e2c:	4603      	mov	r3, r0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e40:	f7fe fd10 	bl	8001864 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e2dc      	b.n	800340a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d008      	beq.n	8002e6e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2280      	movs	r2, #128	; 0x80
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e2cd      	b.n	800340a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a76      	ldr	r2, [pc, #472]	; (800304c <HAL_DMA_Abort+0x214>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d04a      	beq.n	8002f0e <HAL_DMA_Abort+0xd6>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a74      	ldr	r2, [pc, #464]	; (8003050 <HAL_DMA_Abort+0x218>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d045      	beq.n	8002f0e <HAL_DMA_Abort+0xd6>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a73      	ldr	r2, [pc, #460]	; (8003054 <HAL_DMA_Abort+0x21c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d040      	beq.n	8002f0e <HAL_DMA_Abort+0xd6>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a71      	ldr	r2, [pc, #452]	; (8003058 <HAL_DMA_Abort+0x220>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d03b      	beq.n	8002f0e <HAL_DMA_Abort+0xd6>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a70      	ldr	r2, [pc, #448]	; (800305c <HAL_DMA_Abort+0x224>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d036      	beq.n	8002f0e <HAL_DMA_Abort+0xd6>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a6e      	ldr	r2, [pc, #440]	; (8003060 <HAL_DMA_Abort+0x228>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d031      	beq.n	8002f0e <HAL_DMA_Abort+0xd6>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a6d      	ldr	r2, [pc, #436]	; (8003064 <HAL_DMA_Abort+0x22c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d02c      	beq.n	8002f0e <HAL_DMA_Abort+0xd6>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a6b      	ldr	r2, [pc, #428]	; (8003068 <HAL_DMA_Abort+0x230>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d027      	beq.n	8002f0e <HAL_DMA_Abort+0xd6>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a6a      	ldr	r2, [pc, #424]	; (800306c <HAL_DMA_Abort+0x234>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d022      	beq.n	8002f0e <HAL_DMA_Abort+0xd6>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a68      	ldr	r2, [pc, #416]	; (8003070 <HAL_DMA_Abort+0x238>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01d      	beq.n	8002f0e <HAL_DMA_Abort+0xd6>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a67      	ldr	r2, [pc, #412]	; (8003074 <HAL_DMA_Abort+0x23c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d018      	beq.n	8002f0e <HAL_DMA_Abort+0xd6>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a65      	ldr	r2, [pc, #404]	; (8003078 <HAL_DMA_Abort+0x240>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d013      	beq.n	8002f0e <HAL_DMA_Abort+0xd6>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a64      	ldr	r2, [pc, #400]	; (800307c <HAL_DMA_Abort+0x244>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00e      	beq.n	8002f0e <HAL_DMA_Abort+0xd6>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a62      	ldr	r2, [pc, #392]	; (8003080 <HAL_DMA_Abort+0x248>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d009      	beq.n	8002f0e <HAL_DMA_Abort+0xd6>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a61      	ldr	r2, [pc, #388]	; (8003084 <HAL_DMA_Abort+0x24c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d004      	beq.n	8002f0e <HAL_DMA_Abort+0xd6>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a5f      	ldr	r2, [pc, #380]	; (8003088 <HAL_DMA_Abort+0x250>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d101      	bne.n	8002f12 <HAL_DMA_Abort+0xda>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_DMA_Abort+0xdc>
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d013      	beq.n	8002f40 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 021e 	bic.w	r2, r2, #30
 8002f26:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f36:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	e00a      	b.n	8002f56 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 020e 	bic.w	r2, r2, #14
 8002f4e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a3c      	ldr	r2, [pc, #240]	; (800304c <HAL_DMA_Abort+0x214>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d072      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a3a      	ldr	r2, [pc, #232]	; (8003050 <HAL_DMA_Abort+0x218>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d06d      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a39      	ldr	r2, [pc, #228]	; (8003054 <HAL_DMA_Abort+0x21c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d068      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a37      	ldr	r2, [pc, #220]	; (8003058 <HAL_DMA_Abort+0x220>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d063      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a36      	ldr	r2, [pc, #216]	; (800305c <HAL_DMA_Abort+0x224>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d05e      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a34      	ldr	r2, [pc, #208]	; (8003060 <HAL_DMA_Abort+0x228>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d059      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a33      	ldr	r2, [pc, #204]	; (8003064 <HAL_DMA_Abort+0x22c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d054      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a31      	ldr	r2, [pc, #196]	; (8003068 <HAL_DMA_Abort+0x230>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d04f      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a30      	ldr	r2, [pc, #192]	; (800306c <HAL_DMA_Abort+0x234>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d04a      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a2e      	ldr	r2, [pc, #184]	; (8003070 <HAL_DMA_Abort+0x238>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d045      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a2d      	ldr	r2, [pc, #180]	; (8003074 <HAL_DMA_Abort+0x23c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d040      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	; (8003078 <HAL_DMA_Abort+0x240>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d03b      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a2a      	ldr	r2, [pc, #168]	; (800307c <HAL_DMA_Abort+0x244>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d036      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a28      	ldr	r2, [pc, #160]	; (8003080 <HAL_DMA_Abort+0x248>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d031      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a27      	ldr	r2, [pc, #156]	; (8003084 <HAL_DMA_Abort+0x24c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d02c      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a25      	ldr	r2, [pc, #148]	; (8003088 <HAL_DMA_Abort+0x250>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d027      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a24      	ldr	r2, [pc, #144]	; (800308c <HAL_DMA_Abort+0x254>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d022      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a22      	ldr	r2, [pc, #136]	; (8003090 <HAL_DMA_Abort+0x258>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d01d      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a21      	ldr	r2, [pc, #132]	; (8003094 <HAL_DMA_Abort+0x25c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d018      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1f      	ldr	r2, [pc, #124]	; (8003098 <HAL_DMA_Abort+0x260>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d013      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a1e      	ldr	r2, [pc, #120]	; (800309c <HAL_DMA_Abort+0x264>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00e      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a1c      	ldr	r2, [pc, #112]	; (80030a0 <HAL_DMA_Abort+0x268>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d009      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a1b      	ldr	r2, [pc, #108]	; (80030a4 <HAL_DMA_Abort+0x26c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d004      	beq.n	8003046 <HAL_DMA_Abort+0x20e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a19      	ldr	r2, [pc, #100]	; (80030a8 <HAL_DMA_Abort+0x270>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d132      	bne.n	80030ac <HAL_DMA_Abort+0x274>
 8003046:	2301      	movs	r3, #1
 8003048:	e031      	b.n	80030ae <HAL_DMA_Abort+0x276>
 800304a:	bf00      	nop
 800304c:	40020010 	.word	0x40020010
 8003050:	40020028 	.word	0x40020028
 8003054:	40020040 	.word	0x40020040
 8003058:	40020058 	.word	0x40020058
 800305c:	40020070 	.word	0x40020070
 8003060:	40020088 	.word	0x40020088
 8003064:	400200a0 	.word	0x400200a0
 8003068:	400200b8 	.word	0x400200b8
 800306c:	40020410 	.word	0x40020410
 8003070:	40020428 	.word	0x40020428
 8003074:	40020440 	.word	0x40020440
 8003078:	40020458 	.word	0x40020458
 800307c:	40020470 	.word	0x40020470
 8003080:	40020488 	.word	0x40020488
 8003084:	400204a0 	.word	0x400204a0
 8003088:	400204b8 	.word	0x400204b8
 800308c:	58025408 	.word	0x58025408
 8003090:	5802541c 	.word	0x5802541c
 8003094:	58025430 	.word	0x58025430
 8003098:	58025444 	.word	0x58025444
 800309c:	58025458 	.word	0x58025458
 80030a0:	5802546c 	.word	0x5802546c
 80030a4:	58025480 	.word	0x58025480
 80030a8:	58025494 	.word	0x58025494
 80030ac:	2300      	movs	r3, #0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d007      	beq.n	80030c2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a6d      	ldr	r2, [pc, #436]	; (800327c <HAL_DMA_Abort+0x444>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d04a      	beq.n	8003162 <HAL_DMA_Abort+0x32a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a6b      	ldr	r2, [pc, #428]	; (8003280 <HAL_DMA_Abort+0x448>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d045      	beq.n	8003162 <HAL_DMA_Abort+0x32a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a6a      	ldr	r2, [pc, #424]	; (8003284 <HAL_DMA_Abort+0x44c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d040      	beq.n	8003162 <HAL_DMA_Abort+0x32a>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a68      	ldr	r2, [pc, #416]	; (8003288 <HAL_DMA_Abort+0x450>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d03b      	beq.n	8003162 <HAL_DMA_Abort+0x32a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a67      	ldr	r2, [pc, #412]	; (800328c <HAL_DMA_Abort+0x454>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d036      	beq.n	8003162 <HAL_DMA_Abort+0x32a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a65      	ldr	r2, [pc, #404]	; (8003290 <HAL_DMA_Abort+0x458>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d031      	beq.n	8003162 <HAL_DMA_Abort+0x32a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a64      	ldr	r2, [pc, #400]	; (8003294 <HAL_DMA_Abort+0x45c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d02c      	beq.n	8003162 <HAL_DMA_Abort+0x32a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a62      	ldr	r2, [pc, #392]	; (8003298 <HAL_DMA_Abort+0x460>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d027      	beq.n	8003162 <HAL_DMA_Abort+0x32a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a61      	ldr	r2, [pc, #388]	; (800329c <HAL_DMA_Abort+0x464>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d022      	beq.n	8003162 <HAL_DMA_Abort+0x32a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a5f      	ldr	r2, [pc, #380]	; (80032a0 <HAL_DMA_Abort+0x468>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d01d      	beq.n	8003162 <HAL_DMA_Abort+0x32a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a5e      	ldr	r2, [pc, #376]	; (80032a4 <HAL_DMA_Abort+0x46c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d018      	beq.n	8003162 <HAL_DMA_Abort+0x32a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a5c      	ldr	r2, [pc, #368]	; (80032a8 <HAL_DMA_Abort+0x470>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d013      	beq.n	8003162 <HAL_DMA_Abort+0x32a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a5b      	ldr	r2, [pc, #364]	; (80032ac <HAL_DMA_Abort+0x474>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00e      	beq.n	8003162 <HAL_DMA_Abort+0x32a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a59      	ldr	r2, [pc, #356]	; (80032b0 <HAL_DMA_Abort+0x478>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d009      	beq.n	8003162 <HAL_DMA_Abort+0x32a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a58      	ldr	r2, [pc, #352]	; (80032b4 <HAL_DMA_Abort+0x47c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d004      	beq.n	8003162 <HAL_DMA_Abort+0x32a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a56      	ldr	r2, [pc, #344]	; (80032b8 <HAL_DMA_Abort+0x480>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d108      	bne.n	8003174 <HAL_DMA_Abort+0x33c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0201 	bic.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	e007      	b.n	8003184 <HAL_DMA_Abort+0x34c>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0201 	bic.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003184:	e013      	b.n	80031ae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003186:	f7fe fb6d 	bl	8001864 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b05      	cmp	r3, #5
 8003192:	d90c      	bls.n	80031ae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2203      	movs	r2, #3
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e12d      	b.n	800340a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1e5      	bne.n	8003186 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a2f      	ldr	r2, [pc, #188]	; (800327c <HAL_DMA_Abort+0x444>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d04a      	beq.n	800325a <HAL_DMA_Abort+0x422>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a2d      	ldr	r2, [pc, #180]	; (8003280 <HAL_DMA_Abort+0x448>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d045      	beq.n	800325a <HAL_DMA_Abort+0x422>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a2c      	ldr	r2, [pc, #176]	; (8003284 <HAL_DMA_Abort+0x44c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d040      	beq.n	800325a <HAL_DMA_Abort+0x422>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a2a      	ldr	r2, [pc, #168]	; (8003288 <HAL_DMA_Abort+0x450>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d03b      	beq.n	800325a <HAL_DMA_Abort+0x422>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a29      	ldr	r2, [pc, #164]	; (800328c <HAL_DMA_Abort+0x454>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d036      	beq.n	800325a <HAL_DMA_Abort+0x422>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a27      	ldr	r2, [pc, #156]	; (8003290 <HAL_DMA_Abort+0x458>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d031      	beq.n	800325a <HAL_DMA_Abort+0x422>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a26      	ldr	r2, [pc, #152]	; (8003294 <HAL_DMA_Abort+0x45c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d02c      	beq.n	800325a <HAL_DMA_Abort+0x422>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a24      	ldr	r2, [pc, #144]	; (8003298 <HAL_DMA_Abort+0x460>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d027      	beq.n	800325a <HAL_DMA_Abort+0x422>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a23      	ldr	r2, [pc, #140]	; (800329c <HAL_DMA_Abort+0x464>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d022      	beq.n	800325a <HAL_DMA_Abort+0x422>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a21      	ldr	r2, [pc, #132]	; (80032a0 <HAL_DMA_Abort+0x468>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d01d      	beq.n	800325a <HAL_DMA_Abort+0x422>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a20      	ldr	r2, [pc, #128]	; (80032a4 <HAL_DMA_Abort+0x46c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d018      	beq.n	800325a <HAL_DMA_Abort+0x422>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1e      	ldr	r2, [pc, #120]	; (80032a8 <HAL_DMA_Abort+0x470>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d013      	beq.n	800325a <HAL_DMA_Abort+0x422>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <HAL_DMA_Abort+0x474>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d00e      	beq.n	800325a <HAL_DMA_Abort+0x422>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1b      	ldr	r2, [pc, #108]	; (80032b0 <HAL_DMA_Abort+0x478>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d009      	beq.n	800325a <HAL_DMA_Abort+0x422>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a1a      	ldr	r2, [pc, #104]	; (80032b4 <HAL_DMA_Abort+0x47c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d004      	beq.n	800325a <HAL_DMA_Abort+0x422>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <HAL_DMA_Abort+0x480>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d101      	bne.n	800325e <HAL_DMA_Abort+0x426>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <HAL_DMA_Abort+0x428>
 800325e:	2300      	movs	r3, #0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d02b      	beq.n	80032bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	223f      	movs	r2, #63	; 0x3f
 8003274:	409a      	lsls	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	e02a      	b.n	80032d2 <HAL_DMA_Abort+0x49a>
 800327c:	40020010 	.word	0x40020010
 8003280:	40020028 	.word	0x40020028
 8003284:	40020040 	.word	0x40020040
 8003288:	40020058 	.word	0x40020058
 800328c:	40020070 	.word	0x40020070
 8003290:	40020088 	.word	0x40020088
 8003294:	400200a0 	.word	0x400200a0
 8003298:	400200b8 	.word	0x400200b8
 800329c:	40020410 	.word	0x40020410
 80032a0:	40020428 	.word	0x40020428
 80032a4:	40020440 	.word	0x40020440
 80032a8:	40020458 	.word	0x40020458
 80032ac:	40020470 	.word	0x40020470
 80032b0:	40020488 	.word	0x40020488
 80032b4:	400204a0 	.word	0x400204a0
 80032b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	2201      	movs	r2, #1
 80032cc:	409a      	lsls	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a4f      	ldr	r2, [pc, #316]	; (8003414 <HAL_DMA_Abort+0x5dc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d072      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a4d      	ldr	r2, [pc, #308]	; (8003418 <HAL_DMA_Abort+0x5e0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d06d      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a4c      	ldr	r2, [pc, #304]	; (800341c <HAL_DMA_Abort+0x5e4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d068      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a4a      	ldr	r2, [pc, #296]	; (8003420 <HAL_DMA_Abort+0x5e8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d063      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a49      	ldr	r2, [pc, #292]	; (8003424 <HAL_DMA_Abort+0x5ec>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d05e      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a47      	ldr	r2, [pc, #284]	; (8003428 <HAL_DMA_Abort+0x5f0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d059      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a46      	ldr	r2, [pc, #280]	; (800342c <HAL_DMA_Abort+0x5f4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d054      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a44      	ldr	r2, [pc, #272]	; (8003430 <HAL_DMA_Abort+0x5f8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d04f      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a43      	ldr	r2, [pc, #268]	; (8003434 <HAL_DMA_Abort+0x5fc>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d04a      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a41      	ldr	r2, [pc, #260]	; (8003438 <HAL_DMA_Abort+0x600>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d045      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a40      	ldr	r2, [pc, #256]	; (800343c <HAL_DMA_Abort+0x604>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d040      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a3e      	ldr	r2, [pc, #248]	; (8003440 <HAL_DMA_Abort+0x608>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d03b      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a3d      	ldr	r2, [pc, #244]	; (8003444 <HAL_DMA_Abort+0x60c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d036      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a3b      	ldr	r2, [pc, #236]	; (8003448 <HAL_DMA_Abort+0x610>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d031      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a3a      	ldr	r2, [pc, #232]	; (800344c <HAL_DMA_Abort+0x614>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d02c      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a38      	ldr	r2, [pc, #224]	; (8003450 <HAL_DMA_Abort+0x618>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d027      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a37      	ldr	r2, [pc, #220]	; (8003454 <HAL_DMA_Abort+0x61c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d022      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a35      	ldr	r2, [pc, #212]	; (8003458 <HAL_DMA_Abort+0x620>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01d      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a34      	ldr	r2, [pc, #208]	; (800345c <HAL_DMA_Abort+0x624>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d018      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a32      	ldr	r2, [pc, #200]	; (8003460 <HAL_DMA_Abort+0x628>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a31      	ldr	r2, [pc, #196]	; (8003464 <HAL_DMA_Abort+0x62c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00e      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a2f      	ldr	r2, [pc, #188]	; (8003468 <HAL_DMA_Abort+0x630>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d009      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a2e      	ldr	r2, [pc, #184]	; (800346c <HAL_DMA_Abort+0x634>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d004      	beq.n	80033c2 <HAL_DMA_Abort+0x58a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a2c      	ldr	r2, [pc, #176]	; (8003470 <HAL_DMA_Abort+0x638>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d101      	bne.n	80033c6 <HAL_DMA_Abort+0x58e>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_DMA_Abort+0x590>
 80033c6:	2300      	movs	r3, #0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d015      	beq.n	80033f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80033d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00c      	beq.n	80033f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80033f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40020010 	.word	0x40020010
 8003418:	40020028 	.word	0x40020028
 800341c:	40020040 	.word	0x40020040
 8003420:	40020058 	.word	0x40020058
 8003424:	40020070 	.word	0x40020070
 8003428:	40020088 	.word	0x40020088
 800342c:	400200a0 	.word	0x400200a0
 8003430:	400200b8 	.word	0x400200b8
 8003434:	40020410 	.word	0x40020410
 8003438:	40020428 	.word	0x40020428
 800343c:	40020440 	.word	0x40020440
 8003440:	40020458 	.word	0x40020458
 8003444:	40020470 	.word	0x40020470
 8003448:	40020488 	.word	0x40020488
 800344c:	400204a0 	.word	0x400204a0
 8003450:	400204b8 	.word	0x400204b8
 8003454:	58025408 	.word	0x58025408
 8003458:	5802541c 	.word	0x5802541c
 800345c:	58025430 	.word	0x58025430
 8003460:	58025444 	.word	0x58025444
 8003464:	58025458 	.word	0x58025458
 8003468:	5802546c 	.word	0x5802546c
 800346c:	58025480 	.word	0x58025480
 8003470:	58025494 	.word	0x58025494

08003474 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e237      	b.n	80038f6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d004      	beq.n	800349c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2280      	movs	r2, #128	; 0x80
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e22c      	b.n	80038f6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a5c      	ldr	r2, [pc, #368]	; (8003614 <HAL_DMA_Abort_IT+0x1a0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d04a      	beq.n	800353c <HAL_DMA_Abort_IT+0xc8>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a5b      	ldr	r2, [pc, #364]	; (8003618 <HAL_DMA_Abort_IT+0x1a4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d045      	beq.n	800353c <HAL_DMA_Abort_IT+0xc8>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a59      	ldr	r2, [pc, #356]	; (800361c <HAL_DMA_Abort_IT+0x1a8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d040      	beq.n	800353c <HAL_DMA_Abort_IT+0xc8>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a58      	ldr	r2, [pc, #352]	; (8003620 <HAL_DMA_Abort_IT+0x1ac>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d03b      	beq.n	800353c <HAL_DMA_Abort_IT+0xc8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a56      	ldr	r2, [pc, #344]	; (8003624 <HAL_DMA_Abort_IT+0x1b0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d036      	beq.n	800353c <HAL_DMA_Abort_IT+0xc8>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a55      	ldr	r2, [pc, #340]	; (8003628 <HAL_DMA_Abort_IT+0x1b4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d031      	beq.n	800353c <HAL_DMA_Abort_IT+0xc8>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a53      	ldr	r2, [pc, #332]	; (800362c <HAL_DMA_Abort_IT+0x1b8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d02c      	beq.n	800353c <HAL_DMA_Abort_IT+0xc8>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a52      	ldr	r2, [pc, #328]	; (8003630 <HAL_DMA_Abort_IT+0x1bc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d027      	beq.n	800353c <HAL_DMA_Abort_IT+0xc8>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a50      	ldr	r2, [pc, #320]	; (8003634 <HAL_DMA_Abort_IT+0x1c0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d022      	beq.n	800353c <HAL_DMA_Abort_IT+0xc8>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a4f      	ldr	r2, [pc, #316]	; (8003638 <HAL_DMA_Abort_IT+0x1c4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d01d      	beq.n	800353c <HAL_DMA_Abort_IT+0xc8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a4d      	ldr	r2, [pc, #308]	; (800363c <HAL_DMA_Abort_IT+0x1c8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d018      	beq.n	800353c <HAL_DMA_Abort_IT+0xc8>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a4c      	ldr	r2, [pc, #304]	; (8003640 <HAL_DMA_Abort_IT+0x1cc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d013      	beq.n	800353c <HAL_DMA_Abort_IT+0xc8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a4a      	ldr	r2, [pc, #296]	; (8003644 <HAL_DMA_Abort_IT+0x1d0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d00e      	beq.n	800353c <HAL_DMA_Abort_IT+0xc8>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a49      	ldr	r2, [pc, #292]	; (8003648 <HAL_DMA_Abort_IT+0x1d4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d009      	beq.n	800353c <HAL_DMA_Abort_IT+0xc8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a47      	ldr	r2, [pc, #284]	; (800364c <HAL_DMA_Abort_IT+0x1d8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d004      	beq.n	800353c <HAL_DMA_Abort_IT+0xc8>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a46      	ldr	r2, [pc, #280]	; (8003650 <HAL_DMA_Abort_IT+0x1dc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d101      	bne.n	8003540 <HAL_DMA_Abort_IT+0xcc>
 800353c:	2301      	movs	r3, #1
 800353e:	e000      	b.n	8003542 <HAL_DMA_Abort_IT+0xce>
 8003540:	2300      	movs	r3, #0
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8086 	beq.w	8003654 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2204      	movs	r2, #4
 800354c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a2f      	ldr	r2, [pc, #188]	; (8003614 <HAL_DMA_Abort_IT+0x1a0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d04a      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x17c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a2e      	ldr	r2, [pc, #184]	; (8003618 <HAL_DMA_Abort_IT+0x1a4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d045      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x17c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a2c      	ldr	r2, [pc, #176]	; (800361c <HAL_DMA_Abort_IT+0x1a8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d040      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x17c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a2b      	ldr	r2, [pc, #172]	; (8003620 <HAL_DMA_Abort_IT+0x1ac>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d03b      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x17c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a29      	ldr	r2, [pc, #164]	; (8003624 <HAL_DMA_Abort_IT+0x1b0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d036      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x17c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a28      	ldr	r2, [pc, #160]	; (8003628 <HAL_DMA_Abort_IT+0x1b4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d031      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x17c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a26      	ldr	r2, [pc, #152]	; (800362c <HAL_DMA_Abort_IT+0x1b8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d02c      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x17c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a25      	ldr	r2, [pc, #148]	; (8003630 <HAL_DMA_Abort_IT+0x1bc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d027      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x17c>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a23      	ldr	r2, [pc, #140]	; (8003634 <HAL_DMA_Abort_IT+0x1c0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d022      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x17c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a22      	ldr	r2, [pc, #136]	; (8003638 <HAL_DMA_Abort_IT+0x1c4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d01d      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x17c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a20      	ldr	r2, [pc, #128]	; (800363c <HAL_DMA_Abort_IT+0x1c8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d018      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x17c>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1f      	ldr	r2, [pc, #124]	; (8003640 <HAL_DMA_Abort_IT+0x1cc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d013      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x17c>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1d      	ldr	r2, [pc, #116]	; (8003644 <HAL_DMA_Abort_IT+0x1d0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00e      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x17c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <HAL_DMA_Abort_IT+0x1d4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d009      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x17c>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1a      	ldr	r2, [pc, #104]	; (800364c <HAL_DMA_Abort_IT+0x1d8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d004      	beq.n	80035f0 <HAL_DMA_Abort_IT+0x17c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a19      	ldr	r2, [pc, #100]	; (8003650 <HAL_DMA_Abort_IT+0x1dc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d108      	bne.n	8003602 <HAL_DMA_Abort_IT+0x18e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	e178      	b.n	80038f4 <HAL_DMA_Abort_IT+0x480>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	e16f      	b.n	80038f4 <HAL_DMA_Abort_IT+0x480>
 8003614:	40020010 	.word	0x40020010
 8003618:	40020028 	.word	0x40020028
 800361c:	40020040 	.word	0x40020040
 8003620:	40020058 	.word	0x40020058
 8003624:	40020070 	.word	0x40020070
 8003628:	40020088 	.word	0x40020088
 800362c:	400200a0 	.word	0x400200a0
 8003630:	400200b8 	.word	0x400200b8
 8003634:	40020410 	.word	0x40020410
 8003638:	40020428 	.word	0x40020428
 800363c:	40020440 	.word	0x40020440
 8003640:	40020458 	.word	0x40020458
 8003644:	40020470 	.word	0x40020470
 8003648:	40020488 	.word	0x40020488
 800364c:	400204a0 	.word	0x400204a0
 8003650:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 020e 	bic.w	r2, r2, #14
 8003662:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a6c      	ldr	r2, [pc, #432]	; (800381c <HAL_DMA_Abort_IT+0x3a8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d04a      	beq.n	8003704 <HAL_DMA_Abort_IT+0x290>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a6b      	ldr	r2, [pc, #428]	; (8003820 <HAL_DMA_Abort_IT+0x3ac>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d045      	beq.n	8003704 <HAL_DMA_Abort_IT+0x290>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a69      	ldr	r2, [pc, #420]	; (8003824 <HAL_DMA_Abort_IT+0x3b0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d040      	beq.n	8003704 <HAL_DMA_Abort_IT+0x290>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a68      	ldr	r2, [pc, #416]	; (8003828 <HAL_DMA_Abort_IT+0x3b4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d03b      	beq.n	8003704 <HAL_DMA_Abort_IT+0x290>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a66      	ldr	r2, [pc, #408]	; (800382c <HAL_DMA_Abort_IT+0x3b8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d036      	beq.n	8003704 <HAL_DMA_Abort_IT+0x290>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a65      	ldr	r2, [pc, #404]	; (8003830 <HAL_DMA_Abort_IT+0x3bc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d031      	beq.n	8003704 <HAL_DMA_Abort_IT+0x290>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a63      	ldr	r2, [pc, #396]	; (8003834 <HAL_DMA_Abort_IT+0x3c0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d02c      	beq.n	8003704 <HAL_DMA_Abort_IT+0x290>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a62      	ldr	r2, [pc, #392]	; (8003838 <HAL_DMA_Abort_IT+0x3c4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d027      	beq.n	8003704 <HAL_DMA_Abort_IT+0x290>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a60      	ldr	r2, [pc, #384]	; (800383c <HAL_DMA_Abort_IT+0x3c8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d022      	beq.n	8003704 <HAL_DMA_Abort_IT+0x290>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a5f      	ldr	r2, [pc, #380]	; (8003840 <HAL_DMA_Abort_IT+0x3cc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d01d      	beq.n	8003704 <HAL_DMA_Abort_IT+0x290>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a5d      	ldr	r2, [pc, #372]	; (8003844 <HAL_DMA_Abort_IT+0x3d0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d018      	beq.n	8003704 <HAL_DMA_Abort_IT+0x290>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a5c      	ldr	r2, [pc, #368]	; (8003848 <HAL_DMA_Abort_IT+0x3d4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d013      	beq.n	8003704 <HAL_DMA_Abort_IT+0x290>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a5a      	ldr	r2, [pc, #360]	; (800384c <HAL_DMA_Abort_IT+0x3d8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00e      	beq.n	8003704 <HAL_DMA_Abort_IT+0x290>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a59      	ldr	r2, [pc, #356]	; (8003850 <HAL_DMA_Abort_IT+0x3dc>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d009      	beq.n	8003704 <HAL_DMA_Abort_IT+0x290>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a57      	ldr	r2, [pc, #348]	; (8003854 <HAL_DMA_Abort_IT+0x3e0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d004      	beq.n	8003704 <HAL_DMA_Abort_IT+0x290>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a56      	ldr	r2, [pc, #344]	; (8003858 <HAL_DMA_Abort_IT+0x3e4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d108      	bne.n	8003716 <HAL_DMA_Abort_IT+0x2a2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	e007      	b.n	8003726 <HAL_DMA_Abort_IT+0x2b2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a3c      	ldr	r2, [pc, #240]	; (800381c <HAL_DMA_Abort_IT+0x3a8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d072      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a3a      	ldr	r2, [pc, #232]	; (8003820 <HAL_DMA_Abort_IT+0x3ac>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d06d      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a39      	ldr	r2, [pc, #228]	; (8003824 <HAL_DMA_Abort_IT+0x3b0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d068      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a37      	ldr	r2, [pc, #220]	; (8003828 <HAL_DMA_Abort_IT+0x3b4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d063      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a36      	ldr	r2, [pc, #216]	; (800382c <HAL_DMA_Abort_IT+0x3b8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d05e      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a34      	ldr	r2, [pc, #208]	; (8003830 <HAL_DMA_Abort_IT+0x3bc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d059      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a33      	ldr	r2, [pc, #204]	; (8003834 <HAL_DMA_Abort_IT+0x3c0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d054      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a31      	ldr	r2, [pc, #196]	; (8003838 <HAL_DMA_Abort_IT+0x3c4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d04f      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a30      	ldr	r2, [pc, #192]	; (800383c <HAL_DMA_Abort_IT+0x3c8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d04a      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a2e      	ldr	r2, [pc, #184]	; (8003840 <HAL_DMA_Abort_IT+0x3cc>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d045      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a2d      	ldr	r2, [pc, #180]	; (8003844 <HAL_DMA_Abort_IT+0x3d0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d040      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a2b      	ldr	r2, [pc, #172]	; (8003848 <HAL_DMA_Abort_IT+0x3d4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d03b      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a2a      	ldr	r2, [pc, #168]	; (800384c <HAL_DMA_Abort_IT+0x3d8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d036      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a28      	ldr	r2, [pc, #160]	; (8003850 <HAL_DMA_Abort_IT+0x3dc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d031      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a27      	ldr	r2, [pc, #156]	; (8003854 <HAL_DMA_Abort_IT+0x3e0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d02c      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a25      	ldr	r2, [pc, #148]	; (8003858 <HAL_DMA_Abort_IT+0x3e4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d027      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a24      	ldr	r2, [pc, #144]	; (800385c <HAL_DMA_Abort_IT+0x3e8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d022      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a22      	ldr	r2, [pc, #136]	; (8003860 <HAL_DMA_Abort_IT+0x3ec>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d01d      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a21      	ldr	r2, [pc, #132]	; (8003864 <HAL_DMA_Abort_IT+0x3f0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d018      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <HAL_DMA_Abort_IT+0x3f4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1e      	ldr	r2, [pc, #120]	; (800386c <HAL_DMA_Abort_IT+0x3f8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00e      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1c      	ldr	r2, [pc, #112]	; (8003870 <HAL_DMA_Abort_IT+0x3fc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d009      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1b      	ldr	r2, [pc, #108]	; (8003874 <HAL_DMA_Abort_IT+0x400>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_DMA_Abort_IT+0x3a2>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a19      	ldr	r2, [pc, #100]	; (8003878 <HAL_DMA_Abort_IT+0x404>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d132      	bne.n	800387c <HAL_DMA_Abort_IT+0x408>
 8003816:	2301      	movs	r3, #1
 8003818:	e031      	b.n	800387e <HAL_DMA_Abort_IT+0x40a>
 800381a:	bf00      	nop
 800381c:	40020010 	.word	0x40020010
 8003820:	40020028 	.word	0x40020028
 8003824:	40020040 	.word	0x40020040
 8003828:	40020058 	.word	0x40020058
 800382c:	40020070 	.word	0x40020070
 8003830:	40020088 	.word	0x40020088
 8003834:	400200a0 	.word	0x400200a0
 8003838:	400200b8 	.word	0x400200b8
 800383c:	40020410 	.word	0x40020410
 8003840:	40020428 	.word	0x40020428
 8003844:	40020440 	.word	0x40020440
 8003848:	40020458 	.word	0x40020458
 800384c:	40020470 	.word	0x40020470
 8003850:	40020488 	.word	0x40020488
 8003854:	400204a0 	.word	0x400204a0
 8003858:	400204b8 	.word	0x400204b8
 800385c:	58025408 	.word	0x58025408
 8003860:	5802541c 	.word	0x5802541c
 8003864:	58025430 	.word	0x58025430
 8003868:	58025444 	.word	0x58025444
 800386c:	58025458 	.word	0x58025458
 8003870:	5802546c 	.word	0x5802546c
 8003874:	58025480 	.word	0x58025480
 8003878:	58025494 	.word	0x58025494
 800387c:	2300      	movs	r3, #0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d028      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003890:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389c:	f003 031f 	and.w	r3, r3, #31
 80038a0:	2201      	movs	r2, #1
 80038a2:	409a      	lsls	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00c      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop

08003900 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003900:	b480      	push	{r7}
 8003902:	b089      	sub	sp, #36	; 0x24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800390a:	2300      	movs	r3, #0
 800390c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800390e:	4b89      	ldr	r3, [pc, #548]	; (8003b34 <HAL_GPIO_Init+0x234>)
 8003910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003912:	e194      	b.n	8003c3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	2101      	movs	r1, #1
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	fa01 f303 	lsl.w	r3, r1, r3
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 8186 	beq.w	8003c38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	2b01      	cmp	r3, #1
 8003936:	d005      	beq.n	8003944 <HAL_GPIO_Init+0x44>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d130      	bne.n	80039a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	2203      	movs	r2, #3
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800397a:	2201      	movs	r2, #1
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	091b      	lsrs	r3, r3, #4
 8003990:	f003 0201 	and.w	r2, r3, #1
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4313      	orrs	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d017      	beq.n	80039e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	2203      	movs	r2, #3
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d123      	bne.n	8003a36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	08da      	lsrs	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3208      	adds	r2, #8
 80039f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	220f      	movs	r2, #15
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	08da      	lsrs	r2, r3, #3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3208      	adds	r2, #8
 8003a30:	69b9      	ldr	r1, [r7, #24]
 8003a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	2203      	movs	r2, #3
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 0203 	and.w	r2, r3, #3
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80e0 	beq.w	8003c38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a78:	4b2f      	ldr	r3, [pc, #188]	; (8003b38 <HAL_GPIO_Init+0x238>)
 8003a7a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003a7e:	4a2e      	ldr	r2, [pc, #184]	; (8003b38 <HAL_GPIO_Init+0x238>)
 8003a80:	f043 0302 	orr.w	r3, r3, #2
 8003a84:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003a88:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <HAL_GPIO_Init+0x238>)
 8003a8a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a96:	4a29      	ldr	r2, [pc, #164]	; (8003b3c <HAL_GPIO_Init+0x23c>)
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	089b      	lsrs	r3, r3, #2
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	220f      	movs	r2, #15
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a20      	ldr	r2, [pc, #128]	; (8003b40 <HAL_GPIO_Init+0x240>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d052      	beq.n	8003b68 <HAL_GPIO_Init+0x268>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a1f      	ldr	r2, [pc, #124]	; (8003b44 <HAL_GPIO_Init+0x244>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d031      	beq.n	8003b2e <HAL_GPIO_Init+0x22e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a1e      	ldr	r2, [pc, #120]	; (8003b48 <HAL_GPIO_Init+0x248>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d02b      	beq.n	8003b2a <HAL_GPIO_Init+0x22a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	; (8003b4c <HAL_GPIO_Init+0x24c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d025      	beq.n	8003b26 <HAL_GPIO_Init+0x226>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a1c      	ldr	r2, [pc, #112]	; (8003b50 <HAL_GPIO_Init+0x250>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01f      	beq.n	8003b22 <HAL_GPIO_Init+0x222>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <HAL_GPIO_Init+0x254>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d019      	beq.n	8003b1e <HAL_GPIO_Init+0x21e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1a      	ldr	r2, [pc, #104]	; (8003b58 <HAL_GPIO_Init+0x258>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <HAL_GPIO_Init+0x21a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a19      	ldr	r2, [pc, #100]	; (8003b5c <HAL_GPIO_Init+0x25c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00d      	beq.n	8003b16 <HAL_GPIO_Init+0x216>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a18      	ldr	r2, [pc, #96]	; (8003b60 <HAL_GPIO_Init+0x260>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <HAL_GPIO_Init+0x212>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <HAL_GPIO_Init+0x264>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d101      	bne.n	8003b0e <HAL_GPIO_Init+0x20e>
 8003b0a:	2309      	movs	r3, #9
 8003b0c:	e02d      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b0e:	230a      	movs	r3, #10
 8003b10:	e02b      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b12:	2308      	movs	r3, #8
 8003b14:	e029      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b16:	2307      	movs	r3, #7
 8003b18:	e027      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b1a:	2306      	movs	r3, #6
 8003b1c:	e025      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b1e:	2305      	movs	r3, #5
 8003b20:	e023      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b22:	2304      	movs	r3, #4
 8003b24:	e021      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b26:	2303      	movs	r3, #3
 8003b28:	e01f      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e01d      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e01b      	b.n	8003b6a <HAL_GPIO_Init+0x26a>
 8003b32:	bf00      	nop
 8003b34:	58000080 	.word	0x58000080
 8003b38:	58024400 	.word	0x58024400
 8003b3c:	58000400 	.word	0x58000400
 8003b40:	58020000 	.word	0x58020000
 8003b44:	58020400 	.word	0x58020400
 8003b48:	58020800 	.word	0x58020800
 8003b4c:	58020c00 	.word	0x58020c00
 8003b50:	58021000 	.word	0x58021000
 8003b54:	58021400 	.word	0x58021400
 8003b58:	58021800 	.word	0x58021800
 8003b5c:	58021c00 	.word	0x58021c00
 8003b60:	58022000 	.word	0x58022000
 8003b64:	58022400 	.word	0x58022400
 8003b68:	2300      	movs	r3, #0
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	f002 0203 	and.w	r2, r2, #3
 8003b70:	0092      	lsls	r2, r2, #2
 8003b72:	4093      	lsls	r3, r2
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b7a:	4938      	ldr	r1, [pc, #224]	; (8003c5c <HAL_GPIO_Init+0x35c>)
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	089b      	lsrs	r3, r3, #2
 8003b80:	3302      	adds	r3, #2
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003bae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003bdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	fa22 f303 	lsr.w	r3, r2, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f47f ae63 	bne.w	8003914 <HAL_GPIO_Init+0x14>
  }
}
 8003c4e:	bf00      	nop
 8003c50:	bf00      	nop
 8003c52:	3724      	adds	r7, #36	; 0x24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	58000400 	.word	0x58000400

08003c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	807b      	strh	r3, [r7, #2]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c70:	787b      	ldrb	r3, [r7, #1]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c7c:	e003      	b.n	8003c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c7e:	887b      	ldrh	r3, [r7, #2]
 8003c80:	041a      	lsls	r2, r3, #16
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	619a      	str	r2, [r3, #24]
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
	...

08003c94 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003c9c:	4b29      	ldr	r3, [pc, #164]	; (8003d44 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	2b06      	cmp	r3, #6
 8003ca6:	d00a      	beq.n	8003cbe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ca8:	4b26      	ldr	r3, [pc, #152]	; (8003d44 <HAL_PWREx_ConfigSupply+0xb0>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d001      	beq.n	8003cba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e040      	b.n	8003d3c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e03e      	b.n	8003d3c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003cbe:	4b21      	ldr	r3, [pc, #132]	; (8003d44 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003cc6:	491f      	ldr	r1, [pc, #124]	; (8003d44 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003cce:	f7fd fdc9 	bl	8001864 <HAL_GetTick>
 8003cd2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cd4:	e009      	b.n	8003cea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003cd6:	f7fd fdc5 	bl	8001864 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ce4:	d901      	bls.n	8003cea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e028      	b.n	8003d3c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cea:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf6:	d1ee      	bne.n	8003cd6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b1e      	cmp	r3, #30
 8003cfc:	d008      	beq.n	8003d10 <HAL_PWREx_ConfigSupply+0x7c>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b2e      	cmp	r3, #46	; 0x2e
 8003d02:	d005      	beq.n	8003d10 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b1d      	cmp	r3, #29
 8003d08:	d002      	beq.n	8003d10 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b2d      	cmp	r3, #45	; 0x2d
 8003d0e:	d114      	bne.n	8003d3a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003d10:	f7fd fda8 	bl	8001864 <HAL_GetTick>
 8003d14:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d16:	e009      	b.n	8003d2c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d18:	f7fd fda4 	bl	8001864 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d26:	d901      	bls.n	8003d2c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e007      	b.n	8003d3c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d38:	d1ee      	bne.n	8003d18 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	58024800 	.word	0x58024800

08003d48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08c      	sub	sp, #48	; 0x30
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d102      	bne.n	8003d5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f000 bc1f 	b.w	800459a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80b3 	beq.w	8003ed0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d6a:	4b95      	ldr	r3, [pc, #596]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d74:	4b92      	ldr	r3, [pc, #584]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d007      	beq.n	8003d90 <HAL_RCC_OscConfig+0x48>
 8003d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d82:	2b18      	cmp	r3, #24
 8003d84:	d112      	bne.n	8003dac <HAL_RCC_OscConfig+0x64>
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d10d      	bne.n	8003dac <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d90:	4b8b      	ldr	r3, [pc, #556]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8098 	beq.w	8003ece <HAL_RCC_OscConfig+0x186>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f040 8093 	bne.w	8003ece <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e3f6      	b.n	800459a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db4:	d106      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x7c>
 8003db6:	4b82      	ldr	r3, [pc, #520]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a81      	ldr	r2, [pc, #516]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e058      	b.n	8003e76 <HAL_RCC_OscConfig+0x12e>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d112      	bne.n	8003df2 <HAL_RCC_OscConfig+0xaa>
 8003dcc:	4b7c      	ldr	r3, [pc, #496]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a7b      	ldr	r2, [pc, #492]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	4b79      	ldr	r3, [pc, #484]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a78      	ldr	r2, [pc, #480]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003dde:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	4b76      	ldr	r3, [pc, #472]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a75      	ldr	r2, [pc, #468]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	e041      	b.n	8003e76 <HAL_RCC_OscConfig+0x12e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dfa:	d112      	bne.n	8003e22 <HAL_RCC_OscConfig+0xda>
 8003dfc:	4b70      	ldr	r3, [pc, #448]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a6f      	ldr	r2, [pc, #444]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	4b6d      	ldr	r3, [pc, #436]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a6c      	ldr	r2, [pc, #432]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e0e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	4b6a      	ldr	r3, [pc, #424]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a69      	ldr	r2, [pc, #420]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	e029      	b.n	8003e76 <HAL_RCC_OscConfig+0x12e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003e2a:	d112      	bne.n	8003e52 <HAL_RCC_OscConfig+0x10a>
 8003e2c:	4b64      	ldr	r3, [pc, #400]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a63      	ldr	r2, [pc, #396]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	4b61      	ldr	r3, [pc, #388]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a60      	ldr	r2, [pc, #384]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	4b5e      	ldr	r3, [pc, #376]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a5d      	ldr	r2, [pc, #372]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	e011      	b.n	8003e76 <HAL_RCC_OscConfig+0x12e>
 8003e52:	4b5b      	ldr	r3, [pc, #364]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a5a      	ldr	r2, [pc, #360]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	4b58      	ldr	r3, [pc, #352]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a57      	ldr	r2, [pc, #348]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	4b55      	ldr	r3, [pc, #340]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a54      	ldr	r2, [pc, #336]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e70:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d013      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fd fcf1 	bl	8001864 <HAL_GetTick>
 8003e82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e86:	f7fd fced 	bl	8001864 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b64      	cmp	r3, #100	; 0x64
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e380      	b.n	800459a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e98:	4b49      	ldr	r3, [pc, #292]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x13e>
 8003ea4:	e014      	b.n	8003ed0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea6:	f7fd fcdd 	bl	8001864 <HAL_GetTick>
 8003eaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eae:	f7fd fcd9 	bl	8001864 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b64      	cmp	r3, #100	; 0x64
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e36c      	b.n	800459a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ec0:	4b3f      	ldr	r3, [pc, #252]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f0      	bne.n	8003eae <HAL_RCC_OscConfig+0x166>
 8003ecc:	e000      	b.n	8003ed0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ece:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 808c 	beq.w	8003ff6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ede:	4b38      	ldr	r3, [pc, #224]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ee6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ee8:	4b35      	ldr	r3, [pc, #212]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eec:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <HAL_RCC_OscConfig+0x1bc>
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	2b18      	cmp	r3, #24
 8003ef8:	d137      	bne.n	8003f6a <HAL_RCC_OscConfig+0x222>
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d132      	bne.n	8003f6a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f04:	4b2e      	ldr	r3, [pc, #184]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_OscConfig+0x1d4>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e33e      	b.n	800459a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f1c:	4b28      	ldr	r3, [pc, #160]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f023 0219 	bic.w	r2, r3, #25
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4925      	ldr	r1, [pc, #148]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2e:	f7fd fc99 	bl	8001864 <HAL_GetTick>
 8003f32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f36:	f7fd fc95 	bl	8001864 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e328      	b.n	800459a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f48:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f54:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	061b      	lsls	r3, r3, #24
 8003f62:	4917      	ldr	r1, [pc, #92]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f68:	e045      	b.n	8003ff6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d028      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f72:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 0219 	bic.w	r2, r3, #25
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	4910      	ldr	r1, [pc, #64]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fd fc6e 	bl	8001864 <HAL_GetTick>
 8003f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f8c:	f7fd fc6a 	bl	8001864 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e2fd      	b.n	800459a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f9e:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f0      	beq.n	8003f8c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003faa:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	061b      	lsls	r3, r3, #24
 8003fb8:	4901      	ldr	r1, [pc, #4]	; (8003fc0 <HAL_RCC_OscConfig+0x278>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	604b      	str	r3, [r1, #4]
 8003fbe:	e01a      	b.n	8003ff6 <HAL_RCC_OscConfig+0x2ae>
 8003fc0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fc4:	4b97      	ldr	r3, [pc, #604]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a96      	ldr	r2, [pc, #600]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fd fc48 	bl	8001864 <HAL_GetTick>
 8003fd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd8:	f7fd fc44 	bl	8001864 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e2d7      	b.n	800459a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fea:	4b8e      	ldr	r3, [pc, #568]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d06a      	beq.n	80040d8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004002:	4b88      	ldr	r3, [pc, #544]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800400a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800400c:	4b85      	ldr	r3, [pc, #532]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b08      	cmp	r3, #8
 8004016:	d007      	beq.n	8004028 <HAL_RCC_OscConfig+0x2e0>
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	2b18      	cmp	r3, #24
 800401c:	d11b      	bne.n	8004056 <HAL_RCC_OscConfig+0x30e>
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	2b01      	cmp	r3, #1
 8004026:	d116      	bne.n	8004056 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004028:	4b7e      	ldr	r3, [pc, #504]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_RCC_OscConfig+0x2f8>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	2b80      	cmp	r3, #128	; 0x80
 800403a:	d001      	beq.n	8004040 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e2ac      	b.n	800459a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004040:	4b78      	ldr	r3, [pc, #480]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	061b      	lsls	r3, r3, #24
 800404e:	4975      	ldr	r1, [pc, #468]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 8004050:	4313      	orrs	r3, r2
 8004052:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004054:	e040      	b.n	80040d8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d023      	beq.n	80040a6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800405e:	4b71      	ldr	r3, [pc, #452]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a70      	ldr	r2, [pc, #448]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 8004064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406a:	f7fd fbfb 	bl	8001864 <HAL_GetTick>
 800406e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004072:	f7fd fbf7 	bl	8001864 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e28a      	b.n	800459a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004084:	4b67      	ldr	r3, [pc, #412]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0f0      	beq.n	8004072 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004090:	4b64      	ldr	r3, [pc, #400]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	061b      	lsls	r3, r3, #24
 800409e:	4961      	ldr	r1, [pc, #388]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60cb      	str	r3, [r1, #12]
 80040a4:	e018      	b.n	80040d8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80040a6:	4b5f      	ldr	r3, [pc, #380]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a5e      	ldr	r2, [pc, #376]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 80040ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b2:	f7fd fbd7 	bl	8001864 <HAL_GetTick>
 80040b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80040ba:	f7fd fbd3 	bl	8001864 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e266      	b.n	800459a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040cc:	4b55      	ldr	r3, [pc, #340]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1f0      	bne.n	80040ba <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d036      	beq.n	8004152 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d019      	beq.n	8004120 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ec:	4b4d      	ldr	r3, [pc, #308]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 80040ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f0:	4a4c      	ldr	r2, [pc, #304]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f8:	f7fd fbb4 	bl	8001864 <HAL_GetTick>
 80040fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004100:	f7fd fbb0 	bl	8001864 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e243      	b.n	800459a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004112:	4b44      	ldr	r3, [pc, #272]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 8004114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0x3b8>
 800411e:	e018      	b.n	8004152 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004120:	4b40      	ldr	r3, [pc, #256]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 8004122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004124:	4a3f      	ldr	r2, [pc, #252]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fd fb9a 	bl	8001864 <HAL_GetTick>
 8004130:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004134:	f7fd fb96 	bl	8001864 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e229      	b.n	800459a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004146:	4b37      	ldr	r3, [pc, #220]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 8004148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b00      	cmp	r3, #0
 800415c:	d036      	beq.n	80041cc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d019      	beq.n	800419a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004166:	4b2f      	ldr	r3, [pc, #188]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a2e      	ldr	r2, [pc, #184]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 800416c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004170:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004172:	f7fd fb77 	bl	8001864 <HAL_GetTick>
 8004176:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800417a:	f7fd fb73 	bl	8001864 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e206      	b.n	800459a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800418c:	4b25      	ldr	r3, [pc, #148]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x432>
 8004198:	e018      	b.n	80041cc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800419a:	4b22      	ldr	r3, [pc, #136]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a21      	ldr	r2, [pc, #132]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 80041a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041a6:	f7fd fb5d 	bl	8001864 <HAL_GetTick>
 80041aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ae:	f7fd fb59 	bl	8001864 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e1ec      	b.n	800459a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041c0:	4b18      	ldr	r3, [pc, #96]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f0      	bne.n	80041ae <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80af 	beq.w	8004338 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041da:	4b13      	ldr	r3, [pc, #76]	; (8004228 <HAL_RCC_OscConfig+0x4e0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a12      	ldr	r2, [pc, #72]	; (8004228 <HAL_RCC_OscConfig+0x4e0>)
 80041e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041e6:	f7fd fb3d 	bl	8001864 <HAL_GetTick>
 80041ea:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ee:	f7fd fb39 	bl	8001864 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b64      	cmp	r3, #100	; 0x64
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e1cc      	b.n	800459a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <HAL_RCC_OscConfig+0x4e0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d10b      	bne.n	800422c <HAL_RCC_OscConfig+0x4e4>
 8004214:	4b03      	ldr	r3, [pc, #12]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	4a02      	ldr	r2, [pc, #8]	; (8004224 <HAL_RCC_OscConfig+0x4dc>)
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	6713      	str	r3, [r2, #112]	; 0x70
 8004220:	e05b      	b.n	80042da <HAL_RCC_OscConfig+0x592>
 8004222:	bf00      	nop
 8004224:	58024400 	.word	0x58024400
 8004228:	58024800 	.word	0x58024800
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d112      	bne.n	800425a <HAL_RCC_OscConfig+0x512>
 8004234:	4b9d      	ldr	r3, [pc, #628]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	4a9c      	ldr	r2, [pc, #624]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	6713      	str	r3, [r2, #112]	; 0x70
 8004240:	4b9a      	ldr	r3, [pc, #616]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	4a99      	ldr	r2, [pc, #612]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800424a:	6713      	str	r3, [r2, #112]	; 0x70
 800424c:	4b97      	ldr	r3, [pc, #604]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 800424e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004250:	4a96      	ldr	r2, [pc, #600]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004252:	f023 0304 	bic.w	r3, r3, #4
 8004256:	6713      	str	r3, [r2, #112]	; 0x70
 8004258:	e03f      	b.n	80042da <HAL_RCC_OscConfig+0x592>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b05      	cmp	r3, #5
 8004260:	d112      	bne.n	8004288 <HAL_RCC_OscConfig+0x540>
 8004262:	4b92      	ldr	r3, [pc, #584]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	4a91      	ldr	r2, [pc, #580]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004268:	f043 0304 	orr.w	r3, r3, #4
 800426c:	6713      	str	r3, [r2, #112]	; 0x70
 800426e:	4b8f      	ldr	r3, [pc, #572]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004272:	4a8e      	ldr	r2, [pc, #568]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004278:	6713      	str	r3, [r2, #112]	; 0x70
 800427a:	4b8c      	ldr	r3, [pc, #560]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	4a8b      	ldr	r2, [pc, #556]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	6713      	str	r3, [r2, #112]	; 0x70
 8004286:	e028      	b.n	80042da <HAL_RCC_OscConfig+0x592>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b85      	cmp	r3, #133	; 0x85
 800428e:	d112      	bne.n	80042b6 <HAL_RCC_OscConfig+0x56e>
 8004290:	4b86      	ldr	r3, [pc, #536]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	4a85      	ldr	r2, [pc, #532]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004296:	f043 0304 	orr.w	r3, r3, #4
 800429a:	6713      	str	r3, [r2, #112]	; 0x70
 800429c:	4b83      	ldr	r3, [pc, #524]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a0:	4a82      	ldr	r2, [pc, #520]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 80042a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a6:	6713      	str	r3, [r2, #112]	; 0x70
 80042a8:	4b80      	ldr	r3, [pc, #512]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	4a7f      	ldr	r2, [pc, #508]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	6713      	str	r3, [r2, #112]	; 0x70
 80042b4:	e011      	b.n	80042da <HAL_RCC_OscConfig+0x592>
 80042b6:	4b7d      	ldr	r3, [pc, #500]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	4a7c      	ldr	r2, [pc, #496]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	6713      	str	r3, [r2, #112]	; 0x70
 80042c2:	4b7a      	ldr	r3, [pc, #488]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c6:	4a79      	ldr	r2, [pc, #484]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 80042c8:	f023 0304 	bic.w	r3, r3, #4
 80042cc:	6713      	str	r3, [r2, #112]	; 0x70
 80042ce:	4b77      	ldr	r3, [pc, #476]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	4a76      	ldr	r2, [pc, #472]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 80042d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d015      	beq.n	800430e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e2:	f7fd fabf 	bl	8001864 <HAL_GetTick>
 80042e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042e8:	e00a      	b.n	8004300 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	f7fd fabb 	bl	8001864 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e14c      	b.n	800459a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004300:	4b6a      	ldr	r3, [pc, #424]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0ee      	beq.n	80042ea <HAL_RCC_OscConfig+0x5a2>
 800430c:	e014      	b.n	8004338 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430e:	f7fd faa9 	bl	8001864 <HAL_GetTick>
 8004312:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004314:	e00a      	b.n	800432c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004316:	f7fd faa5 	bl	8001864 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f241 3288 	movw	r2, #5000	; 0x1388
 8004324:	4293      	cmp	r3, r2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e136      	b.n	800459a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800432c:	4b5f      	ldr	r3, [pc, #380]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1ee      	bne.n	8004316 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 812b 	beq.w	8004598 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004342:	4b5a      	ldr	r3, [pc, #360]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800434a:	2b18      	cmp	r3, #24
 800434c:	f000 80bb 	beq.w	80044c6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	2b02      	cmp	r3, #2
 8004356:	f040 8095 	bne.w	8004484 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435a:	4b54      	ldr	r3, [pc, #336]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a53      	ldr	r2, [pc, #332]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004360:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004366:	f7fd fa7d 	bl	8001864 <HAL_GetTick>
 800436a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800436e:	f7fd fa79 	bl	8001864 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e10c      	b.n	800459a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004380:	4b4a      	ldr	r3, [pc, #296]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1f0      	bne.n	800436e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800438c:	4b47      	ldr	r3, [pc, #284]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 800438e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004390:	4b47      	ldr	r3, [pc, #284]	; (80044b0 <HAL_RCC_OscConfig+0x768>)
 8004392:	4013      	ands	r3, r2
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800439c:	0112      	lsls	r2, r2, #4
 800439e:	430a      	orrs	r2, r1
 80043a0:	4942      	ldr	r1, [pc, #264]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	628b      	str	r3, [r1, #40]	; 0x28
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	3b01      	subs	r3, #1
 80043ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b4:	3b01      	subs	r3, #1
 80043b6:	025b      	lsls	r3, r3, #9
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	3b01      	subs	r3, #1
 80043c2:	041b      	lsls	r3, r3, #16
 80043c4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	3b01      	subs	r3, #1
 80043d0:	061b      	lsls	r3, r3, #24
 80043d2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043d6:	4935      	ldr	r1, [pc, #212]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80043dc:	4b33      	ldr	r3, [pc, #204]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	4a32      	ldr	r2, [pc, #200]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043e8:	4b30      	ldr	r3, [pc, #192]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 80043ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ec:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <HAL_RCC_OscConfig+0x76c>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043f4:	00d2      	lsls	r2, r2, #3
 80043f6:	492d      	ldr	r1, [pc, #180]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80043fc:	4b2b      	ldr	r3, [pc, #172]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	f023 020c 	bic.w	r2, r3, #12
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	4928      	ldr	r1, [pc, #160]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 800440a:	4313      	orrs	r3, r2
 800440c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800440e:	4b27      	ldr	r3, [pc, #156]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	f023 0202 	bic.w	r2, r3, #2
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	4924      	ldr	r1, [pc, #144]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 800441c:	4313      	orrs	r3, r2
 800441e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004420:	4b22      	ldr	r3, [pc, #136]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	4a21      	ldr	r2, [pc, #132]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800442c:	4b1f      	ldr	r3, [pc, #124]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	4a1e      	ldr	r2, [pc, #120]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004436:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004438:	4b1c      	ldr	r3, [pc, #112]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	4a1b      	ldr	r2, [pc, #108]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 800443e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004442:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004444:	4b19      	ldr	r3, [pc, #100]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	4a18      	ldr	r2, [pc, #96]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004450:	4b16      	ldr	r3, [pc, #88]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a15      	ldr	r2, [pc, #84]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800445a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fd fa02 	bl	8001864 <HAL_GetTick>
 8004460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004464:	f7fd f9fe 	bl	8001864 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e091      	b.n	800459a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004476:	4b0d      	ldr	r3, [pc, #52]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0x71c>
 8004482:	e089      	b.n	8004598 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a08      	ldr	r2, [pc, #32]	; (80044ac <HAL_RCC_OscConfig+0x764>)
 800448a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800448e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004490:	f7fd f9e8 	bl	8001864 <HAL_GetTick>
 8004494:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004496:	e00f      	b.n	80044b8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004498:	f7fd f9e4 	bl	8001864 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d908      	bls.n	80044b8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e077      	b.n	800459a <HAL_RCC_OscConfig+0x852>
 80044aa:	bf00      	nop
 80044ac:	58024400 	.word	0x58024400
 80044b0:	fffffc0c 	.word	0xfffffc0c
 80044b4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044b8:	4b3a      	ldr	r3, [pc, #232]	; (80045a4 <HAL_RCC_OscConfig+0x85c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e9      	bne.n	8004498 <HAL_RCC_OscConfig+0x750>
 80044c4:	e068      	b.n	8004598 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80044c6:	4b37      	ldr	r3, [pc, #220]	; (80045a4 <HAL_RCC_OscConfig+0x85c>)
 80044c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80044cc:	4b35      	ldr	r3, [pc, #212]	; (80045a4 <HAL_RCC_OscConfig+0x85c>)
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d031      	beq.n	800453e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f003 0203 	and.w	r2, r3, #3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d12a      	bne.n	800453e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	091b      	lsrs	r3, r3, #4
 80044ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d122      	bne.n	800453e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d11a      	bne.n	800453e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	0a5b      	lsrs	r3, r3, #9
 800450c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004514:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004516:	429a      	cmp	r2, r3
 8004518:	d111      	bne.n	800453e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	0c1b      	lsrs	r3, r3, #16
 800451e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d108      	bne.n	800453e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	0e1b      	lsrs	r3, r3, #24
 8004530:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004538:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d001      	beq.n	8004542 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e02b      	b.n	800459a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004542:	4b18      	ldr	r3, [pc, #96]	; (80045a4 <HAL_RCC_OscConfig+0x85c>)
 8004544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004546:	08db      	lsrs	r3, r3, #3
 8004548:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800454c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	429a      	cmp	r2, r3
 8004556:	d01f      	beq.n	8004598 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004558:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <HAL_RCC_OscConfig+0x85c>)
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	4a11      	ldr	r2, [pc, #68]	; (80045a4 <HAL_RCC_OscConfig+0x85c>)
 800455e:	f023 0301 	bic.w	r3, r3, #1
 8004562:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004564:	f7fd f97e 	bl	8001864 <HAL_GetTick>
 8004568:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800456a:	bf00      	nop
 800456c:	f7fd f97a 	bl	8001864 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	4293      	cmp	r3, r2
 8004576:	d0f9      	beq.n	800456c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004578:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <HAL_RCC_OscConfig+0x85c>)
 800457a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800457c:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <HAL_RCC_OscConfig+0x860>)
 800457e:	4013      	ands	r3, r2
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004584:	00d2      	lsls	r2, r2, #3
 8004586:	4907      	ldr	r1, [pc, #28]	; (80045a4 <HAL_RCC_OscConfig+0x85c>)
 8004588:	4313      	orrs	r3, r2
 800458a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCC_OscConfig+0x85c>)
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	4a04      	ldr	r2, [pc, #16]	; (80045a4 <HAL_RCC_OscConfig+0x85c>)
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3730      	adds	r7, #48	; 0x30
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	58024400 	.word	0x58024400
 80045a8:	ffff0007 	.word	0xffff0007

080045ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e19c      	b.n	80048fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045c0:	4b8a      	ldr	r3, [pc, #552]	; (80047ec <HAL_RCC_ClockConfig+0x240>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d910      	bls.n	80045f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ce:	4b87      	ldr	r3, [pc, #540]	; (80047ec <HAL_RCC_ClockConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 020f 	bic.w	r2, r3, #15
 80045d6:	4985      	ldr	r1, [pc, #532]	; (80047ec <HAL_RCC_ClockConfig+0x240>)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	4313      	orrs	r3, r2
 80045dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045de:	4b83      	ldr	r3, [pc, #524]	; (80047ec <HAL_RCC_ClockConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e184      	b.n	80048fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d010      	beq.n	800461e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	4b7b      	ldr	r3, [pc, #492]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004608:	429a      	cmp	r2, r3
 800460a:	d908      	bls.n	800461e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800460c:	4b78      	ldr	r3, [pc, #480]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	4975      	ldr	r1, [pc, #468]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 800461a:	4313      	orrs	r3, r2
 800461c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d010      	beq.n	800464c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695a      	ldr	r2, [r3, #20]
 800462e:	4b70      	ldr	r3, [pc, #448]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004636:	429a      	cmp	r2, r3
 8004638:	d908      	bls.n	800464c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800463a:	4b6d      	ldr	r3, [pc, #436]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	496a      	ldr	r1, [pc, #424]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 8004648:	4313      	orrs	r3, r2
 800464a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0310 	and.w	r3, r3, #16
 8004654:	2b00      	cmp	r3, #0
 8004656:	d010      	beq.n	800467a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699a      	ldr	r2, [r3, #24]
 800465c:	4b64      	ldr	r3, [pc, #400]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004664:	429a      	cmp	r2, r3
 8004666:	d908      	bls.n	800467a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004668:	4b61      	ldr	r3, [pc, #388]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	495e      	ldr	r1, [pc, #376]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 8004676:	4313      	orrs	r3, r2
 8004678:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d010      	beq.n	80046a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69da      	ldr	r2, [r3, #28]
 800468a:	4b59      	ldr	r3, [pc, #356]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004692:	429a      	cmp	r2, r3
 8004694:	d908      	bls.n	80046a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004696:	4b56      	ldr	r3, [pc, #344]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	4953      	ldr	r1, [pc, #332]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d010      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	4b4d      	ldr	r3, [pc, #308]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d908      	bls.n	80046d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c4:	4b4a      	ldr	r3, [pc, #296]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	f023 020f 	bic.w	r2, r3, #15
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4947      	ldr	r1, [pc, #284]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d055      	beq.n	800478e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80046e2:	4b43      	ldr	r3, [pc, #268]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	4940      	ldr	r1, [pc, #256]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d107      	bne.n	800470c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046fc:	4b3c      	ldr	r3, [pc, #240]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d121      	bne.n	800474c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0f6      	b.n	80048fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b03      	cmp	r3, #3
 8004712:	d107      	bne.n	8004724 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004714:	4b36      	ldr	r3, [pc, #216]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d115      	bne.n	800474c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e0ea      	b.n	80048fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d107      	bne.n	800473c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800472c:	4b30      	ldr	r3, [pc, #192]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0de      	b.n	80048fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800473c:	4b2c      	ldr	r3, [pc, #176]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0d6      	b.n	80048fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800474c:	4b28      	ldr	r3, [pc, #160]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f023 0207 	bic.w	r2, r3, #7
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4925      	ldr	r1, [pc, #148]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 800475a:	4313      	orrs	r3, r2
 800475c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800475e:	f7fd f881 	bl	8001864 <HAL_GetTick>
 8004762:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004764:	e00a      	b.n	800477c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004766:	f7fd f87d 	bl	8001864 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	f241 3288 	movw	r2, #5000	; 0x1388
 8004774:	4293      	cmp	r3, r2
 8004776:	d901      	bls.n	800477c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e0be      	b.n	80048fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477c:	4b1c      	ldr	r3, [pc, #112]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	429a      	cmp	r2, r3
 800478c:	d1eb      	bne.n	8004766 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d010      	beq.n	80047bc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d208      	bcs.n	80047bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047aa:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f023 020f 	bic.w	r2, r3, #15
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	490e      	ldr	r1, [pc, #56]	; (80047f0 <HAL_RCC_ClockConfig+0x244>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047bc:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <HAL_RCC_ClockConfig+0x240>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d214      	bcs.n	80047f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ca:	4b08      	ldr	r3, [pc, #32]	; (80047ec <HAL_RCC_ClockConfig+0x240>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 020f 	bic.w	r2, r3, #15
 80047d2:	4906      	ldr	r1, [pc, #24]	; (80047ec <HAL_RCC_ClockConfig+0x240>)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047da:	4b04      	ldr	r3, [pc, #16]	; (80047ec <HAL_RCC_ClockConfig+0x240>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e086      	b.n	80048fa <HAL_RCC_ClockConfig+0x34e>
 80047ec:	52002000 	.word	0x52002000
 80047f0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d010      	beq.n	8004822 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	4b3f      	ldr	r3, [pc, #252]	; (8004904 <HAL_RCC_ClockConfig+0x358>)
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800480c:	429a      	cmp	r2, r3
 800480e:	d208      	bcs.n	8004822 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004810:	4b3c      	ldr	r3, [pc, #240]	; (8004904 <HAL_RCC_ClockConfig+0x358>)
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	4939      	ldr	r1, [pc, #228]	; (8004904 <HAL_RCC_ClockConfig+0x358>)
 800481e:	4313      	orrs	r3, r2
 8004820:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d010      	beq.n	8004850 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695a      	ldr	r2, [r3, #20]
 8004832:	4b34      	ldr	r3, [pc, #208]	; (8004904 <HAL_RCC_ClockConfig+0x358>)
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800483a:	429a      	cmp	r2, r3
 800483c:	d208      	bcs.n	8004850 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800483e:	4b31      	ldr	r3, [pc, #196]	; (8004904 <HAL_RCC_ClockConfig+0x358>)
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	492e      	ldr	r1, [pc, #184]	; (8004904 <HAL_RCC_ClockConfig+0x358>)
 800484c:	4313      	orrs	r3, r2
 800484e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b00      	cmp	r3, #0
 800485a:	d010      	beq.n	800487e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699a      	ldr	r2, [r3, #24]
 8004860:	4b28      	ldr	r3, [pc, #160]	; (8004904 <HAL_RCC_ClockConfig+0x358>)
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004868:	429a      	cmp	r2, r3
 800486a:	d208      	bcs.n	800487e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800486c:	4b25      	ldr	r3, [pc, #148]	; (8004904 <HAL_RCC_ClockConfig+0x358>)
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	4922      	ldr	r1, [pc, #136]	; (8004904 <HAL_RCC_ClockConfig+0x358>)
 800487a:	4313      	orrs	r3, r2
 800487c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0320 	and.w	r3, r3, #32
 8004886:	2b00      	cmp	r3, #0
 8004888:	d010      	beq.n	80048ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69da      	ldr	r2, [r3, #28]
 800488e:	4b1d      	ldr	r3, [pc, #116]	; (8004904 <HAL_RCC_ClockConfig+0x358>)
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004896:	429a      	cmp	r2, r3
 8004898:	d208      	bcs.n	80048ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800489a:	4b1a      	ldr	r3, [pc, #104]	; (8004904 <HAL_RCC_ClockConfig+0x358>)
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	4917      	ldr	r1, [pc, #92]	; (8004904 <HAL_RCC_ClockConfig+0x358>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80048ac:	f000 f834 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 80048b0:	4602      	mov	r2, r0
 80048b2:	4b14      	ldr	r3, [pc, #80]	; (8004904 <HAL_RCC_ClockConfig+0x358>)
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	0a1b      	lsrs	r3, r3, #8
 80048b8:	f003 030f 	and.w	r3, r3, #15
 80048bc:	4912      	ldr	r1, [pc, #72]	; (8004908 <HAL_RCC_ClockConfig+0x35c>)
 80048be:	5ccb      	ldrb	r3, [r1, r3]
 80048c0:	f003 031f 	and.w	r3, r3, #31
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
 80048c8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80048ca:	4b0e      	ldr	r3, [pc, #56]	; (8004904 <HAL_RCC_ClockConfig+0x358>)
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	4a0d      	ldr	r2, [pc, #52]	; (8004908 <HAL_RCC_ClockConfig+0x35c>)
 80048d4:	5cd3      	ldrb	r3, [r2, r3]
 80048d6:	f003 031f 	and.w	r3, r3, #31
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
 80048e0:	4a0a      	ldr	r2, [pc, #40]	; (800490c <HAL_RCC_ClockConfig+0x360>)
 80048e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048e4:	4a0a      	ldr	r2, [pc, #40]	; (8004910 <HAL_RCC_ClockConfig+0x364>)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80048ea:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <HAL_RCC_ClockConfig+0x368>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fc ff6e 	bl	80017d0 <HAL_InitTick>
 80048f4:	4603      	mov	r3, r0
 80048f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	58024400 	.word	0x58024400
 8004908:	0800b2ec 	.word	0x0800b2ec
 800490c:	2400000c 	.word	0x2400000c
 8004910:	24000008 	.word	0x24000008
 8004914:	24000010 	.word	0x24000010

08004918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004918:	b480      	push	{r7}
 800491a:	b089      	sub	sp, #36	; 0x24
 800491c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800491e:	4bb3      	ldr	r3, [pc, #716]	; (8004bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004926:	2b18      	cmp	r3, #24
 8004928:	f200 8155 	bhi.w	8004bd6 <HAL_RCC_GetSysClockFreq+0x2be>
 800492c:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <HAL_RCC_GetSysClockFreq+0x1c>)
 800492e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004932:	bf00      	nop
 8004934:	08004999 	.word	0x08004999
 8004938:	08004bd7 	.word	0x08004bd7
 800493c:	08004bd7 	.word	0x08004bd7
 8004940:	08004bd7 	.word	0x08004bd7
 8004944:	08004bd7 	.word	0x08004bd7
 8004948:	08004bd7 	.word	0x08004bd7
 800494c:	08004bd7 	.word	0x08004bd7
 8004950:	08004bd7 	.word	0x08004bd7
 8004954:	080049bf 	.word	0x080049bf
 8004958:	08004bd7 	.word	0x08004bd7
 800495c:	08004bd7 	.word	0x08004bd7
 8004960:	08004bd7 	.word	0x08004bd7
 8004964:	08004bd7 	.word	0x08004bd7
 8004968:	08004bd7 	.word	0x08004bd7
 800496c:	08004bd7 	.word	0x08004bd7
 8004970:	08004bd7 	.word	0x08004bd7
 8004974:	080049c5 	.word	0x080049c5
 8004978:	08004bd7 	.word	0x08004bd7
 800497c:	08004bd7 	.word	0x08004bd7
 8004980:	08004bd7 	.word	0x08004bd7
 8004984:	08004bd7 	.word	0x08004bd7
 8004988:	08004bd7 	.word	0x08004bd7
 800498c:	08004bd7 	.word	0x08004bd7
 8004990:	08004bd7 	.word	0x08004bd7
 8004994:	080049cb 	.word	0x080049cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004998:	4b94      	ldr	r3, [pc, #592]	; (8004bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d009      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049a4:	4b91      	ldr	r3, [pc, #580]	; (8004bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	08db      	lsrs	r3, r3, #3
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	4a90      	ldr	r2, [pc, #576]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
 80049b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80049b6:	e111      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80049b8:	4b8d      	ldr	r3, [pc, #564]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049ba:	61bb      	str	r3, [r7, #24]
      break;
 80049bc:	e10e      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80049be:	4b8d      	ldr	r3, [pc, #564]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049c0:	61bb      	str	r3, [r7, #24]
      break;
 80049c2:	e10b      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80049c4:	4b8c      	ldr	r3, [pc, #560]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80049c6:	61bb      	str	r3, [r7, #24]
      break;
 80049c8:	e108      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049ca:	4b88      	ldr	r3, [pc, #544]	; (8004bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80049d4:	4b85      	ldr	r3, [pc, #532]	; (8004bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	091b      	lsrs	r3, r3, #4
 80049da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80049e0:	4b82      	ldr	r3, [pc, #520]	; (8004bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80049ea:	4b80      	ldr	r3, [pc, #512]	; (8004bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ee:	08db      	lsrs	r3, r3, #3
 80049f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	fb02 f303 	mul.w	r3, r2, r3
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a02:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 80e1 	beq.w	8004bd0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	f000 8083 	beq.w	8004b1c <HAL_RCC_GetSysClockFreq+0x204>
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	f200 80a1 	bhi.w	8004b60 <HAL_RCC_GetSysClockFreq+0x248>
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_RCC_GetSysClockFreq+0x114>
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d056      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004a2a:	e099      	b.n	8004b60 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a2c:	4b6f      	ldr	r3, [pc, #444]	; (8004bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d02d      	beq.n	8004a94 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a38:	4b6c      	ldr	r3, [pc, #432]	; (8004bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	08db      	lsrs	r3, r3, #3
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	4a6b      	ldr	r2, [pc, #428]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
 8004a48:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	ee07 3a90 	vmov	s15, r3
 8004a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a62:	4b62      	ldr	r3, [pc, #392]	; (8004bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a76:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004a92:	e087      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004c00 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa6:	4b51      	ldr	r3, [pc, #324]	; (8004bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aba:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ad6:	e065      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004c04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aea:	4b40      	ldr	r3, [pc, #256]	; (8004bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004afe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b1a:	e043      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b26:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004c08 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2e:	4b2f      	ldr	r3, [pc, #188]	; (8004bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b42:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b5e:	e021      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004c04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b72:	4b1e      	ldr	r3, [pc, #120]	; (8004bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b86:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ba2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004ba4:	4b11      	ldr	r3, [pc, #68]	; (8004bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	0a5b      	lsrs	r3, r3, #9
 8004baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bae:	3301      	adds	r3, #1
 8004bb0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	ee07 3a90 	vmov	s15, r3
 8004bb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bc8:	ee17 3a90 	vmov	r3, s15
 8004bcc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004bce:	e005      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	61bb      	str	r3, [r7, #24]
      break;
 8004bd4:	e002      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004bd6:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004bd8:	61bb      	str	r3, [r7, #24]
      break;
 8004bda:	bf00      	nop
  }

  return sysclockfreq;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3724      	adds	r7, #36	; 0x24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	58024400 	.word	0x58024400
 8004bf0:	03d09000 	.word	0x03d09000
 8004bf4:	003d0900 	.word	0x003d0900
 8004bf8:	007a1200 	.word	0x007a1200
 8004bfc:	46000000 	.word	0x46000000
 8004c00:	4c742400 	.word	0x4c742400
 8004c04:	4a742400 	.word	0x4a742400
 8004c08:	4af42400 	.word	0x4af42400

08004c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004c12:	f7ff fe81 	bl	8004918 <HAL_RCC_GetSysClockFreq>
 8004c16:	4602      	mov	r2, r0
 8004c18:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <HAL_RCC_GetHCLKFreq+0x50>)
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	0a1b      	lsrs	r3, r3, #8
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	490f      	ldr	r1, [pc, #60]	; (8004c60 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c24:	5ccb      	ldrb	r3, [r1, r3]
 8004c26:	f003 031f 	and.w	r3, r3, #31
 8004c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004c30:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <HAL_RCC_GetHCLKFreq+0x50>)
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	4a09      	ldr	r2, [pc, #36]	; (8004c60 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c3a:	5cd3      	ldrb	r3, [r2, r3]
 8004c3c:	f003 031f 	and.w	r3, r3, #31
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	fa22 f303 	lsr.w	r3, r2, r3
 8004c46:	4a07      	ldr	r2, [pc, #28]	; (8004c64 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c4a:	4a07      	ldr	r2, [pc, #28]	; (8004c68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c50:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c52:	681b      	ldr	r3, [r3, #0]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	58024400 	.word	0x58024400
 8004c60:	0800b2ec 	.word	0x0800b2ec
 8004c64:	2400000c 	.word	0x2400000c
 8004c68:	24000008 	.word	0x24000008

08004c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004c70:	f7ff ffcc 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c74:	4602      	mov	r2, r0
 8004c76:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	091b      	lsrs	r3, r3, #4
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	4904      	ldr	r1, [pc, #16]	; (8004c94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c82:	5ccb      	ldrb	r3, [r1, r3]
 8004c84:	f003 031f 	and.w	r3, r3, #31
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	58024400 	.word	0x58024400
 8004c94:	0800b2ec 	.word	0x0800b2ec

08004c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004c9c:	f7ff ffb6 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	0a1b      	lsrs	r3, r3, #8
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	4904      	ldr	r1, [pc, #16]	; (8004cc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cae:	5ccb      	ldrb	r3, [r1, r3]
 8004cb0:	f003 031f 	and.w	r3, r3, #31
 8004cb4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	58024400 	.word	0x58024400
 8004cc0:	0800b2ec 	.word	0x0800b2ec

08004cc4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc8:	b0c8      	sub	sp, #288	; 0x120
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004ce8:	2500      	movs	r5, #0
 8004cea:	ea54 0305 	orrs.w	r3, r4, r5
 8004cee:	d049      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cf6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cfa:	d02f      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004cfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d00:	d828      	bhi.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d06:	d01a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d0c:	d822      	bhi.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d16:	d007      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d18:	e01c      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d1a:	4ba7      	ldr	r3, [pc, #668]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1e:	4aa6      	ldr	r2, [pc, #664]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d26:	e01a      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d2c:	3308      	adds	r3, #8
 8004d2e:	2102      	movs	r1, #2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f002 fa6d 	bl	8007210 <RCCEx_PLL2_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d3c:	e00f      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d42:	3328      	adds	r3, #40	; 0x28
 8004d44:	2102      	movs	r1, #2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f002 fb14 	bl	8007374 <RCCEx_PLL3_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d52:	e004      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d5a:	e000      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d66:	4b94      	ldr	r3, [pc, #592]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d74:	4a90      	ldr	r2, [pc, #576]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d76:	430b      	orrs	r3, r1
 8004d78:	6513      	str	r3, [r2, #80]	; 0x50
 8004d7a:	e003      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004d90:	f04f 0900 	mov.w	r9, #0
 8004d94:	ea58 0309 	orrs.w	r3, r8, r9
 8004d98:	d047      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d82a      	bhi.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004dc1 	.word	0x08004dc1
 8004db0:	08004dcf 	.word	0x08004dcf
 8004db4:	08004de5 	.word	0x08004de5
 8004db8:	08004e03 	.word	0x08004e03
 8004dbc:	08004e03 	.word	0x08004e03
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dc0:	4b7d      	ldr	r3, [pc, #500]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	4a7c      	ldr	r2, [pc, #496]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004dcc:	e01a      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd2:	3308      	adds	r3, #8
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f002 fa1a 	bl	8007210 <RCCEx_PLL2_Config>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004de2:	e00f      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de8:	3328      	adds	r3, #40	; 0x28
 8004dea:	2100      	movs	r1, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f002 fac1 	bl	8007374 <RCCEx_PLL3_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004df8:	e004      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004e00:	e000      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e0c:	4b6a      	ldr	r3, [pc, #424]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e10:	f023 0107 	bic.w	r1, r3, #7
 8004e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1a:	4a67      	ldr	r2, [pc, #412]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	6513      	str	r3, [r2, #80]	; 0x50
 8004e20:	e003      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e26:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004e36:	f04f 0b00 	mov.w	fp, #0
 8004e3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004e3e:	d054      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e46:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004e4a:	d036      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004e4c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004e50:	d82f      	bhi.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e56:	d032      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e5c:	d829      	bhi.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004e5e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e60:	d02f      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004e62:	2bc0      	cmp	r3, #192	; 0xc0
 8004e64:	d825      	bhi.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004e66:	2b80      	cmp	r3, #128	; 0x80
 8004e68:	d018      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004e6a:	2b80      	cmp	r3, #128	; 0x80
 8004e6c:	d821      	bhi.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004e72:	2b40      	cmp	r3, #64	; 0x40
 8004e74:	d007      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004e76:	e01c      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e78:	4b4f      	ldr	r3, [pc, #316]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	4a4e      	ldr	r2, [pc, #312]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004e84:	e01e      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f002 f9be 	bl	8007210 <RCCEx_PLL2_Config>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004e9a:	e013      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea0:	3328      	adds	r3, #40	; 0x28
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f002 fa65 	bl	8007374 <RCCEx_PLL3_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004eb8:	e004      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004eba:	bf00      	nop
 8004ebc:	e002      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004ebe:	bf00      	nop
 8004ec0:	e000      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10a      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004ecc:	4b3a      	ldr	r3, [pc, #232]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eda:	4a37      	ldr	r2, [pc, #220]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004edc:	430b      	orrs	r3, r1
 8004ede:	6513      	str	r3, [r2, #80]	; 0x50
 8004ee0:	e003      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ee6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004ef6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004efa:	2300      	movs	r3, #0
 8004efc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f00:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004f04:	460b      	mov	r3, r1
 8004f06:	4313      	orrs	r3, r2
 8004f08:	d05c      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f10:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004f14:	d03b      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004f16:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004f1a:	d834      	bhi.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f20:	d037      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f26:	d82e      	bhi.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004f28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f2c:	d033      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004f2e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f32:	d828      	bhi.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f38:	d01a      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3e:	d822      	bhi.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f48:	d007      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004f4a:	e01c      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f4c:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	4a19      	ldr	r2, [pc, #100]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004f58:	e01e      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f5e:	3308      	adds	r3, #8
 8004f60:	2100      	movs	r1, #0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f002 f954 	bl	8007210 <RCCEx_PLL2_Config>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004f6e:	e013      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f74:	3328      	adds	r3, #40	; 0x28
 8004f76:	2100      	movs	r1, #0
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f002 f9fb 	bl	8007374 <RCCEx_PLL3_Config>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004f84:	e008      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004f8c:	e004      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004f8e:	bf00      	nop
 8004f90:	e002      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004f92:	bf00      	nop
 8004f94:	e000      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004f96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10d      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fae:	4a02      	ldr	r2, [pc, #8]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fb0:	430b      	orrs	r3, r1
 8004fb2:	6513      	str	r3, [r2, #80]	; 0x50
 8004fb4:	e006      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004fb6:	bf00      	nop
 8004fb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fc0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004fd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004fda:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	d03a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fea:	2b30      	cmp	r3, #48	; 0x30
 8004fec:	d01f      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004fee:	2b30      	cmp	r3, #48	; 0x30
 8004ff0:	d819      	bhi.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	d00c      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d815      	bhi.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d019      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004ffe:	2b10      	cmp	r3, #16
 8005000:	d111      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005002:	4bae      	ldr	r3, [pc, #696]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005006:	4aad      	ldr	r2, [pc, #692]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800500c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800500e:	e011      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005014:	3308      	adds	r3, #8
 8005016:	2102      	movs	r1, #2
 8005018:	4618      	mov	r0, r3
 800501a:	f002 f8f9 	bl	8007210 <RCCEx_PLL2_Config>
 800501e:	4603      	mov	r3, r0
 8005020:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005024:	e006      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800502c:	e002      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800502e:	bf00      	nop
 8005030:	e000      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005034:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10a      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800503c:	4b9f      	ldr	r3, [pc, #636]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800503e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005040:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504a:	4a9c      	ldr	r2, [pc, #624]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800504c:	430b      	orrs	r3, r1
 800504e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005050:	e003      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005052:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005056:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800505a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005062:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005066:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800506a:	2300      	movs	r3, #0
 800506c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005070:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005074:	460b      	mov	r3, r1
 8005076:	4313      	orrs	r3, r2
 8005078:	d051      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800507a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800507e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005084:	d035      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005086:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800508a:	d82e      	bhi.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 800508c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005090:	d031      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005092:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005096:	d828      	bhi.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800509c:	d01a      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800509e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a2:	d822      	bhi.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80050a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ac:	d007      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80050ae:	e01c      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b0:	4b82      	ldr	r3, [pc, #520]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	4a81      	ldr	r2, [pc, #516]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80050bc:	e01c      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050c2:	3308      	adds	r3, #8
 80050c4:	2100      	movs	r1, #0
 80050c6:	4618      	mov	r0, r3
 80050c8:	f002 f8a2 	bl	8007210 <RCCEx_PLL2_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80050d2:	e011      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050d8:	3328      	adds	r3, #40	; 0x28
 80050da:	2100      	movs	r1, #0
 80050dc:	4618      	mov	r0, r3
 80050de:	f002 f949 	bl	8007374 <RCCEx_PLL3_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80050e8:	e006      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80050f0:	e002      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80050f2:	bf00      	nop
 80050f4:	e000      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80050f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10a      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005100:	4b6e      	ldr	r3, [pc, #440]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005104:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005108:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800510c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800510e:	4a6b      	ldr	r2, [pc, #428]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005110:	430b      	orrs	r3, r1
 8005112:	6513      	str	r3, [r2, #80]	; 0x50
 8005114:	e003      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005116:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800511a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800511e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800512a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800512e:	2300      	movs	r3, #0
 8005130:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005134:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005138:	460b      	mov	r3, r1
 800513a:	4313      	orrs	r3, r2
 800513c:	d053      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800513e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005148:	d033      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800514a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800514e:	d82c      	bhi.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005150:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005154:	d02f      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005156:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800515a:	d826      	bhi.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800515c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005160:	d02b      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005162:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005166:	d820      	bhi.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800516c:	d012      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800516e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005172:	d81a      	bhi.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d022      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800517c:	d115      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800517e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005182:	3308      	adds	r3, #8
 8005184:	2101      	movs	r1, #1
 8005186:	4618      	mov	r0, r3
 8005188:	f002 f842 	bl	8007210 <RCCEx_PLL2_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005192:	e015      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005198:	3328      	adds	r3, #40	; 0x28
 800519a:	2101      	movs	r1, #1
 800519c:	4618      	mov	r0, r3
 800519e:	f002 f8e9 	bl	8007374 <RCCEx_PLL3_Config>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80051a8:	e00a      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80051b0:	e006      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80051b2:	bf00      	nop
 80051b4:	e004      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80051b6:	bf00      	nop
 80051b8:	e002      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80051ba:	bf00      	nop
 80051bc:	e000      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80051be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10a      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80051c8:	4b3c      	ldr	r3, [pc, #240]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051cc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80051d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051d6:	4a39      	ldr	r2, [pc, #228]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051d8:	430b      	orrs	r3, r1
 80051da:	6513      	str	r3, [r2, #80]	; 0x50
 80051dc:	e003      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80051e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ee:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80051f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051f6:	2300      	movs	r3, #0
 80051f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051fc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005200:	460b      	mov	r3, r1
 8005202:	4313      	orrs	r3, r2
 8005204:	d060      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800520a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800520e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005212:	d039      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005214:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005218:	d832      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800521a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800521e:	d035      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005224:	d82c      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522a:	d031      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005230:	d826      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005232:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005236:	d02d      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005238:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800523c:	d820      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800523e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005242:	d012      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005248:	d81a      	bhi.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800524a:	2b00      	cmp	r3, #0
 800524c:	d024      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800524e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005252:	d115      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005258:	3308      	adds	r3, #8
 800525a:	2101      	movs	r1, #1
 800525c:	4618      	mov	r0, r3
 800525e:	f001 ffd7 	bl	8007210 <RCCEx_PLL2_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005268:	e017      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800526a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800526e:	3328      	adds	r3, #40	; 0x28
 8005270:	2101      	movs	r1, #1
 8005272:	4618      	mov	r0, r3
 8005274:	f002 f87e 	bl	8007374 <RCCEx_PLL3_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800527e:	e00c      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005286:	e008      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005288:	bf00      	nop
 800528a:	e006      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800528c:	bf00      	nop
 800528e:	e004      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005290:	bf00      	nop
 8005292:	e002      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005294:	bf00      	nop
 8005296:	e000      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800529a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10e      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80052a2:	4b06      	ldr	r3, [pc, #24]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80052aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052b2:	4a02      	ldr	r2, [pc, #8]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052b4:	430b      	orrs	r3, r1
 80052b6:	6593      	str	r3, [r2, #88]	; 0x58
 80052b8:	e006      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80052ba:	bf00      	nop
 80052bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80052c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80052d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052d8:	2300      	movs	r3, #0
 80052da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80052de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052e2:	460b      	mov	r3, r1
 80052e4:	4313      	orrs	r3, r2
 80052e6:	d037      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80052e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052f2:	d00e      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80052f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052f8:	d816      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d018      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80052fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005302:	d111      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005304:	4bc4      	ldr	r3, [pc, #784]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	4ac3      	ldr	r2, [pc, #780]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800530a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800530e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005310:	e00f      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005316:	3308      	adds	r3, #8
 8005318:	2101      	movs	r1, #1
 800531a:	4618      	mov	r0, r3
 800531c:	f001 ff78 	bl	8007210 <RCCEx_PLL2_Config>
 8005320:	4603      	mov	r3, r0
 8005322:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005326:	e004      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800532e:	e000      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005332:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10a      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800533a:	4bb7      	ldr	r3, [pc, #732]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800533c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005348:	4ab3      	ldr	r2, [pc, #716]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800534a:	430b      	orrs	r3, r1
 800534c:	6513      	str	r3, [r2, #80]	; 0x50
 800534e:	e003      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005350:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005354:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005358:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005360:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005368:	2300      	movs	r3, #0
 800536a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800536e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005372:	460b      	mov	r3, r1
 8005374:	4313      	orrs	r3, r2
 8005376:	d039      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800537c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800537e:	2b03      	cmp	r3, #3
 8005380:	d81c      	bhi.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005382:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005388:	080053c5 	.word	0x080053c5
 800538c:	08005399 	.word	0x08005399
 8005390:	080053a7 	.word	0x080053a7
 8005394:	080053c5 	.word	0x080053c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005398:	4b9f      	ldr	r3, [pc, #636]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	4a9e      	ldr	r2, [pc, #632]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800539e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80053a4:	e00f      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053aa:	3308      	adds	r3, #8
 80053ac:	2102      	movs	r1, #2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f001 ff2e 	bl	8007210 <RCCEx_PLL2_Config>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80053ba:	e004      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80053c2:	e000      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80053c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10a      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80053ce:	4b92      	ldr	r3, [pc, #584]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d2:	f023 0103 	bic.w	r1, r3, #3
 80053d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053dc:	4a8e      	ldr	r2, [pc, #568]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053de:	430b      	orrs	r3, r1
 80053e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053e2:	e003      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80053f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053fc:	2300      	movs	r3, #0
 80053fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005402:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005406:	460b      	mov	r3, r1
 8005408:	4313      	orrs	r3, r2
 800540a:	f000 8099 	beq.w	8005540 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800540e:	4b83      	ldr	r3, [pc, #524]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a82      	ldr	r2, [pc, #520]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005418:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800541a:	f7fc fa23 	bl	8001864 <HAL_GetTick>
 800541e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005422:	e00b      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005424:	f7fc fa1e 	bl	8001864 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b64      	cmp	r3, #100	; 0x64
 8005432:	d903      	bls.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800543a:	e005      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800543c:	4b77      	ldr	r3, [pc, #476]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0ed      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005448:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800544c:	2b00      	cmp	r3, #0
 800544e:	d173      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005450:	4b71      	ldr	r3, [pc, #452]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005458:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800545c:	4053      	eors	r3, r2
 800545e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005462:	2b00      	cmp	r3, #0
 8005464:	d015      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005466:	4b6c      	ldr	r3, [pc, #432]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800546e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005472:	4b69      	ldr	r3, [pc, #420]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005476:	4a68      	ldr	r2, [pc, #416]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800547c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800547e:	4b66      	ldr	r3, [pc, #408]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005482:	4a65      	ldr	r2, [pc, #404]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005488:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800548a:	4a63      	ldr	r2, [pc, #396]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800548c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005490:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005496:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800549a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549e:	d118      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7fc f9e0 	bl	8001864 <HAL_GetTick>
 80054a4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054a8:	e00d      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054aa:	f7fc f9db 	bl	8001864 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80054b4:	1ad2      	subs	r2, r2, r3
 80054b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d903      	bls.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80054c4:	e005      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054c6:	4b54      	ldr	r3, [pc, #336]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0eb      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80054d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d129      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80054e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054ea:	d10e      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80054ec:	4b4a      	ldr	r3, [pc, #296]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80054f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80054fc:	091a      	lsrs	r2, r3, #4
 80054fe:	4b48      	ldr	r3, [pc, #288]	; (8005620 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005500:	4013      	ands	r3, r2
 8005502:	4a45      	ldr	r2, [pc, #276]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005504:	430b      	orrs	r3, r1
 8005506:	6113      	str	r3, [r2, #16]
 8005508:	e005      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800550a:	4b43      	ldr	r3, [pc, #268]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	4a42      	ldr	r2, [pc, #264]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005510:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005514:	6113      	str	r3, [r2, #16]
 8005516:	4b40      	ldr	r3, [pc, #256]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005518:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800551a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800551e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005526:	4a3c      	ldr	r2, [pc, #240]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005528:	430b      	orrs	r3, r1
 800552a:	6713      	str	r3, [r2, #112]	; 0x70
 800552c:	e008      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800552e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005532:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005536:	e003      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005538:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800553c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f002 0301 	and.w	r3, r2, #1
 800554c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005550:	2300      	movs	r3, #0
 8005552:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005556:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800555a:	460b      	mov	r3, r1
 800555c:	4313      	orrs	r3, r2
 800555e:	f000 8090 	beq.w	8005682 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005562:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800556a:	2b28      	cmp	r3, #40	; 0x28
 800556c:	d870      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800556e:	a201      	add	r2, pc, #4	; (adr r2, 8005574 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005574:	08005659 	.word	0x08005659
 8005578:	08005651 	.word	0x08005651
 800557c:	08005651 	.word	0x08005651
 8005580:	08005651 	.word	0x08005651
 8005584:	08005651 	.word	0x08005651
 8005588:	08005651 	.word	0x08005651
 800558c:	08005651 	.word	0x08005651
 8005590:	08005651 	.word	0x08005651
 8005594:	08005625 	.word	0x08005625
 8005598:	08005651 	.word	0x08005651
 800559c:	08005651 	.word	0x08005651
 80055a0:	08005651 	.word	0x08005651
 80055a4:	08005651 	.word	0x08005651
 80055a8:	08005651 	.word	0x08005651
 80055ac:	08005651 	.word	0x08005651
 80055b0:	08005651 	.word	0x08005651
 80055b4:	0800563b 	.word	0x0800563b
 80055b8:	08005651 	.word	0x08005651
 80055bc:	08005651 	.word	0x08005651
 80055c0:	08005651 	.word	0x08005651
 80055c4:	08005651 	.word	0x08005651
 80055c8:	08005651 	.word	0x08005651
 80055cc:	08005651 	.word	0x08005651
 80055d0:	08005651 	.word	0x08005651
 80055d4:	08005659 	.word	0x08005659
 80055d8:	08005651 	.word	0x08005651
 80055dc:	08005651 	.word	0x08005651
 80055e0:	08005651 	.word	0x08005651
 80055e4:	08005651 	.word	0x08005651
 80055e8:	08005651 	.word	0x08005651
 80055ec:	08005651 	.word	0x08005651
 80055f0:	08005651 	.word	0x08005651
 80055f4:	08005659 	.word	0x08005659
 80055f8:	08005651 	.word	0x08005651
 80055fc:	08005651 	.word	0x08005651
 8005600:	08005651 	.word	0x08005651
 8005604:	08005651 	.word	0x08005651
 8005608:	08005651 	.word	0x08005651
 800560c:	08005651 	.word	0x08005651
 8005610:	08005651 	.word	0x08005651
 8005614:	08005659 	.word	0x08005659
 8005618:	58024400 	.word	0x58024400
 800561c:	58024800 	.word	0x58024800
 8005620:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005628:	3308      	adds	r3, #8
 800562a:	2101      	movs	r1, #1
 800562c:	4618      	mov	r0, r3
 800562e:	f001 fdef 	bl	8007210 <RCCEx_PLL2_Config>
 8005632:	4603      	mov	r3, r0
 8005634:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005638:	e00f      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800563a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800563e:	3328      	adds	r3, #40	; 0x28
 8005640:	2101      	movs	r1, #1
 8005642:	4618      	mov	r0, r3
 8005644:	f001 fe96 	bl	8007374 <RCCEx_PLL3_Config>
 8005648:	4603      	mov	r3, r0
 800564a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800564e:	e004      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005656:	e000      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800565a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10b      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005662:	4bc0      	ldr	r3, [pc, #768]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005666:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800566a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800566e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005672:	4abc      	ldr	r2, [pc, #752]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005674:	430b      	orrs	r3, r1
 8005676:	6553      	str	r3, [r2, #84]	; 0x54
 8005678:	e003      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800567e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005682:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	f002 0302 	and.w	r3, r2, #2
 800568e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005692:	2300      	movs	r3, #0
 8005694:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005698:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800569c:	460b      	mov	r3, r1
 800569e:	4313      	orrs	r3, r2
 80056a0:	d043      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80056a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056aa:	2b05      	cmp	r3, #5
 80056ac:	d824      	bhi.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80056ae:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80056b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b4:	08005701 	.word	0x08005701
 80056b8:	080056cd 	.word	0x080056cd
 80056bc:	080056e3 	.word	0x080056e3
 80056c0:	08005701 	.word	0x08005701
 80056c4:	08005701 	.word	0x08005701
 80056c8:	08005701 	.word	0x08005701
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056d0:	3308      	adds	r3, #8
 80056d2:	2101      	movs	r1, #1
 80056d4:	4618      	mov	r0, r3
 80056d6:	f001 fd9b 	bl	8007210 <RCCEx_PLL2_Config>
 80056da:	4603      	mov	r3, r0
 80056dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80056e0:	e00f      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e6:	3328      	adds	r3, #40	; 0x28
 80056e8:	2101      	movs	r1, #1
 80056ea:	4618      	mov	r0, r3
 80056ec:	f001 fe42 	bl	8007374 <RCCEx_PLL3_Config>
 80056f0:	4603      	mov	r3, r0
 80056f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80056f6:	e004      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80056fe:	e000      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005702:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10b      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800570a:	4b96      	ldr	r3, [pc, #600]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	f023 0107 	bic.w	r1, r3, #7
 8005712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800571a:	4a92      	ldr	r2, [pc, #584]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800571c:	430b      	orrs	r3, r1
 800571e:	6553      	str	r3, [r2, #84]	; 0x54
 8005720:	e003      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005722:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005726:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800572a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f002 0304 	and.w	r3, r2, #4
 8005736:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800573a:	2300      	movs	r3, #0
 800573c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005740:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005744:	460b      	mov	r3, r1
 8005746:	4313      	orrs	r3, r2
 8005748:	d043      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800574a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800574e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005752:	2b05      	cmp	r3, #5
 8005754:	d824      	bhi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005756:	a201      	add	r2, pc, #4	; (adr r2, 800575c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	080057a9 	.word	0x080057a9
 8005760:	08005775 	.word	0x08005775
 8005764:	0800578b 	.word	0x0800578b
 8005768:	080057a9 	.word	0x080057a9
 800576c:	080057a9 	.word	0x080057a9
 8005770:	080057a9 	.word	0x080057a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005778:	3308      	adds	r3, #8
 800577a:	2101      	movs	r1, #1
 800577c:	4618      	mov	r0, r3
 800577e:	f001 fd47 	bl	8007210 <RCCEx_PLL2_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005788:	e00f      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800578a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800578e:	3328      	adds	r3, #40	; 0x28
 8005790:	2101      	movs	r1, #1
 8005792:	4618      	mov	r0, r3
 8005794:	f001 fdee 	bl	8007374 <RCCEx_PLL3_Config>
 8005798:	4603      	mov	r3, r0
 800579a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800579e:	e004      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80057a6:	e000      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80057a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10b      	bne.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057b2:	4b6c      	ldr	r3, [pc, #432]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80057b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b6:	f023 0107 	bic.w	r1, r3, #7
 80057ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057c2:	4a68      	ldr	r2, [pc, #416]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80057c4:	430b      	orrs	r3, r1
 80057c6:	6593      	str	r3, [r2, #88]	; 0x58
 80057c8:	e003      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	f002 0320 	and.w	r3, r2, #32
 80057de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057e2:	2300      	movs	r3, #0
 80057e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057ec:	460b      	mov	r3, r1
 80057ee:	4313      	orrs	r3, r2
 80057f0:	d055      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80057f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057fe:	d033      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005804:	d82c      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580a:	d02f      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800580c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005810:	d826      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005812:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005816:	d02b      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005818:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800581c:	d820      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800581e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005822:	d012      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005828:	d81a      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800582a:	2b00      	cmp	r3, #0
 800582c:	d022      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800582e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005832:	d115      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005838:	3308      	adds	r3, #8
 800583a:	2100      	movs	r1, #0
 800583c:	4618      	mov	r0, r3
 800583e:	f001 fce7 	bl	8007210 <RCCEx_PLL2_Config>
 8005842:	4603      	mov	r3, r0
 8005844:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005848:	e015      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800584a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800584e:	3328      	adds	r3, #40	; 0x28
 8005850:	2102      	movs	r1, #2
 8005852:	4618      	mov	r0, r3
 8005854:	f001 fd8e 	bl	8007374 <RCCEx_PLL3_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800585e:	e00a      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005866:	e006      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005868:	bf00      	nop
 800586a:	e004      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800586c:	bf00      	nop
 800586e:	e002      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005870:	bf00      	nop
 8005872:	e000      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005876:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10b      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800587e:	4b39      	ldr	r3, [pc, #228]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005882:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800588a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800588e:	4a35      	ldr	r2, [pc, #212]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005890:	430b      	orrs	r3, r1
 8005892:	6553      	str	r3, [r2, #84]	; 0x54
 8005894:	e003      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005896:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800589a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800589e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80058aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058ae:	2300      	movs	r3, #0
 80058b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80058b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4313      	orrs	r3, r2
 80058bc:	d058      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80058be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80058c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80058ca:	d033      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80058cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80058d0:	d82c      	bhi.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80058d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d6:	d02f      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80058d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058dc:	d826      	bhi.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80058de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058e2:	d02b      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80058e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058e8:	d820      	bhi.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80058ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ee:	d012      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80058f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058f4:	d81a      	bhi.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d022      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80058fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058fe:	d115      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005904:	3308      	adds	r3, #8
 8005906:	2100      	movs	r1, #0
 8005908:	4618      	mov	r0, r3
 800590a:	f001 fc81 	bl	8007210 <RCCEx_PLL2_Config>
 800590e:	4603      	mov	r3, r0
 8005910:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005914:	e015      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800591a:	3328      	adds	r3, #40	; 0x28
 800591c:	2102      	movs	r1, #2
 800591e:	4618      	mov	r0, r3
 8005920:	f001 fd28 	bl	8007374 <RCCEx_PLL3_Config>
 8005924:	4603      	mov	r3, r0
 8005926:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800592a:	e00a      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005932:	e006      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005934:	bf00      	nop
 8005936:	e004      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005938:	bf00      	nop
 800593a:	e002      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800593c:	bf00      	nop
 800593e:	e000      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005942:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10e      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800594a:	4b06      	ldr	r3, [pc, #24]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800594c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005956:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800595a:	4a02      	ldr	r2, [pc, #8]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800595c:	430b      	orrs	r3, r1
 800595e:	6593      	str	r3, [r2, #88]	; 0x58
 8005960:	e006      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8005962:	bf00      	nop
 8005964:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005968:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800596c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800597c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005980:	2300      	movs	r3, #0
 8005982:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005986:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800598a:	460b      	mov	r3, r1
 800598c:	4313      	orrs	r3, r2
 800598e:	d055      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005994:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005998:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800599c:	d033      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800599e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80059a2:	d82c      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80059a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a8:	d02f      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80059aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ae:	d826      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80059b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80059b4:	d02b      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80059b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80059ba:	d820      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80059bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059c0:	d012      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80059c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059c6:	d81a      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d022      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80059cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d0:	d115      	bne.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059d6:	3308      	adds	r3, #8
 80059d8:	2100      	movs	r1, #0
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 fc18 	bl	8007210 <RCCEx_PLL2_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80059e6:	e015      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ec:	3328      	adds	r3, #40	; 0x28
 80059ee:	2102      	movs	r1, #2
 80059f0:	4618      	mov	r0, r3
 80059f2:	f001 fcbf 	bl	8007374 <RCCEx_PLL3_Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80059fc:	e00a      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005a04:	e006      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005a06:	bf00      	nop
 8005a08:	e004      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005a0a:	bf00      	nop
 8005a0c:	e002      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005a0e:	bf00      	nop
 8005a10:	e000      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10b      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005a1c:	4ba1      	ldr	r3, [pc, #644]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a20:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a2c:	4a9d      	ldr	r2, [pc, #628]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a2e:	430b      	orrs	r3, r1
 8005a30:	6593      	str	r3, [r2, #88]	; 0x58
 8005a32:	e003      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	f002 0308 	and.w	r3, r2, #8
 8005a48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005a56:	460b      	mov	r3, r1
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	d01e      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a68:	d10c      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a6e:	3328      	adds	r3, #40	; 0x28
 8005a70:	2102      	movs	r1, #2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 fc7e 	bl	8007374 <RCCEx_PLL3_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005a84:	4b87      	ldr	r3, [pc, #540]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a94:	4a83      	ldr	r2, [pc, #524]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a96:	430b      	orrs	r3, r1
 8005a98:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	f002 0310 	and.w	r3, r2, #16
 8005aa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ab0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	d01e      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005abe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac6:	d10c      	bne.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005acc:	3328      	adds	r3, #40	; 0x28
 8005ace:	2102      	movs	r1, #2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 fc4f 	bl	8007374 <RCCEx_PLL3_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ae2:	4b70      	ldr	r3, [pc, #448]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005af2:	4a6c      	ldr	r2, [pc, #432]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005af4:	430b      	orrs	r3, r1
 8005af6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005b04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005b12:	460b      	mov	r3, r1
 8005b14:	4313      	orrs	r3, r2
 8005b16:	d03e      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b24:	d022      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005b26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b2a:	d81b      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8005b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b34:	d00b      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005b36:	e015      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	2100      	movs	r1, #0
 8005b40:	4618      	mov	r0, r3
 8005b42:	f001 fb65 	bl	8007210 <RCCEx_PLL2_Config>
 8005b46:	4603      	mov	r3, r0
 8005b48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b4c:	e00f      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b52:	3328      	adds	r3, #40	; 0x28
 8005b54:	2102      	movs	r1, #2
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 fc0c 	bl	8007374 <RCCEx_PLL3_Config>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b62:	e004      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005b6a:	e000      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10b      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b76:	4b4b      	ldr	r3, [pc, #300]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b86:	4a47      	ldr	r2, [pc, #284]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8005b8c:	e003      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b92:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005ba2:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ba8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005bac:	460b      	mov	r3, r1
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	d03b      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bbe:	d01f      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8005bc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bc4:	d818      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bca:	d003      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005bcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bd0:	d007      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8005bd2:	e011      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd4:	4b33      	ldr	r3, [pc, #204]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	4a32      	ldr	r2, [pc, #200]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005be0:	e00f      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005be6:	3328      	adds	r3, #40	; 0x28
 8005be8:	2101      	movs	r1, #1
 8005bea:	4618      	mov	r0, r3
 8005bec:	f001 fbc2 	bl	8007374 <RCCEx_PLL3_Config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005bf6:	e004      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005bfe:	e000      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10b      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c0a:	4b26      	ldr	r3, [pc, #152]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1a:	4a22      	ldr	r2, [pc, #136]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	6553      	str	r3, [r2, #84]	; 0x54
 8005c20:	e003      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c26:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c32:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005c36:	673b      	str	r3, [r7, #112]	; 0x70
 8005c38:	2300      	movs	r3, #0
 8005c3a:	677b      	str	r3, [r7, #116]	; 0x74
 8005c3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005c40:	460b      	mov	r3, r1
 8005c42:	4313      	orrs	r3, r2
 8005c44:	d034      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8005c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c54:	d007      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005c56:	e011      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c58:	4b12      	ldr	r3, [pc, #72]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	4a11      	ldr	r2, [pc, #68]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c64:	e00e      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	2102      	movs	r1, #2
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f001 face 	bl	8007210 <RCCEx_PLL2_Config>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c7a:	e003      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10d      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c8c:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9a:	4a02      	ldr	r2, [pc, #8]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ca0:	e006      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005ca2:	bf00      	nop
 8005ca4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005cbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cc2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	d00c      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cd0:	3328      	adds	r3, #40	; 0x28
 8005cd2:	2102      	movs	r1, #2
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f001 fb4d 	bl	8007374 <RCCEx_PLL3_Config>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005cf2:	663b      	str	r3, [r7, #96]	; 0x60
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	667b      	str	r3, [r7, #100]	; 0x64
 8005cf8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	d038      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d0e:	d018      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005d10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d14:	d811      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d1a:	d014      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d20:	d80b      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d011      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d2a:	d106      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d2c:	4bc3      	ldr	r3, [pc, #780]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	4ac2      	ldr	r2, [pc, #776]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005d38:	e008      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d40:	e004      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005d42:	bf00      	nop
 8005d44:	e002      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005d46:	bf00      	nop
 8005d48:	e000      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10b      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d54:	4bb9      	ldr	r3, [pc, #740]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d58:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d64:	4ab5      	ldr	r2, [pc, #724]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d66:	430b      	orrs	r3, r1
 8005d68:	6553      	str	r3, [r2, #84]	; 0x54
 8005d6a:	e003      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d70:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005d80:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d82:	2300      	movs	r3, #0
 8005d84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d86:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	d009      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d90:	4baa      	ldr	r3, [pc, #680]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d9e:	4aa7      	ldr	r2, [pc, #668]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005da0:	430b      	orrs	r3, r1
 8005da2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005db0:	653b      	str	r3, [r7, #80]	; 0x50
 8005db2:	2300      	movs	r3, #0
 8005db4:	657b      	str	r3, [r7, #84]	; 0x54
 8005db6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005dba:	460b      	mov	r3, r1
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	d009      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005dc0:	4b9e      	ldr	r3, [pc, #632]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dce:	4a9b      	ldr	r2, [pc, #620]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005dd0:	430b      	orrs	r3, r1
 8005dd2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005de2:	2300      	movs	r3, #0
 8005de4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005de6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005dea:	460b      	mov	r3, r1
 8005dec:	4313      	orrs	r3, r2
 8005dee:	d009      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005df0:	4b92      	ldr	r3, [pc, #584]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8005df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dfe:	4a8f      	ldr	r2, [pc, #572]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e00:	430b      	orrs	r3, r1
 8005e02:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005e10:	643b      	str	r3, [r7, #64]	; 0x40
 8005e12:	2300      	movs	r3, #0
 8005e14:	647b      	str	r3, [r7, #68]	; 0x44
 8005e16:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	d00e      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e20:	4b86      	ldr	r3, [pc, #536]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	4a85      	ldr	r2, [pc, #532]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e2a:	6113      	str	r3, [r2, #16]
 8005e2c:	4b83      	ldr	r3, [pc, #524]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e2e:	6919      	ldr	r1, [r3, #16]
 8005e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005e38:	4a80      	ldr	r2, [pc, #512]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e3a:	430b      	orrs	r3, r1
 8005e3c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005e4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e50:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005e54:	460b      	mov	r3, r1
 8005e56:	4313      	orrs	r3, r2
 8005e58:	d009      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005e5a:	4b78      	ldr	r3, [pc, #480]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e5e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e68:	4a74      	ldr	r2, [pc, #464]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e6a:	430b      	orrs	r3, r1
 8005e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e80:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005e84:	460b      	mov	r3, r1
 8005e86:	4313      	orrs	r3, r2
 8005e88:	d00a      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e8a:	4b6c      	ldr	r3, [pc, #432]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e9a:	4a68      	ldr	r2, [pc, #416]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	62b9      	str	r1, [r7, #40]	; 0x28
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	d011      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 f9a3 	bl	8007210 <RCCEx_PLL2_Config>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005ed0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005edc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	2100      	movs	r1, #0
 8005eea:	6239      	str	r1, [r7, #32]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	d011      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f00:	3308      	adds	r3, #8
 8005f02:	2101      	movs	r1, #1
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 f983 	bl	8007210 <RCCEx_PLL2_Config>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005f10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	2100      	movs	r1, #0
 8005f2a:	61b9      	str	r1, [r7, #24]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	61fb      	str	r3, [r7, #28]
 8005f32:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005f36:	460b      	mov	r3, r1
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	d011      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f40:	3308      	adds	r3, #8
 8005f42:	2102      	movs	r1, #2
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 f963 	bl	8007210 <RCCEx_PLL2_Config>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005f50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	2100      	movs	r1, #0
 8005f6a:	6139      	str	r1, [r7, #16]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005f76:	460b      	mov	r3, r1
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	d011      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f80:	3328      	adds	r3, #40	; 0x28
 8005f82:	2100      	movs	r1, #0
 8005f84:	4618      	mov	r0, r3
 8005f86:	f001 f9f5 	bl	8007374 <RCCEx_PLL3_Config>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8005f90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	2100      	movs	r1, #0
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	f003 0310 	and.w	r3, r3, #16
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	d011      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fc0:	3328      	adds	r3, #40	; 0x28
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f001 f9d5 	bl	8007374 <RCCEx_PLL3_Config>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005fd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fdc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	2100      	movs	r1, #0
 8005fea:	6039      	str	r1, [r7, #0]
 8005fec:	f003 0320 	and.w	r3, r3, #32
 8005ff0:	607b      	str	r3, [r7, #4]
 8005ff2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	d011      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006000:	3328      	adds	r3, #40	; 0x28
 8006002:	2102      	movs	r1, #2
 8006004:	4618      	mov	r0, r3
 8006006:	f001 f9b5 	bl	8007374 <RCCEx_PLL3_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006010:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006018:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800601c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8006020:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006028:	2300      	movs	r3, #0
 800602a:	e000      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
}
 800602e:	4618      	mov	r0, r3
 8006030:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006034:	46bd      	mov	sp, r7
 8006036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800603a:	bf00      	nop
 800603c:	58024400 	.word	0x58024400

08006040 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b090      	sub	sp, #64	; 0x40
 8006044:	af00      	add	r7, sp, #0
 8006046:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800604a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800604e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006052:	430b      	orrs	r3, r1
 8006054:	f040 8094 	bne.w	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006058:	4b97      	ldr	r3, [pc, #604]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800605a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	2b04      	cmp	r3, #4
 8006066:	f200 8087 	bhi.w	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800606a:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006070:	08006085 	.word	0x08006085
 8006074:	080060ad 	.word	0x080060ad
 8006078:	080060d5 	.word	0x080060d5
 800607c:	08006171 	.word	0x08006171
 8006080:	080060fd 	.word	0x080060fd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006084:	4b8c      	ldr	r3, [pc, #560]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800608c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006090:	d108      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006096:	4618      	mov	r0, r3
 8006098:	f000 ff68 	bl	8006f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060a0:	f000 bc97 	b.w	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060a8:	f000 bc93 	b.w	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060ac:	4b82      	ldr	r3, [pc, #520]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060b8:	d108      	bne.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ba:	f107 0318 	add.w	r3, r7, #24
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fcac 	bl	8006a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060c8:	f000 bc83 	b.w	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80060cc:	2300      	movs	r3, #0
 80060ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060d0:	f000 bc7f 	b.w	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060d4:	4b78      	ldr	r3, [pc, #480]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060e0:	d108      	bne.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060e2:	f107 030c 	add.w	r3, r7, #12
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 fdec 	bl	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060f0:	f000 bc6f 	b.w	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80060f4:	2300      	movs	r3, #0
 80060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060f8:	f000 bc6b 	b.w	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060fc:	4b6e      	ldr	r3, [pc, #440]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80060fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006100:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006104:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006106:	4b6c      	ldr	r3, [pc, #432]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	2b04      	cmp	r3, #4
 8006110:	d10c      	bne.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006114:	2b00      	cmp	r3, #0
 8006116:	d109      	bne.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006118:	4b67      	ldr	r3, [pc, #412]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	08db      	lsrs	r3, r3, #3
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	4a66      	ldr	r2, [pc, #408]	; (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006124:	fa22 f303 	lsr.w	r3, r2, r3
 8006128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800612a:	e01f      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800612c:	4b62      	ldr	r3, [pc, #392]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006138:	d106      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800613a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006140:	d102      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006142:	4b5f      	ldr	r3, [pc, #380]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006146:	e011      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006148:	4b5b      	ldr	r3, [pc, #364]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006154:	d106      	bne.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800615c:	d102      	bne.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800615e:	4b59      	ldr	r3, [pc, #356]	; (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006162:	e003      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006164:	2300      	movs	r3, #0
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006168:	f000 bc33 	b.w	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800616c:	f000 bc31 	b.w	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006170:	4b55      	ldr	r3, [pc, #340]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006174:	f000 bc2d 	b.w	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006178:	2300      	movs	r3, #0
 800617a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800617c:	f000 bc29 	b.w	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006184:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006188:	430b      	orrs	r3, r1
 800618a:	f040 809f 	bne.w	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800618e:	4b4a      	ldr	r3, [pc, #296]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006192:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006196:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800619e:	d04d      	beq.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a6:	f200 8084 	bhi.w	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	2bc0      	cmp	r3, #192	; 0xc0
 80061ae:	d07d      	beq.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	2bc0      	cmp	r3, #192	; 0xc0
 80061b4:	d87d      	bhi.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	2b80      	cmp	r3, #128	; 0x80
 80061ba:	d02d      	beq.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80061bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061be:	2b80      	cmp	r3, #128	; 0x80
 80061c0:	d877      	bhi.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	2b40      	cmp	r3, #64	; 0x40
 80061cc:	d012      	beq.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80061ce:	e070      	b.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061d0:	4b39      	ldr	r3, [pc, #228]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061dc:	d107      	bne.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fec2 	bl	8006f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ec:	e3f1      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061ee:	2300      	movs	r3, #0
 80061f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061f2:	e3ee      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061f4:	4b30      	ldr	r3, [pc, #192]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006200:	d107      	bne.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006202:	f107 0318 	add.w	r3, r7, #24
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fc08 	bl	8006a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006210:	e3df      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006216:	e3dc      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006218:	4b27      	ldr	r3, [pc, #156]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006224:	d107      	bne.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006226:	f107 030c 	add.w	r3, r7, #12
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fd4a 	bl	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006234:	e3cd      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800623a:	e3ca      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800623c:	4b1e      	ldr	r3, [pc, #120]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800623e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006240:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006244:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006246:	4b1c      	ldr	r3, [pc, #112]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0304 	and.w	r3, r3, #4
 800624e:	2b04      	cmp	r3, #4
 8006250:	d10c      	bne.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006254:	2b00      	cmp	r3, #0
 8006256:	d109      	bne.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006258:	4b17      	ldr	r3, [pc, #92]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	08db      	lsrs	r3, r3, #3
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	4a16      	ldr	r2, [pc, #88]	; (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006264:	fa22 f303 	lsr.w	r3, r2, r3
 8006268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800626a:	e01e      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800626c:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006278:	d106      	bne.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800627a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006280:	d102      	bne.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006282:	4b0f      	ldr	r3, [pc, #60]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006286:	e010      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006288:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006290:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006294:	d106      	bne.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800629c:	d102      	bne.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800629e:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80062a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062a2:	e002      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80062a8:	e393      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80062aa:	e392      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80062ac:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062b0:	e38f      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062b6:	e38c      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80062b8:	58024400 	.word	0x58024400
 80062bc:	03d09000 	.word	0x03d09000
 80062c0:	003d0900 	.word	0x003d0900
 80062c4:	007a1200 	.word	0x007a1200
 80062c8:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80062cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062d0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80062d4:	430b      	orrs	r3, r1
 80062d6:	f040 809c 	bne.w	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80062da:	4b9e      	ldr	r3, [pc, #632]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80062dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062de:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80062e2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ea:	d054      	beq.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062f2:	f200 808b 	bhi.w	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062fc:	f000 8083 	beq.w	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8006300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006302:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006306:	f200 8081 	bhi.w	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006310:	d02f      	beq.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006318:	d878      	bhi.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	2b00      	cmp	r3, #0
 800631e:	d004      	beq.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006326:	d012      	beq.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8006328:	e070      	b.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800632a:	4b8a      	ldr	r3, [pc, #552]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006332:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006336:	d107      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800633c:	4618      	mov	r0, r3
 800633e:	f000 fe15 	bl	8006f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006346:	e344      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800634c:	e341      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800634e:	4b81      	ldr	r3, [pc, #516]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006356:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800635a:	d107      	bne.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800635c:	f107 0318 	add.w	r3, r7, #24
 8006360:	4618      	mov	r0, r3
 8006362:	f000 fb5b 	bl	8006a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800636a:	e332      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800636c:	2300      	movs	r3, #0
 800636e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006370:	e32f      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006372:	4b78      	ldr	r3, [pc, #480]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800637a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800637e:	d107      	bne.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006380:	f107 030c 	add.w	r3, r7, #12
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fc9d 	bl	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800638e:	e320      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006394:	e31d      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006396:	4b6f      	ldr	r3, [pc, #444]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800639e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063a0:	4b6c      	ldr	r3, [pc, #432]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d10c      	bne.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80063ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d109      	bne.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063b2:	4b68      	ldr	r3, [pc, #416]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	08db      	lsrs	r3, r3, #3
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	4a66      	ldr	r2, [pc, #408]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80063be:	fa22 f303 	lsr.w	r3, r2, r3
 80063c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c4:	e01e      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063c6:	4b63      	ldr	r3, [pc, #396]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d2:	d106      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80063d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063da:	d102      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80063dc:	4b5f      	ldr	r3, [pc, #380]	; (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80063de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063e0:	e010      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063e2:	4b5c      	ldr	r3, [pc, #368]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ee:	d106      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80063f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063f6:	d102      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80063f8:	4b59      	ldr	r3, [pc, #356]	; (8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80063fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063fc:	e002      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80063fe:	2300      	movs	r3, #0
 8006400:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8006402:	e2e6      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006404:	e2e5      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006406:	4b57      	ldr	r3, [pc, #348]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006408:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800640a:	e2e2      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800640c:	2300      	movs	r3, #0
 800640e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006410:	e2df      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006412:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006416:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800641a:	430b      	orrs	r3, r1
 800641c:	f040 80a7 	bne.w	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006420:	4b4c      	ldr	r3, [pc, #304]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006424:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006428:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006430:	d055      	beq.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006438:	f200 8096 	bhi.w	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800643c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006442:	f000 8084 	beq.w	800654e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800644c:	f200 808c 	bhi.w	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006456:	d030      	beq.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800645e:	f200 8083 	bhi.w	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646e:	d012      	beq.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8006470:	e07a      	b.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006472:	4b38      	ldr	r3, [pc, #224]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800647a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800647e:	d107      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fd71 	bl	8006f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800648e:	e2a0      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006494:	e29d      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006496:	4b2f      	ldr	r3, [pc, #188]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800649e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064a2:	d107      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064a4:	f107 0318 	add.w	r3, r7, #24
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fab7 	bl	8006a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064b2:	e28e      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80064b4:	2300      	movs	r3, #0
 80064b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064b8:	e28b      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064ba:	4b26      	ldr	r3, [pc, #152]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064c6:	d107      	bne.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064c8:	f107 030c 	add.w	r3, r7, #12
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fbf9 	bl	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064d6:	e27c      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80064d8:	2300      	movs	r3, #0
 80064da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064dc:	e279      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064de:	4b1d      	ldr	r3, [pc, #116]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80064e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064e8:	4b1a      	ldr	r3, [pc, #104]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d10c      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80064f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d109      	bne.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064fa:	4b16      	ldr	r3, [pc, #88]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	08db      	lsrs	r3, r3, #3
 8006500:	f003 0303 	and.w	r3, r3, #3
 8006504:	4a14      	ldr	r2, [pc, #80]	; (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006506:	fa22 f303 	lsr.w	r3, r2, r3
 800650a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800650c:	e01e      	b.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800650e:	4b11      	ldr	r3, [pc, #68]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651a:	d106      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800651c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006522:	d102      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006524:	4b0d      	ldr	r3, [pc, #52]	; (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006528:	e010      	b.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800652a:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006536:	d106      	bne.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800653e:	d102      	bne.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006540:	4b07      	ldr	r3, [pc, #28]	; (8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006544:	e002      	b.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800654a:	e242      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800654c:	e241      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800654e:	4b05      	ldr	r3, [pc, #20]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006550:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006552:	e23e      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006554:	58024400 	.word	0x58024400
 8006558:	03d09000 	.word	0x03d09000
 800655c:	003d0900 	.word	0x003d0900
 8006560:	007a1200 	.word	0x007a1200
 8006564:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800656c:	e231      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800656e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006572:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006576:	430b      	orrs	r3, r1
 8006578:	f040 8085 	bne.w	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800657c:	4b9c      	ldr	r3, [pc, #624]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800657e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006580:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006584:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800658c:	d06b      	beq.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800658e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006594:	d874      	bhi.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006598:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800659c:	d056      	beq.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065a4:	d86c      	bhi.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80065a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065ac:	d03b      	beq.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80065ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065b4:	d864      	bhi.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065bc:	d021      	beq.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065c4:	d85c      	bhi.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d004      	beq.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80065cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d2:	d004      	beq.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80065d4:	e054      	b.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80065d6:	f7fe fb49 	bl	8004c6c <HAL_RCC_GetPCLK1Freq>
 80065da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065dc:	e1f9      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065de:	4b84      	ldr	r3, [pc, #528]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ea:	d107      	bne.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ec:	f107 0318 	add.w	r3, r7, #24
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fa13 	bl	8006a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065fa:	e1ea      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80065fc:	2300      	movs	r3, #0
 80065fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006600:	e1e7      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006602:	4b7b      	ldr	r3, [pc, #492]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800660a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800660e:	d107      	bne.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006610:	f107 030c 	add.w	r3, r7, #12
 8006614:	4618      	mov	r0, r3
 8006616:	f000 fb55 	bl	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800661e:	e1d8      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006620:	2300      	movs	r3, #0
 8006622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006624:	e1d5      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006626:	4b72      	ldr	r3, [pc, #456]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0304 	and.w	r3, r3, #4
 800662e:	2b04      	cmp	r3, #4
 8006630:	d109      	bne.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006632:	4b6f      	ldr	r3, [pc, #444]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	08db      	lsrs	r3, r3, #3
 8006638:	f003 0303 	and.w	r3, r3, #3
 800663c:	4a6d      	ldr	r2, [pc, #436]	; (80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800663e:	fa22 f303 	lsr.w	r3, r2, r3
 8006642:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006644:	e1c5      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800664a:	e1c2      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800664c:	4b68      	ldr	r3, [pc, #416]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006658:	d102      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800665a:	4b67      	ldr	r3, [pc, #412]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800665c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800665e:	e1b8      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006664:	e1b5      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006666:	4b62      	ldr	r3, [pc, #392]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800666e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006672:	d102      	bne.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8006674:	4b61      	ldr	r3, [pc, #388]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006676:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006678:	e1ab      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800667a:	2300      	movs	r3, #0
 800667c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800667e:	e1a8      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006684:	e1a5      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800668a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800668e:	430b      	orrs	r3, r1
 8006690:	d173      	bne.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006692:	4b57      	ldr	r3, [pc, #348]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006696:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800669a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800669c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066a2:	d02f      	beq.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066aa:	d863      	bhi.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80066ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d004      	beq.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b8:	d012      	beq.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80066ba:	e05b      	b.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066bc:	4b4c      	ldr	r3, [pc, #304]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066c8:	d107      	bne.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066ca:	f107 0318 	add.w	r3, r7, #24
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 f9a4 	bl	8006a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066d8:	e17b      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80066da:	2300      	movs	r3, #0
 80066dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066de:	e178      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066e0:	4b43      	ldr	r3, [pc, #268]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ec:	d107      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066ee:	f107 030c 	add.w	r3, r7, #12
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 fae6 	bl	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066fc:	e169      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006702:	e166      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006704:	4b3a      	ldr	r3, [pc, #232]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800670c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800670e:	4b38      	ldr	r3, [pc, #224]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0304 	and.w	r3, r3, #4
 8006716:	2b04      	cmp	r3, #4
 8006718:	d10c      	bne.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800671a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671c:	2b00      	cmp	r3, #0
 800671e:	d109      	bne.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006720:	4b33      	ldr	r3, [pc, #204]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	08db      	lsrs	r3, r3, #3
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	4a32      	ldr	r2, [pc, #200]	; (80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
 8006730:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006732:	e01e      	b.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006734:	4b2e      	ldr	r3, [pc, #184]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006740:	d106      	bne.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8006742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006744:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006748:	d102      	bne.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800674a:	4b2b      	ldr	r3, [pc, #172]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800674c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800674e:	e010      	b.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006750:	4b27      	ldr	r3, [pc, #156]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006758:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800675c:	d106      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800675e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006764:	d102      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006766:	4b25      	ldr	r3, [pc, #148]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800676a:	e002      	b.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006770:	e12f      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006772:	e12e      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006774:	2300      	movs	r3, #0
 8006776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006778:	e12b      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800677a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800677e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006782:	430b      	orrs	r3, r1
 8006784:	d13c      	bne.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006786:	4b1a      	ldr	r3, [pc, #104]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800678e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006792:	2b00      	cmp	r3, #0
 8006794:	d004      	beq.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800679c:	d012      	beq.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800679e:	e023      	b.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067a0:	4b13      	ldr	r3, [pc, #76]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067ac:	d107      	bne.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fbda 	bl	8006f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067bc:	e109      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80067be:	2300      	movs	r3, #0
 80067c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067c2:	e106      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067c4:	4b0a      	ldr	r3, [pc, #40]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067d0:	d107      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067d2:	f107 0318 	add.w	r3, r7, #24
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 f920 	bl	8006a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067e0:	e0f7      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067e6:	e0f4      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ec:	e0f1      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80067ee:	bf00      	nop
 80067f0:	58024400 	.word	0x58024400
 80067f4:	03d09000 	.word	0x03d09000
 80067f8:	003d0900 	.word	0x003d0900
 80067fc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006804:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006808:	430b      	orrs	r3, r1
 800680a:	f040 8091 	bne.w	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800680e:	4b73      	ldr	r3, [pc, #460]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006812:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006816:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800681e:	f000 8081 	beq.w	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006824:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006828:	d87f      	bhi.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800682a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006830:	d06b      	beq.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8006832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006834:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006838:	d877      	bhi.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006840:	d056      	beq.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8006842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006848:	d86f      	bhi.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006850:	d03b      	beq.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006854:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006858:	d867      	bhi.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006860:	d021      	beq.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006868:	d85f      	bhi.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800686a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686c:	2b00      	cmp	r3, #0
 800686e:	d004      	beq.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006876:	d004      	beq.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006878:	e057      	b.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800687a:	f000 f8b9 	bl	80069f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800687e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006880:	e0a7      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006882:	4b56      	ldr	r3, [pc, #344]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800688a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800688e:	d107      	bne.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006890:	f107 0318 	add.w	r3, r7, #24
 8006894:	4618      	mov	r0, r3
 8006896:	f000 f8c1 	bl	8006a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800689e:	e098      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068a4:	e095      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068a6:	4b4d      	ldr	r3, [pc, #308]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068b2:	d107      	bne.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068b4:	f107 030c 	add.w	r3, r7, #12
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 fa03 	bl	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068c2:	e086      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068c8:	e083      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068ca:	4b44      	ldr	r3, [pc, #272]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0304 	and.w	r3, r3, #4
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d109      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068d6:	4b41      	ldr	r3, [pc, #260]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	08db      	lsrs	r3, r3, #3
 80068dc:	f003 0303 	and.w	r3, r3, #3
 80068e0:	4a3f      	ldr	r2, [pc, #252]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80068e2:	fa22 f303 	lsr.w	r3, r2, r3
 80068e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068e8:	e073      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80068ea:	2300      	movs	r3, #0
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068ee:	e070      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80068f0:	4b3a      	ldr	r3, [pc, #232]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068fc:	d102      	bne.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80068fe:	4b39      	ldr	r3, [pc, #228]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8006900:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006902:	e066      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006904:	2300      	movs	r3, #0
 8006906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006908:	e063      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800690a:	4b34      	ldr	r3, [pc, #208]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006912:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006916:	d102      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8006918:	4b33      	ldr	r3, [pc, #204]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800691a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800691c:	e059      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006922:	e056      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006924:	4b31      	ldr	r3, [pc, #196]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006928:	e053      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800692e:	e050      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006934:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006938:	430b      	orrs	r3, r1
 800693a:	d148      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800693c:	4b27      	ldr	r3, [pc, #156]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800693e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006940:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006944:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800694c:	d02a      	beq.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006954:	d838      	bhi.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	2b00      	cmp	r3, #0
 800695a:	d004      	beq.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800695c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006962:	d00d      	beq.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8006964:	e030      	b.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006966:	4b1d      	ldr	r3, [pc, #116]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006972:	d102      	bne.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8006974:	4b1c      	ldr	r3, [pc, #112]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006976:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006978:	e02b      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800697a:	2300      	movs	r3, #0
 800697c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800697e:	e028      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006980:	4b16      	ldr	r3, [pc, #88]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006988:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800698c:	d107      	bne.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800698e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006992:	4618      	mov	r0, r3
 8006994:	f000 faea 	bl	8006f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800699c:	e019      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800699e:	2300      	movs	r3, #0
 80069a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069a2:	e016      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069a4:	4b0d      	ldr	r3, [pc, #52]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069b0:	d107      	bne.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069b2:	f107 0318 	add.w	r3, r7, #24
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 f830 	bl	8006a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069c0:	e007      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069c6:	e004      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069cc:	e001      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80069d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3740      	adds	r7, #64	; 0x40
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	58024400 	.word	0x58024400
 80069e0:	03d09000 	.word	0x03d09000
 80069e4:	003d0900 	.word	0x003d0900
 80069e8:	007a1200 	.word	0x007a1200
 80069ec:	00bb8000 	.word	0x00bb8000

080069f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80069f4:	f7fe f90a 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 80069f8:	4602      	mov	r2, r0
 80069fa:	4b06      	ldr	r3, [pc, #24]	; (8006a14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	091b      	lsrs	r3, r3, #4
 8006a00:	f003 0307 	and.w	r3, r3, #7
 8006a04:	4904      	ldr	r1, [pc, #16]	; (8006a18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a06:	5ccb      	ldrb	r3, [r1, r3]
 8006a08:	f003 031f 	and.w	r3, r3, #31
 8006a0c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	58024400 	.word	0x58024400
 8006a18:	0800b2ec 	.word	0x0800b2ec

08006a1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b089      	sub	sp, #36	; 0x24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a24:	4ba1      	ldr	r3, [pc, #644]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006a2e:	4b9f      	ldr	r3, [pc, #636]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a32:	0b1b      	lsrs	r3, r3, #12
 8006a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a3a:	4b9c      	ldr	r3, [pc, #624]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	091b      	lsrs	r3, r3, #4
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006a46:	4b99      	ldr	r3, [pc, #612]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4a:	08db      	lsrs	r3, r3, #3
 8006a4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	fb02 f303 	mul.w	r3, r2, r3
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 8111 	beq.w	8006c8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	f000 8083 	beq.w	8006b78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	f200 80a1 	bhi.w	8006bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d056      	beq.n	8006b34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a86:	e099      	b.n	8006bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a88:	4b88      	ldr	r3, [pc, #544]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0320 	and.w	r3, r3, #32
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d02d      	beq.n	8006af0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a94:	4b85      	ldr	r3, [pc, #532]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	08db      	lsrs	r3, r3, #3
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	4a84      	ldr	r2, [pc, #528]	; (8006cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	ee07 3a90 	vmov	s15, r3
 8006aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006abe:	4b7b      	ldr	r3, [pc, #492]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ad2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006aee:	e087      	b.n	8006c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b02:	4b6a      	ldr	r3, [pc, #424]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b16:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b32:	e065      	b.n	8006c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b46:	4b59      	ldr	r3, [pc, #356]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b76:	e043      	b.n	8006c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8a:	4b48      	ldr	r3, [pc, #288]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bba:	e021      	b.n	8006c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bce:	4b37      	ldr	r3, [pc, #220]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8006be2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bfe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006c00:	4b2a      	ldr	r3, [pc, #168]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	0a5b      	lsrs	r3, r3, #9
 8006c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c26:	ee17 2a90 	vmov	r2, s15
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006c2e:	4b1f      	ldr	r3, [pc, #124]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	0c1b      	lsrs	r3, r3, #16
 8006c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c38:	ee07 3a90 	vmov	s15, r3
 8006c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c48:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c54:	ee17 2a90 	vmov	r2, s15
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006c5c:	4b13      	ldr	r3, [pc, #76]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c60:	0e1b      	lsrs	r3, r3, #24
 8006c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c66:	ee07 3a90 	vmov	s15, r3
 8006c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c82:	ee17 2a90 	vmov	r2, s15
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c8a:	e008      	b.n	8006c9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	609a      	str	r2, [r3, #8]
}
 8006c9e:	bf00      	nop
 8006ca0:	3724      	adds	r7, #36	; 0x24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	58024400 	.word	0x58024400
 8006cb0:	03d09000 	.word	0x03d09000
 8006cb4:	46000000 	.word	0x46000000
 8006cb8:	4c742400 	.word	0x4c742400
 8006cbc:	4a742400 	.word	0x4a742400
 8006cc0:	4af42400 	.word	0x4af42400

08006cc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b089      	sub	sp, #36	; 0x24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ccc:	4ba1      	ldr	r3, [pc, #644]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd0:	f003 0303 	and.w	r3, r3, #3
 8006cd4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006cd6:	4b9f      	ldr	r3, [pc, #636]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	0d1b      	lsrs	r3, r3, #20
 8006cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ce0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006ce2:	4b9c      	ldr	r3, [pc, #624]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce6:	0a1b      	lsrs	r3, r3, #8
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006cee:	4b99      	ldr	r3, [pc, #612]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf2:	08db      	lsrs	r3, r3, #3
 8006cf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	fb02 f303 	mul.w	r3, r2, r3
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 8111 	beq.w	8006f34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	f000 8083 	beq.w	8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	f200 80a1 	bhi.w	8006e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d056      	beq.n	8006ddc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d2e:	e099      	b.n	8006e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d30:	4b88      	ldr	r3, [pc, #544]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0320 	and.w	r3, r3, #32
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d02d      	beq.n	8006d98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d3c:	4b85      	ldr	r3, [pc, #532]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	08db      	lsrs	r3, r3, #3
 8006d42:	f003 0303 	and.w	r3, r3, #3
 8006d46:	4a84      	ldr	r2, [pc, #528]	; (8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d48:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	ee07 3a90 	vmov	s15, r3
 8006d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d66:	4b7b      	ldr	r3, [pc, #492]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6e:	ee07 3a90 	vmov	s15, r3
 8006d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d96:	e087      	b.n	8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	ee07 3a90 	vmov	s15, r3
 8006d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006f60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006daa:	4b6a      	ldr	r3, [pc, #424]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db2:	ee07 3a90 	vmov	s15, r3
 8006db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dda:	e065      	b.n	8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	ee07 3a90 	vmov	s15, r3
 8006de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dee:	4b59      	ldr	r3, [pc, #356]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e02:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e1e:	e043      	b.n	8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006f68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e32:	4b48      	ldr	r3, [pc, #288]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e3a:	ee07 3a90 	vmov	s15, r3
 8006e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e46:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e62:	e021      	b.n	8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	ee07 3a90 	vmov	s15, r3
 8006e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e76:	4b37      	ldr	r3, [pc, #220]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ea6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006ea8:	4b2a      	ldr	r3, [pc, #168]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	0a5b      	lsrs	r3, r3, #9
 8006eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ebe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ec2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ece:	ee17 2a90 	vmov	r2, s15
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006ed6:	4b1f      	ldr	r3, [pc, #124]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	0c1b      	lsrs	r3, r3, #16
 8006edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ee0:	ee07 3a90 	vmov	s15, r3
 8006ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ef0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006efc:	ee17 2a90 	vmov	r2, s15
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006f04:	4b13      	ldr	r3, [pc, #76]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	0e1b      	lsrs	r3, r3, #24
 8006f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f2a:	ee17 2a90 	vmov	r2, s15
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f32:	e008      	b.n	8006f46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	609a      	str	r2, [r3, #8]
}
 8006f46:	bf00      	nop
 8006f48:	3724      	adds	r7, #36	; 0x24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	58024400 	.word	0x58024400
 8006f58:	03d09000 	.word	0x03d09000
 8006f5c:	46000000 	.word	0x46000000
 8006f60:	4c742400 	.word	0x4c742400
 8006f64:	4a742400 	.word	0x4a742400
 8006f68:	4af42400 	.word	0x4af42400

08006f6c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b089      	sub	sp, #36	; 0x24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f74:	4ba0      	ldr	r3, [pc, #640]	; (80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f78:	f003 0303 	and.w	r3, r3, #3
 8006f7c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006f7e:	4b9e      	ldr	r3, [pc, #632]	; (80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f82:	091b      	lsrs	r3, r3, #4
 8006f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f88:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006f8a:	4b9b      	ldr	r3, [pc, #620]	; (80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006f94:	4b98      	ldr	r3, [pc, #608]	; (80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f98:	08db      	lsrs	r3, r3, #3
 8006f9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	fb02 f303 	mul.w	r3, r2, r3
 8006fa4:	ee07 3a90 	vmov	s15, r3
 8006fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 8111 	beq.w	80071da <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	f000 8083 	beq.w	80070c6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	f200 80a1 	bhi.w	800710a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d056      	beq.n	8007082 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006fd4:	e099      	b.n	800710a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fd6:	4b88      	ldr	r3, [pc, #544]	; (80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0320 	and.w	r3, r3, #32
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d02d      	beq.n	800703e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fe2:	4b85      	ldr	r3, [pc, #532]	; (80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	08db      	lsrs	r3, r3, #3
 8006fe8:	f003 0303 	and.w	r3, r3, #3
 8006fec:	4a83      	ldr	r2, [pc, #524]	; (80071fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006fee:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	ee07 3a90 	vmov	s15, r3
 8007004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007008:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700c:	4b7a      	ldr	r3, [pc, #488]	; (80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800700e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007014:	ee07 3a90 	vmov	s15, r3
 8007018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007020:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007200 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007024:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007028:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007030:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007038:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800703c:	e087      	b.n	800714e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	ee07 3a90 	vmov	s15, r3
 8007044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007048:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007204 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800704c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007050:	4b69      	ldr	r3, [pc, #420]	; (80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007058:	ee07 3a90 	vmov	s15, r3
 800705c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007060:	ed97 6a03 	vldr	s12, [r7, #12]
 8007064:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007200 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007068:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800706c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007070:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007074:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007080:	e065      	b.n	800714e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	ee07 3a90 	vmov	s15, r3
 8007088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007208 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007094:	4b58      	ldr	r3, [pc, #352]	; (80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800709c:	ee07 3a90 	vmov	s15, r3
 80070a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80070a8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007200 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070c4:	e043      	b.n	800714e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	ee07 3a90 	vmov	s15, r3
 80070cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800720c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80070d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d8:	4b47      	ldr	r3, [pc, #284]	; (80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e0:	ee07 3a90 	vmov	s15, r3
 80070e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ec:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007200 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007104:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007108:	e021      	b.n	800714e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	ee07 3a90 	vmov	s15, r3
 8007110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007114:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007204 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800711c:	4b36      	ldr	r3, [pc, #216]	; (80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800711e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007130:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007200 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007134:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007148:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800714c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800714e:	4b2a      	ldr	r3, [pc, #168]	; (80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	0a5b      	lsrs	r3, r3, #9
 8007154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007158:	ee07 3a90 	vmov	s15, r3
 800715c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007160:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007164:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007168:	edd7 6a07 	vldr	s13, [r7, #28]
 800716c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007174:	ee17 2a90 	vmov	r2, s15
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800717c:	4b1e      	ldr	r3, [pc, #120]	; (80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800717e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007180:	0c1b      	lsrs	r3, r3, #16
 8007182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007192:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007196:	edd7 6a07 	vldr	s13, [r7, #28]
 800719a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800719e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071a2:	ee17 2a90 	vmov	r2, s15
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80071aa:	4b13      	ldr	r3, [pc, #76]	; (80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	0e1b      	lsrs	r3, r3, #24
 80071b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071b4:	ee07 3a90 	vmov	s15, r3
 80071b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80071c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071d0:	ee17 2a90 	vmov	r2, s15
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80071d8:	e008      	b.n	80071ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	609a      	str	r2, [r3, #8]
}
 80071ec:	bf00      	nop
 80071ee:	3724      	adds	r7, #36	; 0x24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	58024400 	.word	0x58024400
 80071fc:	03d09000 	.word	0x03d09000
 8007200:	46000000 	.word	0x46000000
 8007204:	4c742400 	.word	0x4c742400
 8007208:	4a742400 	.word	0x4a742400
 800720c:	4af42400 	.word	0x4af42400

08007210 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800721e:	4b53      	ldr	r3, [pc, #332]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 8007220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007222:	f003 0303 	and.w	r3, r3, #3
 8007226:	2b03      	cmp	r3, #3
 8007228:	d101      	bne.n	800722e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e099      	b.n	8007362 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800722e:	4b4f      	ldr	r3, [pc, #316]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a4e      	ldr	r2, [pc, #312]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 8007234:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800723a:	f7fa fb13 	bl	8001864 <HAL_GetTick>
 800723e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007240:	e008      	b.n	8007254 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007242:	f7fa fb0f 	bl	8001864 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d901      	bls.n	8007254 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e086      	b.n	8007362 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007254:	4b45      	ldr	r3, [pc, #276]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1f0      	bne.n	8007242 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007260:	4b42      	ldr	r3, [pc, #264]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 8007262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007264:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	031b      	lsls	r3, r3, #12
 800726e:	493f      	ldr	r1, [pc, #252]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 8007270:	4313      	orrs	r3, r2
 8007272:	628b      	str	r3, [r1, #40]	; 0x28
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	3b01      	subs	r3, #1
 800727a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	3b01      	subs	r3, #1
 8007284:	025b      	lsls	r3, r3, #9
 8007286:	b29b      	uxth	r3, r3
 8007288:	431a      	orrs	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	3b01      	subs	r3, #1
 8007290:	041b      	lsls	r3, r3, #16
 8007292:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	3b01      	subs	r3, #1
 800729e:	061b      	lsls	r3, r3, #24
 80072a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80072a4:	4931      	ldr	r1, [pc, #196]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80072aa:	4b30      	ldr	r3, [pc, #192]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 80072ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	492d      	ldr	r1, [pc, #180]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80072bc:	4b2b      	ldr	r3, [pc, #172]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	f023 0220 	bic.w	r2, r3, #32
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	4928      	ldr	r1, [pc, #160]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80072ce:	4b27      	ldr	r3, [pc, #156]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	4a26      	ldr	r2, [pc, #152]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 80072d4:	f023 0310 	bic.w	r3, r3, #16
 80072d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80072da:	4b24      	ldr	r3, [pc, #144]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 80072dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072de:	4b24      	ldr	r3, [pc, #144]	; (8007370 <RCCEx_PLL2_Config+0x160>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	69d2      	ldr	r2, [r2, #28]
 80072e6:	00d2      	lsls	r2, r2, #3
 80072e8:	4920      	ldr	r1, [pc, #128]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80072ee:	4b1f      	ldr	r3, [pc, #124]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 80072f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f2:	4a1e      	ldr	r2, [pc, #120]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 80072f4:	f043 0310 	orr.w	r3, r3, #16
 80072f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d106      	bne.n	800730e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007300:	4b1a      	ldr	r3, [pc, #104]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 8007302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007304:	4a19      	ldr	r2, [pc, #100]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 8007306:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800730a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800730c:	e00f      	b.n	800732e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d106      	bne.n	8007322 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007314:	4b15      	ldr	r3, [pc, #84]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	4a14      	ldr	r2, [pc, #80]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 800731a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800731e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007320:	e005      	b.n	800732e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007322:	4b12      	ldr	r3, [pc, #72]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 8007324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007326:	4a11      	ldr	r2, [pc, #68]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 8007328:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800732c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800732e:	4b0f      	ldr	r3, [pc, #60]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a0e      	ldr	r2, [pc, #56]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 8007334:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800733a:	f7fa fa93 	bl	8001864 <HAL_GetTick>
 800733e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007340:	e008      	b.n	8007354 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007342:	f7fa fa8f 	bl	8001864 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	2b02      	cmp	r3, #2
 800734e:	d901      	bls.n	8007354 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e006      	b.n	8007362 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007354:	4b05      	ldr	r3, [pc, #20]	; (800736c <RCCEx_PLL2_Config+0x15c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0f0      	beq.n	8007342 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007360:	7bfb      	ldrb	r3, [r7, #15]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	58024400 	.word	0x58024400
 8007370:	ffff0007 	.word	0xffff0007

08007374 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007382:	4b53      	ldr	r3, [pc, #332]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 8007384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	2b03      	cmp	r3, #3
 800738c:	d101      	bne.n	8007392 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e099      	b.n	80074c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007392:	4b4f      	ldr	r3, [pc, #316]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a4e      	ldr	r2, [pc, #312]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 8007398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800739c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800739e:	f7fa fa61 	bl	8001864 <HAL_GetTick>
 80073a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073a4:	e008      	b.n	80073b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80073a6:	f7fa fa5d 	bl	8001864 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d901      	bls.n	80073b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e086      	b.n	80074c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073b8:	4b45      	ldr	r3, [pc, #276]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1f0      	bne.n	80073a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80073c4:	4b42      	ldr	r3, [pc, #264]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 80073c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	051b      	lsls	r3, r3, #20
 80073d2:	493f      	ldr	r1, [pc, #252]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 80073d4:	4313      	orrs	r3, r2
 80073d6:	628b      	str	r3, [r1, #40]	; 0x28
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	3b01      	subs	r3, #1
 80073de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	025b      	lsls	r3, r3, #9
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	041b      	lsls	r3, r3, #16
 80073f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	3b01      	subs	r3, #1
 8007402:	061b      	lsls	r3, r3, #24
 8007404:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007408:	4931      	ldr	r1, [pc, #196]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 800740a:	4313      	orrs	r3, r2
 800740c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800740e:	4b30      	ldr	r3, [pc, #192]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	492d      	ldr	r1, [pc, #180]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 800741c:	4313      	orrs	r3, r2
 800741e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007420:	4b2b      	ldr	r3, [pc, #172]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 8007422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007424:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	4928      	ldr	r1, [pc, #160]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 800742e:	4313      	orrs	r3, r2
 8007430:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007432:	4b27      	ldr	r3, [pc, #156]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 8007434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007436:	4a26      	ldr	r2, [pc, #152]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 8007438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800743c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800743e:	4b24      	ldr	r3, [pc, #144]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 8007440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007442:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <RCCEx_PLL3_Config+0x160>)
 8007444:	4013      	ands	r3, r2
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	69d2      	ldr	r2, [r2, #28]
 800744a:	00d2      	lsls	r2, r2, #3
 800744c:	4920      	ldr	r1, [pc, #128]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 800744e:	4313      	orrs	r3, r2
 8007450:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007452:	4b1f      	ldr	r3, [pc, #124]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 8007454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007456:	4a1e      	ldr	r2, [pc, #120]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 8007458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800745c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d106      	bne.n	8007472 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007464:	4b1a      	ldr	r3, [pc, #104]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 8007466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007468:	4a19      	ldr	r2, [pc, #100]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 800746a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800746e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007470:	e00f      	b.n	8007492 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d106      	bne.n	8007486 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007478:	4b15      	ldr	r3, [pc, #84]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	4a14      	ldr	r2, [pc, #80]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 800747e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007482:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007484:	e005      	b.n	8007492 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007486:	4b12      	ldr	r3, [pc, #72]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 8007488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748a:	4a11      	ldr	r2, [pc, #68]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 800748c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007490:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007492:	4b0f      	ldr	r3, [pc, #60]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a0e      	ldr	r2, [pc, #56]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 8007498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800749c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800749e:	f7fa f9e1 	bl	8001864 <HAL_GetTick>
 80074a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074a4:	e008      	b.n	80074b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074a6:	f7fa f9dd 	bl	8001864 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d901      	bls.n	80074b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e006      	b.n	80074c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074b8:	4b05      	ldr	r3, [pc, #20]	; (80074d0 <RCCEx_PLL3_Config+0x15c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0f0      	beq.n	80074a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	58024400 	.word	0x58024400
 80074d4:	ffff0007 	.word	0xffff0007

080074d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e049      	b.n	800757e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d106      	bne.n	8007504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7f9 ff34 	bl	800136c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	3304      	adds	r3, #4
 8007514:	4619      	mov	r1, r3
 8007516:	4610      	mov	r0, r2
 8007518:	f000 fb26 	bl	8007b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e08f      	b.n	80076bc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d106      	bne.n	80075b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7f9 fe8b 	bl	80012cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2202      	movs	r2, #2
 80075ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6899      	ldr	r1, [r3, #8]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	4b3e      	ldr	r3, [pc, #248]	; (80076c4 <HAL_TIM_Encoder_Init+0x13c>)
 80075ca:	400b      	ands	r3, r1
 80075cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3304      	adds	r3, #4
 80075d6:	4619      	mov	r1, r3
 80075d8:	4610      	mov	r0, r2
 80075da:	f000 fac5 	bl	8007b68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4b31      	ldr	r3, [pc, #196]	; (80076c8 <HAL_TIM_Encoder_Init+0x140>)
 8007604:	4013      	ands	r3, r2
 8007606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	021b      	lsls	r3, r3, #8
 8007612:	4313      	orrs	r3, r2
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	4313      	orrs	r3, r2
 8007618:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	4b2b      	ldr	r3, [pc, #172]	; (80076cc <HAL_TIM_Encoder_Init+0x144>)
 800761e:	4013      	ands	r3, r2
 8007620:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	4b2a      	ldr	r3, [pc, #168]	; (80076d0 <HAL_TIM_Encoder_Init+0x148>)
 8007626:	4013      	ands	r3, r2
 8007628:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68da      	ldr	r2, [r3, #12]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	021b      	lsls	r3, r3, #8
 8007634:	4313      	orrs	r3, r2
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	4313      	orrs	r3, r2
 800763a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	011a      	lsls	r2, r3, #4
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	031b      	lsls	r3, r3, #12
 8007648:	4313      	orrs	r3, r2
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	4313      	orrs	r3, r2
 800764e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007656:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800765e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	011b      	lsls	r3, r3, #4
 800766a:	4313      	orrs	r3, r2
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	4313      	orrs	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	fffebff8 	.word	0xfffebff8
 80076c8:	fffffcfc 	.word	0xfffffcfc
 80076cc:	fffff3f3 	.word	0xfffff3f3
 80076d0:	ffff0f0f 	.word	0xffff0f0f

080076d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d122      	bne.n	8007730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d11b      	bne.n	8007730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f06f 0202 	mvn.w	r2, #2
 8007700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fa08 	bl	8007b2c <HAL_TIM_IC_CaptureCallback>
 800771c:	e005      	b.n	800772a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f9fa 	bl	8007b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fa0b 	bl	8007b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	f003 0304 	and.w	r3, r3, #4
 800773a:	2b04      	cmp	r3, #4
 800773c:	d122      	bne.n	8007784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b04      	cmp	r3, #4
 800774a:	d11b      	bne.n	8007784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f06f 0204 	mvn.w	r2, #4
 8007754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2202      	movs	r2, #2
 800775a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f9de 	bl	8007b2c <HAL_TIM_IC_CaptureCallback>
 8007770:	e005      	b.n	800777e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f9d0 	bl	8007b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f9e1 	bl	8007b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	2b08      	cmp	r3, #8
 8007790:	d122      	bne.n	80077d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f003 0308 	and.w	r3, r3, #8
 800779c:	2b08      	cmp	r3, #8
 800779e:	d11b      	bne.n	80077d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f06f 0208 	mvn.w	r2, #8
 80077a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2204      	movs	r2, #4
 80077ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f9b4 	bl	8007b2c <HAL_TIM_IC_CaptureCallback>
 80077c4:	e005      	b.n	80077d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f9a6 	bl	8007b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f9b7 	bl	8007b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f003 0310 	and.w	r3, r3, #16
 80077e2:	2b10      	cmp	r3, #16
 80077e4:	d122      	bne.n	800782c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f003 0310 	and.w	r3, r3, #16
 80077f0:	2b10      	cmp	r3, #16
 80077f2:	d11b      	bne.n	800782c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f06f 0210 	mvn.w	r2, #16
 80077fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2208      	movs	r2, #8
 8007802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f98a 	bl	8007b2c <HAL_TIM_IC_CaptureCallback>
 8007818:	e005      	b.n	8007826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f97c 	bl	8007b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f98d 	bl	8007b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b01      	cmp	r3, #1
 8007838:	d10e      	bne.n	8007858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b01      	cmp	r3, #1
 8007846:	d107      	bne.n	8007858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f06f 0201 	mvn.w	r2, #1
 8007850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f956 	bl	8007b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007862:	2b80      	cmp	r3, #128	; 0x80
 8007864:	d10e      	bne.n	8007884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007870:	2b80      	cmp	r3, #128	; 0x80
 8007872:	d107      	bne.n	8007884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800787c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fb42 	bl	8007f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800788e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007892:	d10e      	bne.n	80078b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800789e:	2b80      	cmp	r3, #128	; 0x80
 80078a0:	d107      	bne.n	80078b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80078aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fb35 	bl	8007f1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078bc:	2b40      	cmp	r3, #64	; 0x40
 80078be:	d10e      	bne.n	80078de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ca:	2b40      	cmp	r3, #64	; 0x40
 80078cc:	d107      	bne.n	80078de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f93b 	bl	8007b54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	f003 0320 	and.w	r3, r3, #32
 80078e8:	2b20      	cmp	r3, #32
 80078ea:	d10e      	bne.n	800790a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	f003 0320 	and.w	r3, r3, #32
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d107      	bne.n	800790a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f06f 0220 	mvn.w	r2, #32
 8007902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 faf5 	bl	8007ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800790a:	bf00      	nop
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007928:	2b01      	cmp	r3, #1
 800792a:	d101      	bne.n	8007930 <HAL_TIM_ConfigClockSource+0x1c>
 800792c:	2302      	movs	r3, #2
 800792e:	e0dc      	b.n	8007aea <HAL_TIM_ConfigClockSource+0x1d6>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	4b6a      	ldr	r3, [pc, #424]	; (8007af4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800794c:	4013      	ands	r3, r2
 800794e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007956:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a64      	ldr	r2, [pc, #400]	; (8007af8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007966:	4293      	cmp	r3, r2
 8007968:	f000 80a9 	beq.w	8007abe <HAL_TIM_ConfigClockSource+0x1aa>
 800796c:	4a62      	ldr	r2, [pc, #392]	; (8007af8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	f200 80ae 	bhi.w	8007ad0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007974:	4a61      	ldr	r2, [pc, #388]	; (8007afc <HAL_TIM_ConfigClockSource+0x1e8>)
 8007976:	4293      	cmp	r3, r2
 8007978:	f000 80a1 	beq.w	8007abe <HAL_TIM_ConfigClockSource+0x1aa>
 800797c:	4a5f      	ldr	r2, [pc, #380]	; (8007afc <HAL_TIM_ConfigClockSource+0x1e8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	f200 80a6 	bhi.w	8007ad0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007984:	4a5e      	ldr	r2, [pc, #376]	; (8007b00 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007986:	4293      	cmp	r3, r2
 8007988:	f000 8099 	beq.w	8007abe <HAL_TIM_ConfigClockSource+0x1aa>
 800798c:	4a5c      	ldr	r2, [pc, #368]	; (8007b00 <HAL_TIM_ConfigClockSource+0x1ec>)
 800798e:	4293      	cmp	r3, r2
 8007990:	f200 809e 	bhi.w	8007ad0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007994:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007998:	f000 8091 	beq.w	8007abe <HAL_TIM_ConfigClockSource+0x1aa>
 800799c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80079a0:	f200 8096 	bhi.w	8007ad0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079a8:	f000 8089 	beq.w	8007abe <HAL_TIM_ConfigClockSource+0x1aa>
 80079ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079b0:	f200 808e 	bhi.w	8007ad0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079b8:	d03e      	beq.n	8007a38 <HAL_TIM_ConfigClockSource+0x124>
 80079ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079be:	f200 8087 	bhi.w	8007ad0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c6:	f000 8086 	beq.w	8007ad6 <HAL_TIM_ConfigClockSource+0x1c2>
 80079ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ce:	d87f      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079d0:	2b70      	cmp	r3, #112	; 0x70
 80079d2:	d01a      	beq.n	8007a0a <HAL_TIM_ConfigClockSource+0xf6>
 80079d4:	2b70      	cmp	r3, #112	; 0x70
 80079d6:	d87b      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079d8:	2b60      	cmp	r3, #96	; 0x60
 80079da:	d050      	beq.n	8007a7e <HAL_TIM_ConfigClockSource+0x16a>
 80079dc:	2b60      	cmp	r3, #96	; 0x60
 80079de:	d877      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079e0:	2b50      	cmp	r3, #80	; 0x50
 80079e2:	d03c      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x14a>
 80079e4:	2b50      	cmp	r3, #80	; 0x50
 80079e6:	d873      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079e8:	2b40      	cmp	r3, #64	; 0x40
 80079ea:	d058      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0x18a>
 80079ec:	2b40      	cmp	r3, #64	; 0x40
 80079ee:	d86f      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079f0:	2b30      	cmp	r3, #48	; 0x30
 80079f2:	d064      	beq.n	8007abe <HAL_TIM_ConfigClockSource+0x1aa>
 80079f4:	2b30      	cmp	r3, #48	; 0x30
 80079f6:	d86b      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079f8:	2b20      	cmp	r3, #32
 80079fa:	d060      	beq.n	8007abe <HAL_TIM_ConfigClockSource+0x1aa>
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	d867      	bhi.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d05c      	beq.n	8007abe <HAL_TIM_ConfigClockSource+0x1aa>
 8007a04:	2b10      	cmp	r3, #16
 8007a06:	d05a      	beq.n	8007abe <HAL_TIM_ConfigClockSource+0x1aa>
 8007a08:	e062      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a1a:	f000 f9bd 	bl	8007d98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	609a      	str	r2, [r3, #8]
      break;
 8007a36:	e04f      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a48:	f000 f9a6 	bl	8007d98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a5a:	609a      	str	r2, [r3, #8]
      break;
 8007a5c:	e03c      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f000 f916 	bl	8007c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2150      	movs	r1, #80	; 0x50
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 f970 	bl	8007d5c <TIM_ITRx_SetConfig>
      break;
 8007a7c:	e02c      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f000 f935 	bl	8007cfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2160      	movs	r1, #96	; 0x60
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 f960 	bl	8007d5c <TIM_ITRx_SetConfig>
      break;
 8007a9c:	e01c      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f000 f8f6 	bl	8007c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2140      	movs	r1, #64	; 0x40
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 f950 	bl	8007d5c <TIM_ITRx_SetConfig>
      break;
 8007abc:	e00c      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4610      	mov	r0, r2
 8007aca:	f000 f947 	bl	8007d5c <TIM_ITRx_SetConfig>
      break;
 8007ace:	e003      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad4:	e000      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007ad6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	ffceff88 	.word	0xffceff88
 8007af8:	00100040 	.word	0x00100040
 8007afc:	00100030 	.word	0x00100030
 8007b00:	00100020 	.word	0x00100020

08007b04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a40      	ldr	r2, [pc, #256]	; (8007c7c <TIM_Base_SetConfig+0x114>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d013      	beq.n	8007ba8 <TIM_Base_SetConfig+0x40>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b86:	d00f      	beq.n	8007ba8 <TIM_Base_SetConfig+0x40>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a3d      	ldr	r2, [pc, #244]	; (8007c80 <TIM_Base_SetConfig+0x118>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d00b      	beq.n	8007ba8 <TIM_Base_SetConfig+0x40>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a3c      	ldr	r2, [pc, #240]	; (8007c84 <TIM_Base_SetConfig+0x11c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d007      	beq.n	8007ba8 <TIM_Base_SetConfig+0x40>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a3b      	ldr	r2, [pc, #236]	; (8007c88 <TIM_Base_SetConfig+0x120>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d003      	beq.n	8007ba8 <TIM_Base_SetConfig+0x40>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a3a      	ldr	r2, [pc, #232]	; (8007c8c <TIM_Base_SetConfig+0x124>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d108      	bne.n	8007bba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a2f      	ldr	r2, [pc, #188]	; (8007c7c <TIM_Base_SetConfig+0x114>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d01f      	beq.n	8007c02 <TIM_Base_SetConfig+0x9a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc8:	d01b      	beq.n	8007c02 <TIM_Base_SetConfig+0x9a>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a2c      	ldr	r2, [pc, #176]	; (8007c80 <TIM_Base_SetConfig+0x118>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d017      	beq.n	8007c02 <TIM_Base_SetConfig+0x9a>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a2b      	ldr	r2, [pc, #172]	; (8007c84 <TIM_Base_SetConfig+0x11c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d013      	beq.n	8007c02 <TIM_Base_SetConfig+0x9a>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a2a      	ldr	r2, [pc, #168]	; (8007c88 <TIM_Base_SetConfig+0x120>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d00f      	beq.n	8007c02 <TIM_Base_SetConfig+0x9a>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a29      	ldr	r2, [pc, #164]	; (8007c8c <TIM_Base_SetConfig+0x124>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d00b      	beq.n	8007c02 <TIM_Base_SetConfig+0x9a>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a28      	ldr	r2, [pc, #160]	; (8007c90 <TIM_Base_SetConfig+0x128>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d007      	beq.n	8007c02 <TIM_Base_SetConfig+0x9a>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a27      	ldr	r2, [pc, #156]	; (8007c94 <TIM_Base_SetConfig+0x12c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d003      	beq.n	8007c02 <TIM_Base_SetConfig+0x9a>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a26      	ldr	r2, [pc, #152]	; (8007c98 <TIM_Base_SetConfig+0x130>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d108      	bne.n	8007c14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a10      	ldr	r2, [pc, #64]	; (8007c7c <TIM_Base_SetConfig+0x114>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d00f      	beq.n	8007c60 <TIM_Base_SetConfig+0xf8>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a12      	ldr	r2, [pc, #72]	; (8007c8c <TIM_Base_SetConfig+0x124>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d00b      	beq.n	8007c60 <TIM_Base_SetConfig+0xf8>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a11      	ldr	r2, [pc, #68]	; (8007c90 <TIM_Base_SetConfig+0x128>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d007      	beq.n	8007c60 <TIM_Base_SetConfig+0xf8>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a10      	ldr	r2, [pc, #64]	; (8007c94 <TIM_Base_SetConfig+0x12c>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d003      	beq.n	8007c60 <TIM_Base_SetConfig+0xf8>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a0f      	ldr	r2, [pc, #60]	; (8007c98 <TIM_Base_SetConfig+0x130>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d103      	bne.n	8007c68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	691a      	ldr	r2, [r3, #16]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	615a      	str	r2, [r3, #20]
}
 8007c6e:	bf00      	nop
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	40010000 	.word	0x40010000
 8007c80:	40000400 	.word	0x40000400
 8007c84:	40000800 	.word	0x40000800
 8007c88:	40000c00 	.word	0x40000c00
 8007c8c:	40010400 	.word	0x40010400
 8007c90:	40014000 	.word	0x40014000
 8007c94:	40014400 	.word	0x40014400
 8007c98:	40014800 	.word	0x40014800

08007c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	f023 0201 	bic.w	r2, r3, #1
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f023 030a 	bic.w	r3, r3, #10
 8007cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	621a      	str	r2, [r3, #32]
}
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b087      	sub	sp, #28
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	60b9      	str	r1, [r7, #8]
 8007d04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	f023 0210 	bic.w	r2, r3, #16
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6a1b      	ldr	r3, [r3, #32]
 8007d1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	031b      	lsls	r3, r3, #12
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	621a      	str	r2, [r3, #32]
}
 8007d4e:	bf00      	nop
 8007d50:	371c      	adds	r7, #28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
	...

08007d5c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4b09      	ldr	r3, [pc, #36]	; (8007d94 <TIM_ITRx_SetConfig+0x38>)
 8007d70:	4013      	ands	r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	f043 0307 	orr.w	r3, r3, #7
 8007d7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	609a      	str	r2, [r3, #8]
}
 8007d86:	bf00      	nop
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	ffcfff8f 	.word	0xffcfff8f

08007d98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b087      	sub	sp, #28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007db2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	021a      	lsls	r2, r3, #8
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	431a      	orrs	r2, r3
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	609a      	str	r2, [r3, #8]
}
 8007dcc:	bf00      	nop
 8007dce:	371c      	adds	r7, #28
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d101      	bne.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e06d      	b.n	8007ecc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a30      	ldr	r2, [pc, #192]	; (8007ed8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d004      	beq.n	8007e24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a2f      	ldr	r2, [pc, #188]	; (8007edc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d108      	bne.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007e2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a20      	ldr	r2, [pc, #128]	; (8007ed8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d022      	beq.n	8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e62:	d01d      	beq.n	8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a1d      	ldr	r2, [pc, #116]	; (8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d018      	beq.n	8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a1c      	ldr	r2, [pc, #112]	; (8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d013      	beq.n	8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a1a      	ldr	r2, [pc, #104]	; (8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d00e      	beq.n	8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a15      	ldr	r2, [pc, #84]	; (8007edc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d009      	beq.n	8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a16      	ldr	r2, [pc, #88]	; (8007eec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d004      	beq.n	8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a15      	ldr	r2, [pc, #84]	; (8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d10c      	bne.n	8007eba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ea6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	40010000 	.word	0x40010000
 8007edc:	40010400 	.word	0x40010400
 8007ee0:	40000400 	.word	0x40000400
 8007ee4:	40000800 	.word	0x40000800
 8007ee8:	40000c00 	.word	0x40000c00
 8007eec:	40001800 	.word	0x40001800
 8007ef0:	40014000 	.word	0x40014000

08007ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e042      	b.n	8007fc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d106      	bne.n	8007f5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7f9 fa31 	bl	80013bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2224      	movs	r2, #36	; 0x24
 8007f5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f022 0201 	bic.w	r2, r2, #1
 8007f70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fce0 	bl	8008938 <UART_SetConfig>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d101      	bne.n	8007f82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e022      	b.n	8007fc8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f001 fb40 	bl	8009610 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689a      	ldr	r2, [r3, #8]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f042 0201 	orr.w	r2, r2, #1
 8007fbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 fbc7 	bl	8009754 <UART_CheckIdleState>
 8007fc6:	4603      	mov	r3, r0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08a      	sub	sp, #40	; 0x28
 8007fd4:	af02      	add	r7, sp, #8
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	603b      	str	r3, [r7, #0]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe6:	2b20      	cmp	r3, #32
 8007fe8:	d17b      	bne.n	80080e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d002      	beq.n	8007ff6 <HAL_UART_Transmit+0x26>
 8007ff0:	88fb      	ldrh	r3, [r7, #6]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e074      	b.n	80080e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2221      	movs	r2, #33	; 0x21
 8008006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800800a:	f7f9 fc2b 	bl	8001864 <HAL_GetTick>
 800800e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	88fa      	ldrh	r2, [r7, #6]
 8008014:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	88fa      	ldrh	r2, [r7, #6]
 800801c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008028:	d108      	bne.n	800803c <HAL_UART_Transmit+0x6c>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d104      	bne.n	800803c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008032:	2300      	movs	r3, #0
 8008034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	61bb      	str	r3, [r7, #24]
 800803a:	e003      	b.n	8008044 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008040:	2300      	movs	r3, #0
 8008042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008044:	e030      	b.n	80080a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	2200      	movs	r2, #0
 800804e:	2180      	movs	r1, #128	; 0x80
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f001 fc29 	bl	80098a8 <UART_WaitOnFlagUntilTimeout>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d005      	beq.n	8008068 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2220      	movs	r2, #32
 8008060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e03d      	b.n	80080e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10b      	bne.n	8008086 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800807c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	3302      	adds	r3, #2
 8008082:	61bb      	str	r3, [r7, #24]
 8008084:	e007      	b.n	8008096 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	781a      	ldrb	r2, [r3, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	3301      	adds	r3, #1
 8008094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800809c:	b29b      	uxth	r3, r3
 800809e:	3b01      	subs	r3, #1
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1c8      	bne.n	8008046 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	2200      	movs	r2, #0
 80080bc:	2140      	movs	r1, #64	; 0x40
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f001 fbf2 	bl	80098a8 <UART_WaitOnFlagUntilTimeout>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d005      	beq.n	80080d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2220      	movs	r2, #32
 80080ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e006      	b.n	80080e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2220      	movs	r2, #32
 80080da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	e000      	b.n	80080e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80080e2:	2302      	movs	r3, #2
  }
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3720      	adds	r7, #32
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08a      	sub	sp, #40	; 0x28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	4613      	mov	r3, r2
 80080f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008100:	2b20      	cmp	r3, #32
 8008102:	d137      	bne.n	8008174 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d002      	beq.n	8008110 <HAL_UART_Receive_IT+0x24>
 800810a:	88fb      	ldrh	r3, [r7, #6]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e030      	b.n	8008176 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a18      	ldr	r2, [pc, #96]	; (8008180 <HAL_UART_Receive_IT+0x94>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d01f      	beq.n	8008164 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d018      	beq.n	8008164 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	e853 3f00 	ldrex	r3, [r3]
 800813e:	613b      	str	r3, [r7, #16]
   return(result);
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008146:	627b      	str	r3, [r7, #36]	; 0x24
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	461a      	mov	r2, r3
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	623b      	str	r3, [r7, #32]
 8008152:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008154:	69f9      	ldr	r1, [r7, #28]
 8008156:	6a3a      	ldr	r2, [r7, #32]
 8008158:	e841 2300 	strex	r3, r2, [r1]
 800815c:	61bb      	str	r3, [r7, #24]
   return(result);
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1e6      	bne.n	8008132 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008164:	88fb      	ldrh	r3, [r7, #6]
 8008166:	461a      	mov	r2, r3
 8008168:	68b9      	ldr	r1, [r7, #8]
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f001 fc04 	bl	8009978 <UART_Start_Receive_IT>
 8008170:	4603      	mov	r3, r0
 8008172:	e000      	b.n	8008176 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008174:	2302      	movs	r3, #2
  }
}
 8008176:	4618      	mov	r0, r3
 8008178:	3728      	adds	r7, #40	; 0x28
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	58000c00 	.word	0x58000c00

08008184 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b0ba      	sub	sp, #232	; 0xe8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80081aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80081ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80081b2:	4013      	ands	r3, r2
 80081b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80081b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d11b      	bne.n	80081f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c4:	f003 0320 	and.w	r3, r3, #32
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d015      	beq.n	80081f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d105      	bne.n	80081e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d009      	beq.n	80081f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 8377 	beq.w	80088dc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
      }
      return;
 80081f6:	e371      	b.n	80088dc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80081f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 8123 	beq.w	8008448 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008202:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008206:	4b8d      	ldr	r3, [pc, #564]	; (800843c <HAL_UART_IRQHandler+0x2b8>)
 8008208:	4013      	ands	r3, r2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d106      	bne.n	800821c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800820e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008212:	4b8b      	ldr	r3, [pc, #556]	; (8008440 <HAL_UART_IRQHandler+0x2bc>)
 8008214:	4013      	ands	r3, r2
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 8116 	beq.w	8008448 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800821c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	2b00      	cmp	r3, #0
 8008226:	d011      	beq.n	800824c <HAL_UART_IRQHandler+0xc8>
 8008228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800822c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00b      	beq.n	800824c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2201      	movs	r2, #1
 800823a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008242:	f043 0201 	orr.w	r2, r3, #1
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800824c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008250:	f003 0302 	and.w	r3, r3, #2
 8008254:	2b00      	cmp	r3, #0
 8008256:	d011      	beq.n	800827c <HAL_UART_IRQHandler+0xf8>
 8008258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00b      	beq.n	800827c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2202      	movs	r2, #2
 800826a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008272:	f043 0204 	orr.w	r2, r3, #4
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800827c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008280:	f003 0304 	and.w	r3, r3, #4
 8008284:	2b00      	cmp	r3, #0
 8008286:	d011      	beq.n	80082ac <HAL_UART_IRQHandler+0x128>
 8008288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00b      	beq.n	80082ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2204      	movs	r2, #4
 800829a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082a2:	f043 0202 	orr.w	r2, r3, #2
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082b0:	f003 0308 	and.w	r3, r3, #8
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d017      	beq.n	80082e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082bc:	f003 0320 	and.w	r3, r3, #32
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d105      	bne.n	80082d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80082c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80082c8:	4b5c      	ldr	r3, [pc, #368]	; (800843c <HAL_UART_IRQHandler+0x2b8>)
 80082ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00b      	beq.n	80082e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2208      	movs	r2, #8
 80082d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082de:	f043 0208 	orr.w	r2, r3, #8
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d012      	beq.n	800831a <HAL_UART_IRQHandler+0x196>
 80082f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00c      	beq.n	800831a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008308:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008310:	f043 0220 	orr.w	r2, r3, #32
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 82dd 	beq.w	80088e0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800832a:	f003 0320 	and.w	r3, r3, #32
 800832e:	2b00      	cmp	r3, #0
 8008330:	d013      	beq.n	800835a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	2b00      	cmp	r3, #0
 800833c:	d105      	bne.n	800834a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800833e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d007      	beq.n	800835a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008360:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836e:	2b40      	cmp	r3, #64	; 0x40
 8008370:	d005      	beq.n	800837e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008376:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800837a:	2b00      	cmp	r3, #0
 800837c:	d054      	beq.n	8008428 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f001 fc1c 	bl	8009bbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838e:	2b40      	cmp	r3, #64	; 0x40
 8008390:	d146      	bne.n	8008420 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	3308      	adds	r3, #8
 8008398:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083a0:	e853 3f00 	ldrex	r3, [r3]
 80083a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80083a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3308      	adds	r3, #8
 80083ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80083be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80083c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1d9      	bne.n	8008392 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d017      	beq.n	8008418 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083ee:	4a15      	ldr	r2, [pc, #84]	; (8008444 <HAL_UART_IRQHandler+0x2c0>)
 80083f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7fb f83b 	bl	8003474 <HAL_DMA_Abort_IT>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d019      	beq.n	8008438 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800840a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008412:	4610      	mov	r0, r2
 8008414:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008416:	e00f      	b.n	8008438 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fa77 	bl	800890c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800841e:	e00b      	b.n	8008438 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fa73 	bl	800890c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008426:	e007      	b.n	8008438 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fa6f 	bl	800890c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008436:	e253      	b.n	80088e0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008438:	bf00      	nop
    return;
 800843a:	e251      	b.n	80088e0 <HAL_UART_IRQHandler+0x75c>
 800843c:	10000001 	.word	0x10000001
 8008440:	04000120 	.word	0x04000120
 8008444:	08009c89 	.word	0x08009c89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800844c:	2b01      	cmp	r3, #1
 800844e:	f040 81e7 	bne.w	8008820 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008456:	f003 0310 	and.w	r3, r3, #16
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 81e0 	beq.w	8008820 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008464:	f003 0310 	and.w	r3, r3, #16
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 81d9 	beq.w	8008820 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2210      	movs	r2, #16
 8008474:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008480:	2b40      	cmp	r3, #64	; 0x40
 8008482:	f040 8151 	bne.w	8008728 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a96      	ldr	r2, [pc, #600]	; (80086e8 <HAL_UART_IRQHandler+0x564>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d068      	beq.n	8008566 <HAL_UART_IRQHandler+0x3e2>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a93      	ldr	r2, [pc, #588]	; (80086ec <HAL_UART_IRQHandler+0x568>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d061      	beq.n	8008566 <HAL_UART_IRQHandler+0x3e2>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a91      	ldr	r2, [pc, #580]	; (80086f0 <HAL_UART_IRQHandler+0x56c>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d05a      	beq.n	8008566 <HAL_UART_IRQHandler+0x3e2>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a8e      	ldr	r2, [pc, #568]	; (80086f4 <HAL_UART_IRQHandler+0x570>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d053      	beq.n	8008566 <HAL_UART_IRQHandler+0x3e2>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a8c      	ldr	r2, [pc, #560]	; (80086f8 <HAL_UART_IRQHandler+0x574>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d04c      	beq.n	8008566 <HAL_UART_IRQHandler+0x3e2>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a89      	ldr	r2, [pc, #548]	; (80086fc <HAL_UART_IRQHandler+0x578>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d045      	beq.n	8008566 <HAL_UART_IRQHandler+0x3e2>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a87      	ldr	r2, [pc, #540]	; (8008700 <HAL_UART_IRQHandler+0x57c>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d03e      	beq.n	8008566 <HAL_UART_IRQHandler+0x3e2>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a84      	ldr	r2, [pc, #528]	; (8008704 <HAL_UART_IRQHandler+0x580>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d037      	beq.n	8008566 <HAL_UART_IRQHandler+0x3e2>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a82      	ldr	r2, [pc, #520]	; (8008708 <HAL_UART_IRQHandler+0x584>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d030      	beq.n	8008566 <HAL_UART_IRQHandler+0x3e2>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a7f      	ldr	r2, [pc, #508]	; (800870c <HAL_UART_IRQHandler+0x588>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d029      	beq.n	8008566 <HAL_UART_IRQHandler+0x3e2>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a7d      	ldr	r2, [pc, #500]	; (8008710 <HAL_UART_IRQHandler+0x58c>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d022      	beq.n	8008566 <HAL_UART_IRQHandler+0x3e2>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a7a      	ldr	r2, [pc, #488]	; (8008714 <HAL_UART_IRQHandler+0x590>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d01b      	beq.n	8008566 <HAL_UART_IRQHandler+0x3e2>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a78      	ldr	r2, [pc, #480]	; (8008718 <HAL_UART_IRQHandler+0x594>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d014      	beq.n	8008566 <HAL_UART_IRQHandler+0x3e2>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a75      	ldr	r2, [pc, #468]	; (800871c <HAL_UART_IRQHandler+0x598>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d00d      	beq.n	8008566 <HAL_UART_IRQHandler+0x3e2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a73      	ldr	r2, [pc, #460]	; (8008720 <HAL_UART_IRQHandler+0x59c>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d006      	beq.n	8008566 <HAL_UART_IRQHandler+0x3e2>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a70      	ldr	r2, [pc, #448]	; (8008724 <HAL_UART_IRQHandler+0x5a0>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d106      	bne.n	8008574 <HAL_UART_IRQHandler+0x3f0>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	b29b      	uxth	r3, r3
 8008572:	e005      	b.n	8008580 <HAL_UART_IRQHandler+0x3fc>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	b29b      	uxth	r3, r3
 8008580:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008584:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 81ab 	beq.w	80088e4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008594:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008598:	429a      	cmp	r2, r3
 800859a:	f080 81a3 	bcs.w	80088e4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085ae:	69db      	ldr	r3, [r3, #28]
 80085b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085b4:	f000 8087 	beq.w	80086c6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085c4:	e853 3f00 	ldrex	r3, [r3]
 80085c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80085cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	461a      	mov	r2, r3
 80085de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80085e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80085ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80085f2:	e841 2300 	strex	r3, r2, [r1]
 80085f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80085fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1da      	bne.n	80085b8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	3308      	adds	r3, #8
 8008608:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008614:	f023 0301 	bic.w	r3, r3, #1
 8008618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3308      	adds	r3, #8
 8008622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008626:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800862a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800862e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008632:	e841 2300 	strex	r3, r2, [r1]
 8008636:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1e1      	bne.n	8008602 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3308      	adds	r3, #8
 8008644:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800864e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3308      	adds	r3, #8
 800865e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008662:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008664:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008666:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008668:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1e3      	bne.n	800863e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800868c:	e853 3f00 	ldrex	r3, [r3]
 8008690:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008694:	f023 0310 	bic.w	r3, r3, #16
 8008698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	461a      	mov	r2, r3
 80086a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80086a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80086ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80086b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e4      	bne.n	8008684 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fa fbb9 	bl	8002e38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2202      	movs	r2, #2
 80086ca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086d8:	b29b      	uxth	r3, r3
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	b29b      	uxth	r3, r3
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f91d 	bl	8008920 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086e6:	e0fd      	b.n	80088e4 <HAL_UART_IRQHandler+0x760>
 80086e8:	40020010 	.word	0x40020010
 80086ec:	40020028 	.word	0x40020028
 80086f0:	40020040 	.word	0x40020040
 80086f4:	40020058 	.word	0x40020058
 80086f8:	40020070 	.word	0x40020070
 80086fc:	40020088 	.word	0x40020088
 8008700:	400200a0 	.word	0x400200a0
 8008704:	400200b8 	.word	0x400200b8
 8008708:	40020410 	.word	0x40020410
 800870c:	40020428 	.word	0x40020428
 8008710:	40020440 	.word	0x40020440
 8008714:	40020458 	.word	0x40020458
 8008718:	40020470 	.word	0x40020470
 800871c:	40020488 	.word	0x40020488
 8008720:	400204a0 	.word	0x400204a0
 8008724:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008734:	b29b      	uxth	r3, r3
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008742:	b29b      	uxth	r3, r3
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 80cf 	beq.w	80088e8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800874a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800874e:	2b00      	cmp	r3, #0
 8008750:	f000 80ca 	beq.w	80088e8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008764:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008768:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	461a      	mov	r2, r3
 8008772:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008776:	647b      	str	r3, [r7, #68]	; 0x44
 8008778:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800877c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e4      	bne.n	8008754 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3308      	adds	r3, #8
 8008790:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	e853 3f00 	ldrex	r3, [r3]
 8008798:	623b      	str	r3, [r7, #32]
   return(result);
 800879a:	6a3a      	ldr	r2, [r7, #32]
 800879c:	4b55      	ldr	r3, [pc, #340]	; (80088f4 <HAL_UART_IRQHandler+0x770>)
 800879e:	4013      	ands	r3, r2
 80087a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3308      	adds	r3, #8
 80087aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087ae:	633a      	str	r2, [r7, #48]	; 0x30
 80087b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1e3      	bne.n	800878a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2220      	movs	r2, #32
 80087c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	e853 3f00 	ldrex	r3, [r3]
 80087e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 0310 	bic.w	r3, r3, #16
 80087ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087f8:	61fb      	str	r3, [r7, #28]
 80087fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	69b9      	ldr	r1, [r7, #24]
 80087fe:	69fa      	ldr	r2, [r7, #28]
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	617b      	str	r3, [r7, #20]
   return(result);
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e4      	bne.n	80087d6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2202      	movs	r2, #2
 8008810:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008812:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f881 	bl	8008920 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800881e:	e063      	b.n	80088e8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00e      	beq.n	800884a <HAL_UART_IRQHandler+0x6c6>
 800882c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d008      	beq.n	800884a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008840:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f001 ff7e 	bl	800a744 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008848:	e051      	b.n	80088ee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800884a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800884e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008852:	2b00      	cmp	r3, #0
 8008854:	d014      	beq.n	8008880 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800885a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885e:	2b00      	cmp	r3, #0
 8008860:	d105      	bne.n	800886e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d008      	beq.n	8008880 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008872:	2b00      	cmp	r3, #0
 8008874:	d03a      	beq.n	80088ec <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	4798      	blx	r3
    }
    return;
 800887e:	e035      	b.n	80088ec <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008888:	2b00      	cmp	r3, #0
 800888a:	d009      	beq.n	80088a0 <HAL_UART_IRQHandler+0x71c>
 800888c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008894:	2b00      	cmp	r3, #0
 8008896:	d003      	beq.n	80088a0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f001 fa0b 	bl	8009cb4 <UART_EndTransmit_IT>
    return;
 800889e:	e026      	b.n	80088ee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80088a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d009      	beq.n	80088c0 <HAL_UART_IRQHandler+0x73c>
 80088ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d003      	beq.n	80088c0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f001 ff57 	bl	800a76c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088be:	e016      	b.n	80088ee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80088c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d010      	beq.n	80088ee <HAL_UART_IRQHandler+0x76a>
 80088cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	da0c      	bge.n	80088ee <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f001 ff3f 	bl	800a758 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088da:	e008      	b.n	80088ee <HAL_UART_IRQHandler+0x76a>
      return;
 80088dc:	bf00      	nop
 80088de:	e006      	b.n	80088ee <HAL_UART_IRQHandler+0x76a>
    return;
 80088e0:	bf00      	nop
 80088e2:	e004      	b.n	80088ee <HAL_UART_IRQHandler+0x76a>
      return;
 80088e4:	bf00      	nop
 80088e6:	e002      	b.n	80088ee <HAL_UART_IRQHandler+0x76a>
      return;
 80088e8:	bf00      	nop
 80088ea:	e000      	b.n	80088ee <HAL_UART_IRQHandler+0x76a>
    return;
 80088ec:	bf00      	nop
  }
}
 80088ee:	37e8      	adds	r7, #232	; 0xe8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	effffffe 	.word	0xeffffffe

080088f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800893c:	b092      	sub	sp, #72	; 0x48
 800893e:	af00      	add	r7, sp, #0
 8008940:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	689a      	ldr	r2, [r3, #8]
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	431a      	orrs	r2, r3
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	431a      	orrs	r2, r3
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	69db      	ldr	r3, [r3, #28]
 800895c:	4313      	orrs	r3, r2
 800895e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	4bbe      	ldr	r3, [pc, #760]	; (8008c60 <UART_SetConfig+0x328>)
 8008968:	4013      	ands	r3, r2
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	6812      	ldr	r2, [r2, #0]
 800896e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008970:	430b      	orrs	r3, r1
 8008972:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4ab3      	ldr	r2, [pc, #716]	; (8008c64 <UART_SetConfig+0x32c>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d004      	beq.n	80089a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089a0:	4313      	orrs	r3, r2
 80089a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	689a      	ldr	r2, [r3, #8]
 80089aa:	4baf      	ldr	r3, [pc, #700]	; (8008c68 <UART_SetConfig+0x330>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	6812      	ldr	r2, [r2, #0]
 80089b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089b4:	430b      	orrs	r3, r1
 80089b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089be:	f023 010f 	bic.w	r1, r3, #15
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	430a      	orrs	r2, r1
 80089cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4aa6      	ldr	r2, [pc, #664]	; (8008c6c <UART_SetConfig+0x334>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d177      	bne.n	8008ac8 <UART_SetConfig+0x190>
 80089d8:	4ba5      	ldr	r3, [pc, #660]	; (8008c70 <UART_SetConfig+0x338>)
 80089da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089e0:	2b28      	cmp	r3, #40	; 0x28
 80089e2:	d86d      	bhi.n	8008ac0 <UART_SetConfig+0x188>
 80089e4:	a201      	add	r2, pc, #4	; (adr r2, 80089ec <UART_SetConfig+0xb4>)
 80089e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ea:	bf00      	nop
 80089ec:	08008a91 	.word	0x08008a91
 80089f0:	08008ac1 	.word	0x08008ac1
 80089f4:	08008ac1 	.word	0x08008ac1
 80089f8:	08008ac1 	.word	0x08008ac1
 80089fc:	08008ac1 	.word	0x08008ac1
 8008a00:	08008ac1 	.word	0x08008ac1
 8008a04:	08008ac1 	.word	0x08008ac1
 8008a08:	08008ac1 	.word	0x08008ac1
 8008a0c:	08008a99 	.word	0x08008a99
 8008a10:	08008ac1 	.word	0x08008ac1
 8008a14:	08008ac1 	.word	0x08008ac1
 8008a18:	08008ac1 	.word	0x08008ac1
 8008a1c:	08008ac1 	.word	0x08008ac1
 8008a20:	08008ac1 	.word	0x08008ac1
 8008a24:	08008ac1 	.word	0x08008ac1
 8008a28:	08008ac1 	.word	0x08008ac1
 8008a2c:	08008aa1 	.word	0x08008aa1
 8008a30:	08008ac1 	.word	0x08008ac1
 8008a34:	08008ac1 	.word	0x08008ac1
 8008a38:	08008ac1 	.word	0x08008ac1
 8008a3c:	08008ac1 	.word	0x08008ac1
 8008a40:	08008ac1 	.word	0x08008ac1
 8008a44:	08008ac1 	.word	0x08008ac1
 8008a48:	08008ac1 	.word	0x08008ac1
 8008a4c:	08008aa9 	.word	0x08008aa9
 8008a50:	08008ac1 	.word	0x08008ac1
 8008a54:	08008ac1 	.word	0x08008ac1
 8008a58:	08008ac1 	.word	0x08008ac1
 8008a5c:	08008ac1 	.word	0x08008ac1
 8008a60:	08008ac1 	.word	0x08008ac1
 8008a64:	08008ac1 	.word	0x08008ac1
 8008a68:	08008ac1 	.word	0x08008ac1
 8008a6c:	08008ab1 	.word	0x08008ab1
 8008a70:	08008ac1 	.word	0x08008ac1
 8008a74:	08008ac1 	.word	0x08008ac1
 8008a78:	08008ac1 	.word	0x08008ac1
 8008a7c:	08008ac1 	.word	0x08008ac1
 8008a80:	08008ac1 	.word	0x08008ac1
 8008a84:	08008ac1 	.word	0x08008ac1
 8008a88:	08008ac1 	.word	0x08008ac1
 8008a8c:	08008ab9 	.word	0x08008ab9
 8008a90:	2301      	movs	r3, #1
 8008a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a96:	e326      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008a98:	2304      	movs	r3, #4
 8008a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a9e:	e322      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008aa0:	2308      	movs	r3, #8
 8008aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aa6:	e31e      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008aa8:	2310      	movs	r3, #16
 8008aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aae:	e31a      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008ab0:	2320      	movs	r3, #32
 8008ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab6:	e316      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008ab8:	2340      	movs	r3, #64	; 0x40
 8008aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008abe:	e312      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008ac0:	2380      	movs	r3, #128	; 0x80
 8008ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac6:	e30e      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a69      	ldr	r2, [pc, #420]	; (8008c74 <UART_SetConfig+0x33c>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d130      	bne.n	8008b34 <UART_SetConfig+0x1fc>
 8008ad2:	4b67      	ldr	r3, [pc, #412]	; (8008c70 <UART_SetConfig+0x338>)
 8008ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad6:	f003 0307 	and.w	r3, r3, #7
 8008ada:	2b05      	cmp	r3, #5
 8008adc:	d826      	bhi.n	8008b2c <UART_SetConfig+0x1f4>
 8008ade:	a201      	add	r2, pc, #4	; (adr r2, 8008ae4 <UART_SetConfig+0x1ac>)
 8008ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae4:	08008afd 	.word	0x08008afd
 8008ae8:	08008b05 	.word	0x08008b05
 8008aec:	08008b0d 	.word	0x08008b0d
 8008af0:	08008b15 	.word	0x08008b15
 8008af4:	08008b1d 	.word	0x08008b1d
 8008af8:	08008b25 	.word	0x08008b25
 8008afc:	2300      	movs	r3, #0
 8008afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b02:	e2f0      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008b04:	2304      	movs	r3, #4
 8008b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b0a:	e2ec      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008b0c:	2308      	movs	r3, #8
 8008b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b12:	e2e8      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008b14:	2310      	movs	r3, #16
 8008b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b1a:	e2e4      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008b1c:	2320      	movs	r3, #32
 8008b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b22:	e2e0      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008b24:	2340      	movs	r3, #64	; 0x40
 8008b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b2a:	e2dc      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008b2c:	2380      	movs	r3, #128	; 0x80
 8008b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b32:	e2d8      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a4f      	ldr	r2, [pc, #316]	; (8008c78 <UART_SetConfig+0x340>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d130      	bne.n	8008ba0 <UART_SetConfig+0x268>
 8008b3e:	4b4c      	ldr	r3, [pc, #304]	; (8008c70 <UART_SetConfig+0x338>)
 8008b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	2b05      	cmp	r3, #5
 8008b48:	d826      	bhi.n	8008b98 <UART_SetConfig+0x260>
 8008b4a:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <UART_SetConfig+0x218>)
 8008b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b50:	08008b69 	.word	0x08008b69
 8008b54:	08008b71 	.word	0x08008b71
 8008b58:	08008b79 	.word	0x08008b79
 8008b5c:	08008b81 	.word	0x08008b81
 8008b60:	08008b89 	.word	0x08008b89
 8008b64:	08008b91 	.word	0x08008b91
 8008b68:	2300      	movs	r3, #0
 8008b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b6e:	e2ba      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008b70:	2304      	movs	r3, #4
 8008b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b76:	e2b6      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008b78:	2308      	movs	r3, #8
 8008b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b7e:	e2b2      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008b80:	2310      	movs	r3, #16
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b86:	e2ae      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008b88:	2320      	movs	r3, #32
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b8e:	e2aa      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008b90:	2340      	movs	r3, #64	; 0x40
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b96:	e2a6      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008b98:	2380      	movs	r3, #128	; 0x80
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b9e:	e2a2      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a35      	ldr	r2, [pc, #212]	; (8008c7c <UART_SetConfig+0x344>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d130      	bne.n	8008c0c <UART_SetConfig+0x2d4>
 8008baa:	4b31      	ldr	r3, [pc, #196]	; (8008c70 <UART_SetConfig+0x338>)
 8008bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bae:	f003 0307 	and.w	r3, r3, #7
 8008bb2:	2b05      	cmp	r3, #5
 8008bb4:	d826      	bhi.n	8008c04 <UART_SetConfig+0x2cc>
 8008bb6:	a201      	add	r2, pc, #4	; (adr r2, 8008bbc <UART_SetConfig+0x284>)
 8008bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbc:	08008bd5 	.word	0x08008bd5
 8008bc0:	08008bdd 	.word	0x08008bdd
 8008bc4:	08008be5 	.word	0x08008be5
 8008bc8:	08008bed 	.word	0x08008bed
 8008bcc:	08008bf5 	.word	0x08008bf5
 8008bd0:	08008bfd 	.word	0x08008bfd
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bda:	e284      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008bdc:	2304      	movs	r3, #4
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be2:	e280      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008be4:	2308      	movs	r3, #8
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bea:	e27c      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008bec:	2310      	movs	r3, #16
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf2:	e278      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008bf4:	2320      	movs	r3, #32
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bfa:	e274      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008bfc:	2340      	movs	r3, #64	; 0x40
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c02:	e270      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008c04:	2380      	movs	r3, #128	; 0x80
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c0a:	e26c      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a1b      	ldr	r2, [pc, #108]	; (8008c80 <UART_SetConfig+0x348>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d142      	bne.n	8008c9c <UART_SetConfig+0x364>
 8008c16:	4b16      	ldr	r3, [pc, #88]	; (8008c70 <UART_SetConfig+0x338>)
 8008c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	2b05      	cmp	r3, #5
 8008c20:	d838      	bhi.n	8008c94 <UART_SetConfig+0x35c>
 8008c22:	a201      	add	r2, pc, #4	; (adr r2, 8008c28 <UART_SetConfig+0x2f0>)
 8008c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c28:	08008c41 	.word	0x08008c41
 8008c2c:	08008c49 	.word	0x08008c49
 8008c30:	08008c51 	.word	0x08008c51
 8008c34:	08008c59 	.word	0x08008c59
 8008c38:	08008c85 	.word	0x08008c85
 8008c3c:	08008c8d 	.word	0x08008c8d
 8008c40:	2300      	movs	r3, #0
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c46:	e24e      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008c48:	2304      	movs	r3, #4
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c4e:	e24a      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008c50:	2308      	movs	r3, #8
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c56:	e246      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008c58:	2310      	movs	r3, #16
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c5e:	e242      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008c60:	cfff69f3 	.word	0xcfff69f3
 8008c64:	58000c00 	.word	0x58000c00
 8008c68:	11fff4ff 	.word	0x11fff4ff
 8008c6c:	40011000 	.word	0x40011000
 8008c70:	58024400 	.word	0x58024400
 8008c74:	40004400 	.word	0x40004400
 8008c78:	40004800 	.word	0x40004800
 8008c7c:	40004c00 	.word	0x40004c00
 8008c80:	40005000 	.word	0x40005000
 8008c84:	2320      	movs	r3, #32
 8008c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c8a:	e22c      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008c8c:	2340      	movs	r3, #64	; 0x40
 8008c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c92:	e228      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008c94:	2380      	movs	r3, #128	; 0x80
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c9a:	e224      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4ab1      	ldr	r2, [pc, #708]	; (8008f68 <UART_SetConfig+0x630>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d176      	bne.n	8008d94 <UART_SetConfig+0x45c>
 8008ca6:	4bb1      	ldr	r3, [pc, #708]	; (8008f6c <UART_SetConfig+0x634>)
 8008ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cae:	2b28      	cmp	r3, #40	; 0x28
 8008cb0:	d86c      	bhi.n	8008d8c <UART_SetConfig+0x454>
 8008cb2:	a201      	add	r2, pc, #4	; (adr r2, 8008cb8 <UART_SetConfig+0x380>)
 8008cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb8:	08008d5d 	.word	0x08008d5d
 8008cbc:	08008d8d 	.word	0x08008d8d
 8008cc0:	08008d8d 	.word	0x08008d8d
 8008cc4:	08008d8d 	.word	0x08008d8d
 8008cc8:	08008d8d 	.word	0x08008d8d
 8008ccc:	08008d8d 	.word	0x08008d8d
 8008cd0:	08008d8d 	.word	0x08008d8d
 8008cd4:	08008d8d 	.word	0x08008d8d
 8008cd8:	08008d65 	.word	0x08008d65
 8008cdc:	08008d8d 	.word	0x08008d8d
 8008ce0:	08008d8d 	.word	0x08008d8d
 8008ce4:	08008d8d 	.word	0x08008d8d
 8008ce8:	08008d8d 	.word	0x08008d8d
 8008cec:	08008d8d 	.word	0x08008d8d
 8008cf0:	08008d8d 	.word	0x08008d8d
 8008cf4:	08008d8d 	.word	0x08008d8d
 8008cf8:	08008d6d 	.word	0x08008d6d
 8008cfc:	08008d8d 	.word	0x08008d8d
 8008d00:	08008d8d 	.word	0x08008d8d
 8008d04:	08008d8d 	.word	0x08008d8d
 8008d08:	08008d8d 	.word	0x08008d8d
 8008d0c:	08008d8d 	.word	0x08008d8d
 8008d10:	08008d8d 	.word	0x08008d8d
 8008d14:	08008d8d 	.word	0x08008d8d
 8008d18:	08008d75 	.word	0x08008d75
 8008d1c:	08008d8d 	.word	0x08008d8d
 8008d20:	08008d8d 	.word	0x08008d8d
 8008d24:	08008d8d 	.word	0x08008d8d
 8008d28:	08008d8d 	.word	0x08008d8d
 8008d2c:	08008d8d 	.word	0x08008d8d
 8008d30:	08008d8d 	.word	0x08008d8d
 8008d34:	08008d8d 	.word	0x08008d8d
 8008d38:	08008d7d 	.word	0x08008d7d
 8008d3c:	08008d8d 	.word	0x08008d8d
 8008d40:	08008d8d 	.word	0x08008d8d
 8008d44:	08008d8d 	.word	0x08008d8d
 8008d48:	08008d8d 	.word	0x08008d8d
 8008d4c:	08008d8d 	.word	0x08008d8d
 8008d50:	08008d8d 	.word	0x08008d8d
 8008d54:	08008d8d 	.word	0x08008d8d
 8008d58:	08008d85 	.word	0x08008d85
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d62:	e1c0      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008d64:	2304      	movs	r3, #4
 8008d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d6a:	e1bc      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008d6c:	2308      	movs	r3, #8
 8008d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d72:	e1b8      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008d74:	2310      	movs	r3, #16
 8008d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d7a:	e1b4      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008d7c:	2320      	movs	r3, #32
 8008d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d82:	e1b0      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008d84:	2340      	movs	r3, #64	; 0x40
 8008d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d8a:	e1ac      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008d8c:	2380      	movs	r3, #128	; 0x80
 8008d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d92:	e1a8      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a75      	ldr	r2, [pc, #468]	; (8008f70 <UART_SetConfig+0x638>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d130      	bne.n	8008e00 <UART_SetConfig+0x4c8>
 8008d9e:	4b73      	ldr	r3, [pc, #460]	; (8008f6c <UART_SetConfig+0x634>)
 8008da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008da2:	f003 0307 	and.w	r3, r3, #7
 8008da6:	2b05      	cmp	r3, #5
 8008da8:	d826      	bhi.n	8008df8 <UART_SetConfig+0x4c0>
 8008daa:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <UART_SetConfig+0x478>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008dc9 	.word	0x08008dc9
 8008db4:	08008dd1 	.word	0x08008dd1
 8008db8:	08008dd9 	.word	0x08008dd9
 8008dbc:	08008de1 	.word	0x08008de1
 8008dc0:	08008de9 	.word	0x08008de9
 8008dc4:	08008df1 	.word	0x08008df1
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dce:	e18a      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008dd0:	2304      	movs	r3, #4
 8008dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dd6:	e186      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008dd8:	2308      	movs	r3, #8
 8008dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dde:	e182      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008de0:	2310      	movs	r3, #16
 8008de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008de6:	e17e      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008de8:	2320      	movs	r3, #32
 8008dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dee:	e17a      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008df0:	2340      	movs	r3, #64	; 0x40
 8008df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008df6:	e176      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008df8:	2380      	movs	r3, #128	; 0x80
 8008dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dfe:	e172      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a5b      	ldr	r2, [pc, #364]	; (8008f74 <UART_SetConfig+0x63c>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d130      	bne.n	8008e6c <UART_SetConfig+0x534>
 8008e0a:	4b58      	ldr	r3, [pc, #352]	; (8008f6c <UART_SetConfig+0x634>)
 8008e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e0e:	f003 0307 	and.w	r3, r3, #7
 8008e12:	2b05      	cmp	r3, #5
 8008e14:	d826      	bhi.n	8008e64 <UART_SetConfig+0x52c>
 8008e16:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <UART_SetConfig+0x4e4>)
 8008e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1c:	08008e35 	.word	0x08008e35
 8008e20:	08008e3d 	.word	0x08008e3d
 8008e24:	08008e45 	.word	0x08008e45
 8008e28:	08008e4d 	.word	0x08008e4d
 8008e2c:	08008e55 	.word	0x08008e55
 8008e30:	08008e5d 	.word	0x08008e5d
 8008e34:	2300      	movs	r3, #0
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e3a:	e154      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008e3c:	2304      	movs	r3, #4
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e42:	e150      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008e44:	2308      	movs	r3, #8
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e4a:	e14c      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008e4c:	2310      	movs	r3, #16
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e52:	e148      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008e54:	2320      	movs	r3, #32
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e5a:	e144      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008e5c:	2340      	movs	r3, #64	; 0x40
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e62:	e140      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008e64:	2380      	movs	r3, #128	; 0x80
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e6a:	e13c      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a41      	ldr	r2, [pc, #260]	; (8008f78 <UART_SetConfig+0x640>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	f040 8082 	bne.w	8008f7c <UART_SetConfig+0x644>
 8008e78:	4b3c      	ldr	r3, [pc, #240]	; (8008f6c <UART_SetConfig+0x634>)
 8008e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e80:	2b28      	cmp	r3, #40	; 0x28
 8008e82:	d86d      	bhi.n	8008f60 <UART_SetConfig+0x628>
 8008e84:	a201      	add	r2, pc, #4	; (adr r2, 8008e8c <UART_SetConfig+0x554>)
 8008e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8a:	bf00      	nop
 8008e8c:	08008f31 	.word	0x08008f31
 8008e90:	08008f61 	.word	0x08008f61
 8008e94:	08008f61 	.word	0x08008f61
 8008e98:	08008f61 	.word	0x08008f61
 8008e9c:	08008f61 	.word	0x08008f61
 8008ea0:	08008f61 	.word	0x08008f61
 8008ea4:	08008f61 	.word	0x08008f61
 8008ea8:	08008f61 	.word	0x08008f61
 8008eac:	08008f39 	.word	0x08008f39
 8008eb0:	08008f61 	.word	0x08008f61
 8008eb4:	08008f61 	.word	0x08008f61
 8008eb8:	08008f61 	.word	0x08008f61
 8008ebc:	08008f61 	.word	0x08008f61
 8008ec0:	08008f61 	.word	0x08008f61
 8008ec4:	08008f61 	.word	0x08008f61
 8008ec8:	08008f61 	.word	0x08008f61
 8008ecc:	08008f41 	.word	0x08008f41
 8008ed0:	08008f61 	.word	0x08008f61
 8008ed4:	08008f61 	.word	0x08008f61
 8008ed8:	08008f61 	.word	0x08008f61
 8008edc:	08008f61 	.word	0x08008f61
 8008ee0:	08008f61 	.word	0x08008f61
 8008ee4:	08008f61 	.word	0x08008f61
 8008ee8:	08008f61 	.word	0x08008f61
 8008eec:	08008f49 	.word	0x08008f49
 8008ef0:	08008f61 	.word	0x08008f61
 8008ef4:	08008f61 	.word	0x08008f61
 8008ef8:	08008f61 	.word	0x08008f61
 8008efc:	08008f61 	.word	0x08008f61
 8008f00:	08008f61 	.word	0x08008f61
 8008f04:	08008f61 	.word	0x08008f61
 8008f08:	08008f61 	.word	0x08008f61
 8008f0c:	08008f51 	.word	0x08008f51
 8008f10:	08008f61 	.word	0x08008f61
 8008f14:	08008f61 	.word	0x08008f61
 8008f18:	08008f61 	.word	0x08008f61
 8008f1c:	08008f61 	.word	0x08008f61
 8008f20:	08008f61 	.word	0x08008f61
 8008f24:	08008f61 	.word	0x08008f61
 8008f28:	08008f61 	.word	0x08008f61
 8008f2c:	08008f59 	.word	0x08008f59
 8008f30:	2301      	movs	r3, #1
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f36:	e0d6      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008f38:	2304      	movs	r3, #4
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f3e:	e0d2      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008f40:	2308      	movs	r3, #8
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f46:	e0ce      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008f48:	2310      	movs	r3, #16
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f4e:	e0ca      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008f50:	2320      	movs	r3, #32
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f56:	e0c6      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008f58:	2340      	movs	r3, #64	; 0x40
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f5e:	e0c2      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008f60:	2380      	movs	r3, #128	; 0x80
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f66:	e0be      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8008f68:	40011400 	.word	0x40011400
 8008f6c:	58024400 	.word	0x58024400
 8008f70:	40007800 	.word	0x40007800
 8008f74:	40007c00 	.word	0x40007c00
 8008f78:	40011800 	.word	0x40011800
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4aad      	ldr	r2, [pc, #692]	; (8009238 <UART_SetConfig+0x900>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d176      	bne.n	8009074 <UART_SetConfig+0x73c>
 8008f86:	4bad      	ldr	r3, [pc, #692]	; (800923c <UART_SetConfig+0x904>)
 8008f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f8e:	2b28      	cmp	r3, #40	; 0x28
 8008f90:	d86c      	bhi.n	800906c <UART_SetConfig+0x734>
 8008f92:	a201      	add	r2, pc, #4	; (adr r2, 8008f98 <UART_SetConfig+0x660>)
 8008f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f98:	0800903d 	.word	0x0800903d
 8008f9c:	0800906d 	.word	0x0800906d
 8008fa0:	0800906d 	.word	0x0800906d
 8008fa4:	0800906d 	.word	0x0800906d
 8008fa8:	0800906d 	.word	0x0800906d
 8008fac:	0800906d 	.word	0x0800906d
 8008fb0:	0800906d 	.word	0x0800906d
 8008fb4:	0800906d 	.word	0x0800906d
 8008fb8:	08009045 	.word	0x08009045
 8008fbc:	0800906d 	.word	0x0800906d
 8008fc0:	0800906d 	.word	0x0800906d
 8008fc4:	0800906d 	.word	0x0800906d
 8008fc8:	0800906d 	.word	0x0800906d
 8008fcc:	0800906d 	.word	0x0800906d
 8008fd0:	0800906d 	.word	0x0800906d
 8008fd4:	0800906d 	.word	0x0800906d
 8008fd8:	0800904d 	.word	0x0800904d
 8008fdc:	0800906d 	.word	0x0800906d
 8008fe0:	0800906d 	.word	0x0800906d
 8008fe4:	0800906d 	.word	0x0800906d
 8008fe8:	0800906d 	.word	0x0800906d
 8008fec:	0800906d 	.word	0x0800906d
 8008ff0:	0800906d 	.word	0x0800906d
 8008ff4:	0800906d 	.word	0x0800906d
 8008ff8:	08009055 	.word	0x08009055
 8008ffc:	0800906d 	.word	0x0800906d
 8009000:	0800906d 	.word	0x0800906d
 8009004:	0800906d 	.word	0x0800906d
 8009008:	0800906d 	.word	0x0800906d
 800900c:	0800906d 	.word	0x0800906d
 8009010:	0800906d 	.word	0x0800906d
 8009014:	0800906d 	.word	0x0800906d
 8009018:	0800905d 	.word	0x0800905d
 800901c:	0800906d 	.word	0x0800906d
 8009020:	0800906d 	.word	0x0800906d
 8009024:	0800906d 	.word	0x0800906d
 8009028:	0800906d 	.word	0x0800906d
 800902c:	0800906d 	.word	0x0800906d
 8009030:	0800906d 	.word	0x0800906d
 8009034:	0800906d 	.word	0x0800906d
 8009038:	08009065 	.word	0x08009065
 800903c:	2301      	movs	r3, #1
 800903e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009042:	e050      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8009044:	2304      	movs	r3, #4
 8009046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800904a:	e04c      	b.n	80090e6 <UART_SetConfig+0x7ae>
 800904c:	2308      	movs	r3, #8
 800904e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009052:	e048      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8009054:	2310      	movs	r3, #16
 8009056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800905a:	e044      	b.n	80090e6 <UART_SetConfig+0x7ae>
 800905c:	2320      	movs	r3, #32
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009062:	e040      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8009064:	2340      	movs	r3, #64	; 0x40
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800906a:	e03c      	b.n	80090e6 <UART_SetConfig+0x7ae>
 800906c:	2380      	movs	r3, #128	; 0x80
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009072:	e038      	b.n	80090e6 <UART_SetConfig+0x7ae>
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a71      	ldr	r2, [pc, #452]	; (8009240 <UART_SetConfig+0x908>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d130      	bne.n	80090e0 <UART_SetConfig+0x7a8>
 800907e:	4b6f      	ldr	r3, [pc, #444]	; (800923c <UART_SetConfig+0x904>)
 8009080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	2b05      	cmp	r3, #5
 8009088:	d826      	bhi.n	80090d8 <UART_SetConfig+0x7a0>
 800908a:	a201      	add	r2, pc, #4	; (adr r2, 8009090 <UART_SetConfig+0x758>)
 800908c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009090:	080090a9 	.word	0x080090a9
 8009094:	080090b1 	.word	0x080090b1
 8009098:	080090b9 	.word	0x080090b9
 800909c:	080090c1 	.word	0x080090c1
 80090a0:	080090c9 	.word	0x080090c9
 80090a4:	080090d1 	.word	0x080090d1
 80090a8:	2302      	movs	r3, #2
 80090aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ae:	e01a      	b.n	80090e6 <UART_SetConfig+0x7ae>
 80090b0:	2304      	movs	r3, #4
 80090b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090b6:	e016      	b.n	80090e6 <UART_SetConfig+0x7ae>
 80090b8:	2308      	movs	r3, #8
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090be:	e012      	b.n	80090e6 <UART_SetConfig+0x7ae>
 80090c0:	2310      	movs	r3, #16
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090c6:	e00e      	b.n	80090e6 <UART_SetConfig+0x7ae>
 80090c8:	2320      	movs	r3, #32
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ce:	e00a      	b.n	80090e6 <UART_SetConfig+0x7ae>
 80090d0:	2340      	movs	r3, #64	; 0x40
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090d6:	e006      	b.n	80090e6 <UART_SetConfig+0x7ae>
 80090d8:	2380      	movs	r3, #128	; 0x80
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090de:	e002      	b.n	80090e6 <UART_SetConfig+0x7ae>
 80090e0:	2380      	movs	r3, #128	; 0x80
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a55      	ldr	r2, [pc, #340]	; (8009240 <UART_SetConfig+0x908>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	f040 80f8 	bne.w	80092e2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80090f6:	2b20      	cmp	r3, #32
 80090f8:	dc46      	bgt.n	8009188 <UART_SetConfig+0x850>
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	db75      	blt.n	80091ea <UART_SetConfig+0x8b2>
 80090fe:	3b02      	subs	r3, #2
 8009100:	2b1e      	cmp	r3, #30
 8009102:	d872      	bhi.n	80091ea <UART_SetConfig+0x8b2>
 8009104:	a201      	add	r2, pc, #4	; (adr r2, 800910c <UART_SetConfig+0x7d4>)
 8009106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910a:	bf00      	nop
 800910c:	0800918f 	.word	0x0800918f
 8009110:	080091eb 	.word	0x080091eb
 8009114:	08009197 	.word	0x08009197
 8009118:	080091eb 	.word	0x080091eb
 800911c:	080091eb 	.word	0x080091eb
 8009120:	080091eb 	.word	0x080091eb
 8009124:	080091a7 	.word	0x080091a7
 8009128:	080091eb 	.word	0x080091eb
 800912c:	080091eb 	.word	0x080091eb
 8009130:	080091eb 	.word	0x080091eb
 8009134:	080091eb 	.word	0x080091eb
 8009138:	080091eb 	.word	0x080091eb
 800913c:	080091eb 	.word	0x080091eb
 8009140:	080091eb 	.word	0x080091eb
 8009144:	080091b7 	.word	0x080091b7
 8009148:	080091eb 	.word	0x080091eb
 800914c:	080091eb 	.word	0x080091eb
 8009150:	080091eb 	.word	0x080091eb
 8009154:	080091eb 	.word	0x080091eb
 8009158:	080091eb 	.word	0x080091eb
 800915c:	080091eb 	.word	0x080091eb
 8009160:	080091eb 	.word	0x080091eb
 8009164:	080091eb 	.word	0x080091eb
 8009168:	080091eb 	.word	0x080091eb
 800916c:	080091eb 	.word	0x080091eb
 8009170:	080091eb 	.word	0x080091eb
 8009174:	080091eb 	.word	0x080091eb
 8009178:	080091eb 	.word	0x080091eb
 800917c:	080091eb 	.word	0x080091eb
 8009180:	080091eb 	.word	0x080091eb
 8009184:	080091dd 	.word	0x080091dd
 8009188:	2b40      	cmp	r3, #64	; 0x40
 800918a:	d02a      	beq.n	80091e2 <UART_SetConfig+0x8aa>
 800918c:	e02d      	b.n	80091ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800918e:	f7fd fc2f 	bl	80069f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009192:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009194:	e02f      	b.n	80091f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800919a:	4618      	mov	r0, r3
 800919c:	f7fd fc3e 	bl	8006a1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091a4:	e027      	b.n	80091f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091a6:	f107 0318 	add.w	r3, r7, #24
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fd fd8a 	bl	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091b4:	e01f      	b.n	80091f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091b6:	4b21      	ldr	r3, [pc, #132]	; (800923c <UART_SetConfig+0x904>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0320 	and.w	r3, r3, #32
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d009      	beq.n	80091d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091c2:	4b1e      	ldr	r3, [pc, #120]	; (800923c <UART_SetConfig+0x904>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	08db      	lsrs	r3, r3, #3
 80091c8:	f003 0303 	and.w	r3, r3, #3
 80091cc:	4a1d      	ldr	r2, [pc, #116]	; (8009244 <UART_SetConfig+0x90c>)
 80091ce:	fa22 f303 	lsr.w	r3, r2, r3
 80091d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091d4:	e00f      	b.n	80091f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80091d6:	4b1b      	ldr	r3, [pc, #108]	; (8009244 <UART_SetConfig+0x90c>)
 80091d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091da:	e00c      	b.n	80091f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091dc:	4b1a      	ldr	r3, [pc, #104]	; (8009248 <UART_SetConfig+0x910>)
 80091de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091e0:	e009      	b.n	80091f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091e8:	e005      	b.n	80091f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80091ea:	2300      	movs	r3, #0
 80091ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80091f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f000 81ee 	beq.w	80095da <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009202:	4a12      	ldr	r2, [pc, #72]	; (800924c <UART_SetConfig+0x914>)
 8009204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009208:	461a      	mov	r2, r3
 800920a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800920c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009210:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	4613      	mov	r3, r2
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	4413      	add	r3, r2
 800921c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800921e:	429a      	cmp	r2, r3
 8009220:	d305      	bcc.n	800922e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800922a:	429a      	cmp	r2, r3
 800922c:	d910      	bls.n	8009250 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009234:	e1d1      	b.n	80095da <UART_SetConfig+0xca2>
 8009236:	bf00      	nop
 8009238:	40011c00 	.word	0x40011c00
 800923c:	58024400 	.word	0x58024400
 8009240:	58000c00 	.word	0x58000c00
 8009244:	03d09000 	.word	0x03d09000
 8009248:	003d0900 	.word	0x003d0900
 800924c:	0800b2fc 	.word	0x0800b2fc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009252:	2200      	movs	r2, #0
 8009254:	60bb      	str	r3, [r7, #8]
 8009256:	60fa      	str	r2, [r7, #12]
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925c:	4ac0      	ldr	r2, [pc, #768]	; (8009560 <UART_SetConfig+0xc28>)
 800925e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009262:	b29b      	uxth	r3, r3
 8009264:	2200      	movs	r2, #0
 8009266:	603b      	str	r3, [r7, #0]
 8009268:	607a      	str	r2, [r7, #4]
 800926a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800926e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009272:	f7f7 f895 	bl	80003a0 <__aeabi_uldivmod>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	4610      	mov	r0, r2
 800927c:	4619      	mov	r1, r3
 800927e:	f04f 0200 	mov.w	r2, #0
 8009282:	f04f 0300 	mov.w	r3, #0
 8009286:	020b      	lsls	r3, r1, #8
 8009288:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800928c:	0202      	lsls	r2, r0, #8
 800928e:	6979      	ldr	r1, [r7, #20]
 8009290:	6849      	ldr	r1, [r1, #4]
 8009292:	0849      	lsrs	r1, r1, #1
 8009294:	2000      	movs	r0, #0
 8009296:	460c      	mov	r4, r1
 8009298:	4605      	mov	r5, r0
 800929a:	eb12 0804 	adds.w	r8, r2, r4
 800929e:	eb43 0905 	adc.w	r9, r3, r5
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	469a      	mov	sl, r3
 80092aa:	4693      	mov	fp, r2
 80092ac:	4652      	mov	r2, sl
 80092ae:	465b      	mov	r3, fp
 80092b0:	4640      	mov	r0, r8
 80092b2:	4649      	mov	r1, r9
 80092b4:	f7f7 f874 	bl	80003a0 <__aeabi_uldivmod>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	4613      	mov	r3, r2
 80092be:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092c6:	d308      	bcc.n	80092da <UART_SetConfig+0x9a2>
 80092c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092ce:	d204      	bcs.n	80092da <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092d6:	60da      	str	r2, [r3, #12]
 80092d8:	e17f      	b.n	80095da <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80092e0:	e17b      	b.n	80095da <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092ea:	f040 80bd 	bne.w	8009468 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80092ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80092f2:	2b20      	cmp	r3, #32
 80092f4:	dc48      	bgt.n	8009388 <UART_SetConfig+0xa50>
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	db7b      	blt.n	80093f2 <UART_SetConfig+0xaba>
 80092fa:	2b20      	cmp	r3, #32
 80092fc:	d879      	bhi.n	80093f2 <UART_SetConfig+0xaba>
 80092fe:	a201      	add	r2, pc, #4	; (adr r2, 8009304 <UART_SetConfig+0x9cc>)
 8009300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009304:	0800938f 	.word	0x0800938f
 8009308:	08009397 	.word	0x08009397
 800930c:	080093f3 	.word	0x080093f3
 8009310:	080093f3 	.word	0x080093f3
 8009314:	0800939f 	.word	0x0800939f
 8009318:	080093f3 	.word	0x080093f3
 800931c:	080093f3 	.word	0x080093f3
 8009320:	080093f3 	.word	0x080093f3
 8009324:	080093af 	.word	0x080093af
 8009328:	080093f3 	.word	0x080093f3
 800932c:	080093f3 	.word	0x080093f3
 8009330:	080093f3 	.word	0x080093f3
 8009334:	080093f3 	.word	0x080093f3
 8009338:	080093f3 	.word	0x080093f3
 800933c:	080093f3 	.word	0x080093f3
 8009340:	080093f3 	.word	0x080093f3
 8009344:	080093bf 	.word	0x080093bf
 8009348:	080093f3 	.word	0x080093f3
 800934c:	080093f3 	.word	0x080093f3
 8009350:	080093f3 	.word	0x080093f3
 8009354:	080093f3 	.word	0x080093f3
 8009358:	080093f3 	.word	0x080093f3
 800935c:	080093f3 	.word	0x080093f3
 8009360:	080093f3 	.word	0x080093f3
 8009364:	080093f3 	.word	0x080093f3
 8009368:	080093f3 	.word	0x080093f3
 800936c:	080093f3 	.word	0x080093f3
 8009370:	080093f3 	.word	0x080093f3
 8009374:	080093f3 	.word	0x080093f3
 8009378:	080093f3 	.word	0x080093f3
 800937c:	080093f3 	.word	0x080093f3
 8009380:	080093f3 	.word	0x080093f3
 8009384:	080093e5 	.word	0x080093e5
 8009388:	2b40      	cmp	r3, #64	; 0x40
 800938a:	d02e      	beq.n	80093ea <UART_SetConfig+0xab2>
 800938c:	e031      	b.n	80093f2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800938e:	f7fb fc6d 	bl	8004c6c <HAL_RCC_GetPCLK1Freq>
 8009392:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009394:	e033      	b.n	80093fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009396:	f7fb fc7f 	bl	8004c98 <HAL_RCC_GetPCLK2Freq>
 800939a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800939c:	e02f      	b.n	80093fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800939e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fd fb3a 	bl	8006a1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093ac:	e027      	b.n	80093fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ae:	f107 0318 	add.w	r3, r7, #24
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fd fc86 	bl	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093bc:	e01f      	b.n	80093fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093be:	4b69      	ldr	r3, [pc, #420]	; (8009564 <UART_SetConfig+0xc2c>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 0320 	and.w	r3, r3, #32
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d009      	beq.n	80093de <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093ca:	4b66      	ldr	r3, [pc, #408]	; (8009564 <UART_SetConfig+0xc2c>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	08db      	lsrs	r3, r3, #3
 80093d0:	f003 0303 	and.w	r3, r3, #3
 80093d4:	4a64      	ldr	r2, [pc, #400]	; (8009568 <UART_SetConfig+0xc30>)
 80093d6:	fa22 f303 	lsr.w	r3, r2, r3
 80093da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093dc:	e00f      	b.n	80093fe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80093de:	4b62      	ldr	r3, [pc, #392]	; (8009568 <UART_SetConfig+0xc30>)
 80093e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093e2:	e00c      	b.n	80093fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093e4:	4b61      	ldr	r3, [pc, #388]	; (800956c <UART_SetConfig+0xc34>)
 80093e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093e8:	e009      	b.n	80093fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093f0:	e005      	b.n	80093fe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80093f2:	2300      	movs	r3, #0
 80093f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80093fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009400:	2b00      	cmp	r3, #0
 8009402:	f000 80ea 	beq.w	80095da <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940a:	4a55      	ldr	r2, [pc, #340]	; (8009560 <UART_SetConfig+0xc28>)
 800940c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009410:	461a      	mov	r2, r3
 8009412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009414:	fbb3 f3f2 	udiv	r3, r3, r2
 8009418:	005a      	lsls	r2, r3, #1
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	085b      	lsrs	r3, r3, #1
 8009420:	441a      	add	r2, r3
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	fbb2 f3f3 	udiv	r3, r2, r3
 800942a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800942c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942e:	2b0f      	cmp	r3, #15
 8009430:	d916      	bls.n	8009460 <UART_SetConfig+0xb28>
 8009432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009438:	d212      	bcs.n	8009460 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800943a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943c:	b29b      	uxth	r3, r3
 800943e:	f023 030f 	bic.w	r3, r3, #15
 8009442:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009446:	085b      	lsrs	r3, r3, #1
 8009448:	b29b      	uxth	r3, r3
 800944a:	f003 0307 	and.w	r3, r3, #7
 800944e:	b29a      	uxth	r2, r3
 8009450:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009452:	4313      	orrs	r3, r2
 8009454:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800945c:	60da      	str	r2, [r3, #12]
 800945e:	e0bc      	b.n	80095da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009466:	e0b8      	b.n	80095da <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009468:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800946c:	2b20      	cmp	r3, #32
 800946e:	dc4b      	bgt.n	8009508 <UART_SetConfig+0xbd0>
 8009470:	2b00      	cmp	r3, #0
 8009472:	f2c0 8087 	blt.w	8009584 <UART_SetConfig+0xc4c>
 8009476:	2b20      	cmp	r3, #32
 8009478:	f200 8084 	bhi.w	8009584 <UART_SetConfig+0xc4c>
 800947c:	a201      	add	r2, pc, #4	; (adr r2, 8009484 <UART_SetConfig+0xb4c>)
 800947e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009482:	bf00      	nop
 8009484:	0800950f 	.word	0x0800950f
 8009488:	08009517 	.word	0x08009517
 800948c:	08009585 	.word	0x08009585
 8009490:	08009585 	.word	0x08009585
 8009494:	0800951f 	.word	0x0800951f
 8009498:	08009585 	.word	0x08009585
 800949c:	08009585 	.word	0x08009585
 80094a0:	08009585 	.word	0x08009585
 80094a4:	0800952f 	.word	0x0800952f
 80094a8:	08009585 	.word	0x08009585
 80094ac:	08009585 	.word	0x08009585
 80094b0:	08009585 	.word	0x08009585
 80094b4:	08009585 	.word	0x08009585
 80094b8:	08009585 	.word	0x08009585
 80094bc:	08009585 	.word	0x08009585
 80094c0:	08009585 	.word	0x08009585
 80094c4:	0800953f 	.word	0x0800953f
 80094c8:	08009585 	.word	0x08009585
 80094cc:	08009585 	.word	0x08009585
 80094d0:	08009585 	.word	0x08009585
 80094d4:	08009585 	.word	0x08009585
 80094d8:	08009585 	.word	0x08009585
 80094dc:	08009585 	.word	0x08009585
 80094e0:	08009585 	.word	0x08009585
 80094e4:	08009585 	.word	0x08009585
 80094e8:	08009585 	.word	0x08009585
 80094ec:	08009585 	.word	0x08009585
 80094f0:	08009585 	.word	0x08009585
 80094f4:	08009585 	.word	0x08009585
 80094f8:	08009585 	.word	0x08009585
 80094fc:	08009585 	.word	0x08009585
 8009500:	08009585 	.word	0x08009585
 8009504:	08009577 	.word	0x08009577
 8009508:	2b40      	cmp	r3, #64	; 0x40
 800950a:	d037      	beq.n	800957c <UART_SetConfig+0xc44>
 800950c:	e03a      	b.n	8009584 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800950e:	f7fb fbad 	bl	8004c6c <HAL_RCC_GetPCLK1Freq>
 8009512:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009514:	e03c      	b.n	8009590 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009516:	f7fb fbbf 	bl	8004c98 <HAL_RCC_GetPCLK2Freq>
 800951a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800951c:	e038      	b.n	8009590 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800951e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009522:	4618      	mov	r0, r3
 8009524:	f7fd fa7a 	bl	8006a1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800952c:	e030      	b.n	8009590 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800952e:	f107 0318 	add.w	r3, r7, #24
 8009532:	4618      	mov	r0, r3
 8009534:	f7fd fbc6 	bl	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800953c:	e028      	b.n	8009590 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800953e:	4b09      	ldr	r3, [pc, #36]	; (8009564 <UART_SetConfig+0xc2c>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 0320 	and.w	r3, r3, #32
 8009546:	2b00      	cmp	r3, #0
 8009548:	d012      	beq.n	8009570 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800954a:	4b06      	ldr	r3, [pc, #24]	; (8009564 <UART_SetConfig+0xc2c>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	08db      	lsrs	r3, r3, #3
 8009550:	f003 0303 	and.w	r3, r3, #3
 8009554:	4a04      	ldr	r2, [pc, #16]	; (8009568 <UART_SetConfig+0xc30>)
 8009556:	fa22 f303 	lsr.w	r3, r2, r3
 800955a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800955c:	e018      	b.n	8009590 <UART_SetConfig+0xc58>
 800955e:	bf00      	nop
 8009560:	0800b2fc 	.word	0x0800b2fc
 8009564:	58024400 	.word	0x58024400
 8009568:	03d09000 	.word	0x03d09000
 800956c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009570:	4b24      	ldr	r3, [pc, #144]	; (8009604 <UART_SetConfig+0xccc>)
 8009572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009574:	e00c      	b.n	8009590 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009576:	4b24      	ldr	r3, [pc, #144]	; (8009608 <UART_SetConfig+0xcd0>)
 8009578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800957a:	e009      	b.n	8009590 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800957c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009582:	e005      	b.n	8009590 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009584:	2300      	movs	r3, #0
 8009586:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800958e:	bf00      	nop
    }

    if (pclk != 0U)
 8009590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009592:	2b00      	cmp	r3, #0
 8009594:	d021      	beq.n	80095da <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959a:	4a1c      	ldr	r2, [pc, #112]	; (800960c <UART_SetConfig+0xcd4>)
 800959c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095a0:	461a      	mov	r2, r3
 80095a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	085b      	lsrs	r3, r3, #1
 80095ae:	441a      	add	r2, r3
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80095b8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095bc:	2b0f      	cmp	r3, #15
 80095be:	d909      	bls.n	80095d4 <UART_SetConfig+0xc9c>
 80095c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095c6:	d205      	bcs.n	80095d4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	60da      	str	r2, [r3, #12]
 80095d2:	e002      	b.n	80095da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	2201      	movs	r2, #1
 80095de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	2201      	movs	r2, #1
 80095e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	2200      	movs	r2, #0
 80095ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	2200      	movs	r2, #0
 80095f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80095f6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3748      	adds	r7, #72	; 0x48
 80095fe:	46bd      	mov	sp, r7
 8009600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009604:	03d09000 	.word	0x03d09000
 8009608:	003d0900 	.word	0x003d0900
 800960c:	0800b2fc 	.word	0x0800b2fc

08009610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961c:	f003 0301 	and.w	r3, r3, #1
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00a      	beq.n	800963a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	430a      	orrs	r2, r1
 8009638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963e:	f003 0302 	and.w	r3, r3, #2
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00a      	beq.n	800965c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	430a      	orrs	r2, r1
 800965a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009660:	f003 0304 	and.w	r3, r3, #4
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00a      	beq.n	800967e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	430a      	orrs	r2, r1
 800967c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009682:	f003 0308 	and.w	r3, r3, #8
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00a      	beq.n	80096a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	430a      	orrs	r2, r1
 800969e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a4:	f003 0310 	and.w	r3, r3, #16
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00a      	beq.n	80096c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	430a      	orrs	r2, r1
 80096c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c6:	f003 0320 	and.w	r3, r3, #32
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00a      	beq.n	80096e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	430a      	orrs	r2, r1
 80096e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d01a      	beq.n	8009726 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	430a      	orrs	r2, r1
 8009704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800970a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800970e:	d10a      	bne.n	8009726 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	430a      	orrs	r2, r1
 8009724:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800972a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00a      	beq.n	8009748 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	430a      	orrs	r2, r1
 8009746:	605a      	str	r2, [r3, #4]
  }
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b098      	sub	sp, #96	; 0x60
 8009758:	af02      	add	r7, sp, #8
 800975a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009764:	f7f8 f87e 	bl	8001864 <HAL_GetTick>
 8009768:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 0308 	and.w	r3, r3, #8
 8009774:	2b08      	cmp	r3, #8
 8009776:	d12f      	bne.n	80097d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009778:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009780:	2200      	movs	r2, #0
 8009782:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f88e 	bl	80098a8 <UART_WaitOnFlagUntilTimeout>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d022      	beq.n	80097d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979a:	e853 3f00 	ldrex	r3, [r3]
 800979e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097a6:	653b      	str	r3, [r7, #80]	; 0x50
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	461a      	mov	r2, r3
 80097ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097b0:	647b      	str	r3, [r7, #68]	; 0x44
 80097b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097b8:	e841 2300 	strex	r3, r2, [r1]
 80097bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1e6      	bne.n	8009792 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2220      	movs	r2, #32
 80097c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e063      	b.n	80098a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 0304 	and.w	r3, r3, #4
 80097e2:	2b04      	cmp	r3, #4
 80097e4:	d149      	bne.n	800987a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097ee:	2200      	movs	r2, #0
 80097f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f857 	bl	80098a8 <UART_WaitOnFlagUntilTimeout>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d03c      	beq.n	800987a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009808:	e853 3f00 	ldrex	r3, [r3]
 800980c:	623b      	str	r3, [r7, #32]
   return(result);
 800980e:	6a3b      	ldr	r3, [r7, #32]
 8009810:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009814:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800981e:	633b      	str	r3, [r7, #48]	; 0x30
 8009820:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800982c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1e6      	bne.n	8009800 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3308      	adds	r3, #8
 8009838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	e853 3f00 	ldrex	r3, [r3]
 8009840:	60fb      	str	r3, [r7, #12]
   return(result);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f023 0301 	bic.w	r3, r3, #1
 8009848:	64bb      	str	r3, [r7, #72]	; 0x48
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3308      	adds	r3, #8
 8009850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009852:	61fa      	str	r2, [r7, #28]
 8009854:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009856:	69b9      	ldr	r1, [r7, #24]
 8009858:	69fa      	ldr	r2, [r7, #28]
 800985a:	e841 2300 	strex	r3, r2, [r1]
 800985e:	617b      	str	r3, [r7, #20]
   return(result);
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1e5      	bne.n	8009832 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2220      	movs	r2, #32
 800986a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e012      	b.n	80098a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2220      	movs	r2, #32
 800987e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2220      	movs	r2, #32
 8009886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3758      	adds	r7, #88	; 0x58
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	603b      	str	r3, [r7, #0]
 80098b4:	4613      	mov	r3, r2
 80098b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098b8:	e049      	b.n	800994e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c0:	d045      	beq.n	800994e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098c2:	f7f7 ffcf 	bl	8001864 <HAL_GetTick>
 80098c6:	4602      	mov	r2, r0
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	69ba      	ldr	r2, [r7, #24]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d302      	bcc.n	80098d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d101      	bne.n	80098dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e048      	b.n	800996e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0304 	and.w	r3, r3, #4
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d031      	beq.n	800994e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	69db      	ldr	r3, [r3, #28]
 80098f0:	f003 0308 	and.w	r3, r3, #8
 80098f4:	2b08      	cmp	r3, #8
 80098f6:	d110      	bne.n	800991a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2208      	movs	r2, #8
 80098fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f000 f95b 	bl	8009bbc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2208      	movs	r2, #8
 800990a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e029      	b.n	800996e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	69db      	ldr	r3, [r3, #28]
 8009920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009928:	d111      	bne.n	800994e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009932:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 f941 	bl	8009bbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2220      	movs	r2, #32
 800993e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e00f      	b.n	800996e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	69da      	ldr	r2, [r3, #28]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	4013      	ands	r3, r2
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	429a      	cmp	r2, r3
 800995c:	bf0c      	ite	eq
 800995e:	2301      	moveq	r3, #1
 8009960:	2300      	movne	r3, #0
 8009962:	b2db      	uxtb	r3, r3
 8009964:	461a      	mov	r2, r3
 8009966:	79fb      	ldrb	r3, [r7, #7]
 8009968:	429a      	cmp	r2, r3
 800996a:	d0a6      	beq.n	80098ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
	...

08009978 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009978:	b480      	push	{r7}
 800997a:	b0a3      	sub	sp, #140	; 0x8c
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	4613      	mov	r3, r2
 8009984:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	88fa      	ldrh	r2, [r7, #6]
 8009990:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	88fa      	ldrh	r2, [r7, #6]
 8009998:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099aa:	d10e      	bne.n	80099ca <UART_Start_Receive_IT+0x52>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d105      	bne.n	80099c0 <UART_Start_Receive_IT+0x48>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80099ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099be:	e02d      	b.n	8009a1c <UART_Start_Receive_IT+0xa4>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	22ff      	movs	r2, #255	; 0xff
 80099c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099c8:	e028      	b.n	8009a1c <UART_Start_Receive_IT+0xa4>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10d      	bne.n	80099ee <UART_Start_Receive_IT+0x76>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d104      	bne.n	80099e4 <UART_Start_Receive_IT+0x6c>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	22ff      	movs	r2, #255	; 0xff
 80099de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099e2:	e01b      	b.n	8009a1c <UART_Start_Receive_IT+0xa4>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	227f      	movs	r2, #127	; 0x7f
 80099e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099ec:	e016      	b.n	8009a1c <UART_Start_Receive_IT+0xa4>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099f6:	d10d      	bne.n	8009a14 <UART_Start_Receive_IT+0x9c>
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d104      	bne.n	8009a0a <UART_Start_Receive_IT+0x92>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	227f      	movs	r2, #127	; 0x7f
 8009a04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009a08:	e008      	b.n	8009a1c <UART_Start_Receive_IT+0xa4>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	223f      	movs	r2, #63	; 0x3f
 8009a0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009a12:	e003      	b.n	8009a1c <UART_Start_Receive_IT+0xa4>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2222      	movs	r2, #34	; 0x22
 8009a28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	3308      	adds	r3, #8
 8009a32:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a36:	e853 3f00 	ldrex	r3, [r3]
 8009a3a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009a3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a3e:	f043 0301 	orr.w	r3, r3, #1
 8009a42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3308      	adds	r3, #8
 8009a4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009a50:	673a      	str	r2, [r7, #112]	; 0x70
 8009a52:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a54:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009a56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009a58:	e841 2300 	strex	r3, r2, [r1]
 8009a5c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009a5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1e3      	bne.n	8009a2c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a6c:	d14f      	bne.n	8009b0e <UART_Start_Receive_IT+0x196>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a74:	88fa      	ldrh	r2, [r7, #6]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d349      	bcc.n	8009b0e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a82:	d107      	bne.n	8009a94 <UART_Start_Receive_IT+0x11c>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d103      	bne.n	8009a94 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	4a47      	ldr	r2, [pc, #284]	; (8009bac <UART_Start_Receive_IT+0x234>)
 8009a90:	675a      	str	r2, [r3, #116]	; 0x74
 8009a92:	e002      	b.n	8009a9a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	4a46      	ldr	r2, [pc, #280]	; (8009bb0 <UART_Start_Receive_IT+0x238>)
 8009a98:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d01a      	beq.n	8009ad8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aaa:	e853 3f00 	ldrex	r3, [r3]
 8009aae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ab6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ac6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009aca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009acc:	e841 2300 	strex	r3, r2, [r1]
 8009ad0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1e4      	bne.n	8009aa2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	3308      	adds	r3, #8
 8009ade:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae2:	e853 3f00 	ldrex	r3, [r3]
 8009ae6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3308      	adds	r3, #8
 8009af6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009af8:	64ba      	str	r2, [r7, #72]	; 0x48
 8009afa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b00:	e841 2300 	strex	r3, r2, [r1]
 8009b04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1e5      	bne.n	8009ad8 <UART_Start_Receive_IT+0x160>
 8009b0c:	e046      	b.n	8009b9c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b16:	d107      	bne.n	8009b28 <UART_Start_Receive_IT+0x1b0>
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d103      	bne.n	8009b28 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	4a24      	ldr	r2, [pc, #144]	; (8009bb4 <UART_Start_Receive_IT+0x23c>)
 8009b24:	675a      	str	r2, [r3, #116]	; 0x74
 8009b26:	e002      	b.n	8009b2e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	4a23      	ldr	r2, [pc, #140]	; (8009bb8 <UART_Start_Receive_IT+0x240>)
 8009b2c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d019      	beq.n	8009b6a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3e:	e853 3f00 	ldrex	r3, [r3]
 8009b42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009b4a:	677b      	str	r3, [r7, #116]	; 0x74
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	461a      	mov	r2, r3
 8009b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b54:	637b      	str	r3, [r7, #52]	; 0x34
 8009b56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b5c:	e841 2300 	strex	r3, r2, [r1]
 8009b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1e6      	bne.n	8009b36 <UART_Start_Receive_IT+0x1be>
 8009b68:	e018      	b.n	8009b9c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	e853 3f00 	ldrex	r3, [r3]
 8009b76:	613b      	str	r3, [r7, #16]
   return(result);
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	f043 0320 	orr.w	r3, r3, #32
 8009b7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	461a      	mov	r2, r3
 8009b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b88:	623b      	str	r3, [r7, #32]
 8009b8a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8c:	69f9      	ldr	r1, [r7, #28]
 8009b8e:	6a3a      	ldr	r2, [r7, #32]
 8009b90:	e841 2300 	strex	r3, r2, [r1]
 8009b94:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1e6      	bne.n	8009b6a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	378c      	adds	r7, #140	; 0x8c
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	0800a3dd 	.word	0x0800a3dd
 8009bb0:	0800a07d 	.word	0x0800a07d
 8009bb4:	08009ec5 	.word	0x08009ec5
 8009bb8:	08009d0d 	.word	0x08009d0d

08009bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b095      	sub	sp, #84	; 0x54
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bcc:	e853 3f00 	ldrex	r3, [r3]
 8009bd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	461a      	mov	r2, r3
 8009be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be2:	643b      	str	r3, [r7, #64]	; 0x40
 8009be4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009be8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bea:	e841 2300 	strex	r3, r2, [r1]
 8009bee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1e6      	bne.n	8009bc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	3308      	adds	r3, #8
 8009bfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfe:	6a3b      	ldr	r3, [r7, #32]
 8009c00:	e853 3f00 	ldrex	r3, [r3]
 8009c04:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c06:	69fa      	ldr	r2, [r7, #28]
 8009c08:	4b1e      	ldr	r3, [pc, #120]	; (8009c84 <UART_EndRxTransfer+0xc8>)
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3308      	adds	r3, #8
 8009c14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c1e:	e841 2300 	strex	r3, r2, [r1]
 8009c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1e5      	bne.n	8009bf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d118      	bne.n	8009c64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	e853 3f00 	ldrex	r3, [r3]
 8009c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	f023 0310 	bic.w	r3, r3, #16
 8009c46:	647b      	str	r3, [r7, #68]	; 0x44
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c50:	61bb      	str	r3, [r7, #24]
 8009c52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c54:	6979      	ldr	r1, [r7, #20]
 8009c56:	69ba      	ldr	r2, [r7, #24]
 8009c58:	e841 2300 	strex	r3, r2, [r1]
 8009c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1e6      	bne.n	8009c32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2220      	movs	r2, #32
 8009c68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009c78:	bf00      	nop
 8009c7a:	3754      	adds	r7, #84	; 0x54
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr
 8009c84:	effffffe 	.word	0xeffffffe

08009c88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f7fe fe30 	bl	800890c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cac:	bf00      	nop
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	e853 3f00 	ldrex	r3, [r3]
 8009cc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cd0:	61fb      	str	r3, [r7, #28]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	61bb      	str	r3, [r7, #24]
 8009cdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cde:	6979      	ldr	r1, [r7, #20]
 8009ce0:	69ba      	ldr	r2, [r7, #24]
 8009ce2:	e841 2300 	strex	r3, r2, [r1]
 8009ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1e6      	bne.n	8009cbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2220      	movs	r2, #32
 8009cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7fe fdfb 	bl	80088f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d02:	bf00      	nop
 8009d04:	3720      	adds	r7, #32
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
	...

08009d0c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b09c      	sub	sp, #112	; 0x70
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d1a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d24:	2b22      	cmp	r3, #34	; 0x22
 8009d26:	f040 80be 	bne.w	8009ea6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009d38:	b2d9      	uxtb	r1, r3
 8009d3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009d3e:	b2da      	uxtb	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d44:	400a      	ands	r2, r1
 8009d46:	b2d2      	uxtb	r2, r2
 8009d48:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d4e:	1c5a      	adds	r2, r3, #1
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f040 80a1 	bne.w	8009eb6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d7c:	e853 3f00 	ldrex	r3, [r3]
 8009d80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d88:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d92:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d9a:	e841 2300 	strex	r3, r2, [r1]
 8009d9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1e6      	bne.n	8009d74 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	3308      	adds	r3, #8
 8009dac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db0:	e853 3f00 	ldrex	r3, [r3]
 8009db4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db8:	f023 0301 	bic.w	r3, r3, #1
 8009dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3308      	adds	r3, #8
 8009dc4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009dc6:	647a      	str	r2, [r7, #68]	; 0x44
 8009dc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dce:	e841 2300 	strex	r3, r2, [r1]
 8009dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1e5      	bne.n	8009da6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2220      	movs	r2, #32
 8009dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a33      	ldr	r2, [pc, #204]	; (8009ec0 <UART_RxISR_8BIT+0x1b4>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d01f      	beq.n	8009e38 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d018      	beq.n	8009e38 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	e853 3f00 	ldrex	r3, [r3]
 8009e12:	623b      	str	r3, [r7, #32]
   return(result);
 8009e14:	6a3b      	ldr	r3, [r7, #32]
 8009e16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e1a:	663b      	str	r3, [r7, #96]	; 0x60
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	461a      	mov	r2, r3
 8009e22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e24:	633b      	str	r3, [r7, #48]	; 0x30
 8009e26:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e2c:	e841 2300 	strex	r3, r2, [r1]
 8009e30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1e6      	bne.n	8009e06 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d12e      	bne.n	8009e9e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	e853 3f00 	ldrex	r3, [r3]
 8009e52:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f023 0310 	bic.w	r3, r3, #16
 8009e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	461a      	mov	r2, r3
 8009e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e64:	61fb      	str	r3, [r7, #28]
 8009e66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e68:	69b9      	ldr	r1, [r7, #24]
 8009e6a:	69fa      	ldr	r2, [r7, #28]
 8009e6c:	e841 2300 	strex	r3, r2, [r1]
 8009e70:	617b      	str	r3, [r7, #20]
   return(result);
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1e6      	bne.n	8009e46 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	69db      	ldr	r3, [r3, #28]
 8009e7e:	f003 0310 	and.w	r3, r3, #16
 8009e82:	2b10      	cmp	r3, #16
 8009e84:	d103      	bne.n	8009e8e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2210      	movs	r2, #16
 8009e8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e94:	4619      	mov	r1, r3
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f7fe fd42 	bl	8008920 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e9c:	e00b      	b.n	8009eb6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7f6 fc44 	bl	800072c <HAL_UART_RxCpltCallback>
}
 8009ea4:	e007      	b.n	8009eb6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	699a      	ldr	r2, [r3, #24]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f042 0208 	orr.w	r2, r2, #8
 8009eb4:	619a      	str	r2, [r3, #24]
}
 8009eb6:	bf00      	nop
 8009eb8:	3770      	adds	r7, #112	; 0x70
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	58000c00 	.word	0x58000c00

08009ec4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b09c      	sub	sp, #112	; 0x70
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ed2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009edc:	2b22      	cmp	r3, #34	; 0x22
 8009ede:	f040 80be 	bne.w	800a05e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ef0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009ef2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009ef6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009efa:	4013      	ands	r3, r2
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f06:	1c9a      	adds	r2, r3, #2
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	3b01      	subs	r3, #1
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f040 80a1 	bne.w	800a06e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f34:	e853 3f00 	ldrex	r3, [r3]
 8009f38:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f40:	667b      	str	r3, [r7, #100]	; 0x64
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	461a      	mov	r2, r3
 8009f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8009f4c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f52:	e841 2300 	strex	r3, r2, [r1]
 8009f56:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1e6      	bne.n	8009f2c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	3308      	adds	r3, #8
 8009f64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f68:	e853 3f00 	ldrex	r3, [r3]
 8009f6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f70:	f023 0301 	bic.w	r3, r3, #1
 8009f74:	663b      	str	r3, [r7, #96]	; 0x60
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3308      	adds	r3, #8
 8009f7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f7e:	643a      	str	r2, [r7, #64]	; 0x40
 8009f80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f86:	e841 2300 	strex	r3, r2, [r1]
 8009f8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1e5      	bne.n	8009f5e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2220      	movs	r2, #32
 8009f96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a33      	ldr	r2, [pc, #204]	; (800a078 <UART_RxISR_16BIT+0x1b4>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d01f      	beq.n	8009ff0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d018      	beq.n	8009ff0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	e853 3f00 	ldrex	r3, [r3]
 8009fca:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	461a      	mov	r2, r3
 8009fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fde:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fe4:	e841 2300 	strex	r3, r2, [r1]
 8009fe8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1e6      	bne.n	8009fbe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d12e      	bne.n	800a056 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	e853 3f00 	ldrex	r3, [r3]
 800a00a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	f023 0310 	bic.w	r3, r3, #16
 800a012:	65bb      	str	r3, [r7, #88]	; 0x58
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	461a      	mov	r2, r3
 800a01a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a01c:	61bb      	str	r3, [r7, #24]
 800a01e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a020:	6979      	ldr	r1, [r7, #20]
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	e841 2300 	strex	r3, r2, [r1]
 800a028:	613b      	str	r3, [r7, #16]
   return(result);
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e6      	bne.n	8009ffe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	69db      	ldr	r3, [r3, #28]
 800a036:	f003 0310 	and.w	r3, r3, #16
 800a03a:	2b10      	cmp	r3, #16
 800a03c:	d103      	bne.n	800a046 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2210      	movs	r2, #16
 800a044:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7fe fc66 	bl	8008920 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a054:	e00b      	b.n	800a06e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7f6 fb68 	bl	800072c <HAL_UART_RxCpltCallback>
}
 800a05c:	e007      	b.n	800a06e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	699a      	ldr	r2, [r3, #24]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f042 0208 	orr.w	r2, r2, #8
 800a06c:	619a      	str	r2, [r3, #24]
}
 800a06e:	bf00      	nop
 800a070:	3770      	adds	r7, #112	; 0x70
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	58000c00 	.word	0x58000c00

0800a07c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b0ac      	sub	sp, #176	; 0xb0
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a08a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	69db      	ldr	r3, [r3, #28]
 800a094:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0b2:	2b22      	cmp	r3, #34	; 0x22
 800a0b4:	f040 8180 	bne.w	800a3b8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a0be:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a0c2:	e123      	b.n	800a30c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ca:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a0ce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800a0d2:	b2d9      	uxtb	r1, r3
 800a0d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0de:	400a      	ands	r2, r1
 800a0e0:	b2d2      	uxtb	r2, r2
 800a0e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0e8:	1c5a      	adds	r2, r3, #1
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	69db      	ldr	r3, [r3, #28]
 800a106:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a10a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a10e:	f003 0307 	and.w	r3, r3, #7
 800a112:	2b00      	cmp	r3, #0
 800a114:	d053      	beq.n	800a1be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d011      	beq.n	800a146 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a122:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00b      	beq.n	800a146 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2201      	movs	r2, #1
 800a134:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a13c:	f043 0201 	orr.w	r2, r3, #1
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a14a:	f003 0302 	and.w	r3, r3, #2
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d011      	beq.n	800a176 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a156:	f003 0301 	and.w	r3, r3, #1
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00b      	beq.n	800a176 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2202      	movs	r2, #2
 800a164:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a16c:	f043 0204 	orr.w	r2, r3, #4
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a17a:	f003 0304 	and.w	r3, r3, #4
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d011      	beq.n	800a1a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a186:	f003 0301 	and.w	r3, r3, #1
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00b      	beq.n	800a1a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2204      	movs	r2, #4
 800a194:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a19c:	f043 0202 	orr.w	r2, r3, #2
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d006      	beq.n	800a1be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7fe fbab 	bl	800890c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f040 80a0 	bne.w	800a30c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1d4:	e853 3f00 	ldrex	r3, [r3]
 800a1d8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800a1da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a1ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a1f0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a1f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a1f6:	e841 2300 	strex	r3, r2, [r1]
 800a1fa:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800a1fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1e4      	bne.n	800a1cc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	3308      	adds	r3, #8
 800a208:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a20c:	e853 3f00 	ldrex	r3, [r3]
 800a210:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a212:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a214:	4b6e      	ldr	r3, [pc, #440]	; (800a3d0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800a216:	4013      	ands	r3, r2
 800a218:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	3308      	adds	r3, #8
 800a222:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a226:	66ba      	str	r2, [r7, #104]	; 0x68
 800a228:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a22c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a22e:	e841 2300 	strex	r3, r2, [r1]
 800a232:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a236:	2b00      	cmp	r3, #0
 800a238:	d1e3      	bne.n	800a202 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2220      	movs	r2, #32
 800a23e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a60      	ldr	r2, [pc, #384]	; (800a3d4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d021      	beq.n	800a29c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a262:	2b00      	cmp	r3, #0
 800a264:	d01a      	beq.n	800a29c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a26e:	e853 3f00 	ldrex	r3, [r3]
 800a272:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a276:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a27a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	461a      	mov	r2, r3
 800a284:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a288:	657b      	str	r3, [r7, #84]	; 0x54
 800a28a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a28e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a290:	e841 2300 	strex	r3, r2, [r1]
 800a294:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d1e4      	bne.n	800a266 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d130      	bne.n	800a306 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b2:	e853 3f00 	ldrex	r3, [r3]
 800a2b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ba:	f023 0310 	bic.w	r3, r3, #16
 800a2be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2cc:	643b      	str	r3, [r7, #64]	; 0x40
 800a2ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2d4:	e841 2300 	strex	r3, r2, [r1]
 800a2d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1e4      	bne.n	800a2aa <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	69db      	ldr	r3, [r3, #28]
 800a2e6:	f003 0310 	and.w	r3, r3, #16
 800a2ea:	2b10      	cmp	r3, #16
 800a2ec:	d103      	bne.n	800a2f6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2210      	movs	r2, #16
 800a2f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7fe fb0e 	bl	8008920 <HAL_UARTEx_RxEventCallback>
 800a304:	e002      	b.n	800a30c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f7f6 fa10 	bl	800072c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a30c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800a310:	2b00      	cmp	r3, #0
 800a312:	d006      	beq.n	800a322 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800a314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a318:	f003 0320 	and.w	r3, r3, #32
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f47f aed1 	bne.w	800a0c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a328:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a32c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a330:	2b00      	cmp	r3, #0
 800a332:	d049      	beq.n	800a3c8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a33a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800a33e:	429a      	cmp	r2, r3
 800a340:	d242      	bcs.n	800a3c8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	3308      	adds	r3, #8
 800a348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34a:	6a3b      	ldr	r3, [r7, #32]
 800a34c:	e853 3f00 	ldrex	r3, [r3]
 800a350:	61fb      	str	r3, [r7, #28]
   return(result);
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a358:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3308      	adds	r3, #8
 800a362:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a366:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a368:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a36c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a36e:	e841 2300 	strex	r3, r2, [r1]
 800a372:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1e3      	bne.n	800a342 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4a16      	ldr	r2, [pc, #88]	; (800a3d8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a37e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	e853 3f00 	ldrex	r3, [r3]
 800a38c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	f043 0320 	orr.w	r3, r3, #32
 800a394:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	461a      	mov	r2, r3
 800a39e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a3a2:	61bb      	str	r3, [r7, #24]
 800a3a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a6:	6979      	ldr	r1, [r7, #20]
 800a3a8:	69ba      	ldr	r2, [r7, #24]
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e4      	bne.n	800a380 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a3b6:	e007      	b.n	800a3c8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	699a      	ldr	r2, [r3, #24]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f042 0208 	orr.w	r2, r2, #8
 800a3c6:	619a      	str	r2, [r3, #24]
}
 800a3c8:	bf00      	nop
 800a3ca:	37b0      	adds	r7, #176	; 0xb0
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	effffffe 	.word	0xeffffffe
 800a3d4:	58000c00 	.word	0x58000c00
 800a3d8:	08009d0d 	.word	0x08009d0d

0800a3dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b0ae      	sub	sp, #184	; 0xb8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a3ea:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	69db      	ldr	r3, [r3, #28]
 800a3f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a412:	2b22      	cmp	r3, #34	; 0x22
 800a414:	f040 8184 	bne.w	800a720 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a41e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a422:	e127      	b.n	800a674 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a436:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a43a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a43e:	4013      	ands	r3, r2
 800a440:	b29a      	uxth	r2, r3
 800a442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a446:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a44c:	1c9a      	adds	r2, r3, #2
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a458:	b29b      	uxth	r3, r3
 800a45a:	3b01      	subs	r3, #1
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	69db      	ldr	r3, [r3, #28]
 800a46a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a46e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a472:	f003 0307 	and.w	r3, r3, #7
 800a476:	2b00      	cmp	r3, #0
 800a478:	d053      	beq.n	800a522 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a47a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	2b00      	cmp	r3, #0
 800a484:	d011      	beq.n	800a4aa <UART_RxISR_16BIT_FIFOEN+0xce>
 800a486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a48a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00b      	beq.n	800a4aa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2201      	movs	r2, #1
 800a498:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4a0:	f043 0201 	orr.w	r2, r3, #1
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a4ae:	f003 0302 	and.w	r3, r3, #2
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d011      	beq.n	800a4da <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a4b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00b      	beq.n	800a4da <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2202      	movs	r2, #2
 800a4c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4d0:	f043 0204 	orr.w	r2, r3, #4
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a4de:	f003 0304 	and.w	r3, r3, #4
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d011      	beq.n	800a50a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a4e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00b      	beq.n	800a50a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2204      	movs	r2, #4
 800a4f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a500:	f043 0202 	orr.w	r2, r3, #2
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a510:	2b00      	cmp	r3, #0
 800a512:	d006      	beq.n	800a522 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f7fe f9f9 	bl	800890c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a528:	b29b      	uxth	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f040 80a2 	bne.w	800a674 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a538:	e853 3f00 	ldrex	r3, [r3]
 800a53c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a53e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	461a      	mov	r2, r3
 800a54e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a552:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a556:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a558:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a55a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a55e:	e841 2300 	strex	r3, r2, [r1]
 800a562:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1e2      	bne.n	800a530 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	3308      	adds	r3, #8
 800a570:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a574:	e853 3f00 	ldrex	r3, [r3]
 800a578:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a57a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a57c:	4b6e      	ldr	r3, [pc, #440]	; (800a738 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800a57e:	4013      	ands	r3, r2
 800a580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	3308      	adds	r3, #8
 800a58a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a58e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a590:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a592:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a594:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a596:	e841 2300 	strex	r3, r2, [r1]
 800a59a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a59c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1e3      	bne.n	800a56a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2220      	movs	r2, #32
 800a5a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a60      	ldr	r2, [pc, #384]	; (800a73c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d021      	beq.n	800a604 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d01a      	beq.n	800a604 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5d6:	e853 3f00 	ldrex	r3, [r3]
 800a5da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a5dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a5e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a5f0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a5f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5f8:	e841 2300 	strex	r3, r2, [r1]
 800a5fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a5fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1e4      	bne.n	800a5ce <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d130      	bne.n	800a66e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61a:	e853 3f00 	ldrex	r3, [r3]
 800a61e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a622:	f023 0310 	bic.w	r3, r3, #16
 800a626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	461a      	mov	r2, r3
 800a630:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a634:	647b      	str	r3, [r7, #68]	; 0x44
 800a636:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a638:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a63a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a63c:	e841 2300 	strex	r3, r2, [r1]
 800a640:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a644:	2b00      	cmp	r3, #0
 800a646:	d1e4      	bne.n	800a612 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	f003 0310 	and.w	r3, r3, #16
 800a652:	2b10      	cmp	r3, #16
 800a654:	d103      	bne.n	800a65e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2210      	movs	r2, #16
 800a65c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a664:	4619      	mov	r1, r3
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7fe f95a 	bl	8008920 <HAL_UARTEx_RxEventCallback>
 800a66c:	e002      	b.n	800a674 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f7f6 f85c 	bl	800072c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a674:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d006      	beq.n	800a68a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800a67c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a680:	f003 0320 	and.w	r3, r3, #32
 800a684:	2b00      	cmp	r3, #0
 800a686:	f47f aecd 	bne.w	800a424 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a690:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a694:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d049      	beq.n	800a730 <UART_RxISR_16BIT_FIFOEN+0x354>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a6a2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d242      	bcs.n	800a730 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	3308      	adds	r3, #8
 800a6b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b4:	e853 3f00 	ldrex	r3, [r3]
 800a6b8:	623b      	str	r3, [r7, #32]
   return(result);
 800a6ba:	6a3b      	ldr	r3, [r7, #32]
 800a6bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3308      	adds	r3, #8
 800a6ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a6ce:	633a      	str	r2, [r7, #48]	; 0x30
 800a6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6d6:	e841 2300 	strex	r3, r2, [r1]
 800a6da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1e3      	bne.n	800a6aa <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4a16      	ldr	r2, [pc, #88]	; (800a740 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a6e6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	e853 3f00 	ldrex	r3, [r3]
 800a6f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f043 0320 	orr.w	r3, r3, #32
 800a6fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	461a      	mov	r2, r3
 800a706:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a70a:	61fb      	str	r3, [r7, #28]
 800a70c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70e:	69b9      	ldr	r1, [r7, #24]
 800a710:	69fa      	ldr	r2, [r7, #28]
 800a712:	e841 2300 	strex	r3, r2, [r1]
 800a716:	617b      	str	r3, [r7, #20]
   return(result);
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d1e4      	bne.n	800a6e8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a71e:	e007      	b.n	800a730 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	699a      	ldr	r2, [r3, #24]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f042 0208 	orr.w	r2, r2, #8
 800a72e:	619a      	str	r2, [r3, #24]
}
 800a730:	bf00      	nop
 800a732:	37b8      	adds	r7, #184	; 0xb8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	effffffe 	.word	0xeffffffe
 800a73c:	58000c00 	.word	0x58000c00
 800a740:	08009ec5 	.word	0x08009ec5

0800a744 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d101      	bne.n	800a796 <HAL_UARTEx_DisableFifoMode+0x16>
 800a792:	2302      	movs	r3, #2
 800a794:	e027      	b.n	800a7e6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2201      	movs	r2, #1
 800a79a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2224      	movs	r2, #36	; 0x24
 800a7a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f022 0201 	bic.w	r2, r2, #1
 800a7bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a7c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3714      	adds	r7, #20
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr

0800a7f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b084      	sub	sp, #16
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
 800a7fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a802:	2b01      	cmp	r3, #1
 800a804:	d101      	bne.n	800a80a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a806:	2302      	movs	r3, #2
 800a808:	e02d      	b.n	800a866 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2201      	movs	r2, #1
 800a80e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2224      	movs	r2, #36	; 0x24
 800a816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f022 0201 	bic.w	r2, r2, #1
 800a830:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	683a      	ldr	r2, [r7, #0]
 800a842:	430a      	orrs	r2, r1
 800a844:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f850 	bl	800a8ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2220      	movs	r2, #32
 800a858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b084      	sub	sp, #16
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
 800a876:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d101      	bne.n	800a886 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a882:	2302      	movs	r3, #2
 800a884:	e02d      	b.n	800a8e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2201      	movs	r2, #1
 800a88a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2224      	movs	r2, #36	; 0x24
 800a892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f022 0201 	bic.w	r2, r2, #1
 800a8ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	683a      	ldr	r2, [r7, #0]
 800a8be:	430a      	orrs	r2, r1
 800a8c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 f812 	bl	800a8ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2220      	movs	r2, #32
 800a8d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
	...

0800a8ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d108      	bne.n	800a90e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a90c:	e031      	b.n	800a972 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a90e:	2310      	movs	r3, #16
 800a910:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a912:	2310      	movs	r3, #16
 800a914:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	0e5b      	lsrs	r3, r3, #25
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	f003 0307 	and.w	r3, r3, #7
 800a924:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	0f5b      	lsrs	r3, r3, #29
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	f003 0307 	and.w	r3, r3, #7
 800a934:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a936:	7bbb      	ldrb	r3, [r7, #14]
 800a938:	7b3a      	ldrb	r2, [r7, #12]
 800a93a:	4911      	ldr	r1, [pc, #68]	; (800a980 <UARTEx_SetNbDataToProcess+0x94>)
 800a93c:	5c8a      	ldrb	r2, [r1, r2]
 800a93e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a942:	7b3a      	ldrb	r2, [r7, #12]
 800a944:	490f      	ldr	r1, [pc, #60]	; (800a984 <UARTEx_SetNbDataToProcess+0x98>)
 800a946:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a948:	fb93 f3f2 	sdiv	r3, r3, r2
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a954:	7bfb      	ldrb	r3, [r7, #15]
 800a956:	7b7a      	ldrb	r2, [r7, #13]
 800a958:	4909      	ldr	r1, [pc, #36]	; (800a980 <UARTEx_SetNbDataToProcess+0x94>)
 800a95a:	5c8a      	ldrb	r2, [r1, r2]
 800a95c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a960:	7b7a      	ldrb	r2, [r7, #13]
 800a962:	4908      	ldr	r1, [pc, #32]	; (800a984 <UARTEx_SetNbDataToProcess+0x98>)
 800a964:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a966:	fb93 f3f2 	sdiv	r3, r3, r2
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a972:	bf00      	nop
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	0800b314 	.word	0x0800b314
 800a984:	0800b31c 	.word	0x0800b31c

0800a988 <siprintf>:
 800a988:	b40e      	push	{r1, r2, r3}
 800a98a:	b500      	push	{lr}
 800a98c:	b09c      	sub	sp, #112	; 0x70
 800a98e:	ab1d      	add	r3, sp, #116	; 0x74
 800a990:	9002      	str	r0, [sp, #8]
 800a992:	9006      	str	r0, [sp, #24]
 800a994:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a998:	4809      	ldr	r0, [pc, #36]	; (800a9c0 <siprintf+0x38>)
 800a99a:	9107      	str	r1, [sp, #28]
 800a99c:	9104      	str	r1, [sp, #16]
 800a99e:	4909      	ldr	r1, [pc, #36]	; (800a9c4 <siprintf+0x3c>)
 800a9a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9a4:	9105      	str	r1, [sp, #20]
 800a9a6:	6800      	ldr	r0, [r0, #0]
 800a9a8:	9301      	str	r3, [sp, #4]
 800a9aa:	a902      	add	r1, sp, #8
 800a9ac:	f000 f992 	bl	800acd4 <_svfiprintf_r>
 800a9b0:	9b02      	ldr	r3, [sp, #8]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	701a      	strb	r2, [r3, #0]
 800a9b6:	b01c      	add	sp, #112	; 0x70
 800a9b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9bc:	b003      	add	sp, #12
 800a9be:	4770      	bx	lr
 800a9c0:	24000064 	.word	0x24000064
 800a9c4:	ffff0208 	.word	0xffff0208

0800a9c8 <memset>:
 800a9c8:	4402      	add	r2, r0
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d100      	bne.n	800a9d2 <memset+0xa>
 800a9d0:	4770      	bx	lr
 800a9d2:	f803 1b01 	strb.w	r1, [r3], #1
 800a9d6:	e7f9      	b.n	800a9cc <memset+0x4>

0800a9d8 <__errno>:
 800a9d8:	4b01      	ldr	r3, [pc, #4]	; (800a9e0 <__errno+0x8>)
 800a9da:	6818      	ldr	r0, [r3, #0]
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	24000064 	.word	0x24000064

0800a9e4 <__libc_init_array>:
 800a9e4:	b570      	push	{r4, r5, r6, lr}
 800a9e6:	4d0d      	ldr	r5, [pc, #52]	; (800aa1c <__libc_init_array+0x38>)
 800a9e8:	4c0d      	ldr	r4, [pc, #52]	; (800aa20 <__libc_init_array+0x3c>)
 800a9ea:	1b64      	subs	r4, r4, r5
 800a9ec:	10a4      	asrs	r4, r4, #2
 800a9ee:	2600      	movs	r6, #0
 800a9f0:	42a6      	cmp	r6, r4
 800a9f2:	d109      	bne.n	800aa08 <__libc_init_array+0x24>
 800a9f4:	4d0b      	ldr	r5, [pc, #44]	; (800aa24 <__libc_init_array+0x40>)
 800a9f6:	4c0c      	ldr	r4, [pc, #48]	; (800aa28 <__libc_init_array+0x44>)
 800a9f8:	f000 fc6a 	bl	800b2d0 <_init>
 800a9fc:	1b64      	subs	r4, r4, r5
 800a9fe:	10a4      	asrs	r4, r4, #2
 800aa00:	2600      	movs	r6, #0
 800aa02:	42a6      	cmp	r6, r4
 800aa04:	d105      	bne.n	800aa12 <__libc_init_array+0x2e>
 800aa06:	bd70      	pop	{r4, r5, r6, pc}
 800aa08:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa0c:	4798      	blx	r3
 800aa0e:	3601      	adds	r6, #1
 800aa10:	e7ee      	b.n	800a9f0 <__libc_init_array+0xc>
 800aa12:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa16:	4798      	blx	r3
 800aa18:	3601      	adds	r6, #1
 800aa1a:	e7f2      	b.n	800aa02 <__libc_init_array+0x1e>
 800aa1c:	0800b360 	.word	0x0800b360
 800aa20:	0800b360 	.word	0x0800b360
 800aa24:	0800b360 	.word	0x0800b360
 800aa28:	0800b364 	.word	0x0800b364

0800aa2c <__retarget_lock_acquire_recursive>:
 800aa2c:	4770      	bx	lr

0800aa2e <__retarget_lock_release_recursive>:
 800aa2e:	4770      	bx	lr

0800aa30 <_free_r>:
 800aa30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa32:	2900      	cmp	r1, #0
 800aa34:	d044      	beq.n	800aac0 <_free_r+0x90>
 800aa36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa3a:	9001      	str	r0, [sp, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f1a1 0404 	sub.w	r4, r1, #4
 800aa42:	bfb8      	it	lt
 800aa44:	18e4      	addlt	r4, r4, r3
 800aa46:	f000 f8df 	bl	800ac08 <__malloc_lock>
 800aa4a:	4a1e      	ldr	r2, [pc, #120]	; (800aac4 <_free_r+0x94>)
 800aa4c:	9801      	ldr	r0, [sp, #4]
 800aa4e:	6813      	ldr	r3, [r2, #0]
 800aa50:	b933      	cbnz	r3, 800aa60 <_free_r+0x30>
 800aa52:	6063      	str	r3, [r4, #4]
 800aa54:	6014      	str	r4, [r2, #0]
 800aa56:	b003      	add	sp, #12
 800aa58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa5c:	f000 b8da 	b.w	800ac14 <__malloc_unlock>
 800aa60:	42a3      	cmp	r3, r4
 800aa62:	d908      	bls.n	800aa76 <_free_r+0x46>
 800aa64:	6825      	ldr	r5, [r4, #0]
 800aa66:	1961      	adds	r1, r4, r5
 800aa68:	428b      	cmp	r3, r1
 800aa6a:	bf01      	itttt	eq
 800aa6c:	6819      	ldreq	r1, [r3, #0]
 800aa6e:	685b      	ldreq	r3, [r3, #4]
 800aa70:	1949      	addeq	r1, r1, r5
 800aa72:	6021      	streq	r1, [r4, #0]
 800aa74:	e7ed      	b.n	800aa52 <_free_r+0x22>
 800aa76:	461a      	mov	r2, r3
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	b10b      	cbz	r3, 800aa80 <_free_r+0x50>
 800aa7c:	42a3      	cmp	r3, r4
 800aa7e:	d9fa      	bls.n	800aa76 <_free_r+0x46>
 800aa80:	6811      	ldr	r1, [r2, #0]
 800aa82:	1855      	adds	r5, r2, r1
 800aa84:	42a5      	cmp	r5, r4
 800aa86:	d10b      	bne.n	800aaa0 <_free_r+0x70>
 800aa88:	6824      	ldr	r4, [r4, #0]
 800aa8a:	4421      	add	r1, r4
 800aa8c:	1854      	adds	r4, r2, r1
 800aa8e:	42a3      	cmp	r3, r4
 800aa90:	6011      	str	r1, [r2, #0]
 800aa92:	d1e0      	bne.n	800aa56 <_free_r+0x26>
 800aa94:	681c      	ldr	r4, [r3, #0]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	6053      	str	r3, [r2, #4]
 800aa9a:	440c      	add	r4, r1
 800aa9c:	6014      	str	r4, [r2, #0]
 800aa9e:	e7da      	b.n	800aa56 <_free_r+0x26>
 800aaa0:	d902      	bls.n	800aaa8 <_free_r+0x78>
 800aaa2:	230c      	movs	r3, #12
 800aaa4:	6003      	str	r3, [r0, #0]
 800aaa6:	e7d6      	b.n	800aa56 <_free_r+0x26>
 800aaa8:	6825      	ldr	r5, [r4, #0]
 800aaaa:	1961      	adds	r1, r4, r5
 800aaac:	428b      	cmp	r3, r1
 800aaae:	bf04      	itt	eq
 800aab0:	6819      	ldreq	r1, [r3, #0]
 800aab2:	685b      	ldreq	r3, [r3, #4]
 800aab4:	6063      	str	r3, [r4, #4]
 800aab6:	bf04      	itt	eq
 800aab8:	1949      	addeq	r1, r1, r5
 800aaba:	6021      	streq	r1, [r4, #0]
 800aabc:	6054      	str	r4, [r2, #4]
 800aabe:	e7ca      	b.n	800aa56 <_free_r+0x26>
 800aac0:	b003      	add	sp, #12
 800aac2:	bd30      	pop	{r4, r5, pc}
 800aac4:	2401d894 	.word	0x2401d894

0800aac8 <sbrk_aligned>:
 800aac8:	b570      	push	{r4, r5, r6, lr}
 800aaca:	4e0e      	ldr	r6, [pc, #56]	; (800ab04 <sbrk_aligned+0x3c>)
 800aacc:	460c      	mov	r4, r1
 800aace:	6831      	ldr	r1, [r6, #0]
 800aad0:	4605      	mov	r5, r0
 800aad2:	b911      	cbnz	r1, 800aada <sbrk_aligned+0x12>
 800aad4:	f000 fba6 	bl	800b224 <_sbrk_r>
 800aad8:	6030      	str	r0, [r6, #0]
 800aada:	4621      	mov	r1, r4
 800aadc:	4628      	mov	r0, r5
 800aade:	f000 fba1 	bl	800b224 <_sbrk_r>
 800aae2:	1c43      	adds	r3, r0, #1
 800aae4:	d00a      	beq.n	800aafc <sbrk_aligned+0x34>
 800aae6:	1cc4      	adds	r4, r0, #3
 800aae8:	f024 0403 	bic.w	r4, r4, #3
 800aaec:	42a0      	cmp	r0, r4
 800aaee:	d007      	beq.n	800ab00 <sbrk_aligned+0x38>
 800aaf0:	1a21      	subs	r1, r4, r0
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f000 fb96 	bl	800b224 <_sbrk_r>
 800aaf8:	3001      	adds	r0, #1
 800aafa:	d101      	bne.n	800ab00 <sbrk_aligned+0x38>
 800aafc:	f04f 34ff 	mov.w	r4, #4294967295
 800ab00:	4620      	mov	r0, r4
 800ab02:	bd70      	pop	{r4, r5, r6, pc}
 800ab04:	2401d898 	.word	0x2401d898

0800ab08 <_malloc_r>:
 800ab08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab0c:	1ccd      	adds	r5, r1, #3
 800ab0e:	f025 0503 	bic.w	r5, r5, #3
 800ab12:	3508      	adds	r5, #8
 800ab14:	2d0c      	cmp	r5, #12
 800ab16:	bf38      	it	cc
 800ab18:	250c      	movcc	r5, #12
 800ab1a:	2d00      	cmp	r5, #0
 800ab1c:	4607      	mov	r7, r0
 800ab1e:	db01      	blt.n	800ab24 <_malloc_r+0x1c>
 800ab20:	42a9      	cmp	r1, r5
 800ab22:	d905      	bls.n	800ab30 <_malloc_r+0x28>
 800ab24:	230c      	movs	r3, #12
 800ab26:	603b      	str	r3, [r7, #0]
 800ab28:	2600      	movs	r6, #0
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac04 <_malloc_r+0xfc>
 800ab34:	f000 f868 	bl	800ac08 <__malloc_lock>
 800ab38:	f8d8 3000 	ldr.w	r3, [r8]
 800ab3c:	461c      	mov	r4, r3
 800ab3e:	bb5c      	cbnz	r4, 800ab98 <_malloc_r+0x90>
 800ab40:	4629      	mov	r1, r5
 800ab42:	4638      	mov	r0, r7
 800ab44:	f7ff ffc0 	bl	800aac8 <sbrk_aligned>
 800ab48:	1c43      	adds	r3, r0, #1
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	d155      	bne.n	800abfa <_malloc_r+0xf2>
 800ab4e:	f8d8 4000 	ldr.w	r4, [r8]
 800ab52:	4626      	mov	r6, r4
 800ab54:	2e00      	cmp	r6, #0
 800ab56:	d145      	bne.n	800abe4 <_malloc_r+0xdc>
 800ab58:	2c00      	cmp	r4, #0
 800ab5a:	d048      	beq.n	800abee <_malloc_r+0xe6>
 800ab5c:	6823      	ldr	r3, [r4, #0]
 800ab5e:	4631      	mov	r1, r6
 800ab60:	4638      	mov	r0, r7
 800ab62:	eb04 0903 	add.w	r9, r4, r3
 800ab66:	f000 fb5d 	bl	800b224 <_sbrk_r>
 800ab6a:	4581      	cmp	r9, r0
 800ab6c:	d13f      	bne.n	800abee <_malloc_r+0xe6>
 800ab6e:	6821      	ldr	r1, [r4, #0]
 800ab70:	1a6d      	subs	r5, r5, r1
 800ab72:	4629      	mov	r1, r5
 800ab74:	4638      	mov	r0, r7
 800ab76:	f7ff ffa7 	bl	800aac8 <sbrk_aligned>
 800ab7a:	3001      	adds	r0, #1
 800ab7c:	d037      	beq.n	800abee <_malloc_r+0xe6>
 800ab7e:	6823      	ldr	r3, [r4, #0]
 800ab80:	442b      	add	r3, r5
 800ab82:	6023      	str	r3, [r4, #0]
 800ab84:	f8d8 3000 	ldr.w	r3, [r8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d038      	beq.n	800abfe <_malloc_r+0xf6>
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	42a2      	cmp	r2, r4
 800ab90:	d12b      	bne.n	800abea <_malloc_r+0xe2>
 800ab92:	2200      	movs	r2, #0
 800ab94:	605a      	str	r2, [r3, #4]
 800ab96:	e00f      	b.n	800abb8 <_malloc_r+0xb0>
 800ab98:	6822      	ldr	r2, [r4, #0]
 800ab9a:	1b52      	subs	r2, r2, r5
 800ab9c:	d41f      	bmi.n	800abde <_malloc_r+0xd6>
 800ab9e:	2a0b      	cmp	r2, #11
 800aba0:	d917      	bls.n	800abd2 <_malloc_r+0xca>
 800aba2:	1961      	adds	r1, r4, r5
 800aba4:	42a3      	cmp	r3, r4
 800aba6:	6025      	str	r5, [r4, #0]
 800aba8:	bf18      	it	ne
 800abaa:	6059      	strne	r1, [r3, #4]
 800abac:	6863      	ldr	r3, [r4, #4]
 800abae:	bf08      	it	eq
 800abb0:	f8c8 1000 	streq.w	r1, [r8]
 800abb4:	5162      	str	r2, [r4, r5]
 800abb6:	604b      	str	r3, [r1, #4]
 800abb8:	4638      	mov	r0, r7
 800abba:	f104 060b 	add.w	r6, r4, #11
 800abbe:	f000 f829 	bl	800ac14 <__malloc_unlock>
 800abc2:	f026 0607 	bic.w	r6, r6, #7
 800abc6:	1d23      	adds	r3, r4, #4
 800abc8:	1af2      	subs	r2, r6, r3
 800abca:	d0ae      	beq.n	800ab2a <_malloc_r+0x22>
 800abcc:	1b9b      	subs	r3, r3, r6
 800abce:	50a3      	str	r3, [r4, r2]
 800abd0:	e7ab      	b.n	800ab2a <_malloc_r+0x22>
 800abd2:	42a3      	cmp	r3, r4
 800abd4:	6862      	ldr	r2, [r4, #4]
 800abd6:	d1dd      	bne.n	800ab94 <_malloc_r+0x8c>
 800abd8:	f8c8 2000 	str.w	r2, [r8]
 800abdc:	e7ec      	b.n	800abb8 <_malloc_r+0xb0>
 800abde:	4623      	mov	r3, r4
 800abe0:	6864      	ldr	r4, [r4, #4]
 800abe2:	e7ac      	b.n	800ab3e <_malloc_r+0x36>
 800abe4:	4634      	mov	r4, r6
 800abe6:	6876      	ldr	r6, [r6, #4]
 800abe8:	e7b4      	b.n	800ab54 <_malloc_r+0x4c>
 800abea:	4613      	mov	r3, r2
 800abec:	e7cc      	b.n	800ab88 <_malloc_r+0x80>
 800abee:	230c      	movs	r3, #12
 800abf0:	603b      	str	r3, [r7, #0]
 800abf2:	4638      	mov	r0, r7
 800abf4:	f000 f80e 	bl	800ac14 <__malloc_unlock>
 800abf8:	e797      	b.n	800ab2a <_malloc_r+0x22>
 800abfa:	6025      	str	r5, [r4, #0]
 800abfc:	e7dc      	b.n	800abb8 <_malloc_r+0xb0>
 800abfe:	605b      	str	r3, [r3, #4]
 800ac00:	deff      	udf	#255	; 0xff
 800ac02:	bf00      	nop
 800ac04:	2401d894 	.word	0x2401d894

0800ac08 <__malloc_lock>:
 800ac08:	4801      	ldr	r0, [pc, #4]	; (800ac10 <__malloc_lock+0x8>)
 800ac0a:	f7ff bf0f 	b.w	800aa2c <__retarget_lock_acquire_recursive>
 800ac0e:	bf00      	nop
 800ac10:	2401d890 	.word	0x2401d890

0800ac14 <__malloc_unlock>:
 800ac14:	4801      	ldr	r0, [pc, #4]	; (800ac1c <__malloc_unlock+0x8>)
 800ac16:	f7ff bf0a 	b.w	800aa2e <__retarget_lock_release_recursive>
 800ac1a:	bf00      	nop
 800ac1c:	2401d890 	.word	0x2401d890

0800ac20 <__ssputs_r>:
 800ac20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac24:	688e      	ldr	r6, [r1, #8]
 800ac26:	461f      	mov	r7, r3
 800ac28:	42be      	cmp	r6, r7
 800ac2a:	680b      	ldr	r3, [r1, #0]
 800ac2c:	4682      	mov	sl, r0
 800ac2e:	460c      	mov	r4, r1
 800ac30:	4690      	mov	r8, r2
 800ac32:	d82c      	bhi.n	800ac8e <__ssputs_r+0x6e>
 800ac34:	898a      	ldrh	r2, [r1, #12]
 800ac36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac3a:	d026      	beq.n	800ac8a <__ssputs_r+0x6a>
 800ac3c:	6965      	ldr	r5, [r4, #20]
 800ac3e:	6909      	ldr	r1, [r1, #16]
 800ac40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac44:	eba3 0901 	sub.w	r9, r3, r1
 800ac48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac4c:	1c7b      	adds	r3, r7, #1
 800ac4e:	444b      	add	r3, r9
 800ac50:	106d      	asrs	r5, r5, #1
 800ac52:	429d      	cmp	r5, r3
 800ac54:	bf38      	it	cc
 800ac56:	461d      	movcc	r5, r3
 800ac58:	0553      	lsls	r3, r2, #21
 800ac5a:	d527      	bpl.n	800acac <__ssputs_r+0x8c>
 800ac5c:	4629      	mov	r1, r5
 800ac5e:	f7ff ff53 	bl	800ab08 <_malloc_r>
 800ac62:	4606      	mov	r6, r0
 800ac64:	b360      	cbz	r0, 800acc0 <__ssputs_r+0xa0>
 800ac66:	6921      	ldr	r1, [r4, #16]
 800ac68:	464a      	mov	r2, r9
 800ac6a:	f000 faeb 	bl	800b244 <memcpy>
 800ac6e:	89a3      	ldrh	r3, [r4, #12]
 800ac70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac78:	81a3      	strh	r3, [r4, #12]
 800ac7a:	6126      	str	r6, [r4, #16]
 800ac7c:	6165      	str	r5, [r4, #20]
 800ac7e:	444e      	add	r6, r9
 800ac80:	eba5 0509 	sub.w	r5, r5, r9
 800ac84:	6026      	str	r6, [r4, #0]
 800ac86:	60a5      	str	r5, [r4, #8]
 800ac88:	463e      	mov	r6, r7
 800ac8a:	42be      	cmp	r6, r7
 800ac8c:	d900      	bls.n	800ac90 <__ssputs_r+0x70>
 800ac8e:	463e      	mov	r6, r7
 800ac90:	6820      	ldr	r0, [r4, #0]
 800ac92:	4632      	mov	r2, r6
 800ac94:	4641      	mov	r1, r8
 800ac96:	f000 faab 	bl	800b1f0 <memmove>
 800ac9a:	68a3      	ldr	r3, [r4, #8]
 800ac9c:	1b9b      	subs	r3, r3, r6
 800ac9e:	60a3      	str	r3, [r4, #8]
 800aca0:	6823      	ldr	r3, [r4, #0]
 800aca2:	4433      	add	r3, r6
 800aca4:	6023      	str	r3, [r4, #0]
 800aca6:	2000      	movs	r0, #0
 800aca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acac:	462a      	mov	r2, r5
 800acae:	f000 fad7 	bl	800b260 <_realloc_r>
 800acb2:	4606      	mov	r6, r0
 800acb4:	2800      	cmp	r0, #0
 800acb6:	d1e0      	bne.n	800ac7a <__ssputs_r+0x5a>
 800acb8:	6921      	ldr	r1, [r4, #16]
 800acba:	4650      	mov	r0, sl
 800acbc:	f7ff feb8 	bl	800aa30 <_free_r>
 800acc0:	230c      	movs	r3, #12
 800acc2:	f8ca 3000 	str.w	r3, [sl]
 800acc6:	89a3      	ldrh	r3, [r4, #12]
 800acc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800accc:	81a3      	strh	r3, [r4, #12]
 800acce:	f04f 30ff 	mov.w	r0, #4294967295
 800acd2:	e7e9      	b.n	800aca8 <__ssputs_r+0x88>

0800acd4 <_svfiprintf_r>:
 800acd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd8:	4698      	mov	r8, r3
 800acda:	898b      	ldrh	r3, [r1, #12]
 800acdc:	061b      	lsls	r3, r3, #24
 800acde:	b09d      	sub	sp, #116	; 0x74
 800ace0:	4607      	mov	r7, r0
 800ace2:	460d      	mov	r5, r1
 800ace4:	4614      	mov	r4, r2
 800ace6:	d50e      	bpl.n	800ad06 <_svfiprintf_r+0x32>
 800ace8:	690b      	ldr	r3, [r1, #16]
 800acea:	b963      	cbnz	r3, 800ad06 <_svfiprintf_r+0x32>
 800acec:	2140      	movs	r1, #64	; 0x40
 800acee:	f7ff ff0b 	bl	800ab08 <_malloc_r>
 800acf2:	6028      	str	r0, [r5, #0]
 800acf4:	6128      	str	r0, [r5, #16]
 800acf6:	b920      	cbnz	r0, 800ad02 <_svfiprintf_r+0x2e>
 800acf8:	230c      	movs	r3, #12
 800acfa:	603b      	str	r3, [r7, #0]
 800acfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ad00:	e0d0      	b.n	800aea4 <_svfiprintf_r+0x1d0>
 800ad02:	2340      	movs	r3, #64	; 0x40
 800ad04:	616b      	str	r3, [r5, #20]
 800ad06:	2300      	movs	r3, #0
 800ad08:	9309      	str	r3, [sp, #36]	; 0x24
 800ad0a:	2320      	movs	r3, #32
 800ad0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad10:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad14:	2330      	movs	r3, #48	; 0x30
 800ad16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aebc <_svfiprintf_r+0x1e8>
 800ad1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad1e:	f04f 0901 	mov.w	r9, #1
 800ad22:	4623      	mov	r3, r4
 800ad24:	469a      	mov	sl, r3
 800ad26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad2a:	b10a      	cbz	r2, 800ad30 <_svfiprintf_r+0x5c>
 800ad2c:	2a25      	cmp	r2, #37	; 0x25
 800ad2e:	d1f9      	bne.n	800ad24 <_svfiprintf_r+0x50>
 800ad30:	ebba 0b04 	subs.w	fp, sl, r4
 800ad34:	d00b      	beq.n	800ad4e <_svfiprintf_r+0x7a>
 800ad36:	465b      	mov	r3, fp
 800ad38:	4622      	mov	r2, r4
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	4638      	mov	r0, r7
 800ad3e:	f7ff ff6f 	bl	800ac20 <__ssputs_r>
 800ad42:	3001      	adds	r0, #1
 800ad44:	f000 80a9 	beq.w	800ae9a <_svfiprintf_r+0x1c6>
 800ad48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad4a:	445a      	add	r2, fp
 800ad4c:	9209      	str	r2, [sp, #36]	; 0x24
 800ad4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f000 80a1 	beq.w	800ae9a <_svfiprintf_r+0x1c6>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad62:	f10a 0a01 	add.w	sl, sl, #1
 800ad66:	9304      	str	r3, [sp, #16]
 800ad68:	9307      	str	r3, [sp, #28]
 800ad6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad6e:	931a      	str	r3, [sp, #104]	; 0x68
 800ad70:	4654      	mov	r4, sl
 800ad72:	2205      	movs	r2, #5
 800ad74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad78:	4850      	ldr	r0, [pc, #320]	; (800aebc <_svfiprintf_r+0x1e8>)
 800ad7a:	f7f5 fac1 	bl	8000300 <memchr>
 800ad7e:	9a04      	ldr	r2, [sp, #16]
 800ad80:	b9d8      	cbnz	r0, 800adba <_svfiprintf_r+0xe6>
 800ad82:	06d0      	lsls	r0, r2, #27
 800ad84:	bf44      	itt	mi
 800ad86:	2320      	movmi	r3, #32
 800ad88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad8c:	0711      	lsls	r1, r2, #28
 800ad8e:	bf44      	itt	mi
 800ad90:	232b      	movmi	r3, #43	; 0x2b
 800ad92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad96:	f89a 3000 	ldrb.w	r3, [sl]
 800ad9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ad9c:	d015      	beq.n	800adca <_svfiprintf_r+0xf6>
 800ad9e:	9a07      	ldr	r2, [sp, #28]
 800ada0:	4654      	mov	r4, sl
 800ada2:	2000      	movs	r0, #0
 800ada4:	f04f 0c0a 	mov.w	ip, #10
 800ada8:	4621      	mov	r1, r4
 800adaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adae:	3b30      	subs	r3, #48	; 0x30
 800adb0:	2b09      	cmp	r3, #9
 800adb2:	d94d      	bls.n	800ae50 <_svfiprintf_r+0x17c>
 800adb4:	b1b0      	cbz	r0, 800ade4 <_svfiprintf_r+0x110>
 800adb6:	9207      	str	r2, [sp, #28]
 800adb8:	e014      	b.n	800ade4 <_svfiprintf_r+0x110>
 800adba:	eba0 0308 	sub.w	r3, r0, r8
 800adbe:	fa09 f303 	lsl.w	r3, r9, r3
 800adc2:	4313      	orrs	r3, r2
 800adc4:	9304      	str	r3, [sp, #16]
 800adc6:	46a2      	mov	sl, r4
 800adc8:	e7d2      	b.n	800ad70 <_svfiprintf_r+0x9c>
 800adca:	9b03      	ldr	r3, [sp, #12]
 800adcc:	1d19      	adds	r1, r3, #4
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	9103      	str	r1, [sp, #12]
 800add2:	2b00      	cmp	r3, #0
 800add4:	bfbb      	ittet	lt
 800add6:	425b      	neglt	r3, r3
 800add8:	f042 0202 	orrlt.w	r2, r2, #2
 800addc:	9307      	strge	r3, [sp, #28]
 800adde:	9307      	strlt	r3, [sp, #28]
 800ade0:	bfb8      	it	lt
 800ade2:	9204      	strlt	r2, [sp, #16]
 800ade4:	7823      	ldrb	r3, [r4, #0]
 800ade6:	2b2e      	cmp	r3, #46	; 0x2e
 800ade8:	d10c      	bne.n	800ae04 <_svfiprintf_r+0x130>
 800adea:	7863      	ldrb	r3, [r4, #1]
 800adec:	2b2a      	cmp	r3, #42	; 0x2a
 800adee:	d134      	bne.n	800ae5a <_svfiprintf_r+0x186>
 800adf0:	9b03      	ldr	r3, [sp, #12]
 800adf2:	1d1a      	adds	r2, r3, #4
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	9203      	str	r2, [sp, #12]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	bfb8      	it	lt
 800adfc:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae00:	3402      	adds	r4, #2
 800ae02:	9305      	str	r3, [sp, #20]
 800ae04:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800aecc <_svfiprintf_r+0x1f8>
 800ae08:	7821      	ldrb	r1, [r4, #0]
 800ae0a:	2203      	movs	r2, #3
 800ae0c:	4650      	mov	r0, sl
 800ae0e:	f7f5 fa77 	bl	8000300 <memchr>
 800ae12:	b138      	cbz	r0, 800ae24 <_svfiprintf_r+0x150>
 800ae14:	9b04      	ldr	r3, [sp, #16]
 800ae16:	eba0 000a 	sub.w	r0, r0, sl
 800ae1a:	2240      	movs	r2, #64	; 0x40
 800ae1c:	4082      	lsls	r2, r0
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	3401      	adds	r4, #1
 800ae22:	9304      	str	r3, [sp, #16]
 800ae24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae28:	4825      	ldr	r0, [pc, #148]	; (800aec0 <_svfiprintf_r+0x1ec>)
 800ae2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae2e:	2206      	movs	r2, #6
 800ae30:	f7f5 fa66 	bl	8000300 <memchr>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	d038      	beq.n	800aeaa <_svfiprintf_r+0x1d6>
 800ae38:	4b22      	ldr	r3, [pc, #136]	; (800aec4 <_svfiprintf_r+0x1f0>)
 800ae3a:	bb1b      	cbnz	r3, 800ae84 <_svfiprintf_r+0x1b0>
 800ae3c:	9b03      	ldr	r3, [sp, #12]
 800ae3e:	3307      	adds	r3, #7
 800ae40:	f023 0307 	bic.w	r3, r3, #7
 800ae44:	3308      	adds	r3, #8
 800ae46:	9303      	str	r3, [sp, #12]
 800ae48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae4a:	4433      	add	r3, r6
 800ae4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae4e:	e768      	b.n	800ad22 <_svfiprintf_r+0x4e>
 800ae50:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae54:	460c      	mov	r4, r1
 800ae56:	2001      	movs	r0, #1
 800ae58:	e7a6      	b.n	800ada8 <_svfiprintf_r+0xd4>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	3401      	adds	r4, #1
 800ae5e:	9305      	str	r3, [sp, #20]
 800ae60:	4619      	mov	r1, r3
 800ae62:	f04f 0c0a 	mov.w	ip, #10
 800ae66:	4620      	mov	r0, r4
 800ae68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae6c:	3a30      	subs	r2, #48	; 0x30
 800ae6e:	2a09      	cmp	r2, #9
 800ae70:	d903      	bls.n	800ae7a <_svfiprintf_r+0x1a6>
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d0c6      	beq.n	800ae04 <_svfiprintf_r+0x130>
 800ae76:	9105      	str	r1, [sp, #20]
 800ae78:	e7c4      	b.n	800ae04 <_svfiprintf_r+0x130>
 800ae7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae7e:	4604      	mov	r4, r0
 800ae80:	2301      	movs	r3, #1
 800ae82:	e7f0      	b.n	800ae66 <_svfiprintf_r+0x192>
 800ae84:	ab03      	add	r3, sp, #12
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	462a      	mov	r2, r5
 800ae8a:	4b0f      	ldr	r3, [pc, #60]	; (800aec8 <_svfiprintf_r+0x1f4>)
 800ae8c:	a904      	add	r1, sp, #16
 800ae8e:	4638      	mov	r0, r7
 800ae90:	f3af 8000 	nop.w
 800ae94:	1c42      	adds	r2, r0, #1
 800ae96:	4606      	mov	r6, r0
 800ae98:	d1d6      	bne.n	800ae48 <_svfiprintf_r+0x174>
 800ae9a:	89ab      	ldrh	r3, [r5, #12]
 800ae9c:	065b      	lsls	r3, r3, #25
 800ae9e:	f53f af2d 	bmi.w	800acfc <_svfiprintf_r+0x28>
 800aea2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aea4:	b01d      	add	sp, #116	; 0x74
 800aea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeaa:	ab03      	add	r3, sp, #12
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	462a      	mov	r2, r5
 800aeb0:	4b05      	ldr	r3, [pc, #20]	; (800aec8 <_svfiprintf_r+0x1f4>)
 800aeb2:	a904      	add	r1, sp, #16
 800aeb4:	4638      	mov	r0, r7
 800aeb6:	f000 f879 	bl	800afac <_printf_i>
 800aeba:	e7eb      	b.n	800ae94 <_svfiprintf_r+0x1c0>
 800aebc:	0800b324 	.word	0x0800b324
 800aec0:	0800b32e 	.word	0x0800b32e
 800aec4:	00000000 	.word	0x00000000
 800aec8:	0800ac21 	.word	0x0800ac21
 800aecc:	0800b32a 	.word	0x0800b32a

0800aed0 <_printf_common>:
 800aed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aed4:	4616      	mov	r6, r2
 800aed6:	4699      	mov	r9, r3
 800aed8:	688a      	ldr	r2, [r1, #8]
 800aeda:	690b      	ldr	r3, [r1, #16]
 800aedc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aee0:	4293      	cmp	r3, r2
 800aee2:	bfb8      	it	lt
 800aee4:	4613      	movlt	r3, r2
 800aee6:	6033      	str	r3, [r6, #0]
 800aee8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aeec:	4607      	mov	r7, r0
 800aeee:	460c      	mov	r4, r1
 800aef0:	b10a      	cbz	r2, 800aef6 <_printf_common+0x26>
 800aef2:	3301      	adds	r3, #1
 800aef4:	6033      	str	r3, [r6, #0]
 800aef6:	6823      	ldr	r3, [r4, #0]
 800aef8:	0699      	lsls	r1, r3, #26
 800aefa:	bf42      	ittt	mi
 800aefc:	6833      	ldrmi	r3, [r6, #0]
 800aefe:	3302      	addmi	r3, #2
 800af00:	6033      	strmi	r3, [r6, #0]
 800af02:	6825      	ldr	r5, [r4, #0]
 800af04:	f015 0506 	ands.w	r5, r5, #6
 800af08:	d106      	bne.n	800af18 <_printf_common+0x48>
 800af0a:	f104 0a19 	add.w	sl, r4, #25
 800af0e:	68e3      	ldr	r3, [r4, #12]
 800af10:	6832      	ldr	r2, [r6, #0]
 800af12:	1a9b      	subs	r3, r3, r2
 800af14:	42ab      	cmp	r3, r5
 800af16:	dc26      	bgt.n	800af66 <_printf_common+0x96>
 800af18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af1c:	1e13      	subs	r3, r2, #0
 800af1e:	6822      	ldr	r2, [r4, #0]
 800af20:	bf18      	it	ne
 800af22:	2301      	movne	r3, #1
 800af24:	0692      	lsls	r2, r2, #26
 800af26:	d42b      	bmi.n	800af80 <_printf_common+0xb0>
 800af28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af2c:	4649      	mov	r1, r9
 800af2e:	4638      	mov	r0, r7
 800af30:	47c0      	blx	r8
 800af32:	3001      	adds	r0, #1
 800af34:	d01e      	beq.n	800af74 <_printf_common+0xa4>
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	6922      	ldr	r2, [r4, #16]
 800af3a:	f003 0306 	and.w	r3, r3, #6
 800af3e:	2b04      	cmp	r3, #4
 800af40:	bf02      	ittt	eq
 800af42:	68e5      	ldreq	r5, [r4, #12]
 800af44:	6833      	ldreq	r3, [r6, #0]
 800af46:	1aed      	subeq	r5, r5, r3
 800af48:	68a3      	ldr	r3, [r4, #8]
 800af4a:	bf0c      	ite	eq
 800af4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af50:	2500      	movne	r5, #0
 800af52:	4293      	cmp	r3, r2
 800af54:	bfc4      	itt	gt
 800af56:	1a9b      	subgt	r3, r3, r2
 800af58:	18ed      	addgt	r5, r5, r3
 800af5a:	2600      	movs	r6, #0
 800af5c:	341a      	adds	r4, #26
 800af5e:	42b5      	cmp	r5, r6
 800af60:	d11a      	bne.n	800af98 <_printf_common+0xc8>
 800af62:	2000      	movs	r0, #0
 800af64:	e008      	b.n	800af78 <_printf_common+0xa8>
 800af66:	2301      	movs	r3, #1
 800af68:	4652      	mov	r2, sl
 800af6a:	4649      	mov	r1, r9
 800af6c:	4638      	mov	r0, r7
 800af6e:	47c0      	blx	r8
 800af70:	3001      	adds	r0, #1
 800af72:	d103      	bne.n	800af7c <_printf_common+0xac>
 800af74:	f04f 30ff 	mov.w	r0, #4294967295
 800af78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af7c:	3501      	adds	r5, #1
 800af7e:	e7c6      	b.n	800af0e <_printf_common+0x3e>
 800af80:	18e1      	adds	r1, r4, r3
 800af82:	1c5a      	adds	r2, r3, #1
 800af84:	2030      	movs	r0, #48	; 0x30
 800af86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af8a:	4422      	add	r2, r4
 800af8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af94:	3302      	adds	r3, #2
 800af96:	e7c7      	b.n	800af28 <_printf_common+0x58>
 800af98:	2301      	movs	r3, #1
 800af9a:	4622      	mov	r2, r4
 800af9c:	4649      	mov	r1, r9
 800af9e:	4638      	mov	r0, r7
 800afa0:	47c0      	blx	r8
 800afa2:	3001      	adds	r0, #1
 800afa4:	d0e6      	beq.n	800af74 <_printf_common+0xa4>
 800afa6:	3601      	adds	r6, #1
 800afa8:	e7d9      	b.n	800af5e <_printf_common+0x8e>
	...

0800afac <_printf_i>:
 800afac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afb0:	7e0f      	ldrb	r7, [r1, #24]
 800afb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800afb4:	2f78      	cmp	r7, #120	; 0x78
 800afb6:	4691      	mov	r9, r2
 800afb8:	4680      	mov	r8, r0
 800afba:	460c      	mov	r4, r1
 800afbc:	469a      	mov	sl, r3
 800afbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800afc2:	d807      	bhi.n	800afd4 <_printf_i+0x28>
 800afc4:	2f62      	cmp	r7, #98	; 0x62
 800afc6:	d80a      	bhi.n	800afde <_printf_i+0x32>
 800afc8:	2f00      	cmp	r7, #0
 800afca:	f000 80d4 	beq.w	800b176 <_printf_i+0x1ca>
 800afce:	2f58      	cmp	r7, #88	; 0x58
 800afd0:	f000 80c0 	beq.w	800b154 <_printf_i+0x1a8>
 800afd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800afdc:	e03a      	b.n	800b054 <_printf_i+0xa8>
 800afde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800afe2:	2b15      	cmp	r3, #21
 800afe4:	d8f6      	bhi.n	800afd4 <_printf_i+0x28>
 800afe6:	a101      	add	r1, pc, #4	; (adr r1, 800afec <_printf_i+0x40>)
 800afe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afec:	0800b045 	.word	0x0800b045
 800aff0:	0800b059 	.word	0x0800b059
 800aff4:	0800afd5 	.word	0x0800afd5
 800aff8:	0800afd5 	.word	0x0800afd5
 800affc:	0800afd5 	.word	0x0800afd5
 800b000:	0800afd5 	.word	0x0800afd5
 800b004:	0800b059 	.word	0x0800b059
 800b008:	0800afd5 	.word	0x0800afd5
 800b00c:	0800afd5 	.word	0x0800afd5
 800b010:	0800afd5 	.word	0x0800afd5
 800b014:	0800afd5 	.word	0x0800afd5
 800b018:	0800b15d 	.word	0x0800b15d
 800b01c:	0800b085 	.word	0x0800b085
 800b020:	0800b117 	.word	0x0800b117
 800b024:	0800afd5 	.word	0x0800afd5
 800b028:	0800afd5 	.word	0x0800afd5
 800b02c:	0800b17f 	.word	0x0800b17f
 800b030:	0800afd5 	.word	0x0800afd5
 800b034:	0800b085 	.word	0x0800b085
 800b038:	0800afd5 	.word	0x0800afd5
 800b03c:	0800afd5 	.word	0x0800afd5
 800b040:	0800b11f 	.word	0x0800b11f
 800b044:	682b      	ldr	r3, [r5, #0]
 800b046:	1d1a      	adds	r2, r3, #4
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	602a      	str	r2, [r5, #0]
 800b04c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b054:	2301      	movs	r3, #1
 800b056:	e09f      	b.n	800b198 <_printf_i+0x1ec>
 800b058:	6820      	ldr	r0, [r4, #0]
 800b05a:	682b      	ldr	r3, [r5, #0]
 800b05c:	0607      	lsls	r7, r0, #24
 800b05e:	f103 0104 	add.w	r1, r3, #4
 800b062:	6029      	str	r1, [r5, #0]
 800b064:	d501      	bpl.n	800b06a <_printf_i+0xbe>
 800b066:	681e      	ldr	r6, [r3, #0]
 800b068:	e003      	b.n	800b072 <_printf_i+0xc6>
 800b06a:	0646      	lsls	r6, r0, #25
 800b06c:	d5fb      	bpl.n	800b066 <_printf_i+0xba>
 800b06e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b072:	2e00      	cmp	r6, #0
 800b074:	da03      	bge.n	800b07e <_printf_i+0xd2>
 800b076:	232d      	movs	r3, #45	; 0x2d
 800b078:	4276      	negs	r6, r6
 800b07a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b07e:	485a      	ldr	r0, [pc, #360]	; (800b1e8 <_printf_i+0x23c>)
 800b080:	230a      	movs	r3, #10
 800b082:	e012      	b.n	800b0aa <_printf_i+0xfe>
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	6820      	ldr	r0, [r4, #0]
 800b088:	1d19      	adds	r1, r3, #4
 800b08a:	6029      	str	r1, [r5, #0]
 800b08c:	0605      	lsls	r5, r0, #24
 800b08e:	d501      	bpl.n	800b094 <_printf_i+0xe8>
 800b090:	681e      	ldr	r6, [r3, #0]
 800b092:	e002      	b.n	800b09a <_printf_i+0xee>
 800b094:	0641      	lsls	r1, r0, #25
 800b096:	d5fb      	bpl.n	800b090 <_printf_i+0xe4>
 800b098:	881e      	ldrh	r6, [r3, #0]
 800b09a:	4853      	ldr	r0, [pc, #332]	; (800b1e8 <_printf_i+0x23c>)
 800b09c:	2f6f      	cmp	r7, #111	; 0x6f
 800b09e:	bf0c      	ite	eq
 800b0a0:	2308      	moveq	r3, #8
 800b0a2:	230a      	movne	r3, #10
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0aa:	6865      	ldr	r5, [r4, #4]
 800b0ac:	60a5      	str	r5, [r4, #8]
 800b0ae:	2d00      	cmp	r5, #0
 800b0b0:	bfa2      	ittt	ge
 800b0b2:	6821      	ldrge	r1, [r4, #0]
 800b0b4:	f021 0104 	bicge.w	r1, r1, #4
 800b0b8:	6021      	strge	r1, [r4, #0]
 800b0ba:	b90e      	cbnz	r6, 800b0c0 <_printf_i+0x114>
 800b0bc:	2d00      	cmp	r5, #0
 800b0be:	d04b      	beq.n	800b158 <_printf_i+0x1ac>
 800b0c0:	4615      	mov	r5, r2
 800b0c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b0c6:	fb03 6711 	mls	r7, r3, r1, r6
 800b0ca:	5dc7      	ldrb	r7, [r0, r7]
 800b0cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b0d0:	4637      	mov	r7, r6
 800b0d2:	42bb      	cmp	r3, r7
 800b0d4:	460e      	mov	r6, r1
 800b0d6:	d9f4      	bls.n	800b0c2 <_printf_i+0x116>
 800b0d8:	2b08      	cmp	r3, #8
 800b0da:	d10b      	bne.n	800b0f4 <_printf_i+0x148>
 800b0dc:	6823      	ldr	r3, [r4, #0]
 800b0de:	07de      	lsls	r6, r3, #31
 800b0e0:	d508      	bpl.n	800b0f4 <_printf_i+0x148>
 800b0e2:	6923      	ldr	r3, [r4, #16]
 800b0e4:	6861      	ldr	r1, [r4, #4]
 800b0e6:	4299      	cmp	r1, r3
 800b0e8:	bfde      	ittt	le
 800b0ea:	2330      	movle	r3, #48	; 0x30
 800b0ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b0f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b0f4:	1b52      	subs	r2, r2, r5
 800b0f6:	6122      	str	r2, [r4, #16]
 800b0f8:	f8cd a000 	str.w	sl, [sp]
 800b0fc:	464b      	mov	r3, r9
 800b0fe:	aa03      	add	r2, sp, #12
 800b100:	4621      	mov	r1, r4
 800b102:	4640      	mov	r0, r8
 800b104:	f7ff fee4 	bl	800aed0 <_printf_common>
 800b108:	3001      	adds	r0, #1
 800b10a:	d14a      	bne.n	800b1a2 <_printf_i+0x1f6>
 800b10c:	f04f 30ff 	mov.w	r0, #4294967295
 800b110:	b004      	add	sp, #16
 800b112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b116:	6823      	ldr	r3, [r4, #0]
 800b118:	f043 0320 	orr.w	r3, r3, #32
 800b11c:	6023      	str	r3, [r4, #0]
 800b11e:	4833      	ldr	r0, [pc, #204]	; (800b1ec <_printf_i+0x240>)
 800b120:	2778      	movs	r7, #120	; 0x78
 800b122:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b126:	6823      	ldr	r3, [r4, #0]
 800b128:	6829      	ldr	r1, [r5, #0]
 800b12a:	061f      	lsls	r7, r3, #24
 800b12c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b130:	d402      	bmi.n	800b138 <_printf_i+0x18c>
 800b132:	065f      	lsls	r7, r3, #25
 800b134:	bf48      	it	mi
 800b136:	b2b6      	uxthmi	r6, r6
 800b138:	07df      	lsls	r7, r3, #31
 800b13a:	bf48      	it	mi
 800b13c:	f043 0320 	orrmi.w	r3, r3, #32
 800b140:	6029      	str	r1, [r5, #0]
 800b142:	bf48      	it	mi
 800b144:	6023      	strmi	r3, [r4, #0]
 800b146:	b91e      	cbnz	r6, 800b150 <_printf_i+0x1a4>
 800b148:	6823      	ldr	r3, [r4, #0]
 800b14a:	f023 0320 	bic.w	r3, r3, #32
 800b14e:	6023      	str	r3, [r4, #0]
 800b150:	2310      	movs	r3, #16
 800b152:	e7a7      	b.n	800b0a4 <_printf_i+0xf8>
 800b154:	4824      	ldr	r0, [pc, #144]	; (800b1e8 <_printf_i+0x23c>)
 800b156:	e7e4      	b.n	800b122 <_printf_i+0x176>
 800b158:	4615      	mov	r5, r2
 800b15a:	e7bd      	b.n	800b0d8 <_printf_i+0x12c>
 800b15c:	682b      	ldr	r3, [r5, #0]
 800b15e:	6826      	ldr	r6, [r4, #0]
 800b160:	6961      	ldr	r1, [r4, #20]
 800b162:	1d18      	adds	r0, r3, #4
 800b164:	6028      	str	r0, [r5, #0]
 800b166:	0635      	lsls	r5, r6, #24
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	d501      	bpl.n	800b170 <_printf_i+0x1c4>
 800b16c:	6019      	str	r1, [r3, #0]
 800b16e:	e002      	b.n	800b176 <_printf_i+0x1ca>
 800b170:	0670      	lsls	r0, r6, #25
 800b172:	d5fb      	bpl.n	800b16c <_printf_i+0x1c0>
 800b174:	8019      	strh	r1, [r3, #0]
 800b176:	2300      	movs	r3, #0
 800b178:	6123      	str	r3, [r4, #16]
 800b17a:	4615      	mov	r5, r2
 800b17c:	e7bc      	b.n	800b0f8 <_printf_i+0x14c>
 800b17e:	682b      	ldr	r3, [r5, #0]
 800b180:	1d1a      	adds	r2, r3, #4
 800b182:	602a      	str	r2, [r5, #0]
 800b184:	681d      	ldr	r5, [r3, #0]
 800b186:	6862      	ldr	r2, [r4, #4]
 800b188:	2100      	movs	r1, #0
 800b18a:	4628      	mov	r0, r5
 800b18c:	f7f5 f8b8 	bl	8000300 <memchr>
 800b190:	b108      	cbz	r0, 800b196 <_printf_i+0x1ea>
 800b192:	1b40      	subs	r0, r0, r5
 800b194:	6060      	str	r0, [r4, #4]
 800b196:	6863      	ldr	r3, [r4, #4]
 800b198:	6123      	str	r3, [r4, #16]
 800b19a:	2300      	movs	r3, #0
 800b19c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1a0:	e7aa      	b.n	800b0f8 <_printf_i+0x14c>
 800b1a2:	6923      	ldr	r3, [r4, #16]
 800b1a4:	462a      	mov	r2, r5
 800b1a6:	4649      	mov	r1, r9
 800b1a8:	4640      	mov	r0, r8
 800b1aa:	47d0      	blx	sl
 800b1ac:	3001      	adds	r0, #1
 800b1ae:	d0ad      	beq.n	800b10c <_printf_i+0x160>
 800b1b0:	6823      	ldr	r3, [r4, #0]
 800b1b2:	079b      	lsls	r3, r3, #30
 800b1b4:	d413      	bmi.n	800b1de <_printf_i+0x232>
 800b1b6:	68e0      	ldr	r0, [r4, #12]
 800b1b8:	9b03      	ldr	r3, [sp, #12]
 800b1ba:	4298      	cmp	r0, r3
 800b1bc:	bfb8      	it	lt
 800b1be:	4618      	movlt	r0, r3
 800b1c0:	e7a6      	b.n	800b110 <_printf_i+0x164>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	4632      	mov	r2, r6
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	4640      	mov	r0, r8
 800b1ca:	47d0      	blx	sl
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	d09d      	beq.n	800b10c <_printf_i+0x160>
 800b1d0:	3501      	adds	r5, #1
 800b1d2:	68e3      	ldr	r3, [r4, #12]
 800b1d4:	9903      	ldr	r1, [sp, #12]
 800b1d6:	1a5b      	subs	r3, r3, r1
 800b1d8:	42ab      	cmp	r3, r5
 800b1da:	dcf2      	bgt.n	800b1c2 <_printf_i+0x216>
 800b1dc:	e7eb      	b.n	800b1b6 <_printf_i+0x20a>
 800b1de:	2500      	movs	r5, #0
 800b1e0:	f104 0619 	add.w	r6, r4, #25
 800b1e4:	e7f5      	b.n	800b1d2 <_printf_i+0x226>
 800b1e6:	bf00      	nop
 800b1e8:	0800b335 	.word	0x0800b335
 800b1ec:	0800b346 	.word	0x0800b346

0800b1f0 <memmove>:
 800b1f0:	4288      	cmp	r0, r1
 800b1f2:	b510      	push	{r4, lr}
 800b1f4:	eb01 0402 	add.w	r4, r1, r2
 800b1f8:	d902      	bls.n	800b200 <memmove+0x10>
 800b1fa:	4284      	cmp	r4, r0
 800b1fc:	4623      	mov	r3, r4
 800b1fe:	d807      	bhi.n	800b210 <memmove+0x20>
 800b200:	1e43      	subs	r3, r0, #1
 800b202:	42a1      	cmp	r1, r4
 800b204:	d008      	beq.n	800b218 <memmove+0x28>
 800b206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b20a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b20e:	e7f8      	b.n	800b202 <memmove+0x12>
 800b210:	4402      	add	r2, r0
 800b212:	4601      	mov	r1, r0
 800b214:	428a      	cmp	r2, r1
 800b216:	d100      	bne.n	800b21a <memmove+0x2a>
 800b218:	bd10      	pop	{r4, pc}
 800b21a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b21e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b222:	e7f7      	b.n	800b214 <memmove+0x24>

0800b224 <_sbrk_r>:
 800b224:	b538      	push	{r3, r4, r5, lr}
 800b226:	4d06      	ldr	r5, [pc, #24]	; (800b240 <_sbrk_r+0x1c>)
 800b228:	2300      	movs	r3, #0
 800b22a:	4604      	mov	r4, r0
 800b22c:	4608      	mov	r0, r1
 800b22e:	602b      	str	r3, [r5, #0]
 800b230:	f7f6 f9ba 	bl	80015a8 <_sbrk>
 800b234:	1c43      	adds	r3, r0, #1
 800b236:	d102      	bne.n	800b23e <_sbrk_r+0x1a>
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	b103      	cbz	r3, 800b23e <_sbrk_r+0x1a>
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	bd38      	pop	{r3, r4, r5, pc}
 800b240:	2401d88c 	.word	0x2401d88c

0800b244 <memcpy>:
 800b244:	440a      	add	r2, r1
 800b246:	4291      	cmp	r1, r2
 800b248:	f100 33ff 	add.w	r3, r0, #4294967295
 800b24c:	d100      	bne.n	800b250 <memcpy+0xc>
 800b24e:	4770      	bx	lr
 800b250:	b510      	push	{r4, lr}
 800b252:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b256:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b25a:	4291      	cmp	r1, r2
 800b25c:	d1f9      	bne.n	800b252 <memcpy+0xe>
 800b25e:	bd10      	pop	{r4, pc}

0800b260 <_realloc_r>:
 800b260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b264:	4680      	mov	r8, r0
 800b266:	4614      	mov	r4, r2
 800b268:	460e      	mov	r6, r1
 800b26a:	b921      	cbnz	r1, 800b276 <_realloc_r+0x16>
 800b26c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b270:	4611      	mov	r1, r2
 800b272:	f7ff bc49 	b.w	800ab08 <_malloc_r>
 800b276:	b92a      	cbnz	r2, 800b284 <_realloc_r+0x24>
 800b278:	f7ff fbda 	bl	800aa30 <_free_r>
 800b27c:	4625      	mov	r5, r4
 800b27e:	4628      	mov	r0, r5
 800b280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b284:	f000 f81b 	bl	800b2be <_malloc_usable_size_r>
 800b288:	4284      	cmp	r4, r0
 800b28a:	4607      	mov	r7, r0
 800b28c:	d802      	bhi.n	800b294 <_realloc_r+0x34>
 800b28e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b292:	d812      	bhi.n	800b2ba <_realloc_r+0x5a>
 800b294:	4621      	mov	r1, r4
 800b296:	4640      	mov	r0, r8
 800b298:	f7ff fc36 	bl	800ab08 <_malloc_r>
 800b29c:	4605      	mov	r5, r0
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d0ed      	beq.n	800b27e <_realloc_r+0x1e>
 800b2a2:	42bc      	cmp	r4, r7
 800b2a4:	4622      	mov	r2, r4
 800b2a6:	4631      	mov	r1, r6
 800b2a8:	bf28      	it	cs
 800b2aa:	463a      	movcs	r2, r7
 800b2ac:	f7ff ffca 	bl	800b244 <memcpy>
 800b2b0:	4631      	mov	r1, r6
 800b2b2:	4640      	mov	r0, r8
 800b2b4:	f7ff fbbc 	bl	800aa30 <_free_r>
 800b2b8:	e7e1      	b.n	800b27e <_realloc_r+0x1e>
 800b2ba:	4635      	mov	r5, r6
 800b2bc:	e7df      	b.n	800b27e <_realloc_r+0x1e>

0800b2be <_malloc_usable_size_r>:
 800b2be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2c2:	1f18      	subs	r0, r3, #4
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	bfbc      	itt	lt
 800b2c8:	580b      	ldrlt	r3, [r1, r0]
 800b2ca:	18c0      	addlt	r0, r0, r3
 800b2cc:	4770      	bx	lr
	...

0800b2d0 <_init>:
 800b2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2d2:	bf00      	nop
 800b2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2d6:	bc08      	pop	{r3}
 800b2d8:	469e      	mov	lr, r3
 800b2da:	4770      	bx	lr

0800b2dc <_fini>:
 800b2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2de:	bf00      	nop
 800b2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2e2:	bc08      	pop	{r3}
 800b2e4:	469e      	mov	lr, r3
 800b2e6:	4770      	bx	lr
