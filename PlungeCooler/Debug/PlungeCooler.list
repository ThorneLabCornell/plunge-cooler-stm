
PlungeCooler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b758  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800ba08  0800ba08  0001ba08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ba78  0800ba78  0001ba78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ba80  0800ba80  0001ba80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ba84  0800ba84  0001ba84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800ba88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001d8b8  24000070  0800baf4  00020070  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2401d928  0800baf4  0002d928  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001b3bf  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002ef2  00000000  00000000  0003b49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001558  00000000  00000000  0003e390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000010b4  00000000  00000000  0003f8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00032e0c  00000000  00000000  0004099c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001c3da  00000000  00000000  000737a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015430b  00000000  00000000  0008fb82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006174  00000000  00000000  001e3e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001ea004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000070 	.word	0x24000070
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b9f0 	.word	0x0800b9f0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000074 	.word	0x24000074
 80002ec:	0800b9f0 	.word	0x0800b9f0

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <dispense>:
 */
#include "globals.h"
#include "main.h"
#include <stdio.h>

void dispense(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
//	char a[] = "DEPOSITING!!!\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)a, strlen(a), HAL_MAX_DELAY);
	HAL_GPIO_WritePin(DROP_GPIO_Port, DROP_Pin, 1); //Dispense drop
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a8:	480e      	ldr	r0, [pc, #56]	; (80006e4 <dispense+0x48>)
 80006aa:	f003 fe69 	bl	8004380 <HAL_GPIO_WritePin>
	for(int i=0; i<20000; i+=2) i--; 		//pseudo-delay. replace with a short timer setup is ideal
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	e005      	b.n	80006c0 <dispense+0x24>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3302      	adds	r3, #2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80006c6:	4293      	cmp	r3, r2
 80006c8:	ddf4      	ble.n	80006b4 <dispense+0x18>
	HAL_GPIO_WritePin(DROP_GPIO_Port, DROP_Pin, 0); //Dispense drop
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <dispense+0x48>)
 80006d2:	f003 fe55 	bl	8004380 <HAL_GPIO_WritePin>

	DEPOSITED = 1;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <dispense+0x4c>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58021000 	.word	0x58021000
 80006e8:	2401d745 	.word	0x2401d745

080006ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	db0b      	blt.n	8000716 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	f003 021f 	and.w	r2, r3, #31
 8000704:	4907      	ldr	r1, [pc, #28]	; (8000724 <__NVIC_EnableIRQ+0x38>)
 8000706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800070a:	095b      	lsrs	r3, r3, #5
 800070c:	2001      	movs	r0, #1
 800070e:	fa00 f202 	lsl.w	r2, r0, r2
 8000712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000e100 	.word	0xe000e100

08000728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db0a      	blt.n	8000752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	490c      	ldr	r1, [pc, #48]	; (8000774 <__NVIC_SetPriority+0x4c>)
 8000742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	440b      	add	r3, r1
 800074c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000750:	e00a      	b.n	8000768 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4908      	ldr	r1, [pc, #32]	; (8000778 <__NVIC_SetPriority+0x50>)
 8000758:	88fb      	ldrh	r3, [r7, #6]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	3b04      	subs	r3, #4
 8000760:	0112      	lsls	r2, r2, #4
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	440b      	add	r3, r1
 8000766:	761a      	strb	r2, [r3, #24]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <move_tilt_steps>:
uint8_t rx_flag = 0;
int panPos = 0;
int tiltPos = 0;

/*** MOTOR CONTROL FUNCTIONS ***/
void move_tilt_steps(uint32_t delay, uint8_t dir, uint32_t num_steps) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	460b      	mov	r3, r1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(TILT_EN_GPIO_Port, TILT_EN_Pin, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2104      	movs	r1, #4
 800078e:	481a      	ldr	r0, [pc, #104]	; (80007f8 <move_tilt_steps+0x7c>)
 8000790:	f003 fdf6 	bl	8004380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TILT_DIR_GPIO_Port, TILT_DIR_Pin, dir);
 8000794:	7afb      	ldrb	r3, [r7, #11]
 8000796:	461a      	mov	r2, r3
 8000798:	2102      	movs	r1, #2
 800079a:	4818      	ldr	r0, [pc, #96]	; (80007fc <move_tilt_steps+0x80>)
 800079c:	f003 fdf0 	bl	8004380 <HAL_GPIO_WritePin>
	for(int i=0; i<num_steps; i++) {
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e012      	b.n	80007cc <move_tilt_steps+0x50>
		HAL_GPIO_WritePin(TILT_STP_GPIO_Port, TILT_STP_Pin, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	2108      	movs	r1, #8
 80007aa:	4813      	ldr	r0, [pc, #76]	; (80007f8 <move_tilt_steps+0x7c>)
 80007ac:	f003 fde8 	bl	8004380 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 80007b0:	68f8      	ldr	r0, [r7, #12]
 80007b2:	f001 fbcf 	bl	8001f54 <HAL_Delay>
		HAL_GPIO_WritePin(TILT_STP_GPIO_Port, TILT_STP_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2108      	movs	r1, #8
 80007ba:	480f      	ldr	r0, [pc, #60]	; (80007f8 <move_tilt_steps+0x7c>)
 80007bc:	f003 fde0 	bl	8004380 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 80007c0:	68f8      	ldr	r0, [r7, #12]
 80007c2:	f001 fbc7 	bl	8001f54 <HAL_Delay>
	for(int i=0; i<num_steps; i++) {
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	3301      	adds	r3, #1
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d8e8      	bhi.n	80007a6 <move_tilt_steps+0x2a>

	}
//	char b[] = "done steps\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

	tiltPos += num_steps * (1 - 2 * dir); // + if dir is 0, else -
 80007d4:	7afb      	ldrb	r3, [r7, #11]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	f1c3 0301 	rsb	r3, r3, #1
 80007dc:	461a      	mov	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	fb02 f303 	mul.w	r3, r2, r3
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <move_tilt_steps+0x84>)
 80007e6:	6812      	ldr	r2, [r2, #0]
 80007e8:	4413      	add	r3, r2
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <move_tilt_steps+0x84>)
 80007ee:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(TILT_EN_GPIO_Port, TILT_EN_Pin, 1);

}
 80007f0:	bf00      	nop
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	58020800 	.word	0x58020800
 80007fc:	58020400 	.word	0x58020400
 8000800:	2401d7bc 	.word	0x2401d7bc

08000804 <move_tilt_deg>:

void move_tilt_deg(uint32_t degrees, uint8_t dir) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
	move_tilt_steps(TILT_DEFAULT_DELAY, dir, degrees*TILT_DEG_TO_STEPS);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 8000816:	fb03 f202 	mul.w	r2, r3, r2
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	4619      	mov	r1, r3
 800081e:	2001      	movs	r0, #1
 8000820:	f7ff ffac 	bl	800077c <move_tilt_steps>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <move_pan_steps>:

void move_pan_steps(uint32_t delay, uint8_t dir, uint32_t num_steps) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	460b      	mov	r3, r1
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(PAN_EN_GPIO_Port, PAN_EN_Pin, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2101      	movs	r1, #1
 800083e:	481b      	ldr	r0, [pc, #108]	; (80008ac <move_pan_steps+0x80>)
 8000840:	f003 fd9e 	bl	8004380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PAN_DIR_GPIO_Port, PAN_DIR_Pin, dir);
 8000844:	7afb      	ldrb	r3, [r7, #11]
 8000846:	461a      	mov	r2, r3
 8000848:	2108      	movs	r1, #8
 800084a:	4819      	ldr	r0, [pc, #100]	; (80008b0 <move_pan_steps+0x84>)
 800084c:	f003 fd98 	bl	8004380 <HAL_GPIO_WritePin>
	for(int i=0; i<num_steps; i++) {
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e014      	b.n	8000880 <move_pan_steps+0x54>
		HAL_GPIO_WritePin(PAN_STP_GPIO_Port, PAN_STP_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800085c:	4815      	ldr	r0, [pc, #84]	; (80008b4 <move_pan_steps+0x88>)
 800085e:	f003 fd8f 	bl	8004380 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f001 fb76 	bl	8001f54 <HAL_Delay>
		HAL_GPIO_WritePin(PAN_STP_GPIO_Port, PAN_STP_Pin, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800086e:	4811      	ldr	r0, [pc, #68]	; (80008b4 <move_pan_steps+0x88>)
 8000870:	f003 fd86 	bl	8004380 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f001 fb6d 	bl	8001f54 <HAL_Delay>
	for(int i=0; i<num_steps; i++) {
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	429a      	cmp	r2, r3
 8000886:	d8e6      	bhi.n	8000856 <move_pan_steps+0x2a>
	}
//	char b[] = "done steps\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

	panPos += num_steps * (1 - 2 * dir); // + if dir is 0, else -
 8000888:	7afb      	ldrb	r3, [r7, #11]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	f1c3 0301 	rsb	r3, r3, #1
 8000890:	461a      	mov	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	fb02 f303 	mul.w	r3, r2, r3
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <move_pan_steps+0x8c>)
 800089a:	6812      	ldr	r2, [r2, #0]
 800089c:	4413      	add	r3, r2
 800089e:	461a      	mov	r2, r3
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <move_pan_steps+0x8c>)
 80008a2:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(PAN_EN_GPIO_Port, PAN_EN_Pin, 1);

}
 80008a4:	bf00      	nop
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	58020800 	.word	0x58020800
 80008b0:	58020000 	.word	0x58020000
 80008b4:	58021400 	.word	0x58021400
 80008b8:	2401d7b8 	.word	0x2401d7b8

080008bc <move_pan_deg>:

void move_pan_deg(uint32_t degrees, uint8_t dir) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
	move_pan_steps(PAN_DEFAULT_DELAY, dir, degrees*PAN_DEG_TO_STEPS);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 80008ce:	fb03 f202 	mul.w	r2, r3, r2
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	4619      	mov	r1, r3
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff ffa8 	bl	800082c <move_pan_steps>
	char pos[30];
//	sprintf(pos, "panPos: %d\r\n", panPos);
//	HAL_UART_Transmit(&huart3, (uint8_t*)pos, strlen(pos), HAL_MAX_DELAY);

}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ack>:
void start_plunge(void) {

}

/*** USART Rx HANDLE ***/
void ack(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart3, tx_ack, 3, HAL_MAX_DELAY);
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	2203      	movs	r2, #3
 80008ee:	4903      	ldr	r1, [pc, #12]	; (80008fc <ack+0x18>)
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <ack+0x1c>)
 80008f2:	f007 fefd 	bl	80086f0 <HAL_UART_Transmit>
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	24000004 	.word	0x24000004
 8000900:	240001d4 	.word	0x240001d4

08000904 <bad>:

void bad(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, tx_bad, 3, HAL_MAX_DELAY);
 8000908:	f04f 33ff 	mov.w	r3, #4294967295
 800090c:	2203      	movs	r2, #3
 800090e:	4903      	ldr	r1, [pc, #12]	; (800091c <bad+0x18>)
 8000910:	4803      	ldr	r0, [pc, #12]	; (8000920 <bad+0x1c>)
 8000912:	f007 feed 	bl	80086f0 <HAL_UART_Transmit>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	24000008 	.word	0x24000008
 8000920:	240001d4 	.word	0x240001d4

08000924 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    rxBuffer[rxIndex] = received_character[0];
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_UART_RxCpltCallback+0x54>)
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_UART_RxCpltCallback+0x58>)
 8000934:	7819      	ldrb	r1, [r3, #0]
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_UART_RxCpltCallback+0x5c>)
 8000938:	5499      	strb	r1, [r3, r2]
	rxIndex++;
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_UART_RxCpltCallback+0x54>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	3301      	adds	r3, #1
 8000940:	b29a      	uxth	r2, r3
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_UART_RxCpltCallback+0x54>)
 8000944:	801a      	strh	r2, [r3, #0]

	if (received_character[0] == '\n' || received_character[0] == '\r') {
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_UART_RxCpltCallback+0x58>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b0a      	cmp	r3, #10
 800094c:	d003      	beq.n	8000956 <HAL_UART_RxCpltCallback+0x32>
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_UART_RxCpltCallback+0x58>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b0d      	cmp	r3, #13
 8000954:	d106      	bne.n	8000964 <HAL_UART_RxCpltCallback+0x40>
    	rxIndex = 0;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_UART_RxCpltCallback+0x54>)
 8000958:	2200      	movs	r2, #0
 800095a:	801a      	strh	r2, [r3, #0]
    	rx_flag = 1;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_UART_RxCpltCallback+0x60>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e005      	b.n	8000970 <HAL_UART_RxCpltCallback+0x4c>
    } else {
        HAL_UART_Receive_IT(&huart3, received_character, 1);
 8000964:	2201      	movs	r2, #1
 8000966:	4905      	ldr	r1, [pc, #20]	; (800097c <HAL_UART_RxCpltCallback+0x58>)
 8000968:	4807      	ldr	r0, [pc, #28]	; (8000988 <HAL_UART_RxCpltCallback+0x64>)
 800096a:	f007 ff4f 	bl	800880c <HAL_UART_Receive_IT>
    }
}
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2401d7b0 	.word	0x2401d7b0
 800097c:	2401d7b4 	.word	0x2401d7b4
 8000980:	2401d74c 	.word	0x2401d74c
 8000984:	2401d7b5 	.word	0x2401d7b5
 8000988:	240001d4 	.word	0x240001d4

0800098c <rx_handle>:

void rx_handle(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b0a0      	sub	sp, #128	; 0x80
 8000990:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, val);
 8000992:	4b5a      	ldr	r3, [pc, #360]	; (8000afc <rx_handle+0x170>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	2102      	movs	r1, #2
 800099a:	4859      	ldr	r0, [pc, #356]	; (8000b00 <rx_handle+0x174>)
 800099c:	f003 fcf0 	bl	8004380 <HAL_GPIO_WritePin>
	if(val)
 80009a0:	4b56      	ldr	r3, [pc, #344]	; (8000afc <rx_handle+0x170>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d003      	beq.n	80009b0 <rx_handle+0x24>
		val = 0;
 80009a8:	4b54      	ldr	r3, [pc, #336]	; (8000afc <rx_handle+0x170>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	e002      	b.n	80009b6 <rx_handle+0x2a>
	else
		val = 1;
 80009b0:	4b52      	ldr	r3, [pc, #328]	; (8000afc <rx_handle+0x170>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
	//sprintf(num, "RX0: %d\r\n", rxBuffer[0]);
	//HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);
	switch(rxBuffer[0]) {
 80009b6:	4b53      	ldr	r3, [pc, #332]	; (8000b04 <rx_handle+0x178>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	3b31      	subs	r3, #49	; 0x31
 80009bc:	2b05      	cmp	r3, #5
 80009be:	f200 8193 	bhi.w	8000ce8 <rx_handle+0x35c>
 80009c2:	a201      	add	r2, pc, #4	; (adr r2, 80009c8 <rx_handle+0x3c>)
 80009c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c8:	080009e1 	.word	0x080009e1
 80009cc:	08000a89 	.word	0x08000a89
 80009d0:	08000ce9 	.word	0x08000ce9
 80009d4:	08000ca1 	.word	0x08000ca1
 80009d8:	08000cbb 	.word	0x08000cbb
 80009dc:	08000cd5 	.word	0x08000cd5
    	case MOVE: ;
    		uint32_t amount = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	67fb      	str	r3, [r7, #124]	; 0x7c
			for(int i=2; i<=4; i++) {
 80009e4:	2302      	movs	r3, #2
 80009e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80009e8:	e01b      	b.n	8000a22 <rx_handle+0x96>
				 char digit = rxBuffer[i];
 80009ea:	4a46      	ldr	r2, [pc, #280]	; (8000b04 <rx_handle+0x178>)
 80009ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80009ee:	4413      	add	r3, r2
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
				 if (digit >= '0' && digit <= '9') {
 80009f6:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80009fa:	2b2f      	cmp	r3, #47	; 0x2f
 80009fc:	d90e      	bls.n	8000a1c <rx_handle+0x90>
 80009fe:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000a02:	2b39      	cmp	r3, #57	; 0x39
 8000a04:	d80a      	bhi.n	8000a1c <rx_handle+0x90>
					 amount = (amount * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 8000a06:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000a08:	4613      	mov	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	461a      	mov	r2, r3
 8000a12:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000a16:	4413      	add	r3, r2
 8000a18:	3b30      	subs	r3, #48	; 0x30
 8000a1a:	67fb      	str	r3, [r7, #124]	; 0x7c
			for(int i=2; i<=4; i++) {
 8000a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a1e:	3301      	adds	r3, #1
 8000a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8000a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	dde0      	ble.n	80009ea <rx_handle+0x5e>

			char response[100];
//			sprintf(response, "%c%c received this amount: %d\r\n", (int)rxBuffer[0], (int)rxBuffer[1], (int)amount);
//			HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);

			switch(rxBuffer[1]) {
 8000a28:	4b36      	ldr	r3, [pc, #216]	; (8000b04 <rx_handle+0x178>)
 8000a2a:	785b      	ldrb	r3, [r3, #1]
 8000a2c:	3b31      	subs	r3, #49	; 0x31
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d826      	bhi.n	8000a80 <rx_handle+0xf4>
 8000a32:	a201      	add	r2, pc, #4	; (adr r2, 8000a38 <rx_handle+0xac>)
 8000a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a38:	08000a49 	.word	0x08000a49
 8000a3c:	08000a57 	.word	0x08000a57
 8000a40:	08000a65 	.word	0x08000a65
 8000a44:	08000a73 	.word	0x08000a73
				case UP: ;
					move_tilt_deg(amount, DIR_TILT_UP);
 8000a48:	2101      	movs	r1, #1
 8000a4a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a4c:	f7ff feda 	bl	8000804 <move_tilt_deg>
					ack();
 8000a50:	f7ff ff48 	bl	80008e4 <ack>
					break;
 8000a54:	e017      	b.n	8000a86 <rx_handle+0xfa>
				case DOWN: ;
					move_tilt_deg(amount, DIR_TILT_DOWN);
 8000a56:	2100      	movs	r1, #0
 8000a58:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a5a:	f7ff fed3 	bl	8000804 <move_tilt_deg>
					ack();
 8000a5e:	f7ff ff41 	bl	80008e4 <ack>
					break;
 8000a62:	e010      	b.n	8000a86 <rx_handle+0xfa>
				case LEFT: ;
					move_pan_deg(amount, DIR_PAN_LEFT);
 8000a64:	2101      	movs	r1, #1
 8000a66:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a68:	f7ff ff28 	bl	80008bc <move_pan_deg>
					ack();
 8000a6c:	f7ff ff3a 	bl	80008e4 <ack>
					break;
 8000a70:	e009      	b.n	8000a86 <rx_handle+0xfa>
				case RIGHT: ;
					move_pan_deg(amount, DIR_PAN_RIGHT);
 8000a72:	2100      	movs	r1, #0
 8000a74:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a76:	f7ff ff21 	bl	80008bc <move_pan_deg>
					ack();
 8000a7a:	f7ff ff33 	bl	80008e4 <ack>
					break;
 8000a7e:	e002      	b.n	8000a86 <rx_handle+0xfa>
				default: ;
					bad();
 8000a80:	f7ff ff40 	bl	8000904 <bad>
					break;
 8000a84:	bf00      	nop
			}

			break;
 8000a86:	e12f      	b.n	8000ce8 <rx_handle+0x35c>

		case PLUNGE: ;
			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); //disengage brake
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2140      	movs	r1, #64	; 0x40
 8000a8c:	481e      	ldr	r0, [pc, #120]	; (8000b08 <rx_handle+0x17c>)
 8000a8e:	f003 fc77 	bl	8004380 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	2203      	movs	r2, #3
 8000a98:	491c      	ldr	r1, [pc, #112]	; (8000b0c <rx_handle+0x180>)
 8000a9a:	481d      	ldr	r0, [pc, #116]	; (8000b10 <rx_handle+0x184>)
 8000a9c:	f007 fe28 	bl	80086f0 <HAL_UART_Transmit>

		/* retrieve info */
			plunge_done_flag = 0;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <rx_handle+0x188>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]

			uint32_t brake_pos = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	677b      	str	r3, [r7, #116]	; 0x74
			timepoint_pos = 0;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <rx_handle+0x18c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
			for(int i=1; i<=6; i++) {
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	673b      	str	r3, [r7, #112]	; 0x70
 8000ab4:	e01b      	b.n	8000aee <rx_handle+0x162>
				 char digit = rxBuffer[i];
 8000ab6:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <rx_handle+0x178>)
 8000ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000aba:	4413      	add	r3, r2
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
				 if (digit >= '0' && digit <= '9') {
 8000ac2:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000ac6:	2b2f      	cmp	r3, #47	; 0x2f
 8000ac8:	d90e      	bls.n	8000ae8 <rx_handle+0x15c>
 8000aca:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000ace:	2b39      	cmp	r3, #57	; 0x39
 8000ad0:	d80a      	bhi.n	8000ae8 <rx_handle+0x15c>
					 brake_pos = (brake_pos * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 8000ad2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	461a      	mov	r2, r3
 8000ade:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000ae2:	4413      	add	r3, r2
 8000ae4:	3b30      	subs	r3, #48	; 0x30
 8000ae6:	677b      	str	r3, [r7, #116]	; 0x74
			for(int i=1; i<=6; i++) {
 8000ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000aea:	3301      	adds	r3, #1
 8000aec:	673b      	str	r3, [r7, #112]	; 0x70
 8000aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000af0:	2b06      	cmp	r3, #6
 8000af2:	dde0      	ble.n	8000ab6 <rx_handle+0x12a>
				 }
			}
			for(int i=7; i<=12; i++) {
 8000af4:	2307      	movs	r3, #7
 8000af6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000af8:	e02e      	b.n	8000b58 <rx_handle+0x1cc>
 8000afa:	bf00      	nop
 8000afc:	24000000 	.word	0x24000000
 8000b00:	58021000 	.word	0x58021000
 8000b04:	2401d74c 	.word	0x2401d74c
 8000b08:	58020000 	.word	0x58020000
 8000b0c:	24000004 	.word	0x24000004
 8000b10:	240001d4 	.word	0x240001d4
 8000b14:	2401d744 	.word	0x2401d744
 8000b18:	2401d730 	.word	0x2401d730
				 char digit = rxBuffer[i];
 8000b1c:	4a78      	ldr	r2, [pc, #480]	; (8000d00 <rx_handle+0x374>)
 8000b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b20:	4413      	add	r3, r2
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
				 if (digit >= '0' && digit <= '9') {
 8000b28:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b2c:	2b2f      	cmp	r3, #47	; 0x2f
 8000b2e:	d910      	bls.n	8000b52 <rx_handle+0x1c6>
 8000b30:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b34:	2b39      	cmp	r3, #57	; 0x39
 8000b36:	d80c      	bhi.n	8000b52 <rx_handle+0x1c6>
					 timepoint_pos = (timepoint_pos * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 8000b38:	4b72      	ldr	r3, [pc, #456]	; (8000d04 <rx_handle+0x378>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	461a      	mov	r2, r3
 8000b46:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b4a:	4413      	add	r3, r2
 8000b4c:	3b30      	subs	r3, #48	; 0x30
 8000b4e:	4a6d      	ldr	r2, [pc, #436]	; (8000d04 <rx_handle+0x378>)
 8000b50:	6013      	str	r3, [r2, #0]
			for(int i=7; i<=12; i++) {
 8000b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b54:	3301      	adds	r3, #1
 8000b56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b5a:	2b0c      	cmp	r3, #12
 8000b5c:	ddde      	ble.n	8000b1c <rx_handle+0x190>
	//		HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);

			/***TODO: figure out what angle to tilt to given timepoint_pos***/

			/* reset tracking variables */
			log_position = 0;
 8000b5e:	4b6a      	ldr	r3, [pc, #424]	; (8000d08 <rx_handle+0x37c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
			running_sum = 0;
 8000b64:	4b69      	ldr	r3, [pc, #420]	; (8000d0c <rx_handle+0x380>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
			memset(posLog, 0, sizeof(posLog));
 8000b6a:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4867      	ldr	r0, [pc, #412]	; (8000d10 <rx_handle+0x384>)
 8000b72:	f00a fab9 	bl	800b0e8 <memset>
      memset(thermoLog, 0, sizeof(thermoLog));
 8000b76:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4865      	ldr	r0, [pc, #404]	; (8000d14 <rx_handle+0x388>)
 8000b7e:	f00a fab3 	bl	800b0e8 <memset>
			DEPOSITED = 0;
 8000b82:	4b65      	ldr	r3, [pc, #404]	; (8000d18 <rx_handle+0x38c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]

			/* dispense position calculation */
			//						    us								mm						mm/s	   s->us
			dispense_delay_clocks = 10000;//(DISPENSE_LATENCY + (TARGET_DIST_ORTH*cos(tiltPos*M_PI/180))/DROP_SPEED*1000*1000)*US_TO_TICKS;
 8000b88:	4b64      	ldr	r3, [pc, #400]	; (8000d1c <rx_handle+0x390>)
 8000b8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b8e:	601a      	str	r2, [r3, #0]
			// ^ delay in ticks between dispensing and drop hit target in x direction


			/* configure tim4 for final dispense timing */
			TIM4->CR1  &= ~TIM_CR1_CEN;
 8000b90:	4b63      	ldr	r3, [pc, #396]	; (8000d20 <rx_handle+0x394>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a62      	ldr	r2, [pc, #392]	; (8000d20 <rx_handle+0x394>)
 8000b96:	f023 0301 	bic.w	r3, r3, #1
 8000b9a:	6013      	str	r3, [r2, #0]

			TIM4->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000b9c:	4b60      	ldr	r3, [pc, #384]	; (8000d20 <rx_handle+0x394>)
 8000b9e:	2264      	movs	r2, #100	; 0x64
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->ARR 	= brake_pos; 	// Counter rolls over at brake_pos which triggers an interrupt handled in TIM2_IRQHandler (stm32h7xx_it.c)
 8000ba2:	4a5f      	ldr	r2, [pc, #380]	; (8000d20 <rx_handle+0x394>)
 8000ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM4->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000ba8:	4b5d      	ldr	r3, [pc, #372]	; (8000d20 <rx_handle+0x394>)
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	4a5c      	ldr	r2, [pc, #368]	; (8000d20 <rx_handle+0x394>)
 8000bae:	f023 0301 	bic.w	r3, r3, #1
 8000bb2:	6113      	str	r3, [r2, #16]
			TIM4->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000bb4:	4b5a      	ldr	r3, [pc, #360]	; (8000d20 <rx_handle+0x394>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a59      	ldr	r2, [pc, #356]	; (8000d20 <rx_handle+0x394>)
 8000bba:	f023 0302 	bic.w	r3, r3, #2
 8000bbe:	6013      	str	r3, [r2, #0]
			TIM4->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000bc0:	4b57      	ldr	r3, [pc, #348]	; (8000d20 <rx_handle+0x394>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	4a56      	ldr	r2, [pc, #344]	; (8000d20 <rx_handle+0x394>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	60d3      	str	r3, [r2, #12]
			TIM4->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000bcc:	4b54      	ldr	r3, [pc, #336]	; (8000d20 <rx_handle+0x394>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a53      	ldr	r2, [pc, #332]	; (8000d20 <rx_handle+0x394>)
 8000bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd6:	6013      	str	r3, [r2, #0]

			/* configuring encoder counter */
			TIM2->CR1  &= ~TIM_CR1_CEN;
 8000bd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be2:	f023 0301 	bic.w	r3, r3, #1
 8000be6:	6013      	str	r3, [r2, #0]

			TIM2->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000be8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bec:	2264      	movs	r2, #100	; 0x64
 8000bee:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->ARR 	= brake_pos; 		// Counter rolls over at brake_pos which triggers an interrupt handled in TIM2_IRQHandler (stm32h7xx_it.c)
 8000bf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bf6:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000bf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c02:	f023 0301 	bic.w	r3, r3, #1
 8000c06:	6113      	str	r3, [r2, #16]
			TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000c08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c12:	f023 0302 	bic.w	r3, r3, #2
 8000c16:	6013      	str	r3, [r2, #0]
			TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	60d3      	str	r3, [r2, #12]
			TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c36:	6013      	str	r3, [r2, #0]

			TIM2->CR1  |=  TIM_CR1_CEN; 	//start counter
 8000c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6013      	str	r3, [r2, #0]

			/* configuring data logging timer */
			TIM5->CR1  &= ~TIM_CR1_CEN; // Start TIM5 to commence data collection
 8000c48:	4b36      	ldr	r3, [pc, #216]	; (8000d24 <rx_handle+0x398>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a35      	ldr	r2, [pc, #212]	; (8000d24 <rx_handle+0x398>)
 8000c4e:	f023 0301 	bic.w	r3, r3, #1
 8000c52:	6013      	str	r3, [r2, #0]

			TIM5-> CNT  = 100;				//
 8000c54:	4b33      	ldr	r3, [pc, #204]	; (8000d24 <rx_handle+0x398>)
 8000c56:	2264      	movs	r2, #100	; 0x64
 8000c58:	625a      	str	r2, [r3, #36]	; 0x24
			TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 8000c5a:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <rx_handle+0x398>)
 8000c5c:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000c60:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000c62:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <rx_handle+0x398>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a2f      	ldr	r2, [pc, #188]	; (8000d24 <rx_handle+0x398>)
 8000c68:	f023 0302 	bic.w	r3, r3, #2
 8000c6c:	6013      	str	r3, [r2, #0]
			TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <rx_handle+0x398>)
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	4a2c      	ldr	r2, [pc, #176]	; (8000d24 <rx_handle+0x398>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	60d3      	str	r3, [r2, #12]
			TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <rx_handle+0x398>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a29      	ldr	r2, [pc, #164]	; (8000d24 <rx_handle+0x398>)
 8000c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c84:	6013      	str	r3, [r2, #0]
			TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000c86:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <rx_handle+0x398>)
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	4a26      	ldr	r2, [pc, #152]	; (8000d24 <rx_handle+0x398>)
 8000c8c:	f023 0301 	bic.w	r3, r3, #1
 8000c90:	6113      	str	r3, [r2, #16]

			TIM5->CR1  |= TIM_CR1_CEN; // Start TIM5 to commence data collection
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <rx_handle+0x398>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a23      	ldr	r2, [pc, #140]	; (8000d24 <rx_handle+0x398>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6013      	str	r3, [r2, #0]
//				char response[100] = {0};
//				enc_pos = TIM2->CNT;
//				sprintf(response, "enc: %d; disp_f: %d; runsum: %d; tim4: %d; log_pos: %d, clocks_to_disp: %d; disp: %d\r\n", (int)enc_pos, (int)disp_flag, (int)running_sum, (int)TIM4->CNT, (int)log_position, (int)TIM4->ARR, (int)DEPOSITED);
//				HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
//			}
			break;
 8000c9e:	e023      	b.n	8000ce8 <rx_handle+0x35c>

		case RELEASE: ;
			HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	4920      	ldr	r1, [pc, #128]	; (8000d28 <rx_handle+0x39c>)
 8000ca8:	4820      	ldr	r0, [pc, #128]	; (8000d2c <rx_handle+0x3a0>)
 8000caa:	f007 fd21 	bl	80086f0 <HAL_UART_Transmit>

			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); //disengage brake
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2140      	movs	r1, #64	; 0x40
 8000cb2:	481f      	ldr	r0, [pc, #124]	; (8000d30 <rx_handle+0x3a4>)
 8000cb4:	f003 fb64 	bl	8004380 <HAL_GPIO_WritePin>
//			char j[100] = {0};
//			sprintf(j, "RELEASE\r\n");
//			HAL_UART_Transmit(&huart3, (uint8_t*)j, strlen(j), HAL_MAX_DELAY);

			break;
 8000cb8:	e016      	b.n	8000ce8 <rx_handle+0x35c>
		case '5': ;
			HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	4919      	ldr	r1, [pc, #100]	; (8000d28 <rx_handle+0x39c>)
 8000cc2:	481a      	ldr	r0, [pc, #104]	; (8000d2c <rx_handle+0x3a0>)
 8000cc4:	f007 fd14 	bl	80086f0 <HAL_UART_Transmit>

			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 0); //engage brake
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2140      	movs	r1, #64	; 0x40
 8000ccc:	4818      	ldr	r0, [pc, #96]	; (8000d30 <rx_handle+0x3a4>)
 8000cce:	f003 fb57 	bl	8004380 <HAL_GPIO_WritePin>
//			char k[100] = {0};
//			sprintf(k, "BRAKE\r\n");
//			HAL_UART_Transmit(&huart3, (uint8_t*)k, strlen(k), HAL_MAX_DELAY);

			break;
 8000cd2:	e009      	b.n	8000ce8 <rx_handle+0x35c>
		case '6': ;
			char lm[100] = {0};
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	f107 0308 	add.w	r3, r7, #8
 8000cdc:	2260      	movs	r2, #96	; 0x60
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f00a fa01 	bl	800b0e8 <memset>
			//sprintf(lm, "current position: %d\r\n braked at: %d\r\n", TIM2->CNT, posn_braked_at);
			//HAL_UART_Transmit(&huart3, (uint8_t*)lm, strlen(lm), HAL_MAX_DELAY);
			break;
 8000ce6:	bf00      	nop

    }
//	char b[] = "done handling\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

    rx_flag = 0;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <rx_handle+0x3a8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart3, received_character, 1);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4911      	ldr	r1, [pc, #68]	; (8000d38 <rx_handle+0x3ac>)
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <rx_handle+0x3a0>)
 8000cf4:	f007 fd8a 	bl	800880c <HAL_UART_Receive_IT>
}
 8000cf8:	bf00      	nop
 8000cfa:	3780      	adds	r7, #128	; 0x80
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2401d74c 	.word	0x2401d74c
 8000d04:	2401d730 	.word	0x2401d730
 8000d08:	2401d728 	.word	0x2401d728
 8000d0c:	2401d72c 	.word	0x2401d72c
 8000d10:	24000268 	.word	0x24000268
 8000d14:	2400ecc8 	.word	0x2400ecc8
 8000d18:	2401d745 	.word	0x2401d745
 8000d1c:	2401d734 	.word	0x2401d734
 8000d20:	40000800 	.word	0x40000800
 8000d24:	40000c00 	.word	0x40000c00
 8000d28:	24000004 	.word	0x24000004
 8000d2c:	240001d4 	.word	0x240001d4
 8000d30:	58020000 	.word	0x58020000
 8000d34:	2401d7b5 	.word	0x2401d7b5
 8000d38:	2401d7b4 	.word	0x2401d7b4

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d42:	f001 f875 	bl	8001e30 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d46:	f000 f8a7 	bl	8000e98 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4a:	f000 faf9 	bl	8001340 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d4e:	f000 f991 	bl	8001074 <MX_TIM2_Init>
  MX_USB_OTG_HS_USB_Init();
 8000d52:	f000 faed 	bl	8001330 <MX_USB_OTG_HS_USB_Init>
  MX_USART3_UART_Init();
 8000d56:	f000 fa9f 	bl	8001298 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000d5a:	f000 fa4f 	bl	80011fc <MX_TIM5_Init>
  MX_TIM4_Init();
 8000d5e:	f000 f9f5 	bl	800114c <MX_TIM4_Init>
  MX_ADC1_Init();
 8000d62:	f000 f90f 	bl	8000f84 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, received_character, 1); // initialize interrupts
 8000d66:	2201      	movs	r2, #1
 8000d68:	4941      	ldr	r1, [pc, #260]	; (8000e70 <main+0x134>)
 8000d6a:	4842      	ldr	r0, [pc, #264]	; (8000e74 <main+0x138>)
 8000d6c:	f007 fd4e 	bl	800880c <HAL_UART_Receive_IT>

//  char msg[] = "program start \r\n";
//  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  // TIM2 for encoder tick counting
  NVIC_SetPriority(TIM2_IRQn, 1); // Braking is priority as long as dispense isnt happening
 8000d70:	2101      	movs	r1, #1
 8000d72:	201c      	movs	r0, #28
 8000d74:	f7ff fcd8 	bl	8000728 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000d78:	201c      	movs	r0, #28
 8000d7a:	f7ff fcb7 	bl	80006ec <__NVIC_EnableIRQ>

  // TIM5 for logkeeping and speed calculations and TIM4 setup
  NVIC_SetPriority(TIM5_IRQn, 2); // Log keeping should be interruptable
 8000d7e:	2102      	movs	r1, #2
 8000d80:	2032      	movs	r0, #50	; 0x32
 8000d82:	f7ff fcd1 	bl	8000728 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8000d86:	2032      	movs	r0, #50	; 0x32
 8000d88:	f7ff fcb0 	bl	80006ec <__NVIC_EnableIRQ>

  // TIM4 for dispense timing after commenced by TIM5
  NVIC_SetPriority(TIM4_IRQn, 0); // Dispense accuracy is top priority
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	201e      	movs	r0, #30
 8000d90:	f7ff fcca 	bl	8000728 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8000d94:	201e      	movs	r0, #30
 8000d96:	f7ff fca9 	bl	80006ec <__NVIC_EnableIRQ>

  HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); // Ensure brake is disengaged after reset
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	4836      	ldr	r0, [pc, #216]	; (8000e78 <main+0x13c>)
 8000da0:	f003 faee 	bl	8004380 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
	  if(rx_flag) rx_handle();
 8000da4:	4b35      	ldr	r3, [pc, #212]	; (8000e7c <main+0x140>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <main+0x74>
 8000dac:	f7ff fdee 	bl	800098c <rx_handle>


	  if(plunge_done_flag) {
 8000db0:	4b33      	ldr	r3, [pc, #204]	; (8000e80 <main+0x144>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0f5      	beq.n	8000da4 <main+0x68>
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	4931      	ldr	r1, [pc, #196]	; (8000e84 <main+0x148>)
 8000dc0:	482c      	ldr	r0, [pc, #176]	; (8000e74 <main+0x138>)
 8000dc2:	f007 fc95 	bl	80086f0 <HAL_UART_Transmit>
		  char msg[10];
		  for(int i=0 ; i<log_position; i++) {
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	e018      	b.n	8000dfe <main+0xc2>
			  sprintf(msg, "%u\n", posLog[i]);
 8000dcc:	4a2e      	ldr	r2, [pc, #184]	; (8000e88 <main+0x14c>)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	492c      	ldr	r1, [pc, #176]	; (8000e8c <main+0x150>)
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f00a f964 	bl	800b0a8 <siprintf>
//			  bytes[2] = ((posLog[i] >> 8) 		& 0xFF);
//			  bytes[3] = ((posLog[i])	 		& 0xFF);
//
//			  HAL_UART_Transmit(&huart3, bytes, 4, HAL_MAX_DELAY);
//			  HAL_UART_Transmit(&huart3, (uint8_t*)rn, strlen(rn), HAL_MAX_DELAY);
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fa84 	bl	80002f0 <strlen>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	1d39      	adds	r1, r7, #4
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	4820      	ldr	r0, [pc, #128]	; (8000e74 <main+0x138>)
 8000df4:	f007 fc7c 	bl	80086f0 <HAL_UART_Transmit>
		  for(int i=0 ; i<log_position; i++) {
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <main+0x154>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d3e1      	bcc.n	8000dcc <main+0x90>
		  }
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000e08:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	491d      	ldr	r1, [pc, #116]	; (8000e84 <main+0x148>)
 8000e10:	4818      	ldr	r0, [pc, #96]	; (8000e74 <main+0x138>)
 8000e12:	f007 fc6d 	bl	80086f0 <HAL_UART_Transmit>

      for(int i=0 ; i<log_position; i++) {
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	e018      	b.n	8000e4e <main+0x112>
			  sprintf(msg, "%u\n", thermoLog[i]);
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <main+0x158>)
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e24:	461a      	mov	r2, r3
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	4918      	ldr	r1, [pc, #96]	; (8000e8c <main+0x150>)
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f00a f93c 	bl	800b0a8 <siprintf>
//			  bytes[2] = ((posLog[i] >> 8) 		& 0xFF);
//			  bytes[3] = ((posLog[i])	 		& 0xFF);
//
//			  HAL_UART_Transmit(&huart3, bytes, 4, HAL_MAX_DELAY);
//			  HAL_UART_Transmit(&huart3, (uint8_t*)rn, strlen(rn), HAL_MAX_DELAY);
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fa5c 	bl	80002f0 <strlen>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	1d39      	adds	r1, r7, #4
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	480c      	ldr	r0, [pc, #48]	; (8000e74 <main+0x138>)
 8000e44:	f007 fc54 	bl	80086f0 <HAL_UART_Transmit>
      for(int i=0 ; i<log_position; i++) {
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <main+0x154>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d3e1      	bcc.n	8000e1c <main+0xe0>
		  }
      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	4909      	ldr	r1, [pc, #36]	; (8000e84 <main+0x148>)
 8000e60:	4804      	ldr	r0, [pc, #16]	; (8000e74 <main+0x138>)
 8000e62:	f007 fc45 	bl	80086f0 <HAL_UART_Transmit>
		  plunge_done_flag = 0;
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <main+0x144>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
	  if(rx_flag) rx_handle();
 8000e6c:	e79a      	b.n	8000da4 <main+0x68>
 8000e6e:	bf00      	nop
 8000e70:	2401d7b4 	.word	0x2401d7b4
 8000e74:	240001d4 	.word	0x240001d4
 8000e78:	58020000 	.word	0x58020000
 8000e7c:	2401d7b5 	.word	0x2401d7b5
 8000e80:	2401d744 	.word	0x2401d744
 8000e84:	24000004 	.word	0x24000004
 8000e88:	24000268 	.word	0x24000268
 8000e8c:	0800ba08 	.word	0x0800ba08
 8000e90:	2401d728 	.word	0x2401d728
 8000e94:	2400ecc8 	.word	0x2400ecc8

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b09c      	sub	sp, #112	; 0x70
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea2:	224c      	movs	r2, #76	; 0x4c
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f00a f91e 	bl	800b0e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2220      	movs	r2, #32
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f00a f918 	bl	800b0e8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000eb8:	4b30      	ldr	r3, [pc, #192]	; (8000f7c <SystemClock_Config+0xe4>)
 8000eba:	f04f 32ff 	mov.w	r2, #4294967295
 8000ebe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ec2:	2004      	movs	r0, #4
 8000ec4:	f003 fa76 	bl	80043b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ec8:	2300      	movs	r3, #0
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	4b2c      	ldr	r3, [pc, #176]	; (8000f80 <SystemClock_Config+0xe8>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a2b      	ldr	r2, [pc, #172]	; (8000f80 <SystemClock_Config+0xe8>)
 8000ed2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <SystemClock_Config+0xe8>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ee4:	bf00      	nop
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <SystemClock_Config+0xe8>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ef2:	d1f8      	bne.n	8000ee6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000ef4:	2321      	movs	r3, #33	; 0x21
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ef8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000efe:	2301      	movs	r3, #1
 8000f00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f02:	2302      	movs	r3, #2
 8000f04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f06:	2302      	movs	r3, #2
 8000f08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000f0e:	2318      	movs	r3, #24
 8000f10:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f16:	2304      	movs	r3, #4
 8000f18:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f1e:	230c      	movs	r3, #12
 8000f20:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f003 fa9a 	bl	8004468 <HAL_RCC_OscConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f3a:	f000 fb51 	bl	80015e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3e:	233f      	movs	r3, #63	; 0x3f
 8000f40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f42:	2303      	movs	r3, #3
 8000f44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2102      	movs	r1, #2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f003 feb2 	bl	8004ccc <HAL_RCC_ClockConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000f6e:	f000 fb37 	bl	80015e0 <Error_Handler>
  }
}
 8000f72:	bf00      	nop
 8000f74:	3770      	adds	r7, #112	; 0x70
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	58024400 	.word	0x58024400
 8000f80:	58024800 	.word	0x58024800

08000f84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f96:	463b      	mov	r3, r7
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
 8000fa4:	615a      	str	r2, [r3, #20]
 8000fa6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fa8:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <MX_ADC1_Init+0xe4>)
 8000faa:	4a30      	ldr	r2, [pc, #192]	; (800106c <MX_ADC1_Init+0xe8>)
 8000fac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <MX_ADC1_Init+0xe4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000fb4:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <MX_ADC1_Init+0xe4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fba:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <MX_ADC1_Init+0xe4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc0:	4b29      	ldr	r3, [pc, #164]	; (8001068 <MX_ADC1_Init+0xe4>)
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fc6:	4b28      	ldr	r3, [pc, #160]	; (8001068 <MX_ADC1_Init+0xe4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fcc:	4b26      	ldr	r3, [pc, #152]	; (8001068 <MX_ADC1_Init+0xe4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000fd2:	4b25      	ldr	r3, [pc, #148]	; (8001068 <MX_ADC1_Init+0xe4>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <MX_ADC1_Init+0xe4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fde:	4b22      	ldr	r3, [pc, #136]	; (8001068 <MX_ADC1_Init+0xe4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <MX_ADC1_Init+0xe4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fea:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <MX_ADC1_Init+0xe4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <MX_ADC1_Init+0xe4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <MX_ADC1_Init+0xe4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_ADC1_Init+0xe4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001004:	4818      	ldr	r0, [pc, #96]	; (8001068 <MX_ADC1_Init+0xe4>)
 8001006:	f001 f9ab 	bl	8002360 <HAL_ADC_Init>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001010:	f000 fae6 	bl	80015e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	4812      	ldr	r0, [pc, #72]	; (8001068 <MX_ADC1_Init+0xe4>)
 8001020:	f002 f8ee 	bl	8003200 <HAL_ADCEx_MultiModeConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800102a:	f000 fad9 	bl	80015e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <MX_ADC1_Init+0xec>)
 8001030:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001032:	2306      	movs	r3, #6
 8001034:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800103a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800103e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001040:	2304      	movs	r3, #4
 8001042:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_ADC1_Init+0xe4>)
 8001052:	f001 fc7f 	bl	8002954 <HAL_ADC_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800105c:	f000 fac0 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	; 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2400008c 	.word	0x2400008c
 800106c:	40022000 	.word	0x40022000
 8001070:	3ac04000 	.word	0x3ac04000

08001074 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	; 0x30
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2224      	movs	r2, #36	; 0x24
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f00a f830 	bl	800b0e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	463b      	mov	r3, r7
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001092:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <MX_TIM2_Init+0xd4>)
 8001094:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001098:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800109a:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <MX_TIM2_Init+0xd4>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <MX_TIM2_Init+0xd4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <MX_TIM2_Init+0xd4>)
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <MX_TIM2_Init+0xd4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <MX_TIM2_Init+0xd4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010c2:	2301      	movs	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010d2:	2301      	movs	r3, #1
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4619      	mov	r1, r3
 80010e4:	4818      	ldr	r0, [pc, #96]	; (8001148 <MX_TIM2_Init+0xd4>)
 80010e6:	f006 fddf 	bl	8007ca8 <HAL_TIM_Encoder_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80010f0:	f000 fa76 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4811      	ldr	r0, [pc, #68]	; (8001148 <MX_TIM2_Init+0xd4>)
 8001102:	f007 f9f9 	bl	80084f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800110c:	f000 fa68 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 8001110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	6013      	str	r3, [r2, #0]
	TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 8001120:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800112a:	f023 0301 	bic.w	r3, r3, #1
 800112e:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8001130:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113a:	f023 0301 	bic.w	r3, r3, #1
 800113e:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	3730      	adds	r7, #48	; 0x30
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	240000f0 	.word	0x240000f0

0800114c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800116a:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <MX_TIM4_Init+0xa8>)
 800116c:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <MX_TIM4_Init+0xac>)
 800116e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <MX_TIM4_Init+0xa8>)
 8001172:	2200      	movs	r2, #0
 8001174:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_TIM4_Init+0xa8>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_TIM4_Init+0xa8>)
 800117e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001182:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <MX_TIM4_Init+0xa8>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_TIM4_Init+0xa8>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001190:	4818      	ldr	r0, [pc, #96]	; (80011f4 <MX_TIM4_Init+0xa8>)
 8001192:	f006 fd31 	bl	8007bf8 <HAL_TIM_Base_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800119c:	f000 fa20 	bl	80015e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4619      	mov	r1, r3
 80011ac:	4811      	ldr	r0, [pc, #68]	; (80011f4 <MX_TIM4_Init+0xa8>)
 80011ae:	f006 ff41 	bl	8008034 <HAL_TIM_ConfigClockSource>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80011b8:	f000 fa12 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	480a      	ldr	r0, [pc, #40]	; (80011f4 <MX_TIM4_Init+0xa8>)
 80011ca:	f007 f995 	bl	80084f8 <HAL_TIMEx_MasterConfigSynchronization>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80011d4:	f000 fa04 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
	TIM4->CR1 &= ~TIM_CR1_CEN; 	// dont start it
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <MX_TIM4_Init+0xac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <MX_TIM4_Init+0xac>)
 80011de:	f023 0301 	bic.w	r3, r3, #1
 80011e2:	6013      	str	r3, [r2, #0]
	TIM4->CNT = 0;				//reset it
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <MX_TIM4_Init+0xac>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END TIM4_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2400013c 	.word	0x2400013c
 80011f8:	40000800 	.word	0x40000800

080011fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_TIM5_Init+0x94>)
 800121c:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <MX_TIM5_Init+0x98>)
 800121e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <MX_TIM5_Init+0x94>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_TIM5_Init+0x94>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_TIM5_Init+0x94>)
 800122e:	f04f 32ff 	mov.w	r2, #4294967295
 8001232:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <MX_TIM5_Init+0x94>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_TIM5_Init+0x94>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001240:	4813      	ldr	r0, [pc, #76]	; (8001290 <MX_TIM5_Init+0x94>)
 8001242:	f006 fcd9 	bl	8007bf8 <HAL_TIM_Base_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800124c:	f000 f9c8 	bl	80015e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001254:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4619      	mov	r1, r3
 800125c:	480c      	ldr	r0, [pc, #48]	; (8001290 <MX_TIM5_Init+0x94>)
 800125e:	f006 fee9 	bl	8008034 <HAL_TIM_ConfigClockSource>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001268:	f000 f9ba 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_TIM5_Init+0x94>)
 800127a:	f007 f93d 	bl	80084f8 <HAL_TIMEx_MasterConfigSynchronization>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001284:	f000 f9ac 	bl	80015e0 <Error_Handler>
//  TIM5->DIER |= TIM_DIER_UIE; // Enable update interrupt
//  TIM5->ARR = ENC_DMA_POLL_FREQ; // Timebase

  /* USER CODE END TIM5_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	24000188 	.word	0x24000188
 8001294:	40000c00 	.word	0x40000c00

08001298 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800129c:	4b22      	ldr	r3, [pc, #136]	; (8001328 <MX_USART3_UART_Init+0x90>)
 800129e:	4a23      	ldr	r2, [pc, #140]	; (800132c <MX_USART3_UART_Init+0x94>)
 80012a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <MX_USART3_UART_Init+0x90>)
 80012a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <MX_USART3_UART_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <MX_USART3_UART_Init+0x90>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <MX_USART3_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_USART3_UART_Init+0x90>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <MX_USART3_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_USART3_UART_Init+0x90>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <MX_USART3_UART_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_USART3_UART_Init+0x90>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <MX_USART3_UART_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012e0:	4811      	ldr	r0, [pc, #68]	; (8001328 <MX_USART3_UART_Init+0x90>)
 80012e2:	f007 f9b5 	bl	8008650 <HAL_UART_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012ec:	f000 f978 	bl	80015e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f0:	2100      	movs	r1, #0
 80012f2:	480d      	ldr	r0, [pc, #52]	; (8001328 <MX_USART3_UART_Init+0x90>)
 80012f4:	f009 fe0d 	bl	800af12 <HAL_UARTEx_SetTxFifoThreshold>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012fe:	f000 f96f 	bl	80015e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001302:	2100      	movs	r1, #0
 8001304:	4808      	ldr	r0, [pc, #32]	; (8001328 <MX_USART3_UART_Init+0x90>)
 8001306:	f009 fe42 	bl	800af8e <HAL_UARTEx_SetRxFifoThreshold>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001310:	f000 f966 	bl	80015e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001314:	4804      	ldr	r0, [pc, #16]	; (8001328 <MX_USART3_UART_Init+0x90>)
 8001316:	f009 fdc3 	bl	800aea0 <HAL_UARTEx_DisableFifoMode>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001320:	f000 f95e 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	240001d4 	.word	0x240001d4
 800132c:	40004800 	.word	0x40004800

08001330 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08e      	sub	sp, #56	; 0x38
 8001344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	4b9b      	ldr	r3, [pc, #620]	; (80015c4 <MX_GPIO_Init+0x284>)
 8001358:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800135c:	4a99      	ldr	r2, [pc, #612]	; (80015c4 <MX_GPIO_Init+0x284>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001366:	4b97      	ldr	r3, [pc, #604]	; (80015c4 <MX_GPIO_Init+0x284>)
 8001368:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	623b      	str	r3, [r7, #32]
 8001372:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001374:	4b93      	ldr	r3, [pc, #588]	; (80015c4 <MX_GPIO_Init+0x284>)
 8001376:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800137a:	4a92      	ldr	r2, [pc, #584]	; (80015c4 <MX_GPIO_Init+0x284>)
 800137c:	f043 0320 	orr.w	r3, r3, #32
 8001380:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001384:	4b8f      	ldr	r3, [pc, #572]	; (80015c4 <MX_GPIO_Init+0x284>)
 8001386:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800138a:	f003 0320 	and.w	r3, r3, #32
 800138e:	61fb      	str	r3, [r7, #28]
 8001390:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001392:	4b8c      	ldr	r3, [pc, #560]	; (80015c4 <MX_GPIO_Init+0x284>)
 8001394:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001398:	4a8a      	ldr	r2, [pc, #552]	; (80015c4 <MX_GPIO_Init+0x284>)
 800139a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800139e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013a2:	4b88      	ldr	r3, [pc, #544]	; (80015c4 <MX_GPIO_Init+0x284>)
 80013a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ac:	61bb      	str	r3, [r7, #24]
 80013ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b84      	ldr	r3, [pc, #528]	; (80015c4 <MX_GPIO_Init+0x284>)
 80013b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013b6:	4a83      	ldr	r2, [pc, #524]	; (80015c4 <MX_GPIO_Init+0x284>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013c0:	4b80      	ldr	r3, [pc, #512]	; (80015c4 <MX_GPIO_Init+0x284>)
 80013c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	4b7d      	ldr	r3, [pc, #500]	; (80015c4 <MX_GPIO_Init+0x284>)
 80013d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013d4:	4a7b      	ldr	r2, [pc, #492]	; (80015c4 <MX_GPIO_Init+0x284>)
 80013d6:	f043 0302 	orr.w	r3, r3, #2
 80013da:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013de:	4b79      	ldr	r3, [pc, #484]	; (80015c4 <MX_GPIO_Init+0x284>)
 80013e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ec:	4b75      	ldr	r3, [pc, #468]	; (80015c4 <MX_GPIO_Init+0x284>)
 80013ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013f2:	4a74      	ldr	r2, [pc, #464]	; (80015c4 <MX_GPIO_Init+0x284>)
 80013f4:	f043 0310 	orr.w	r3, r3, #16
 80013f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013fc:	4b71      	ldr	r3, [pc, #452]	; (80015c4 <MX_GPIO_Init+0x284>)
 80013fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140a:	4b6e      	ldr	r3, [pc, #440]	; (80015c4 <MX_GPIO_Init+0x284>)
 800140c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001410:	4a6c      	ldr	r2, [pc, #432]	; (80015c4 <MX_GPIO_Init+0x284>)
 8001412:	f043 0308 	orr.w	r3, r3, #8
 8001416:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800141a:	4b6a      	ldr	r3, [pc, #424]	; (80015c4 <MX_GPIO_Init+0x284>)
 800141c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001428:	4b66      	ldr	r3, [pc, #408]	; (80015c4 <MX_GPIO_Init+0x284>)
 800142a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800142e:	4a65      	ldr	r2, [pc, #404]	; (80015c4 <MX_GPIO_Init+0x284>)
 8001430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001434:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001438:	4b62      	ldr	r3, [pc, #392]	; (80015c4 <MX_GPIO_Init+0x284>)
 800143a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800143e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USB_FS_PWR_EN_Pin|PAN_STP_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800144c:	485e      	ldr	r0, [pc, #376]	; (80015c8 <MX_GPIO_Init+0x288>)
 800144e:	f002 ff97 	bl	8004380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PAN_EN_Pin|TILT_EN_Pin|TILT_STP_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	210d      	movs	r1, #13
 8001456:	485d      	ldr	r0, [pc, #372]	; (80015cc <MX_GPIO_Init+0x28c>)
 8001458:	f002 ff92 	bl	8004380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PAN_DIR_Pin|BRAKE_Pin, GPIO_PIN_RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	2148      	movs	r1, #72	; 0x48
 8001460:	485b      	ldr	r0, [pc, #364]	; (80015d0 <MX_GPIO_Init+0x290>)
 8001462:	f002 ff8d 	bl	8004380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TILT_DIR_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	f244 0102 	movw	r1, #16386	; 0x4002
 800146c:	4859      	ldr	r0, [pc, #356]	; (80015d4 <MX_GPIO_Init+0x294>)
 800146e:	f002 ff87 	bl	8004380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DROP_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	f240 4102 	movw	r1, #1026	; 0x402
 8001478:	4857      	ldr	r0, [pc, #348]	; (80015d8 <MX_GPIO_Init+0x298>)
 800147a:	f002 ff81 	bl	8004380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800147e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001484:	2300      	movs	r3, #0
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001490:	4619      	mov	r1, r3
 8001492:	484e      	ldr	r0, [pc, #312]	; (80015cc <MX_GPIO_Init+0x28c>)
 8001494:	f002 fdc4 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PAN_STP_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|PAN_STP_Pin;
 8001498:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ae:	4619      	mov	r1, r3
 80014b0:	4845      	ldr	r0, [pc, #276]	; (80015c8 <MX_GPIO_Init+0x288>)
 80014b2:	f002 fdb5 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN_EN_Pin TILT_EN_Pin TILT_STP_Pin */
  GPIO_InitStruct.Pin = PAN_EN_Pin|TILT_EN_Pin|TILT_STP_Pin;
 80014b6:	230d      	movs	r3, #13
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ca:	4619      	mov	r1, r3
 80014cc:	483f      	ldr	r0, [pc, #252]	; (80015cc <MX_GPIO_Init+0x28c>)
 80014ce:	f002 fda7 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PAN_DIR_Pin */
  GPIO_InitStruct.Pin = PAN_DIR_Pin;
 80014d2:	2308      	movs	r3, #8
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PAN_DIR_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e6:	4619      	mov	r1, r3
 80014e8:	4839      	ldr	r0, [pc, #228]	; (80015d0 <MX_GPIO_Init+0x290>)
 80014ea:	f002 fd99 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pin : BRAKE_Pin */
  GPIO_InitStruct.Pin = BRAKE_Pin;
 80014ee:	2340      	movs	r3, #64	; 0x40
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014f6:	2302      	movs	r3, #2
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BRAKE_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001502:	4619      	mov	r1, r3
 8001504:	4832      	ldr	r0, [pc, #200]	; (80015d0 <MX_GPIO_Init+0x290>)
 8001506:	f002 fd8b 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pins : TILT_DIR_Pin LD3_Pin */
  GPIO_InitStruct.Pin = TILT_DIR_Pin|LD3_Pin;
 800150a:	f244 0302 	movw	r3, #16386	; 0x4002
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001520:	4619      	mov	r1, r3
 8001522:	482c      	ldr	r0, [pc, #176]	; (80015d4 <MX_GPIO_Init+0x294>)
 8001524:	f002 fd7c 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pins : DROP_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DROP_Pin|LD2_Pin;
 8001528:	f240 4302 	movw	r3, #1026	; 0x402
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800153a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153e:	4619      	mov	r1, r3
 8001540:	4825      	ldr	r0, [pc, #148]	; (80015d8 <MX_GPIO_Init+0x298>)
 8001542:	f002 fd6d 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800154a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001558:	4619      	mov	r1, r3
 800155a:	4820      	ldr	r0, [pc, #128]	; (80015dc <MX_GPIO_Init+0x29c>)
 800155c:	f002 fd60 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001566:	2300      	movs	r3, #0
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001572:	4619      	mov	r1, r3
 8001574:	4816      	ldr	r0, [pc, #88]	; (80015d0 <MX_GPIO_Init+0x290>)
 8001576:	f002 fd53 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800157a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800158c:	230a      	movs	r3, #10
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001594:	4619      	mov	r1, r3
 8001596:	480e      	ldr	r0, [pc, #56]	; (80015d0 <MX_GPIO_Init+0x290>)
 8001598:	f002 fd42 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800159c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	4806      	ldr	r0, [pc, #24]	; (80015d0 <MX_GPIO_Init+0x290>)
 80015b6:	f002 fd33 	bl	8004020 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ba:	bf00      	nop
 80015bc:	3738      	adds	r7, #56	; 0x38
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	58024400 	.word	0x58024400
 80015c8:	58021400 	.word	0x58021400
 80015cc:	58020800 	.word	0x58020800
 80015d0:	58020000 	.word	0x58020000
 80015d4:	58020400 	.word	0x58020400
 80015d8:	58021000 	.word	0x58021000
 80015dc:	58021800 	.word	0x58021800

080015e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e4:	b672      	cpsid	i
}
 80015e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <Error_Handler+0x8>
	...

080015ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_MspInit+0x30>)
 80015f4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80015f8:	4a08      	ldr	r2, [pc, #32]	; (800161c <HAL_MspInit+0x30>)
 80015fa:	f043 0302 	orr.w	r3, r3, #2
 80015fe:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_MspInit+0x30>)
 8001604:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	58024400 	.word	0x58024400

08001620 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b0ba      	sub	sp, #232	; 0xe8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	22c0      	movs	r2, #192	; 0xc0
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f009 fd51 	bl	800b0e8 <memset>
  if(hadc->Instance==ADC1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a2b      	ldr	r2, [pc, #172]	; (80016f8 <HAL_ADC_MspInit+0xd8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d14f      	bne.n	80016f0 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001650:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800165c:	2301      	movs	r3, #1
 800165e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001660:	2310      	movs	r3, #16
 8001662:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 8001664:	2303      	movs	r3, #3
 8001666:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001668:	2302      	movs	r3, #2
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800166c:	2302      	movs	r3, #2
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001670:	23c0      	movs	r3, #192	; 0xc0
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001674:	2300      	movs	r3, #0
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8001678:	2300      	movs	r3, #0
 800167a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	4618      	mov	r0, r3
 8001688:	f003 feac 	bl	80053e4 <HAL_RCCEx_PeriphCLKConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8001692:	f7ff ffa5 	bl	80015e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_ADC_MspInit+0xdc>)
 8001698:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800169c:	4a17      	ldr	r2, [pc, #92]	; (80016fc <HAL_ADC_MspInit+0xdc>)
 800169e:	f043 0320 	orr.w	r3, r3, #32
 80016a2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_ADC_MspInit+0xdc>)
 80016a8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80016ac:	f003 0320 	and.w	r3, r3, #32
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_ADC_MspInit+0xdc>)
 80016b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016ba:	4a10      	ldr	r2, [pc, #64]	; (80016fc <HAL_ADC_MspInit+0xdc>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016c4:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <HAL_ADC_MspInit+0xdc>)
 80016c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = THERMOCOUPLE_Pin;
 80016d2:	2304      	movs	r3, #4
 80016d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d8:	2303      	movs	r3, #3
 80016da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(THERMOCOUPLE_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <HAL_ADC_MspInit+0xe0>)
 80016ec:	f002 fc98 	bl	8004020 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016f0:	bf00      	nop
 80016f2:	37e8      	adds	r7, #232	; 0xe8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40022000 	.word	0x40022000
 80016fc:	58024400 	.word	0x58024400
 8001700:	58020000 	.word	0x58020000

08001704 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001724:	d135      	bne.n	8001792 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_TIM_Encoder_MspInit+0x98>)
 8001728:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800172c:	4a1b      	ldr	r2, [pc, #108]	; (800179c <HAL_TIM_Encoder_MspInit+0x98>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_TIM_Encoder_MspInit+0x98>)
 8001738:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_TIM_Encoder_MspInit+0x98>)
 8001746:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800174a:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_TIM_Encoder_MspInit+0x98>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_TIM_Encoder_MspInit+0x98>)
 8001756:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PLUNGE_ENC_A_Pin|PLUNGE_ENC_B_Pin;
 8001762:	2303      	movs	r3, #3
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001772:	2301      	movs	r3, #1
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	4808      	ldr	r0, [pc, #32]	; (80017a0 <HAL_TIM_Encoder_MspInit+0x9c>)
 800177e:	f002 fc4f 	bl	8004020 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	201c      	movs	r0, #28
 8001788:	f001 feb1 	bl	80034ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800178c:	201c      	movs	r0, #28
 800178e:	f001 fec8 	bl	8003522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	; 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	58024400 	.word	0x58024400
 80017a0:	58020000 	.word	0x58020000

080017a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <HAL_TIM_Base_MspInit+0x84>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d117      	bne.n	80017e6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <HAL_TIM_Base_MspInit+0x88>)
 80017b8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017bc:	4a1b      	ldr	r2, [pc, #108]	; (800182c <HAL_TIM_Base_MspInit+0x88>)
 80017be:	f043 0304 	orr.w	r3, r3, #4
 80017c2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_TIM_Base_MspInit+0x88>)
 80017c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2100      	movs	r1, #0
 80017d8:	201e      	movs	r0, #30
 80017da:	f001 fe88 	bl	80034ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017de:	201e      	movs	r0, #30
 80017e0:	f001 fe9f 	bl	8003522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80017e4:	e01b      	b.n	800181e <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a11      	ldr	r2, [pc, #68]	; (8001830 <HAL_TIM_Base_MspInit+0x8c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d116      	bne.n	800181e <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_TIM_Base_MspInit+0x88>)
 80017f2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017f6:	4a0d      	ldr	r2, [pc, #52]	; (800182c <HAL_TIM_Base_MspInit+0x88>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_TIM_Base_MspInit+0x88>)
 8001802:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	2032      	movs	r0, #50	; 0x32
 8001814:	f001 fe6b 	bl	80034ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001818:	2032      	movs	r0, #50	; 0x32
 800181a:	f001 fe82 	bl	8003522 <HAL_NVIC_EnableIRQ>
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40000800 	.word	0x40000800
 800182c:	58024400 	.word	0x58024400
 8001830:	40000c00 	.word	0x40000c00

08001834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b0ba      	sub	sp, #232	; 0xe8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	22c0      	movs	r2, #192	; 0xc0
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f009 fc47 	bl	800b0e8 <memset>
  if(huart->Instance==USART3)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a2b      	ldr	r2, [pc, #172]	; (800190c <HAL_UART_MspInit+0xd8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d14e      	bne.n	8001902 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001864:	f04f 0202 	mov.w	r2, #2
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001870:	2300      	movs	r3, #0
 8001872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	4618      	mov	r0, r3
 800187c:	f003 fdb2 	bl	80053e4 <HAL_RCCEx_PeriphCLKConfig>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001886:	f7ff feab 	bl	80015e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800188a:	4b21      	ldr	r3, [pc, #132]	; (8001910 <HAL_UART_MspInit+0xdc>)
 800188c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001890:	4a1f      	ldr	r2, [pc, #124]	; (8001910 <HAL_UART_MspInit+0xdc>)
 8001892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001896:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800189a:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <HAL_UART_MspInit+0xdc>)
 800189c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80018a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_UART_MspInit+0xdc>)
 80018aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018ae:	4a18      	ldr	r2, [pc, #96]	; (8001910 <HAL_UART_MspInit+0xdc>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_UART_MspInit+0xdc>)
 80018ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018e0:	2307      	movs	r3, #7
 80018e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018ea:	4619      	mov	r1, r3
 80018ec:	4809      	ldr	r0, [pc, #36]	; (8001914 <HAL_UART_MspInit+0xe0>)
 80018ee:	f002 fb97 	bl	8004020 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	2027      	movs	r0, #39	; 0x27
 80018f8:	f001 fdf9 	bl	80034ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018fc:	2027      	movs	r0, #39	; 0x27
 80018fe:	f001 fe10 	bl	8003522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001902:	bf00      	nop
 8001904:	37e8      	adds	r7, #232	; 0xe8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40004800 	.word	0x40004800
 8001910:	58024400 	.word	0x58024400
 8001914:	58020c00 	.word	0x58020c00

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800191c:	e7fe      	b.n	800191c <NMI_Handler+0x4>

0800191e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <MemManage_Handler+0x4>

0800192a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <UsageFault_Handler+0x4>

08001936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001964:	f000 fad6 	bl	8001f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//NOTE TO MORNING LEO: LOG SEEMS TO WORK, SHOULD TRANSMIT IT TO PC FOR EASY VISUALIZATION
	if ((TIM2->SR & TIM_SR_UIF) != 0) { // check if update interrupt occured
 8001970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d02a      	beq.n	80019d4 <TIM2_IRQHandler+0x68>
		HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 0); //engage brake
 800197e:	2200      	movs	r2, #0
 8001980:	2140      	movs	r1, #64	; 0x40
 8001982:	4817      	ldr	r0, [pc, #92]	; (80019e0 <TIM2_IRQHandler+0x74>)
 8001984:	f002 fcfc 	bl	8004380 <HAL_GPIO_WritePin>
		posn_braked_at = TIM2->CNT;
 8001988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	4a15      	ldr	r2, [pc, #84]	; (80019e4 <TIM2_IRQHandler+0x78>)
 8001990:	6013      	str	r3, [r2, #0]
		//also somehow make sure motor is stopped

		plunge_done_flag = 1;
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <TIM2_IRQHandler+0x7c>)
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]

		TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 8001998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	6013      	str	r3, [r2, #0]
		TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 80019a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b2:	f023 0301 	bic.w	r3, r3, #1
 80019b6:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// disable tim2
 80019b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	6013      	str	r3, [r2, #0]
		TIM5->CR1  &= ~TIM_CR1_CEN; 	// disable tim5
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <TIM2_IRQHandler+0x80>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a07      	ldr	r2, [pc, #28]	; (80019ec <TIM2_IRQHandler+0x80>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6013      	str	r3, [r2, #0]

		//TIM2->ARR = 999999;			//massive so that we dont hit it when we try to move around. later i can just diable timer but for debugging i want to preserve tim2->cnt
    }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019d4:	4806      	ldr	r0, [pc, #24]	; (80019f0 <TIM2_IRQHandler+0x84>)
 80019d6:	f006 fa0d 	bl	8007df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	58020000 	.word	0x58020000
 80019e4:	2401d740 	.word	0x2401d740
 80019e8:	2401d744 	.word	0x2401d744
 80019ec:	40000c00 	.word	0x40000c00
 80019f0:	240000f0 	.word	0x240000f0

080019f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if ((TIM4->SR & TIM_SR_UIF) != 0) {
 80019f8:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <TIM4_IRQHandler+0x3c>)
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d010      	beq.n	8001a26 <TIM4_IRQHandler+0x32>
		DEPOSITED = 1;
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <TIM4_IRQHandler+0x40>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	701a      	strb	r2, [r3, #0]
		dispense();
 8001a0a:	f7fe fe47 	bl	800069c <dispense>
		TIM4->DIER &=  ~TIM_DIER_UIE; 	// update interrupt disabled
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <TIM4_IRQHandler+0x3c>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <TIM4_IRQHandler+0x3c>)
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	60d3      	str	r3, [r2, #12]
		TIM4->CR1 &= ~TIM_CR1_CEN; 	// only fire this timer once
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <TIM4_IRQHandler+0x3c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <TIM4_IRQHandler+0x3c>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a26:	4804      	ldr	r0, [pc, #16]	; (8001a38 <TIM4_IRQHandler+0x44>)
 8001a28:	f006 f9e4 	bl	8007df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40000800 	.word	0x40000800
 8001a34:	2401d745 	.word	0x2401d745
 8001a38:	2400013c 	.word	0x2400013c

08001a3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	//dispense();
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <USART3_IRQHandler+0x10>)
 8001a42:	f006 ff2f 	bl	80088a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	240001d4 	.word	0x240001d4

08001a50 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
		/* always do the logging portion */
		/* TODO: Convert this datalogging to DMA to speed it up. actually a priority I think it would have big performance gains*/
		log_position += 1; // increment number of data points taken
 8001a56:	4b78      	ldr	r3, [pc, #480]	; (8001c38 <TIM5_IRQHandler+0x1e8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	4a76      	ldr	r2, [pc, #472]	; (8001c38 <TIM5_IRQHandler+0x1e8>)
 8001a5e:	6013      	str	r3, [r2, #0]
		current_pos = TIM2->CNT;
 8001a60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	4a75      	ldr	r2, [pc, #468]	; (8001c3c <TIM5_IRQHandler+0x1ec>)
 8001a68:	6013      	str	r3, [r2, #0]
    HAL_ADC_Start(&hadc1);
 8001a6a:	4875      	ldr	r0, [pc, #468]	; (8001c40 <TIM5_IRQHandler+0x1f0>)
 8001a6c:	f000 fdd2 	bl	8002614 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	4872      	ldr	r0, [pc, #456]	; (8001c40 <TIM5_IRQHandler+0x1f0>)
 8001a76:	f000 fe87 	bl	8002788 <HAL_ADC_PollForConversion>
    current_temp = HAL_ADC_GetValue(&hadc1);
 8001a7a:	4871      	ldr	r0, [pc, #452]	; (8001c40 <TIM5_IRQHandler+0x1f0>)
 8001a7c:	f000 ff5c 	bl	8002938 <HAL_ADC_GetValue>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4a70      	ldr	r2, [pc, #448]	; (8001c44 <TIM5_IRQHandler+0x1f4>)
 8001a84:	6013      	str	r3, [r2, #0]
		posLog[log_position] = current_pos; 
 8001a86:	4b6d      	ldr	r3, [pc, #436]	; (8001c3c <TIM5_IRQHandler+0x1ec>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b6b      	ldr	r3, [pc, #428]	; (8001c38 <TIM5_IRQHandler+0x1e8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b291      	uxth	r1, r2
 8001a90:	4a6d      	ldr	r2, [pc, #436]	; (8001c48 <TIM5_IRQHandler+0x1f8>)
 8001a92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    thermoLog[log_position] = current_temp; // update log of positions
 8001a96:	4b6b      	ldr	r3, [pc, #428]	; (8001c44 <TIM5_IRQHandler+0x1f4>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4b67      	ldr	r3, [pc, #412]	; (8001c38 <TIM5_IRQHandler+0x1e8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	b291      	uxth	r1, r2
 8001aa0:	4a6a      	ldr	r2, [pc, #424]	; (8001c4c <TIM5_IRQHandler+0x1fc>)
 8001aa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		running_sum += current_pos - prev_pos;
 8001aa6:	4b65      	ldr	r3, [pc, #404]	; (8001c3c <TIM5_IRQHandler+0x1ec>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4b69      	ldr	r3, [pc, #420]	; (8001c50 <TIM5_IRQHandler+0x200>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	1ad2      	subs	r2, r2, r3
 8001ab0:	4b68      	ldr	r3, [pc, #416]	; (8001c54 <TIM5_IRQHandler+0x204>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a67      	ldr	r2, [pc, #412]	; (8001c54 <TIM5_IRQHandler+0x204>)
 8001ab8:	6013      	str	r3, [r2, #0]
		prev_pos = current_pos;
 8001aba:	4b60      	ldr	r3, [pc, #384]	; (8001c3c <TIM5_IRQHandler+0x1ec>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a64      	ldr	r2, [pc, #400]	; (8001c50 <TIM5_IRQHandler+0x200>)
 8001ac0:	6013      	str	r3, [r2, #0]
		/* if disp hasnt triggered yet, calculate speed and find disp pos */
		if(!disp_flag){
 8001ac2:	4b65      	ldr	r3, [pc, #404]	; (8001c58 <TIM5_IRQHandler+0x208>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f040 809f 	bne.w	8001c0a <TIM5_IRQHandler+0x1ba>
			if(log_position >= MOVING_AVG_LENGTH) {
 8001acc:	4b5a      	ldr	r3, [pc, #360]	; (8001c38 <TIM5_IRQHandler+0x1e8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2bc7      	cmp	r3, #199	; 0xc7
 8001ad2:	f240 809a 	bls.w	8001c0a <TIM5_IRQHandler+0x1ba>
				/*update running sum of most recent n data points*/
				running_sum -= (posLog[log_position - MOVING_AVG_LENGTH + 1] - posLog[log_position - MOVING_AVG_LENGTH]);
 8001ad6:	4b5f      	ldr	r3, [pc, #380]	; (8001c54 <TIM5_IRQHandler+0x204>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a57      	ldr	r2, [pc, #348]	; (8001c38 <TIM5_IRQHandler+0x1e8>)
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	3ac7      	subs	r2, #199	; 0xc7
 8001ae0:	4959      	ldr	r1, [pc, #356]	; (8001c48 <TIM5_IRQHandler+0x1f8>)
 8001ae2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4a53      	ldr	r2, [pc, #332]	; (8001c38 <TIM5_IRQHandler+0x1e8>)
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	3ac8      	subs	r2, #200	; 0xc8
 8001aee:	4956      	ldr	r1, [pc, #344]	; (8001c48 <TIM5_IRQHandler+0x1f8>)
 8001af0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001af4:	1a82      	subs	r2, r0, r2
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	4a56      	ldr	r2, [pc, #344]	; (8001c54 <TIM5_IRQHandler+0x204>)
 8001afa:	6013      	str	r3, [r2, #0]
				speed = (double)running_sum / (double)MOVING_AVG_LENGTH; // speed in pulses per log
 8001afc:	4b55      	ldr	r3, [pc, #340]	; (8001c54 <TIM5_IRQHandler+0x204>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001b08:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8001c28 <TIM5_IRQHandler+0x1d8>
 8001b0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b10:	4b52      	ldr	r3, [pc, #328]	; (8001c5c <TIM5_IRQHandler+0x20c>)
 8001b12:	ed83 7b00 	vstr	d7, [r3]

				uint32_t clocks_per_encoder_pulse = (CLOCKS_PER_LOG / speed); // a form of speed measurement
 8001b16:	4b51      	ldr	r3, [pc, #324]	; (8001c5c <TIM5_IRQHandler+0x20c>)
 8001b18:	ed93 6b00 	vldr	d6, [r3]
 8001b1c:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8001c30 <TIM5_IRQHandler+0x1e0>
 8001b20:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b28:	ee17 3a90 	vmov	r3, s15
 8001b2c:	607b      	str	r3, [r7, #4]

				next_next_pos = current_pos + 2*speed;	// predicted position 2 TIM5 updates from now. if this is beyond disp_pos we want to trigger TIM4
 8001b2e:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <TIM5_IRQHandler+0x1ec>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001b3a:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <TIM5_IRQHandler+0x20c>)
 8001b3c:	ed93 7b00 	vldr	d7, [r3]
 8001b40:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001b44:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b48:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b4c:	ee17 2a90 	vmov	r2, s15
 8001b50:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <TIM5_IRQHandler+0x210>)
 8001b52:	601a      	str	r2, [r3, #0]

				// enc				enc		   enc/log			clocks 				clocks/log
				dispense_pos = (timepoint_pos) - (speed * (dispense_delay_clocks / CLOCKS_PER_LOG));
 8001b54:	4b43      	ldr	r3, [pc, #268]	; (8001c64 <TIM5_IRQHandler+0x214>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	ee07 3a90 	vmov	s15, r3
 8001b5c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001b60:	4b41      	ldr	r3, [pc, #260]	; (8001c68 <TIM5_IRQHandler+0x218>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001b6c:	ed9f 4b30 	vldr	d4, [pc, #192]	; 8001c30 <TIM5_IRQHandler+0x1e0>
 8001b70:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001b74:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <TIM5_IRQHandler+0x20c>)
 8001b76:	ed93 7b00 	vldr	d7, [r3]
 8001b7a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b7e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b82:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b86:	ee17 2a90 	vmov	r2, s15
 8001b8a:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <TIM5_IRQHandler+0x21c>)
 8001b8c:	601a      	str	r2, [r3, #0]
				//		(enc ticks @ intersection) - (encoder ticks between disp signal and contact )
				// dispense_delay_clocks is based on the geometry of the dipense (ie distance and speed that the drop is shooting at)

				if(next_next_pos > dispense_pos) { // dispense comes within the next timebase
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <TIM5_IRQHandler+0x210>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <TIM5_IRQHandler+0x21c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d937      	bls.n	8001c0a <TIM5_IRQHandler+0x1ba>

					/* Insert a marker for when dispense happened */
					//log_position += 1;
					//posLog[log_position] = 12345678;

					disp_flag = 1;
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <TIM5_IRQHandler+0x208>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]

					// using this with a third timer is likely the most accurate. allows inter-encoder values
					clocks_to_disp = clocks_per_encoder_pulse*(dispense_pos-current_pos);
 8001ba0:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <TIM5_IRQHandler+0x21c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <TIM5_IRQHandler+0x1ec>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	fb02 f303 	mul.w	r3, r2, r3
 8001bb0:	4a2f      	ldr	r2, [pc, #188]	; (8001c70 <TIM5_IRQHandler+0x220>)
 8001bb2:	6013      	str	r3, [r2, #0]

					/* start TIM4 to count to clocks_to_disp */
					TIM4->CR1  &= ~TIM_CR1_CEN; 	//stop counter
 8001bb4:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <TIM5_IRQHandler+0x224>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a2e      	ldr	r2, [pc, #184]	; (8001c74 <TIM5_IRQHandler+0x224>)
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	6013      	str	r3, [r2, #0]
					TIM4->CNT   = 0;				// Reset count
 8001bc0:	4b2c      	ldr	r3, [pc, #176]	; (8001c74 <TIM5_IRQHandler+0x224>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
					TIM4->ARR 	= clocks_to_disp; 	// Update event when we want to dispense
 8001bc6:	4a2b      	ldr	r2, [pc, #172]	; (8001c74 <TIM5_IRQHandler+0x224>)
 8001bc8:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <TIM5_IRQHandler+0x220>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	62d3      	str	r3, [r2, #44]	; 0x2c
					TIM4->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8001bce:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <TIM5_IRQHandler+0x224>)
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	4a28      	ldr	r2, [pc, #160]	; (8001c74 <TIM5_IRQHandler+0x224>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	6113      	str	r3, [r2, #16]
					TIM4->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <TIM5_IRQHandler+0x224>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a25      	ldr	r2, [pc, #148]	; (8001c74 <TIM5_IRQHandler+0x224>)
 8001be0:	f023 0302 	bic.w	r3, r3, #2
 8001be4:	6013      	str	r3, [r2, #0]
					TIM4->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8001be6:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <TIM5_IRQHandler+0x224>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	4a22      	ldr	r2, [pc, #136]	; (8001c74 <TIM5_IRQHandler+0x224>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	60d3      	str	r3, [r2, #12]
					TIM4->CR1  |=  TIM_CR1_ARPE;	// enable auto reload preload
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <TIM5_IRQHandler+0x224>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1f      	ldr	r2, [pc, #124]	; (8001c74 <TIM5_IRQHandler+0x224>)
 8001bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfc:	6013      	str	r3, [r2, #0]
					TIM4->CR1  |=  TIM_CR1_CEN; 	//start counter
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <TIM5_IRQHandler+0x224>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <TIM5_IRQHandler+0x224>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6013      	str	r3, [r2, #0]
			}


		}

		TIM5->SR &= ~TIM_SR_UIF; // Clear the TIM5 update flag
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <TIM5_IRQHandler+0x228>)
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	4a1a      	ldr	r2, [pc, #104]	; (8001c78 <TIM5_IRQHandler+0x228>)
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001c16:	4819      	ldr	r0, [pc, #100]	; (8001c7c <TIM5_IRQHandler+0x22c>)
 8001c18:	f006 f8ec 	bl	8007df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	f3af 8000 	nop.w
 8001c28:	00000000 	.word	0x00000000
 8001c2c:	40690000 	.word	0x40690000
 8001c30:	00000000 	.word	0x00000000
 8001c34:	409e0000 	.word	0x409e0000
 8001c38:	2401d728 	.word	0x2401d728
 8001c3c:	2401d7c8 	.word	0x2401d7c8
 8001c40:	2400008c 	.word	0x2400008c
 8001c44:	2401d7cc 	.word	0x2401d7cc
 8001c48:	24000268 	.word	0x24000268
 8001c4c:	2400ecc8 	.word	0x2400ecc8
 8001c50:	2401d7d0 	.word	0x2401d7d0
 8001c54:	2401d72c 	.word	0x2401d72c
 8001c58:	2401d738 	.word	0x2401d738
 8001c5c:	2401d7c0 	.word	0x2401d7c0
 8001c60:	2401d7d4 	.word	0x2401d7d4
 8001c64:	2401d730 	.word	0x2401d730
 8001c68:	2401d734 	.word	0x2401d734
 8001c6c:	2401d73c 	.word	0x2401d73c
 8001c70:	2401d748 	.word	0x2401d748
 8001c74:	40000800 	.word	0x40000800
 8001c78:	40000c00 	.word	0x40000c00
 8001c7c:	24000188 	.word	0x24000188

08001c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c88:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <_sbrk+0x5c>)
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <_sbrk+0x60>)
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <_sbrk+0x64>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <_sbrk+0x68>)
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d207      	bcs.n	8001cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb0:	f009 fa22 	bl	800b0f8 <__errno>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	e009      	b.n	8001cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <_sbrk+0x64>)
 8001cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	24100000 	.word	0x24100000
 8001ce0:	00000400 	.word	0x00000400
 8001ce4:	2401d7d8 	.word	0x2401d7d8
 8001ce8:	2401d928 	.word	0x2401d928

08001cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cf0:	4b32      	ldr	r3, [pc, #200]	; (8001dbc <SystemInit+0xd0>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf6:	4a31      	ldr	r2, [pc, #196]	; (8001dbc <SystemInit+0xd0>)
 8001cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d00:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <SystemInit+0xd4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d807      	bhi.n	8001d1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d0c:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <SystemInit+0xd4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 030f 	bic.w	r3, r3, #15
 8001d14:	4a2a      	ldr	r2, [pc, #168]	; (8001dc0 <SystemInit+0xd4>)
 8001d16:	f043 0303 	orr.w	r3, r3, #3
 8001d1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d1c:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <SystemInit+0xd8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a28      	ldr	r2, [pc, #160]	; (8001dc4 <SystemInit+0xd8>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d28:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <SystemInit+0xd8>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d2e:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <SystemInit+0xd8>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4924      	ldr	r1, [pc, #144]	; (8001dc4 <SystemInit+0xd8>)
 8001d34:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <SystemInit+0xdc>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d3a:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <SystemInit+0xd4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d46:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <SystemInit+0xd4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 030f 	bic.w	r3, r3, #15
 8001d4e:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <SystemInit+0xd4>)
 8001d50:	f043 0303 	orr.w	r3, r3, #3
 8001d54:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <SystemInit+0xd8>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <SystemInit+0xd8>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <SystemInit+0xd8>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <SystemInit+0xd8>)
 8001d6a:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <SystemInit+0xe0>)
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <SystemInit+0xd8>)
 8001d70:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <SystemInit+0xe4>)
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <SystemInit+0xd8>)
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <SystemInit+0xe8>)
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <SystemInit+0xd8>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <SystemInit+0xd8>)
 8001d82:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <SystemInit+0xe8>)
 8001d84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <SystemInit+0xd8>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <SystemInit+0xd8>)
 8001d8e:	4a11      	ldr	r2, [pc, #68]	; (8001dd4 <SystemInit+0xe8>)
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <SystemInit+0xd8>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <SystemInit+0xd8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a09      	ldr	r2, [pc, #36]	; (8001dc4 <SystemInit+0xd8>)
 8001d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <SystemInit+0xd8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <SystemInit+0xec>)
 8001dac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001db0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00
 8001dc0:	52002000 	.word	0x52002000
 8001dc4:	58024400 	.word	0x58024400
 8001dc8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001dcc:	02020200 	.word	0x02020200
 8001dd0:	01ff0000 	.word	0x01ff0000
 8001dd4:	01010280 	.word	0x01010280
 8001dd8:	52004000 	.word	0x52004000

08001ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001de0:	f7ff ff84 	bl	8001cec <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001de4:	480c      	ldr	r0, [pc, #48]	; (8001e18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001de6:	490d      	ldr	r1, [pc, #52]	; (8001e1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001de8:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dec:	e002      	b.n	8001df4 <LoopCopyDataInit>

08001dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df2:	3304      	adds	r3, #4

08001df4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df8:	d3f9      	bcc.n	8001dee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	; (8001e28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e00:	e001      	b.n	8001e06 <LoopFillZerobss>

08001e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e04:	3204      	adds	r2, #4

08001e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e08:	d3fb      	bcc.n	8001e02 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e0a:	f009 f97b 	bl	800b104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e0e:	f7fe ff95 	bl	8000d3c <main>
  bx  lr
 8001e12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e14:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001e18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e1c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001e20:	0800ba88 	.word	0x0800ba88
  ldr r2, =_sbss
 8001e24:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001e28:	2401d928 	.word	0x2401d928

08001e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e2c:	e7fe      	b.n	8001e2c <ADC_IRQHandler>
	...

08001e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e36:	2003      	movs	r0, #3
 8001e38:	f001 fb4e 	bl	80034d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001e3c:	f003 f8fc 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <HAL_Init+0x68>)
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	4913      	ldr	r1, [pc, #76]	; (8001e9c <HAL_Init+0x6c>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
 8001e58:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_Init+0x68>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	4a0e      	ldr	r2, [pc, #56]	; (8001e9c <HAL_Init+0x6c>)
 8001e64:	5cd3      	ldrb	r3, [r2, r3]
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e70:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <HAL_Init+0x70>)
 8001e72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e74:	4a0b      	ldr	r2, [pc, #44]	; (8001ea4 <HAL_Init+0x74>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 f814 	bl	8001ea8 <HAL_InitTick>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e002      	b.n	8001e90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e8a:	f7ff fbaf 	bl	80015ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	58024400 	.word	0x58024400
 8001e9c:	0800ba0c 	.word	0x0800ba0c
 8001ea0:	24000010 	.word	0x24000010
 8001ea4:	2400000c 	.word	0x2400000c

08001ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001eb0:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_InitTick+0x60>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e021      	b.n	8001f00 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ebc:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <HAL_InitTick+0x64>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_InitTick+0x60>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f001 fb33 	bl	800353e <HAL_SYSTICK_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00e      	b.n	8001f00 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0f      	cmp	r3, #15
 8001ee6:	d80a      	bhi.n	8001efe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f001 fafd 	bl	80034ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef4:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <HAL_InitTick+0x68>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	24000018 	.word	0x24000018
 8001f0c:	2400000c 	.word	0x2400000c
 8001f10:	24000014 	.word	0x24000014

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	24000018 	.word	0x24000018
 8001f38:	2401d7dc 	.word	0x2401d7dc

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	2401d7dc 	.word	0x2401d7dc

08001f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff ffee 	bl	8001f3c <HAL_GetTick>
 8001f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6c:	d005      	beq.n	8001f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_Delay+0x44>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4413      	add	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7a:	bf00      	nop
 8001f7c:	f7ff ffde 	bl	8001f3c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d8f7      	bhi.n	8001f7c <HAL_Delay+0x28>
  {
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	24000018 	.word	0x24000018

08001f9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	609a      	str	r2, [r3, #8]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3360      	adds	r3, #96	; 0x60
 8002016:	461a      	mov	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	430b      	orrs	r3, r1
 8002032:	431a      	orrs	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002038:	bf00      	nop
 800203a:	371c      	adds	r7, #28
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 031f 	and.w	r3, r3, #31
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	431a      	orrs	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	611a      	str	r2, [r3, #16]
}
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002076:	b480      	push	{r7}
 8002078:	b087      	sub	sp, #28
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3360      	adds	r3, #96	; 0x60
 8002086:	461a      	mov	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	431a      	orrs	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	601a      	str	r2, [r3, #0]
  }
}
 80020a0:	bf00      	nop
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b087      	sub	sp, #28
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3330      	adds	r3, #48	; 0x30
 80020e2:	461a      	mov	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	4413      	add	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	211f      	movs	r1, #31
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	401a      	ands	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	0e9b      	lsrs	r3, r3, #26
 800210a:	f003 011f 	and.w	r1, r3, #31
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	431a      	orrs	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800211e:	bf00      	nop
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800212a:	b480      	push	{r7}
 800212c:	b087      	sub	sp, #28
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3314      	adds	r3, #20
 800213a:	461a      	mov	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	0e5b      	lsrs	r3, r3, #25
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	4413      	add	r3, r2
 8002148:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	0d1b      	lsrs	r3, r3, #20
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2107      	movs	r1, #7
 8002158:	fa01 f303 	lsl.w	r3, r1, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	401a      	ands	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	0d1b      	lsrs	r3, r3, #20
 8002164:	f003 031f 	and.w	r3, r3, #31
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	431a      	orrs	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002174:	bf00      	nop
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002198:	43db      	mvns	r3, r3
 800219a:	401a      	ands	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0318 	and.w	r3, r3, #24
 80021a2:	4908      	ldr	r1, [pc, #32]	; (80021c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021a4:	40d9      	lsrs	r1, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	400b      	ands	r3, r1
 80021aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021ae:	431a      	orrs	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	000fffff 	.word	0x000fffff

080021c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 031f 	and.w	r3, r3, #31
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <LL_ADC_DisableDeepPowerDown+0x20>)
 800220e:	4013      	ands	r3, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6093      	str	r3, [r2, #8]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	5fffffc0 	.word	0x5fffffc0

08002224 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002238:	d101      	bne.n	800223e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <LL_ADC_EnableInternalRegulator+0x24>)
 800225a:	4013      	ands	r3, r2
 800225c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	6fffffc0 	.word	0x6fffffc0

08002274 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002288:	d101      	bne.n	800228e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <LL_ADC_Enable+0x24>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	f043 0201 	orr.w	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	7fffffc0 	.word	0x7fffffc0

080022c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <LL_ADC_IsEnabled+0x18>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <LL_ADC_IsEnabled+0x1a>
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <LL_ADC_REG_StartConversion+0x24>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	f043 0204 	orr.w	r2, r3, #4
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	7fffffc0 	.word	0x7fffffc0

08002314 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b04      	cmp	r3, #4
 8002326:	d101      	bne.n	800232c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b08      	cmp	r3, #8
 800234c:	d101      	bne.n	8002352 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b089      	sub	sp, #36	; 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e138      	b.n	80025ec <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002384:	2b00      	cmp	r3, #0
 8002386:	d109      	bne.n	800239c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff f949 	bl	8001620 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff3f 	bl	8002224 <LL_ADC_IsDeepPowerDownEnabled>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d004      	beq.n	80023b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff25 	bl	8002200 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ff5a 	bl	8002274 <LL_ADC_IsInternalRegulatorEnabled>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d114      	bne.n	80023f0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff ff3e 	bl	800224c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023d0:	4b88      	ldr	r3, [pc, #544]	; (80025f4 <HAL_ADC_Init+0x294>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	099b      	lsrs	r3, r3, #6
 80023d6:	4a88      	ldr	r2, [pc, #544]	; (80025f8 <HAL_ADC_Init+0x298>)
 80023d8:	fba2 2303 	umull	r2, r3, r2, r3
 80023dc:	099b      	lsrs	r3, r3, #6
 80023de:	3301      	adds	r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023e2:	e002      	b.n	80023ea <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f9      	bne.n	80023e4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff3d 	bl	8002274 <LL_ADC_IsInternalRegulatorEnabled>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10d      	bne.n	800241c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002404:	f043 0210 	orr.w	r2, r3, #16
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff77 	bl	8002314 <LL_ADC_REG_IsConversionOngoing>
 8002426:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b00      	cmp	r3, #0
 8002432:	f040 80d2 	bne.w	80025da <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2b00      	cmp	r3, #0
 800243a:	f040 80ce 	bne.w	80025da <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002442:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002446:	f043 0202 	orr.w	r2, r3, #2
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff36 	bl	80022c4 <LL_ADC_IsEnabled>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d110      	bne.n	8002480 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800245e:	4867      	ldr	r0, [pc, #412]	; (80025fc <HAL_ADC_Init+0x29c>)
 8002460:	f7ff ff30 	bl	80022c4 <LL_ADC_IsEnabled>
 8002464:	4604      	mov	r4, r0
 8002466:	4866      	ldr	r0, [pc, #408]	; (8002600 <HAL_ADC_Init+0x2a0>)
 8002468:	f7ff ff2c 	bl	80022c4 <LL_ADC_IsEnabled>
 800246c:	4603      	mov	r3, r0
 800246e:	4323      	orrs	r3, r4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4619      	mov	r1, r3
 800247a:	4862      	ldr	r0, [pc, #392]	; (8002604 <HAL_ADC_Init+0x2a4>)
 800247c:	f7ff fd8e 	bl	8001f9c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	7d5b      	ldrb	r3, [r3, #21]
 8002484:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800248a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002490:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7f1b      	ldrb	r3, [r3, #28]
 8002496:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7f1b      	ldrb	r3, [r3, #28]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d106      	bne.n	80024b2 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	045b      	lsls	r3, r3, #17
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <HAL_ADC_Init+0x2a8>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	69b9      	ldr	r1, [r7, #24]
 80024de:	430b      	orrs	r3, r1
 80024e0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ff14 	bl	8002314 <LL_ADC_REG_IsConversionOngoing>
 80024ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ff21 	bl	800233a <LL_ADC_INJ_IsConversionOngoing>
 80024f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d14a      	bne.n	8002596 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d147      	bne.n	8002596 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	7d1b      	ldrb	r3, [r3, #20]
 800250a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	4b3c      	ldr	r3, [pc, #240]	; (800260c <HAL_ADC_Init+0x2ac>)
 800251c:	4013      	ands	r3, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	69b9      	ldr	r1, [r7, #24]
 8002524:	430b      	orrs	r3, r1
 8002526:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800252e:	2b01      	cmp	r3, #1
 8002530:	d11b      	bne.n	800256a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	4b34      	ldr	r3, [pc, #208]	; (8002610 <HAL_ADC_Init+0x2b0>)
 8002540:	4013      	ands	r3, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002546:	3a01      	subs	r2, #1
 8002548:	0411      	lsls	r1, r2, #16
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800254e:	4311      	orrs	r1, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002554:	4311      	orrs	r1, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800255a:	430a      	orrs	r2, r1
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	611a      	str	r2, [r3, #16]
 8002568:	e007      	b.n	800257a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fd41 	bl	8003018 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d10c      	bne.n	80025b8 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	f023 010f 	bic.w	r1, r3, #15
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	1e5a      	subs	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	631a      	str	r2, [r3, #48]	; 0x30
 80025b6:	e007      	b.n	80025c8 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 020f 	bic.w	r2, r2, #15
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025cc:	f023 0303 	bic.w	r3, r3, #3
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54
 80025d8:	e007      	b.n	80025ea <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	f043 0210 	orr.w	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3724      	adds	r7, #36	; 0x24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd90      	pop	{r4, r7, pc}
 80025f4:	2400000c 	.word	0x2400000c
 80025f8:	053e2d63 	.word	0x053e2d63
 80025fc:	40022000 	.word	0x40022000
 8002600:	40022100 	.word	0x40022100
 8002604:	40022300 	.word	0x40022300
 8002608:	fff0c003 	.word	0xfff0c003
 800260c:	ffffbffc 	.word	0xffffbffc
 8002610:	fc00f81e 	.word	0xfc00f81e

08002614 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800261c:	4856      	ldr	r0, [pc, #344]	; (8002778 <HAL_ADC_Start+0x164>)
 800261e:	f7ff fdd3 	bl	80021c8 <LL_ADC_GetMultimode>
 8002622:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fe73 	bl	8002314 <LL_ADC_REG_IsConversionOngoing>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	f040 809a 	bne.w	800276a <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_ADC_Start+0x30>
 8002640:	2302      	movs	r3, #2
 8002642:	e095      	b.n	8002770 <HAL_ADC_Start+0x15c>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fc67 	bl	8002f20 <ADC_Enable>
 8002652:	4603      	mov	r3, r0
 8002654:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002656:	7dfb      	ldrb	r3, [r7, #23]
 8002658:	2b00      	cmp	r3, #0
 800265a:	f040 8081 	bne.w	8002760 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002662:	4b46      	ldr	r3, [pc, #280]	; (800277c <HAL_ADC_Start+0x168>)
 8002664:	4013      	ands	r3, r2
 8002666:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a43      	ldr	r2, [pc, #268]	; (8002780 <HAL_ADC_Start+0x16c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d002      	beq.n	800267e <HAL_ADC_Start+0x6a>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	e000      	b.n	8002680 <HAL_ADC_Start+0x6c>
 800267e:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_ADC_Start+0x170>)
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	4293      	cmp	r3, r2
 8002686:	d002      	beq.n	800268e <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d105      	bne.n	800269a <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a6:	d106      	bne.n	80026b6 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	f023 0206 	bic.w	r2, r3, #6
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	659a      	str	r2, [r3, #88]	; 0x58
 80026b4:	e002      	b.n	80026bc <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	221c      	movs	r2, #28
 80026c2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a2b      	ldr	r2, [pc, #172]	; (8002780 <HAL_ADC_Start+0x16c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d002      	beq.n	80026dc <HAL_ADC_Start+0xc8>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	e000      	b.n	80026de <HAL_ADC_Start+0xca>
 80026dc:	4b29      	ldr	r3, [pc, #164]	; (8002784 <HAL_ADC_Start+0x170>)
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d008      	beq.n	80026f8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d002      	beq.n	80026f8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b09      	cmp	r3, #9
 80026f6:	d114      	bne.n	8002722 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800270e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fde6 	bl	80022ec <LL_ADC_REG_StartConversion>
 8002720:	e025      	b.n	800276e <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a13      	ldr	r2, [pc, #76]	; (8002780 <HAL_ADC_Start+0x16c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d002      	beq.n	800273e <HAL_ADC_Start+0x12a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	e000      	b.n	8002740 <HAL_ADC_Start+0x12c>
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <HAL_ADC_Start+0x170>)
 8002740:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00f      	beq.n	800276e <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002752:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002756:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	655a      	str	r2, [r3, #84]	; 0x54
 800275e:	e006      	b.n	800276e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002768:	e001      	b.n	800276e <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800276a:	2302      	movs	r3, #2
 800276c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800276e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40022300 	.word	0x40022300
 800277c:	fffff0fe 	.word	0xfffff0fe
 8002780:	40022100 	.word	0x40022100
 8002784:	40022000 	.word	0x40022000

08002788 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002792:	4866      	ldr	r0, [pc, #408]	; (800292c <HAL_ADC_PollForConversion+0x1a4>)
 8002794:	f7ff fd18 	bl	80021c8 <LL_ADC_GetMultimode>
 8002798:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d102      	bne.n	80027a8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80027a2:	2308      	movs	r3, #8
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	e02a      	b.n	80027fe <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d005      	beq.n	80027ba <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	d002      	beq.n	80027ba <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2b09      	cmp	r3, #9
 80027b8:	d111      	bne.n	80027de <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d007      	beq.n	80027d8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027cc:	f043 0220 	orr.w	r2, r3, #32
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0a4      	b.n	8002922 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80027d8:	2304      	movs	r3, #4
 80027da:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80027dc:	e00f      	b.n	80027fe <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80027de:	4853      	ldr	r0, [pc, #332]	; (800292c <HAL_ADC_PollForConversion+0x1a4>)
 80027e0:	f7ff fd00 	bl	80021e4 <LL_ADC_GetMultiDMATransfer>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d007      	beq.n	80027fa <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ee:	f043 0220 	orr.w	r2, r3, #32
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e093      	b.n	8002922 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80027fa:	2304      	movs	r3, #4
 80027fc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80027fe:	f7ff fb9d 	bl	8001f3c <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002804:	e021      	b.n	800284a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d01d      	beq.n	800284a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800280e:	f7ff fb95 	bl	8001f3c <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d302      	bcc.n	8002824 <HAL_ADC_PollForConversion+0x9c>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d112      	bne.n	800284a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10b      	bne.n	800284a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002836:	f043 0204 	orr.w	r2, r3, #4
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e06b      	b.n	8002922 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0d6      	beq.n	8002806 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fc1f 	bl	80020ac <LL_ADC_REG_IsTriggerSourceSWStart>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01c      	beq.n	80028ae <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	7d5b      	ldrb	r3, [r3, #21]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d118      	bne.n	80028ae <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b08      	cmp	r3, #8
 8002888:	d111      	bne.n	80028ae <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d105      	bne.n	80028ae <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	f043 0201 	orr.w	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <HAL_ADC_PollForConversion+0x1a8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d002      	beq.n	80028be <HAL_ADC_PollForConversion+0x136>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	e000      	b.n	80028c0 <HAL_ADC_PollForConversion+0x138>
 80028be:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_ADC_PollForConversion+0x1ac>)
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d008      	beq.n	80028da <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	d002      	beq.n	80028da <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b09      	cmp	r3, #9
 80028d8:	d104      	bne.n	80028e4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	e00c      	b.n	80028fe <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a11      	ldr	r2, [pc, #68]	; (8002930 <HAL_ADC_PollForConversion+0x1a8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d002      	beq.n	80028f4 <HAL_ADC_PollForConversion+0x16c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	e000      	b.n	80028f6 <HAL_ADC_PollForConversion+0x16e>
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <HAL_ADC_PollForConversion+0x1ac>)
 80028f6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	2b08      	cmp	r3, #8
 8002902:	d104      	bne.n	800290e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2208      	movs	r2, #8
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	e008      	b.n	8002920 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d103      	bne.n	8002920 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	220c      	movs	r2, #12
 800291e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3720      	adds	r7, #32
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40022300 	.word	0x40022300
 8002930:	40022100 	.word	0x40022100
 8002934:	40022000 	.word	0x40022000

08002938 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b0a1      	sub	sp, #132	; 0x84
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a9a      	ldr	r2, [pc, #616]	; (8002bd8 <HAL_ADC_ConfigChannel+0x284>)
 800296e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_ADC_ConfigChannel+0x2a>
 800297a:	2302      	movs	r3, #2
 800297c:	e2bc      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x5a4>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fcc2 	bl	8002314 <LL_ADC_REG_IsConversionOngoing>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	f040 82a1 	bne.w	8002eda <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d108      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x62>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	0e9b      	lsrs	r3, r3, #26
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	2201      	movs	r2, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	e016      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x90>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029c6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80029ce:	2320      	movs	r3, #32
 80029d0:	e003      	b.n	80029da <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80029d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	2201      	movs	r2, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	69d1      	ldr	r1, [r2, #28]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	430b      	orrs	r3, r1
 80029f0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6859      	ldr	r1, [r3, #4]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	f7ff fb67 	bl	80020d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fc83 	bl	8002314 <LL_ADC_REG_IsConversionOngoing>
 8002a0e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fc90 	bl	800233a <LL_ADC_INJ_IsConversionOngoing>
 8002a1a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f040 80a0 	bne.w	8002b64 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f040 809c 	bne.w	8002b64 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	6819      	ldr	r1, [r3, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f7ff fb76 	bl	800212a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10b      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x110>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	e00a      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x126>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	089b      	lsrs	r3, r3, #2
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d027      	beq.n	8002ad4 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6919      	ldr	r1, [r3, #16]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a92:	f7ff fab7 	bl	8002004 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6919      	ldr	r1, [r3, #16]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	7e5b      	ldrb	r3, [r3, #25]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d102      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x158>
 8002aa6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002aaa:	e000      	b.n	8002aae <HAL_ADC_ConfigChannel+0x15a>
 8002aac:	2300      	movs	r3, #0
 8002aae:	461a      	mov	r2, r3
 8002ab0:	f7ff fae1 	bl	8002076 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	6919      	ldr	r1, [r3, #16]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	7e1b      	ldrb	r3, [r3, #24]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d102      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x176>
 8002ac4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ac8:	e000      	b.n	8002acc <HAL_ADC_ConfigChannel+0x178>
 8002aca:	2300      	movs	r3, #0
 8002acc:	461a      	mov	r2, r3
 8002ace:	f7ff fab9 	bl	8002044 <LL_ADC_SetDataRightShift>
 8002ad2:	e047      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ada:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	069b      	lsls	r3, r3, #26
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d107      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002af6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	069b      	lsls	r3, r3, #26
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d107      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b1a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	069b      	lsls	r3, r3, #26
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d107      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b3e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	069b      	lsls	r3, r3, #26
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d107      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b62:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fbab 	bl	80022c4 <LL_ADC_IsEnabled>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f040 81bb 	bne.w	8002eec <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6819      	ldr	r1, [r3, #0]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	461a      	mov	r2, r3
 8002b84:	f7ff fafc 	bl	8002180 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <HAL_ADC_ConfigChannel+0x284>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	f040 8130 	bne.w	8002df4 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10b      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x268>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	0e9b      	lsrs	r3, r3, #26
 8002baa:	3301      	adds	r3, #1
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	2b09      	cmp	r3, #9
 8002bb2:	bf94      	ite	ls
 8002bb4:	2301      	movls	r3, #1
 8002bb6:	2300      	movhi	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	e01b      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x2a0>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d103      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002bd4:	2320      	movs	r3, #32
 8002bd6:	e005      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x290>
 8002bd8:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	3301      	adds	r3, #1
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	2b09      	cmp	r3, #9
 8002bec:	bf94      	ite	ls
 8002bee:	2301      	movls	r3, #1
 8002bf0:	2300      	movhi	r3, #0
 8002bf2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d079      	beq.n	8002cec <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x2c0>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0e9b      	lsrs	r3, r3, #26
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	069b      	lsls	r3, r3, #26
 8002c0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c12:	e015      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x2ec>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c24:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	e003      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	3301      	adds	r3, #1
 8002c3a:	069b      	lsls	r3, r3, #26
 8002c3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x30c>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	0e9b      	lsrs	r3, r3, #26
 8002c52:	3301      	adds	r3, #1
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	2101      	movs	r1, #1
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	e017      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x33c>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c70:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002c78:	2320      	movs	r3, #32
 8002c7a:	e003      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	3301      	adds	r3, #1
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	ea42 0103 	orr.w	r1, r2, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x362>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	0e9b      	lsrs	r3, r3, #26
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f003 021f 	and.w	r2, r3, #31
 8002cac:	4613      	mov	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	051b      	lsls	r3, r3, #20
 8002cb4:	e018      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x394>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002cce:	2320      	movs	r3, #32
 8002cd0:	e003      	b.n	8002cda <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd4:	fab3 f383 	clz	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	e07e      	b.n	8002dea <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x3b4>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	0e9b      	lsrs	r3, r3, #26
 8002cfe:	3301      	adds	r3, #1
 8002d00:	069b      	lsls	r3, r3, #26
 8002d02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d06:	e015      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x3e0>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002d20:	2320      	movs	r3, #32
 8002d22:	e003      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	069b      	lsls	r3, r3, #26
 8002d30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d109      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x400>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	3301      	adds	r3, #1
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	e017      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x430>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	61bb      	str	r3, [r7, #24]
  return result;
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002d6c:	2320      	movs	r3, #32
 8002d6e:	e003      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	3301      	adds	r3, #1
 8002d7a:	f003 031f 	and.w	r3, r3, #31
 8002d7e:	2101      	movs	r1, #1
 8002d80:	fa01 f303 	lsl.w	r3, r1, r3
 8002d84:	ea42 0103 	orr.w	r1, r2, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10d      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x45c>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0e9b      	lsrs	r3, r3, #26
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	3b1e      	subs	r3, #30
 8002da8:	051b      	lsls	r3, r3, #20
 8002daa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dae:	e01b      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x494>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	60fb      	str	r3, [r7, #12]
  return result;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e003      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f003 021f 	and.w	r2, r3, #31
 8002dda:	4613      	mov	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4413      	add	r3, r2
 8002de0:	3b1e      	subs	r3, #30
 8002de2:	051b      	lsls	r3, r3, #20
 8002de4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002de8:	430b      	orrs	r3, r1
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	6892      	ldr	r2, [r2, #8]
 8002dee:	4619      	mov	r1, r3
 8002df0:	f7ff f99b 	bl	800212a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	da77      	bge.n	8002eec <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dfc:	4840      	ldr	r0, [pc, #256]	; (8002f00 <HAL_ADC_ConfigChannel+0x5ac>)
 8002dfe:	f7ff f8f3 	bl	8001fe8 <LL_ADC_GetCommonPathInternalCh>
 8002e02:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e04:	483f      	ldr	r0, [pc, #252]	; (8002f04 <HAL_ADC_ConfigChannel+0x5b0>)
 8002e06:	f7ff fa5d 	bl	80022c4 <LL_ADC_IsEnabled>
 8002e0a:	4604      	mov	r4, r0
 8002e0c:	483e      	ldr	r0, [pc, #248]	; (8002f08 <HAL_ADC_ConfigChannel+0x5b4>)
 8002e0e:	f7ff fa59 	bl	80022c4 <LL_ADC_IsEnabled>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4323      	orrs	r3, r4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d155      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a3b      	ldr	r2, [pc, #236]	; (8002f0c <HAL_ADC_ConfigChannel+0x5b8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d122      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x516>
 8002e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d11d      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a35      	ldr	r2, [pc, #212]	; (8002f08 <HAL_ADC_ConfigChannel+0x5b4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d159      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e3e:	4619      	mov	r1, r3
 8002e40:	482f      	ldr	r0, [pc, #188]	; (8002f00 <HAL_ADC_ConfigChannel+0x5ac>)
 8002e42:	f7ff f8be 	bl	8001fc2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e46:	4b32      	ldr	r3, [pc, #200]	; (8002f10 <HAL_ADC_ConfigChannel+0x5bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	099b      	lsrs	r3, r3, #6
 8002e4c:	4a31      	ldr	r2, [pc, #196]	; (8002f14 <HAL_ADC_ConfigChannel+0x5c0>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	099b      	lsrs	r3, r3, #6
 8002e54:	3301      	adds	r3, #1
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e5a:	e002      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f9      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e68:	e040      	b.n	8002eec <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a2a      	ldr	r2, [pc, #168]	; (8002f18 <HAL_ADC_ConfigChannel+0x5c4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d111      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x544>
 8002e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10c      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a21      	ldr	r2, [pc, #132]	; (8002f08 <HAL_ADC_ConfigChannel+0x5b4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d131      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e8e:	4619      	mov	r1, r3
 8002e90:	481b      	ldr	r0, [pc, #108]	; (8002f00 <HAL_ADC_ConfigChannel+0x5ac>)
 8002e92:	f7ff f896 	bl	8001fc2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e96:	e029      	b.n	8002eec <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1f      	ldr	r2, [pc, #124]	; (8002f1c <HAL_ADC_ConfigChannel+0x5c8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d124      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x598>
 8002ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d11f      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a15      	ldr	r2, [pc, #84]	; (8002f08 <HAL_ADC_ConfigChannel+0x5b4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d11a      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4810      	ldr	r0, [pc, #64]	; (8002f00 <HAL_ADC_ConfigChannel+0x5ac>)
 8002ec0:	f7ff f87f 	bl	8001fc2 <LL_ADC_SetCommonPathInternalCh>
 8002ec4:	e012      	b.n	8002eec <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	f043 0220 	orr.w	r2, r3, #32
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ed8:	e008      	b.n	8002eec <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	f043 0220 	orr.w	r2, r3, #32
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ef4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3784      	adds	r7, #132	; 0x84
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd90      	pop	{r4, r7, pc}
 8002f00:	40022300 	.word	0x40022300
 8002f04:	40022000 	.word	0x40022000
 8002f08:	40022100 	.word	0x40022100
 8002f0c:	cb840000 	.word	0xcb840000
 8002f10:	2400000c 	.word	0x2400000c
 8002f14:	053e2d63 	.word	0x053e2d63
 8002f18:	bac04000 	.word	0xbac04000
 8002f1c:	cfb80000 	.word	0xcfb80000

08002f20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff f9c9 	bl	80022c4 <LL_ADC_IsEnabled>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d161      	bne.n	8002ffc <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	4b32      	ldr	r3, [pc, #200]	; (8003008 <ADC_Enable+0xe8>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00d      	beq.n	8002f62 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4a:	f043 0210 	orr.w	r2, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	f043 0201 	orr.w	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e04d      	b.n	8002ffe <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff f998 	bl	800229c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f6c:	f7fe ffe6 	bl	8001f3c <HAL_GetTick>
 8002f70:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f72:	4826      	ldr	r0, [pc, #152]	; (800300c <ADC_Enable+0xec>)
 8002f74:	f7ff f928 	bl	80021c8 <LL_ADC_GetMultimode>
 8002f78:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a24      	ldr	r2, [pc, #144]	; (8003010 <ADC_Enable+0xf0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d002      	beq.n	8002f8a <ADC_Enable+0x6a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	e000      	b.n	8002f8c <ADC_Enable+0x6c>
 8002f8a:	4b22      	ldr	r3, [pc, #136]	; (8003014 <ADC_Enable+0xf4>)
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d02c      	beq.n	8002fee <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d130      	bne.n	8002ffc <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f9a:	e028      	b.n	8002fee <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff f98f 	bl	80022c4 <LL_ADC_IsEnabled>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d104      	bne.n	8002fb6 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff f973 	bl	800229c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fb6:	f7fe ffc1 	bl	8001f3c <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d914      	bls.n	8002fee <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d00d      	beq.n	8002fee <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd6:	f043 0210 	orr.w	r2, r3, #16
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe2:	f043 0201 	orr.w	r2, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e007      	b.n	8002ffe <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d1cf      	bne.n	8002f9c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	8000003f 	.word	0x8000003f
 800300c:	40022300 	.word	0x40022300
 8003010:	40022100 	.word	0x40022100
 8003014:	40022000 	.word	0x40022000

08003018 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003020:	4b60      	ldr	r3, [pc, #384]	; (80031a4 <ADC_ConfigureBoostMode+0x18c>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01c      	beq.n	8003066 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800302c:	f002 f97e 	bl	800532c <HAL_RCC_GetHCLKFreq>
 8003030:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800303a:	d010      	beq.n	800305e <ADC_ConfigureBoostMode+0x46>
 800303c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003040:	d873      	bhi.n	800312a <ADC_ConfigureBoostMode+0x112>
 8003042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003046:	d002      	beq.n	800304e <ADC_ConfigureBoostMode+0x36>
 8003048:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800304c:	d16d      	bne.n	800312a <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	0c1b      	lsrs	r3, r3, #16
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	fbb2 f3f3 	udiv	r3, r2, r3
 800305a:	60fb      	str	r3, [r7, #12]
        break;
 800305c:	e068      	b.n	8003130 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	60fb      	str	r3, [r7, #12]
        break;
 8003064:	e064      	b.n	8003130 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003066:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800306a:	f04f 0100 	mov.w	r1, #0
 800306e:	f003 fb77 	bl	8006760 <HAL_RCCEx_GetPeriphCLKFreq>
 8003072:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800307c:	d051      	beq.n	8003122 <ADC_ConfigureBoostMode+0x10a>
 800307e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003082:	d854      	bhi.n	800312e <ADC_ConfigureBoostMode+0x116>
 8003084:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003088:	d047      	beq.n	800311a <ADC_ConfigureBoostMode+0x102>
 800308a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800308e:	d84e      	bhi.n	800312e <ADC_ConfigureBoostMode+0x116>
 8003090:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003094:	d03d      	beq.n	8003112 <ADC_ConfigureBoostMode+0xfa>
 8003096:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800309a:	d848      	bhi.n	800312e <ADC_ConfigureBoostMode+0x116>
 800309c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030a0:	d033      	beq.n	800310a <ADC_ConfigureBoostMode+0xf2>
 80030a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030a6:	d842      	bhi.n	800312e <ADC_ConfigureBoostMode+0x116>
 80030a8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80030ac:	d029      	beq.n	8003102 <ADC_ConfigureBoostMode+0xea>
 80030ae:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80030b2:	d83c      	bhi.n	800312e <ADC_ConfigureBoostMode+0x116>
 80030b4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030b8:	d01a      	beq.n	80030f0 <ADC_ConfigureBoostMode+0xd8>
 80030ba:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030be:	d836      	bhi.n	800312e <ADC_ConfigureBoostMode+0x116>
 80030c0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80030c4:	d014      	beq.n	80030f0 <ADC_ConfigureBoostMode+0xd8>
 80030c6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80030ca:	d830      	bhi.n	800312e <ADC_ConfigureBoostMode+0x116>
 80030cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030d0:	d00e      	beq.n	80030f0 <ADC_ConfigureBoostMode+0xd8>
 80030d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030d6:	d82a      	bhi.n	800312e <ADC_ConfigureBoostMode+0x116>
 80030d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030dc:	d008      	beq.n	80030f0 <ADC_ConfigureBoostMode+0xd8>
 80030de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030e2:	d824      	bhi.n	800312e <ADC_ConfigureBoostMode+0x116>
 80030e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030e8:	d002      	beq.n	80030f0 <ADC_ConfigureBoostMode+0xd8>
 80030ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030ee:	d11e      	bne.n	800312e <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	0c9b      	lsrs	r3, r3, #18
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fe:	60fb      	str	r3, [r7, #12]
        break;
 8003100:	e016      	b.n	8003130 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	091b      	lsrs	r3, r3, #4
 8003106:	60fb      	str	r3, [r7, #12]
        break;
 8003108:	e012      	b.n	8003130 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	60fb      	str	r3, [r7, #12]
        break;
 8003110:	e00e      	b.n	8003130 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	099b      	lsrs	r3, r3, #6
 8003116:	60fb      	str	r3, [r7, #12]
        break;
 8003118:	e00a      	b.n	8003130 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	09db      	lsrs	r3, r3, #7
 800311e:	60fb      	str	r3, [r7, #12]
        break;
 8003120:	e006      	b.n	8003130 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	60fb      	str	r3, [r7, #12]
        break;
 8003128:	e002      	b.n	8003130 <ADC_ConfigureBoostMode+0x118>
        break;
 800312a:	bf00      	nop
 800312c:	e000      	b.n	8003130 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 800312e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4a1b      	ldr	r2, [pc, #108]	; (80031a8 <ADC_ConfigureBoostMode+0x190>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d808      	bhi.n	8003150 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800314c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800314e:	e025      	b.n	800319c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4a16      	ldr	r2, [pc, #88]	; (80031ac <ADC_ConfigureBoostMode+0x194>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d80a      	bhi.n	800316e <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800316a:	609a      	str	r2, [r3, #8]
}
 800316c:	e016      	b.n	800319c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a0f      	ldr	r2, [pc, #60]	; (80031b0 <ADC_ConfigureBoostMode+0x198>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d80a      	bhi.n	800318c <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003188:	609a      	str	r2, [r3, #8]
}
 800318a:	e007      	b.n	800319c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800319a:	609a      	str	r2, [r3, #8]
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40022300 	.word	0x40022300
 80031a8:	005f5e10 	.word	0x005f5e10
 80031ac:	00bebc20 	.word	0x00bebc20
 80031b0:	017d7840 	.word	0x017d7840

080031b4 <LL_ADC_IsEnabled>:
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <LL_ADC_IsEnabled+0x18>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <LL_ADC_IsEnabled+0x1a>
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <LL_ADC_REG_IsConversionOngoing>:
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d101      	bne.n	80031f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003200:	b590      	push	{r4, r7, lr}
 8003202:	b09f      	sub	sp, #124	; 0x7c
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800321a:	2302      	movs	r3, #2
 800321c:	e080      	b.n	8003320 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003226:	2300      	movs	r3, #0
 8003228:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800322a:	2300      	movs	r3, #0
 800322c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a3d      	ldr	r2, [pc, #244]	; (8003328 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d102      	bne.n	800323e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003238:	4b3c      	ldr	r3, [pc, #240]	; (800332c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	e001      	b.n	8003242 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10b      	bne.n	8003260 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324c:	f043 0220 	orr.w	r2, r3, #32
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e05f      	b.n	8003320 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff ffb9 	bl	80031da <LL_ADC_REG_IsConversionOngoing>
 8003268:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff ffb3 	bl	80031da <LL_ADC_REG_IsConversionOngoing>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d141      	bne.n	80032fe <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800327a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800327c:	2b00      	cmp	r3, #0
 800327e:	d13e      	bne.n	80032fe <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003280:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003282:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d020      	beq.n	80032ce <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800328c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	431a      	orrs	r2, r3
 800329a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800329e:	4822      	ldr	r0, [pc, #136]	; (8003328 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80032a0:	f7ff ff88 	bl	80031b4 <LL_ADC_IsEnabled>
 80032a4:	4604      	mov	r4, r0
 80032a6:	4821      	ldr	r0, [pc, #132]	; (800332c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80032a8:	f7ff ff84 	bl	80031b4 <LL_ADC_IsEnabled>
 80032ac:	4603      	mov	r3, r0
 80032ae:	4323      	orrs	r3, r4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d12e      	bne.n	8003312 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	6811      	ldr	r1, [r2, #0]
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	6892      	ldr	r2, [r2, #8]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	431a      	orrs	r2, r3
 80032c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ca:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032cc:	e021      	b.n	8003312 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80032ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032da:	4813      	ldr	r0, [pc, #76]	; (8003328 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80032dc:	f7ff ff6a 	bl	80031b4 <LL_ADC_IsEnabled>
 80032e0:	4604      	mov	r4, r0
 80032e2:	4812      	ldr	r0, [pc, #72]	; (800332c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80032e4:	f7ff ff66 	bl	80031b4 <LL_ADC_IsEnabled>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4323      	orrs	r3, r4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d110      	bne.n	8003312 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032fa:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032fc:	e009      	b.n	8003312 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	f043 0220 	orr.w	r2, r3, #32
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003310:	e000      	b.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003312:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800331c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003320:	4618      	mov	r0, r3
 8003322:	377c      	adds	r7, #124	; 0x7c
 8003324:	46bd      	mov	sp, r7
 8003326:	bd90      	pop	{r4, r7, pc}
 8003328:	40022000 	.word	0x40022000
 800332c:	40022100 	.word	0x40022100
 8003330:	40022300 	.word	0x40022300
 8003334:	fffff0e0 	.word	0xfffff0e0

08003338 <__NVIC_SetPriorityGrouping>:
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <__NVIC_SetPriorityGrouping+0x40>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003354:	4013      	ands	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <__NVIC_SetPriorityGrouping+0x44>)
 8003362:	4313      	orrs	r3, r2
 8003364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003366:	4a04      	ldr	r2, [pc, #16]	; (8003378 <__NVIC_SetPriorityGrouping+0x40>)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	60d3      	str	r3, [r2, #12]
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000ed00 	.word	0xe000ed00
 800337c:	05fa0000 	.word	0x05fa0000

08003380 <__NVIC_GetPriorityGrouping>:
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <__NVIC_GetPriorityGrouping+0x18>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	f003 0307 	and.w	r3, r3, #7
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <__NVIC_EnableIRQ>:
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	db0b      	blt.n	80033c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	f003 021f 	and.w	r2, r3, #31
 80033b4:	4907      	ldr	r1, [pc, #28]	; (80033d4 <__NVIC_EnableIRQ+0x38>)
 80033b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	2001      	movs	r0, #1
 80033be:	fa00 f202 	lsl.w	r2, r0, r2
 80033c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	e000e100 	.word	0xe000e100

080033d8 <__NVIC_SetPriority>:
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	6039      	str	r1, [r7, #0]
 80033e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	db0a      	blt.n	8003402 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	490c      	ldr	r1, [pc, #48]	; (8003424 <__NVIC_SetPriority+0x4c>)
 80033f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033f6:	0112      	lsls	r2, r2, #4
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	440b      	add	r3, r1
 80033fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003400:	e00a      	b.n	8003418 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	b2da      	uxtb	r2, r3
 8003406:	4908      	ldr	r1, [pc, #32]	; (8003428 <__NVIC_SetPriority+0x50>)
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	3b04      	subs	r3, #4
 8003410:	0112      	lsls	r2, r2, #4
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	440b      	add	r3, r1
 8003416:	761a      	strb	r2, [r3, #24]
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000e100 	.word	0xe000e100
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800342c:	b480      	push	{r7}
 800342e:	b089      	sub	sp, #36	; 0x24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f1c3 0307 	rsb	r3, r3, #7
 8003446:	2b04      	cmp	r3, #4
 8003448:	bf28      	it	cs
 800344a:	2304      	movcs	r3, #4
 800344c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3304      	adds	r3, #4
 8003452:	2b06      	cmp	r3, #6
 8003454:	d902      	bls.n	800345c <NVIC_EncodePriority+0x30>
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3b03      	subs	r3, #3
 800345a:	e000      	b.n	800345e <NVIC_EncodePriority+0x32>
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	f04f 32ff 	mov.w	r2, #4294967295
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43da      	mvns	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	401a      	ands	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003474:	f04f 31ff 	mov.w	r1, #4294967295
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	fa01 f303 	lsl.w	r3, r1, r3
 800347e:	43d9      	mvns	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003484:	4313      	orrs	r3, r2
         );
}
 8003486:	4618      	mov	r0, r3
 8003488:	3724      	adds	r7, #36	; 0x24
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3b01      	subs	r3, #1
 80034a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a4:	d301      	bcc.n	80034aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034a6:	2301      	movs	r3, #1
 80034a8:	e00f      	b.n	80034ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034aa:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <SysTick_Config+0x40>)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034b2:	210f      	movs	r1, #15
 80034b4:	f04f 30ff 	mov.w	r0, #4294967295
 80034b8:	f7ff ff8e 	bl	80033d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <SysTick_Config+0x40>)
 80034be:	2200      	movs	r2, #0
 80034c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034c2:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <SysTick_Config+0x40>)
 80034c4:	2207      	movs	r2, #7
 80034c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	e000e010 	.word	0xe000e010

080034d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff ff29 	bl	8003338 <__NVIC_SetPriorityGrouping>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b086      	sub	sp, #24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	4603      	mov	r3, r0
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034fc:	f7ff ff40 	bl	8003380 <__NVIC_GetPriorityGrouping>
 8003500:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	6978      	ldr	r0, [r7, #20]
 8003508:	f7ff ff90 	bl	800342c <NVIC_EncodePriority>
 800350c:	4602      	mov	r2, r0
 800350e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ff5f 	bl	80033d8 <__NVIC_SetPriority>
}
 800351a:	bf00      	nop
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800352c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff ff33 	bl	800339c <__NVIC_EnableIRQ>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff ffa4 	bl	8003494 <SysTick_Config>
 800354c:	4603      	mov	r3, r0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003560:	f7fe fcec 	bl	8001f3c <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e2dc      	b.n	8003b2a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d008      	beq.n	800358e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2280      	movs	r2, #128	; 0x80
 8003580:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e2cd      	b.n	8003b2a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a76      	ldr	r2, [pc, #472]	; (800376c <HAL_DMA_Abort+0x214>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d04a      	beq.n	800362e <HAL_DMA_Abort+0xd6>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a74      	ldr	r2, [pc, #464]	; (8003770 <HAL_DMA_Abort+0x218>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d045      	beq.n	800362e <HAL_DMA_Abort+0xd6>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a73      	ldr	r2, [pc, #460]	; (8003774 <HAL_DMA_Abort+0x21c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d040      	beq.n	800362e <HAL_DMA_Abort+0xd6>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a71      	ldr	r2, [pc, #452]	; (8003778 <HAL_DMA_Abort+0x220>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d03b      	beq.n	800362e <HAL_DMA_Abort+0xd6>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a70      	ldr	r2, [pc, #448]	; (800377c <HAL_DMA_Abort+0x224>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d036      	beq.n	800362e <HAL_DMA_Abort+0xd6>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a6e      	ldr	r2, [pc, #440]	; (8003780 <HAL_DMA_Abort+0x228>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d031      	beq.n	800362e <HAL_DMA_Abort+0xd6>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a6d      	ldr	r2, [pc, #436]	; (8003784 <HAL_DMA_Abort+0x22c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d02c      	beq.n	800362e <HAL_DMA_Abort+0xd6>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a6b      	ldr	r2, [pc, #428]	; (8003788 <HAL_DMA_Abort+0x230>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d027      	beq.n	800362e <HAL_DMA_Abort+0xd6>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6a      	ldr	r2, [pc, #424]	; (800378c <HAL_DMA_Abort+0x234>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d022      	beq.n	800362e <HAL_DMA_Abort+0xd6>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a68      	ldr	r2, [pc, #416]	; (8003790 <HAL_DMA_Abort+0x238>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01d      	beq.n	800362e <HAL_DMA_Abort+0xd6>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a67      	ldr	r2, [pc, #412]	; (8003794 <HAL_DMA_Abort+0x23c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d018      	beq.n	800362e <HAL_DMA_Abort+0xd6>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a65      	ldr	r2, [pc, #404]	; (8003798 <HAL_DMA_Abort+0x240>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <HAL_DMA_Abort+0xd6>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a64      	ldr	r2, [pc, #400]	; (800379c <HAL_DMA_Abort+0x244>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00e      	beq.n	800362e <HAL_DMA_Abort+0xd6>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a62      	ldr	r2, [pc, #392]	; (80037a0 <HAL_DMA_Abort+0x248>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d009      	beq.n	800362e <HAL_DMA_Abort+0xd6>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a61      	ldr	r2, [pc, #388]	; (80037a4 <HAL_DMA_Abort+0x24c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_DMA_Abort+0xd6>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a5f      	ldr	r2, [pc, #380]	; (80037a8 <HAL_DMA_Abort+0x250>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d101      	bne.n	8003632 <HAL_DMA_Abort+0xda>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <HAL_DMA_Abort+0xdc>
 8003632:	2300      	movs	r3, #0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 021e 	bic.w	r2, r2, #30
 8003646:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003656:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e00a      	b.n	8003676 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 020e 	bic.w	r2, r2, #14
 800366e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a3c      	ldr	r2, [pc, #240]	; (800376c <HAL_DMA_Abort+0x214>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d072      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a3a      	ldr	r2, [pc, #232]	; (8003770 <HAL_DMA_Abort+0x218>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d06d      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a39      	ldr	r2, [pc, #228]	; (8003774 <HAL_DMA_Abort+0x21c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d068      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a37      	ldr	r2, [pc, #220]	; (8003778 <HAL_DMA_Abort+0x220>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d063      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a36      	ldr	r2, [pc, #216]	; (800377c <HAL_DMA_Abort+0x224>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d05e      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a34      	ldr	r2, [pc, #208]	; (8003780 <HAL_DMA_Abort+0x228>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d059      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a33      	ldr	r2, [pc, #204]	; (8003784 <HAL_DMA_Abort+0x22c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d054      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a31      	ldr	r2, [pc, #196]	; (8003788 <HAL_DMA_Abort+0x230>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d04f      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a30      	ldr	r2, [pc, #192]	; (800378c <HAL_DMA_Abort+0x234>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d04a      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a2e      	ldr	r2, [pc, #184]	; (8003790 <HAL_DMA_Abort+0x238>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d045      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a2d      	ldr	r2, [pc, #180]	; (8003794 <HAL_DMA_Abort+0x23c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d040      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a2b      	ldr	r2, [pc, #172]	; (8003798 <HAL_DMA_Abort+0x240>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d03b      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a2a      	ldr	r2, [pc, #168]	; (800379c <HAL_DMA_Abort+0x244>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d036      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a28      	ldr	r2, [pc, #160]	; (80037a0 <HAL_DMA_Abort+0x248>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d031      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a27      	ldr	r2, [pc, #156]	; (80037a4 <HAL_DMA_Abort+0x24c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d02c      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a25      	ldr	r2, [pc, #148]	; (80037a8 <HAL_DMA_Abort+0x250>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d027      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a24      	ldr	r2, [pc, #144]	; (80037ac <HAL_DMA_Abort+0x254>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d022      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a22      	ldr	r2, [pc, #136]	; (80037b0 <HAL_DMA_Abort+0x258>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d01d      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a21      	ldr	r2, [pc, #132]	; (80037b4 <HAL_DMA_Abort+0x25c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d018      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1f      	ldr	r2, [pc, #124]	; (80037b8 <HAL_DMA_Abort+0x260>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d013      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1e      	ldr	r2, [pc, #120]	; (80037bc <HAL_DMA_Abort+0x264>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00e      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <HAL_DMA_Abort+0x268>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d009      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a1b      	ldr	r2, [pc, #108]	; (80037c4 <HAL_DMA_Abort+0x26c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d004      	beq.n	8003766 <HAL_DMA_Abort+0x20e>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a19      	ldr	r2, [pc, #100]	; (80037c8 <HAL_DMA_Abort+0x270>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d132      	bne.n	80037cc <HAL_DMA_Abort+0x274>
 8003766:	2301      	movs	r3, #1
 8003768:	e031      	b.n	80037ce <HAL_DMA_Abort+0x276>
 800376a:	bf00      	nop
 800376c:	40020010 	.word	0x40020010
 8003770:	40020028 	.word	0x40020028
 8003774:	40020040 	.word	0x40020040
 8003778:	40020058 	.word	0x40020058
 800377c:	40020070 	.word	0x40020070
 8003780:	40020088 	.word	0x40020088
 8003784:	400200a0 	.word	0x400200a0
 8003788:	400200b8 	.word	0x400200b8
 800378c:	40020410 	.word	0x40020410
 8003790:	40020428 	.word	0x40020428
 8003794:	40020440 	.word	0x40020440
 8003798:	40020458 	.word	0x40020458
 800379c:	40020470 	.word	0x40020470
 80037a0:	40020488 	.word	0x40020488
 80037a4:	400204a0 	.word	0x400204a0
 80037a8:	400204b8 	.word	0x400204b8
 80037ac:	58025408 	.word	0x58025408
 80037b0:	5802541c 	.word	0x5802541c
 80037b4:	58025430 	.word	0x58025430
 80037b8:	58025444 	.word	0x58025444
 80037bc:	58025458 	.word	0x58025458
 80037c0:	5802546c 	.word	0x5802546c
 80037c4:	58025480 	.word	0x58025480
 80037c8:	58025494 	.word	0x58025494
 80037cc:	2300      	movs	r3, #0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a6d      	ldr	r2, [pc, #436]	; (800399c <HAL_DMA_Abort+0x444>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d04a      	beq.n	8003882 <HAL_DMA_Abort+0x32a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a6b      	ldr	r2, [pc, #428]	; (80039a0 <HAL_DMA_Abort+0x448>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d045      	beq.n	8003882 <HAL_DMA_Abort+0x32a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a6a      	ldr	r2, [pc, #424]	; (80039a4 <HAL_DMA_Abort+0x44c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d040      	beq.n	8003882 <HAL_DMA_Abort+0x32a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a68      	ldr	r2, [pc, #416]	; (80039a8 <HAL_DMA_Abort+0x450>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d03b      	beq.n	8003882 <HAL_DMA_Abort+0x32a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a67      	ldr	r2, [pc, #412]	; (80039ac <HAL_DMA_Abort+0x454>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d036      	beq.n	8003882 <HAL_DMA_Abort+0x32a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a65      	ldr	r2, [pc, #404]	; (80039b0 <HAL_DMA_Abort+0x458>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d031      	beq.n	8003882 <HAL_DMA_Abort+0x32a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a64      	ldr	r2, [pc, #400]	; (80039b4 <HAL_DMA_Abort+0x45c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d02c      	beq.n	8003882 <HAL_DMA_Abort+0x32a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a62      	ldr	r2, [pc, #392]	; (80039b8 <HAL_DMA_Abort+0x460>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d027      	beq.n	8003882 <HAL_DMA_Abort+0x32a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a61      	ldr	r2, [pc, #388]	; (80039bc <HAL_DMA_Abort+0x464>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d022      	beq.n	8003882 <HAL_DMA_Abort+0x32a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a5f      	ldr	r2, [pc, #380]	; (80039c0 <HAL_DMA_Abort+0x468>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01d      	beq.n	8003882 <HAL_DMA_Abort+0x32a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a5e      	ldr	r2, [pc, #376]	; (80039c4 <HAL_DMA_Abort+0x46c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d018      	beq.n	8003882 <HAL_DMA_Abort+0x32a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a5c      	ldr	r2, [pc, #368]	; (80039c8 <HAL_DMA_Abort+0x470>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <HAL_DMA_Abort+0x32a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a5b      	ldr	r2, [pc, #364]	; (80039cc <HAL_DMA_Abort+0x474>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00e      	beq.n	8003882 <HAL_DMA_Abort+0x32a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a59      	ldr	r2, [pc, #356]	; (80039d0 <HAL_DMA_Abort+0x478>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d009      	beq.n	8003882 <HAL_DMA_Abort+0x32a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a58      	ldr	r2, [pc, #352]	; (80039d4 <HAL_DMA_Abort+0x47c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d004      	beq.n	8003882 <HAL_DMA_Abort+0x32a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a56      	ldr	r2, [pc, #344]	; (80039d8 <HAL_DMA_Abort+0x480>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d108      	bne.n	8003894 <HAL_DMA_Abort+0x33c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0201 	bic.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	e007      	b.n	80038a4 <HAL_DMA_Abort+0x34c>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80038a4:	e013      	b.n	80038ce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038a6:	f7fe fb49 	bl	8001f3c <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b05      	cmp	r3, #5
 80038b2:	d90c      	bls.n	80038ce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2220      	movs	r2, #32
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2203      	movs	r2, #3
 80038be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e12d      	b.n	8003b2a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1e5      	bne.n	80038a6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a2f      	ldr	r2, [pc, #188]	; (800399c <HAL_DMA_Abort+0x444>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d04a      	beq.n	800397a <HAL_DMA_Abort+0x422>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a2d      	ldr	r2, [pc, #180]	; (80039a0 <HAL_DMA_Abort+0x448>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d045      	beq.n	800397a <HAL_DMA_Abort+0x422>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2c      	ldr	r2, [pc, #176]	; (80039a4 <HAL_DMA_Abort+0x44c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d040      	beq.n	800397a <HAL_DMA_Abort+0x422>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a2a      	ldr	r2, [pc, #168]	; (80039a8 <HAL_DMA_Abort+0x450>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d03b      	beq.n	800397a <HAL_DMA_Abort+0x422>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a29      	ldr	r2, [pc, #164]	; (80039ac <HAL_DMA_Abort+0x454>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d036      	beq.n	800397a <HAL_DMA_Abort+0x422>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a27      	ldr	r2, [pc, #156]	; (80039b0 <HAL_DMA_Abort+0x458>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d031      	beq.n	800397a <HAL_DMA_Abort+0x422>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a26      	ldr	r2, [pc, #152]	; (80039b4 <HAL_DMA_Abort+0x45c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d02c      	beq.n	800397a <HAL_DMA_Abort+0x422>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a24      	ldr	r2, [pc, #144]	; (80039b8 <HAL_DMA_Abort+0x460>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d027      	beq.n	800397a <HAL_DMA_Abort+0x422>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a23      	ldr	r2, [pc, #140]	; (80039bc <HAL_DMA_Abort+0x464>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d022      	beq.n	800397a <HAL_DMA_Abort+0x422>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a21      	ldr	r2, [pc, #132]	; (80039c0 <HAL_DMA_Abort+0x468>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d01d      	beq.n	800397a <HAL_DMA_Abort+0x422>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a20      	ldr	r2, [pc, #128]	; (80039c4 <HAL_DMA_Abort+0x46c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d018      	beq.n	800397a <HAL_DMA_Abort+0x422>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1e      	ldr	r2, [pc, #120]	; (80039c8 <HAL_DMA_Abort+0x470>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d013      	beq.n	800397a <HAL_DMA_Abort+0x422>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_DMA_Abort+0x474>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00e      	beq.n	800397a <HAL_DMA_Abort+0x422>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1b      	ldr	r2, [pc, #108]	; (80039d0 <HAL_DMA_Abort+0x478>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d009      	beq.n	800397a <HAL_DMA_Abort+0x422>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <HAL_DMA_Abort+0x47c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d004      	beq.n	800397a <HAL_DMA_Abort+0x422>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <HAL_DMA_Abort+0x480>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d101      	bne.n	800397e <HAL_DMA_Abort+0x426>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_DMA_Abort+0x428>
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d02b      	beq.n	80039dc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003988:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398e:	f003 031f 	and.w	r3, r3, #31
 8003992:	223f      	movs	r2, #63	; 0x3f
 8003994:	409a      	lsls	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	e02a      	b.n	80039f2 <HAL_DMA_Abort+0x49a>
 800399c:	40020010 	.word	0x40020010
 80039a0:	40020028 	.word	0x40020028
 80039a4:	40020040 	.word	0x40020040
 80039a8:	40020058 	.word	0x40020058
 80039ac:	40020070 	.word	0x40020070
 80039b0:	40020088 	.word	0x40020088
 80039b4:	400200a0 	.word	0x400200a0
 80039b8:	400200b8 	.word	0x400200b8
 80039bc:	40020410 	.word	0x40020410
 80039c0:	40020428 	.word	0x40020428
 80039c4:	40020440 	.word	0x40020440
 80039c8:	40020458 	.word	0x40020458
 80039cc:	40020470 	.word	0x40020470
 80039d0:	40020488 	.word	0x40020488
 80039d4:	400204a0 	.word	0x400204a0
 80039d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	2201      	movs	r2, #1
 80039ec:	409a      	lsls	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a4f      	ldr	r2, [pc, #316]	; (8003b34 <HAL_DMA_Abort+0x5dc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d072      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a4d      	ldr	r2, [pc, #308]	; (8003b38 <HAL_DMA_Abort+0x5e0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d06d      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a4c      	ldr	r2, [pc, #304]	; (8003b3c <HAL_DMA_Abort+0x5e4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d068      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a4a      	ldr	r2, [pc, #296]	; (8003b40 <HAL_DMA_Abort+0x5e8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d063      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a49      	ldr	r2, [pc, #292]	; (8003b44 <HAL_DMA_Abort+0x5ec>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d05e      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a47      	ldr	r2, [pc, #284]	; (8003b48 <HAL_DMA_Abort+0x5f0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d059      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a46      	ldr	r2, [pc, #280]	; (8003b4c <HAL_DMA_Abort+0x5f4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d054      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a44      	ldr	r2, [pc, #272]	; (8003b50 <HAL_DMA_Abort+0x5f8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d04f      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a43      	ldr	r2, [pc, #268]	; (8003b54 <HAL_DMA_Abort+0x5fc>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d04a      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a41      	ldr	r2, [pc, #260]	; (8003b58 <HAL_DMA_Abort+0x600>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d045      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a40      	ldr	r2, [pc, #256]	; (8003b5c <HAL_DMA_Abort+0x604>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d040      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a3e      	ldr	r2, [pc, #248]	; (8003b60 <HAL_DMA_Abort+0x608>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d03b      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a3d      	ldr	r2, [pc, #244]	; (8003b64 <HAL_DMA_Abort+0x60c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d036      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a3b      	ldr	r2, [pc, #236]	; (8003b68 <HAL_DMA_Abort+0x610>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d031      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a3a      	ldr	r2, [pc, #232]	; (8003b6c <HAL_DMA_Abort+0x614>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d02c      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a38      	ldr	r2, [pc, #224]	; (8003b70 <HAL_DMA_Abort+0x618>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d027      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a37      	ldr	r2, [pc, #220]	; (8003b74 <HAL_DMA_Abort+0x61c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d022      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a35      	ldr	r2, [pc, #212]	; (8003b78 <HAL_DMA_Abort+0x620>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01d      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a34      	ldr	r2, [pc, #208]	; (8003b7c <HAL_DMA_Abort+0x624>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d018      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a32      	ldr	r2, [pc, #200]	; (8003b80 <HAL_DMA_Abort+0x628>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a31      	ldr	r2, [pc, #196]	; (8003b84 <HAL_DMA_Abort+0x62c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00e      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a2f      	ldr	r2, [pc, #188]	; (8003b88 <HAL_DMA_Abort+0x630>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d009      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a2e      	ldr	r2, [pc, #184]	; (8003b8c <HAL_DMA_Abort+0x634>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d004      	beq.n	8003ae2 <HAL_DMA_Abort+0x58a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a2c      	ldr	r2, [pc, #176]	; (8003b90 <HAL_DMA_Abort+0x638>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <HAL_DMA_Abort+0x58e>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <HAL_DMA_Abort+0x590>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d015      	beq.n	8003b18 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003af4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00c      	beq.n	8003b18 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b0c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b16:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40020010 	.word	0x40020010
 8003b38:	40020028 	.word	0x40020028
 8003b3c:	40020040 	.word	0x40020040
 8003b40:	40020058 	.word	0x40020058
 8003b44:	40020070 	.word	0x40020070
 8003b48:	40020088 	.word	0x40020088
 8003b4c:	400200a0 	.word	0x400200a0
 8003b50:	400200b8 	.word	0x400200b8
 8003b54:	40020410 	.word	0x40020410
 8003b58:	40020428 	.word	0x40020428
 8003b5c:	40020440 	.word	0x40020440
 8003b60:	40020458 	.word	0x40020458
 8003b64:	40020470 	.word	0x40020470
 8003b68:	40020488 	.word	0x40020488
 8003b6c:	400204a0 	.word	0x400204a0
 8003b70:	400204b8 	.word	0x400204b8
 8003b74:	58025408 	.word	0x58025408
 8003b78:	5802541c 	.word	0x5802541c
 8003b7c:	58025430 	.word	0x58025430
 8003b80:	58025444 	.word	0x58025444
 8003b84:	58025458 	.word	0x58025458
 8003b88:	5802546c 	.word	0x5802546c
 8003b8c:	58025480 	.word	0x58025480
 8003b90:	58025494 	.word	0x58025494

08003b94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e237      	b.n	8004016 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d004      	beq.n	8003bbc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2280      	movs	r2, #128	; 0x80
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e22c      	b.n	8004016 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a5c      	ldr	r2, [pc, #368]	; (8003d34 <HAL_DMA_Abort_IT+0x1a0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d04a      	beq.n	8003c5c <HAL_DMA_Abort_IT+0xc8>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a5b      	ldr	r2, [pc, #364]	; (8003d38 <HAL_DMA_Abort_IT+0x1a4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d045      	beq.n	8003c5c <HAL_DMA_Abort_IT+0xc8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a59      	ldr	r2, [pc, #356]	; (8003d3c <HAL_DMA_Abort_IT+0x1a8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d040      	beq.n	8003c5c <HAL_DMA_Abort_IT+0xc8>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a58      	ldr	r2, [pc, #352]	; (8003d40 <HAL_DMA_Abort_IT+0x1ac>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d03b      	beq.n	8003c5c <HAL_DMA_Abort_IT+0xc8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a56      	ldr	r2, [pc, #344]	; (8003d44 <HAL_DMA_Abort_IT+0x1b0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d036      	beq.n	8003c5c <HAL_DMA_Abort_IT+0xc8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a55      	ldr	r2, [pc, #340]	; (8003d48 <HAL_DMA_Abort_IT+0x1b4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d031      	beq.n	8003c5c <HAL_DMA_Abort_IT+0xc8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a53      	ldr	r2, [pc, #332]	; (8003d4c <HAL_DMA_Abort_IT+0x1b8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d02c      	beq.n	8003c5c <HAL_DMA_Abort_IT+0xc8>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a52      	ldr	r2, [pc, #328]	; (8003d50 <HAL_DMA_Abort_IT+0x1bc>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d027      	beq.n	8003c5c <HAL_DMA_Abort_IT+0xc8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a50      	ldr	r2, [pc, #320]	; (8003d54 <HAL_DMA_Abort_IT+0x1c0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d022      	beq.n	8003c5c <HAL_DMA_Abort_IT+0xc8>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a4f      	ldr	r2, [pc, #316]	; (8003d58 <HAL_DMA_Abort_IT+0x1c4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d01d      	beq.n	8003c5c <HAL_DMA_Abort_IT+0xc8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a4d      	ldr	r2, [pc, #308]	; (8003d5c <HAL_DMA_Abort_IT+0x1c8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d018      	beq.n	8003c5c <HAL_DMA_Abort_IT+0xc8>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a4c      	ldr	r2, [pc, #304]	; (8003d60 <HAL_DMA_Abort_IT+0x1cc>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d013      	beq.n	8003c5c <HAL_DMA_Abort_IT+0xc8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a4a      	ldr	r2, [pc, #296]	; (8003d64 <HAL_DMA_Abort_IT+0x1d0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00e      	beq.n	8003c5c <HAL_DMA_Abort_IT+0xc8>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a49      	ldr	r2, [pc, #292]	; (8003d68 <HAL_DMA_Abort_IT+0x1d4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d009      	beq.n	8003c5c <HAL_DMA_Abort_IT+0xc8>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a47      	ldr	r2, [pc, #284]	; (8003d6c <HAL_DMA_Abort_IT+0x1d8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d004      	beq.n	8003c5c <HAL_DMA_Abort_IT+0xc8>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a46      	ldr	r2, [pc, #280]	; (8003d70 <HAL_DMA_Abort_IT+0x1dc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_DMA_Abort_IT+0xcc>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <HAL_DMA_Abort_IT+0xce>
 8003c60:	2300      	movs	r3, #0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8086 	beq.w	8003d74 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2204      	movs	r2, #4
 8003c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a2f      	ldr	r2, [pc, #188]	; (8003d34 <HAL_DMA_Abort_IT+0x1a0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d04a      	beq.n	8003d10 <HAL_DMA_Abort_IT+0x17c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a2e      	ldr	r2, [pc, #184]	; (8003d38 <HAL_DMA_Abort_IT+0x1a4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d045      	beq.n	8003d10 <HAL_DMA_Abort_IT+0x17c>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a2c      	ldr	r2, [pc, #176]	; (8003d3c <HAL_DMA_Abort_IT+0x1a8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d040      	beq.n	8003d10 <HAL_DMA_Abort_IT+0x17c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a2b      	ldr	r2, [pc, #172]	; (8003d40 <HAL_DMA_Abort_IT+0x1ac>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d03b      	beq.n	8003d10 <HAL_DMA_Abort_IT+0x17c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a29      	ldr	r2, [pc, #164]	; (8003d44 <HAL_DMA_Abort_IT+0x1b0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d036      	beq.n	8003d10 <HAL_DMA_Abort_IT+0x17c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a28      	ldr	r2, [pc, #160]	; (8003d48 <HAL_DMA_Abort_IT+0x1b4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d031      	beq.n	8003d10 <HAL_DMA_Abort_IT+0x17c>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a26      	ldr	r2, [pc, #152]	; (8003d4c <HAL_DMA_Abort_IT+0x1b8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d02c      	beq.n	8003d10 <HAL_DMA_Abort_IT+0x17c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a25      	ldr	r2, [pc, #148]	; (8003d50 <HAL_DMA_Abort_IT+0x1bc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d027      	beq.n	8003d10 <HAL_DMA_Abort_IT+0x17c>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a23      	ldr	r2, [pc, #140]	; (8003d54 <HAL_DMA_Abort_IT+0x1c0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d022      	beq.n	8003d10 <HAL_DMA_Abort_IT+0x17c>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a22      	ldr	r2, [pc, #136]	; (8003d58 <HAL_DMA_Abort_IT+0x1c4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d01d      	beq.n	8003d10 <HAL_DMA_Abort_IT+0x17c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a20      	ldr	r2, [pc, #128]	; (8003d5c <HAL_DMA_Abort_IT+0x1c8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d018      	beq.n	8003d10 <HAL_DMA_Abort_IT+0x17c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1f      	ldr	r2, [pc, #124]	; (8003d60 <HAL_DMA_Abort_IT+0x1cc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d013      	beq.n	8003d10 <HAL_DMA_Abort_IT+0x17c>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <HAL_DMA_Abort_IT+0x1d0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00e      	beq.n	8003d10 <HAL_DMA_Abort_IT+0x17c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1c      	ldr	r2, [pc, #112]	; (8003d68 <HAL_DMA_Abort_IT+0x1d4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d009      	beq.n	8003d10 <HAL_DMA_Abort_IT+0x17c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1a      	ldr	r2, [pc, #104]	; (8003d6c <HAL_DMA_Abort_IT+0x1d8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d004      	beq.n	8003d10 <HAL_DMA_Abort_IT+0x17c>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a19      	ldr	r2, [pc, #100]	; (8003d70 <HAL_DMA_Abort_IT+0x1dc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d108      	bne.n	8003d22 <HAL_DMA_Abort_IT+0x18e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0201 	bic.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e178      	b.n	8004014 <HAL_DMA_Abort_IT+0x480>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0201 	bic.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	e16f      	b.n	8004014 <HAL_DMA_Abort_IT+0x480>
 8003d34:	40020010 	.word	0x40020010
 8003d38:	40020028 	.word	0x40020028
 8003d3c:	40020040 	.word	0x40020040
 8003d40:	40020058 	.word	0x40020058
 8003d44:	40020070 	.word	0x40020070
 8003d48:	40020088 	.word	0x40020088
 8003d4c:	400200a0 	.word	0x400200a0
 8003d50:	400200b8 	.word	0x400200b8
 8003d54:	40020410 	.word	0x40020410
 8003d58:	40020428 	.word	0x40020428
 8003d5c:	40020440 	.word	0x40020440
 8003d60:	40020458 	.word	0x40020458
 8003d64:	40020470 	.word	0x40020470
 8003d68:	40020488 	.word	0x40020488
 8003d6c:	400204a0 	.word	0x400204a0
 8003d70:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 020e 	bic.w	r2, r2, #14
 8003d82:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a6c      	ldr	r2, [pc, #432]	; (8003f3c <HAL_DMA_Abort_IT+0x3a8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d04a      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x290>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a6b      	ldr	r2, [pc, #428]	; (8003f40 <HAL_DMA_Abort_IT+0x3ac>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d045      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x290>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a69      	ldr	r2, [pc, #420]	; (8003f44 <HAL_DMA_Abort_IT+0x3b0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d040      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x290>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a68      	ldr	r2, [pc, #416]	; (8003f48 <HAL_DMA_Abort_IT+0x3b4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d03b      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x290>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a66      	ldr	r2, [pc, #408]	; (8003f4c <HAL_DMA_Abort_IT+0x3b8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d036      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x290>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a65      	ldr	r2, [pc, #404]	; (8003f50 <HAL_DMA_Abort_IT+0x3bc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d031      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x290>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a63      	ldr	r2, [pc, #396]	; (8003f54 <HAL_DMA_Abort_IT+0x3c0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d02c      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x290>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a62      	ldr	r2, [pc, #392]	; (8003f58 <HAL_DMA_Abort_IT+0x3c4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d027      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x290>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a60      	ldr	r2, [pc, #384]	; (8003f5c <HAL_DMA_Abort_IT+0x3c8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d022      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x290>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a5f      	ldr	r2, [pc, #380]	; (8003f60 <HAL_DMA_Abort_IT+0x3cc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d01d      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x290>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a5d      	ldr	r2, [pc, #372]	; (8003f64 <HAL_DMA_Abort_IT+0x3d0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d018      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x290>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a5c      	ldr	r2, [pc, #368]	; (8003f68 <HAL_DMA_Abort_IT+0x3d4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d013      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x290>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a5a      	ldr	r2, [pc, #360]	; (8003f6c <HAL_DMA_Abort_IT+0x3d8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00e      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x290>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a59      	ldr	r2, [pc, #356]	; (8003f70 <HAL_DMA_Abort_IT+0x3dc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d009      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x290>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a57      	ldr	r2, [pc, #348]	; (8003f74 <HAL_DMA_Abort_IT+0x3e0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d004      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x290>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a56      	ldr	r2, [pc, #344]	; (8003f78 <HAL_DMA_Abort_IT+0x3e4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d108      	bne.n	8003e36 <HAL_DMA_Abort_IT+0x2a2>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	e007      	b.n	8003e46 <HAL_DMA_Abort_IT+0x2b2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0201 	bic.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a3c      	ldr	r2, [pc, #240]	; (8003f3c <HAL_DMA_Abort_IT+0x3a8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d072      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a3a      	ldr	r2, [pc, #232]	; (8003f40 <HAL_DMA_Abort_IT+0x3ac>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d06d      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a39      	ldr	r2, [pc, #228]	; (8003f44 <HAL_DMA_Abort_IT+0x3b0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d068      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a37      	ldr	r2, [pc, #220]	; (8003f48 <HAL_DMA_Abort_IT+0x3b4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d063      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a36      	ldr	r2, [pc, #216]	; (8003f4c <HAL_DMA_Abort_IT+0x3b8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d05e      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a34      	ldr	r2, [pc, #208]	; (8003f50 <HAL_DMA_Abort_IT+0x3bc>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d059      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a33      	ldr	r2, [pc, #204]	; (8003f54 <HAL_DMA_Abort_IT+0x3c0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d054      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a31      	ldr	r2, [pc, #196]	; (8003f58 <HAL_DMA_Abort_IT+0x3c4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d04f      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a30      	ldr	r2, [pc, #192]	; (8003f5c <HAL_DMA_Abort_IT+0x3c8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d04a      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a2e      	ldr	r2, [pc, #184]	; (8003f60 <HAL_DMA_Abort_IT+0x3cc>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d045      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a2d      	ldr	r2, [pc, #180]	; (8003f64 <HAL_DMA_Abort_IT+0x3d0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d040      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a2b      	ldr	r2, [pc, #172]	; (8003f68 <HAL_DMA_Abort_IT+0x3d4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d03b      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a2a      	ldr	r2, [pc, #168]	; (8003f6c <HAL_DMA_Abort_IT+0x3d8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d036      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a28      	ldr	r2, [pc, #160]	; (8003f70 <HAL_DMA_Abort_IT+0x3dc>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d031      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a27      	ldr	r2, [pc, #156]	; (8003f74 <HAL_DMA_Abort_IT+0x3e0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d02c      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a25      	ldr	r2, [pc, #148]	; (8003f78 <HAL_DMA_Abort_IT+0x3e4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d027      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a24      	ldr	r2, [pc, #144]	; (8003f7c <HAL_DMA_Abort_IT+0x3e8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d022      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a22      	ldr	r2, [pc, #136]	; (8003f80 <HAL_DMA_Abort_IT+0x3ec>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01d      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a21      	ldr	r2, [pc, #132]	; (8003f84 <HAL_DMA_Abort_IT+0x3f0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d018      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a1f      	ldr	r2, [pc, #124]	; (8003f88 <HAL_DMA_Abort_IT+0x3f4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a1e      	ldr	r2, [pc, #120]	; (8003f8c <HAL_DMA_Abort_IT+0x3f8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00e      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <HAL_DMA_Abort_IT+0x3fc>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d009      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a1b      	ldr	r2, [pc, #108]	; (8003f94 <HAL_DMA_Abort_IT+0x400>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d004      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x3a2>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a19      	ldr	r2, [pc, #100]	; (8003f98 <HAL_DMA_Abort_IT+0x404>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d132      	bne.n	8003f9c <HAL_DMA_Abort_IT+0x408>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e031      	b.n	8003f9e <HAL_DMA_Abort_IT+0x40a>
 8003f3a:	bf00      	nop
 8003f3c:	40020010 	.word	0x40020010
 8003f40:	40020028 	.word	0x40020028
 8003f44:	40020040 	.word	0x40020040
 8003f48:	40020058 	.word	0x40020058
 8003f4c:	40020070 	.word	0x40020070
 8003f50:	40020088 	.word	0x40020088
 8003f54:	400200a0 	.word	0x400200a0
 8003f58:	400200b8 	.word	0x400200b8
 8003f5c:	40020410 	.word	0x40020410
 8003f60:	40020428 	.word	0x40020428
 8003f64:	40020440 	.word	0x40020440
 8003f68:	40020458 	.word	0x40020458
 8003f6c:	40020470 	.word	0x40020470
 8003f70:	40020488 	.word	0x40020488
 8003f74:	400204a0 	.word	0x400204a0
 8003f78:	400204b8 	.word	0x400204b8
 8003f7c:	58025408 	.word	0x58025408
 8003f80:	5802541c 	.word	0x5802541c
 8003f84:	58025430 	.word	0x58025430
 8003f88:	58025444 	.word	0x58025444
 8003f8c:	58025458 	.word	0x58025458
 8003f90:	5802546c 	.word	0x5802546c
 8003f94:	58025480 	.word	0x58025480
 8003f98:	58025494 	.word	0x58025494
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d028      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fb0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003fd0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00c      	beq.n	8003ff4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ff2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop

08004020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004020:	b480      	push	{r7}
 8004022:	b089      	sub	sp, #36	; 0x24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800402e:	4b89      	ldr	r3, [pc, #548]	; (8004254 <HAL_GPIO_Init+0x234>)
 8004030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004032:	e194      	b.n	800435e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	2101      	movs	r1, #1
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	4013      	ands	r3, r2
 8004042:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 8186 	beq.w	8004358 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d005      	beq.n	8004064 <HAL_GPIO_Init+0x44>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d130      	bne.n	80040c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	2203      	movs	r2, #3
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	43db      	mvns	r3, r3
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4013      	ands	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4313      	orrs	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800409a:	2201      	movs	r2, #1
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43db      	mvns	r3, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4013      	ands	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	f003 0201 	and.w	r2, r3, #1
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d017      	beq.n	8004102 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	2203      	movs	r2, #3
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	43db      	mvns	r3, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4013      	ands	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d123      	bne.n	8004156 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	08da      	lsrs	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3208      	adds	r2, #8
 8004116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800411a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	220f      	movs	r2, #15
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43db      	mvns	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	08da      	lsrs	r2, r3, #3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3208      	adds	r2, #8
 8004150:	69b9      	ldr	r1, [r7, #24]
 8004152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	2203      	movs	r2, #3
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	43db      	mvns	r3, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4013      	ands	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f003 0203 	and.w	r2, r3, #3
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 80e0 	beq.w	8004358 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004198:	4b2f      	ldr	r3, [pc, #188]	; (8004258 <HAL_GPIO_Init+0x238>)
 800419a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800419e:	4a2e      	ldr	r2, [pc, #184]	; (8004258 <HAL_GPIO_Init+0x238>)
 80041a0:	f043 0302 	orr.w	r3, r3, #2
 80041a4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80041a8:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <HAL_GPIO_Init+0x238>)
 80041aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041b6:	4a29      	ldr	r2, [pc, #164]	; (800425c <HAL_GPIO_Init+0x23c>)
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	089b      	lsrs	r3, r3, #2
 80041bc:	3302      	adds	r3, #2
 80041be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	220f      	movs	r2, #15
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	43db      	mvns	r3, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4013      	ands	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a20      	ldr	r2, [pc, #128]	; (8004260 <HAL_GPIO_Init+0x240>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d052      	beq.n	8004288 <HAL_GPIO_Init+0x268>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a1f      	ldr	r2, [pc, #124]	; (8004264 <HAL_GPIO_Init+0x244>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d031      	beq.n	800424e <HAL_GPIO_Init+0x22e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a1e      	ldr	r2, [pc, #120]	; (8004268 <HAL_GPIO_Init+0x248>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d02b      	beq.n	800424a <HAL_GPIO_Init+0x22a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a1d      	ldr	r2, [pc, #116]	; (800426c <HAL_GPIO_Init+0x24c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d025      	beq.n	8004246 <HAL_GPIO_Init+0x226>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <HAL_GPIO_Init+0x250>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01f      	beq.n	8004242 <HAL_GPIO_Init+0x222>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a1b      	ldr	r2, [pc, #108]	; (8004274 <HAL_GPIO_Init+0x254>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d019      	beq.n	800423e <HAL_GPIO_Init+0x21e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a1a      	ldr	r2, [pc, #104]	; (8004278 <HAL_GPIO_Init+0x258>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <HAL_GPIO_Init+0x21a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a19      	ldr	r2, [pc, #100]	; (800427c <HAL_GPIO_Init+0x25c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00d      	beq.n	8004236 <HAL_GPIO_Init+0x216>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a18      	ldr	r2, [pc, #96]	; (8004280 <HAL_GPIO_Init+0x260>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d007      	beq.n	8004232 <HAL_GPIO_Init+0x212>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a17      	ldr	r2, [pc, #92]	; (8004284 <HAL_GPIO_Init+0x264>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d101      	bne.n	800422e <HAL_GPIO_Init+0x20e>
 800422a:	2309      	movs	r3, #9
 800422c:	e02d      	b.n	800428a <HAL_GPIO_Init+0x26a>
 800422e:	230a      	movs	r3, #10
 8004230:	e02b      	b.n	800428a <HAL_GPIO_Init+0x26a>
 8004232:	2308      	movs	r3, #8
 8004234:	e029      	b.n	800428a <HAL_GPIO_Init+0x26a>
 8004236:	2307      	movs	r3, #7
 8004238:	e027      	b.n	800428a <HAL_GPIO_Init+0x26a>
 800423a:	2306      	movs	r3, #6
 800423c:	e025      	b.n	800428a <HAL_GPIO_Init+0x26a>
 800423e:	2305      	movs	r3, #5
 8004240:	e023      	b.n	800428a <HAL_GPIO_Init+0x26a>
 8004242:	2304      	movs	r3, #4
 8004244:	e021      	b.n	800428a <HAL_GPIO_Init+0x26a>
 8004246:	2303      	movs	r3, #3
 8004248:	e01f      	b.n	800428a <HAL_GPIO_Init+0x26a>
 800424a:	2302      	movs	r3, #2
 800424c:	e01d      	b.n	800428a <HAL_GPIO_Init+0x26a>
 800424e:	2301      	movs	r3, #1
 8004250:	e01b      	b.n	800428a <HAL_GPIO_Init+0x26a>
 8004252:	bf00      	nop
 8004254:	58000080 	.word	0x58000080
 8004258:	58024400 	.word	0x58024400
 800425c:	58000400 	.word	0x58000400
 8004260:	58020000 	.word	0x58020000
 8004264:	58020400 	.word	0x58020400
 8004268:	58020800 	.word	0x58020800
 800426c:	58020c00 	.word	0x58020c00
 8004270:	58021000 	.word	0x58021000
 8004274:	58021400 	.word	0x58021400
 8004278:	58021800 	.word	0x58021800
 800427c:	58021c00 	.word	0x58021c00
 8004280:	58022000 	.word	0x58022000
 8004284:	58022400 	.word	0x58022400
 8004288:	2300      	movs	r3, #0
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	f002 0203 	and.w	r2, r2, #3
 8004290:	0092      	lsls	r2, r2, #2
 8004292:	4093      	lsls	r3, r2
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4313      	orrs	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800429a:	4938      	ldr	r1, [pc, #224]	; (800437c <HAL_GPIO_Init+0x35c>)
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	089b      	lsrs	r3, r3, #2
 80042a0:	3302      	adds	r3, #2
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	43db      	mvns	r3, r3
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4013      	ands	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80042ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80042d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	43db      	mvns	r3, r3
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	4013      	ands	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80042fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	43db      	mvns	r3, r3
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4013      	ands	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	43db      	mvns	r3, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4013      	ands	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	3301      	adds	r3, #1
 800435c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	f47f ae63 	bne.w	8004034 <HAL_GPIO_Init+0x14>
  }
}
 800436e:	bf00      	nop
 8004370:	bf00      	nop
 8004372:	3724      	adds	r7, #36	; 0x24
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	58000400 	.word	0x58000400

08004380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	807b      	strh	r3, [r7, #2]
 800438c:	4613      	mov	r3, r2
 800438e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004390:	787b      	ldrb	r3, [r7, #1]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004396:	887a      	ldrh	r2, [r7, #2]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800439c:	e003      	b.n	80043a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800439e:	887b      	ldrh	r3, [r7, #2]
 80043a0:	041a      	lsls	r2, r3, #16
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	619a      	str	r2, [r3, #24]
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80043bc:	4b29      	ldr	r3, [pc, #164]	; (8004464 <HAL_PWREx_ConfigSupply+0xb0>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	2b06      	cmp	r3, #6
 80043c6:	d00a      	beq.n	80043de <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80043c8:	4b26      	ldr	r3, [pc, #152]	; (8004464 <HAL_PWREx_ConfigSupply+0xb0>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d001      	beq.n	80043da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e040      	b.n	800445c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	e03e      	b.n	800445c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80043de:	4b21      	ldr	r3, [pc, #132]	; (8004464 <HAL_PWREx_ConfigSupply+0xb0>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80043e6:	491f      	ldr	r1, [pc, #124]	; (8004464 <HAL_PWREx_ConfigSupply+0xb0>)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80043ee:	f7fd fda5 	bl	8001f3c <HAL_GetTick>
 80043f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043f4:	e009      	b.n	800440a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043f6:	f7fd fda1 	bl	8001f3c <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004404:	d901      	bls.n	800440a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e028      	b.n	800445c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800440a:	4b16      	ldr	r3, [pc, #88]	; (8004464 <HAL_PWREx_ConfigSupply+0xb0>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004416:	d1ee      	bne.n	80043f6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b1e      	cmp	r3, #30
 800441c:	d008      	beq.n	8004430 <HAL_PWREx_ConfigSupply+0x7c>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b2e      	cmp	r3, #46	; 0x2e
 8004422:	d005      	beq.n	8004430 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b1d      	cmp	r3, #29
 8004428:	d002      	beq.n	8004430 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b2d      	cmp	r3, #45	; 0x2d
 800442e:	d114      	bne.n	800445a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004430:	f7fd fd84 	bl	8001f3c <HAL_GetTick>
 8004434:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004436:	e009      	b.n	800444c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004438:	f7fd fd80 	bl	8001f3c <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004446:	d901      	bls.n	800444c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e007      	b.n	800445c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <HAL_PWREx_ConfigSupply+0xb0>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004458:	d1ee      	bne.n	8004438 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	58024800 	.word	0x58024800

08004468 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08c      	sub	sp, #48	; 0x30
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d102      	bne.n	800447c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f000 bc1f 	b.w	8004cba <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80b3 	beq.w	80045f0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800448a:	4b95      	ldr	r3, [pc, #596]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004494:	4b92      	ldr	r3, [pc, #584]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449c:	2b10      	cmp	r3, #16
 800449e:	d007      	beq.n	80044b0 <HAL_RCC_OscConfig+0x48>
 80044a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a2:	2b18      	cmp	r3, #24
 80044a4:	d112      	bne.n	80044cc <HAL_RCC_OscConfig+0x64>
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d10d      	bne.n	80044cc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	4b8b      	ldr	r3, [pc, #556]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8098 	beq.w	80045ee <HAL_RCC_OscConfig+0x186>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f040 8093 	bne.w	80045ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e3f6      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d4:	d106      	bne.n	80044e4 <HAL_RCC_OscConfig+0x7c>
 80044d6:	4b82      	ldr	r3, [pc, #520]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a81      	ldr	r2, [pc, #516]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 80044dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e058      	b.n	8004596 <HAL_RCC_OscConfig+0x12e>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d112      	bne.n	8004512 <HAL_RCC_OscConfig+0xaa>
 80044ec:	4b7c      	ldr	r3, [pc, #496]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a7b      	ldr	r2, [pc, #492]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 80044f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	4b79      	ldr	r3, [pc, #484]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a78      	ldr	r2, [pc, #480]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 80044fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	4b76      	ldr	r3, [pc, #472]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a75      	ldr	r2, [pc, #468]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 800450a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	e041      	b.n	8004596 <HAL_RCC_OscConfig+0x12e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800451a:	d112      	bne.n	8004542 <HAL_RCC_OscConfig+0xda>
 800451c:	4b70      	ldr	r3, [pc, #448]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a6f      	ldr	r2, [pc, #444]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 8004522:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	4b6d      	ldr	r3, [pc, #436]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a6c      	ldr	r2, [pc, #432]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 800452e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	4b6a      	ldr	r3, [pc, #424]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a69      	ldr	r2, [pc, #420]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 800453a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	e029      	b.n	8004596 <HAL_RCC_OscConfig+0x12e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800454a:	d112      	bne.n	8004572 <HAL_RCC_OscConfig+0x10a>
 800454c:	4b64      	ldr	r3, [pc, #400]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a63      	ldr	r2, [pc, #396]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 8004552:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	4b61      	ldr	r3, [pc, #388]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a60      	ldr	r2, [pc, #384]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 800455e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	4b5e      	ldr	r3, [pc, #376]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a5d      	ldr	r2, [pc, #372]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 800456a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	e011      	b.n	8004596 <HAL_RCC_OscConfig+0x12e>
 8004572:	4b5b      	ldr	r3, [pc, #364]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a5a      	ldr	r2, [pc, #360]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 8004578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	4b58      	ldr	r3, [pc, #352]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a57      	ldr	r2, [pc, #348]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 8004584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	4b55      	ldr	r3, [pc, #340]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a54      	ldr	r2, [pc, #336]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 8004590:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004594:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d013      	beq.n	80045c6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459e:	f7fd fccd 	bl	8001f3c <HAL_GetTick>
 80045a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a6:	f7fd fcc9 	bl	8001f3c <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b64      	cmp	r3, #100	; 0x64
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e380      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045b8:	4b49      	ldr	r3, [pc, #292]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0f0      	beq.n	80045a6 <HAL_RCC_OscConfig+0x13e>
 80045c4:	e014      	b.n	80045f0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c6:	f7fd fcb9 	bl	8001f3c <HAL_GetTick>
 80045ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045ce:	f7fd fcb5 	bl	8001f3c <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b64      	cmp	r3, #100	; 0x64
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e36c      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045e0:	4b3f      	ldr	r3, [pc, #252]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f0      	bne.n	80045ce <HAL_RCC_OscConfig+0x166>
 80045ec:	e000      	b.n	80045f0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 808c 	beq.w	8004716 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045fe:	4b38      	ldr	r3, [pc, #224]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004606:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004608:	4b35      	ldr	r3, [pc, #212]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_RCC_OscConfig+0x1bc>
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	2b18      	cmp	r3, #24
 8004618:	d137      	bne.n	800468a <HAL_RCC_OscConfig+0x222>
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d132      	bne.n	800468a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004624:	4b2e      	ldr	r3, [pc, #184]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_RCC_OscConfig+0x1d4>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e33e      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800463c:	4b28      	ldr	r3, [pc, #160]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f023 0219 	bic.w	r2, r3, #25
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4925      	ldr	r1, [pc, #148]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 800464a:	4313      	orrs	r3, r2
 800464c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7fd fc75 	bl	8001f3c <HAL_GetTick>
 8004652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004656:	f7fd fc71 	bl	8001f3c <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e328      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004668:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f0      	beq.n	8004656 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004674:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	061b      	lsls	r3, r3, #24
 8004682:	4917      	ldr	r1, [pc, #92]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004688:	e045      	b.n	8004716 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d028      	beq.n	80046e4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004692:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f023 0219 	bic.w	r2, r3, #25
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	4910      	ldr	r1, [pc, #64]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd fc4a 	bl	8001f3c <HAL_GetTick>
 80046a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ac:	f7fd fc46 	bl	8001f3c <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e2fd      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046be:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ca:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	061b      	lsls	r3, r3, #24
 80046d8:	4901      	ldr	r1, [pc, #4]	; (80046e0 <HAL_RCC_OscConfig+0x278>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	604b      	str	r3, [r1, #4]
 80046de:	e01a      	b.n	8004716 <HAL_RCC_OscConfig+0x2ae>
 80046e0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046e4:	4b97      	ldr	r3, [pc, #604]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a96      	ldr	r2, [pc, #600]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f0:	f7fd fc24 	bl	8001f3c <HAL_GetTick>
 80046f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f8:	f7fd fc20 	bl	8001f3c <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e2d7      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800470a:	4b8e      	ldr	r3, [pc, #568]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	2b00      	cmp	r3, #0
 8004720:	d06a      	beq.n	80047f8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004722:	4b88      	ldr	r3, [pc, #544]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800472a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800472c:	4b85      	ldr	r3, [pc, #532]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 800472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004730:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	2b08      	cmp	r3, #8
 8004736:	d007      	beq.n	8004748 <HAL_RCC_OscConfig+0x2e0>
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b18      	cmp	r3, #24
 800473c:	d11b      	bne.n	8004776 <HAL_RCC_OscConfig+0x30e>
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d116      	bne.n	8004776 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004748:	4b7e      	ldr	r3, [pc, #504]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <HAL_RCC_OscConfig+0x2f8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	2b80      	cmp	r3, #128	; 0x80
 800475a:	d001      	beq.n	8004760 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e2ac      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004760:	4b78      	ldr	r3, [pc, #480]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	061b      	lsls	r3, r3, #24
 800476e:	4975      	ldr	r1, [pc, #468]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 8004770:	4313      	orrs	r3, r2
 8004772:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004774:	e040      	b.n	80047f8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d023      	beq.n	80047c6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800477e:	4b71      	ldr	r3, [pc, #452]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a70      	ldr	r2, [pc, #448]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 8004784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478a:	f7fd fbd7 	bl	8001f3c <HAL_GetTick>
 800478e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004792:	f7fd fbd3 	bl	8001f3c <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e28a      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047a4:	4b67      	ldr	r3, [pc, #412]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047b0:	4b64      	ldr	r3, [pc, #400]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	061b      	lsls	r3, r3, #24
 80047be:	4961      	ldr	r1, [pc, #388]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60cb      	str	r3, [r1, #12]
 80047c4:	e018      	b.n	80047f8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80047c6:	4b5f      	ldr	r3, [pc, #380]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a5e      	ldr	r2, [pc, #376]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 80047cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d2:	f7fd fbb3 	bl	8001f3c <HAL_GetTick>
 80047d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047da:	f7fd fbaf 	bl	8001f3c <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e266      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047ec:	4b55      	ldr	r3, [pc, #340]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f0      	bne.n	80047da <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d036      	beq.n	8004872 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d019      	beq.n	8004840 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800480c:	4b4d      	ldr	r3, [pc, #308]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 800480e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004810:	4a4c      	ldr	r2, [pc, #304]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004818:	f7fd fb90 	bl	8001f3c <HAL_GetTick>
 800481c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004820:	f7fd fb8c 	bl	8001f3c <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e243      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004832:	4b44      	ldr	r3, [pc, #272]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 8004834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0x3b8>
 800483e:	e018      	b.n	8004872 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004840:	4b40      	ldr	r3, [pc, #256]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 8004842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004844:	4a3f      	ldr	r2, [pc, #252]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 8004846:	f023 0301 	bic.w	r3, r3, #1
 800484a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484c:	f7fd fb76 	bl	8001f3c <HAL_GetTick>
 8004850:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004854:	f7fd fb72 	bl	8001f3c <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e229      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004866:	4b37      	ldr	r3, [pc, #220]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 8004868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b00      	cmp	r3, #0
 800487c:	d036      	beq.n	80048ec <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d019      	beq.n	80048ba <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004886:	4b2f      	ldr	r3, [pc, #188]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a2e      	ldr	r2, [pc, #184]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 800488c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004890:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004892:	f7fd fb53 	bl	8001f3c <HAL_GetTick>
 8004896:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800489a:	f7fd fb4f 	bl	8001f3c <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e206      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048ac:	4b25      	ldr	r3, [pc, #148]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x432>
 80048b8:	e018      	b.n	80048ec <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048ba:	4b22      	ldr	r3, [pc, #136]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a21      	ldr	r2, [pc, #132]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 80048c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048c6:	f7fd fb39 	bl	8001f3c <HAL_GetTick>
 80048ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ce:	f7fd fb35 	bl	8001f3c <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e1ec      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048e0:	4b18      	ldr	r3, [pc, #96]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1f0      	bne.n	80048ce <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 80af 	beq.w	8004a58 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048fa:	4b13      	ldr	r3, [pc, #76]	; (8004948 <HAL_RCC_OscConfig+0x4e0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a12      	ldr	r2, [pc, #72]	; (8004948 <HAL_RCC_OscConfig+0x4e0>)
 8004900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004904:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004906:	f7fd fb19 	bl	8001f3c <HAL_GetTick>
 800490a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800490e:	f7fd fb15 	bl	8001f3c <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b64      	cmp	r3, #100	; 0x64
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e1cc      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004920:	4b09      	ldr	r3, [pc, #36]	; (8004948 <HAL_RCC_OscConfig+0x4e0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d10b      	bne.n	800494c <HAL_RCC_OscConfig+0x4e4>
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 8004936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004938:	4a02      	ldr	r2, [pc, #8]	; (8004944 <HAL_RCC_OscConfig+0x4dc>)
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	6713      	str	r3, [r2, #112]	; 0x70
 8004940:	e05b      	b.n	80049fa <HAL_RCC_OscConfig+0x592>
 8004942:	bf00      	nop
 8004944:	58024400 	.word	0x58024400
 8004948:	58024800 	.word	0x58024800
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d112      	bne.n	800497a <HAL_RCC_OscConfig+0x512>
 8004954:	4b9d      	ldr	r3, [pc, #628]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004958:	4a9c      	ldr	r2, [pc, #624]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 800495a:	f023 0301 	bic.w	r3, r3, #1
 800495e:	6713      	str	r3, [r2, #112]	; 0x70
 8004960:	4b9a      	ldr	r3, [pc, #616]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004964:	4a99      	ldr	r2, [pc, #612]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800496a:	6713      	str	r3, [r2, #112]	; 0x70
 800496c:	4b97      	ldr	r3, [pc, #604]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	4a96      	ldr	r2, [pc, #600]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004972:	f023 0304 	bic.w	r3, r3, #4
 8004976:	6713      	str	r3, [r2, #112]	; 0x70
 8004978:	e03f      	b.n	80049fa <HAL_RCC_OscConfig+0x592>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b05      	cmp	r3, #5
 8004980:	d112      	bne.n	80049a8 <HAL_RCC_OscConfig+0x540>
 8004982:	4b92      	ldr	r3, [pc, #584]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004986:	4a91      	ldr	r2, [pc, #580]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004988:	f043 0304 	orr.w	r3, r3, #4
 800498c:	6713      	str	r3, [r2, #112]	; 0x70
 800498e:	4b8f      	ldr	r3, [pc, #572]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004992:	4a8e      	ldr	r2, [pc, #568]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004998:	6713      	str	r3, [r2, #112]	; 0x70
 800499a:	4b8c      	ldr	r3, [pc, #560]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	4a8b      	ldr	r2, [pc, #556]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	6713      	str	r3, [r2, #112]	; 0x70
 80049a6:	e028      	b.n	80049fa <HAL_RCC_OscConfig+0x592>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2b85      	cmp	r3, #133	; 0x85
 80049ae:	d112      	bne.n	80049d6 <HAL_RCC_OscConfig+0x56e>
 80049b0:	4b86      	ldr	r3, [pc, #536]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	4a85      	ldr	r2, [pc, #532]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 80049b6:	f043 0304 	orr.w	r3, r3, #4
 80049ba:	6713      	str	r3, [r2, #112]	; 0x70
 80049bc:	4b83      	ldr	r3, [pc, #524]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 80049be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c0:	4a82      	ldr	r2, [pc, #520]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 80049c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c6:	6713      	str	r3, [r2, #112]	; 0x70
 80049c8:	4b80      	ldr	r3, [pc, #512]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	4a7f      	ldr	r2, [pc, #508]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	6713      	str	r3, [r2, #112]	; 0x70
 80049d4:	e011      	b.n	80049fa <HAL_RCC_OscConfig+0x592>
 80049d6:	4b7d      	ldr	r3, [pc, #500]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	4a7c      	ldr	r2, [pc, #496]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	6713      	str	r3, [r2, #112]	; 0x70
 80049e2:	4b7a      	ldr	r3, [pc, #488]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	4a79      	ldr	r2, [pc, #484]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 80049e8:	f023 0304 	bic.w	r3, r3, #4
 80049ec:	6713      	str	r3, [r2, #112]	; 0x70
 80049ee:	4b77      	ldr	r3, [pc, #476]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	4a76      	ldr	r2, [pc, #472]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 80049f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d015      	beq.n	8004a2e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a02:	f7fd fa9b 	bl	8001f3c <HAL_GetTick>
 8004a06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a08:	e00a      	b.n	8004a20 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0a:	f7fd fa97 	bl	8001f3c <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e14c      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a20:	4b6a      	ldr	r3, [pc, #424]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0ee      	beq.n	8004a0a <HAL_RCC_OscConfig+0x5a2>
 8004a2c:	e014      	b.n	8004a58 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2e:	f7fd fa85 	bl	8001f3c <HAL_GetTick>
 8004a32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a34:	e00a      	b.n	8004a4c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a36:	f7fd fa81 	bl	8001f3c <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e136      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a4c:	4b5f      	ldr	r3, [pc, #380]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1ee      	bne.n	8004a36 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 812b 	beq.w	8004cb8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a62:	4b5a      	ldr	r3, [pc, #360]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a6a:	2b18      	cmp	r3, #24
 8004a6c:	f000 80bb 	beq.w	8004be6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	f040 8095 	bne.w	8004ba4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7a:	4b54      	ldr	r3, [pc, #336]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a53      	ldr	r2, [pc, #332]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004a80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a86:	f7fd fa59 	bl	8001f3c <HAL_GetTick>
 8004a8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a8e:	f7fd fa55 	bl	8001f3c <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e10c      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aa0:	4b4a      	ldr	r3, [pc, #296]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f0      	bne.n	8004a8e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aac:	4b47      	ldr	r3, [pc, #284]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ab0:	4b47      	ldr	r3, [pc, #284]	; (8004bd0 <HAL_RCC_OscConfig+0x768>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004abc:	0112      	lsls	r2, r2, #4
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	4942      	ldr	r1, [pc, #264]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	628b      	str	r3, [r1, #40]	; 0x28
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	3b01      	subs	r3, #1
 8004acc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	025b      	lsls	r3, r3, #9
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	041b      	lsls	r3, r3, #16
 8004ae4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aee:	3b01      	subs	r3, #1
 8004af0:	061b      	lsls	r3, r3, #24
 8004af2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004af6:	4935      	ldr	r1, [pc, #212]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004afc:	4b33      	ldr	r3, [pc, #204]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	4a32      	ldr	r2, [pc, #200]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b08:	4b30      	ldr	r3, [pc, #192]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b0c:	4b31      	ldr	r3, [pc, #196]	; (8004bd4 <HAL_RCC_OscConfig+0x76c>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b14:	00d2      	lsls	r2, r2, #3
 8004b16:	492d      	ldr	r1, [pc, #180]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b1c:	4b2b      	ldr	r3, [pc, #172]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	f023 020c 	bic.w	r2, r3, #12
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	4928      	ldr	r1, [pc, #160]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b2e:	4b27      	ldr	r3, [pc, #156]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	f023 0202 	bic.w	r2, r3, #2
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3a:	4924      	ldr	r1, [pc, #144]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b40:	4b22      	ldr	r3, [pc, #136]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	4a21      	ldr	r2, [pc, #132]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b4c:	4b1f      	ldr	r3, [pc, #124]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	4a1e      	ldr	r2, [pc, #120]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b58:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	4a1b      	ldr	r2, [pc, #108]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b64:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b6a:	f043 0301 	orr.w	r3, r3, #1
 8004b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b70:	4b16      	ldr	r3, [pc, #88]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a15      	ldr	r2, [pc, #84]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fd f9de 	bl	8001f3c <HAL_GetTick>
 8004b80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b84:	f7fd f9da 	bl	8001f3c <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e091      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b96:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0x71c>
 8004ba2:	e089      	b.n	8004cb8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba4:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a08      	ldr	r2, [pc, #32]	; (8004bcc <HAL_RCC_OscConfig+0x764>)
 8004baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7fd f9c4 	bl	8001f3c <HAL_GetTick>
 8004bb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bb6:	e00f      	b.n	8004bd8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb8:	f7fd f9c0 	bl	8001f3c <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d908      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e077      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
 8004bca:	bf00      	nop
 8004bcc:	58024400 	.word	0x58024400
 8004bd0:	fffffc0c 	.word	0xfffffc0c
 8004bd4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bd8:	4b3a      	ldr	r3, [pc, #232]	; (8004cc4 <HAL_RCC_OscConfig+0x85c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e9      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x750>
 8004be4:	e068      	b.n	8004cb8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004be6:	4b37      	ldr	r3, [pc, #220]	; (8004cc4 <HAL_RCC_OscConfig+0x85c>)
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004bec:	4b35      	ldr	r3, [pc, #212]	; (8004cc4 <HAL_RCC_OscConfig+0x85c>)
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d031      	beq.n	8004c5e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f003 0203 	and.w	r2, r3, #3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d12a      	bne.n	8004c5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d122      	bne.n	8004c5e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d11a      	bne.n	8004c5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	0a5b      	lsrs	r3, r3, #9
 8004c2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c34:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d111      	bne.n	8004c5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	0c1b      	lsrs	r3, r3, #16
 8004c3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d108      	bne.n	8004c5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	0e1b      	lsrs	r3, r3, #24
 8004c50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d001      	beq.n	8004c62 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e02b      	b.n	8004cba <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c62:	4b18      	ldr	r3, [pc, #96]	; (8004cc4 <HAL_RCC_OscConfig+0x85c>)
 8004c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c66:	08db      	lsrs	r3, r3, #3
 8004c68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c6c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d01f      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c78:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <HAL_RCC_OscConfig+0x85c>)
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	4a11      	ldr	r2, [pc, #68]	; (8004cc4 <HAL_RCC_OscConfig+0x85c>)
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c84:	f7fd f95a 	bl	8001f3c <HAL_GetTick>
 8004c88:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004c8a:	bf00      	nop
 8004c8c:	f7fd f956 	bl	8001f3c <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d0f9      	beq.n	8004c8c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <HAL_RCC_OscConfig+0x85c>)
 8004c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <HAL_RCC_OscConfig+0x860>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ca4:	00d2      	lsls	r2, r2, #3
 8004ca6:	4907      	ldr	r1, [pc, #28]	; (8004cc4 <HAL_RCC_OscConfig+0x85c>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004cac:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <HAL_RCC_OscConfig+0x85c>)
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	4a04      	ldr	r2, [pc, #16]	; (8004cc4 <HAL_RCC_OscConfig+0x85c>)
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3730      	adds	r7, #48	; 0x30
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	58024400 	.word	0x58024400
 8004cc8:	ffff0007 	.word	0xffff0007

08004ccc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e19c      	b.n	800501a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce0:	4b8a      	ldr	r3, [pc, #552]	; (8004f0c <HAL_RCC_ClockConfig+0x240>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d910      	bls.n	8004d10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cee:	4b87      	ldr	r3, [pc, #540]	; (8004f0c <HAL_RCC_ClockConfig+0x240>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f023 020f 	bic.w	r2, r3, #15
 8004cf6:	4985      	ldr	r1, [pc, #532]	; (8004f0c <HAL_RCC_ClockConfig+0x240>)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfe:	4b83      	ldr	r3, [pc, #524]	; (8004f0c <HAL_RCC_ClockConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d001      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e184      	b.n	800501a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d010      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	4b7b      	ldr	r3, [pc, #492]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d908      	bls.n	8004d3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d2c:	4b78      	ldr	r3, [pc, #480]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	4975      	ldr	r1, [pc, #468]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d010      	beq.n	8004d6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695a      	ldr	r2, [r3, #20]
 8004d4e:	4b70      	ldr	r3, [pc, #448]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d908      	bls.n	8004d6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d5a:	4b6d      	ldr	r3, [pc, #436]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	496a      	ldr	r1, [pc, #424]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d010      	beq.n	8004d9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699a      	ldr	r2, [r3, #24]
 8004d7c:	4b64      	ldr	r3, [pc, #400]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d908      	bls.n	8004d9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d88:	4b61      	ldr	r3, [pc, #388]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	495e      	ldr	r1, [pc, #376]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d010      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69da      	ldr	r2, [r3, #28]
 8004daa:	4b59      	ldr	r3, [pc, #356]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d908      	bls.n	8004dc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004db6:	4b56      	ldr	r3, [pc, #344]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	4953      	ldr	r1, [pc, #332]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d010      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	4b4d      	ldr	r3, [pc, #308]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d908      	bls.n	8004df6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de4:	4b4a      	ldr	r3, [pc, #296]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	f023 020f 	bic.w	r2, r3, #15
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	4947      	ldr	r1, [pc, #284]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d055      	beq.n	8004eae <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e02:	4b43      	ldr	r3, [pc, #268]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	4940      	ldr	r1, [pc, #256]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d107      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e1c:	4b3c      	ldr	r3, [pc, #240]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d121      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0f6      	b.n	800501a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d107      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e34:	4b36      	ldr	r3, [pc, #216]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d115      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0ea      	b.n	800501a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d107      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e4c:	4b30      	ldr	r3, [pc, #192]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d109      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0de      	b.n	800501a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e5c:	4b2c      	ldr	r3, [pc, #176]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0d6      	b.n	800501a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e6c:	4b28      	ldr	r3, [pc, #160]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f023 0207 	bic.w	r2, r3, #7
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	4925      	ldr	r1, [pc, #148]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7e:	f7fd f85d 	bl	8001f3c <HAL_GetTick>
 8004e82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e84:	e00a      	b.n	8004e9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e86:	f7fd f859 	bl	8001f3c <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e0be      	b.n	800501a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9c:	4b1c      	ldr	r3, [pc, #112]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d1eb      	bne.n	8004e86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d010      	beq.n	8004edc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	4b14      	ldr	r3, [pc, #80]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d208      	bcs.n	8004edc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eca:	4b11      	ldr	r3, [pc, #68]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	f023 020f 	bic.w	r2, r3, #15
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	490e      	ldr	r1, [pc, #56]	; (8004f10 <HAL_RCC_ClockConfig+0x244>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004edc:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <HAL_RCC_ClockConfig+0x240>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 030f 	and.w	r3, r3, #15
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d214      	bcs.n	8004f14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eea:	4b08      	ldr	r3, [pc, #32]	; (8004f0c <HAL_RCC_ClockConfig+0x240>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 020f 	bic.w	r2, r3, #15
 8004ef2:	4906      	ldr	r1, [pc, #24]	; (8004f0c <HAL_RCC_ClockConfig+0x240>)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efa:	4b04      	ldr	r3, [pc, #16]	; (8004f0c <HAL_RCC_ClockConfig+0x240>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d005      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e086      	b.n	800501a <HAL_RCC_ClockConfig+0x34e>
 8004f0c:	52002000 	.word	0x52002000
 8004f10:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d010      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	4b3f      	ldr	r3, [pc, #252]	; (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d208      	bcs.n	8004f42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f30:	4b3c      	ldr	r3, [pc, #240]	; (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	4939      	ldr	r1, [pc, #228]	; (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d010      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695a      	ldr	r2, [r3, #20]
 8004f52:	4b34      	ldr	r3, [pc, #208]	; (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d208      	bcs.n	8004f70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f5e:	4b31      	ldr	r3, [pc, #196]	; (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	492e      	ldr	r1, [pc, #184]	; (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d010      	beq.n	8004f9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699a      	ldr	r2, [r3, #24]
 8004f80:	4b28      	ldr	r3, [pc, #160]	; (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d208      	bcs.n	8004f9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f8c:	4b25      	ldr	r3, [pc, #148]	; (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	4922      	ldr	r1, [pc, #136]	; (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d010      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69da      	ldr	r2, [r3, #28]
 8004fae:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d208      	bcs.n	8004fcc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fba:	4b1a      	ldr	r3, [pc, #104]	; (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	4917      	ldr	r1, [pc, #92]	; (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004fcc:	f000 f834 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b14      	ldr	r3, [pc, #80]	; (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	0a1b      	lsrs	r3, r3, #8
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	4912      	ldr	r1, [pc, #72]	; (8005028 <HAL_RCC_ClockConfig+0x35c>)
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	f003 031f 	and.w	r3, r3, #31
 8004fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004fea:	4b0e      	ldr	r3, [pc, #56]	; (8005024 <HAL_RCC_ClockConfig+0x358>)
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	4a0d      	ldr	r2, [pc, #52]	; (8005028 <HAL_RCC_ClockConfig+0x35c>)
 8004ff4:	5cd3      	ldrb	r3, [r2, r3]
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8005000:	4a0a      	ldr	r2, [pc, #40]	; (800502c <HAL_RCC_ClockConfig+0x360>)
 8005002:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005004:	4a0a      	ldr	r2, [pc, #40]	; (8005030 <HAL_RCC_ClockConfig+0x364>)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800500a:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <HAL_RCC_ClockConfig+0x368>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fc ff4a 	bl	8001ea8 <HAL_InitTick>
 8005014:	4603      	mov	r3, r0
 8005016:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005018:	7bfb      	ldrb	r3, [r7, #15]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	58024400 	.word	0x58024400
 8005028:	0800ba0c 	.word	0x0800ba0c
 800502c:	24000010 	.word	0x24000010
 8005030:	2400000c 	.word	0x2400000c
 8005034:	24000014 	.word	0x24000014

08005038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005038:	b480      	push	{r7}
 800503a:	b089      	sub	sp, #36	; 0x24
 800503c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800503e:	4bb3      	ldr	r3, [pc, #716]	; (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005046:	2b18      	cmp	r3, #24
 8005048:	f200 8155 	bhi.w	80052f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800504c:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <HAL_RCC_GetSysClockFreq+0x1c>)
 800504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005052:	bf00      	nop
 8005054:	080050b9 	.word	0x080050b9
 8005058:	080052f7 	.word	0x080052f7
 800505c:	080052f7 	.word	0x080052f7
 8005060:	080052f7 	.word	0x080052f7
 8005064:	080052f7 	.word	0x080052f7
 8005068:	080052f7 	.word	0x080052f7
 800506c:	080052f7 	.word	0x080052f7
 8005070:	080052f7 	.word	0x080052f7
 8005074:	080050df 	.word	0x080050df
 8005078:	080052f7 	.word	0x080052f7
 800507c:	080052f7 	.word	0x080052f7
 8005080:	080052f7 	.word	0x080052f7
 8005084:	080052f7 	.word	0x080052f7
 8005088:	080052f7 	.word	0x080052f7
 800508c:	080052f7 	.word	0x080052f7
 8005090:	080052f7 	.word	0x080052f7
 8005094:	080050e5 	.word	0x080050e5
 8005098:	080052f7 	.word	0x080052f7
 800509c:	080052f7 	.word	0x080052f7
 80050a0:	080052f7 	.word	0x080052f7
 80050a4:	080052f7 	.word	0x080052f7
 80050a8:	080052f7 	.word	0x080052f7
 80050ac:	080052f7 	.word	0x080052f7
 80050b0:	080052f7 	.word	0x080052f7
 80050b4:	080050eb 	.word	0x080050eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050b8:	4b94      	ldr	r3, [pc, #592]	; (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d009      	beq.n	80050d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050c4:	4b91      	ldr	r3, [pc, #580]	; (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	08db      	lsrs	r3, r3, #3
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	4a90      	ldr	r2, [pc, #576]	; (8005310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
 80050d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80050d6:	e111      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050d8:	4b8d      	ldr	r3, [pc, #564]	; (8005310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050da:	61bb      	str	r3, [r7, #24]
      break;
 80050dc:	e10e      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80050de:	4b8d      	ldr	r3, [pc, #564]	; (8005314 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050e0:	61bb      	str	r3, [r7, #24]
      break;
 80050e2:	e10b      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80050e4:	4b8c      	ldr	r3, [pc, #560]	; (8005318 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80050e6:	61bb      	str	r3, [r7, #24]
      break;
 80050e8:	e108      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050ea:	4b88      	ldr	r3, [pc, #544]	; (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80050f4:	4b85      	ldr	r3, [pc, #532]	; (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f8:	091b      	lsrs	r3, r3, #4
 80050fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005100:	4b82      	ldr	r3, [pc, #520]	; (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800510a:	4b80      	ldr	r3, [pc, #512]	; (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800510c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510e:	08db      	lsrs	r3, r3, #3
 8005110:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	fb02 f303 	mul.w	r3, r2, r3
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005122:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80e1 	beq.w	80052f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b02      	cmp	r3, #2
 8005132:	f000 8083 	beq.w	800523c <HAL_RCC_GetSysClockFreq+0x204>
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b02      	cmp	r3, #2
 800513a:	f200 80a1 	bhi.w	8005280 <HAL_RCC_GetSysClockFreq+0x248>
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <HAL_RCC_GetSysClockFreq+0x114>
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d056      	beq.n	80051f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800514a:	e099      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800514c:	4b6f      	ldr	r3, [pc, #444]	; (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b00      	cmp	r3, #0
 8005156:	d02d      	beq.n	80051b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005158:	4b6c      	ldr	r3, [pc, #432]	; (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	08db      	lsrs	r3, r3, #3
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	4a6b      	ldr	r2, [pc, #428]	; (8005310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005164:	fa22 f303 	lsr.w	r3, r2, r3
 8005168:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	ee07 3a90 	vmov	s15, r3
 8005170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005182:	4b62      	ldr	r3, [pc, #392]	; (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005192:	ed97 6a02 	vldr	s12, [r7, #8]
 8005196:	eddf 5a61 	vldr	s11, [pc, #388]	; 800531c <HAL_RCC_GetSysClockFreq+0x2e4>
 800519a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800519e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80051b2:	e087      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	ee07 3a90 	vmov	s15, r3
 80051ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051be:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005320 <HAL_RCC_GetSysClockFreq+0x2e8>
 80051c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051c6:	4b51      	ldr	r3, [pc, #324]	; (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80051da:	eddf 5a50 	vldr	s11, [pc, #320]	; 800531c <HAL_RCC_GetSysClockFreq+0x2e4>
 80051de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051f6:	e065      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005202:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005324 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800520a:	4b40      	ldr	r3, [pc, #256]	; (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800521a:	ed97 6a02 	vldr	s12, [r7, #8]
 800521e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800531c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800522a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800522e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005236:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800523a:	e043      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005246:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005328 <HAL_RCC_GetSysClockFreq+0x2f0>
 800524a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800524e:	4b2f      	ldr	r3, [pc, #188]	; (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800525e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005262:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800531c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800526a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800526e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800527a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800527e:	e021      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005324 <HAL_RCC_GetSysClockFreq+0x2ec>
 800528e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005292:	4b1e      	ldr	r3, [pc, #120]	; (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80052a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800531c <HAL_RCC_GetSysClockFreq+0x2e4>
 80052aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80052c4:	4b11      	ldr	r3, [pc, #68]	; (800530c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c8:	0a5b      	lsrs	r3, r3, #9
 80052ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ce:	3301      	adds	r3, #1
 80052d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	ee07 3a90 	vmov	s15, r3
 80052d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80052e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052e8:	ee17 3a90 	vmov	r3, s15
 80052ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80052ee:	e005      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	61bb      	str	r3, [r7, #24]
      break;
 80052f4:	e002      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80052f6:	4b07      	ldr	r3, [pc, #28]	; (8005314 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052f8:	61bb      	str	r3, [r7, #24]
      break;
 80052fa:	bf00      	nop
  }

  return sysclockfreq;
 80052fc:	69bb      	ldr	r3, [r7, #24]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3724      	adds	r7, #36	; 0x24
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	58024400 	.word	0x58024400
 8005310:	03d09000 	.word	0x03d09000
 8005314:	003d0900 	.word	0x003d0900
 8005318:	007a1200 	.word	0x007a1200
 800531c:	46000000 	.word	0x46000000
 8005320:	4c742400 	.word	0x4c742400
 8005324:	4a742400 	.word	0x4a742400
 8005328:	4af42400 	.word	0x4af42400

0800532c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005332:	f7ff fe81 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8005336:	4602      	mov	r2, r0
 8005338:	4b10      	ldr	r3, [pc, #64]	; (800537c <HAL_RCC_GetHCLKFreq+0x50>)
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	0a1b      	lsrs	r3, r3, #8
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	490f      	ldr	r1, [pc, #60]	; (8005380 <HAL_RCC_GetHCLKFreq+0x54>)
 8005344:	5ccb      	ldrb	r3, [r1, r3]
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	fa22 f303 	lsr.w	r3, r2, r3
 800534e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005350:	4b0a      	ldr	r3, [pc, #40]	; (800537c <HAL_RCC_GetHCLKFreq+0x50>)
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	4a09      	ldr	r2, [pc, #36]	; (8005380 <HAL_RCC_GetHCLKFreq+0x54>)
 800535a:	5cd3      	ldrb	r3, [r2, r3]
 800535c:	f003 031f 	and.w	r3, r3, #31
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	fa22 f303 	lsr.w	r3, r2, r3
 8005366:	4a07      	ldr	r2, [pc, #28]	; (8005384 <HAL_RCC_GetHCLKFreq+0x58>)
 8005368:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800536a:	4a07      	ldr	r2, [pc, #28]	; (8005388 <HAL_RCC_GetHCLKFreq+0x5c>)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005370:	4b04      	ldr	r3, [pc, #16]	; (8005384 <HAL_RCC_GetHCLKFreq+0x58>)
 8005372:	681b      	ldr	r3, [r3, #0]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	58024400 	.word	0x58024400
 8005380:	0800ba0c 	.word	0x0800ba0c
 8005384:	24000010 	.word	0x24000010
 8005388:	2400000c 	.word	0x2400000c

0800538c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005390:	f7ff ffcc 	bl	800532c <HAL_RCC_GetHCLKFreq>
 8005394:	4602      	mov	r2, r0
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	091b      	lsrs	r3, r3, #4
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	4904      	ldr	r1, [pc, #16]	; (80053b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053a2:	5ccb      	ldrb	r3, [r1, r3]
 80053a4:	f003 031f 	and.w	r3, r3, #31
 80053a8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	58024400 	.word	0x58024400
 80053b4:	0800ba0c 	.word	0x0800ba0c

080053b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80053bc:	f7ff ffb6 	bl	800532c <HAL_RCC_GetHCLKFreq>
 80053c0:	4602      	mov	r2, r0
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	0a1b      	lsrs	r3, r3, #8
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	4904      	ldr	r1, [pc, #16]	; (80053e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ce:	5ccb      	ldrb	r3, [r1, r3]
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80053d8:	4618      	mov	r0, r3
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	58024400 	.word	0x58024400
 80053e0:	0800ba0c 	.word	0x0800ba0c

080053e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053e8:	b0c8      	sub	sp, #288	; 0x120
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053f0:	2300      	movs	r3, #0
 80053f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053f6:	2300      	movs	r3, #0
 80053f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005408:	2500      	movs	r5, #0
 800540a:	ea54 0305 	orrs.w	r3, r4, r5
 800540e:	d049      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005416:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800541a:	d02f      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800541c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005420:	d828      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005422:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005426:	d01a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005428:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800542c:	d822      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005436:	d007      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005438:	e01c      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800543a:	4ba7      	ldr	r3, [pc, #668]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543e:	4aa6      	ldr	r2, [pc, #664]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005444:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005446:	e01a      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005448:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800544c:	3308      	adds	r3, #8
 800544e:	2102      	movs	r1, #2
 8005450:	4618      	mov	r0, r3
 8005452:	f002 fa6d 	bl	8007930 <RCCEx_PLL2_Config>
 8005456:	4603      	mov	r3, r0
 8005458:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800545c:	e00f      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800545e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005462:	3328      	adds	r3, #40	; 0x28
 8005464:	2102      	movs	r1, #2
 8005466:	4618      	mov	r0, r3
 8005468:	f002 fb14 	bl	8007a94 <RCCEx_PLL3_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005472:	e004      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800547a:	e000      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800547c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800547e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10a      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005486:	4b94      	ldr	r3, [pc, #592]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800548a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800548e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005494:	4a90      	ldr	r2, [pc, #576]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005496:	430b      	orrs	r3, r1
 8005498:	6513      	str	r3, [r2, #80]	; 0x50
 800549a:	e003      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800549c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80054b0:	f04f 0900 	mov.w	r9, #0
 80054b4:	ea58 0309 	orrs.w	r3, r8, r9
 80054b8:	d047      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80054ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d82a      	bhi.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80054c4:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ca:	bf00      	nop
 80054cc:	080054e1 	.word	0x080054e1
 80054d0:	080054ef 	.word	0x080054ef
 80054d4:	08005505 	.word	0x08005505
 80054d8:	08005523 	.word	0x08005523
 80054dc:	08005523 	.word	0x08005523
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054e0:	4b7d      	ldr	r3, [pc, #500]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	4a7c      	ldr	r2, [pc, #496]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054ec:	e01a      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f2:	3308      	adds	r3, #8
 80054f4:	2100      	movs	r1, #0
 80054f6:	4618      	mov	r0, r3
 80054f8:	f002 fa1a 	bl	8007930 <RCCEx_PLL2_Config>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005502:	e00f      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005508:	3328      	adds	r3, #40	; 0x28
 800550a:	2100      	movs	r1, #0
 800550c:	4618      	mov	r0, r3
 800550e:	f002 fac1 	bl	8007a94 <RCCEx_PLL3_Config>
 8005512:	4603      	mov	r3, r0
 8005514:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005518:	e004      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005520:	e000      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005524:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10a      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800552c:	4b6a      	ldr	r3, [pc, #424]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800552e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005530:	f023 0107 	bic.w	r1, r3, #7
 8005534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553a:	4a67      	ldr	r2, [pc, #412]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800553c:	430b      	orrs	r3, r1
 800553e:	6513      	str	r3, [r2, #80]	; 0x50
 8005540:	e003      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005542:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005546:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800554a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800554e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005552:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005556:	f04f 0b00 	mov.w	fp, #0
 800555a:	ea5a 030b 	orrs.w	r3, sl, fp
 800555e:	d054      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005560:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005566:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800556a:	d036      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800556c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005570:	d82f      	bhi.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005576:	d032      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557c:	d829      	bhi.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800557e:	2bc0      	cmp	r3, #192	; 0xc0
 8005580:	d02f      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005582:	2bc0      	cmp	r3, #192	; 0xc0
 8005584:	d825      	bhi.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005586:	2b80      	cmp	r3, #128	; 0x80
 8005588:	d018      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800558a:	2b80      	cmp	r3, #128	; 0x80
 800558c:	d821      	bhi.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005592:	2b40      	cmp	r3, #64	; 0x40
 8005594:	d007      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005596:	e01c      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005598:	4b4f      	ldr	r3, [pc, #316]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	4a4e      	ldr	r2, [pc, #312]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800559e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80055a4:	e01e      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055aa:	3308      	adds	r3, #8
 80055ac:	2100      	movs	r1, #0
 80055ae:	4618      	mov	r0, r3
 80055b0:	f002 f9be 	bl	8007930 <RCCEx_PLL2_Config>
 80055b4:	4603      	mov	r3, r0
 80055b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80055ba:	e013      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c0:	3328      	adds	r3, #40	; 0x28
 80055c2:	2100      	movs	r1, #0
 80055c4:	4618      	mov	r0, r3
 80055c6:	f002 fa65 	bl	8007a94 <RCCEx_PLL3_Config>
 80055ca:	4603      	mov	r3, r0
 80055cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80055d0:	e008      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80055d8:	e004      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80055da:	bf00      	nop
 80055dc:	e002      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80055de:	bf00      	nop
 80055e0:	e000      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80055e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80055ec:	4b3a      	ldr	r3, [pc, #232]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80055f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fa:	4a37      	ldr	r2, [pc, #220]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055fc:	430b      	orrs	r3, r1
 80055fe:	6513      	str	r3, [r2, #80]	; 0x50
 8005600:	e003      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005602:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005606:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800560a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005612:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005616:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800561a:	2300      	movs	r3, #0
 800561c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005620:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005624:	460b      	mov	r3, r1
 8005626:	4313      	orrs	r3, r2
 8005628:	d05c      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800562a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800562e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005630:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005634:	d03b      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005636:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800563a:	d834      	bhi.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800563c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005640:	d037      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005646:	d82e      	bhi.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005648:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800564c:	d033      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800564e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005652:	d828      	bhi.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005658:	d01a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800565a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565e:	d822      	bhi.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005668:	d007      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800566a:	e01c      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800566c:	4b1a      	ldr	r3, [pc, #104]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	4a19      	ldr	r2, [pc, #100]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005676:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005678:	e01e      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800567a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567e:	3308      	adds	r3, #8
 8005680:	2100      	movs	r1, #0
 8005682:	4618      	mov	r0, r3
 8005684:	f002 f954 	bl	8007930 <RCCEx_PLL2_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800568e:	e013      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005694:	3328      	adds	r3, #40	; 0x28
 8005696:	2100      	movs	r1, #0
 8005698:	4618      	mov	r0, r3
 800569a:	f002 f9fb 	bl	8007a94 <RCCEx_PLL3_Config>
 800569e:	4603      	mov	r3, r0
 80056a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80056a4:	e008      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80056ac:	e004      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80056ae:	bf00      	nop
 80056b0:	e002      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80056b2:	bf00      	nop
 80056b4:	e000      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80056b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10d      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80056c0:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80056c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ce:	4a02      	ldr	r2, [pc, #8]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056d0:	430b      	orrs	r3, r1
 80056d2:	6513      	str	r3, [r2, #80]	; 0x50
 80056d4:	e006      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80056d6:	bf00      	nop
 80056d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80056e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80056e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80056f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056f4:	2300      	movs	r3, #0
 80056f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80056fe:	460b      	mov	r3, r1
 8005700:	4313      	orrs	r3, r2
 8005702:	d03a      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570a:	2b30      	cmp	r3, #48	; 0x30
 800570c:	d01f      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800570e:	2b30      	cmp	r3, #48	; 0x30
 8005710:	d819      	bhi.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005712:	2b20      	cmp	r3, #32
 8005714:	d00c      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005716:	2b20      	cmp	r3, #32
 8005718:	d815      	bhi.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800571a:	2b00      	cmp	r3, #0
 800571c:	d019      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800571e:	2b10      	cmp	r3, #16
 8005720:	d111      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005722:	4bae      	ldr	r3, [pc, #696]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005726:	4aad      	ldr	r2, [pc, #692]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800572c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800572e:	e011      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005734:	3308      	adds	r3, #8
 8005736:	2102      	movs	r1, #2
 8005738:	4618      	mov	r0, r3
 800573a:	f002 f8f9 	bl	8007930 <RCCEx_PLL2_Config>
 800573e:	4603      	mov	r3, r0
 8005740:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005744:	e006      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800574c:	e002      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800574e:	bf00      	nop
 8005750:	e000      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005752:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005754:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800575c:	4b9f      	ldr	r3, [pc, #636]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800575e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005760:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576a:	4a9c      	ldr	r2, [pc, #624]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800576c:	430b      	orrs	r3, r1
 800576e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005770:	e003      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005772:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005776:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800577a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005786:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800578a:	2300      	movs	r3, #0
 800578c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005790:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005794:	460b      	mov	r3, r1
 8005796:	4313      	orrs	r3, r2
 8005798:	d051      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800579a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800579e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057a4:	d035      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80057a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057aa:	d82e      	bhi.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80057ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057b0:	d031      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80057b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057b6:	d828      	bhi.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80057b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057bc:	d01a      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80057be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c2:	d822      	bhi.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80057c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057cc:	d007      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80057ce:	e01c      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d0:	4b82      	ldr	r3, [pc, #520]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	4a81      	ldr	r2, [pc, #516]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057dc:	e01c      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e2:	3308      	adds	r3, #8
 80057e4:	2100      	movs	r1, #0
 80057e6:	4618      	mov	r0, r3
 80057e8:	f002 f8a2 	bl	8007930 <RCCEx_PLL2_Config>
 80057ec:	4603      	mov	r3, r0
 80057ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057f2:	e011      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057f8:	3328      	adds	r3, #40	; 0x28
 80057fa:	2100      	movs	r1, #0
 80057fc:	4618      	mov	r0, r3
 80057fe:	f002 f949 	bl	8007a94 <RCCEx_PLL3_Config>
 8005802:	4603      	mov	r3, r0
 8005804:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005808:	e006      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005810:	e002      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005812:	bf00      	nop
 8005814:	e000      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005818:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005820:	4b6e      	ldr	r3, [pc, #440]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005824:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800582c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800582e:	4a6b      	ldr	r2, [pc, #428]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005830:	430b      	orrs	r3, r1
 8005832:	6513      	str	r3, [r2, #80]	; 0x50
 8005834:	e003      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005836:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800583a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800583e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005846:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800584a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800584e:	2300      	movs	r3, #0
 8005850:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005854:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005858:	460b      	mov	r3, r1
 800585a:	4313      	orrs	r3, r2
 800585c:	d053      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800585e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005868:	d033      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800586a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800586e:	d82c      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005870:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005874:	d02f      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005876:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800587a:	d826      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800587c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005880:	d02b      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005882:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005886:	d820      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005888:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800588c:	d012      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800588e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005892:	d81a      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005894:	2b00      	cmp	r3, #0
 8005896:	d022      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800589c:	d115      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800589e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a2:	3308      	adds	r3, #8
 80058a4:	2101      	movs	r1, #1
 80058a6:	4618      	mov	r0, r3
 80058a8:	f002 f842 	bl	8007930 <RCCEx_PLL2_Config>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80058b2:	e015      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058b8:	3328      	adds	r3, #40	; 0x28
 80058ba:	2101      	movs	r1, #1
 80058bc:	4618      	mov	r0, r3
 80058be:	f002 f8e9 	bl	8007a94 <RCCEx_PLL3_Config>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80058c8:	e00a      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80058d0:	e006      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80058d2:	bf00      	nop
 80058d4:	e004      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80058d6:	bf00      	nop
 80058d8:	e002      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80058da:	bf00      	nop
 80058dc:	e000      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80058de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10a      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80058e8:	4b3c      	ldr	r3, [pc, #240]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80058f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058f6:	4a39      	ldr	r2, [pc, #228]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058f8:	430b      	orrs	r3, r1
 80058fa:	6513      	str	r3, [r2, #80]	; 0x50
 80058fc:	e003      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005902:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800590a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005912:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005916:	2300      	movs	r3, #0
 8005918:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800591c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005920:	460b      	mov	r3, r1
 8005922:	4313      	orrs	r3, r2
 8005924:	d060      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800592a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800592e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005932:	d039      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005934:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005938:	d832      	bhi.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800593a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800593e:	d035      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005940:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005944:	d82c      	bhi.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594a:	d031      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800594c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005950:	d826      	bhi.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005952:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005956:	d02d      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005958:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800595c:	d820      	bhi.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800595e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005962:	d012      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005968:	d81a      	bhi.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d024      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800596e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005972:	d115      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005978:	3308      	adds	r3, #8
 800597a:	2101      	movs	r1, #1
 800597c:	4618      	mov	r0, r3
 800597e:	f001 ffd7 	bl	8007930 <RCCEx_PLL2_Config>
 8005982:	4603      	mov	r3, r0
 8005984:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005988:	e017      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800598a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800598e:	3328      	adds	r3, #40	; 0x28
 8005990:	2101      	movs	r1, #1
 8005992:	4618      	mov	r0, r3
 8005994:	f002 f87e 	bl	8007a94 <RCCEx_PLL3_Config>
 8005998:	4603      	mov	r3, r0
 800599a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800599e:	e00c      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80059a6:	e008      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80059a8:	bf00      	nop
 80059aa:	e006      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80059ac:	bf00      	nop
 80059ae:	e004      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80059b0:	bf00      	nop
 80059b2:	e002      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80059b4:	bf00      	nop
 80059b6:	e000      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80059b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10e      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80059c2:	4b06      	ldr	r3, [pc, #24]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80059ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059d2:	4a02      	ldr	r2, [pc, #8]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059d4:	430b      	orrs	r3, r1
 80059d6:	6593      	str	r3, [r2, #88]	; 0x58
 80059d8:	e006      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80059da:	bf00      	nop
 80059dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80059f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059f8:	2300      	movs	r3, #0
 80059fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80059fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a02:	460b      	mov	r3, r1
 8005a04:	4313      	orrs	r3, r2
 8005a06:	d037      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a12:	d00e      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a18:	d816      	bhi.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d018      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005a1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a22:	d111      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a24:	4bc4      	ldr	r3, [pc, #784]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	4ac3      	ldr	r2, [pc, #780]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a30:	e00f      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a36:	3308      	adds	r3, #8
 8005a38:	2101      	movs	r1, #1
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f001 ff78 	bl	8007930 <RCCEx_PLL2_Config>
 8005a40:	4603      	mov	r3, r0
 8005a42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a46:	e004      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005a4e:	e000      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10a      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a5a:	4bb7      	ldr	r3, [pc, #732]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a68:	4ab3      	ldr	r2, [pc, #716]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a6a:	430b      	orrs	r3, r1
 8005a6c:	6513      	str	r3, [r2, #80]	; 0x50
 8005a6e:	e003      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005a84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005a8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4313      	orrs	r3, r2
 8005a96:	d039      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d81c      	bhi.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005aa2:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005ae5 	.word	0x08005ae5
 8005aac:	08005ab9 	.word	0x08005ab9
 8005ab0:	08005ac7 	.word	0x08005ac7
 8005ab4:	08005ae5 	.word	0x08005ae5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab8:	4b9f      	ldr	r3, [pc, #636]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	4a9e      	ldr	r2, [pc, #632]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ac4:	e00f      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aca:	3308      	adds	r3, #8
 8005acc:	2102      	movs	r1, #2
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f001 ff2e 	bl	8007930 <RCCEx_PLL2_Config>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ada:	e004      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005ae2:	e000      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ae6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005aee:	4b92      	ldr	r3, [pc, #584]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af2:	f023 0103 	bic.w	r1, r3, #3
 8005af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005afc:	4a8e      	ldr	r2, [pc, #568]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005afe:	430b      	orrs	r3, r1
 8005b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b02:	e003      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005b18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005b26:	460b      	mov	r3, r1
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	f000 8099 	beq.w	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b2e:	4b83      	ldr	r3, [pc, #524]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a82      	ldr	r2, [pc, #520]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b3a:	f7fc f9ff 	bl	8001f3c <HAL_GetTick>
 8005b3e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b42:	e00b      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b44:	f7fc f9fa 	bl	8001f3c <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b64      	cmp	r3, #100	; 0x64
 8005b52:	d903      	bls.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005b5a:	e005      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b5c:	4b77      	ldr	r3, [pc, #476]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0ed      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005b68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d173      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b70:	4b71      	ldr	r3, [pc, #452]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b7c:	4053      	eors	r3, r2
 8005b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d015      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b86:	4b6c      	ldr	r3, [pc, #432]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b92:	4b69      	ldr	r3, [pc, #420]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b96:	4a68      	ldr	r2, [pc, #416]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b9c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b9e:	4b66      	ldr	r3, [pc, #408]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba2:	4a65      	ldr	r2, [pc, #404]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ba8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005baa:	4a63      	ldr	r2, [pc, #396]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bbe:	d118      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc0:	f7fc f9bc 	bl	8001f3c <HAL_GetTick>
 8005bc4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bc8:	e00d      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bca:	f7fc f9b7 	bl	8001f3c <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005bd4:	1ad2      	subs	r2, r2, r3
 8005bd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d903      	bls.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8005be4:	e005      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005be6:	4b54      	ldr	r3, [pc, #336]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0eb      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005bf2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d129      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c0a:	d10e      	bne.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005c0c:	4b4a      	ldr	r3, [pc, #296]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c1c:	091a      	lsrs	r2, r3, #4
 8005c1e:	4b48      	ldr	r3, [pc, #288]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c20:	4013      	ands	r3, r2
 8005c22:	4a45      	ldr	r2, [pc, #276]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c24:	430b      	orrs	r3, r1
 8005c26:	6113      	str	r3, [r2, #16]
 8005c28:	e005      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005c2a:	4b43      	ldr	r3, [pc, #268]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	4a42      	ldr	r2, [pc, #264]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c34:	6113      	str	r3, [r2, #16]
 8005c36:	4b40      	ldr	r3, [pc, #256]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c38:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c46:	4a3c      	ldr	r2, [pc, #240]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c4c:	e008      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005c56:	e003      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f002 0301 	and.w	r3, r2, #1
 8005c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c70:	2300      	movs	r3, #0
 8005c72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	f000 8090 	beq.w	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c8a:	2b28      	cmp	r3, #40	; 0x28
 8005c8c:	d870      	bhi.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005c8e:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005d79 	.word	0x08005d79
 8005c98:	08005d71 	.word	0x08005d71
 8005c9c:	08005d71 	.word	0x08005d71
 8005ca0:	08005d71 	.word	0x08005d71
 8005ca4:	08005d71 	.word	0x08005d71
 8005ca8:	08005d71 	.word	0x08005d71
 8005cac:	08005d71 	.word	0x08005d71
 8005cb0:	08005d71 	.word	0x08005d71
 8005cb4:	08005d45 	.word	0x08005d45
 8005cb8:	08005d71 	.word	0x08005d71
 8005cbc:	08005d71 	.word	0x08005d71
 8005cc0:	08005d71 	.word	0x08005d71
 8005cc4:	08005d71 	.word	0x08005d71
 8005cc8:	08005d71 	.word	0x08005d71
 8005ccc:	08005d71 	.word	0x08005d71
 8005cd0:	08005d71 	.word	0x08005d71
 8005cd4:	08005d5b 	.word	0x08005d5b
 8005cd8:	08005d71 	.word	0x08005d71
 8005cdc:	08005d71 	.word	0x08005d71
 8005ce0:	08005d71 	.word	0x08005d71
 8005ce4:	08005d71 	.word	0x08005d71
 8005ce8:	08005d71 	.word	0x08005d71
 8005cec:	08005d71 	.word	0x08005d71
 8005cf0:	08005d71 	.word	0x08005d71
 8005cf4:	08005d79 	.word	0x08005d79
 8005cf8:	08005d71 	.word	0x08005d71
 8005cfc:	08005d71 	.word	0x08005d71
 8005d00:	08005d71 	.word	0x08005d71
 8005d04:	08005d71 	.word	0x08005d71
 8005d08:	08005d71 	.word	0x08005d71
 8005d0c:	08005d71 	.word	0x08005d71
 8005d10:	08005d71 	.word	0x08005d71
 8005d14:	08005d79 	.word	0x08005d79
 8005d18:	08005d71 	.word	0x08005d71
 8005d1c:	08005d71 	.word	0x08005d71
 8005d20:	08005d71 	.word	0x08005d71
 8005d24:	08005d71 	.word	0x08005d71
 8005d28:	08005d71 	.word	0x08005d71
 8005d2c:	08005d71 	.word	0x08005d71
 8005d30:	08005d71 	.word	0x08005d71
 8005d34:	08005d79 	.word	0x08005d79
 8005d38:	58024400 	.word	0x58024400
 8005d3c:	58024800 	.word	0x58024800
 8005d40:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d48:	3308      	adds	r3, #8
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 fdef 	bl	8007930 <RCCEx_PLL2_Config>
 8005d52:	4603      	mov	r3, r0
 8005d54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d58:	e00f      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d5e:	3328      	adds	r3, #40	; 0x28
 8005d60:	2101      	movs	r1, #1
 8005d62:	4618      	mov	r0, r3
 8005d64:	f001 fe96 	bl	8007a94 <RCCEx_PLL3_Config>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d6e:	e004      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d76:	e000      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10b      	bne.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d82:	4bc0      	ldr	r3, [pc, #768]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d86:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d92:	4abc      	ldr	r2, [pc, #752]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005d94:	430b      	orrs	r3, r1
 8005d96:	6553      	str	r3, [r2, #84]	; 0x54
 8005d98:	e003      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	f002 0302 	and.w	r3, r2, #2
 8005dae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005db2:	2300      	movs	r3, #0
 8005db4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005db8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	d043      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dca:	2b05      	cmp	r3, #5
 8005dcc:	d824      	bhi.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005dce:	a201      	add	r2, pc, #4	; (adr r2, 8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005e21 	.word	0x08005e21
 8005dd8:	08005ded 	.word	0x08005ded
 8005ddc:	08005e03 	.word	0x08005e03
 8005de0:	08005e21 	.word	0x08005e21
 8005de4:	08005e21 	.word	0x08005e21
 8005de8:	08005e21 	.word	0x08005e21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df0:	3308      	adds	r3, #8
 8005df2:	2101      	movs	r1, #1
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 fd9b 	bl	8007930 <RCCEx_PLL2_Config>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e00:	e00f      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e06:	3328      	adds	r3, #40	; 0x28
 8005e08:	2101      	movs	r1, #1
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f001 fe42 	bl	8007a94 <RCCEx_PLL3_Config>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e16:	e004      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005e1e:	e000      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e2a:	4b96      	ldr	r3, [pc, #600]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2e:	f023 0107 	bic.w	r1, r3, #7
 8005e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e3a:	4a92      	ldr	r2, [pc, #584]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005e3c:	430b      	orrs	r3, r1
 8005e3e:	6553      	str	r3, [r2, #84]	; 0x54
 8005e40:	e003      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	f002 0304 	and.w	r3, r2, #4
 8005e56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e60:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4313      	orrs	r3, r2
 8005e68:	d043      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e72:	2b05      	cmp	r3, #5
 8005e74:	d824      	bhi.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005e76:	a201      	add	r2, pc, #4	; (adr r2, 8005e7c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7c:	08005ec9 	.word	0x08005ec9
 8005e80:	08005e95 	.word	0x08005e95
 8005e84:	08005eab 	.word	0x08005eab
 8005e88:	08005ec9 	.word	0x08005ec9
 8005e8c:	08005ec9 	.word	0x08005ec9
 8005e90:	08005ec9 	.word	0x08005ec9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e98:	3308      	adds	r3, #8
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 fd47 	bl	8007930 <RCCEx_PLL2_Config>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ea8:	e00f      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eae:	3328      	adds	r3, #40	; 0x28
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 fdee 	bl	8007a94 <RCCEx_PLL3_Config>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ebe:	e004      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005ec6:	e000      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10b      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ed2:	4b6c      	ldr	r3, [pc, #432]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed6:	f023 0107 	bic.w	r1, r3, #7
 8005eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ede:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ee2:	4a68      	ldr	r2, [pc, #416]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8005ee8:	e003      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005eee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	f002 0320 	and.w	r3, r2, #32
 8005efe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f02:	2300      	movs	r3, #0
 8005f04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	d055      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f1e:	d033      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f24:	d82c      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f2a:	d02f      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f30:	d826      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005f32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f36:	d02b      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005f38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f3c:	d820      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f42:	d012      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f48:	d81a      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d022      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8005f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f52:	d115      	bne.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f58:	3308      	adds	r3, #8
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f001 fce7 	bl	8007930 <RCCEx_PLL2_Config>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f68:	e015      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f6e:	3328      	adds	r3, #40	; 0x28
 8005f70:	2102      	movs	r1, #2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 fd8e 	bl	8007a94 <RCCEx_PLL3_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f7e:	e00a      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005f86:	e006      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005f88:	bf00      	nop
 8005f8a:	e004      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005f8c:	bf00      	nop
 8005f8e:	e002      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005f90:	bf00      	nop
 8005f92:	e000      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10b      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f9e:	4b39      	ldr	r3, [pc, #228]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fae:	4a35      	ldr	r2, [pc, #212]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	6553      	str	r3, [r2, #84]	; 0x54
 8005fb4:	e003      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005fd4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	d058      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fe2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fe6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005fea:	d033      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005fec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ff0:	d82c      	bhi.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff6:	d02f      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ffc:	d826      	bhi.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005ffe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006002:	d02b      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006004:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006008:	d820      	bhi.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800600a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800600e:	d012      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006014:	d81a      	bhi.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d022      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800601a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800601e:	d115      	bne.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006024:	3308      	adds	r3, #8
 8006026:	2100      	movs	r1, #0
 8006028:	4618      	mov	r0, r3
 800602a:	f001 fc81 	bl	8007930 <RCCEx_PLL2_Config>
 800602e:	4603      	mov	r3, r0
 8006030:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006034:	e015      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800603a:	3328      	adds	r3, #40	; 0x28
 800603c:	2102      	movs	r1, #2
 800603e:	4618      	mov	r0, r3
 8006040:	f001 fd28 	bl	8007a94 <RCCEx_PLL3_Config>
 8006044:	4603      	mov	r3, r0
 8006046:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800604a:	e00a      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006052:	e006      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006054:	bf00      	nop
 8006056:	e004      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006058:	bf00      	nop
 800605a:	e002      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800605c:	bf00      	nop
 800605e:	e000      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006062:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10e      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800606a:	4b06      	ldr	r3, [pc, #24]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800606c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006076:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800607a:	4a02      	ldr	r2, [pc, #8]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800607c:	430b      	orrs	r3, r1
 800607e:	6593      	str	r3, [r2, #88]	; 0x58
 8006080:	e006      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8006082:	bf00      	nop
 8006084:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006088:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800608c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006090:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006098:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800609c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060a0:	2300      	movs	r3, #0
 80060a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80060aa:	460b      	mov	r3, r1
 80060ac:	4313      	orrs	r3, r2
 80060ae:	d055      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80060b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060bc:	d033      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80060be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060c2:	d82c      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80060c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c8:	d02f      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80060ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ce:	d826      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80060d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80060d4:	d02b      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80060d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80060da:	d820      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80060dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060e0:	d012      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80060e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060e6:	d81a      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d022      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80060ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f0:	d115      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060f6:	3308      	adds	r3, #8
 80060f8:	2100      	movs	r1, #0
 80060fa:	4618      	mov	r0, r3
 80060fc:	f001 fc18 	bl	8007930 <RCCEx_PLL2_Config>
 8006100:	4603      	mov	r3, r0
 8006102:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006106:	e015      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006108:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800610c:	3328      	adds	r3, #40	; 0x28
 800610e:	2102      	movs	r1, #2
 8006110:	4618      	mov	r0, r3
 8006112:	f001 fcbf 	bl	8007a94 <RCCEx_PLL3_Config>
 8006116:	4603      	mov	r3, r0
 8006118:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800611c:	e00a      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006124:	e006      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006126:	bf00      	nop
 8006128:	e004      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800612a:	bf00      	nop
 800612c:	e002      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800612e:	bf00      	nop
 8006130:	e000      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006134:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10b      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800613c:	4ba1      	ldr	r3, [pc, #644]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800613e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006140:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006148:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800614c:	4a9d      	ldr	r2, [pc, #628]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800614e:	430b      	orrs	r3, r1
 8006150:	6593      	str	r3, [r2, #88]	; 0x58
 8006152:	e003      	b.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006154:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006158:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800615c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f002 0308 	and.w	r3, r2, #8
 8006168:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800616c:	2300      	movs	r3, #0
 800616e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006172:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006176:	460b      	mov	r3, r1
 8006178:	4313      	orrs	r3, r2
 800617a:	d01e      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800617c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006188:	d10c      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800618a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800618e:	3328      	adds	r3, #40	; 0x28
 8006190:	2102      	movs	r1, #2
 8006192:	4618      	mov	r0, r3
 8006194:	f001 fc7e 	bl	8007a94 <RCCEx_PLL3_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80061a4:	4b87      	ldr	r3, [pc, #540]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061b4:	4a83      	ldr	r2, [pc, #524]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061b6:	430b      	orrs	r3, r1
 80061b8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c2:	f002 0310 	and.w	r3, r2, #16
 80061c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061ca:	2300      	movs	r3, #0
 80061cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80061d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80061d4:	460b      	mov	r3, r1
 80061d6:	4313      	orrs	r3, r2
 80061d8:	d01e      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80061da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80061e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061e6:	d10c      	bne.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ec:	3328      	adds	r3, #40	; 0x28
 80061ee:	2102      	movs	r1, #2
 80061f0:	4618      	mov	r0, r3
 80061f2:	f001 fc4f 	bl	8007a94 <RCCEx_PLL3_Config>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006202:	4b70      	ldr	r3, [pc, #448]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006206:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800620a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800620e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006212:	4a6c      	ldr	r2, [pc, #432]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006214:	430b      	orrs	r3, r1
 8006216:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006224:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006228:	2300      	movs	r3, #0
 800622a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800622e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006232:	460b      	mov	r3, r1
 8006234:	4313      	orrs	r3, r2
 8006236:	d03e      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800623c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006240:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006244:	d022      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800624a:	d81b      	bhi.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006254:	d00b      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006256:	e015      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006258:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800625c:	3308      	adds	r3, #8
 800625e:	2100      	movs	r1, #0
 8006260:	4618      	mov	r0, r3
 8006262:	f001 fb65 	bl	8007930 <RCCEx_PLL2_Config>
 8006266:	4603      	mov	r3, r0
 8006268:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800626c:	e00f      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800626e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006272:	3328      	adds	r3, #40	; 0x28
 8006274:	2102      	movs	r1, #2
 8006276:	4618      	mov	r0, r3
 8006278:	f001 fc0c 	bl	8007a94 <RCCEx_PLL3_Config>
 800627c:	4603      	mov	r3, r0
 800627e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006282:	e004      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800628a:	e000      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800628c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800628e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006296:	4b4b      	ldr	r3, [pc, #300]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800629e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062a6:	4a47      	ldr	r2, [pc, #284]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062a8:	430b      	orrs	r3, r1
 80062aa:	6593      	str	r3, [r2, #88]	; 0x58
 80062ac:	e003      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80062c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80062c4:	2300      	movs	r3, #0
 80062c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80062cc:	460b      	mov	r3, r1
 80062ce:	4313      	orrs	r3, r2
 80062d0:	d03b      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80062d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062de:	d01f      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80062e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062e4:	d818      	bhi.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80062e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ea:	d003      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80062ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062f0:	d007      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80062f2:	e011      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062f4:	4b33      	ldr	r3, [pc, #204]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	4a32      	ldr	r2, [pc, #200]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006300:	e00f      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006306:	3328      	adds	r3, #40	; 0x28
 8006308:	2101      	movs	r1, #1
 800630a:	4618      	mov	r0, r3
 800630c:	f001 fbc2 	bl	8007a94 <RCCEx_PLL3_Config>
 8006310:	4603      	mov	r3, r0
 8006312:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006316:	e004      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800631e:	e000      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006322:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800632a:	4b26      	ldr	r3, [pc, #152]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800632c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633a:	4a22      	ldr	r2, [pc, #136]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800633c:	430b      	orrs	r3, r1
 800633e:	6553      	str	r3, [r2, #84]	; 0x54
 8006340:	e003      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006342:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006346:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800634a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800634e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006352:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006356:	673b      	str	r3, [r7, #112]	; 0x70
 8006358:	2300      	movs	r3, #0
 800635a:	677b      	str	r3, [r7, #116]	; 0x74
 800635c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006360:	460b      	mov	r3, r1
 8006362:	4313      	orrs	r3, r2
 8006364:	d034      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800636a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006374:	d007      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006376:	e011      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006378:	4b12      	ldr	r3, [pc, #72]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	4a11      	ldr	r2, [pc, #68]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800637e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006382:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006384:	e00e      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800638a:	3308      	adds	r3, #8
 800638c:	2102      	movs	r1, #2
 800638e:	4618      	mov	r0, r3
 8006390:	f001 face 	bl	8007930 <RCCEx_PLL2_Config>
 8006394:	4603      	mov	r3, r0
 8006396:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800639a:	e003      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80063a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10d      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80063ac:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ba:	4a02      	ldr	r2, [pc, #8]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063bc:	430b      	orrs	r3, r1
 80063be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063c0:	e006      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80063c2:	bf00      	nop
 80063c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80063cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80063d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80063dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80063de:	2300      	movs	r3, #0
 80063e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80063e6:	460b      	mov	r3, r1
 80063e8:	4313      	orrs	r3, r2
 80063ea:	d00c      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063f0:	3328      	adds	r3, #40	; 0x28
 80063f2:	2102      	movs	r1, #2
 80063f4:	4618      	mov	r0, r3
 80063f6:	f001 fb4d 	bl	8007a94 <RCCEx_PLL3_Config>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006412:	663b      	str	r3, [r7, #96]	; 0x60
 8006414:	2300      	movs	r3, #0
 8006416:	667b      	str	r3, [r7, #100]	; 0x64
 8006418:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800641c:	460b      	mov	r3, r1
 800641e:	4313      	orrs	r3, r2
 8006420:	d038      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800642e:	d018      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006434:	d811      	bhi.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800643a:	d014      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800643c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006440:	d80b      	bhi.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006442:	2b00      	cmp	r3, #0
 8006444:	d011      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800644a:	d106      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800644c:	4bc3      	ldr	r3, [pc, #780]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	4ac2      	ldr	r2, [pc, #776]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006456:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006458:	e008      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006460:	e004      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006462:	bf00      	nop
 8006464:	e002      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006466:	bf00      	nop
 8006468:	e000      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800646a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800646c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10b      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006474:	4bb9      	ldr	r3, [pc, #740]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006478:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800647c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006484:	4ab5      	ldr	r2, [pc, #724]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006486:	430b      	orrs	r3, r1
 8006488:	6553      	str	r3, [r2, #84]	; 0x54
 800648a:	e003      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006490:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006494:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80064a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80064a2:	2300      	movs	r3, #0
 80064a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80064aa:	460b      	mov	r3, r1
 80064ac:	4313      	orrs	r3, r2
 80064ae:	d009      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064b0:	4baa      	ldr	r3, [pc, #680]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80064b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064be:	4aa7      	ldr	r2, [pc, #668]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064c0:	430b      	orrs	r3, r1
 80064c2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80064d0:	653b      	str	r3, [r7, #80]	; 0x50
 80064d2:	2300      	movs	r3, #0
 80064d4:	657b      	str	r3, [r7, #84]	; 0x54
 80064d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80064da:	460b      	mov	r3, r1
 80064dc:	4313      	orrs	r3, r2
 80064de:	d009      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064e0:	4b9e      	ldr	r3, [pc, #632]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80064e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	4a9b      	ldr	r2, [pc, #620]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80064f0:	430b      	orrs	r3, r1
 80064f2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80064f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006500:	64bb      	str	r3, [r7, #72]	; 0x48
 8006502:	2300      	movs	r3, #0
 8006504:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006506:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800650a:	460b      	mov	r3, r1
 800650c:	4313      	orrs	r3, r2
 800650e:	d009      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006510:	4b92      	ldr	r3, [pc, #584]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006514:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8006518:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800651c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800651e:	4a8f      	ldr	r2, [pc, #572]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006520:	430b      	orrs	r3, r1
 8006522:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006530:	643b      	str	r3, [r7, #64]	; 0x40
 8006532:	2300      	movs	r3, #0
 8006534:	647b      	str	r3, [r7, #68]	; 0x44
 8006536:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800653a:	460b      	mov	r3, r1
 800653c:	4313      	orrs	r3, r2
 800653e:	d00e      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006540:	4b86      	ldr	r3, [pc, #536]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	4a85      	ldr	r2, [pc, #532]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006546:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800654a:	6113      	str	r3, [r2, #16]
 800654c:	4b83      	ldr	r3, [pc, #524]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800654e:	6919      	ldr	r1, [r3, #16]
 8006550:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006554:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006558:	4a80      	ldr	r2, [pc, #512]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800655a:	430b      	orrs	r3, r1
 800655c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800655e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800656a:	63bb      	str	r3, [r7, #56]	; 0x38
 800656c:	2300      	movs	r3, #0
 800656e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006570:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006574:	460b      	mov	r3, r1
 8006576:	4313      	orrs	r3, r2
 8006578:	d009      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800657a:	4b78      	ldr	r3, [pc, #480]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800657c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006588:	4a74      	ldr	r2, [pc, #464]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800658a:	430b      	orrs	r3, r1
 800658c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800658e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800659a:	633b      	str	r3, [r7, #48]	; 0x30
 800659c:	2300      	movs	r3, #0
 800659e:	637b      	str	r3, [r7, #52]	; 0x34
 80065a0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80065a4:	460b      	mov	r3, r1
 80065a6:	4313      	orrs	r3, r2
 80065a8:	d00a      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065aa:	4b6c      	ldr	r3, [pc, #432]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ae:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80065b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065ba:	4a68      	ldr	r2, [pc, #416]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80065bc:	430b      	orrs	r3, r1
 80065be:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80065c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	2100      	movs	r1, #0
 80065ca:	62b9      	str	r1, [r7, #40]	; 0x28
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065d2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80065d6:	460b      	mov	r3, r1
 80065d8:	4313      	orrs	r3, r2
 80065da:	d011      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065e0:	3308      	adds	r3, #8
 80065e2:	2100      	movs	r1, #0
 80065e4:	4618      	mov	r0, r3
 80065e6:	f001 f9a3 	bl	8007930 <RCCEx_PLL2_Config>
 80065ea:	4603      	mov	r3, r0
 80065ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80065f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d003      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006608:	2100      	movs	r1, #0
 800660a:	6239      	str	r1, [r7, #32]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
 8006612:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006616:	460b      	mov	r3, r1
 8006618:	4313      	orrs	r3, r2
 800661a:	d011      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800661c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006620:	3308      	adds	r3, #8
 8006622:	2101      	movs	r1, #1
 8006624:	4618      	mov	r0, r3
 8006626:	f001 f983 	bl	8007930 <RCCEx_PLL2_Config>
 800662a:	4603      	mov	r3, r0
 800662c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006630:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006638:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800663c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	2100      	movs	r1, #0
 800664a:	61b9      	str	r1, [r7, #24]
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	61fb      	str	r3, [r7, #28]
 8006652:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006656:	460b      	mov	r3, r1
 8006658:	4313      	orrs	r3, r2
 800665a:	d011      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800665c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006660:	3308      	adds	r3, #8
 8006662:	2102      	movs	r1, #2
 8006664:	4618      	mov	r0, r3
 8006666:	f001 f963 	bl	8007930 <RCCEx_PLL2_Config>
 800666a:	4603      	mov	r3, r0
 800666c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006670:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006678:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800667c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006688:	2100      	movs	r1, #0
 800668a:	6139      	str	r1, [r7, #16]
 800668c:	f003 0308 	and.w	r3, r3, #8
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006696:	460b      	mov	r3, r1
 8006698:	4313      	orrs	r3, r2
 800669a:	d011      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800669c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066a0:	3328      	adds	r3, #40	; 0x28
 80066a2:	2100      	movs	r1, #0
 80066a4:	4618      	mov	r0, r3
 80066a6:	f001 f9f5 	bl	8007a94 <RCCEx_PLL3_Config>
 80066aa:	4603      	mov	r3, r0
 80066ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80066b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80066c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	2100      	movs	r1, #0
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	f003 0310 	and.w	r3, r3, #16
 80066d0:	60fb      	str	r3, [r7, #12]
 80066d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80066d6:	460b      	mov	r3, r1
 80066d8:	4313      	orrs	r3, r2
 80066da:	d011      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066e0:	3328      	adds	r3, #40	; 0x28
 80066e2:	2101      	movs	r1, #1
 80066e4:	4618      	mov	r0, r3
 80066e6:	f001 f9d5 	bl	8007a94 <RCCEx_PLL3_Config>
 80066ea:	4603      	mov	r3, r0
 80066ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80066f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	2100      	movs	r1, #0
 800670a:	6039      	str	r1, [r7, #0]
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	607b      	str	r3, [r7, #4]
 8006712:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006716:	460b      	mov	r3, r1
 8006718:	4313      	orrs	r3, r2
 800671a:	d011      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800671c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006720:	3328      	adds	r3, #40	; 0x28
 8006722:	2102      	movs	r1, #2
 8006724:	4618      	mov	r0, r3
 8006726:	f001 f9b5 	bl	8007a94 <RCCEx_PLL3_Config>
 800672a:	4603      	mov	r3, r0
 800672c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006730:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006738:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800673c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8006740:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	e000      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
}
 800674e:	4618      	mov	r0, r3
 8006750:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006754:	46bd      	mov	sp, r7
 8006756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800675a:	bf00      	nop
 800675c:	58024400 	.word	0x58024400

08006760 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b090      	sub	sp, #64	; 0x40
 8006764:	af00      	add	r7, sp, #0
 8006766:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800676a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800676e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006772:	430b      	orrs	r3, r1
 8006774:	f040 8094 	bne.w	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006778:	4b97      	ldr	r3, [pc, #604]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800677a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	2b04      	cmp	r3, #4
 8006786:	f200 8087 	bhi.w	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800678a:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800678c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006790:	080067a5 	.word	0x080067a5
 8006794:	080067cd 	.word	0x080067cd
 8006798:	080067f5 	.word	0x080067f5
 800679c:	08006891 	.word	0x08006891
 80067a0:	0800681d 	.word	0x0800681d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067a4:	4b8c      	ldr	r3, [pc, #560]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067b0:	d108      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 ff68 	bl	800768c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067c0:	f000 bc97 	b.w	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067c8:	f000 bc93 	b.w	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067cc:	4b82      	ldr	r3, [pc, #520]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067d8:	d108      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067da:	f107 0318 	add.w	r3, r7, #24
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 fcac 	bl	800713c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067e8:	f000 bc83 	b.w	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067f0:	f000 bc7f 	b.w	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067f4:	4b78      	ldr	r3, [pc, #480]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006800:	d108      	bne.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006802:	f107 030c 	add.w	r3, r7, #12
 8006806:	4618      	mov	r0, r3
 8006808:	f000 fdec 	bl	80073e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006810:	f000 bc6f 	b.w	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006814:	2300      	movs	r3, #0
 8006816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006818:	f000 bc6b 	b.w	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800681c:	4b6e      	ldr	r3, [pc, #440]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800681e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006820:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006824:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006826:	4b6c      	ldr	r3, [pc, #432]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0304 	and.w	r3, r3, #4
 800682e:	2b04      	cmp	r3, #4
 8006830:	d10c      	bne.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006834:	2b00      	cmp	r3, #0
 8006836:	d109      	bne.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006838:	4b67      	ldr	r3, [pc, #412]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	08db      	lsrs	r3, r3, #3
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	4a66      	ldr	r2, [pc, #408]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006844:	fa22 f303 	lsr.w	r3, r2, r3
 8006848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800684a:	e01f      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800684c:	4b62      	ldr	r3, [pc, #392]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006858:	d106      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800685a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006860:	d102      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006862:	4b5f      	ldr	r3, [pc, #380]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006864:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006866:	e011      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006868:	4b5b      	ldr	r3, [pc, #364]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006874:	d106      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800687c:	d102      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800687e:	4b59      	ldr	r3, [pc, #356]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006880:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006882:	e003      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006888:	f000 bc33 	b.w	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800688c:	f000 bc31 	b.w	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006890:	4b55      	ldr	r3, [pc, #340]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006894:	f000 bc2d 	b.w	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800689c:	f000 bc29 	b.w	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80068a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068a4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80068a8:	430b      	orrs	r3, r1
 80068aa:	f040 809f 	bne.w	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80068ae:	4b4a      	ldr	r3, [pc, #296]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80068b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068be:	d04d      	beq.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c6:	f200 8084 	bhi.w	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80068ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068cc:	2bc0      	cmp	r3, #192	; 0xc0
 80068ce:	d07d      	beq.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	2bc0      	cmp	r3, #192	; 0xc0
 80068d4:	d87d      	bhi.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	2b80      	cmp	r3, #128	; 0x80
 80068da:	d02d      	beq.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	2b80      	cmp	r3, #128	; 0x80
 80068e0:	d877      	bhi.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	2b40      	cmp	r3, #64	; 0x40
 80068ec:	d012      	beq.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80068ee:	e070      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068f0:	4b39      	ldr	r3, [pc, #228]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068fc:	d107      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fec2 	bl	800768c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800690c:	e3f1      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006912:	e3ee      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006914:	4b30      	ldr	r3, [pc, #192]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800691c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006920:	d107      	bne.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006922:	f107 0318 	add.w	r3, r7, #24
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fc08 	bl	800713c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006930:	e3df      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006932:	2300      	movs	r3, #0
 8006934:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006936:	e3dc      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006938:	4b27      	ldr	r3, [pc, #156]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006944:	d107      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006946:	f107 030c 	add.w	r3, r7, #12
 800694a:	4618      	mov	r0, r3
 800694c:	f000 fd4a 	bl	80073e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006954:	e3cd      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800695a:	e3ca      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800695c:	4b1e      	ldr	r3, [pc, #120]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800695e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006960:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006964:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006966:	4b1c      	ldr	r3, [pc, #112]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0304 	and.w	r3, r3, #4
 800696e:	2b04      	cmp	r3, #4
 8006970:	d10c      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006974:	2b00      	cmp	r3, #0
 8006976:	d109      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006978:	4b17      	ldr	r3, [pc, #92]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	08db      	lsrs	r3, r3, #3
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	4a16      	ldr	r2, [pc, #88]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006984:	fa22 f303 	lsr.w	r3, r2, r3
 8006988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800698a:	e01e      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800698c:	4b12      	ldr	r3, [pc, #72]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006998:	d106      	bne.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800699a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069a0:	d102      	bne.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069a2:	4b0f      	ldr	r3, [pc, #60]	; (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069a6:	e010      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069a8:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069b4:	d106      	bne.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80069b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069bc:	d102      	bne.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80069be:	4b09      	ldr	r3, [pc, #36]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80069c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c2:	e002      	b.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80069c8:	e393      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80069ca:	e392      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80069cc:	4b06      	ldr	r3, [pc, #24]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80069ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d0:	e38f      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d6:	e38c      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80069d8:	58024400 	.word	0x58024400
 80069dc:	03d09000 	.word	0x03d09000
 80069e0:	003d0900 	.word	0x003d0900
 80069e4:	007a1200 	.word	0x007a1200
 80069e8:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80069ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069f0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80069f4:	430b      	orrs	r3, r1
 80069f6:	f040 809c 	bne.w	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80069fa:	4b9e      	ldr	r3, [pc, #632]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80069fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069fe:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006a02:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a0a:	d054      	beq.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a12:	f200 808b 	bhi.w	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a1c:	f000 8083 	beq.w	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8006a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a22:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a26:	f200 8081 	bhi.w	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a30:	d02f      	beq.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a38:	d878      	bhi.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d004      	beq.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a46:	d012      	beq.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8006a48:	e070      	b.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a4a:	4b8a      	ldr	r3, [pc, #552]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a56:	d107      	bne.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 fe15 	bl	800768c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a66:	e344      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a6c:	e341      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a6e:	4b81      	ldr	r3, [pc, #516]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a7a:	d107      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a7c:	f107 0318 	add.w	r3, r7, #24
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fb5b 	bl	800713c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a8a:	e332      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a90:	e32f      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a92:	4b78      	ldr	r3, [pc, #480]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a9e:	d107      	bne.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aa0:	f107 030c 	add.w	r3, r7, #12
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 fc9d 	bl	80073e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aae:	e320      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ab4:	e31d      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ab6:	4b6f      	ldr	r3, [pc, #444]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006abe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ac0:	4b6c      	ldr	r3, [pc, #432]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	d10c      	bne.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8006acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d109      	bne.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ad2:	4b68      	ldr	r3, [pc, #416]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	08db      	lsrs	r3, r3, #3
 8006ad8:	f003 0303 	and.w	r3, r3, #3
 8006adc:	4a66      	ldr	r2, [pc, #408]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006ade:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ae4:	e01e      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ae6:	4b63      	ldr	r3, [pc, #396]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006af2:	d106      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006afa:	d102      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006afc:	4b5f      	ldr	r3, [pc, #380]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b00:	e010      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b02:	4b5c      	ldr	r3, [pc, #368]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b0e:	d106      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b16:	d102      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b18:	4b59      	ldr	r3, [pc, #356]	; (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b1c:	e002      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8006b22:	e2e6      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006b24:	e2e5      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b26:	4b57      	ldr	r3, [pc, #348]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b2a:	e2e2      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b30:	e2df      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b36:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006b3a:	430b      	orrs	r3, r1
 8006b3c:	f040 80a7 	bne.w	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006b40:	4b4c      	ldr	r3, [pc, #304]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b44:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006b48:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b50:	d055      	beq.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b58:	f200 8096 	bhi.w	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b62:	f000 8084 	beq.w	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b6c:	f200 808c 	bhi.w	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b76:	d030      	beq.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8006b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b7e:	f200 8083 	bhi.w	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d004      	beq.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8e:	d012      	beq.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8006b90:	e07a      	b.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b92:	4b38      	ldr	r3, [pc, #224]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b9e:	d107      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fd71 	bl	800768c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bae:	e2a0      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bb4:	e29d      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bb6:	4b2f      	ldr	r3, [pc, #188]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bc2:	d107      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bc4:	f107 0318 	add.w	r3, r7, #24
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fab7 	bl	800713c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bd2:	e28e      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd8:	e28b      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bda:	4b26      	ldr	r3, [pc, #152]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be6:	d107      	bne.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006be8:	f107 030c 	add.w	r3, r7, #12
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 fbf9 	bl	80073e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bf6:	e27c      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bfc:	e279      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bfe:	4b1d      	ldr	r3, [pc, #116]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c06:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c08:	4b1a      	ldr	r3, [pc, #104]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b04      	cmp	r3, #4
 8006c12:	d10c      	bne.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8006c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d109      	bne.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c1a:	4b16      	ldr	r3, [pc, #88]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	08db      	lsrs	r3, r3, #3
 8006c20:	f003 0303 	and.w	r3, r3, #3
 8006c24:	4a14      	ldr	r2, [pc, #80]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006c26:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c2c:	e01e      	b.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c2e:	4b11      	ldr	r3, [pc, #68]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c3a:	d106      	bne.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c42:	d102      	bne.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c44:	4b0d      	ldr	r3, [pc, #52]	; (8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c48:	e010      	b.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c4a:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c56:	d106      	bne.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c5e:	d102      	bne.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c60:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c64:	e002      	b.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c66:	2300      	movs	r3, #0
 8006c68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006c6a:	e242      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006c6c:	e241      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c6e:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006c70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c72:	e23e      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006c74:	58024400 	.word	0x58024400
 8006c78:	03d09000 	.word	0x03d09000
 8006c7c:	003d0900 	.word	0x003d0900
 8006c80:	007a1200 	.word	0x007a1200
 8006c84:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c8c:	e231      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c92:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006c96:	430b      	orrs	r3, r1
 8006c98:	f040 8085 	bne.w	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006c9c:	4b9c      	ldr	r3, [pc, #624]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006ca4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cac:	d06b      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cb4:	d874      	bhi.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cbc:	d056      	beq.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cc4:	d86c      	bhi.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ccc:	d03b      	beq.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cd4:	d864      	bhi.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cdc:	d021      	beq.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8006cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ce4:	d85c      	bhi.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d004      	beq.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8006cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cf2:	d004      	beq.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8006cf4:	e054      	b.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006cf6:	f7fe fb49 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8006cfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006cfc:	e1f9      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cfe:	4b84      	ldr	r3, [pc, #528]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d0a:	d107      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d0c:	f107 0318 	add.w	r3, r7, #24
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 fa13 	bl	800713c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d1a:	e1ea      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d20:	e1e7      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d22:	4b7b      	ldr	r3, [pc, #492]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d2e:	d107      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d30:	f107 030c 	add.w	r3, r7, #12
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fb55 	bl	80073e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d3e:	e1d8      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d44:	e1d5      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d46:	4b72      	ldr	r3, [pc, #456]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0304 	and.w	r3, r3, #4
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d109      	bne.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d52:	4b6f      	ldr	r3, [pc, #444]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	08db      	lsrs	r3, r3, #3
 8006d58:	f003 0303 	and.w	r3, r3, #3
 8006d5c:	4a6d      	ldr	r2, [pc, #436]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d64:	e1c5      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d6a:	e1c2      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006d6c:	4b68      	ldr	r3, [pc, #416]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d78:	d102      	bne.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8006d7a:	4b67      	ldr	r3, [pc, #412]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d7e:	e1b8      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d80:	2300      	movs	r3, #0
 8006d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d84:	e1b5      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d86:	4b62      	ldr	r3, [pc, #392]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d92:	d102      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8006d94:	4b61      	ldr	r3, [pc, #388]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d98:	e1ab      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d9e:	e1a8      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da4:	e1a5      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006da6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006daa:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006dae:	430b      	orrs	r3, r1
 8006db0:	d173      	bne.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006db2:	4b57      	ldr	r3, [pc, #348]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006dba:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dc2:	d02f      	beq.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dca:	d863      	bhi.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d004      	beq.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd8:	d012      	beq.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8006dda:	e05b      	b.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ddc:	4b4c      	ldr	r3, [pc, #304]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006de4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006de8:	d107      	bne.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dea:	f107 0318 	add.w	r3, r7, #24
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 f9a4 	bl	800713c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006df8:	e17b      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dfe:	e178      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e00:	4b43      	ldr	r3, [pc, #268]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e0c:	d107      	bne.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e0e:	f107 030c 	add.w	r3, r7, #12
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fae6 	bl	80073e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e1c:	e169      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e22:	e166      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e24:	4b3a      	ldr	r3, [pc, #232]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e2c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e2e:	4b38      	ldr	r3, [pc, #224]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d10c      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8006e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d109      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e40:	4b33      	ldr	r3, [pc, #204]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	08db      	lsrs	r3, r3, #3
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	4a32      	ldr	r2, [pc, #200]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e52:	e01e      	b.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e54:	4b2e      	ldr	r3, [pc, #184]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e60:	d106      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8006e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e68:	d102      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e6a:	4b2b      	ldr	r3, [pc, #172]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e6e:	e010      	b.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e70:	4b27      	ldr	r3, [pc, #156]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e7c:	d106      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e84:	d102      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e86:	4b25      	ldr	r3, [pc, #148]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e8a:	e002      	b.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e90:	e12f      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006e92:	e12e      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e98:	e12b      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006e9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e9e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006ea2:	430b      	orrs	r3, r1
 8006ea4:	d13c      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006ea6:	4b1a      	ldr	r3, [pc, #104]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eae:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d004      	beq.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ebc:	d012      	beq.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8006ebe:	e023      	b.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ec0:	4b13      	ldr	r3, [pc, #76]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ecc:	d107      	bne.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fbda 	bl	800768c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006edc:	e109      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ee2:	e106      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ee4:	4b0a      	ldr	r3, [pc, #40]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ef0:	d107      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ef2:	f107 0318 	add.w	r3, r7, #24
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 f920 	bl	800713c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f00:	e0f7      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f06:	e0f4      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f0c:	e0f1      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006f0e:	bf00      	nop
 8006f10:	58024400 	.word	0x58024400
 8006f14:	03d09000 	.word	0x03d09000
 8006f18:	003d0900 	.word	0x003d0900
 8006f1c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f24:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	f040 8091 	bne.w	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006f2e:	4b73      	ldr	r3, [pc, #460]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f32:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006f36:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006f3e:	f000 8081 	beq.w	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006f48:	d87f      	bhi.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f50:	d06b      	beq.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8006f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f58:	d877      	bhi.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f60:	d056      	beq.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8006f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f68:	d86f      	bhi.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f70:	d03b      	beq.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f78:	d867      	bhi.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f80:	d021      	beq.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f88:	d85f      	bhi.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d004      	beq.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f96:	d004      	beq.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006f98:	e057      	b.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006f9a:	f000 f8b9 	bl	8007110 <HAL_RCCEx_GetD3PCLK1Freq>
 8006f9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006fa0:	e0a7      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fa2:	4b56      	ldr	r3, [pc, #344]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fae:	d107      	bne.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fb0:	f107 0318 	add.w	r3, r7, #24
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 f8c1 	bl	800713c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fbe:	e098      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fc4:	e095      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fc6:	4b4d      	ldr	r3, [pc, #308]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fd2:	d107      	bne.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fd4:	f107 030c 	add.w	r3, r7, #12
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 fa03 	bl	80073e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fe2:	e086      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fe8:	e083      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fea:	4b44      	ldr	r3, [pc, #272]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0304 	and.w	r3, r3, #4
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d109      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ff6:	4b41      	ldr	r3, [pc, #260]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	08db      	lsrs	r3, r3, #3
 8006ffc:	f003 0303 	and.w	r3, r3, #3
 8007000:	4a3f      	ldr	r2, [pc, #252]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007002:	fa22 f303 	lsr.w	r3, r2, r3
 8007006:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007008:	e073      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800700a:	2300      	movs	r3, #0
 800700c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800700e:	e070      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007010:	4b3a      	ldr	r3, [pc, #232]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800701c:	d102      	bne.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800701e:	4b39      	ldr	r3, [pc, #228]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8007020:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007022:	e066      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007028:	e063      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800702a:	4b34      	ldr	r3, [pc, #208]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007032:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007036:	d102      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8007038:	4b33      	ldr	r3, [pc, #204]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800703a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800703c:	e059      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800703e:	2300      	movs	r3, #0
 8007040:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007042:	e056      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007044:	4b31      	ldr	r3, [pc, #196]	; (800710c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8007046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007048:	e053      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800704e:	e050      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007050:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007054:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007058:	430b      	orrs	r3, r1
 800705a:	d148      	bne.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800705c:	4b27      	ldr	r3, [pc, #156]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800705e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007060:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007064:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800706c:	d02a      	beq.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007074:	d838      	bhi.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	2b00      	cmp	r3, #0
 800707a:	d004      	beq.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800707c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007082:	d00d      	beq.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8007084:	e030      	b.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007086:	4b1d      	ldr	r3, [pc, #116]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007092:	d102      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8007094:	4b1c      	ldr	r3, [pc, #112]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007096:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007098:	e02b      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800709a:	2300      	movs	r3, #0
 800709c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800709e:	e028      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070a0:	4b16      	ldr	r3, [pc, #88]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070ac:	d107      	bne.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 faea 	bl	800768c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070bc:	e019      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80070be:	2300      	movs	r3, #0
 80070c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070c2:	e016      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070c4:	4b0d      	ldr	r3, [pc, #52]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070d0:	d107      	bne.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070d2:	f107 0318 	add.w	r3, r7, #24
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 f830 	bl	800713c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070e0:	e007      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80070e2:	2300      	movs	r3, #0
 80070e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070e6:	e004      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070ec:	e001      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80070f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3740      	adds	r7, #64	; 0x40
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	58024400 	.word	0x58024400
 8007100:	03d09000 	.word	0x03d09000
 8007104:	003d0900 	.word	0x003d0900
 8007108:	007a1200 	.word	0x007a1200
 800710c:	00bb8000 	.word	0x00bb8000

08007110 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007114:	f7fe f90a 	bl	800532c <HAL_RCC_GetHCLKFreq>
 8007118:	4602      	mov	r2, r0
 800711a:	4b06      	ldr	r3, [pc, #24]	; (8007134 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	091b      	lsrs	r3, r3, #4
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	4904      	ldr	r1, [pc, #16]	; (8007138 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007126:	5ccb      	ldrb	r3, [r1, r3]
 8007128:	f003 031f 	and.w	r3, r3, #31
 800712c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007130:	4618      	mov	r0, r3
 8007132:	bd80      	pop	{r7, pc}
 8007134:	58024400 	.word	0x58024400
 8007138:	0800ba0c 	.word	0x0800ba0c

0800713c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800713c:	b480      	push	{r7}
 800713e:	b089      	sub	sp, #36	; 0x24
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007144:	4ba1      	ldr	r3, [pc, #644]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007148:	f003 0303 	and.w	r3, r3, #3
 800714c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800714e:	4b9f      	ldr	r3, [pc, #636]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007152:	0b1b      	lsrs	r3, r3, #12
 8007154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007158:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800715a:	4b9c      	ldr	r3, [pc, #624]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	091b      	lsrs	r3, r3, #4
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007166:	4b99      	ldr	r3, [pc, #612]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716a:	08db      	lsrs	r3, r3, #3
 800716c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	fb02 f303 	mul.w	r3, r2, r3
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 8111 	beq.w	80073ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	2b02      	cmp	r3, #2
 800718e:	f000 8083 	beq.w	8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	2b02      	cmp	r3, #2
 8007196:	f200 80a1 	bhi.w	80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d056      	beq.n	8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80071a6:	e099      	b.n	80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071a8:	4b88      	ldr	r3, [pc, #544]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0320 	and.w	r3, r3, #32
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d02d      	beq.n	8007210 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071b4:	4b85      	ldr	r3, [pc, #532]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	08db      	lsrs	r3, r3, #3
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	4a84      	ldr	r2, [pc, #528]	; (80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071c0:	fa22 f303 	lsr.w	r3, r2, r3
 80071c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	ee07 3a90 	vmov	s15, r3
 80071cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071de:	4b7b      	ldr	r3, [pc, #492]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80071f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800720e:	e087      	b.n	8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800721e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007222:	4b6a      	ldr	r3, [pc, #424]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007232:	ed97 6a03 	vldr	s12, [r7, #12]
 8007236:	eddf 5a67 	vldr	s11, [pc, #412]	; 80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800723a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007252:	e065      	b.n	8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007266:	4b59      	ldr	r3, [pc, #356]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007276:	ed97 6a03 	vldr	s12, [r7, #12]
 800727a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800727e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800728a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007296:	e043      	b.n	8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80072a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072aa:	4b48      	ldr	r3, [pc, #288]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80072be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072da:	e021      	b.n	8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ee:	4b37      	ldr	r3, [pc, #220]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007302:	eddf 5a34 	vldr	s11, [pc, #208]	; 80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800730a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800731e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007320:	4b2a      	ldr	r3, [pc, #168]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007324:	0a5b      	lsrs	r3, r3, #9
 8007326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007332:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007336:	ee37 7a87 	vadd.f32	s14, s15, s14
 800733a:	edd7 6a07 	vldr	s13, [r7, #28]
 800733e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007346:	ee17 2a90 	vmov	r2, s15
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800734e:	4b1f      	ldr	r3, [pc, #124]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007352:	0c1b      	lsrs	r3, r3, #16
 8007354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007358:	ee07 3a90 	vmov	s15, r3
 800735c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007360:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007364:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007368:	edd7 6a07 	vldr	s13, [r7, #28]
 800736c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007374:	ee17 2a90 	vmov	r2, s15
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800737c:	4b13      	ldr	r3, [pc, #76]	; (80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	0e1b      	lsrs	r3, r3, #24
 8007382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007392:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007396:	edd7 6a07 	vldr	s13, [r7, #28]
 800739a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800739e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a2:	ee17 2a90 	vmov	r2, s15
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073aa:	e008      	b.n	80073be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	609a      	str	r2, [r3, #8]
}
 80073be:	bf00      	nop
 80073c0:	3724      	adds	r7, #36	; 0x24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	58024400 	.word	0x58024400
 80073d0:	03d09000 	.word	0x03d09000
 80073d4:	46000000 	.word	0x46000000
 80073d8:	4c742400 	.word	0x4c742400
 80073dc:	4a742400 	.word	0x4a742400
 80073e0:	4af42400 	.word	0x4af42400

080073e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b089      	sub	sp, #36	; 0x24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073ec:	4ba1      	ldr	r3, [pc, #644]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f0:	f003 0303 	and.w	r3, r3, #3
 80073f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80073f6:	4b9f      	ldr	r3, [pc, #636]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fa:	0d1b      	lsrs	r3, r3, #20
 80073fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007400:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007402:	4b9c      	ldr	r3, [pc, #624]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007406:	0a1b      	lsrs	r3, r3, #8
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800740e:	4b99      	ldr	r3, [pc, #612]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007412:	08db      	lsrs	r3, r3, #3
 8007414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	fb02 f303 	mul.w	r3, r2, r3
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8111 	beq.w	8007654 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b02      	cmp	r3, #2
 8007436:	f000 8083 	beq.w	8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b02      	cmp	r3, #2
 800743e:	f200 80a1 	bhi.w	8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d056      	beq.n	80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800744e:	e099      	b.n	8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007450:	4b88      	ldr	r3, [pc, #544]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0320 	and.w	r3, r3, #32
 8007458:	2b00      	cmp	r3, #0
 800745a:	d02d      	beq.n	80074b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800745c:	4b85      	ldr	r3, [pc, #532]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	08db      	lsrs	r3, r3, #3
 8007462:	f003 0303 	and.w	r3, r3, #3
 8007466:	4a84      	ldr	r2, [pc, #528]	; (8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
 800746c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	ee07 3a90 	vmov	s15, r3
 8007474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007486:	4b7b      	ldr	r3, [pc, #492]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007496:	ed97 6a03 	vldr	s12, [r7, #12]
 800749a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800767c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800749e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074b6:	e087      	b.n	80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80074c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ca:	4b6a      	ldr	r3, [pc, #424]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074da:	ed97 6a03 	vldr	s12, [r7, #12]
 80074de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800767c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074fa:	e065      	b.n	80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800750a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750e:	4b59      	ldr	r3, [pc, #356]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007522:	eddf 5a56 	vldr	s11, [pc, #344]	; 800767c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800753e:	e043      	b.n	80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800754e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007552:	4b48      	ldr	r3, [pc, #288]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007562:	ed97 6a03 	vldr	s12, [r7, #12]
 8007566:	eddf 5a45 	vldr	s11, [pc, #276]	; 800767c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800756a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007582:	e021      	b.n	80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007684 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007596:	4b37      	ldr	r3, [pc, #220]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800767c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80075c8:	4b2a      	ldr	r3, [pc, #168]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075cc:	0a5b      	lsrs	r3, r3, #9
 80075ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ee:	ee17 2a90 	vmov	r2, s15
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80075f6:	4b1f      	ldr	r3, [pc, #124]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	0c1b      	lsrs	r3, r3, #16
 80075fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007600:	ee07 3a90 	vmov	s15, r3
 8007604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800760c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007610:	edd7 6a07 	vldr	s13, [r7, #28]
 8007614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800761c:	ee17 2a90 	vmov	r2, s15
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007624:	4b13      	ldr	r3, [pc, #76]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007628:	0e1b      	lsrs	r3, r3, #24
 800762a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007636:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800763a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800763e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800764a:	ee17 2a90 	vmov	r2, s15
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007652:	e008      	b.n	8007666 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	609a      	str	r2, [r3, #8]
}
 8007666:	bf00      	nop
 8007668:	3724      	adds	r7, #36	; 0x24
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	58024400 	.word	0x58024400
 8007678:	03d09000 	.word	0x03d09000
 800767c:	46000000 	.word	0x46000000
 8007680:	4c742400 	.word	0x4c742400
 8007684:	4a742400 	.word	0x4a742400
 8007688:	4af42400 	.word	0x4af42400

0800768c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800768c:	b480      	push	{r7}
 800768e:	b089      	sub	sp, #36	; 0x24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007694:	4ba0      	ldr	r3, [pc, #640]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007698:	f003 0303 	and.w	r3, r3, #3
 800769c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800769e:	4b9e      	ldr	r3, [pc, #632]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a2:	091b      	lsrs	r3, r3, #4
 80076a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076a8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80076aa:	4b9b      	ldr	r3, [pc, #620]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80076b4:	4b98      	ldr	r3, [pc, #608]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b8:	08db      	lsrs	r3, r3, #3
 80076ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	fb02 f303 	mul.w	r3, r2, r3
 80076c4:	ee07 3a90 	vmov	s15, r3
 80076c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076cc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 8111 	beq.w	80078fa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	2b02      	cmp	r3, #2
 80076dc:	f000 8083 	beq.w	80077e6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	f200 80a1 	bhi.w	800782a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d003      	beq.n	80076f6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d056      	beq.n	80077a2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80076f4:	e099      	b.n	800782a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076f6:	4b88      	ldr	r3, [pc, #544]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0320 	and.w	r3, r3, #32
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d02d      	beq.n	800775e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007702:	4b85      	ldr	r3, [pc, #532]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	08db      	lsrs	r3, r3, #3
 8007708:	f003 0303 	and.w	r3, r3, #3
 800770c:	4a83      	ldr	r2, [pc, #524]	; (800791c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800770e:	fa22 f303 	lsr.w	r3, r2, r3
 8007712:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800772c:	4b7a      	ldr	r3, [pc, #488]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800772e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007734:	ee07 3a90 	vmov	s15, r3
 8007738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007740:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007744:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007748:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007750:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007758:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800775c:	e087      	b.n	800786e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	ee07 3a90 	vmov	s15, r3
 8007764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007768:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007924 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800776c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007770:	4b69      	ldr	r3, [pc, #420]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007778:	ee07 3a90 	vmov	s15, r3
 800777c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007780:	ed97 6a03 	vldr	s12, [r7, #12]
 8007784:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007788:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800778c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007794:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077a0:	e065      	b.n	800786e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	ee07 3a90 	vmov	s15, r3
 80077a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007928 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80077b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b4:	4b58      	ldr	r3, [pc, #352]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077bc:	ee07 3a90 	vmov	s15, r3
 80077c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80077c8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077e4:	e043      	b.n	800786e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	ee07 3a90 	vmov	s15, r3
 80077ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800792c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80077f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077f8:	4b47      	ldr	r3, [pc, #284]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007800:	ee07 3a90 	vmov	s15, r3
 8007804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007808:	ed97 6a03 	vldr	s12, [r7, #12]
 800780c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007810:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800781c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007824:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007828:	e021      	b.n	800786e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	ee07 3a90 	vmov	s15, r3
 8007830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007834:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007924 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783c:	4b36      	ldr	r3, [pc, #216]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800783e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007844:	ee07 3a90 	vmov	s15, r3
 8007848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007850:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007920 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007854:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007868:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800786c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800786e:	4b2a      	ldr	r3, [pc, #168]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007872:	0a5b      	lsrs	r3, r3, #9
 8007874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007878:	ee07 3a90 	vmov	s15, r3
 800787c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007880:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007884:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007888:	edd7 6a07 	vldr	s13, [r7, #28]
 800788c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007894:	ee17 2a90 	vmov	r2, s15
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800789c:	4b1e      	ldr	r3, [pc, #120]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800789e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a0:	0c1b      	lsrs	r3, r3, #16
 80078a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80078ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078c2:	ee17 2a90 	vmov	r2, s15
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80078ca:	4b13      	ldr	r3, [pc, #76]	; (8007918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ce:	0e1b      	lsrs	r3, r3, #24
 80078d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d4:	ee07 3a90 	vmov	s15, r3
 80078d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80078e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f0:	ee17 2a90 	vmov	r2, s15
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80078f8:	e008      	b.n	800790c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	609a      	str	r2, [r3, #8]
}
 800790c:	bf00      	nop
 800790e:	3724      	adds	r7, #36	; 0x24
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	58024400 	.word	0x58024400
 800791c:	03d09000 	.word	0x03d09000
 8007920:	46000000 	.word	0x46000000
 8007924:	4c742400 	.word	0x4c742400
 8007928:	4a742400 	.word	0x4a742400
 800792c:	4af42400 	.word	0x4af42400

08007930 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800793a:	2300      	movs	r3, #0
 800793c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800793e:	4b53      	ldr	r3, [pc, #332]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007942:	f003 0303 	and.w	r3, r3, #3
 8007946:	2b03      	cmp	r3, #3
 8007948:	d101      	bne.n	800794e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e099      	b.n	8007a82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800794e:	4b4f      	ldr	r3, [pc, #316]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a4e      	ldr	r2, [pc, #312]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007954:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800795a:	f7fa faef 	bl	8001f3c <HAL_GetTick>
 800795e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007960:	e008      	b.n	8007974 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007962:	f7fa faeb 	bl	8001f3c <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	2b02      	cmp	r3, #2
 800796e:	d901      	bls.n	8007974 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e086      	b.n	8007a82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007974:	4b45      	ldr	r3, [pc, #276]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1f0      	bne.n	8007962 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007980:	4b42      	ldr	r3, [pc, #264]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007984:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	031b      	lsls	r3, r3, #12
 800798e:	493f      	ldr	r1, [pc, #252]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007990:	4313      	orrs	r3, r2
 8007992:	628b      	str	r3, [r1, #40]	; 0x28
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	3b01      	subs	r3, #1
 800799a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	025b      	lsls	r3, r3, #9
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	431a      	orrs	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	041b      	lsls	r3, r3, #16
 80079b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079b6:	431a      	orrs	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	3b01      	subs	r3, #1
 80079be:	061b      	lsls	r3, r3, #24
 80079c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079c4:	4931      	ldr	r1, [pc, #196]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079ca:	4b30      	ldr	r3, [pc, #192]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 80079cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	492d      	ldr	r1, [pc, #180]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 80079d8:	4313      	orrs	r3, r2
 80079da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80079dc:	4b2b      	ldr	r3, [pc, #172]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	f023 0220 	bic.w	r2, r3, #32
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	4928      	ldr	r1, [pc, #160]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80079ee:	4b27      	ldr	r3, [pc, #156]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 80079f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f2:	4a26      	ldr	r2, [pc, #152]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 80079f4:	f023 0310 	bic.w	r3, r3, #16
 80079f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80079fa:	4b24      	ldr	r3, [pc, #144]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 80079fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079fe:	4b24      	ldr	r3, [pc, #144]	; (8007a90 <RCCEx_PLL2_Config+0x160>)
 8007a00:	4013      	ands	r3, r2
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	69d2      	ldr	r2, [r2, #28]
 8007a06:	00d2      	lsls	r2, r2, #3
 8007a08:	4920      	ldr	r1, [pc, #128]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a0e:	4b1f      	ldr	r3, [pc, #124]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a12:	4a1e      	ldr	r2, [pc, #120]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a14:	f043 0310 	orr.w	r3, r3, #16
 8007a18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d106      	bne.n	8007a2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a20:	4b1a      	ldr	r3, [pc, #104]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a24:	4a19      	ldr	r2, [pc, #100]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a2c:	e00f      	b.n	8007a4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d106      	bne.n	8007a42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a34:	4b15      	ldr	r3, [pc, #84]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	4a14      	ldr	r2, [pc, #80]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a40:	e005      	b.n	8007a4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a42:	4b12      	ldr	r3, [pc, #72]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a46:	4a11      	ldr	r2, [pc, #68]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a4e:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a0e      	ldr	r2, [pc, #56]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a5a:	f7fa fa6f 	bl	8001f3c <HAL_GetTick>
 8007a5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a60:	e008      	b.n	8007a74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a62:	f7fa fa6b 	bl	8001f3c <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d901      	bls.n	8007a74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e006      	b.n	8007a82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a74:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <RCCEx_PLL2_Config+0x15c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0f0      	beq.n	8007a62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	58024400 	.word	0x58024400
 8007a90:	ffff0007 	.word	0xffff0007

08007a94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007aa2:	4b53      	ldr	r3, [pc, #332]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d101      	bne.n	8007ab2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e099      	b.n	8007be6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ab2:	4b4f      	ldr	r3, [pc, #316]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a4e      	ldr	r2, [pc, #312]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007abe:	f7fa fa3d 	bl	8001f3c <HAL_GetTick>
 8007ac2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ac4:	e008      	b.n	8007ad8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ac6:	f7fa fa39 	bl	8001f3c <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d901      	bls.n	8007ad8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e086      	b.n	8007be6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ad8:	4b45      	ldr	r3, [pc, #276]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1f0      	bne.n	8007ac6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ae4:	4b42      	ldr	r3, [pc, #264]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	051b      	lsls	r3, r3, #20
 8007af2:	493f      	ldr	r1, [pc, #252]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	628b      	str	r3, [r1, #40]	; 0x28
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	3b01      	subs	r3, #1
 8007b08:	025b      	lsls	r3, r3, #9
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	041b      	lsls	r3, r3, #16
 8007b16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	061b      	lsls	r3, r3, #24
 8007b24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b28:	4931      	ldr	r1, [pc, #196]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b2e:	4b30      	ldr	r3, [pc, #192]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	492d      	ldr	r1, [pc, #180]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b40:	4b2b      	ldr	r3, [pc, #172]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	4928      	ldr	r1, [pc, #160]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b52:	4b27      	ldr	r3, [pc, #156]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b56:	4a26      	ldr	r2, [pc, #152]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b5e:	4b24      	ldr	r3, [pc, #144]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b62:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <RCCEx_PLL3_Config+0x160>)
 8007b64:	4013      	ands	r3, r2
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	69d2      	ldr	r2, [r2, #28]
 8007b6a:	00d2      	lsls	r2, r2, #3
 8007b6c:	4920      	ldr	r1, [pc, #128]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b72:	4b1f      	ldr	r3, [pc, #124]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b76:	4a1e      	ldr	r2, [pc, #120]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d106      	bne.n	8007b92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b84:	4b1a      	ldr	r3, [pc, #104]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	4a19      	ldr	r2, [pc, #100]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b90:	e00f      	b.n	8007bb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d106      	bne.n	8007ba6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b98:	4b15      	ldr	r3, [pc, #84]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	4a14      	ldr	r2, [pc, #80]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007b9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ba2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ba4:	e005      	b.n	8007bb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007ba6:	4b12      	ldr	r3, [pc, #72]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007baa:	4a11      	ldr	r2, [pc, #68]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007bac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007bb2:	4b0f      	ldr	r3, [pc, #60]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a0e      	ldr	r2, [pc, #56]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bbe:	f7fa f9bd 	bl	8001f3c <HAL_GetTick>
 8007bc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bc4:	e008      	b.n	8007bd8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bc6:	f7fa f9b9 	bl	8001f3c <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d901      	bls.n	8007bd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e006      	b.n	8007be6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bd8:	4b05      	ldr	r3, [pc, #20]	; (8007bf0 <RCCEx_PLL3_Config+0x15c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d0f0      	beq.n	8007bc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	58024400 	.word	0x58024400
 8007bf4:	ffff0007 	.word	0xffff0007

08007bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e049      	b.n	8007c9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d106      	bne.n	8007c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7f9 fdc0 	bl	80017a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4619      	mov	r1, r3
 8007c36:	4610      	mov	r0, r2
 8007c38:	f000 fb26 	bl	8008288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e08f      	b.n	8007ddc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d106      	bne.n	8007cd6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7f9 fd17 	bl	8001704 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2202      	movs	r2, #2
 8007cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6899      	ldr	r1, [r3, #8]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	4b3e      	ldr	r3, [pc, #248]	; (8007de4 <HAL_TIM_Encoder_Init+0x13c>)
 8007cea:	400b      	ands	r3, r1
 8007cec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	f000 fac5 	bl	8008288 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6a1b      	ldr	r3, [r3, #32]
 8007d14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4b31      	ldr	r3, [pc, #196]	; (8007de8 <HAL_TIM_Encoder_Init+0x140>)
 8007d24:	4013      	ands	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	4313      	orrs	r3, r2
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	4b2b      	ldr	r3, [pc, #172]	; (8007dec <HAL_TIM_Encoder_Init+0x144>)
 8007d3e:	4013      	ands	r3, r2
 8007d40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	4b2a      	ldr	r3, [pc, #168]	; (8007df0 <HAL_TIM_Encoder_Init+0x148>)
 8007d46:	4013      	ands	r3, r2
 8007d48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	021b      	lsls	r3, r3, #8
 8007d54:	4313      	orrs	r3, r2
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	011a      	lsls	r2, r3, #4
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	031b      	lsls	r3, r3, #12
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007d76:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007d7e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	fffebff8 	.word	0xfffebff8
 8007de8:	fffffcfc 	.word	0xfffffcfc
 8007dec:	fffff3f3 	.word	0xfffff3f3
 8007df0:	ffff0f0f 	.word	0xffff0f0f

08007df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d122      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d11b      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f06f 0202 	mvn.w	r2, #2
 8007e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa08 	bl	800824c <HAL_TIM_IC_CaptureCallback>
 8007e3c:	e005      	b.n	8007e4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f9fa 	bl	8008238 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fa0b 	bl	8008260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	f003 0304 	and.w	r3, r3, #4
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	d122      	bne.n	8007ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f003 0304 	and.w	r3, r3, #4
 8007e68:	2b04      	cmp	r3, #4
 8007e6a:	d11b      	bne.n	8007ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f06f 0204 	mvn.w	r2, #4
 8007e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2202      	movs	r2, #2
 8007e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f9de 	bl	800824c <HAL_TIM_IC_CaptureCallback>
 8007e90:	e005      	b.n	8007e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f9d0 	bl	8008238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f9e1 	bl	8008260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	f003 0308 	and.w	r3, r3, #8
 8007eae:	2b08      	cmp	r3, #8
 8007eb0:	d122      	bne.n	8007ef8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f003 0308 	and.w	r3, r3, #8
 8007ebc:	2b08      	cmp	r3, #8
 8007ebe:	d11b      	bne.n	8007ef8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f06f 0208 	mvn.w	r2, #8
 8007ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2204      	movs	r2, #4
 8007ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	f003 0303 	and.w	r3, r3, #3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f9b4 	bl	800824c <HAL_TIM_IC_CaptureCallback>
 8007ee4:	e005      	b.n	8007ef2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f9a6 	bl	8008238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f9b7 	bl	8008260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	f003 0310 	and.w	r3, r3, #16
 8007f02:	2b10      	cmp	r3, #16
 8007f04:	d122      	bne.n	8007f4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f003 0310 	and.w	r3, r3, #16
 8007f10:	2b10      	cmp	r3, #16
 8007f12:	d11b      	bne.n	8007f4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f06f 0210 	mvn.w	r2, #16
 8007f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2208      	movs	r2, #8
 8007f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f98a 	bl	800824c <HAL_TIM_IC_CaptureCallback>
 8007f38:	e005      	b.n	8007f46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f97c 	bl	8008238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f98d 	bl	8008260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d10e      	bne.n	8007f78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d107      	bne.n	8007f78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f06f 0201 	mvn.w	r2, #1
 8007f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f956 	bl	8008224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f82:	2b80      	cmp	r3, #128	; 0x80
 8007f84:	d10e      	bne.n	8007fa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f90:	2b80      	cmp	r3, #128	; 0x80
 8007f92:	d107      	bne.n	8007fa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fb42 	bl	8008628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fb2:	d10e      	bne.n	8007fd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fbe:	2b80      	cmp	r3, #128	; 0x80
 8007fc0:	d107      	bne.n	8007fd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fb35 	bl	800863c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fdc:	2b40      	cmp	r3, #64	; 0x40
 8007fde:	d10e      	bne.n	8007ffe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fea:	2b40      	cmp	r3, #64	; 0x40
 8007fec:	d107      	bne.n	8007ffe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f93b 	bl	8008274 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	f003 0320 	and.w	r3, r3, #32
 8008008:	2b20      	cmp	r3, #32
 800800a:	d10e      	bne.n	800802a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	f003 0320 	and.w	r3, r3, #32
 8008016:	2b20      	cmp	r3, #32
 8008018:	d107      	bne.n	800802a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f06f 0220 	mvn.w	r2, #32
 8008022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 faf5 	bl	8008614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800802a:	bf00      	nop
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
	...

08008034 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008048:	2b01      	cmp	r3, #1
 800804a:	d101      	bne.n	8008050 <HAL_TIM_ConfigClockSource+0x1c>
 800804c:	2302      	movs	r3, #2
 800804e:	e0dc      	b.n	800820a <HAL_TIM_ConfigClockSource+0x1d6>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	4b6a      	ldr	r3, [pc, #424]	; (8008214 <HAL_TIM_ConfigClockSource+0x1e0>)
 800806c:	4013      	ands	r3, r2
 800806e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008076:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a64      	ldr	r2, [pc, #400]	; (8008218 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008086:	4293      	cmp	r3, r2
 8008088:	f000 80a9 	beq.w	80081de <HAL_TIM_ConfigClockSource+0x1aa>
 800808c:	4a62      	ldr	r2, [pc, #392]	; (8008218 <HAL_TIM_ConfigClockSource+0x1e4>)
 800808e:	4293      	cmp	r3, r2
 8008090:	f200 80ae 	bhi.w	80081f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008094:	4a61      	ldr	r2, [pc, #388]	; (800821c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008096:	4293      	cmp	r3, r2
 8008098:	f000 80a1 	beq.w	80081de <HAL_TIM_ConfigClockSource+0x1aa>
 800809c:	4a5f      	ldr	r2, [pc, #380]	; (800821c <HAL_TIM_ConfigClockSource+0x1e8>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	f200 80a6 	bhi.w	80081f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80080a4:	4a5e      	ldr	r2, [pc, #376]	; (8008220 <HAL_TIM_ConfigClockSource+0x1ec>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	f000 8099 	beq.w	80081de <HAL_TIM_ConfigClockSource+0x1aa>
 80080ac:	4a5c      	ldr	r2, [pc, #368]	; (8008220 <HAL_TIM_ConfigClockSource+0x1ec>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	f200 809e 	bhi.w	80081f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80080b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80080b8:	f000 8091 	beq.w	80081de <HAL_TIM_ConfigClockSource+0x1aa>
 80080bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80080c0:	f200 8096 	bhi.w	80081f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80080c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080c8:	f000 8089 	beq.w	80081de <HAL_TIM_ConfigClockSource+0x1aa>
 80080cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080d0:	f200 808e 	bhi.w	80081f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80080d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080d8:	d03e      	beq.n	8008158 <HAL_TIM_ConfigClockSource+0x124>
 80080da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080de:	f200 8087 	bhi.w	80081f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80080e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e6:	f000 8086 	beq.w	80081f6 <HAL_TIM_ConfigClockSource+0x1c2>
 80080ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ee:	d87f      	bhi.n	80081f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80080f0:	2b70      	cmp	r3, #112	; 0x70
 80080f2:	d01a      	beq.n	800812a <HAL_TIM_ConfigClockSource+0xf6>
 80080f4:	2b70      	cmp	r3, #112	; 0x70
 80080f6:	d87b      	bhi.n	80081f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80080f8:	2b60      	cmp	r3, #96	; 0x60
 80080fa:	d050      	beq.n	800819e <HAL_TIM_ConfigClockSource+0x16a>
 80080fc:	2b60      	cmp	r3, #96	; 0x60
 80080fe:	d877      	bhi.n	80081f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008100:	2b50      	cmp	r3, #80	; 0x50
 8008102:	d03c      	beq.n	800817e <HAL_TIM_ConfigClockSource+0x14a>
 8008104:	2b50      	cmp	r3, #80	; 0x50
 8008106:	d873      	bhi.n	80081f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008108:	2b40      	cmp	r3, #64	; 0x40
 800810a:	d058      	beq.n	80081be <HAL_TIM_ConfigClockSource+0x18a>
 800810c:	2b40      	cmp	r3, #64	; 0x40
 800810e:	d86f      	bhi.n	80081f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008110:	2b30      	cmp	r3, #48	; 0x30
 8008112:	d064      	beq.n	80081de <HAL_TIM_ConfigClockSource+0x1aa>
 8008114:	2b30      	cmp	r3, #48	; 0x30
 8008116:	d86b      	bhi.n	80081f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008118:	2b20      	cmp	r3, #32
 800811a:	d060      	beq.n	80081de <HAL_TIM_ConfigClockSource+0x1aa>
 800811c:	2b20      	cmp	r3, #32
 800811e:	d867      	bhi.n	80081f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008120:	2b00      	cmp	r3, #0
 8008122:	d05c      	beq.n	80081de <HAL_TIM_ConfigClockSource+0x1aa>
 8008124:	2b10      	cmp	r3, #16
 8008126:	d05a      	beq.n	80081de <HAL_TIM_ConfigClockSource+0x1aa>
 8008128:	e062      	b.n	80081f0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800813a:	f000 f9bd 	bl	80084b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800814c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	609a      	str	r2, [r3, #8]
      break;
 8008156:	e04f      	b.n	80081f8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008168:	f000 f9a6 	bl	80084b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800817a:	609a      	str	r2, [r3, #8]
      break;
 800817c:	e03c      	b.n	80081f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800818a:	461a      	mov	r2, r3
 800818c:	f000 f916 	bl	80083bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2150      	movs	r1, #80	; 0x50
 8008196:	4618      	mov	r0, r3
 8008198:	f000 f970 	bl	800847c <TIM_ITRx_SetConfig>
      break;
 800819c:	e02c      	b.n	80081f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081aa:	461a      	mov	r2, r3
 80081ac:	f000 f935 	bl	800841a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2160      	movs	r1, #96	; 0x60
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 f960 	bl	800847c <TIM_ITRx_SetConfig>
      break;
 80081bc:	e01c      	b.n	80081f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ca:	461a      	mov	r2, r3
 80081cc:	f000 f8f6 	bl	80083bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2140      	movs	r1, #64	; 0x40
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 f950 	bl	800847c <TIM_ITRx_SetConfig>
      break;
 80081dc:	e00c      	b.n	80081f8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4619      	mov	r1, r3
 80081e8:	4610      	mov	r0, r2
 80081ea:	f000 f947 	bl	800847c <TIM_ITRx_SetConfig>
      break;
 80081ee:	e003      	b.n	80081f8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	73fb      	strb	r3, [r7, #15]
      break;
 80081f4:	e000      	b.n	80081f8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80081f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	ffceff88 	.word	0xffceff88
 8008218:	00100040 	.word	0x00100040
 800821c:	00100030 	.word	0x00100030
 8008220:	00100020 	.word	0x00100020

08008224 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a40      	ldr	r2, [pc, #256]	; (800839c <TIM_Base_SetConfig+0x114>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d013      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a6:	d00f      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a3d      	ldr	r2, [pc, #244]	; (80083a0 <TIM_Base_SetConfig+0x118>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d00b      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a3c      	ldr	r2, [pc, #240]	; (80083a4 <TIM_Base_SetConfig+0x11c>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d007      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a3b      	ldr	r2, [pc, #236]	; (80083a8 <TIM_Base_SetConfig+0x120>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d003      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a3a      	ldr	r2, [pc, #232]	; (80083ac <TIM_Base_SetConfig+0x124>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d108      	bne.n	80082da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a2f      	ldr	r2, [pc, #188]	; (800839c <TIM_Base_SetConfig+0x114>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d01f      	beq.n	8008322 <TIM_Base_SetConfig+0x9a>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e8:	d01b      	beq.n	8008322 <TIM_Base_SetConfig+0x9a>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a2c      	ldr	r2, [pc, #176]	; (80083a0 <TIM_Base_SetConfig+0x118>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d017      	beq.n	8008322 <TIM_Base_SetConfig+0x9a>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a2b      	ldr	r2, [pc, #172]	; (80083a4 <TIM_Base_SetConfig+0x11c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d013      	beq.n	8008322 <TIM_Base_SetConfig+0x9a>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a2a      	ldr	r2, [pc, #168]	; (80083a8 <TIM_Base_SetConfig+0x120>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d00f      	beq.n	8008322 <TIM_Base_SetConfig+0x9a>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a29      	ldr	r2, [pc, #164]	; (80083ac <TIM_Base_SetConfig+0x124>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d00b      	beq.n	8008322 <TIM_Base_SetConfig+0x9a>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a28      	ldr	r2, [pc, #160]	; (80083b0 <TIM_Base_SetConfig+0x128>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d007      	beq.n	8008322 <TIM_Base_SetConfig+0x9a>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a27      	ldr	r2, [pc, #156]	; (80083b4 <TIM_Base_SetConfig+0x12c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d003      	beq.n	8008322 <TIM_Base_SetConfig+0x9a>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a26      	ldr	r2, [pc, #152]	; (80083b8 <TIM_Base_SetConfig+0x130>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d108      	bne.n	8008334 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	4313      	orrs	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	4313      	orrs	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	689a      	ldr	r2, [r3, #8]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a10      	ldr	r2, [pc, #64]	; (800839c <TIM_Base_SetConfig+0x114>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d00f      	beq.n	8008380 <TIM_Base_SetConfig+0xf8>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a12      	ldr	r2, [pc, #72]	; (80083ac <TIM_Base_SetConfig+0x124>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d00b      	beq.n	8008380 <TIM_Base_SetConfig+0xf8>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a11      	ldr	r2, [pc, #68]	; (80083b0 <TIM_Base_SetConfig+0x128>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d007      	beq.n	8008380 <TIM_Base_SetConfig+0xf8>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a10      	ldr	r2, [pc, #64]	; (80083b4 <TIM_Base_SetConfig+0x12c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d003      	beq.n	8008380 <TIM_Base_SetConfig+0xf8>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a0f      	ldr	r2, [pc, #60]	; (80083b8 <TIM_Base_SetConfig+0x130>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d103      	bne.n	8008388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	691a      	ldr	r2, [r3, #16]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	615a      	str	r2, [r3, #20]
}
 800838e:	bf00      	nop
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	40010000 	.word	0x40010000
 80083a0:	40000400 	.word	0x40000400
 80083a4:	40000800 	.word	0x40000800
 80083a8:	40000c00 	.word	0x40000c00
 80083ac:	40010400 	.word	0x40010400
 80083b0:	40014000 	.word	0x40014000
 80083b4:	40014400 	.word	0x40014400
 80083b8:	40014800 	.word	0x40014800

080083bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083bc:	b480      	push	{r7}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	f023 0201 	bic.w	r2, r3, #1
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	011b      	lsls	r3, r3, #4
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f023 030a 	bic.w	r3, r3, #10
 80083f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	4313      	orrs	r3, r2
 8008400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	621a      	str	r2, [r3, #32]
}
 800840e:	bf00      	nop
 8008410:	371c      	adds	r7, #28
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800841a:	b480      	push	{r7}
 800841c:	b087      	sub	sp, #28
 800841e:	af00      	add	r7, sp, #0
 8008420:	60f8      	str	r0, [r7, #12]
 8008422:	60b9      	str	r1, [r7, #8]
 8008424:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	f023 0210 	bic.w	r2, r3, #16
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008444:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	031b      	lsls	r3, r3, #12
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	4313      	orrs	r3, r2
 800844e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008456:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	4313      	orrs	r3, r2
 8008460:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	621a      	str	r2, [r3, #32]
}
 800846e:	bf00      	nop
 8008470:	371c      	adds	r7, #28
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
	...

0800847c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	4b09      	ldr	r3, [pc, #36]	; (80084b4 <TIM_ITRx_SetConfig+0x38>)
 8008490:	4013      	ands	r3, r2
 8008492:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4313      	orrs	r3, r2
 800849a:	f043 0307 	orr.w	r3, r3, #7
 800849e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	609a      	str	r2, [r3, #8]
}
 80084a6:	bf00      	nop
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	ffcfff8f 	.word	0xffcfff8f

080084b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	021a      	lsls	r2, r3, #8
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	431a      	orrs	r2, r3
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	4313      	orrs	r3, r2
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	609a      	str	r2, [r3, #8]
}
 80084ec:	bf00      	nop
 80084ee:	371c      	adds	r7, #28
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008508:	2b01      	cmp	r3, #1
 800850a:	d101      	bne.n	8008510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800850c:	2302      	movs	r3, #2
 800850e:	e06d      	b.n	80085ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2202      	movs	r2, #2
 800851c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a30      	ldr	r2, [pc, #192]	; (80085f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d004      	beq.n	8008544 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a2f      	ldr	r2, [pc, #188]	; (80085fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d108      	bne.n	8008556 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800854a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	4313      	orrs	r3, r2
 8008554:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800855c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	4313      	orrs	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a20      	ldr	r2, [pc, #128]	; (80085f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d022      	beq.n	80085c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008582:	d01d      	beq.n	80085c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a1d      	ldr	r2, [pc, #116]	; (8008600 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d018      	beq.n	80085c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a1c      	ldr	r2, [pc, #112]	; (8008604 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d013      	beq.n	80085c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a1a      	ldr	r2, [pc, #104]	; (8008608 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d00e      	beq.n	80085c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a15      	ldr	r2, [pc, #84]	; (80085fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d009      	beq.n	80085c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a16      	ldr	r2, [pc, #88]	; (800860c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d004      	beq.n	80085c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a15      	ldr	r2, [pc, #84]	; (8008610 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d10c      	bne.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	40010000 	.word	0x40010000
 80085fc:	40010400 	.word	0x40010400
 8008600:	40000400 	.word	0x40000400
 8008604:	40000800 	.word	0x40000800
 8008608:	40000c00 	.word	0x40000c00
 800860c:	40001800 	.word	0x40001800
 8008610:	40014000 	.word	0x40014000

08008614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d101      	bne.n	8008662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e042      	b.n	80086e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008668:	2b00      	cmp	r3, #0
 800866a:	d106      	bne.n	800867a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7f9 f8dd 	bl	8001834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2224      	movs	r2, #36	; 0x24
 800867e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f022 0201 	bic.w	r2, r2, #1
 8008690:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fce0 	bl	8009058 <UART_SetConfig>
 8008698:	4603      	mov	r3, r0
 800869a:	2b01      	cmp	r3, #1
 800869c:	d101      	bne.n	80086a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e022      	b.n	80086e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f001 fb40 	bl	8009d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	689a      	ldr	r2, [r3, #8]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f042 0201 	orr.w	r2, r2, #1
 80086de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f001 fbc7 	bl	8009e74 <UART_CheckIdleState>
 80086e6:	4603      	mov	r3, r0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08a      	sub	sp, #40	; 0x28
 80086f4:	af02      	add	r7, sp, #8
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	603b      	str	r3, [r7, #0]
 80086fc:	4613      	mov	r3, r2
 80086fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008706:	2b20      	cmp	r3, #32
 8008708:	d17b      	bne.n	8008802 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <HAL_UART_Transmit+0x26>
 8008710:	88fb      	ldrh	r3, [r7, #6]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e074      	b.n	8008804 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2221      	movs	r2, #33	; 0x21
 8008726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800872a:	f7f9 fc07 	bl	8001f3c <HAL_GetTick>
 800872e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	88fa      	ldrh	r2, [r7, #6]
 8008734:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	88fa      	ldrh	r2, [r7, #6]
 800873c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008748:	d108      	bne.n	800875c <HAL_UART_Transmit+0x6c>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d104      	bne.n	800875c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008752:	2300      	movs	r3, #0
 8008754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	61bb      	str	r3, [r7, #24]
 800875a:	e003      	b.n	8008764 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008760:	2300      	movs	r3, #0
 8008762:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008764:	e030      	b.n	80087c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	2200      	movs	r2, #0
 800876e:	2180      	movs	r1, #128	; 0x80
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f001 fc29 	bl	8009fc8 <UART_WaitOnFlagUntilTimeout>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d005      	beq.n	8008788 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2220      	movs	r2, #32
 8008780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e03d      	b.n	8008804 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10b      	bne.n	80087a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800879c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	3302      	adds	r3, #2
 80087a2:	61bb      	str	r3, [r7, #24]
 80087a4:	e007      	b.n	80087b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	781a      	ldrb	r2, [r3, #0]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	3301      	adds	r3, #1
 80087b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80087bc:	b29b      	uxth	r3, r3
 80087be:	3b01      	subs	r3, #1
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1c8      	bne.n	8008766 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2200      	movs	r2, #0
 80087dc:	2140      	movs	r1, #64	; 0x40
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f001 fbf2 	bl	8009fc8 <UART_WaitOnFlagUntilTimeout>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d005      	beq.n	80087f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2220      	movs	r2, #32
 80087ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e006      	b.n	8008804 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2220      	movs	r2, #32
 80087fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	e000      	b.n	8008804 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008802:	2302      	movs	r3, #2
  }
}
 8008804:	4618      	mov	r0, r3
 8008806:	3720      	adds	r7, #32
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08a      	sub	sp, #40	; 0x28
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	4613      	mov	r3, r2
 8008818:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008820:	2b20      	cmp	r3, #32
 8008822:	d137      	bne.n	8008894 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <HAL_UART_Receive_IT+0x24>
 800882a:	88fb      	ldrh	r3, [r7, #6]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e030      	b.n	8008896 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a18      	ldr	r2, [pc, #96]	; (80088a0 <HAL_UART_Receive_IT+0x94>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d01f      	beq.n	8008884 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d018      	beq.n	8008884 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	e853 3f00 	ldrex	r3, [r3]
 800885e:	613b      	str	r3, [r7, #16]
   return(result);
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008866:	627b      	str	r3, [r7, #36]	; 0x24
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	461a      	mov	r2, r3
 800886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008870:	623b      	str	r3, [r7, #32]
 8008872:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008874:	69f9      	ldr	r1, [r7, #28]
 8008876:	6a3a      	ldr	r2, [r7, #32]
 8008878:	e841 2300 	strex	r3, r2, [r1]
 800887c:	61bb      	str	r3, [r7, #24]
   return(result);
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1e6      	bne.n	8008852 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008884:	88fb      	ldrh	r3, [r7, #6]
 8008886:	461a      	mov	r2, r3
 8008888:	68b9      	ldr	r1, [r7, #8]
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f001 fc04 	bl	800a098 <UART_Start_Receive_IT>
 8008890:	4603      	mov	r3, r0
 8008892:	e000      	b.n	8008896 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008894:	2302      	movs	r3, #2
  }
}
 8008896:	4618      	mov	r0, r3
 8008898:	3728      	adds	r7, #40	; 0x28
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	58000c00 	.word	0x58000c00

080088a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b0ba      	sub	sp, #232	; 0xe8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80088ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80088ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80088d2:	4013      	ands	r3, r2
 80088d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80088d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d11b      	bne.n	8008918 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80088e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088e4:	f003 0320 	and.w	r3, r3, #32
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d015      	beq.n	8008918 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088f0:	f003 0320 	and.w	r3, r3, #32
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d105      	bne.n	8008904 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d009      	beq.n	8008918 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 8377 	beq.w	8008ffc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	4798      	blx	r3
      }
      return;
 8008916:	e371      	b.n	8008ffc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 8123 	beq.w	8008b68 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008922:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008926:	4b8d      	ldr	r3, [pc, #564]	; (8008b5c <HAL_UART_IRQHandler+0x2b8>)
 8008928:	4013      	ands	r3, r2
 800892a:	2b00      	cmp	r3, #0
 800892c:	d106      	bne.n	800893c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800892e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008932:	4b8b      	ldr	r3, [pc, #556]	; (8008b60 <HAL_UART_IRQHandler+0x2bc>)
 8008934:	4013      	ands	r3, r2
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 8116 	beq.w	8008b68 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800893c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b00      	cmp	r3, #0
 8008946:	d011      	beq.n	800896c <HAL_UART_IRQHandler+0xc8>
 8008948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800894c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00b      	beq.n	800896c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2201      	movs	r2, #1
 800895a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008962:	f043 0201 	orr.w	r2, r3, #1
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800896c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	2b00      	cmp	r3, #0
 8008976:	d011      	beq.n	800899c <HAL_UART_IRQHandler+0xf8>
 8008978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800897c:	f003 0301 	and.w	r3, r3, #1
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00b      	beq.n	800899c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2202      	movs	r2, #2
 800898a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008992:	f043 0204 	orr.w	r2, r3, #4
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800899c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a0:	f003 0304 	and.w	r3, r3, #4
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d011      	beq.n	80089cc <HAL_UART_IRQHandler+0x128>
 80089a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089ac:	f003 0301 	and.w	r3, r3, #1
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00b      	beq.n	80089cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2204      	movs	r2, #4
 80089ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089c2:	f043 0202 	orr.w	r2, r3, #2
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80089cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d0:	f003 0308 	and.w	r3, r3, #8
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d017      	beq.n	8008a08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80089d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089dc:	f003 0320 	and.w	r3, r3, #32
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d105      	bne.n	80089f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80089e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80089e8:	4b5c      	ldr	r3, [pc, #368]	; (8008b5c <HAL_UART_IRQHandler+0x2b8>)
 80089ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00b      	beq.n	8008a08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2208      	movs	r2, #8
 80089f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089fe:	f043 0208 	orr.w	r2, r3, #8
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d012      	beq.n	8008a3a <HAL_UART_IRQHandler+0x196>
 8008a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00c      	beq.n	8008a3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a30:	f043 0220 	orr.w	r2, r3, #32
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 82dd 	beq.w	8009000 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a4a:	f003 0320 	and.w	r3, r3, #32
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d013      	beq.n	8008a7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a56:	f003 0320 	and.w	r3, r3, #32
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d105      	bne.n	8008a6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d007      	beq.n	8008a7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d003      	beq.n	8008a7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8e:	2b40      	cmp	r3, #64	; 0x40
 8008a90:	d005      	beq.n	8008a9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d054      	beq.n	8008b48 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f001 fc1c 	bl	800a2dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aae:	2b40      	cmp	r3, #64	; 0x40
 8008ab0:	d146      	bne.n	8008b40 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3308      	adds	r3, #8
 8008ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3308      	adds	r3, #8
 8008ada:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008ade:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008aea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008aee:	e841 2300 	strex	r3, r2, [r1]
 8008af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008af6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1d9      	bne.n	8008ab2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d017      	beq.n	8008b38 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b0e:	4a15      	ldr	r2, [pc, #84]	; (8008b64 <HAL_UART_IRQHandler+0x2c0>)
 8008b10:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fb f83b 	bl	8003b94 <HAL_DMA_Abort_IT>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d019      	beq.n	8008b58 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008b32:	4610      	mov	r0, r2
 8008b34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b36:	e00f      	b.n	8008b58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fa77 	bl	800902c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b3e:	e00b      	b.n	8008b58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fa73 	bl	800902c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b46:	e007      	b.n	8008b58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fa6f 	bl	800902c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008b56:	e253      	b.n	8009000 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b58:	bf00      	nop
    return;
 8008b5a:	e251      	b.n	8009000 <HAL_UART_IRQHandler+0x75c>
 8008b5c:	10000001 	.word	0x10000001
 8008b60:	04000120 	.word	0x04000120
 8008b64:	0800a3a9 	.word	0x0800a3a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	f040 81e7 	bne.w	8008f40 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b76:	f003 0310 	and.w	r3, r3, #16
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f000 81e0 	beq.w	8008f40 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b84:	f003 0310 	and.w	r3, r3, #16
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 81d9 	beq.w	8008f40 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2210      	movs	r2, #16
 8008b94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba0:	2b40      	cmp	r3, #64	; 0x40
 8008ba2:	f040 8151 	bne.w	8008e48 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a96      	ldr	r2, [pc, #600]	; (8008e08 <HAL_UART_IRQHandler+0x564>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d068      	beq.n	8008c86 <HAL_UART_IRQHandler+0x3e2>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a93      	ldr	r2, [pc, #588]	; (8008e0c <HAL_UART_IRQHandler+0x568>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d061      	beq.n	8008c86 <HAL_UART_IRQHandler+0x3e2>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a91      	ldr	r2, [pc, #580]	; (8008e10 <HAL_UART_IRQHandler+0x56c>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d05a      	beq.n	8008c86 <HAL_UART_IRQHandler+0x3e2>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a8e      	ldr	r2, [pc, #568]	; (8008e14 <HAL_UART_IRQHandler+0x570>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d053      	beq.n	8008c86 <HAL_UART_IRQHandler+0x3e2>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a8c      	ldr	r2, [pc, #560]	; (8008e18 <HAL_UART_IRQHandler+0x574>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d04c      	beq.n	8008c86 <HAL_UART_IRQHandler+0x3e2>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a89      	ldr	r2, [pc, #548]	; (8008e1c <HAL_UART_IRQHandler+0x578>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d045      	beq.n	8008c86 <HAL_UART_IRQHandler+0x3e2>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a87      	ldr	r2, [pc, #540]	; (8008e20 <HAL_UART_IRQHandler+0x57c>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d03e      	beq.n	8008c86 <HAL_UART_IRQHandler+0x3e2>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a84      	ldr	r2, [pc, #528]	; (8008e24 <HAL_UART_IRQHandler+0x580>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d037      	beq.n	8008c86 <HAL_UART_IRQHandler+0x3e2>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a82      	ldr	r2, [pc, #520]	; (8008e28 <HAL_UART_IRQHandler+0x584>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d030      	beq.n	8008c86 <HAL_UART_IRQHandler+0x3e2>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a7f      	ldr	r2, [pc, #508]	; (8008e2c <HAL_UART_IRQHandler+0x588>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d029      	beq.n	8008c86 <HAL_UART_IRQHandler+0x3e2>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a7d      	ldr	r2, [pc, #500]	; (8008e30 <HAL_UART_IRQHandler+0x58c>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d022      	beq.n	8008c86 <HAL_UART_IRQHandler+0x3e2>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a7a      	ldr	r2, [pc, #488]	; (8008e34 <HAL_UART_IRQHandler+0x590>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d01b      	beq.n	8008c86 <HAL_UART_IRQHandler+0x3e2>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a78      	ldr	r2, [pc, #480]	; (8008e38 <HAL_UART_IRQHandler+0x594>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d014      	beq.n	8008c86 <HAL_UART_IRQHandler+0x3e2>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a75      	ldr	r2, [pc, #468]	; (8008e3c <HAL_UART_IRQHandler+0x598>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d00d      	beq.n	8008c86 <HAL_UART_IRQHandler+0x3e2>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a73      	ldr	r2, [pc, #460]	; (8008e40 <HAL_UART_IRQHandler+0x59c>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d006      	beq.n	8008c86 <HAL_UART_IRQHandler+0x3e2>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a70      	ldr	r2, [pc, #448]	; (8008e44 <HAL_UART_IRQHandler+0x5a0>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d106      	bne.n	8008c94 <HAL_UART_IRQHandler+0x3f0>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	e005      	b.n	8008ca0 <HAL_UART_IRQHandler+0x3fc>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ca4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f000 81ab 	beq.w	8009004 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008cb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	f080 81a3 	bcs.w	8009004 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cce:	69db      	ldr	r3, [r3, #28]
 8008cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cd4:	f000 8087 	beq.w	8008de6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008d0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d12:	e841 2300 	strex	r3, r2, [r1]
 8008d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1da      	bne.n	8008cd8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3308      	adds	r3, #8
 8008d28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d2c:	e853 3f00 	ldrex	r3, [r3]
 8008d30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d34:	f023 0301 	bic.w	r3, r3, #1
 8008d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3308      	adds	r3, #8
 8008d42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008d4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d52:	e841 2300 	strex	r3, r2, [r1]
 8008d56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1e1      	bne.n	8008d22 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3308      	adds	r3, #8
 8008d64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d68:	e853 3f00 	ldrex	r3, [r3]
 8008d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	3308      	adds	r3, #8
 8008d7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d8a:	e841 2300 	strex	r3, r2, [r1]
 8008d8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1e3      	bne.n	8008d5e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dac:	e853 3f00 	ldrex	r3, [r3]
 8008db0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db4:	f023 0310 	bic.w	r3, r3, #16
 8008db8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8008dc8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008dcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008dce:	e841 2300 	strex	r3, r2, [r1]
 8008dd2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1e4      	bne.n	8008da4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fa fbb9 	bl	8003558 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2202      	movs	r2, #2
 8008dea:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f91d 	bl	8009040 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e06:	e0fd      	b.n	8009004 <HAL_UART_IRQHandler+0x760>
 8008e08:	40020010 	.word	0x40020010
 8008e0c:	40020028 	.word	0x40020028
 8008e10:	40020040 	.word	0x40020040
 8008e14:	40020058 	.word	0x40020058
 8008e18:	40020070 	.word	0x40020070
 8008e1c:	40020088 	.word	0x40020088
 8008e20:	400200a0 	.word	0x400200a0
 8008e24:	400200b8 	.word	0x400200b8
 8008e28:	40020410 	.word	0x40020410
 8008e2c:	40020428 	.word	0x40020428
 8008e30:	40020440 	.word	0x40020440
 8008e34:	40020458 	.word	0x40020458
 8008e38:	40020470 	.word	0x40020470
 8008e3c:	40020488 	.word	0x40020488
 8008e40:	400204a0 	.word	0x400204a0
 8008e44:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f000 80cf 	beq.w	8009008 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008e6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 80ca 	beq.w	8009008 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7c:	e853 3f00 	ldrex	r3, [r3]
 8008e80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	461a      	mov	r2, r3
 8008e92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e96:	647b      	str	r3, [r7, #68]	; 0x44
 8008e98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e9e:	e841 2300 	strex	r3, r2, [r1]
 8008ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1e4      	bne.n	8008e74 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3308      	adds	r3, #8
 8008eb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	e853 3f00 	ldrex	r3, [r3]
 8008eb8:	623b      	str	r3, [r7, #32]
   return(result);
 8008eba:	6a3a      	ldr	r2, [r7, #32]
 8008ebc:	4b55      	ldr	r3, [pc, #340]	; (8009014 <HAL_UART_IRQHandler+0x770>)
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3308      	adds	r3, #8
 8008eca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008ece:	633a      	str	r2, [r7, #48]	; 0x30
 8008ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ed6:	e841 2300 	strex	r3, r2, [r1]
 8008eda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e3      	bne.n	8008eaa <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2220      	movs	r2, #32
 8008ee6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	e853 3f00 	ldrex	r3, [r3]
 8008f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f023 0310 	bic.w	r3, r3, #16
 8008f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	461a      	mov	r2, r3
 8008f14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008f18:	61fb      	str	r3, [r7, #28]
 8008f1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1c:	69b9      	ldr	r1, [r7, #24]
 8008f1e:	69fa      	ldr	r2, [r7, #28]
 8008f20:	e841 2300 	strex	r3, r2, [r1]
 8008f24:	617b      	str	r3, [r7, #20]
   return(result);
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1e4      	bne.n	8008ef6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f881 	bl	8009040 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f3e:	e063      	b.n	8009008 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00e      	beq.n	8008f6a <HAL_UART_IRQHandler+0x6c6>
 8008f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d008      	beq.n	8008f6a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008f60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f001 ff7e 	bl	800ae64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f68:	e051      	b.n	800900e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d014      	beq.n	8008fa0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d105      	bne.n	8008f8e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d008      	beq.n	8008fa0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d03a      	beq.n	800900c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	4798      	blx	r3
    }
    return;
 8008f9e:	e035      	b.n	800900c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d009      	beq.n	8008fc0 <HAL_UART_IRQHandler+0x71c>
 8008fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d003      	beq.n	8008fc0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f001 fa0b 	bl	800a3d4 <UART_EndTransmit_IT>
    return;
 8008fbe:	e026      	b.n	800900e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d009      	beq.n	8008fe0 <HAL_UART_IRQHandler+0x73c>
 8008fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d003      	beq.n	8008fe0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 ff57 	bl	800ae8c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fde:	e016      	b.n	800900e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d010      	beq.n	800900e <HAL_UART_IRQHandler+0x76a>
 8008fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	da0c      	bge.n	800900e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f001 ff3f 	bl	800ae78 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ffa:	e008      	b.n	800900e <HAL_UART_IRQHandler+0x76a>
      return;
 8008ffc:	bf00      	nop
 8008ffe:	e006      	b.n	800900e <HAL_UART_IRQHandler+0x76a>
    return;
 8009000:	bf00      	nop
 8009002:	e004      	b.n	800900e <HAL_UART_IRQHandler+0x76a>
      return;
 8009004:	bf00      	nop
 8009006:	e002      	b.n	800900e <HAL_UART_IRQHandler+0x76a>
      return;
 8009008:	bf00      	nop
 800900a:	e000      	b.n	800900e <HAL_UART_IRQHandler+0x76a>
    return;
 800900c:	bf00      	nop
  }
}
 800900e:	37e8      	adds	r7, #232	; 0xe8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	effffffe 	.word	0xeffffffe

08009018 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	460b      	mov	r3, r1
 800904a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800905c:	b092      	sub	sp, #72	; 0x48
 800905e:	af00      	add	r7, sp, #0
 8009060:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009062:	2300      	movs	r3, #0
 8009064:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	689a      	ldr	r2, [r3, #8]
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	431a      	orrs	r2, r3
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	431a      	orrs	r2, r3
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	69db      	ldr	r3, [r3, #28]
 800907c:	4313      	orrs	r3, r2
 800907e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	4bbe      	ldr	r3, [pc, #760]	; (8009380 <UART_SetConfig+0x328>)
 8009088:	4013      	ands	r3, r2
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	6812      	ldr	r2, [r2, #0]
 800908e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009090:	430b      	orrs	r3, r1
 8009092:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	68da      	ldr	r2, [r3, #12]
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4ab3      	ldr	r2, [pc, #716]	; (8009384 <UART_SetConfig+0x32c>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d004      	beq.n	80090c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090c0:	4313      	orrs	r3, r2
 80090c2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689a      	ldr	r2, [r3, #8]
 80090ca:	4baf      	ldr	r3, [pc, #700]	; (8009388 <UART_SetConfig+0x330>)
 80090cc:	4013      	ands	r3, r2
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	6812      	ldr	r2, [r2, #0]
 80090d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80090d4:	430b      	orrs	r3, r1
 80090d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090de:	f023 010f 	bic.w	r1, r3, #15
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	430a      	orrs	r2, r1
 80090ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4aa6      	ldr	r2, [pc, #664]	; (800938c <UART_SetConfig+0x334>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d177      	bne.n	80091e8 <UART_SetConfig+0x190>
 80090f8:	4ba5      	ldr	r3, [pc, #660]	; (8009390 <UART_SetConfig+0x338>)
 80090fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009100:	2b28      	cmp	r3, #40	; 0x28
 8009102:	d86d      	bhi.n	80091e0 <UART_SetConfig+0x188>
 8009104:	a201      	add	r2, pc, #4	; (adr r2, 800910c <UART_SetConfig+0xb4>)
 8009106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910a:	bf00      	nop
 800910c:	080091b1 	.word	0x080091b1
 8009110:	080091e1 	.word	0x080091e1
 8009114:	080091e1 	.word	0x080091e1
 8009118:	080091e1 	.word	0x080091e1
 800911c:	080091e1 	.word	0x080091e1
 8009120:	080091e1 	.word	0x080091e1
 8009124:	080091e1 	.word	0x080091e1
 8009128:	080091e1 	.word	0x080091e1
 800912c:	080091b9 	.word	0x080091b9
 8009130:	080091e1 	.word	0x080091e1
 8009134:	080091e1 	.word	0x080091e1
 8009138:	080091e1 	.word	0x080091e1
 800913c:	080091e1 	.word	0x080091e1
 8009140:	080091e1 	.word	0x080091e1
 8009144:	080091e1 	.word	0x080091e1
 8009148:	080091e1 	.word	0x080091e1
 800914c:	080091c1 	.word	0x080091c1
 8009150:	080091e1 	.word	0x080091e1
 8009154:	080091e1 	.word	0x080091e1
 8009158:	080091e1 	.word	0x080091e1
 800915c:	080091e1 	.word	0x080091e1
 8009160:	080091e1 	.word	0x080091e1
 8009164:	080091e1 	.word	0x080091e1
 8009168:	080091e1 	.word	0x080091e1
 800916c:	080091c9 	.word	0x080091c9
 8009170:	080091e1 	.word	0x080091e1
 8009174:	080091e1 	.word	0x080091e1
 8009178:	080091e1 	.word	0x080091e1
 800917c:	080091e1 	.word	0x080091e1
 8009180:	080091e1 	.word	0x080091e1
 8009184:	080091e1 	.word	0x080091e1
 8009188:	080091e1 	.word	0x080091e1
 800918c:	080091d1 	.word	0x080091d1
 8009190:	080091e1 	.word	0x080091e1
 8009194:	080091e1 	.word	0x080091e1
 8009198:	080091e1 	.word	0x080091e1
 800919c:	080091e1 	.word	0x080091e1
 80091a0:	080091e1 	.word	0x080091e1
 80091a4:	080091e1 	.word	0x080091e1
 80091a8:	080091e1 	.word	0x080091e1
 80091ac:	080091d9 	.word	0x080091d9
 80091b0:	2301      	movs	r3, #1
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091b6:	e326      	b.n	8009806 <UART_SetConfig+0x7ae>
 80091b8:	2304      	movs	r3, #4
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091be:	e322      	b.n	8009806 <UART_SetConfig+0x7ae>
 80091c0:	2308      	movs	r3, #8
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091c6:	e31e      	b.n	8009806 <UART_SetConfig+0x7ae>
 80091c8:	2310      	movs	r3, #16
 80091ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ce:	e31a      	b.n	8009806 <UART_SetConfig+0x7ae>
 80091d0:	2320      	movs	r3, #32
 80091d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091d6:	e316      	b.n	8009806 <UART_SetConfig+0x7ae>
 80091d8:	2340      	movs	r3, #64	; 0x40
 80091da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091de:	e312      	b.n	8009806 <UART_SetConfig+0x7ae>
 80091e0:	2380      	movs	r3, #128	; 0x80
 80091e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091e6:	e30e      	b.n	8009806 <UART_SetConfig+0x7ae>
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a69      	ldr	r2, [pc, #420]	; (8009394 <UART_SetConfig+0x33c>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d130      	bne.n	8009254 <UART_SetConfig+0x1fc>
 80091f2:	4b67      	ldr	r3, [pc, #412]	; (8009390 <UART_SetConfig+0x338>)
 80091f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f6:	f003 0307 	and.w	r3, r3, #7
 80091fa:	2b05      	cmp	r3, #5
 80091fc:	d826      	bhi.n	800924c <UART_SetConfig+0x1f4>
 80091fe:	a201      	add	r2, pc, #4	; (adr r2, 8009204 <UART_SetConfig+0x1ac>)
 8009200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009204:	0800921d 	.word	0x0800921d
 8009208:	08009225 	.word	0x08009225
 800920c:	0800922d 	.word	0x0800922d
 8009210:	08009235 	.word	0x08009235
 8009214:	0800923d 	.word	0x0800923d
 8009218:	08009245 	.word	0x08009245
 800921c:	2300      	movs	r3, #0
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009222:	e2f0      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009224:	2304      	movs	r3, #4
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800922a:	e2ec      	b.n	8009806 <UART_SetConfig+0x7ae>
 800922c:	2308      	movs	r3, #8
 800922e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009232:	e2e8      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009234:	2310      	movs	r3, #16
 8009236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800923a:	e2e4      	b.n	8009806 <UART_SetConfig+0x7ae>
 800923c:	2320      	movs	r3, #32
 800923e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009242:	e2e0      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009244:	2340      	movs	r3, #64	; 0x40
 8009246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800924a:	e2dc      	b.n	8009806 <UART_SetConfig+0x7ae>
 800924c:	2380      	movs	r3, #128	; 0x80
 800924e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009252:	e2d8      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a4f      	ldr	r2, [pc, #316]	; (8009398 <UART_SetConfig+0x340>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d130      	bne.n	80092c0 <UART_SetConfig+0x268>
 800925e:	4b4c      	ldr	r3, [pc, #304]	; (8009390 <UART_SetConfig+0x338>)
 8009260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009262:	f003 0307 	and.w	r3, r3, #7
 8009266:	2b05      	cmp	r3, #5
 8009268:	d826      	bhi.n	80092b8 <UART_SetConfig+0x260>
 800926a:	a201      	add	r2, pc, #4	; (adr r2, 8009270 <UART_SetConfig+0x218>)
 800926c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009270:	08009289 	.word	0x08009289
 8009274:	08009291 	.word	0x08009291
 8009278:	08009299 	.word	0x08009299
 800927c:	080092a1 	.word	0x080092a1
 8009280:	080092a9 	.word	0x080092a9
 8009284:	080092b1 	.word	0x080092b1
 8009288:	2300      	movs	r3, #0
 800928a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800928e:	e2ba      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009290:	2304      	movs	r3, #4
 8009292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009296:	e2b6      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009298:	2308      	movs	r3, #8
 800929a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800929e:	e2b2      	b.n	8009806 <UART_SetConfig+0x7ae>
 80092a0:	2310      	movs	r3, #16
 80092a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092a6:	e2ae      	b.n	8009806 <UART_SetConfig+0x7ae>
 80092a8:	2320      	movs	r3, #32
 80092aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ae:	e2aa      	b.n	8009806 <UART_SetConfig+0x7ae>
 80092b0:	2340      	movs	r3, #64	; 0x40
 80092b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092b6:	e2a6      	b.n	8009806 <UART_SetConfig+0x7ae>
 80092b8:	2380      	movs	r3, #128	; 0x80
 80092ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092be:	e2a2      	b.n	8009806 <UART_SetConfig+0x7ae>
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a35      	ldr	r2, [pc, #212]	; (800939c <UART_SetConfig+0x344>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d130      	bne.n	800932c <UART_SetConfig+0x2d4>
 80092ca:	4b31      	ldr	r3, [pc, #196]	; (8009390 <UART_SetConfig+0x338>)
 80092cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ce:	f003 0307 	and.w	r3, r3, #7
 80092d2:	2b05      	cmp	r3, #5
 80092d4:	d826      	bhi.n	8009324 <UART_SetConfig+0x2cc>
 80092d6:	a201      	add	r2, pc, #4	; (adr r2, 80092dc <UART_SetConfig+0x284>)
 80092d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092dc:	080092f5 	.word	0x080092f5
 80092e0:	080092fd 	.word	0x080092fd
 80092e4:	08009305 	.word	0x08009305
 80092e8:	0800930d 	.word	0x0800930d
 80092ec:	08009315 	.word	0x08009315
 80092f0:	0800931d 	.word	0x0800931d
 80092f4:	2300      	movs	r3, #0
 80092f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092fa:	e284      	b.n	8009806 <UART_SetConfig+0x7ae>
 80092fc:	2304      	movs	r3, #4
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009302:	e280      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009304:	2308      	movs	r3, #8
 8009306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800930a:	e27c      	b.n	8009806 <UART_SetConfig+0x7ae>
 800930c:	2310      	movs	r3, #16
 800930e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009312:	e278      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009314:	2320      	movs	r3, #32
 8009316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800931a:	e274      	b.n	8009806 <UART_SetConfig+0x7ae>
 800931c:	2340      	movs	r3, #64	; 0x40
 800931e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009322:	e270      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009324:	2380      	movs	r3, #128	; 0x80
 8009326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800932a:	e26c      	b.n	8009806 <UART_SetConfig+0x7ae>
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a1b      	ldr	r2, [pc, #108]	; (80093a0 <UART_SetConfig+0x348>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d142      	bne.n	80093bc <UART_SetConfig+0x364>
 8009336:	4b16      	ldr	r3, [pc, #88]	; (8009390 <UART_SetConfig+0x338>)
 8009338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800933a:	f003 0307 	and.w	r3, r3, #7
 800933e:	2b05      	cmp	r3, #5
 8009340:	d838      	bhi.n	80093b4 <UART_SetConfig+0x35c>
 8009342:	a201      	add	r2, pc, #4	; (adr r2, 8009348 <UART_SetConfig+0x2f0>)
 8009344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009348:	08009361 	.word	0x08009361
 800934c:	08009369 	.word	0x08009369
 8009350:	08009371 	.word	0x08009371
 8009354:	08009379 	.word	0x08009379
 8009358:	080093a5 	.word	0x080093a5
 800935c:	080093ad 	.word	0x080093ad
 8009360:	2300      	movs	r3, #0
 8009362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009366:	e24e      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009368:	2304      	movs	r3, #4
 800936a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800936e:	e24a      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009370:	2308      	movs	r3, #8
 8009372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009376:	e246      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009378:	2310      	movs	r3, #16
 800937a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800937e:	e242      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009380:	cfff69f3 	.word	0xcfff69f3
 8009384:	58000c00 	.word	0x58000c00
 8009388:	11fff4ff 	.word	0x11fff4ff
 800938c:	40011000 	.word	0x40011000
 8009390:	58024400 	.word	0x58024400
 8009394:	40004400 	.word	0x40004400
 8009398:	40004800 	.word	0x40004800
 800939c:	40004c00 	.word	0x40004c00
 80093a0:	40005000 	.word	0x40005000
 80093a4:	2320      	movs	r3, #32
 80093a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093aa:	e22c      	b.n	8009806 <UART_SetConfig+0x7ae>
 80093ac:	2340      	movs	r3, #64	; 0x40
 80093ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093b2:	e228      	b.n	8009806 <UART_SetConfig+0x7ae>
 80093b4:	2380      	movs	r3, #128	; 0x80
 80093b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ba:	e224      	b.n	8009806 <UART_SetConfig+0x7ae>
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4ab1      	ldr	r2, [pc, #708]	; (8009688 <UART_SetConfig+0x630>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d176      	bne.n	80094b4 <UART_SetConfig+0x45c>
 80093c6:	4bb1      	ldr	r3, [pc, #708]	; (800968c <UART_SetConfig+0x634>)
 80093c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093ce:	2b28      	cmp	r3, #40	; 0x28
 80093d0:	d86c      	bhi.n	80094ac <UART_SetConfig+0x454>
 80093d2:	a201      	add	r2, pc, #4	; (adr r2, 80093d8 <UART_SetConfig+0x380>)
 80093d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d8:	0800947d 	.word	0x0800947d
 80093dc:	080094ad 	.word	0x080094ad
 80093e0:	080094ad 	.word	0x080094ad
 80093e4:	080094ad 	.word	0x080094ad
 80093e8:	080094ad 	.word	0x080094ad
 80093ec:	080094ad 	.word	0x080094ad
 80093f0:	080094ad 	.word	0x080094ad
 80093f4:	080094ad 	.word	0x080094ad
 80093f8:	08009485 	.word	0x08009485
 80093fc:	080094ad 	.word	0x080094ad
 8009400:	080094ad 	.word	0x080094ad
 8009404:	080094ad 	.word	0x080094ad
 8009408:	080094ad 	.word	0x080094ad
 800940c:	080094ad 	.word	0x080094ad
 8009410:	080094ad 	.word	0x080094ad
 8009414:	080094ad 	.word	0x080094ad
 8009418:	0800948d 	.word	0x0800948d
 800941c:	080094ad 	.word	0x080094ad
 8009420:	080094ad 	.word	0x080094ad
 8009424:	080094ad 	.word	0x080094ad
 8009428:	080094ad 	.word	0x080094ad
 800942c:	080094ad 	.word	0x080094ad
 8009430:	080094ad 	.word	0x080094ad
 8009434:	080094ad 	.word	0x080094ad
 8009438:	08009495 	.word	0x08009495
 800943c:	080094ad 	.word	0x080094ad
 8009440:	080094ad 	.word	0x080094ad
 8009444:	080094ad 	.word	0x080094ad
 8009448:	080094ad 	.word	0x080094ad
 800944c:	080094ad 	.word	0x080094ad
 8009450:	080094ad 	.word	0x080094ad
 8009454:	080094ad 	.word	0x080094ad
 8009458:	0800949d 	.word	0x0800949d
 800945c:	080094ad 	.word	0x080094ad
 8009460:	080094ad 	.word	0x080094ad
 8009464:	080094ad 	.word	0x080094ad
 8009468:	080094ad 	.word	0x080094ad
 800946c:	080094ad 	.word	0x080094ad
 8009470:	080094ad 	.word	0x080094ad
 8009474:	080094ad 	.word	0x080094ad
 8009478:	080094a5 	.word	0x080094a5
 800947c:	2301      	movs	r3, #1
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009482:	e1c0      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009484:	2304      	movs	r3, #4
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800948a:	e1bc      	b.n	8009806 <UART_SetConfig+0x7ae>
 800948c:	2308      	movs	r3, #8
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009492:	e1b8      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009494:	2310      	movs	r3, #16
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800949a:	e1b4      	b.n	8009806 <UART_SetConfig+0x7ae>
 800949c:	2320      	movs	r3, #32
 800949e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094a2:	e1b0      	b.n	8009806 <UART_SetConfig+0x7ae>
 80094a4:	2340      	movs	r3, #64	; 0x40
 80094a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094aa:	e1ac      	b.n	8009806 <UART_SetConfig+0x7ae>
 80094ac:	2380      	movs	r3, #128	; 0x80
 80094ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094b2:	e1a8      	b.n	8009806 <UART_SetConfig+0x7ae>
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a75      	ldr	r2, [pc, #468]	; (8009690 <UART_SetConfig+0x638>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d130      	bne.n	8009520 <UART_SetConfig+0x4c8>
 80094be:	4b73      	ldr	r3, [pc, #460]	; (800968c <UART_SetConfig+0x634>)
 80094c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094c2:	f003 0307 	and.w	r3, r3, #7
 80094c6:	2b05      	cmp	r3, #5
 80094c8:	d826      	bhi.n	8009518 <UART_SetConfig+0x4c0>
 80094ca:	a201      	add	r2, pc, #4	; (adr r2, 80094d0 <UART_SetConfig+0x478>)
 80094cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d0:	080094e9 	.word	0x080094e9
 80094d4:	080094f1 	.word	0x080094f1
 80094d8:	080094f9 	.word	0x080094f9
 80094dc:	08009501 	.word	0x08009501
 80094e0:	08009509 	.word	0x08009509
 80094e4:	08009511 	.word	0x08009511
 80094e8:	2300      	movs	r3, #0
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ee:	e18a      	b.n	8009806 <UART_SetConfig+0x7ae>
 80094f0:	2304      	movs	r3, #4
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094f6:	e186      	b.n	8009806 <UART_SetConfig+0x7ae>
 80094f8:	2308      	movs	r3, #8
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094fe:	e182      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009500:	2310      	movs	r3, #16
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009506:	e17e      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009508:	2320      	movs	r3, #32
 800950a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800950e:	e17a      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009510:	2340      	movs	r3, #64	; 0x40
 8009512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009516:	e176      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009518:	2380      	movs	r3, #128	; 0x80
 800951a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800951e:	e172      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a5b      	ldr	r2, [pc, #364]	; (8009694 <UART_SetConfig+0x63c>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d130      	bne.n	800958c <UART_SetConfig+0x534>
 800952a:	4b58      	ldr	r3, [pc, #352]	; (800968c <UART_SetConfig+0x634>)
 800952c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800952e:	f003 0307 	and.w	r3, r3, #7
 8009532:	2b05      	cmp	r3, #5
 8009534:	d826      	bhi.n	8009584 <UART_SetConfig+0x52c>
 8009536:	a201      	add	r2, pc, #4	; (adr r2, 800953c <UART_SetConfig+0x4e4>)
 8009538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953c:	08009555 	.word	0x08009555
 8009540:	0800955d 	.word	0x0800955d
 8009544:	08009565 	.word	0x08009565
 8009548:	0800956d 	.word	0x0800956d
 800954c:	08009575 	.word	0x08009575
 8009550:	0800957d 	.word	0x0800957d
 8009554:	2300      	movs	r3, #0
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800955a:	e154      	b.n	8009806 <UART_SetConfig+0x7ae>
 800955c:	2304      	movs	r3, #4
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009562:	e150      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009564:	2308      	movs	r3, #8
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800956a:	e14c      	b.n	8009806 <UART_SetConfig+0x7ae>
 800956c:	2310      	movs	r3, #16
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009572:	e148      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009574:	2320      	movs	r3, #32
 8009576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800957a:	e144      	b.n	8009806 <UART_SetConfig+0x7ae>
 800957c:	2340      	movs	r3, #64	; 0x40
 800957e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009582:	e140      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009584:	2380      	movs	r3, #128	; 0x80
 8009586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800958a:	e13c      	b.n	8009806 <UART_SetConfig+0x7ae>
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a41      	ldr	r2, [pc, #260]	; (8009698 <UART_SetConfig+0x640>)
 8009592:	4293      	cmp	r3, r2
 8009594:	f040 8082 	bne.w	800969c <UART_SetConfig+0x644>
 8009598:	4b3c      	ldr	r3, [pc, #240]	; (800968c <UART_SetConfig+0x634>)
 800959a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800959c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095a0:	2b28      	cmp	r3, #40	; 0x28
 80095a2:	d86d      	bhi.n	8009680 <UART_SetConfig+0x628>
 80095a4:	a201      	add	r2, pc, #4	; (adr r2, 80095ac <UART_SetConfig+0x554>)
 80095a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095aa:	bf00      	nop
 80095ac:	08009651 	.word	0x08009651
 80095b0:	08009681 	.word	0x08009681
 80095b4:	08009681 	.word	0x08009681
 80095b8:	08009681 	.word	0x08009681
 80095bc:	08009681 	.word	0x08009681
 80095c0:	08009681 	.word	0x08009681
 80095c4:	08009681 	.word	0x08009681
 80095c8:	08009681 	.word	0x08009681
 80095cc:	08009659 	.word	0x08009659
 80095d0:	08009681 	.word	0x08009681
 80095d4:	08009681 	.word	0x08009681
 80095d8:	08009681 	.word	0x08009681
 80095dc:	08009681 	.word	0x08009681
 80095e0:	08009681 	.word	0x08009681
 80095e4:	08009681 	.word	0x08009681
 80095e8:	08009681 	.word	0x08009681
 80095ec:	08009661 	.word	0x08009661
 80095f0:	08009681 	.word	0x08009681
 80095f4:	08009681 	.word	0x08009681
 80095f8:	08009681 	.word	0x08009681
 80095fc:	08009681 	.word	0x08009681
 8009600:	08009681 	.word	0x08009681
 8009604:	08009681 	.word	0x08009681
 8009608:	08009681 	.word	0x08009681
 800960c:	08009669 	.word	0x08009669
 8009610:	08009681 	.word	0x08009681
 8009614:	08009681 	.word	0x08009681
 8009618:	08009681 	.word	0x08009681
 800961c:	08009681 	.word	0x08009681
 8009620:	08009681 	.word	0x08009681
 8009624:	08009681 	.word	0x08009681
 8009628:	08009681 	.word	0x08009681
 800962c:	08009671 	.word	0x08009671
 8009630:	08009681 	.word	0x08009681
 8009634:	08009681 	.word	0x08009681
 8009638:	08009681 	.word	0x08009681
 800963c:	08009681 	.word	0x08009681
 8009640:	08009681 	.word	0x08009681
 8009644:	08009681 	.word	0x08009681
 8009648:	08009681 	.word	0x08009681
 800964c:	08009679 	.word	0x08009679
 8009650:	2301      	movs	r3, #1
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009656:	e0d6      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009658:	2304      	movs	r3, #4
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800965e:	e0d2      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009660:	2308      	movs	r3, #8
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009666:	e0ce      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009668:	2310      	movs	r3, #16
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800966e:	e0ca      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009670:	2320      	movs	r3, #32
 8009672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009676:	e0c6      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009678:	2340      	movs	r3, #64	; 0x40
 800967a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800967e:	e0c2      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009680:	2380      	movs	r3, #128	; 0x80
 8009682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009686:	e0be      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009688:	40011400 	.word	0x40011400
 800968c:	58024400 	.word	0x58024400
 8009690:	40007800 	.word	0x40007800
 8009694:	40007c00 	.word	0x40007c00
 8009698:	40011800 	.word	0x40011800
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4aad      	ldr	r2, [pc, #692]	; (8009958 <UART_SetConfig+0x900>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d176      	bne.n	8009794 <UART_SetConfig+0x73c>
 80096a6:	4bad      	ldr	r3, [pc, #692]	; (800995c <UART_SetConfig+0x904>)
 80096a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096ae:	2b28      	cmp	r3, #40	; 0x28
 80096b0:	d86c      	bhi.n	800978c <UART_SetConfig+0x734>
 80096b2:	a201      	add	r2, pc, #4	; (adr r2, 80096b8 <UART_SetConfig+0x660>)
 80096b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b8:	0800975d 	.word	0x0800975d
 80096bc:	0800978d 	.word	0x0800978d
 80096c0:	0800978d 	.word	0x0800978d
 80096c4:	0800978d 	.word	0x0800978d
 80096c8:	0800978d 	.word	0x0800978d
 80096cc:	0800978d 	.word	0x0800978d
 80096d0:	0800978d 	.word	0x0800978d
 80096d4:	0800978d 	.word	0x0800978d
 80096d8:	08009765 	.word	0x08009765
 80096dc:	0800978d 	.word	0x0800978d
 80096e0:	0800978d 	.word	0x0800978d
 80096e4:	0800978d 	.word	0x0800978d
 80096e8:	0800978d 	.word	0x0800978d
 80096ec:	0800978d 	.word	0x0800978d
 80096f0:	0800978d 	.word	0x0800978d
 80096f4:	0800978d 	.word	0x0800978d
 80096f8:	0800976d 	.word	0x0800976d
 80096fc:	0800978d 	.word	0x0800978d
 8009700:	0800978d 	.word	0x0800978d
 8009704:	0800978d 	.word	0x0800978d
 8009708:	0800978d 	.word	0x0800978d
 800970c:	0800978d 	.word	0x0800978d
 8009710:	0800978d 	.word	0x0800978d
 8009714:	0800978d 	.word	0x0800978d
 8009718:	08009775 	.word	0x08009775
 800971c:	0800978d 	.word	0x0800978d
 8009720:	0800978d 	.word	0x0800978d
 8009724:	0800978d 	.word	0x0800978d
 8009728:	0800978d 	.word	0x0800978d
 800972c:	0800978d 	.word	0x0800978d
 8009730:	0800978d 	.word	0x0800978d
 8009734:	0800978d 	.word	0x0800978d
 8009738:	0800977d 	.word	0x0800977d
 800973c:	0800978d 	.word	0x0800978d
 8009740:	0800978d 	.word	0x0800978d
 8009744:	0800978d 	.word	0x0800978d
 8009748:	0800978d 	.word	0x0800978d
 800974c:	0800978d 	.word	0x0800978d
 8009750:	0800978d 	.word	0x0800978d
 8009754:	0800978d 	.word	0x0800978d
 8009758:	08009785 	.word	0x08009785
 800975c:	2301      	movs	r3, #1
 800975e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009762:	e050      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009764:	2304      	movs	r3, #4
 8009766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800976a:	e04c      	b.n	8009806 <UART_SetConfig+0x7ae>
 800976c:	2308      	movs	r3, #8
 800976e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009772:	e048      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009774:	2310      	movs	r3, #16
 8009776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800977a:	e044      	b.n	8009806 <UART_SetConfig+0x7ae>
 800977c:	2320      	movs	r3, #32
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009782:	e040      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009784:	2340      	movs	r3, #64	; 0x40
 8009786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800978a:	e03c      	b.n	8009806 <UART_SetConfig+0x7ae>
 800978c:	2380      	movs	r3, #128	; 0x80
 800978e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009792:	e038      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a71      	ldr	r2, [pc, #452]	; (8009960 <UART_SetConfig+0x908>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d130      	bne.n	8009800 <UART_SetConfig+0x7a8>
 800979e:	4b6f      	ldr	r3, [pc, #444]	; (800995c <UART_SetConfig+0x904>)
 80097a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a2:	f003 0307 	and.w	r3, r3, #7
 80097a6:	2b05      	cmp	r3, #5
 80097a8:	d826      	bhi.n	80097f8 <UART_SetConfig+0x7a0>
 80097aa:	a201      	add	r2, pc, #4	; (adr r2, 80097b0 <UART_SetConfig+0x758>)
 80097ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b0:	080097c9 	.word	0x080097c9
 80097b4:	080097d1 	.word	0x080097d1
 80097b8:	080097d9 	.word	0x080097d9
 80097bc:	080097e1 	.word	0x080097e1
 80097c0:	080097e9 	.word	0x080097e9
 80097c4:	080097f1 	.word	0x080097f1
 80097c8:	2302      	movs	r3, #2
 80097ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ce:	e01a      	b.n	8009806 <UART_SetConfig+0x7ae>
 80097d0:	2304      	movs	r3, #4
 80097d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097d6:	e016      	b.n	8009806 <UART_SetConfig+0x7ae>
 80097d8:	2308      	movs	r3, #8
 80097da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097de:	e012      	b.n	8009806 <UART_SetConfig+0x7ae>
 80097e0:	2310      	movs	r3, #16
 80097e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097e6:	e00e      	b.n	8009806 <UART_SetConfig+0x7ae>
 80097e8:	2320      	movs	r3, #32
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ee:	e00a      	b.n	8009806 <UART_SetConfig+0x7ae>
 80097f0:	2340      	movs	r3, #64	; 0x40
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097f6:	e006      	b.n	8009806 <UART_SetConfig+0x7ae>
 80097f8:	2380      	movs	r3, #128	; 0x80
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097fe:	e002      	b.n	8009806 <UART_SetConfig+0x7ae>
 8009800:	2380      	movs	r3, #128	; 0x80
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a55      	ldr	r2, [pc, #340]	; (8009960 <UART_SetConfig+0x908>)
 800980c:	4293      	cmp	r3, r2
 800980e:	f040 80f8 	bne.w	8009a02 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009812:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009816:	2b20      	cmp	r3, #32
 8009818:	dc46      	bgt.n	80098a8 <UART_SetConfig+0x850>
 800981a:	2b02      	cmp	r3, #2
 800981c:	db75      	blt.n	800990a <UART_SetConfig+0x8b2>
 800981e:	3b02      	subs	r3, #2
 8009820:	2b1e      	cmp	r3, #30
 8009822:	d872      	bhi.n	800990a <UART_SetConfig+0x8b2>
 8009824:	a201      	add	r2, pc, #4	; (adr r2, 800982c <UART_SetConfig+0x7d4>)
 8009826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982a:	bf00      	nop
 800982c:	080098af 	.word	0x080098af
 8009830:	0800990b 	.word	0x0800990b
 8009834:	080098b7 	.word	0x080098b7
 8009838:	0800990b 	.word	0x0800990b
 800983c:	0800990b 	.word	0x0800990b
 8009840:	0800990b 	.word	0x0800990b
 8009844:	080098c7 	.word	0x080098c7
 8009848:	0800990b 	.word	0x0800990b
 800984c:	0800990b 	.word	0x0800990b
 8009850:	0800990b 	.word	0x0800990b
 8009854:	0800990b 	.word	0x0800990b
 8009858:	0800990b 	.word	0x0800990b
 800985c:	0800990b 	.word	0x0800990b
 8009860:	0800990b 	.word	0x0800990b
 8009864:	080098d7 	.word	0x080098d7
 8009868:	0800990b 	.word	0x0800990b
 800986c:	0800990b 	.word	0x0800990b
 8009870:	0800990b 	.word	0x0800990b
 8009874:	0800990b 	.word	0x0800990b
 8009878:	0800990b 	.word	0x0800990b
 800987c:	0800990b 	.word	0x0800990b
 8009880:	0800990b 	.word	0x0800990b
 8009884:	0800990b 	.word	0x0800990b
 8009888:	0800990b 	.word	0x0800990b
 800988c:	0800990b 	.word	0x0800990b
 8009890:	0800990b 	.word	0x0800990b
 8009894:	0800990b 	.word	0x0800990b
 8009898:	0800990b 	.word	0x0800990b
 800989c:	0800990b 	.word	0x0800990b
 80098a0:	0800990b 	.word	0x0800990b
 80098a4:	080098fd 	.word	0x080098fd
 80098a8:	2b40      	cmp	r3, #64	; 0x40
 80098aa:	d02a      	beq.n	8009902 <UART_SetConfig+0x8aa>
 80098ac:	e02d      	b.n	800990a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80098ae:	f7fd fc2f 	bl	8007110 <HAL_RCCEx_GetD3PCLK1Freq>
 80098b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80098b4:	e02f      	b.n	8009916 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fd fc3e 	bl	800713c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098c4:	e027      	b.n	8009916 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098c6:	f107 0318 	add.w	r3, r7, #24
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fd fd8a 	bl	80073e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098d4:	e01f      	b.n	8009916 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098d6:	4b21      	ldr	r3, [pc, #132]	; (800995c <UART_SetConfig+0x904>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 0320 	and.w	r3, r3, #32
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d009      	beq.n	80098f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098e2:	4b1e      	ldr	r3, [pc, #120]	; (800995c <UART_SetConfig+0x904>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	08db      	lsrs	r3, r3, #3
 80098e8:	f003 0303 	and.w	r3, r3, #3
 80098ec:	4a1d      	ldr	r2, [pc, #116]	; (8009964 <UART_SetConfig+0x90c>)
 80098ee:	fa22 f303 	lsr.w	r3, r2, r3
 80098f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80098f4:	e00f      	b.n	8009916 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80098f6:	4b1b      	ldr	r3, [pc, #108]	; (8009964 <UART_SetConfig+0x90c>)
 80098f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098fa:	e00c      	b.n	8009916 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80098fc:	4b1a      	ldr	r3, [pc, #104]	; (8009968 <UART_SetConfig+0x910>)
 80098fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009900:	e009      	b.n	8009916 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009908:	e005      	b.n	8009916 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800990a:	2300      	movs	r3, #0
 800990c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009914:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 81ee 	beq.w	8009cfa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009922:	4a12      	ldr	r2, [pc, #72]	; (800996c <UART_SetConfig+0x914>)
 8009924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009928:	461a      	mov	r2, r3
 800992a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800992c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009930:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	685a      	ldr	r2, [r3, #4]
 8009936:	4613      	mov	r3, r2
 8009938:	005b      	lsls	r3, r3, #1
 800993a:	4413      	add	r3, r2
 800993c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800993e:	429a      	cmp	r2, r3
 8009940:	d305      	bcc.n	800994e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800994a:	429a      	cmp	r2, r3
 800994c:	d910      	bls.n	8009970 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009954:	e1d1      	b.n	8009cfa <UART_SetConfig+0xca2>
 8009956:	bf00      	nop
 8009958:	40011c00 	.word	0x40011c00
 800995c:	58024400 	.word	0x58024400
 8009960:	58000c00 	.word	0x58000c00
 8009964:	03d09000 	.word	0x03d09000
 8009968:	003d0900 	.word	0x003d0900
 800996c:	0800ba1c 	.word	0x0800ba1c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009972:	2200      	movs	r2, #0
 8009974:	60bb      	str	r3, [r7, #8]
 8009976:	60fa      	str	r2, [r7, #12]
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997c:	4ac0      	ldr	r2, [pc, #768]	; (8009c80 <UART_SetConfig+0xc28>)
 800997e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009982:	b29b      	uxth	r3, r3
 8009984:	2200      	movs	r2, #0
 8009986:	603b      	str	r3, [r7, #0]
 8009988:	607a      	str	r2, [r7, #4]
 800998a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800998e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009992:	f7f6 fd05 	bl	80003a0 <__aeabi_uldivmod>
 8009996:	4602      	mov	r2, r0
 8009998:	460b      	mov	r3, r1
 800999a:	4610      	mov	r0, r2
 800999c:	4619      	mov	r1, r3
 800999e:	f04f 0200 	mov.w	r2, #0
 80099a2:	f04f 0300 	mov.w	r3, #0
 80099a6:	020b      	lsls	r3, r1, #8
 80099a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80099ac:	0202      	lsls	r2, r0, #8
 80099ae:	6979      	ldr	r1, [r7, #20]
 80099b0:	6849      	ldr	r1, [r1, #4]
 80099b2:	0849      	lsrs	r1, r1, #1
 80099b4:	2000      	movs	r0, #0
 80099b6:	460c      	mov	r4, r1
 80099b8:	4605      	mov	r5, r0
 80099ba:	eb12 0804 	adds.w	r8, r2, r4
 80099be:	eb43 0905 	adc.w	r9, r3, r5
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	469a      	mov	sl, r3
 80099ca:	4693      	mov	fp, r2
 80099cc:	4652      	mov	r2, sl
 80099ce:	465b      	mov	r3, fp
 80099d0:	4640      	mov	r0, r8
 80099d2:	4649      	mov	r1, r9
 80099d4:	f7f6 fce4 	bl	80003a0 <__aeabi_uldivmod>
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	4613      	mov	r3, r2
 80099de:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099e6:	d308      	bcc.n	80099fa <UART_SetConfig+0x9a2>
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099ee:	d204      	bcs.n	80099fa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099f6:	60da      	str	r2, [r3, #12]
 80099f8:	e17f      	b.n	8009cfa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009a00:	e17b      	b.n	8009cfa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a0a:	f040 80bd 	bne.w	8009b88 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009a0e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009a12:	2b20      	cmp	r3, #32
 8009a14:	dc48      	bgt.n	8009aa8 <UART_SetConfig+0xa50>
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	db7b      	blt.n	8009b12 <UART_SetConfig+0xaba>
 8009a1a:	2b20      	cmp	r3, #32
 8009a1c:	d879      	bhi.n	8009b12 <UART_SetConfig+0xaba>
 8009a1e:	a201      	add	r2, pc, #4	; (adr r2, 8009a24 <UART_SetConfig+0x9cc>)
 8009a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a24:	08009aaf 	.word	0x08009aaf
 8009a28:	08009ab7 	.word	0x08009ab7
 8009a2c:	08009b13 	.word	0x08009b13
 8009a30:	08009b13 	.word	0x08009b13
 8009a34:	08009abf 	.word	0x08009abf
 8009a38:	08009b13 	.word	0x08009b13
 8009a3c:	08009b13 	.word	0x08009b13
 8009a40:	08009b13 	.word	0x08009b13
 8009a44:	08009acf 	.word	0x08009acf
 8009a48:	08009b13 	.word	0x08009b13
 8009a4c:	08009b13 	.word	0x08009b13
 8009a50:	08009b13 	.word	0x08009b13
 8009a54:	08009b13 	.word	0x08009b13
 8009a58:	08009b13 	.word	0x08009b13
 8009a5c:	08009b13 	.word	0x08009b13
 8009a60:	08009b13 	.word	0x08009b13
 8009a64:	08009adf 	.word	0x08009adf
 8009a68:	08009b13 	.word	0x08009b13
 8009a6c:	08009b13 	.word	0x08009b13
 8009a70:	08009b13 	.word	0x08009b13
 8009a74:	08009b13 	.word	0x08009b13
 8009a78:	08009b13 	.word	0x08009b13
 8009a7c:	08009b13 	.word	0x08009b13
 8009a80:	08009b13 	.word	0x08009b13
 8009a84:	08009b13 	.word	0x08009b13
 8009a88:	08009b13 	.word	0x08009b13
 8009a8c:	08009b13 	.word	0x08009b13
 8009a90:	08009b13 	.word	0x08009b13
 8009a94:	08009b13 	.word	0x08009b13
 8009a98:	08009b13 	.word	0x08009b13
 8009a9c:	08009b13 	.word	0x08009b13
 8009aa0:	08009b13 	.word	0x08009b13
 8009aa4:	08009b05 	.word	0x08009b05
 8009aa8:	2b40      	cmp	r3, #64	; 0x40
 8009aaa:	d02e      	beq.n	8009b0a <UART_SetConfig+0xab2>
 8009aac:	e031      	b.n	8009b12 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009aae:	f7fb fc6d 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8009ab2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009ab4:	e033      	b.n	8009b1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ab6:	f7fb fc7f 	bl	80053b8 <HAL_RCC_GetPCLK2Freq>
 8009aba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009abc:	e02f      	b.n	8009b1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fd fb3a 	bl	800713c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009acc:	e027      	b.n	8009b1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ace:	f107 0318 	add.w	r3, r7, #24
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fd fc86 	bl	80073e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009adc:	e01f      	b.n	8009b1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ade:	4b69      	ldr	r3, [pc, #420]	; (8009c84 <UART_SetConfig+0xc2c>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 0320 	and.w	r3, r3, #32
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d009      	beq.n	8009afe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009aea:	4b66      	ldr	r3, [pc, #408]	; (8009c84 <UART_SetConfig+0xc2c>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	08db      	lsrs	r3, r3, #3
 8009af0:	f003 0303 	and.w	r3, r3, #3
 8009af4:	4a64      	ldr	r2, [pc, #400]	; (8009c88 <UART_SetConfig+0xc30>)
 8009af6:	fa22 f303 	lsr.w	r3, r2, r3
 8009afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009afc:	e00f      	b.n	8009b1e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009afe:	4b62      	ldr	r3, [pc, #392]	; (8009c88 <UART_SetConfig+0xc30>)
 8009b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b02:	e00c      	b.n	8009b1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b04:	4b61      	ldr	r3, [pc, #388]	; (8009c8c <UART_SetConfig+0xc34>)
 8009b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b08:	e009      	b.n	8009b1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b10:	e005      	b.n	8009b1e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009b12:	2300      	movs	r3, #0
 8009b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009b1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f000 80ea 	beq.w	8009cfa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	4a55      	ldr	r2, [pc, #340]	; (8009c80 <UART_SetConfig+0xc28>)
 8009b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b30:	461a      	mov	r2, r3
 8009b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b34:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b38:	005a      	lsls	r2, r3, #1
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	085b      	lsrs	r3, r3, #1
 8009b40:	441a      	add	r2, r3
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b4a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4e:	2b0f      	cmp	r3, #15
 8009b50:	d916      	bls.n	8009b80 <UART_SetConfig+0xb28>
 8009b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b58:	d212      	bcs.n	8009b80 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	f023 030f 	bic.w	r3, r3, #15
 8009b62:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b66:	085b      	lsrs	r3, r3, #1
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	f003 0307 	and.w	r3, r3, #7
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009b72:	4313      	orrs	r3, r2
 8009b74:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009b7c:	60da      	str	r2, [r3, #12]
 8009b7e:	e0bc      	b.n	8009cfa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009b86:	e0b8      	b.n	8009cfa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b8c:	2b20      	cmp	r3, #32
 8009b8e:	dc4b      	bgt.n	8009c28 <UART_SetConfig+0xbd0>
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f2c0 8087 	blt.w	8009ca4 <UART_SetConfig+0xc4c>
 8009b96:	2b20      	cmp	r3, #32
 8009b98:	f200 8084 	bhi.w	8009ca4 <UART_SetConfig+0xc4c>
 8009b9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ba4 <UART_SetConfig+0xb4c>)
 8009b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba2:	bf00      	nop
 8009ba4:	08009c2f 	.word	0x08009c2f
 8009ba8:	08009c37 	.word	0x08009c37
 8009bac:	08009ca5 	.word	0x08009ca5
 8009bb0:	08009ca5 	.word	0x08009ca5
 8009bb4:	08009c3f 	.word	0x08009c3f
 8009bb8:	08009ca5 	.word	0x08009ca5
 8009bbc:	08009ca5 	.word	0x08009ca5
 8009bc0:	08009ca5 	.word	0x08009ca5
 8009bc4:	08009c4f 	.word	0x08009c4f
 8009bc8:	08009ca5 	.word	0x08009ca5
 8009bcc:	08009ca5 	.word	0x08009ca5
 8009bd0:	08009ca5 	.word	0x08009ca5
 8009bd4:	08009ca5 	.word	0x08009ca5
 8009bd8:	08009ca5 	.word	0x08009ca5
 8009bdc:	08009ca5 	.word	0x08009ca5
 8009be0:	08009ca5 	.word	0x08009ca5
 8009be4:	08009c5f 	.word	0x08009c5f
 8009be8:	08009ca5 	.word	0x08009ca5
 8009bec:	08009ca5 	.word	0x08009ca5
 8009bf0:	08009ca5 	.word	0x08009ca5
 8009bf4:	08009ca5 	.word	0x08009ca5
 8009bf8:	08009ca5 	.word	0x08009ca5
 8009bfc:	08009ca5 	.word	0x08009ca5
 8009c00:	08009ca5 	.word	0x08009ca5
 8009c04:	08009ca5 	.word	0x08009ca5
 8009c08:	08009ca5 	.word	0x08009ca5
 8009c0c:	08009ca5 	.word	0x08009ca5
 8009c10:	08009ca5 	.word	0x08009ca5
 8009c14:	08009ca5 	.word	0x08009ca5
 8009c18:	08009ca5 	.word	0x08009ca5
 8009c1c:	08009ca5 	.word	0x08009ca5
 8009c20:	08009ca5 	.word	0x08009ca5
 8009c24:	08009c97 	.word	0x08009c97
 8009c28:	2b40      	cmp	r3, #64	; 0x40
 8009c2a:	d037      	beq.n	8009c9c <UART_SetConfig+0xc44>
 8009c2c:	e03a      	b.n	8009ca4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c2e:	f7fb fbad 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8009c32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c34:	e03c      	b.n	8009cb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c36:	f7fb fbbf 	bl	80053b8 <HAL_RCC_GetPCLK2Freq>
 8009c3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c3c:	e038      	b.n	8009cb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fd fa7a 	bl	800713c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c4c:	e030      	b.n	8009cb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c4e:	f107 0318 	add.w	r3, r7, #24
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fd fbc6 	bl	80073e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c5c:	e028      	b.n	8009cb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c5e:	4b09      	ldr	r3, [pc, #36]	; (8009c84 <UART_SetConfig+0xc2c>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f003 0320 	and.w	r3, r3, #32
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d012      	beq.n	8009c90 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c6a:	4b06      	ldr	r3, [pc, #24]	; (8009c84 <UART_SetConfig+0xc2c>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	08db      	lsrs	r3, r3, #3
 8009c70:	f003 0303 	and.w	r3, r3, #3
 8009c74:	4a04      	ldr	r2, [pc, #16]	; (8009c88 <UART_SetConfig+0xc30>)
 8009c76:	fa22 f303 	lsr.w	r3, r2, r3
 8009c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c7c:	e018      	b.n	8009cb0 <UART_SetConfig+0xc58>
 8009c7e:	bf00      	nop
 8009c80:	0800ba1c 	.word	0x0800ba1c
 8009c84:	58024400 	.word	0x58024400
 8009c88:	03d09000 	.word	0x03d09000
 8009c8c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009c90:	4b24      	ldr	r3, [pc, #144]	; (8009d24 <UART_SetConfig+0xccc>)
 8009c92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c94:	e00c      	b.n	8009cb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c96:	4b24      	ldr	r3, [pc, #144]	; (8009d28 <UART_SetConfig+0xcd0>)
 8009c98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c9a:	e009      	b.n	8009cb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ca2:	e005      	b.n	8009cb0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009cae:	bf00      	nop
    }

    if (pclk != 0U)
 8009cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d021      	beq.n	8009cfa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cba:	4a1c      	ldr	r2, [pc, #112]	; (8009d2c <UART_SetConfig+0xcd4>)
 8009cbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc4:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	085b      	lsrs	r3, r3, #1
 8009cce:	441a      	add	r2, r3
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cd8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cdc:	2b0f      	cmp	r3, #15
 8009cde:	d909      	bls.n	8009cf4 <UART_SetConfig+0xc9c>
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ce6:	d205      	bcs.n	8009cf4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	60da      	str	r2, [r3, #12]
 8009cf2:	e002      	b.n	8009cfa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2200      	movs	r2, #0
 8009d14:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009d16:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3748      	adds	r7, #72	; 0x48
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d24:	03d09000 	.word	0x03d09000
 8009d28:	003d0900 	.word	0x003d0900
 8009d2c:	0800ba1c 	.word	0x0800ba1c

08009d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3c:	f003 0301 	and.w	r3, r3, #1
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00a      	beq.n	8009d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	430a      	orrs	r2, r1
 8009d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5e:	f003 0302 	and.w	r3, r3, #2
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00a      	beq.n	8009d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d80:	f003 0304 	and.w	r3, r3, #4
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00a      	beq.n	8009d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	430a      	orrs	r2, r1
 8009d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da2:	f003 0308 	and.w	r3, r3, #8
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00a      	beq.n	8009dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	430a      	orrs	r2, r1
 8009dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc4:	f003 0310 	and.w	r3, r3, #16
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00a      	beq.n	8009de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	430a      	orrs	r2, r1
 8009de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de6:	f003 0320 	and.w	r3, r3, #32
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00a      	beq.n	8009e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	430a      	orrs	r2, r1
 8009e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d01a      	beq.n	8009e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	430a      	orrs	r2, r1
 8009e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e2e:	d10a      	bne.n	8009e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	430a      	orrs	r2, r1
 8009e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00a      	beq.n	8009e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	605a      	str	r2, [r3, #4]
  }
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b098      	sub	sp, #96	; 0x60
 8009e78:	af02      	add	r7, sp, #8
 8009e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e84:	f7f8 f85a 	bl	8001f3c <HAL_GetTick>
 8009e88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 0308 	and.w	r3, r3, #8
 8009e94:	2b08      	cmp	r3, #8
 8009e96:	d12f      	bne.n	8009ef8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f88e 	bl	8009fc8 <UART_WaitOnFlagUntilTimeout>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d022      	beq.n	8009ef8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eba:	e853 3f00 	ldrex	r3, [r3]
 8009ebe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ec6:	653b      	str	r3, [r7, #80]	; 0x50
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ed0:	647b      	str	r3, [r7, #68]	; 0x44
 8009ed2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ed8:	e841 2300 	strex	r3, r2, [r1]
 8009edc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1e6      	bne.n	8009eb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2220      	movs	r2, #32
 8009ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e063      	b.n	8009fc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 0304 	and.w	r3, r3, #4
 8009f02:	2b04      	cmp	r3, #4
 8009f04:	d149      	bne.n	8009f9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f857 	bl	8009fc8 <UART_WaitOnFlagUntilTimeout>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d03c      	beq.n	8009f9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f28:	e853 3f00 	ldrex	r3, [r3]
 8009f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8009f40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f46:	e841 2300 	strex	r3, r2, [r1]
 8009f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1e6      	bne.n	8009f20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3308      	adds	r3, #8
 8009f58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	e853 3f00 	ldrex	r3, [r3]
 8009f60:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f023 0301 	bic.w	r3, r3, #1
 8009f68:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3308      	adds	r3, #8
 8009f70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f72:	61fa      	str	r2, [r7, #28]
 8009f74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f76:	69b9      	ldr	r1, [r7, #24]
 8009f78:	69fa      	ldr	r2, [r7, #28]
 8009f7a:	e841 2300 	strex	r3, r2, [r1]
 8009f7e:	617b      	str	r3, [r7, #20]
   return(result);
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1e5      	bne.n	8009f52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2220      	movs	r2, #32
 8009f8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	e012      	b.n	8009fc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2220      	movs	r2, #32
 8009f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2220      	movs	r2, #32
 8009fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3758      	adds	r7, #88	; 0x58
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	603b      	str	r3, [r7, #0]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fd8:	e049      	b.n	800a06e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe0:	d045      	beq.n	800a06e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fe2:	f7f7 ffab 	bl	8001f3c <HAL_GetTick>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	69ba      	ldr	r2, [r7, #24]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d302      	bcc.n	8009ff8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e048      	b.n	800a08e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0304 	and.w	r3, r3, #4
 800a006:	2b00      	cmp	r3, #0
 800a008:	d031      	beq.n	800a06e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	69db      	ldr	r3, [r3, #28]
 800a010:	f003 0308 	and.w	r3, r3, #8
 800a014:	2b08      	cmp	r3, #8
 800a016:	d110      	bne.n	800a03a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2208      	movs	r2, #8
 800a01e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f000 f95b 	bl	800a2dc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2208      	movs	r2, #8
 800a02a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	e029      	b.n	800a08e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	69db      	ldr	r3, [r3, #28]
 800a040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a048:	d111      	bne.n	800a06e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f000 f941 	bl	800a2dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2220      	movs	r2, #32
 800a05e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	e00f      	b.n	800a08e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	69da      	ldr	r2, [r3, #28]
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	4013      	ands	r3, r2
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	bf0c      	ite	eq
 800a07e:	2301      	moveq	r3, #1
 800a080:	2300      	movne	r3, #0
 800a082:	b2db      	uxtb	r3, r3
 800a084:	461a      	mov	r2, r3
 800a086:	79fb      	ldrb	r3, [r7, #7]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d0a6      	beq.n	8009fda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a098:	b480      	push	{r7}
 800a09a:	b0a3      	sub	sp, #140	; 0x8c
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	88fa      	ldrh	r2, [r7, #6]
 800a0b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	88fa      	ldrh	r2, [r7, #6]
 800a0b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0ca:	d10e      	bne.n	800a0ea <UART_Start_Receive_IT+0x52>
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d105      	bne.n	800a0e0 <UART_Start_Receive_IT+0x48>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a0da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0de:	e02d      	b.n	800a13c <UART_Start_Receive_IT+0xa4>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	22ff      	movs	r2, #255	; 0xff
 800a0e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a0e8:	e028      	b.n	800a13c <UART_Start_Receive_IT+0xa4>
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d10d      	bne.n	800a10e <UART_Start_Receive_IT+0x76>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d104      	bne.n	800a104 <UART_Start_Receive_IT+0x6c>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	22ff      	movs	r2, #255	; 0xff
 800a0fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a102:	e01b      	b.n	800a13c <UART_Start_Receive_IT+0xa4>
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	227f      	movs	r2, #127	; 0x7f
 800a108:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a10c:	e016      	b.n	800a13c <UART_Start_Receive_IT+0xa4>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a116:	d10d      	bne.n	800a134 <UART_Start_Receive_IT+0x9c>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d104      	bne.n	800a12a <UART_Start_Receive_IT+0x92>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	227f      	movs	r2, #127	; 0x7f
 800a124:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a128:	e008      	b.n	800a13c <UART_Start_Receive_IT+0xa4>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	223f      	movs	r2, #63	; 0x3f
 800a12e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a132:	e003      	b.n	800a13c <UART_Start_Receive_IT+0xa4>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2200      	movs	r2, #0
 800a138:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2222      	movs	r2, #34	; 0x22
 800a148:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	3308      	adds	r3, #8
 800a152:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a156:	e853 3f00 	ldrex	r3, [r3]
 800a15a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a15c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a15e:	f043 0301 	orr.w	r3, r3, #1
 800a162:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	3308      	adds	r3, #8
 800a16c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a170:	673a      	str	r2, [r7, #112]	; 0x70
 800a172:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a174:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a176:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a178:	e841 2300 	strex	r3, r2, [r1]
 800a17c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a17e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a180:	2b00      	cmp	r3, #0
 800a182:	d1e3      	bne.n	800a14c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a18c:	d14f      	bne.n	800a22e <UART_Start_Receive_IT+0x196>
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a194:	88fa      	ldrh	r2, [r7, #6]
 800a196:	429a      	cmp	r2, r3
 800a198:	d349      	bcc.n	800a22e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1a2:	d107      	bne.n	800a1b4 <UART_Start_Receive_IT+0x11c>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d103      	bne.n	800a1b4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4a47      	ldr	r2, [pc, #284]	; (800a2cc <UART_Start_Receive_IT+0x234>)
 800a1b0:	675a      	str	r2, [r3, #116]	; 0x74
 800a1b2:	e002      	b.n	800a1ba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	4a46      	ldr	r2, [pc, #280]	; (800a2d0 <UART_Start_Receive_IT+0x238>)
 800a1b8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d01a      	beq.n	800a1f8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1ca:	e853 3f00 	ldrex	r3, [r3]
 800a1ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a1d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1e6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a1ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a1ec:	e841 2300 	strex	r3, r2, [r1]
 800a1f0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a1f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1e4      	bne.n	800a1c2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3308      	adds	r3, #8
 800a1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a202:	e853 3f00 	ldrex	r3, [r3]
 800a206:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a20e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	3308      	adds	r3, #8
 800a216:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a218:	64ba      	str	r2, [r7, #72]	; 0x48
 800a21a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a21e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a220:	e841 2300 	strex	r3, r2, [r1]
 800a224:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1e5      	bne.n	800a1f8 <UART_Start_Receive_IT+0x160>
 800a22c:	e046      	b.n	800a2bc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a236:	d107      	bne.n	800a248 <UART_Start_Receive_IT+0x1b0>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d103      	bne.n	800a248 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	4a24      	ldr	r2, [pc, #144]	; (800a2d4 <UART_Start_Receive_IT+0x23c>)
 800a244:	675a      	str	r2, [r3, #116]	; 0x74
 800a246:	e002      	b.n	800a24e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	4a23      	ldr	r2, [pc, #140]	; (800a2d8 <UART_Start_Receive_IT+0x240>)
 800a24c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d019      	beq.n	800a28a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25e:	e853 3f00 	ldrex	r3, [r3]
 800a262:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a266:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a26a:	677b      	str	r3, [r7, #116]	; 0x74
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	461a      	mov	r2, r3
 800a272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a274:	637b      	str	r3, [r7, #52]	; 0x34
 800a276:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a27a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a27c:	e841 2300 	strex	r3, r2, [r1]
 800a280:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1e6      	bne.n	800a256 <UART_Start_Receive_IT+0x1be>
 800a288:	e018      	b.n	800a2bc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	e853 3f00 	ldrex	r3, [r3]
 800a296:	613b      	str	r3, [r7, #16]
   return(result);
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	f043 0320 	orr.w	r3, r3, #32
 800a29e:	67bb      	str	r3, [r7, #120]	; 0x78
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2a8:	623b      	str	r3, [r7, #32]
 800a2aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ac:	69f9      	ldr	r1, [r7, #28]
 800a2ae:	6a3a      	ldr	r2, [r7, #32]
 800a2b0:	e841 2300 	strex	r3, r2, [r1]
 800a2b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1e6      	bne.n	800a28a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	378c      	adds	r7, #140	; 0x8c
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	0800aafd 	.word	0x0800aafd
 800a2d0:	0800a79d 	.word	0x0800a79d
 800a2d4:	0800a5e5 	.word	0x0800a5e5
 800a2d8:	0800a42d 	.word	0x0800a42d

0800a2dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b095      	sub	sp, #84	; 0x54
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ec:	e853 3f00 	ldrex	r3, [r3]
 800a2f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a302:	643b      	str	r3, [r7, #64]	; 0x40
 800a304:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a306:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a308:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a30a:	e841 2300 	strex	r3, r2, [r1]
 800a30e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1e6      	bne.n	800a2e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3308      	adds	r3, #8
 800a31c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31e:	6a3b      	ldr	r3, [r7, #32]
 800a320:	e853 3f00 	ldrex	r3, [r3]
 800a324:	61fb      	str	r3, [r7, #28]
   return(result);
 800a326:	69fa      	ldr	r2, [r7, #28]
 800a328:	4b1e      	ldr	r3, [pc, #120]	; (800a3a4 <UART_EndRxTransfer+0xc8>)
 800a32a:	4013      	ands	r3, r2
 800a32c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3308      	adds	r3, #8
 800a334:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a336:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a338:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a33c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a33e:	e841 2300 	strex	r3, r2, [r1]
 800a342:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1e5      	bne.n	800a316 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d118      	bne.n	800a384 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	e853 3f00 	ldrex	r3, [r3]
 800a35e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	f023 0310 	bic.w	r3, r3, #16
 800a366:	647b      	str	r3, [r7, #68]	; 0x44
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	461a      	mov	r2, r3
 800a36e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a370:	61bb      	str	r3, [r7, #24]
 800a372:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a374:	6979      	ldr	r1, [r7, #20]
 800a376:	69ba      	ldr	r2, [r7, #24]
 800a378:	e841 2300 	strex	r3, r2, [r1]
 800a37c:	613b      	str	r3, [r7, #16]
   return(result);
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1e6      	bne.n	800a352 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2220      	movs	r2, #32
 800a388:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a398:	bf00      	nop
 800a39a:	3754      	adds	r7, #84	; 0x54
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	effffffe 	.word	0xeffffffe

0800a3a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f7fe fe30 	bl	800902c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3cc:	bf00      	nop
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b088      	sub	sp, #32
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	e853 3f00 	ldrex	r3, [r3]
 800a3e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3f0:	61fb      	str	r3, [r7, #28]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	61bb      	str	r3, [r7, #24]
 800a3fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fe:	6979      	ldr	r1, [r7, #20]
 800a400:	69ba      	ldr	r2, [r7, #24]
 800a402:	e841 2300 	strex	r3, r2, [r1]
 800a406:	613b      	str	r3, [r7, #16]
   return(result);
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1e6      	bne.n	800a3dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2220      	movs	r2, #32
 800a412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f7fe fdfb 	bl	8009018 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a422:	bf00      	nop
 800a424:	3720      	adds	r7, #32
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
	...

0800a42c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b09c      	sub	sp, #112	; 0x70
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a43a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a444:	2b22      	cmp	r3, #34	; 0x22
 800a446:	f040 80be 	bne.w	800a5c6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a450:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a454:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a458:	b2d9      	uxtb	r1, r3
 800a45a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a45e:	b2da      	uxtb	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a464:	400a      	ands	r2, r1
 800a466:	b2d2      	uxtb	r2, r2
 800a468:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a46e:	1c5a      	adds	r2, r3, #1
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	3b01      	subs	r3, #1
 800a47e:	b29a      	uxth	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f040 80a1 	bne.w	800a5d6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a49a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a49c:	e853 3f00 	ldrex	r3, [r3]
 800a4a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a4a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4b2:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4ba:	e841 2300 	strex	r3, r2, [r1]
 800a4be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a4c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1e6      	bne.n	800a494 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3308      	adds	r3, #8
 800a4cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d0:	e853 3f00 	ldrex	r3, [r3]
 800a4d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d8:	f023 0301 	bic.w	r3, r3, #1
 800a4dc:	667b      	str	r3, [r7, #100]	; 0x64
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3308      	adds	r3, #8
 800a4e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a4e6:	647a      	str	r2, [r7, #68]	; 0x44
 800a4e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4ee:	e841 2300 	strex	r3, r2, [r1]
 800a4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1e5      	bne.n	800a4c6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2220      	movs	r2, #32
 800a4fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a33      	ldr	r2, [pc, #204]	; (800a5e0 <UART_RxISR_8BIT+0x1b4>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d01f      	beq.n	800a558 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d018      	beq.n	800a558 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52e:	e853 3f00 	ldrex	r3, [r3]
 800a532:	623b      	str	r3, [r7, #32]
   return(result);
 800a534:	6a3b      	ldr	r3, [r7, #32]
 800a536:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a53a:	663b      	str	r3, [r7, #96]	; 0x60
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	461a      	mov	r2, r3
 800a542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a544:	633b      	str	r3, [r7, #48]	; 0x30
 800a546:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a548:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a54a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a54c:	e841 2300 	strex	r3, r2, [r1]
 800a550:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a554:	2b00      	cmp	r3, #0
 800a556:	d1e6      	bne.n	800a526 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d12e      	bne.n	800a5be <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	e853 3f00 	ldrex	r3, [r3]
 800a572:	60fb      	str	r3, [r7, #12]
   return(result);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f023 0310 	bic.w	r3, r3, #16
 800a57a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	461a      	mov	r2, r3
 800a582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a584:	61fb      	str	r3, [r7, #28]
 800a586:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a588:	69b9      	ldr	r1, [r7, #24]
 800a58a:	69fa      	ldr	r2, [r7, #28]
 800a58c:	e841 2300 	strex	r3, r2, [r1]
 800a590:	617b      	str	r3, [r7, #20]
   return(result);
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1e6      	bne.n	800a566 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	69db      	ldr	r3, [r3, #28]
 800a59e:	f003 0310 	and.w	r3, r3, #16
 800a5a2:	2b10      	cmp	r3, #16
 800a5a4:	d103      	bne.n	800a5ae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2210      	movs	r2, #16
 800a5ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7fe fd42 	bl	8009040 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a5bc:	e00b      	b.n	800a5d6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7f6 f9b0 	bl	8000924 <HAL_UART_RxCpltCallback>
}
 800a5c4:	e007      	b.n	800a5d6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	699a      	ldr	r2, [r3, #24]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f042 0208 	orr.w	r2, r2, #8
 800a5d4:	619a      	str	r2, [r3, #24]
}
 800a5d6:	bf00      	nop
 800a5d8:	3770      	adds	r7, #112	; 0x70
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	58000c00 	.word	0x58000c00

0800a5e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b09c      	sub	sp, #112	; 0x70
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a5f2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5fc:	2b22      	cmp	r3, #34	; 0x22
 800a5fe:	f040 80be 	bne.w	800a77e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a608:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a610:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a612:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800a616:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a61a:	4013      	ands	r3, r2
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a620:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a626:	1c9a      	adds	r2, r3, #2
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a632:	b29b      	uxth	r3, r3
 800a634:	3b01      	subs	r3, #1
 800a636:	b29a      	uxth	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a644:	b29b      	uxth	r3, r3
 800a646:	2b00      	cmp	r3, #0
 800a648:	f040 80a1 	bne.w	800a78e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a654:	e853 3f00 	ldrex	r3, [r3]
 800a658:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a65a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a65c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a660:	667b      	str	r3, [r7, #100]	; 0x64
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	461a      	mov	r2, r3
 800a668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a66a:	657b      	str	r3, [r7, #84]	; 0x54
 800a66c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a672:	e841 2300 	strex	r3, r2, [r1]
 800a676:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d1e6      	bne.n	800a64c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	3308      	adds	r3, #8
 800a684:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a688:	e853 3f00 	ldrex	r3, [r3]
 800a68c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a690:	f023 0301 	bic.w	r3, r3, #1
 800a694:	663b      	str	r3, [r7, #96]	; 0x60
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	3308      	adds	r3, #8
 800a69c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a69e:	643a      	str	r2, [r7, #64]	; 0x40
 800a6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a6a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6a6:	e841 2300 	strex	r3, r2, [r1]
 800a6aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1e5      	bne.n	800a67e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2220      	movs	r2, #32
 800a6b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a33      	ldr	r2, [pc, #204]	; (800a798 <UART_RxISR_16BIT+0x1b4>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d01f      	beq.n	800a710 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d018      	beq.n	800a710 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e4:	6a3b      	ldr	r3, [r7, #32]
 800a6e6:	e853 3f00 	ldrex	r3, [r3]
 800a6ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a6f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6fe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a704:	e841 2300 	strex	r3, r2, [r1]
 800a708:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1e6      	bne.n	800a6de <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a714:	2b01      	cmp	r3, #1
 800a716:	d12e      	bne.n	800a776 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	e853 3f00 	ldrex	r3, [r3]
 800a72a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	f023 0310 	bic.w	r3, r3, #16
 800a732:	65bb      	str	r3, [r7, #88]	; 0x58
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	461a      	mov	r2, r3
 800a73a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a73c:	61bb      	str	r3, [r7, #24]
 800a73e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a740:	6979      	ldr	r1, [r7, #20]
 800a742:	69ba      	ldr	r2, [r7, #24]
 800a744:	e841 2300 	strex	r3, r2, [r1]
 800a748:	613b      	str	r3, [r7, #16]
   return(result);
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1e6      	bne.n	800a71e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	69db      	ldr	r3, [r3, #28]
 800a756:	f003 0310 	and.w	r3, r3, #16
 800a75a:	2b10      	cmp	r3, #16
 800a75c:	d103      	bne.n	800a766 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2210      	movs	r2, #16
 800a764:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a76c:	4619      	mov	r1, r3
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7fe fc66 	bl	8009040 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a774:	e00b      	b.n	800a78e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7f6 f8d4 	bl	8000924 <HAL_UART_RxCpltCallback>
}
 800a77c:	e007      	b.n	800a78e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	699a      	ldr	r2, [r3, #24]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f042 0208 	orr.w	r2, r2, #8
 800a78c:	619a      	str	r2, [r3, #24]
}
 800a78e:	bf00      	nop
 800a790:	3770      	adds	r7, #112	; 0x70
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	58000c00 	.word	0x58000c00

0800a79c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b0ac      	sub	sp, #176	; 0xb0
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a7aa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	69db      	ldr	r3, [r3, #28]
 800a7b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7d2:	2b22      	cmp	r3, #34	; 0x22
 800a7d4:	f040 8180 	bne.w	800aad8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a7de:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a7e2:	e123      	b.n	800aa2c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ea:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a7ee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800a7f2:	b2d9      	uxtb	r1, r3
 800a7f4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7fe:	400a      	ands	r2, r1
 800a800:	b2d2      	uxtb	r2, r2
 800a802:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a808:	1c5a      	adds	r2, r3, #1
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a814:	b29b      	uxth	r3, r3
 800a816:	3b01      	subs	r3, #1
 800a818:	b29a      	uxth	r2, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	69db      	ldr	r3, [r3, #28]
 800a826:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a82a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a82e:	f003 0307 	and.w	r3, r3, #7
 800a832:	2b00      	cmp	r3, #0
 800a834:	d053      	beq.n	800a8de <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a83a:	f003 0301 	and.w	r3, r3, #1
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d011      	beq.n	800a866 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a842:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00b      	beq.n	800a866 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2201      	movs	r2, #1
 800a854:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a85c:	f043 0201 	orr.w	r2, r3, #1
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a86a:	f003 0302 	and.w	r3, r3, #2
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d011      	beq.n	800a896 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00b      	beq.n	800a896 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2202      	movs	r2, #2
 800a884:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a88c:	f043 0204 	orr.w	r2, r3, #4
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a89a:	f003 0304 	and.w	r3, r3, #4
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d011      	beq.n	800a8c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a8a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a8a6:	f003 0301 	and.w	r3, r3, #1
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00b      	beq.n	800a8c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2204      	movs	r2, #4
 800a8b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8bc:	f043 0202 	orr.w	r2, r3, #2
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d006      	beq.n	800a8de <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7fe fbab 	bl	800902c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f040 80a0 	bne.w	800aa2c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8f4:	e853 3f00 	ldrex	r3, [r3]
 800a8f8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800a8fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	461a      	mov	r2, r3
 800a90a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a90e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a910:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a912:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a914:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a916:	e841 2300 	strex	r3, r2, [r1]
 800a91a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800a91c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1e4      	bne.n	800a8ec <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3308      	adds	r3, #8
 800a928:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a92c:	e853 3f00 	ldrex	r3, [r3]
 800a930:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a932:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a934:	4b6e      	ldr	r3, [pc, #440]	; (800aaf0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800a936:	4013      	ands	r3, r2
 800a938:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	3308      	adds	r3, #8
 800a942:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a946:	66ba      	str	r2, [r7, #104]	; 0x68
 800a948:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a94c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a94e:	e841 2300 	strex	r3, r2, [r1]
 800a952:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1e3      	bne.n	800a922 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2220      	movs	r2, #32
 800a95e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a60      	ldr	r2, [pc, #384]	; (800aaf4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d021      	beq.n	800a9bc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a982:	2b00      	cmp	r3, #0
 800a984:	d01a      	beq.n	800a9bc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a98e:	e853 3f00 	ldrex	r3, [r3]
 800a992:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a996:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a99a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a9a8:	657b      	str	r3, [r7, #84]	; 0x54
 800a9aa:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a9ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9b0:	e841 2300 	strex	r3, r2, [r1]
 800a9b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a9b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1e4      	bne.n	800a986 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d130      	bne.n	800aa26 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d2:	e853 3f00 	ldrex	r3, [r3]
 800a9d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9da:	f023 0310 	bic.w	r3, r3, #16
 800a9de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9ec:	643b      	str	r3, [r7, #64]	; 0x40
 800a9ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9f4:	e841 2300 	strex	r3, r2, [r1]
 800a9f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1e4      	bne.n	800a9ca <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	69db      	ldr	r3, [r3, #28]
 800aa06:	f003 0310 	and.w	r3, r3, #16
 800aa0a:	2b10      	cmp	r3, #16
 800aa0c:	d103      	bne.n	800aa16 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2210      	movs	r2, #16
 800aa14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7fe fb0e 	bl	8009040 <HAL_UARTEx_RxEventCallback>
 800aa24:	e002      	b.n	800aa2c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7f5 ff7c 	bl	8000924 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aa2c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d006      	beq.n	800aa42 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800aa34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa38:	f003 0320 	and.w	r3, r3, #32
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f47f aed1 	bne.w	800a7e4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa48:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aa4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d049      	beq.n	800aae8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aa5a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d242      	bcs.n	800aae8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3308      	adds	r3, #8
 800aa68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	e853 3f00 	ldrex	r3, [r3]
 800aa70:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	3308      	adds	r3, #8
 800aa82:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800aa86:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa8e:	e841 2300 	strex	r3, r2, [r1]
 800aa92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1e3      	bne.n	800aa62 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a16      	ldr	r2, [pc, #88]	; (800aaf8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800aa9e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	60bb      	str	r3, [r7, #8]
   return(result);
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	f043 0320 	orr.w	r3, r3, #32
 800aab4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	461a      	mov	r2, r3
 800aabe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aac2:	61bb      	str	r3, [r7, #24]
 800aac4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac6:	6979      	ldr	r1, [r7, #20]
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	e841 2300 	strex	r3, r2, [r1]
 800aace:	613b      	str	r3, [r7, #16]
   return(result);
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1e4      	bne.n	800aaa0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aad6:	e007      	b.n	800aae8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	699a      	ldr	r2, [r3, #24]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f042 0208 	orr.w	r2, r2, #8
 800aae6:	619a      	str	r2, [r3, #24]
}
 800aae8:	bf00      	nop
 800aaea:	37b0      	adds	r7, #176	; 0xb0
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	effffffe 	.word	0xeffffffe
 800aaf4:	58000c00 	.word	0x58000c00
 800aaf8:	0800a42d 	.word	0x0800a42d

0800aafc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b0ae      	sub	sp, #184	; 0xb8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab0a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	69db      	ldr	r3, [r3, #28]
 800ab14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab32:	2b22      	cmp	r3, #34	; 0x22
 800ab34:	f040 8184 	bne.w	800ae40 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ab3e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ab42:	e127      	b.n	800ad94 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ab56:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800ab5a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800ab5e:	4013      	ands	r3, r2
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab6c:	1c9a      	adds	r2, r3, #2
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	69db      	ldr	r3, [r3, #28]
 800ab8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ab8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ab92:	f003 0307 	and.w	r3, r3, #7
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d053      	beq.n	800ac42 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ab9e:	f003 0301 	and.w	r3, r3, #1
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d011      	beq.n	800abca <UART_RxISR_16BIT_FIFOEN+0xce>
 800aba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800abaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00b      	beq.n	800abca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2201      	movs	r2, #1
 800abb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abc0:	f043 0201 	orr.w	r2, r3, #1
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800abce:	f003 0302 	and.w	r3, r3, #2
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d011      	beq.n	800abfa <UART_RxISR_16BIT_FIFOEN+0xfe>
 800abd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800abda:	f003 0301 	and.w	r3, r3, #1
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00b      	beq.n	800abfa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2202      	movs	r2, #2
 800abe8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abf0:	f043 0204 	orr.w	r2, r3, #4
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800abfe:	f003 0304 	and.w	r3, r3, #4
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d011      	beq.n	800ac2a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ac06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac0a:	f003 0301 	and.w	r3, r3, #1
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00b      	beq.n	800ac2a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2204      	movs	r2, #4
 800ac18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac20:	f043 0202 	orr.w	r2, r3, #2
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d006      	beq.n	800ac42 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f7fe f9f9 	bl	800902c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	f040 80a2 	bne.w	800ad94 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac58:	e853 3f00 	ldrex	r3, [r3]
 800ac5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ac5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ac72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac76:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ac7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ac7e:	e841 2300 	strex	r3, r2, [r1]
 800ac82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ac84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1e2      	bne.n	800ac50 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	3308      	adds	r3, #8
 800ac90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac94:	e853 3f00 	ldrex	r3, [r3]
 800ac98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ac9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ac9c:	4b6e      	ldr	r3, [pc, #440]	; (800ae58 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800ac9e:	4013      	ands	r3, r2
 800aca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	3308      	adds	r3, #8
 800acaa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800acae:	66fa      	str	r2, [r7, #108]	; 0x6c
 800acb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800acb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800acb6:	e841 2300 	strex	r3, r2, [r1]
 800acba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800acbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1e3      	bne.n	800ac8a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2220      	movs	r2, #32
 800acc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a60      	ldr	r2, [pc, #384]	; (800ae5c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d021      	beq.n	800ad24 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800acea:	2b00      	cmp	r3, #0
 800acec:	d01a      	beq.n	800ad24 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acf6:	e853 3f00 	ldrex	r3, [r3]
 800acfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800acfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ad02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ad10:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad12:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad18:	e841 2300 	strex	r3, r2, [r1]
 800ad1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1e4      	bne.n	800acee <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d130      	bne.n	800ad8e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3a:	e853 3f00 	ldrex	r3, [r3]
 800ad3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad42:	f023 0310 	bic.w	r3, r3, #16
 800ad46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad54:	647b      	str	r3, [r7, #68]	; 0x44
 800ad56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad5c:	e841 2300 	strex	r3, r2, [r1]
 800ad60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d1e4      	bne.n	800ad32 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	69db      	ldr	r3, [r3, #28]
 800ad6e:	f003 0310 	and.w	r3, r3, #16
 800ad72:	2b10      	cmp	r3, #16
 800ad74:	d103      	bne.n	800ad7e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2210      	movs	r2, #16
 800ad7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad84:	4619      	mov	r1, r3
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7fe f95a 	bl	8009040 <HAL_UARTEx_RxEventCallback>
 800ad8c:	e002      	b.n	800ad94 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f7f5 fdc8 	bl	8000924 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad94:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d006      	beq.n	800adaa <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800ad9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ada0:	f003 0320 	and.w	r3, r3, #32
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f47f aecd 	bne.w	800ab44 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800adb0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800adb4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d049      	beq.n	800ae50 <UART_RxISR_16BIT_FIFOEN+0x354>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800adc2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d242      	bcs.n	800ae50 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	3308      	adds	r3, #8
 800add0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add4:	e853 3f00 	ldrex	r3, [r3]
 800add8:	623b      	str	r3, [r7, #32]
   return(result);
 800adda:	6a3b      	ldr	r3, [r7, #32]
 800addc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ade0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	3308      	adds	r3, #8
 800adea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800adee:	633a      	str	r2, [r7, #48]	; 0x30
 800adf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800adf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adf6:	e841 2300 	strex	r3, r2, [r1]
 800adfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800adfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1e3      	bne.n	800adca <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4a16      	ldr	r2, [pc, #88]	; (800ae60 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ae06:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	e853 3f00 	ldrex	r3, [r3]
 800ae14:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f043 0320 	orr.w	r3, r3, #32
 800ae1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	461a      	mov	r2, r3
 800ae26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae2a:	61fb      	str	r3, [r7, #28]
 800ae2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2e:	69b9      	ldr	r1, [r7, #24]
 800ae30:	69fa      	ldr	r2, [r7, #28]
 800ae32:	e841 2300 	strex	r3, r2, [r1]
 800ae36:	617b      	str	r3, [r7, #20]
   return(result);
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1e4      	bne.n	800ae08 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae3e:	e007      	b.n	800ae50 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	699a      	ldr	r2, [r3, #24]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f042 0208 	orr.w	r2, r2, #8
 800ae4e:	619a      	str	r2, [r3, #24]
}
 800ae50:	bf00      	nop
 800ae52:	37b8      	adds	r7, #184	; 0xb8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	effffffe 	.word	0xeffffffe
 800ae5c:	58000c00 	.word	0x58000c00
 800ae60:	0800a5e5 	.word	0x0800a5e5

0800ae64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae6c:	bf00      	nop
 800ae6e:	370c      	adds	r7, #12
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr

0800ae78 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae80:	bf00      	nop
 800ae82:	370c      	adds	r7, #12
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d101      	bne.n	800aeb6 <HAL_UARTEx_DisableFifoMode+0x16>
 800aeb2:	2302      	movs	r3, #2
 800aeb4:	e027      	b.n	800af06 <HAL_UARTEx_DisableFifoMode+0x66>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2224      	movs	r2, #36	; 0x24
 800aec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f022 0201 	bic.w	r2, r2, #1
 800aedc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aee4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2220      	movs	r2, #32
 800aef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3714      	adds	r7, #20
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b084      	sub	sp, #16
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
 800af1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af22:	2b01      	cmp	r3, #1
 800af24:	d101      	bne.n	800af2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af26:	2302      	movs	r3, #2
 800af28:	e02d      	b.n	800af86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2224      	movs	r2, #36	; 0x24
 800af36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f022 0201 	bic.w	r2, r2, #1
 800af50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	683a      	ldr	r2, [r7, #0]
 800af62:	430a      	orrs	r2, r1
 800af64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 f850 	bl	800b00c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2220      	movs	r2, #32
 800af78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b084      	sub	sp, #16
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d101      	bne.n	800afa6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800afa2:	2302      	movs	r3, #2
 800afa4:	e02d      	b.n	800b002 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2201      	movs	r2, #1
 800afaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2224      	movs	r2, #36	; 0x24
 800afb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f022 0201 	bic.w	r2, r2, #1
 800afcc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	683a      	ldr	r2, [r7, #0]
 800afde:	430a      	orrs	r2, r1
 800afe0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 f812 	bl	800b00c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2220      	movs	r2, #32
 800aff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
	...

0800b00c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d108      	bne.n	800b02e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b02c:	e031      	b.n	800b092 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b02e:	2310      	movs	r3, #16
 800b030:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b032:	2310      	movs	r3, #16
 800b034:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	0e5b      	lsrs	r3, r3, #25
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	f003 0307 	and.w	r3, r3, #7
 800b044:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	0f5b      	lsrs	r3, r3, #29
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	f003 0307 	and.w	r3, r3, #7
 800b054:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b056:	7bbb      	ldrb	r3, [r7, #14]
 800b058:	7b3a      	ldrb	r2, [r7, #12]
 800b05a:	4911      	ldr	r1, [pc, #68]	; (800b0a0 <UARTEx_SetNbDataToProcess+0x94>)
 800b05c:	5c8a      	ldrb	r2, [r1, r2]
 800b05e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b062:	7b3a      	ldrb	r2, [r7, #12]
 800b064:	490f      	ldr	r1, [pc, #60]	; (800b0a4 <UARTEx_SetNbDataToProcess+0x98>)
 800b066:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b068:	fb93 f3f2 	sdiv	r3, r3, r2
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b074:	7bfb      	ldrb	r3, [r7, #15]
 800b076:	7b7a      	ldrb	r2, [r7, #13]
 800b078:	4909      	ldr	r1, [pc, #36]	; (800b0a0 <UARTEx_SetNbDataToProcess+0x94>)
 800b07a:	5c8a      	ldrb	r2, [r1, r2]
 800b07c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b080:	7b7a      	ldrb	r2, [r7, #13]
 800b082:	4908      	ldr	r1, [pc, #32]	; (800b0a4 <UARTEx_SetNbDataToProcess+0x98>)
 800b084:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b086:	fb93 f3f2 	sdiv	r3, r3, r2
 800b08a:	b29a      	uxth	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b092:	bf00      	nop
 800b094:	3714      	adds	r7, #20
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	0800ba34 	.word	0x0800ba34
 800b0a4:	0800ba3c 	.word	0x0800ba3c

0800b0a8 <siprintf>:
 800b0a8:	b40e      	push	{r1, r2, r3}
 800b0aa:	b500      	push	{lr}
 800b0ac:	b09c      	sub	sp, #112	; 0x70
 800b0ae:	ab1d      	add	r3, sp, #116	; 0x74
 800b0b0:	9002      	str	r0, [sp, #8]
 800b0b2:	9006      	str	r0, [sp, #24]
 800b0b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0b8:	4809      	ldr	r0, [pc, #36]	; (800b0e0 <siprintf+0x38>)
 800b0ba:	9107      	str	r1, [sp, #28]
 800b0bc:	9104      	str	r1, [sp, #16]
 800b0be:	4909      	ldr	r1, [pc, #36]	; (800b0e4 <siprintf+0x3c>)
 800b0c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0c4:	9105      	str	r1, [sp, #20]
 800b0c6:	6800      	ldr	r0, [r0, #0]
 800b0c8:	9301      	str	r3, [sp, #4]
 800b0ca:	a902      	add	r1, sp, #8
 800b0cc:	f000 f992 	bl	800b3f4 <_svfiprintf_r>
 800b0d0:	9b02      	ldr	r3, [sp, #8]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	701a      	strb	r2, [r3, #0]
 800b0d6:	b01c      	add	sp, #112	; 0x70
 800b0d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0dc:	b003      	add	sp, #12
 800b0de:	4770      	bx	lr
 800b0e0:	24000068 	.word	0x24000068
 800b0e4:	ffff0208 	.word	0xffff0208

0800b0e8 <memset>:
 800b0e8:	4402      	add	r2, r0
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d100      	bne.n	800b0f2 <memset+0xa>
 800b0f0:	4770      	bx	lr
 800b0f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b0f6:	e7f9      	b.n	800b0ec <memset+0x4>

0800b0f8 <__errno>:
 800b0f8:	4b01      	ldr	r3, [pc, #4]	; (800b100 <__errno+0x8>)
 800b0fa:	6818      	ldr	r0, [r3, #0]
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	24000068 	.word	0x24000068

0800b104 <__libc_init_array>:
 800b104:	b570      	push	{r4, r5, r6, lr}
 800b106:	4d0d      	ldr	r5, [pc, #52]	; (800b13c <__libc_init_array+0x38>)
 800b108:	4c0d      	ldr	r4, [pc, #52]	; (800b140 <__libc_init_array+0x3c>)
 800b10a:	1b64      	subs	r4, r4, r5
 800b10c:	10a4      	asrs	r4, r4, #2
 800b10e:	2600      	movs	r6, #0
 800b110:	42a6      	cmp	r6, r4
 800b112:	d109      	bne.n	800b128 <__libc_init_array+0x24>
 800b114:	4d0b      	ldr	r5, [pc, #44]	; (800b144 <__libc_init_array+0x40>)
 800b116:	4c0c      	ldr	r4, [pc, #48]	; (800b148 <__libc_init_array+0x44>)
 800b118:	f000 fc6a 	bl	800b9f0 <_init>
 800b11c:	1b64      	subs	r4, r4, r5
 800b11e:	10a4      	asrs	r4, r4, #2
 800b120:	2600      	movs	r6, #0
 800b122:	42a6      	cmp	r6, r4
 800b124:	d105      	bne.n	800b132 <__libc_init_array+0x2e>
 800b126:	bd70      	pop	{r4, r5, r6, pc}
 800b128:	f855 3b04 	ldr.w	r3, [r5], #4
 800b12c:	4798      	blx	r3
 800b12e:	3601      	adds	r6, #1
 800b130:	e7ee      	b.n	800b110 <__libc_init_array+0xc>
 800b132:	f855 3b04 	ldr.w	r3, [r5], #4
 800b136:	4798      	blx	r3
 800b138:	3601      	adds	r6, #1
 800b13a:	e7f2      	b.n	800b122 <__libc_init_array+0x1e>
 800b13c:	0800ba80 	.word	0x0800ba80
 800b140:	0800ba80 	.word	0x0800ba80
 800b144:	0800ba80 	.word	0x0800ba80
 800b148:	0800ba84 	.word	0x0800ba84

0800b14c <__retarget_lock_acquire_recursive>:
 800b14c:	4770      	bx	lr

0800b14e <__retarget_lock_release_recursive>:
 800b14e:	4770      	bx	lr

0800b150 <_free_r>:
 800b150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b152:	2900      	cmp	r1, #0
 800b154:	d044      	beq.n	800b1e0 <_free_r+0x90>
 800b156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b15a:	9001      	str	r0, [sp, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f1a1 0404 	sub.w	r4, r1, #4
 800b162:	bfb8      	it	lt
 800b164:	18e4      	addlt	r4, r4, r3
 800b166:	f000 f8df 	bl	800b328 <__malloc_lock>
 800b16a:	4a1e      	ldr	r2, [pc, #120]	; (800b1e4 <_free_r+0x94>)
 800b16c:	9801      	ldr	r0, [sp, #4]
 800b16e:	6813      	ldr	r3, [r2, #0]
 800b170:	b933      	cbnz	r3, 800b180 <_free_r+0x30>
 800b172:	6063      	str	r3, [r4, #4]
 800b174:	6014      	str	r4, [r2, #0]
 800b176:	b003      	add	sp, #12
 800b178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b17c:	f000 b8da 	b.w	800b334 <__malloc_unlock>
 800b180:	42a3      	cmp	r3, r4
 800b182:	d908      	bls.n	800b196 <_free_r+0x46>
 800b184:	6825      	ldr	r5, [r4, #0]
 800b186:	1961      	adds	r1, r4, r5
 800b188:	428b      	cmp	r3, r1
 800b18a:	bf01      	itttt	eq
 800b18c:	6819      	ldreq	r1, [r3, #0]
 800b18e:	685b      	ldreq	r3, [r3, #4]
 800b190:	1949      	addeq	r1, r1, r5
 800b192:	6021      	streq	r1, [r4, #0]
 800b194:	e7ed      	b.n	800b172 <_free_r+0x22>
 800b196:	461a      	mov	r2, r3
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	b10b      	cbz	r3, 800b1a0 <_free_r+0x50>
 800b19c:	42a3      	cmp	r3, r4
 800b19e:	d9fa      	bls.n	800b196 <_free_r+0x46>
 800b1a0:	6811      	ldr	r1, [r2, #0]
 800b1a2:	1855      	adds	r5, r2, r1
 800b1a4:	42a5      	cmp	r5, r4
 800b1a6:	d10b      	bne.n	800b1c0 <_free_r+0x70>
 800b1a8:	6824      	ldr	r4, [r4, #0]
 800b1aa:	4421      	add	r1, r4
 800b1ac:	1854      	adds	r4, r2, r1
 800b1ae:	42a3      	cmp	r3, r4
 800b1b0:	6011      	str	r1, [r2, #0]
 800b1b2:	d1e0      	bne.n	800b176 <_free_r+0x26>
 800b1b4:	681c      	ldr	r4, [r3, #0]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	6053      	str	r3, [r2, #4]
 800b1ba:	440c      	add	r4, r1
 800b1bc:	6014      	str	r4, [r2, #0]
 800b1be:	e7da      	b.n	800b176 <_free_r+0x26>
 800b1c0:	d902      	bls.n	800b1c8 <_free_r+0x78>
 800b1c2:	230c      	movs	r3, #12
 800b1c4:	6003      	str	r3, [r0, #0]
 800b1c6:	e7d6      	b.n	800b176 <_free_r+0x26>
 800b1c8:	6825      	ldr	r5, [r4, #0]
 800b1ca:	1961      	adds	r1, r4, r5
 800b1cc:	428b      	cmp	r3, r1
 800b1ce:	bf04      	itt	eq
 800b1d0:	6819      	ldreq	r1, [r3, #0]
 800b1d2:	685b      	ldreq	r3, [r3, #4]
 800b1d4:	6063      	str	r3, [r4, #4]
 800b1d6:	bf04      	itt	eq
 800b1d8:	1949      	addeq	r1, r1, r5
 800b1da:	6021      	streq	r1, [r4, #0]
 800b1dc:	6054      	str	r4, [r2, #4]
 800b1de:	e7ca      	b.n	800b176 <_free_r+0x26>
 800b1e0:	b003      	add	sp, #12
 800b1e2:	bd30      	pop	{r4, r5, pc}
 800b1e4:	2401d920 	.word	0x2401d920

0800b1e8 <sbrk_aligned>:
 800b1e8:	b570      	push	{r4, r5, r6, lr}
 800b1ea:	4e0e      	ldr	r6, [pc, #56]	; (800b224 <sbrk_aligned+0x3c>)
 800b1ec:	460c      	mov	r4, r1
 800b1ee:	6831      	ldr	r1, [r6, #0]
 800b1f0:	4605      	mov	r5, r0
 800b1f2:	b911      	cbnz	r1, 800b1fa <sbrk_aligned+0x12>
 800b1f4:	f000 fba6 	bl	800b944 <_sbrk_r>
 800b1f8:	6030      	str	r0, [r6, #0]
 800b1fa:	4621      	mov	r1, r4
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	f000 fba1 	bl	800b944 <_sbrk_r>
 800b202:	1c43      	adds	r3, r0, #1
 800b204:	d00a      	beq.n	800b21c <sbrk_aligned+0x34>
 800b206:	1cc4      	adds	r4, r0, #3
 800b208:	f024 0403 	bic.w	r4, r4, #3
 800b20c:	42a0      	cmp	r0, r4
 800b20e:	d007      	beq.n	800b220 <sbrk_aligned+0x38>
 800b210:	1a21      	subs	r1, r4, r0
 800b212:	4628      	mov	r0, r5
 800b214:	f000 fb96 	bl	800b944 <_sbrk_r>
 800b218:	3001      	adds	r0, #1
 800b21a:	d101      	bne.n	800b220 <sbrk_aligned+0x38>
 800b21c:	f04f 34ff 	mov.w	r4, #4294967295
 800b220:	4620      	mov	r0, r4
 800b222:	bd70      	pop	{r4, r5, r6, pc}
 800b224:	2401d924 	.word	0x2401d924

0800b228 <_malloc_r>:
 800b228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b22c:	1ccd      	adds	r5, r1, #3
 800b22e:	f025 0503 	bic.w	r5, r5, #3
 800b232:	3508      	adds	r5, #8
 800b234:	2d0c      	cmp	r5, #12
 800b236:	bf38      	it	cc
 800b238:	250c      	movcc	r5, #12
 800b23a:	2d00      	cmp	r5, #0
 800b23c:	4607      	mov	r7, r0
 800b23e:	db01      	blt.n	800b244 <_malloc_r+0x1c>
 800b240:	42a9      	cmp	r1, r5
 800b242:	d905      	bls.n	800b250 <_malloc_r+0x28>
 800b244:	230c      	movs	r3, #12
 800b246:	603b      	str	r3, [r7, #0]
 800b248:	2600      	movs	r6, #0
 800b24a:	4630      	mov	r0, r6
 800b24c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b250:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b324 <_malloc_r+0xfc>
 800b254:	f000 f868 	bl	800b328 <__malloc_lock>
 800b258:	f8d8 3000 	ldr.w	r3, [r8]
 800b25c:	461c      	mov	r4, r3
 800b25e:	bb5c      	cbnz	r4, 800b2b8 <_malloc_r+0x90>
 800b260:	4629      	mov	r1, r5
 800b262:	4638      	mov	r0, r7
 800b264:	f7ff ffc0 	bl	800b1e8 <sbrk_aligned>
 800b268:	1c43      	adds	r3, r0, #1
 800b26a:	4604      	mov	r4, r0
 800b26c:	d155      	bne.n	800b31a <_malloc_r+0xf2>
 800b26e:	f8d8 4000 	ldr.w	r4, [r8]
 800b272:	4626      	mov	r6, r4
 800b274:	2e00      	cmp	r6, #0
 800b276:	d145      	bne.n	800b304 <_malloc_r+0xdc>
 800b278:	2c00      	cmp	r4, #0
 800b27a:	d048      	beq.n	800b30e <_malloc_r+0xe6>
 800b27c:	6823      	ldr	r3, [r4, #0]
 800b27e:	4631      	mov	r1, r6
 800b280:	4638      	mov	r0, r7
 800b282:	eb04 0903 	add.w	r9, r4, r3
 800b286:	f000 fb5d 	bl	800b944 <_sbrk_r>
 800b28a:	4581      	cmp	r9, r0
 800b28c:	d13f      	bne.n	800b30e <_malloc_r+0xe6>
 800b28e:	6821      	ldr	r1, [r4, #0]
 800b290:	1a6d      	subs	r5, r5, r1
 800b292:	4629      	mov	r1, r5
 800b294:	4638      	mov	r0, r7
 800b296:	f7ff ffa7 	bl	800b1e8 <sbrk_aligned>
 800b29a:	3001      	adds	r0, #1
 800b29c:	d037      	beq.n	800b30e <_malloc_r+0xe6>
 800b29e:	6823      	ldr	r3, [r4, #0]
 800b2a0:	442b      	add	r3, r5
 800b2a2:	6023      	str	r3, [r4, #0]
 800b2a4:	f8d8 3000 	ldr.w	r3, [r8]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d038      	beq.n	800b31e <_malloc_r+0xf6>
 800b2ac:	685a      	ldr	r2, [r3, #4]
 800b2ae:	42a2      	cmp	r2, r4
 800b2b0:	d12b      	bne.n	800b30a <_malloc_r+0xe2>
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	605a      	str	r2, [r3, #4]
 800b2b6:	e00f      	b.n	800b2d8 <_malloc_r+0xb0>
 800b2b8:	6822      	ldr	r2, [r4, #0]
 800b2ba:	1b52      	subs	r2, r2, r5
 800b2bc:	d41f      	bmi.n	800b2fe <_malloc_r+0xd6>
 800b2be:	2a0b      	cmp	r2, #11
 800b2c0:	d917      	bls.n	800b2f2 <_malloc_r+0xca>
 800b2c2:	1961      	adds	r1, r4, r5
 800b2c4:	42a3      	cmp	r3, r4
 800b2c6:	6025      	str	r5, [r4, #0]
 800b2c8:	bf18      	it	ne
 800b2ca:	6059      	strne	r1, [r3, #4]
 800b2cc:	6863      	ldr	r3, [r4, #4]
 800b2ce:	bf08      	it	eq
 800b2d0:	f8c8 1000 	streq.w	r1, [r8]
 800b2d4:	5162      	str	r2, [r4, r5]
 800b2d6:	604b      	str	r3, [r1, #4]
 800b2d8:	4638      	mov	r0, r7
 800b2da:	f104 060b 	add.w	r6, r4, #11
 800b2de:	f000 f829 	bl	800b334 <__malloc_unlock>
 800b2e2:	f026 0607 	bic.w	r6, r6, #7
 800b2e6:	1d23      	adds	r3, r4, #4
 800b2e8:	1af2      	subs	r2, r6, r3
 800b2ea:	d0ae      	beq.n	800b24a <_malloc_r+0x22>
 800b2ec:	1b9b      	subs	r3, r3, r6
 800b2ee:	50a3      	str	r3, [r4, r2]
 800b2f0:	e7ab      	b.n	800b24a <_malloc_r+0x22>
 800b2f2:	42a3      	cmp	r3, r4
 800b2f4:	6862      	ldr	r2, [r4, #4]
 800b2f6:	d1dd      	bne.n	800b2b4 <_malloc_r+0x8c>
 800b2f8:	f8c8 2000 	str.w	r2, [r8]
 800b2fc:	e7ec      	b.n	800b2d8 <_malloc_r+0xb0>
 800b2fe:	4623      	mov	r3, r4
 800b300:	6864      	ldr	r4, [r4, #4]
 800b302:	e7ac      	b.n	800b25e <_malloc_r+0x36>
 800b304:	4634      	mov	r4, r6
 800b306:	6876      	ldr	r6, [r6, #4]
 800b308:	e7b4      	b.n	800b274 <_malloc_r+0x4c>
 800b30a:	4613      	mov	r3, r2
 800b30c:	e7cc      	b.n	800b2a8 <_malloc_r+0x80>
 800b30e:	230c      	movs	r3, #12
 800b310:	603b      	str	r3, [r7, #0]
 800b312:	4638      	mov	r0, r7
 800b314:	f000 f80e 	bl	800b334 <__malloc_unlock>
 800b318:	e797      	b.n	800b24a <_malloc_r+0x22>
 800b31a:	6025      	str	r5, [r4, #0]
 800b31c:	e7dc      	b.n	800b2d8 <_malloc_r+0xb0>
 800b31e:	605b      	str	r3, [r3, #4]
 800b320:	deff      	udf	#255	; 0xff
 800b322:	bf00      	nop
 800b324:	2401d920 	.word	0x2401d920

0800b328 <__malloc_lock>:
 800b328:	4801      	ldr	r0, [pc, #4]	; (800b330 <__malloc_lock+0x8>)
 800b32a:	f7ff bf0f 	b.w	800b14c <__retarget_lock_acquire_recursive>
 800b32e:	bf00      	nop
 800b330:	2401d91c 	.word	0x2401d91c

0800b334 <__malloc_unlock>:
 800b334:	4801      	ldr	r0, [pc, #4]	; (800b33c <__malloc_unlock+0x8>)
 800b336:	f7ff bf0a 	b.w	800b14e <__retarget_lock_release_recursive>
 800b33a:	bf00      	nop
 800b33c:	2401d91c 	.word	0x2401d91c

0800b340 <__ssputs_r>:
 800b340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b344:	688e      	ldr	r6, [r1, #8]
 800b346:	461f      	mov	r7, r3
 800b348:	42be      	cmp	r6, r7
 800b34a:	680b      	ldr	r3, [r1, #0]
 800b34c:	4682      	mov	sl, r0
 800b34e:	460c      	mov	r4, r1
 800b350:	4690      	mov	r8, r2
 800b352:	d82c      	bhi.n	800b3ae <__ssputs_r+0x6e>
 800b354:	898a      	ldrh	r2, [r1, #12]
 800b356:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b35a:	d026      	beq.n	800b3aa <__ssputs_r+0x6a>
 800b35c:	6965      	ldr	r5, [r4, #20]
 800b35e:	6909      	ldr	r1, [r1, #16]
 800b360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b364:	eba3 0901 	sub.w	r9, r3, r1
 800b368:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b36c:	1c7b      	adds	r3, r7, #1
 800b36e:	444b      	add	r3, r9
 800b370:	106d      	asrs	r5, r5, #1
 800b372:	429d      	cmp	r5, r3
 800b374:	bf38      	it	cc
 800b376:	461d      	movcc	r5, r3
 800b378:	0553      	lsls	r3, r2, #21
 800b37a:	d527      	bpl.n	800b3cc <__ssputs_r+0x8c>
 800b37c:	4629      	mov	r1, r5
 800b37e:	f7ff ff53 	bl	800b228 <_malloc_r>
 800b382:	4606      	mov	r6, r0
 800b384:	b360      	cbz	r0, 800b3e0 <__ssputs_r+0xa0>
 800b386:	6921      	ldr	r1, [r4, #16]
 800b388:	464a      	mov	r2, r9
 800b38a:	f000 faeb 	bl	800b964 <memcpy>
 800b38e:	89a3      	ldrh	r3, [r4, #12]
 800b390:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b398:	81a3      	strh	r3, [r4, #12]
 800b39a:	6126      	str	r6, [r4, #16]
 800b39c:	6165      	str	r5, [r4, #20]
 800b39e:	444e      	add	r6, r9
 800b3a0:	eba5 0509 	sub.w	r5, r5, r9
 800b3a4:	6026      	str	r6, [r4, #0]
 800b3a6:	60a5      	str	r5, [r4, #8]
 800b3a8:	463e      	mov	r6, r7
 800b3aa:	42be      	cmp	r6, r7
 800b3ac:	d900      	bls.n	800b3b0 <__ssputs_r+0x70>
 800b3ae:	463e      	mov	r6, r7
 800b3b0:	6820      	ldr	r0, [r4, #0]
 800b3b2:	4632      	mov	r2, r6
 800b3b4:	4641      	mov	r1, r8
 800b3b6:	f000 faab 	bl	800b910 <memmove>
 800b3ba:	68a3      	ldr	r3, [r4, #8]
 800b3bc:	1b9b      	subs	r3, r3, r6
 800b3be:	60a3      	str	r3, [r4, #8]
 800b3c0:	6823      	ldr	r3, [r4, #0]
 800b3c2:	4433      	add	r3, r6
 800b3c4:	6023      	str	r3, [r4, #0]
 800b3c6:	2000      	movs	r0, #0
 800b3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3cc:	462a      	mov	r2, r5
 800b3ce:	f000 fad7 	bl	800b980 <_realloc_r>
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d1e0      	bne.n	800b39a <__ssputs_r+0x5a>
 800b3d8:	6921      	ldr	r1, [r4, #16]
 800b3da:	4650      	mov	r0, sl
 800b3dc:	f7ff feb8 	bl	800b150 <_free_r>
 800b3e0:	230c      	movs	r3, #12
 800b3e2:	f8ca 3000 	str.w	r3, [sl]
 800b3e6:	89a3      	ldrh	r3, [r4, #12]
 800b3e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ec:	81a3      	strh	r3, [r4, #12]
 800b3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f2:	e7e9      	b.n	800b3c8 <__ssputs_r+0x88>

0800b3f4 <_svfiprintf_r>:
 800b3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f8:	4698      	mov	r8, r3
 800b3fa:	898b      	ldrh	r3, [r1, #12]
 800b3fc:	061b      	lsls	r3, r3, #24
 800b3fe:	b09d      	sub	sp, #116	; 0x74
 800b400:	4607      	mov	r7, r0
 800b402:	460d      	mov	r5, r1
 800b404:	4614      	mov	r4, r2
 800b406:	d50e      	bpl.n	800b426 <_svfiprintf_r+0x32>
 800b408:	690b      	ldr	r3, [r1, #16]
 800b40a:	b963      	cbnz	r3, 800b426 <_svfiprintf_r+0x32>
 800b40c:	2140      	movs	r1, #64	; 0x40
 800b40e:	f7ff ff0b 	bl	800b228 <_malloc_r>
 800b412:	6028      	str	r0, [r5, #0]
 800b414:	6128      	str	r0, [r5, #16]
 800b416:	b920      	cbnz	r0, 800b422 <_svfiprintf_r+0x2e>
 800b418:	230c      	movs	r3, #12
 800b41a:	603b      	str	r3, [r7, #0]
 800b41c:	f04f 30ff 	mov.w	r0, #4294967295
 800b420:	e0d0      	b.n	800b5c4 <_svfiprintf_r+0x1d0>
 800b422:	2340      	movs	r3, #64	; 0x40
 800b424:	616b      	str	r3, [r5, #20]
 800b426:	2300      	movs	r3, #0
 800b428:	9309      	str	r3, [sp, #36]	; 0x24
 800b42a:	2320      	movs	r3, #32
 800b42c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b430:	f8cd 800c 	str.w	r8, [sp, #12]
 800b434:	2330      	movs	r3, #48	; 0x30
 800b436:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b5dc <_svfiprintf_r+0x1e8>
 800b43a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b43e:	f04f 0901 	mov.w	r9, #1
 800b442:	4623      	mov	r3, r4
 800b444:	469a      	mov	sl, r3
 800b446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b44a:	b10a      	cbz	r2, 800b450 <_svfiprintf_r+0x5c>
 800b44c:	2a25      	cmp	r2, #37	; 0x25
 800b44e:	d1f9      	bne.n	800b444 <_svfiprintf_r+0x50>
 800b450:	ebba 0b04 	subs.w	fp, sl, r4
 800b454:	d00b      	beq.n	800b46e <_svfiprintf_r+0x7a>
 800b456:	465b      	mov	r3, fp
 800b458:	4622      	mov	r2, r4
 800b45a:	4629      	mov	r1, r5
 800b45c:	4638      	mov	r0, r7
 800b45e:	f7ff ff6f 	bl	800b340 <__ssputs_r>
 800b462:	3001      	adds	r0, #1
 800b464:	f000 80a9 	beq.w	800b5ba <_svfiprintf_r+0x1c6>
 800b468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b46a:	445a      	add	r2, fp
 800b46c:	9209      	str	r2, [sp, #36]	; 0x24
 800b46e:	f89a 3000 	ldrb.w	r3, [sl]
 800b472:	2b00      	cmp	r3, #0
 800b474:	f000 80a1 	beq.w	800b5ba <_svfiprintf_r+0x1c6>
 800b478:	2300      	movs	r3, #0
 800b47a:	f04f 32ff 	mov.w	r2, #4294967295
 800b47e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b482:	f10a 0a01 	add.w	sl, sl, #1
 800b486:	9304      	str	r3, [sp, #16]
 800b488:	9307      	str	r3, [sp, #28]
 800b48a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b48e:	931a      	str	r3, [sp, #104]	; 0x68
 800b490:	4654      	mov	r4, sl
 800b492:	2205      	movs	r2, #5
 800b494:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b498:	4850      	ldr	r0, [pc, #320]	; (800b5dc <_svfiprintf_r+0x1e8>)
 800b49a:	f7f4 ff31 	bl	8000300 <memchr>
 800b49e:	9a04      	ldr	r2, [sp, #16]
 800b4a0:	b9d8      	cbnz	r0, 800b4da <_svfiprintf_r+0xe6>
 800b4a2:	06d0      	lsls	r0, r2, #27
 800b4a4:	bf44      	itt	mi
 800b4a6:	2320      	movmi	r3, #32
 800b4a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ac:	0711      	lsls	r1, r2, #28
 800b4ae:	bf44      	itt	mi
 800b4b0:	232b      	movmi	r3, #43	; 0x2b
 800b4b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ba:	2b2a      	cmp	r3, #42	; 0x2a
 800b4bc:	d015      	beq.n	800b4ea <_svfiprintf_r+0xf6>
 800b4be:	9a07      	ldr	r2, [sp, #28]
 800b4c0:	4654      	mov	r4, sl
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	f04f 0c0a 	mov.w	ip, #10
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ce:	3b30      	subs	r3, #48	; 0x30
 800b4d0:	2b09      	cmp	r3, #9
 800b4d2:	d94d      	bls.n	800b570 <_svfiprintf_r+0x17c>
 800b4d4:	b1b0      	cbz	r0, 800b504 <_svfiprintf_r+0x110>
 800b4d6:	9207      	str	r2, [sp, #28]
 800b4d8:	e014      	b.n	800b504 <_svfiprintf_r+0x110>
 800b4da:	eba0 0308 	sub.w	r3, r0, r8
 800b4de:	fa09 f303 	lsl.w	r3, r9, r3
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	9304      	str	r3, [sp, #16]
 800b4e6:	46a2      	mov	sl, r4
 800b4e8:	e7d2      	b.n	800b490 <_svfiprintf_r+0x9c>
 800b4ea:	9b03      	ldr	r3, [sp, #12]
 800b4ec:	1d19      	adds	r1, r3, #4
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	9103      	str	r1, [sp, #12]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	bfbb      	ittet	lt
 800b4f6:	425b      	neglt	r3, r3
 800b4f8:	f042 0202 	orrlt.w	r2, r2, #2
 800b4fc:	9307      	strge	r3, [sp, #28]
 800b4fe:	9307      	strlt	r3, [sp, #28]
 800b500:	bfb8      	it	lt
 800b502:	9204      	strlt	r2, [sp, #16]
 800b504:	7823      	ldrb	r3, [r4, #0]
 800b506:	2b2e      	cmp	r3, #46	; 0x2e
 800b508:	d10c      	bne.n	800b524 <_svfiprintf_r+0x130>
 800b50a:	7863      	ldrb	r3, [r4, #1]
 800b50c:	2b2a      	cmp	r3, #42	; 0x2a
 800b50e:	d134      	bne.n	800b57a <_svfiprintf_r+0x186>
 800b510:	9b03      	ldr	r3, [sp, #12]
 800b512:	1d1a      	adds	r2, r3, #4
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	9203      	str	r2, [sp, #12]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	bfb8      	it	lt
 800b51c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b520:	3402      	adds	r4, #2
 800b522:	9305      	str	r3, [sp, #20]
 800b524:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b5ec <_svfiprintf_r+0x1f8>
 800b528:	7821      	ldrb	r1, [r4, #0]
 800b52a:	2203      	movs	r2, #3
 800b52c:	4650      	mov	r0, sl
 800b52e:	f7f4 fee7 	bl	8000300 <memchr>
 800b532:	b138      	cbz	r0, 800b544 <_svfiprintf_r+0x150>
 800b534:	9b04      	ldr	r3, [sp, #16]
 800b536:	eba0 000a 	sub.w	r0, r0, sl
 800b53a:	2240      	movs	r2, #64	; 0x40
 800b53c:	4082      	lsls	r2, r0
 800b53e:	4313      	orrs	r3, r2
 800b540:	3401      	adds	r4, #1
 800b542:	9304      	str	r3, [sp, #16]
 800b544:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b548:	4825      	ldr	r0, [pc, #148]	; (800b5e0 <_svfiprintf_r+0x1ec>)
 800b54a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b54e:	2206      	movs	r2, #6
 800b550:	f7f4 fed6 	bl	8000300 <memchr>
 800b554:	2800      	cmp	r0, #0
 800b556:	d038      	beq.n	800b5ca <_svfiprintf_r+0x1d6>
 800b558:	4b22      	ldr	r3, [pc, #136]	; (800b5e4 <_svfiprintf_r+0x1f0>)
 800b55a:	bb1b      	cbnz	r3, 800b5a4 <_svfiprintf_r+0x1b0>
 800b55c:	9b03      	ldr	r3, [sp, #12]
 800b55e:	3307      	adds	r3, #7
 800b560:	f023 0307 	bic.w	r3, r3, #7
 800b564:	3308      	adds	r3, #8
 800b566:	9303      	str	r3, [sp, #12]
 800b568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b56a:	4433      	add	r3, r6
 800b56c:	9309      	str	r3, [sp, #36]	; 0x24
 800b56e:	e768      	b.n	800b442 <_svfiprintf_r+0x4e>
 800b570:	fb0c 3202 	mla	r2, ip, r2, r3
 800b574:	460c      	mov	r4, r1
 800b576:	2001      	movs	r0, #1
 800b578:	e7a6      	b.n	800b4c8 <_svfiprintf_r+0xd4>
 800b57a:	2300      	movs	r3, #0
 800b57c:	3401      	adds	r4, #1
 800b57e:	9305      	str	r3, [sp, #20]
 800b580:	4619      	mov	r1, r3
 800b582:	f04f 0c0a 	mov.w	ip, #10
 800b586:	4620      	mov	r0, r4
 800b588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b58c:	3a30      	subs	r2, #48	; 0x30
 800b58e:	2a09      	cmp	r2, #9
 800b590:	d903      	bls.n	800b59a <_svfiprintf_r+0x1a6>
 800b592:	2b00      	cmp	r3, #0
 800b594:	d0c6      	beq.n	800b524 <_svfiprintf_r+0x130>
 800b596:	9105      	str	r1, [sp, #20]
 800b598:	e7c4      	b.n	800b524 <_svfiprintf_r+0x130>
 800b59a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b59e:	4604      	mov	r4, r0
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e7f0      	b.n	800b586 <_svfiprintf_r+0x192>
 800b5a4:	ab03      	add	r3, sp, #12
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	462a      	mov	r2, r5
 800b5aa:	4b0f      	ldr	r3, [pc, #60]	; (800b5e8 <_svfiprintf_r+0x1f4>)
 800b5ac:	a904      	add	r1, sp, #16
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	f3af 8000 	nop.w
 800b5b4:	1c42      	adds	r2, r0, #1
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	d1d6      	bne.n	800b568 <_svfiprintf_r+0x174>
 800b5ba:	89ab      	ldrh	r3, [r5, #12]
 800b5bc:	065b      	lsls	r3, r3, #25
 800b5be:	f53f af2d 	bmi.w	800b41c <_svfiprintf_r+0x28>
 800b5c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5c4:	b01d      	add	sp, #116	; 0x74
 800b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ca:	ab03      	add	r3, sp, #12
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	462a      	mov	r2, r5
 800b5d0:	4b05      	ldr	r3, [pc, #20]	; (800b5e8 <_svfiprintf_r+0x1f4>)
 800b5d2:	a904      	add	r1, sp, #16
 800b5d4:	4638      	mov	r0, r7
 800b5d6:	f000 f879 	bl	800b6cc <_printf_i>
 800b5da:	e7eb      	b.n	800b5b4 <_svfiprintf_r+0x1c0>
 800b5dc:	0800ba44 	.word	0x0800ba44
 800b5e0:	0800ba4e 	.word	0x0800ba4e
 800b5e4:	00000000 	.word	0x00000000
 800b5e8:	0800b341 	.word	0x0800b341
 800b5ec:	0800ba4a 	.word	0x0800ba4a

0800b5f0 <_printf_common>:
 800b5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f4:	4616      	mov	r6, r2
 800b5f6:	4699      	mov	r9, r3
 800b5f8:	688a      	ldr	r2, [r1, #8]
 800b5fa:	690b      	ldr	r3, [r1, #16]
 800b5fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b600:	4293      	cmp	r3, r2
 800b602:	bfb8      	it	lt
 800b604:	4613      	movlt	r3, r2
 800b606:	6033      	str	r3, [r6, #0]
 800b608:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b60c:	4607      	mov	r7, r0
 800b60e:	460c      	mov	r4, r1
 800b610:	b10a      	cbz	r2, 800b616 <_printf_common+0x26>
 800b612:	3301      	adds	r3, #1
 800b614:	6033      	str	r3, [r6, #0]
 800b616:	6823      	ldr	r3, [r4, #0]
 800b618:	0699      	lsls	r1, r3, #26
 800b61a:	bf42      	ittt	mi
 800b61c:	6833      	ldrmi	r3, [r6, #0]
 800b61e:	3302      	addmi	r3, #2
 800b620:	6033      	strmi	r3, [r6, #0]
 800b622:	6825      	ldr	r5, [r4, #0]
 800b624:	f015 0506 	ands.w	r5, r5, #6
 800b628:	d106      	bne.n	800b638 <_printf_common+0x48>
 800b62a:	f104 0a19 	add.w	sl, r4, #25
 800b62e:	68e3      	ldr	r3, [r4, #12]
 800b630:	6832      	ldr	r2, [r6, #0]
 800b632:	1a9b      	subs	r3, r3, r2
 800b634:	42ab      	cmp	r3, r5
 800b636:	dc26      	bgt.n	800b686 <_printf_common+0x96>
 800b638:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b63c:	1e13      	subs	r3, r2, #0
 800b63e:	6822      	ldr	r2, [r4, #0]
 800b640:	bf18      	it	ne
 800b642:	2301      	movne	r3, #1
 800b644:	0692      	lsls	r2, r2, #26
 800b646:	d42b      	bmi.n	800b6a0 <_printf_common+0xb0>
 800b648:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b64c:	4649      	mov	r1, r9
 800b64e:	4638      	mov	r0, r7
 800b650:	47c0      	blx	r8
 800b652:	3001      	adds	r0, #1
 800b654:	d01e      	beq.n	800b694 <_printf_common+0xa4>
 800b656:	6823      	ldr	r3, [r4, #0]
 800b658:	6922      	ldr	r2, [r4, #16]
 800b65a:	f003 0306 	and.w	r3, r3, #6
 800b65e:	2b04      	cmp	r3, #4
 800b660:	bf02      	ittt	eq
 800b662:	68e5      	ldreq	r5, [r4, #12]
 800b664:	6833      	ldreq	r3, [r6, #0]
 800b666:	1aed      	subeq	r5, r5, r3
 800b668:	68a3      	ldr	r3, [r4, #8]
 800b66a:	bf0c      	ite	eq
 800b66c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b670:	2500      	movne	r5, #0
 800b672:	4293      	cmp	r3, r2
 800b674:	bfc4      	itt	gt
 800b676:	1a9b      	subgt	r3, r3, r2
 800b678:	18ed      	addgt	r5, r5, r3
 800b67a:	2600      	movs	r6, #0
 800b67c:	341a      	adds	r4, #26
 800b67e:	42b5      	cmp	r5, r6
 800b680:	d11a      	bne.n	800b6b8 <_printf_common+0xc8>
 800b682:	2000      	movs	r0, #0
 800b684:	e008      	b.n	800b698 <_printf_common+0xa8>
 800b686:	2301      	movs	r3, #1
 800b688:	4652      	mov	r2, sl
 800b68a:	4649      	mov	r1, r9
 800b68c:	4638      	mov	r0, r7
 800b68e:	47c0      	blx	r8
 800b690:	3001      	adds	r0, #1
 800b692:	d103      	bne.n	800b69c <_printf_common+0xac>
 800b694:	f04f 30ff 	mov.w	r0, #4294967295
 800b698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b69c:	3501      	adds	r5, #1
 800b69e:	e7c6      	b.n	800b62e <_printf_common+0x3e>
 800b6a0:	18e1      	adds	r1, r4, r3
 800b6a2:	1c5a      	adds	r2, r3, #1
 800b6a4:	2030      	movs	r0, #48	; 0x30
 800b6a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6aa:	4422      	add	r2, r4
 800b6ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6b4:	3302      	adds	r3, #2
 800b6b6:	e7c7      	b.n	800b648 <_printf_common+0x58>
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	4622      	mov	r2, r4
 800b6bc:	4649      	mov	r1, r9
 800b6be:	4638      	mov	r0, r7
 800b6c0:	47c0      	blx	r8
 800b6c2:	3001      	adds	r0, #1
 800b6c4:	d0e6      	beq.n	800b694 <_printf_common+0xa4>
 800b6c6:	3601      	adds	r6, #1
 800b6c8:	e7d9      	b.n	800b67e <_printf_common+0x8e>
	...

0800b6cc <_printf_i>:
 800b6cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d0:	7e0f      	ldrb	r7, [r1, #24]
 800b6d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b6d4:	2f78      	cmp	r7, #120	; 0x78
 800b6d6:	4691      	mov	r9, r2
 800b6d8:	4680      	mov	r8, r0
 800b6da:	460c      	mov	r4, r1
 800b6dc:	469a      	mov	sl, r3
 800b6de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b6e2:	d807      	bhi.n	800b6f4 <_printf_i+0x28>
 800b6e4:	2f62      	cmp	r7, #98	; 0x62
 800b6e6:	d80a      	bhi.n	800b6fe <_printf_i+0x32>
 800b6e8:	2f00      	cmp	r7, #0
 800b6ea:	f000 80d4 	beq.w	800b896 <_printf_i+0x1ca>
 800b6ee:	2f58      	cmp	r7, #88	; 0x58
 800b6f0:	f000 80c0 	beq.w	800b874 <_printf_i+0x1a8>
 800b6f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6fc:	e03a      	b.n	800b774 <_printf_i+0xa8>
 800b6fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b702:	2b15      	cmp	r3, #21
 800b704:	d8f6      	bhi.n	800b6f4 <_printf_i+0x28>
 800b706:	a101      	add	r1, pc, #4	; (adr r1, 800b70c <_printf_i+0x40>)
 800b708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b70c:	0800b765 	.word	0x0800b765
 800b710:	0800b779 	.word	0x0800b779
 800b714:	0800b6f5 	.word	0x0800b6f5
 800b718:	0800b6f5 	.word	0x0800b6f5
 800b71c:	0800b6f5 	.word	0x0800b6f5
 800b720:	0800b6f5 	.word	0x0800b6f5
 800b724:	0800b779 	.word	0x0800b779
 800b728:	0800b6f5 	.word	0x0800b6f5
 800b72c:	0800b6f5 	.word	0x0800b6f5
 800b730:	0800b6f5 	.word	0x0800b6f5
 800b734:	0800b6f5 	.word	0x0800b6f5
 800b738:	0800b87d 	.word	0x0800b87d
 800b73c:	0800b7a5 	.word	0x0800b7a5
 800b740:	0800b837 	.word	0x0800b837
 800b744:	0800b6f5 	.word	0x0800b6f5
 800b748:	0800b6f5 	.word	0x0800b6f5
 800b74c:	0800b89f 	.word	0x0800b89f
 800b750:	0800b6f5 	.word	0x0800b6f5
 800b754:	0800b7a5 	.word	0x0800b7a5
 800b758:	0800b6f5 	.word	0x0800b6f5
 800b75c:	0800b6f5 	.word	0x0800b6f5
 800b760:	0800b83f 	.word	0x0800b83f
 800b764:	682b      	ldr	r3, [r5, #0]
 800b766:	1d1a      	adds	r2, r3, #4
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	602a      	str	r2, [r5, #0]
 800b76c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b774:	2301      	movs	r3, #1
 800b776:	e09f      	b.n	800b8b8 <_printf_i+0x1ec>
 800b778:	6820      	ldr	r0, [r4, #0]
 800b77a:	682b      	ldr	r3, [r5, #0]
 800b77c:	0607      	lsls	r7, r0, #24
 800b77e:	f103 0104 	add.w	r1, r3, #4
 800b782:	6029      	str	r1, [r5, #0]
 800b784:	d501      	bpl.n	800b78a <_printf_i+0xbe>
 800b786:	681e      	ldr	r6, [r3, #0]
 800b788:	e003      	b.n	800b792 <_printf_i+0xc6>
 800b78a:	0646      	lsls	r6, r0, #25
 800b78c:	d5fb      	bpl.n	800b786 <_printf_i+0xba>
 800b78e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b792:	2e00      	cmp	r6, #0
 800b794:	da03      	bge.n	800b79e <_printf_i+0xd2>
 800b796:	232d      	movs	r3, #45	; 0x2d
 800b798:	4276      	negs	r6, r6
 800b79a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b79e:	485a      	ldr	r0, [pc, #360]	; (800b908 <_printf_i+0x23c>)
 800b7a0:	230a      	movs	r3, #10
 800b7a2:	e012      	b.n	800b7ca <_printf_i+0xfe>
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	6820      	ldr	r0, [r4, #0]
 800b7a8:	1d19      	adds	r1, r3, #4
 800b7aa:	6029      	str	r1, [r5, #0]
 800b7ac:	0605      	lsls	r5, r0, #24
 800b7ae:	d501      	bpl.n	800b7b4 <_printf_i+0xe8>
 800b7b0:	681e      	ldr	r6, [r3, #0]
 800b7b2:	e002      	b.n	800b7ba <_printf_i+0xee>
 800b7b4:	0641      	lsls	r1, r0, #25
 800b7b6:	d5fb      	bpl.n	800b7b0 <_printf_i+0xe4>
 800b7b8:	881e      	ldrh	r6, [r3, #0]
 800b7ba:	4853      	ldr	r0, [pc, #332]	; (800b908 <_printf_i+0x23c>)
 800b7bc:	2f6f      	cmp	r7, #111	; 0x6f
 800b7be:	bf0c      	ite	eq
 800b7c0:	2308      	moveq	r3, #8
 800b7c2:	230a      	movne	r3, #10
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7ca:	6865      	ldr	r5, [r4, #4]
 800b7cc:	60a5      	str	r5, [r4, #8]
 800b7ce:	2d00      	cmp	r5, #0
 800b7d0:	bfa2      	ittt	ge
 800b7d2:	6821      	ldrge	r1, [r4, #0]
 800b7d4:	f021 0104 	bicge.w	r1, r1, #4
 800b7d8:	6021      	strge	r1, [r4, #0]
 800b7da:	b90e      	cbnz	r6, 800b7e0 <_printf_i+0x114>
 800b7dc:	2d00      	cmp	r5, #0
 800b7de:	d04b      	beq.n	800b878 <_printf_i+0x1ac>
 800b7e0:	4615      	mov	r5, r2
 800b7e2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b7e6:	fb03 6711 	mls	r7, r3, r1, r6
 800b7ea:	5dc7      	ldrb	r7, [r0, r7]
 800b7ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7f0:	4637      	mov	r7, r6
 800b7f2:	42bb      	cmp	r3, r7
 800b7f4:	460e      	mov	r6, r1
 800b7f6:	d9f4      	bls.n	800b7e2 <_printf_i+0x116>
 800b7f8:	2b08      	cmp	r3, #8
 800b7fa:	d10b      	bne.n	800b814 <_printf_i+0x148>
 800b7fc:	6823      	ldr	r3, [r4, #0]
 800b7fe:	07de      	lsls	r6, r3, #31
 800b800:	d508      	bpl.n	800b814 <_printf_i+0x148>
 800b802:	6923      	ldr	r3, [r4, #16]
 800b804:	6861      	ldr	r1, [r4, #4]
 800b806:	4299      	cmp	r1, r3
 800b808:	bfde      	ittt	le
 800b80a:	2330      	movle	r3, #48	; 0x30
 800b80c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b810:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b814:	1b52      	subs	r2, r2, r5
 800b816:	6122      	str	r2, [r4, #16]
 800b818:	f8cd a000 	str.w	sl, [sp]
 800b81c:	464b      	mov	r3, r9
 800b81e:	aa03      	add	r2, sp, #12
 800b820:	4621      	mov	r1, r4
 800b822:	4640      	mov	r0, r8
 800b824:	f7ff fee4 	bl	800b5f0 <_printf_common>
 800b828:	3001      	adds	r0, #1
 800b82a:	d14a      	bne.n	800b8c2 <_printf_i+0x1f6>
 800b82c:	f04f 30ff 	mov.w	r0, #4294967295
 800b830:	b004      	add	sp, #16
 800b832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b836:	6823      	ldr	r3, [r4, #0]
 800b838:	f043 0320 	orr.w	r3, r3, #32
 800b83c:	6023      	str	r3, [r4, #0]
 800b83e:	4833      	ldr	r0, [pc, #204]	; (800b90c <_printf_i+0x240>)
 800b840:	2778      	movs	r7, #120	; 0x78
 800b842:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b846:	6823      	ldr	r3, [r4, #0]
 800b848:	6829      	ldr	r1, [r5, #0]
 800b84a:	061f      	lsls	r7, r3, #24
 800b84c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b850:	d402      	bmi.n	800b858 <_printf_i+0x18c>
 800b852:	065f      	lsls	r7, r3, #25
 800b854:	bf48      	it	mi
 800b856:	b2b6      	uxthmi	r6, r6
 800b858:	07df      	lsls	r7, r3, #31
 800b85a:	bf48      	it	mi
 800b85c:	f043 0320 	orrmi.w	r3, r3, #32
 800b860:	6029      	str	r1, [r5, #0]
 800b862:	bf48      	it	mi
 800b864:	6023      	strmi	r3, [r4, #0]
 800b866:	b91e      	cbnz	r6, 800b870 <_printf_i+0x1a4>
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	f023 0320 	bic.w	r3, r3, #32
 800b86e:	6023      	str	r3, [r4, #0]
 800b870:	2310      	movs	r3, #16
 800b872:	e7a7      	b.n	800b7c4 <_printf_i+0xf8>
 800b874:	4824      	ldr	r0, [pc, #144]	; (800b908 <_printf_i+0x23c>)
 800b876:	e7e4      	b.n	800b842 <_printf_i+0x176>
 800b878:	4615      	mov	r5, r2
 800b87a:	e7bd      	b.n	800b7f8 <_printf_i+0x12c>
 800b87c:	682b      	ldr	r3, [r5, #0]
 800b87e:	6826      	ldr	r6, [r4, #0]
 800b880:	6961      	ldr	r1, [r4, #20]
 800b882:	1d18      	adds	r0, r3, #4
 800b884:	6028      	str	r0, [r5, #0]
 800b886:	0635      	lsls	r5, r6, #24
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	d501      	bpl.n	800b890 <_printf_i+0x1c4>
 800b88c:	6019      	str	r1, [r3, #0]
 800b88e:	e002      	b.n	800b896 <_printf_i+0x1ca>
 800b890:	0670      	lsls	r0, r6, #25
 800b892:	d5fb      	bpl.n	800b88c <_printf_i+0x1c0>
 800b894:	8019      	strh	r1, [r3, #0]
 800b896:	2300      	movs	r3, #0
 800b898:	6123      	str	r3, [r4, #16]
 800b89a:	4615      	mov	r5, r2
 800b89c:	e7bc      	b.n	800b818 <_printf_i+0x14c>
 800b89e:	682b      	ldr	r3, [r5, #0]
 800b8a0:	1d1a      	adds	r2, r3, #4
 800b8a2:	602a      	str	r2, [r5, #0]
 800b8a4:	681d      	ldr	r5, [r3, #0]
 800b8a6:	6862      	ldr	r2, [r4, #4]
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	f7f4 fd28 	bl	8000300 <memchr>
 800b8b0:	b108      	cbz	r0, 800b8b6 <_printf_i+0x1ea>
 800b8b2:	1b40      	subs	r0, r0, r5
 800b8b4:	6060      	str	r0, [r4, #4]
 800b8b6:	6863      	ldr	r3, [r4, #4]
 800b8b8:	6123      	str	r3, [r4, #16]
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8c0:	e7aa      	b.n	800b818 <_printf_i+0x14c>
 800b8c2:	6923      	ldr	r3, [r4, #16]
 800b8c4:	462a      	mov	r2, r5
 800b8c6:	4649      	mov	r1, r9
 800b8c8:	4640      	mov	r0, r8
 800b8ca:	47d0      	blx	sl
 800b8cc:	3001      	adds	r0, #1
 800b8ce:	d0ad      	beq.n	800b82c <_printf_i+0x160>
 800b8d0:	6823      	ldr	r3, [r4, #0]
 800b8d2:	079b      	lsls	r3, r3, #30
 800b8d4:	d413      	bmi.n	800b8fe <_printf_i+0x232>
 800b8d6:	68e0      	ldr	r0, [r4, #12]
 800b8d8:	9b03      	ldr	r3, [sp, #12]
 800b8da:	4298      	cmp	r0, r3
 800b8dc:	bfb8      	it	lt
 800b8de:	4618      	movlt	r0, r3
 800b8e0:	e7a6      	b.n	800b830 <_printf_i+0x164>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	4632      	mov	r2, r6
 800b8e6:	4649      	mov	r1, r9
 800b8e8:	4640      	mov	r0, r8
 800b8ea:	47d0      	blx	sl
 800b8ec:	3001      	adds	r0, #1
 800b8ee:	d09d      	beq.n	800b82c <_printf_i+0x160>
 800b8f0:	3501      	adds	r5, #1
 800b8f2:	68e3      	ldr	r3, [r4, #12]
 800b8f4:	9903      	ldr	r1, [sp, #12]
 800b8f6:	1a5b      	subs	r3, r3, r1
 800b8f8:	42ab      	cmp	r3, r5
 800b8fa:	dcf2      	bgt.n	800b8e2 <_printf_i+0x216>
 800b8fc:	e7eb      	b.n	800b8d6 <_printf_i+0x20a>
 800b8fe:	2500      	movs	r5, #0
 800b900:	f104 0619 	add.w	r6, r4, #25
 800b904:	e7f5      	b.n	800b8f2 <_printf_i+0x226>
 800b906:	bf00      	nop
 800b908:	0800ba55 	.word	0x0800ba55
 800b90c:	0800ba66 	.word	0x0800ba66

0800b910 <memmove>:
 800b910:	4288      	cmp	r0, r1
 800b912:	b510      	push	{r4, lr}
 800b914:	eb01 0402 	add.w	r4, r1, r2
 800b918:	d902      	bls.n	800b920 <memmove+0x10>
 800b91a:	4284      	cmp	r4, r0
 800b91c:	4623      	mov	r3, r4
 800b91e:	d807      	bhi.n	800b930 <memmove+0x20>
 800b920:	1e43      	subs	r3, r0, #1
 800b922:	42a1      	cmp	r1, r4
 800b924:	d008      	beq.n	800b938 <memmove+0x28>
 800b926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b92a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b92e:	e7f8      	b.n	800b922 <memmove+0x12>
 800b930:	4402      	add	r2, r0
 800b932:	4601      	mov	r1, r0
 800b934:	428a      	cmp	r2, r1
 800b936:	d100      	bne.n	800b93a <memmove+0x2a>
 800b938:	bd10      	pop	{r4, pc}
 800b93a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b93e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b942:	e7f7      	b.n	800b934 <memmove+0x24>

0800b944 <_sbrk_r>:
 800b944:	b538      	push	{r3, r4, r5, lr}
 800b946:	4d06      	ldr	r5, [pc, #24]	; (800b960 <_sbrk_r+0x1c>)
 800b948:	2300      	movs	r3, #0
 800b94a:	4604      	mov	r4, r0
 800b94c:	4608      	mov	r0, r1
 800b94e:	602b      	str	r3, [r5, #0]
 800b950:	f7f6 f996 	bl	8001c80 <_sbrk>
 800b954:	1c43      	adds	r3, r0, #1
 800b956:	d102      	bne.n	800b95e <_sbrk_r+0x1a>
 800b958:	682b      	ldr	r3, [r5, #0]
 800b95a:	b103      	cbz	r3, 800b95e <_sbrk_r+0x1a>
 800b95c:	6023      	str	r3, [r4, #0]
 800b95e:	bd38      	pop	{r3, r4, r5, pc}
 800b960:	2401d918 	.word	0x2401d918

0800b964 <memcpy>:
 800b964:	440a      	add	r2, r1
 800b966:	4291      	cmp	r1, r2
 800b968:	f100 33ff 	add.w	r3, r0, #4294967295
 800b96c:	d100      	bne.n	800b970 <memcpy+0xc>
 800b96e:	4770      	bx	lr
 800b970:	b510      	push	{r4, lr}
 800b972:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b97a:	4291      	cmp	r1, r2
 800b97c:	d1f9      	bne.n	800b972 <memcpy+0xe>
 800b97e:	bd10      	pop	{r4, pc}

0800b980 <_realloc_r>:
 800b980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b984:	4680      	mov	r8, r0
 800b986:	4614      	mov	r4, r2
 800b988:	460e      	mov	r6, r1
 800b98a:	b921      	cbnz	r1, 800b996 <_realloc_r+0x16>
 800b98c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b990:	4611      	mov	r1, r2
 800b992:	f7ff bc49 	b.w	800b228 <_malloc_r>
 800b996:	b92a      	cbnz	r2, 800b9a4 <_realloc_r+0x24>
 800b998:	f7ff fbda 	bl	800b150 <_free_r>
 800b99c:	4625      	mov	r5, r4
 800b99e:	4628      	mov	r0, r5
 800b9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9a4:	f000 f81b 	bl	800b9de <_malloc_usable_size_r>
 800b9a8:	4284      	cmp	r4, r0
 800b9aa:	4607      	mov	r7, r0
 800b9ac:	d802      	bhi.n	800b9b4 <_realloc_r+0x34>
 800b9ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9b2:	d812      	bhi.n	800b9da <_realloc_r+0x5a>
 800b9b4:	4621      	mov	r1, r4
 800b9b6:	4640      	mov	r0, r8
 800b9b8:	f7ff fc36 	bl	800b228 <_malloc_r>
 800b9bc:	4605      	mov	r5, r0
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d0ed      	beq.n	800b99e <_realloc_r+0x1e>
 800b9c2:	42bc      	cmp	r4, r7
 800b9c4:	4622      	mov	r2, r4
 800b9c6:	4631      	mov	r1, r6
 800b9c8:	bf28      	it	cs
 800b9ca:	463a      	movcs	r2, r7
 800b9cc:	f7ff ffca 	bl	800b964 <memcpy>
 800b9d0:	4631      	mov	r1, r6
 800b9d2:	4640      	mov	r0, r8
 800b9d4:	f7ff fbbc 	bl	800b150 <_free_r>
 800b9d8:	e7e1      	b.n	800b99e <_realloc_r+0x1e>
 800b9da:	4635      	mov	r5, r6
 800b9dc:	e7df      	b.n	800b99e <_realloc_r+0x1e>

0800b9de <_malloc_usable_size_r>:
 800b9de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9e2:	1f18      	subs	r0, r3, #4
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	bfbc      	itt	lt
 800b9e8:	580b      	ldrlt	r3, [r1, r0]
 800b9ea:	18c0      	addlt	r0, r0, r3
 800b9ec:	4770      	bx	lr
	...

0800b9f0 <_init>:
 800b9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f2:	bf00      	nop
 800b9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9f6:	bc08      	pop	{r3}
 800b9f8:	469e      	mov	lr, r3
 800b9fa:	4770      	bx	lr

0800b9fc <_fini>:
 800b9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fe:	bf00      	nop
 800ba00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba02:	bc08      	pop	{r3}
 800ba04:	469e      	mov	lr, r3
 800ba06:	4770      	bx	lr
