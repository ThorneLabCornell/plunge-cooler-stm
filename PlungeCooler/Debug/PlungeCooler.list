
PlungeCooler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e28c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  0800e540  0800e540  0001e540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e924  0800e924  0001e924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e92c  0800e92c  0001e92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e930  0800e930  0001e930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800e934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00061e4c  240001e0  0800eb14  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2406202c  0800eb14  0002202c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001f12d  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003538  00000000  00000000  0003f37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000018c0  00000000  00000000  000428b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000136c  00000000  00000000  00044178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003400d  00000000  00000000  000454e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002127a  00000000  00000000  000794f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00156d07  00000000  00000000  0009a76b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007b88  00000000  00000000  001f1474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001f8ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001e0 	.word	0x240001e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800e524 	.word	0x0800e524

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e4 	.word	0x240001e4
 80002ec:	0800e524 	.word	0x0800e524

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <getCurrentTRH>:
#define SHT40_ADDRESS (0x44 << 1)
#include <stdint.h>
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart3;

float getCurrentTRH(){
 800069c:	b580      	push	{r7, lr}
 800069e:	b08c      	sub	sp, #48	; 0x30
 80006a0:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint8_t data_tx[1] = {0xFD};
 80006a2:	23fd      	movs	r3, #253	; 0xfd
 80006a4:	733b      	strb	r3, [r7, #12]
	uint8_t data_rx[6];
	ret = HAL_I2C_Master_Transmit(&hi2c1, SHT40_ADDRESS, data_tx, 1, 1000);
 80006a6:	f107 020c 	add.w	r2, r7, #12
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2301      	movs	r3, #1
 80006b2:	2188      	movs	r1, #136	; 0x88
 80006b4:	4839      	ldr	r0, [pc, #228]	; (800079c <getCurrentTRH+0x100>)
 80006b6:	f003 fd65 	bl	8004184 <HAL_I2C_Master_Transmit>
 80006ba:	4603      	mov	r3, r0
 80006bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if ( ret != HAL_OK ) {
 80006c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d003      	beq.n	80006d0 <getCurrentTRH+0x34>
	  printf("Error Tx\r\n");
 80006c8:	4835      	ldr	r0, [pc, #212]	; (80007a0 <getCurrentTRH+0x104>)
 80006ca:	f00b fe4b 	bl	800c364 <puts>
 80006ce:	e060      	b.n	8000792 <getCurrentTRH+0xf6>
	}
	else{
		//read bytes
		 HAL_Delay(10);
 80006d0:	200a      	movs	r0, #10
 80006d2:	f001 fa97 	bl	8001c04 <HAL_Delay>
		 ret =  HAL_I2C_Master_Receive(&hi2c1, SHT40_ADDRESS, (uint8_t*)&data_rx, 6,1000);
 80006d6:	1d3a      	adds	r2, r7, #4
 80006d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2306      	movs	r3, #6
 80006e0:	2188      	movs	r1, #136	; 0x88
 80006e2:	482e      	ldr	r0, [pc, #184]	; (800079c <getCurrentTRH+0x100>)
 80006e4:	f003 fe42 	bl	800436c <HAL_I2C_Master_Receive>
 80006e8:	4603      	mov	r3, r0
 80006ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		 if ( ret != HAL_OK ) {
 80006ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d003      	beq.n	80006fe <getCurrentTRH+0x62>
			 printf("Error Rx\r\n");
 80006f6:	482b      	ldr	r0, [pc, #172]	; (80007a4 <getCurrentTRH+0x108>)
 80006f8:	f00b fe34 	bl	800c364 <puts>
 80006fc:	e049      	b.n	8000792 <getCurrentTRH+0xf6>
		 }
		 else{
			 for(int i = 0; i < 6 ; i++){
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
 8000702:	e00b      	b.n	800071c <getCurrentTRH+0x80>
				 printf("data_rx[%i] = %u \n",i,data_rx[i]);
 8000704:	1d3a      	adds	r2, r7, #4
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000710:	4825      	ldr	r0, [pc, #148]	; (80007a8 <getCurrentTRH+0x10c>)
 8000712:	f00b fdc1 	bl	800c298 <iprintf>
			 for(int i = 0; i < 6 ; i++){
 8000716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000718:	3301      	adds	r3, #1
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	2b05      	cmp	r3, #5
 8000720:	ddf0      	ble.n	8000704 <getCurrentTRH+0x68>
			 }
			 float t_ticks = data_rx[0] * 256 + data_rx[1];
 8000722:	793b      	ldrb	r3, [r7, #4]
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	797a      	ldrb	r2, [r7, #5]
 8000728:	4413      	add	r3, r2
 800072a:	ee07 3a90 	vmov	s15, r3
 800072e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000732:	edc7 7a07 	vstr	s15, [r7, #28]
			 float rh_ticks = data_rx[3] * 256 + data_rx[4];
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	021b      	lsls	r3, r3, #8
 800073a:	7a3a      	ldrb	r2, [r7, #8]
 800073c:	4413      	add	r3, r2
 800073e:	ee07 3a90 	vmov	s15, r3
 8000742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000746:	edc7 7a06 	vstr	s15, [r7, #24]

			 float t_degC = -45 + 175 * t_ticks/65535;
 800074a:	edd7 7a07 	vldr	s15, [r7, #28]
 800074e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80007ac <getCurrentTRH+0x110>
 8000752:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000756:	eddf 6a16 	vldr	s13, [pc, #88]	; 80007b0 <getCurrentTRH+0x114>
 800075a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800075e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80007b4 <getCurrentTRH+0x118>
 8000762:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000766:	edc7 7a05 	vstr	s15, [r7, #20]
			 float rh_pRH = -6 + 125 * rh_ticks/65535;
 800076a:	edd7 7a06 	vldr	s15, [r7, #24]
 800076e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80007b8 <getCurrentTRH+0x11c>
 8000772:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000776:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80007b0 <getCurrentTRH+0x114>
 800077a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800077e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000782:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000786:	edc7 7a04 	vstr	s15, [r7, #16]

			 return t_degC;
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	ee07 3a90 	vmov	s15, r3
 8000790:	e7ff      	b.n	8000792 <getCurrentTRH+0xf6>
		 }
	}
}
 8000792:	eeb0 0a67 	vmov.f32	s0, s15
 8000796:	3728      	adds	r7, #40	; 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	24000260 	.word	0x24000260
 80007a0:	0800e540 	.word	0x0800e540
 80007a4:	0800e54c 	.word	0x0800e54c
 80007a8:	0800e558 	.word	0x0800e558
 80007ac:	432f0000 	.word	0x432f0000
 80007b0:	477fff00 	.word	0x477fff00
 80007b4:	42340000 	.word	0x42340000
 80007b8:	42fa0000 	.word	0x42fa0000

080007bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	db0b      	blt.n	80007e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	f003 021f 	and.w	r2, r3, #31
 80007d4:	4907      	ldr	r1, [pc, #28]	; (80007f4 <__NVIC_EnableIRQ+0x38>)
 80007d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007da:	095b      	lsrs	r3, r3, #5
 80007dc:	2001      	movs	r0, #1
 80007de:	fa00 f202 	lsl.w	r2, r0, r2
 80007e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000e100 	.word	0xe000e100

080007f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000808:	2b00      	cmp	r3, #0
 800080a:	db0a      	blt.n	8000822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	490c      	ldr	r1, [pc, #48]	; (8000844 <__NVIC_SetPriority+0x4c>)
 8000812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000816:	0112      	lsls	r2, r2, #4
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	440b      	add	r3, r1
 800081c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000820:	e00a      	b.n	8000838 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4908      	ldr	r1, [pc, #32]	; (8000848 <__NVIC_SetPriority+0x50>)
 8000828:	88fb      	ldrh	r3, [r7, #6]
 800082a:	f003 030f 	and.w	r3, r3, #15
 800082e:	3b04      	subs	r3, #4
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	440b      	add	r3, r1
 8000836:	761a      	strb	r2, [r3, #24]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000e100 	.word	0xe000e100
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <HAL_UART_RxCpltCallback>:
void bad(void) {
	HAL_UART_Transmit(&huart3, tx_bad, 3, HAL_MAX_DELAY);
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
    rxBuffer[rxIndex] = received_character[0];
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_UART_RxCpltCallback+0x54>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_UART_RxCpltCallback+0x58>)
 800085c:	7819      	ldrb	r1, [r3, #0]
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_UART_RxCpltCallback+0x5c>)
 8000860:	5499      	strb	r1, [r3, r2]
	rxIndex++;
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_UART_RxCpltCallback+0x54>)
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	3301      	adds	r3, #1
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_UART_RxCpltCallback+0x54>)
 800086c:	801a      	strh	r2, [r3, #0]

	if (received_character[0] == '\n' || received_character[0] == '\r') { //ie end of message, stop receiving. 
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <HAL_UART_RxCpltCallback+0x58>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b0a      	cmp	r3, #10
 8000874:	d003      	beq.n	800087e <HAL_UART_RxCpltCallback+0x32>
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_UART_RxCpltCallback+0x58>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b0d      	cmp	r3, #13
 800087c:	d105      	bne.n	800088a <HAL_UART_RxCpltCallback+0x3e>
    	rxIndex = 0;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_UART_RxCpltCallback+0x54>)
 8000880:	2200      	movs	r2, #0
 8000882:	801a      	strh	r2, [r3, #0]
    	rx_handle();
 8000884:	f000 f814 	bl	80008b0 <rx_handle>
 8000888:	e005      	b.n	8000896 <HAL_UART_RxCpltCallback+0x4a>
    } else {
        HAL_UART_Receive_IT(&huart3, received_character, 1);
 800088a:	2201      	movs	r2, #1
 800088c:	4905      	ldr	r1, [pc, #20]	; (80008a4 <HAL_UART_RxCpltCallback+0x58>)
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <HAL_UART_RxCpltCallback+0x60>)
 8000890:	f008 fbb8 	bl	8009004 <HAL_UART_Receive_IT>
    }
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	24061ec8 	.word	0x24061ec8
 80008a4:	24061ecc 	.word	0x24061ecc
 80008a8:	24061e64 	.word	0x24061e64
 80008ac:	2400034c 	.word	0x2400034c

080008b0 <rx_handle>:

void rx_handle(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, val);
 80008b6:	4b4b      	ldr	r3, [pc, #300]	; (80009e4 <rx_handle+0x134>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	2102      	movs	r1, #2
 80008be:	484a      	ldr	r0, [pc, #296]	; (80009e8 <rx_handle+0x138>)
 80008c0:	f003 fbb6 	bl	8004030 <HAL_GPIO_WritePin>
	if(val)
 80008c4:	4b47      	ldr	r3, [pc, #284]	; (80009e4 <rx_handle+0x134>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d003      	beq.n	80008d4 <rx_handle+0x24>
		val = 0;
 80008cc:	4b45      	ldr	r3, [pc, #276]	; (80009e4 <rx_handle+0x134>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
 80008d2:	e002      	b.n	80008da <rx_handle+0x2a>
	else
		val = 1;
 80008d4:	4b43      	ldr	r3, [pc, #268]	; (80009e4 <rx_handle+0x134>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
	//sprintf(num, "RX0: %d\r\n", rxBuffer[0]);
	//HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);
	switch(rxBuffer[0]) {
 80008da:	4b44      	ldr	r3, [pc, #272]	; (80009ec <rx_handle+0x13c>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	3b32      	subs	r3, #50	; 0x32
 80008e0:	2b03      	cmp	r3, #3
 80008e2:	d875      	bhi.n	80009d0 <rx_handle+0x120>
 80008e4:	a201      	add	r2, pc, #4	; (adr r2, 80008ec <rx_handle+0x3c>)
 80008e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ea:	bf00      	nop
 80008ec:	080008fd 	.word	0x080008fd
 80008f0:	08000987 	.word	0x08000987
 80008f4:	08000943 	.word	0x08000943
 80008f8:	080009cb 	.word	0x080009cb
		case PLUNGE: ;

			/* reset tracking variables */
			log_position = 0;
 80008fc:	4b3c      	ldr	r3, [pc, #240]	; (80009f0 <rx_handle+0x140>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
			memset(posLog, 0, sizeof(posLog));
 8000902:	4a3c      	ldr	r2, [pc, #240]	; (80009f4 <rx_handle+0x144>)
 8000904:	2100      	movs	r1, #0
 8000906:	483c      	ldr	r0, [pc, #240]	; (80009f8 <rx_handle+0x148>)
 8000908:	f00b fe2c 	bl	800c564 <memset>
      memset(thermoLog, 0, sizeof(thermoLog));
 800090c:	4a39      	ldr	r2, [pc, #228]	; (80009f4 <rx_handle+0x144>)
 800090e:	2100      	movs	r1, #0
 8000910:	483a      	ldr	r0, [pc, #232]	; (80009fc <rx_handle+0x14c>)
 8000912:	f00b fe27 	bl	800c564 <memset>

			TIM2->CR1  |=  TIM_CR1_CEN; 	//start counter for encoder 
 8000916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6013      	str	r3, [r2, #0]

			TIM5->CR1  |= TIM_CR1_CEN; // Start TIM5 to commence data collection
 8000926:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <rx_handle+0x150>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a35      	ldr	r2, [pc, #212]	; (8000a00 <rx_handle+0x150>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6013      	str	r3, [r2, #0]

      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	2203      	movs	r2, #3
 8000938:	4932      	ldr	r1, [pc, #200]	; (8000a04 <rx_handle+0x154>)
 800093a:	4833      	ldr	r0, [pc, #204]	; (8000a08 <rx_handle+0x158>)
 800093c:	f008 fad4 	bl	8008ee8 <HAL_UART_Transmit>

			break;
 8000940:	e046      	b.n	80009d0 <rx_handle+0x120>
      /*
      HAL_ADC_Start(&hadc1);
      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
      nudge_temp = HAL_ADC_GetValue(&hadc1);
      */
      float sensorRead = getCurrentTRH();
 8000942:	f7ff feab 	bl	800069c <getCurrentTRH>
 8000946:	ed87 0a03 	vstr	s0, [r7, #12]
      char msg[10];
      sprintf(msg, "%.2f\n", sensorRead);
 800094a:	edd7 7a03 	vldr	s15, [r7, #12]
 800094e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000952:	4638      	mov	r0, r7
 8000954:	ec53 2b17 	vmov	r2, r3, d7
 8000958:	492c      	ldr	r1, [pc, #176]	; (8000a0c <rx_handle+0x15c>)
 800095a:	f00b fd0b 	bl	800c374 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800095e:	463b      	mov	r3, r7
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fd15 	bl	8000390 <strlen>
 8000966:	4603      	mov	r3, r0
 8000968:	b29a      	uxth	r2, r3
 800096a:	4639      	mov	r1, r7
 800096c:	f04f 33ff 	mov.w	r3, #4294967295
 8000970:	4825      	ldr	r0, [pc, #148]	; (8000a08 <rx_handle+0x158>)
 8000972:	f008 fab9 	bl	8008ee8 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	2203      	movs	r2, #3
 800097c:	4921      	ldr	r1, [pc, #132]	; (8000a04 <rx_handle+0x154>)
 800097e:	4822      	ldr	r0, [pc, #136]	; (8000a08 <rx_handle+0x158>)
 8000980:	f008 fab2 	bl	8008ee8 <HAL_UART_Transmit>

      break;
 8000984:	e024      	b.n	80009d0 <rx_handle+0x120>

    case END: ;
	  TIM5->CR1  |= TIM_CR1_UDIS;	// make sure update is disabled
 8000986:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <rx_handle+0x150>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a1d      	ldr	r2, [pc, #116]	; (8000a00 <rx_handle+0x150>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6013      	str	r3, [r2, #0]
	  TIM5->DIER &=  ~TIM_DIER_UIE; 	// update interrupt disabled
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <rx_handle+0x150>)
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	4a1a      	ldr	r2, [pc, #104]	; (8000a00 <rx_handle+0x150>)
 8000998:	f023 0301 	bic.w	r3, r3, #1
 800099c:	60d3      	str	r3, [r2, #12]
	  TIM2->CR1 &= ~TIM_CR1_CEN;		// disable tim2
 800099e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009a8:	f023 0301 	bic.w	r3, r3, #1
 80009ac:	6013      	str	r3, [r2, #0]
	  TIM5->CR1  &= ~TIM_CR1_CEN; 	// disable tim5
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <rx_handle+0x150>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a13      	ldr	r2, [pc, #76]	; (8000a00 <rx_handle+0x150>)
 80009b4:	f023 0301 	bic.w	r3, r3, #1
 80009b8:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	2203      	movs	r2, #3
 80009c0:	4910      	ldr	r1, [pc, #64]	; (8000a04 <rx_handle+0x154>)
 80009c2:	4811      	ldr	r0, [pc, #68]	; (8000a08 <rx_handle+0x158>)
 80009c4:	f008 fa90 	bl	8008ee8 <HAL_UART_Transmit>
	  break;
 80009c8:	e002      	b.n	80009d0 <rx_handle+0x120>

    case SEND: ;
    	plunge_done_flag = 1;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <rx_handle+0x160>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	701a      	strb	r2, [r3, #0]


//	char b[] = "done handling\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

    HAL_UART_Receive_IT(&huart3, received_character, 1);
 80009d0:	2201      	movs	r2, #1
 80009d2:	4910      	ldr	r1, [pc, #64]	; (8000a14 <rx_handle+0x164>)
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <rx_handle+0x158>)
 80009d6:	f008 fb15 	bl	8009004 <HAL_UART_Receive_IT>
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	24000000 	.word	0x24000000
 80009e8:	58021000 	.word	0x58021000
 80009ec:	24061e64 	.word	0x24061e64
 80009f0:	24061e60 	.word	0x24061e60
 80009f4:	00030d40 	.word	0x00030d40
 80009f8:	240003e0 	.word	0x240003e0
 80009fc:	24031120 	.word	0x24031120
 8000a00:	40000c00 	.word	0x40000c00
 8000a04:	24000004 	.word	0x24000004
 8000a08:	2400034c 	.word	0x2400034c
 8000a0c:	0800e56c 	.word	0x0800e56c
 8000a10:	24061ecd 	.word	0x24061ecd
 8000a14:	24061ecc 	.word	0x24061ecc

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1e:	f001 f85f 	bl	8001ae0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a22:	f000 f937 	bl	8000c94 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a26:	f000 fb71 	bl	800110c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a2a:	f000 fa61 	bl	8000ef0 <MX_TIM2_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a2e:	f000 fb65 	bl	80010fc <MX_USB_OTG_HS_USB_Init>
  MX_USART3_UART_Init();
 8000a32:	f000 fb17 	bl	8001064 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000a36:	f000 fac7 	bl	8000fc8 <MX_TIM5_Init>
  MX_ADC1_Init();
 8000a3a:	f000 f9a1 	bl	8000d80 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000a3e:	f000 fa17 	bl	8000e70 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* configuring encoder counter */
  TIM2->CR1  &= ~TIM_CR1_CEN;
 8000a42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a4c:	f023 0301 	bic.w	r3, r3, #1
 8000a50:	6013      	str	r3, [r2, #0]

  TIM2->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000a52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a56:	2264      	movs	r2, #100	; 0x64
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->ARR 	= 40000; 		// Counter will not roll over in entire plunge path, will be stopped and reset by usart interupt handler. 
 8000a5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a5e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a68:	691b      	ldr	r3, [r3, #16]
 8000a6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6e:	f023 0301 	bic.w	r3, r3, #1
 8000a72:	6113      	str	r3, [r2, #16]
  TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a7e:	f023 0302 	bic.w	r3, r3, #2
 8000a82:	6013      	str	r3, [r2, #0]
  TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	60d3      	str	r3, [r2, #12]
  TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa2:	6013      	str	r3, [r2, #0]

    /* configuring data logging timer */
  TIM5->CR1  &= ~TIM_CR1_CEN; 
 8000aa4:	4b72      	ldr	r3, [pc, #456]	; (8000c70 <main+0x258>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a71      	ldr	r2, [pc, #452]	; (8000c70 <main+0x258>)
 8000aaa:	f023 0301 	bic.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  TIM5-> CNT  = 100;				//
 8000ab0:	4b6f      	ldr	r3, [pc, #444]	; (8000c70 <main+0x258>)
 8000ab2:	2264      	movs	r2, #100	; 0x64
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 8000ab6:	4b6e      	ldr	r3, [pc, #440]	; (8000c70 <main+0x258>)
 8000ab8:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000abc:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000abe:	4b6c      	ldr	r3, [pc, #432]	; (8000c70 <main+0x258>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a6b      	ldr	r2, [pc, #428]	; (8000c70 <main+0x258>)
 8000ac4:	f023 0302 	bic.w	r3, r3, #2
 8000ac8:	6013      	str	r3, [r2, #0]
  TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000aca:	4b69      	ldr	r3, [pc, #420]	; (8000c70 <main+0x258>)
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	4a68      	ldr	r2, [pc, #416]	; (8000c70 <main+0x258>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	60d3      	str	r3, [r2, #12]
  TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000ad6:	4b66      	ldr	r3, [pc, #408]	; (8000c70 <main+0x258>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a65      	ldr	r2, [pc, #404]	; (8000c70 <main+0x258>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6013      	str	r3, [r2, #0]
  TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000ae2:	4b63      	ldr	r3, [pc, #396]	; (8000c70 <main+0x258>)
 8000ae4:	691b      	ldr	r3, [r3, #16]
 8000ae6:	4a62      	ldr	r2, [pc, #392]	; (8000c70 <main+0x258>)
 8000ae8:	f023 0301 	bic.w	r3, r3, #1
 8000aec:	6113      	str	r3, [r2, #16]


  HAL_UART_Receive_IT(&huart3, received_character, 1); // initialize interrupts
 8000aee:	2201      	movs	r2, #1
 8000af0:	4960      	ldr	r1, [pc, #384]	; (8000c74 <main+0x25c>)
 8000af2:	4861      	ldr	r0, [pc, #388]	; (8000c78 <main+0x260>)
 8000af4:	f008 fa86 	bl	8009004 <HAL_UART_Receive_IT>

//  char msg[] = "program start \r\n";
//  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  // TIM2 for encoder tick counting
  NVIC_SetPriority(TIM2_IRQn, 1); // Braking is priority as long as dispense isnt happening
 8000af8:	2101      	movs	r1, #1
 8000afa:	201c      	movs	r0, #28
 8000afc:	f7ff fe7c 	bl	80007f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000b00:	201c      	movs	r0, #28
 8000b02:	f7ff fe5b 	bl	80007bc <__NVIC_EnableIRQ>

  // TIM5 for logkeeping and speed calculations and TIM4 setup
  NVIC_SetPriority(TIM5_IRQn, 2); // Log keeping should be interruptable
 8000b06:	2102      	movs	r1, #2
 8000b08:	2032      	movs	r0, #50	; 0x32
 8000b0a:	f7ff fe75 	bl	80007f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8000b0e:	2032      	movs	r0, #50	; 0x32
 8000b10:	f7ff fe54 	bl	80007bc <__NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
	  if(plunge_done_flag) {
 8000b14:	4b59      	ldr	r3, [pc, #356]	; (8000c7c <main+0x264>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d0fb      	beq.n	8000b14 <main+0xfc>
		  char msg[10];
		  for(int i=0 ; i<log_position; i++) {
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	e018      	b.n	8000b54 <main+0x13c>
			  sprintf(msg, "%u\n", posLog[i]);
 8000b22:	4a57      	ldr	r2, [pc, #348]	; (8000c80 <main+0x268>)
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	4955      	ldr	r1, [pc, #340]	; (8000c84 <main+0x26c>)
 8000b30:	4618      	mov	r0, r3
 8000b32:	f00b fc1f 	bl	800c374 <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fc29 	bl	8000390 <strlen>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	1d39      	adds	r1, r7, #4
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
 8000b48:	484b      	ldr	r0, [pc, #300]	; (8000c78 <main+0x260>)
 8000b4a:	f008 f9cd 	bl	8008ee8 <HAL_UART_Transmit>
		  for(int i=0 ; i<log_position; i++) {
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	4b4c      	ldr	r3, [pc, #304]	; (8000c88 <main+0x270>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d3e1      	bcc.n	8000b22 <main+0x10a>
		  }
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b62:	2203      	movs	r2, #3
 8000b64:	4949      	ldr	r1, [pc, #292]	; (8000c8c <main+0x274>)
 8000b66:	4844      	ldr	r0, [pc, #272]	; (8000c78 <main+0x260>)
 8000b68:	f008 f9be 	bl	8008ee8 <HAL_UART_Transmit>

      for(int i=0 ; i<log_position; i++) {
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	e018      	b.n	8000ba4 <main+0x18c>
			  sprintf(msg, "%u\n", thermoLog[i]);
 8000b72:	4a47      	ldr	r2, [pc, #284]	; (8000c90 <main+0x278>)
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4941      	ldr	r1, [pc, #260]	; (8000c84 <main+0x26c>)
 8000b80:	4618      	mov	r0, r3
 8000b82:	f00b fbf7 	bl	800c374 <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fc01 	bl	8000390 <strlen>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	1d39      	adds	r1, r7, #4
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295
 8000b98:	4837      	ldr	r0, [pc, #220]	; (8000c78 <main+0x260>)
 8000b9a:	f008 f9a5 	bl	8008ee8 <HAL_UART_Transmit>
      for(int i=0 ; i<log_position; i++) {
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4b38      	ldr	r3, [pc, #224]	; (8000c88 <main+0x270>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d3e1      	bcc.n	8000b72 <main+0x15a>
		  }

      //Prepare timers for the next plunge, do not enable yet 
      TIM2->CR1  &= ~TIM_CR1_CEN;
 8000bae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb8:	f023 0301 	bic.w	r3, r3, #1
 8000bbc:	6013      	str	r3, [r2, #0]

      TIM2->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bc2:	2264      	movs	r2, #100	; 0x64
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
      TIM2->ARR 	= 40000; 		// Counter will not roll over in entire plunge path, will be stopped and reset by usart interupt handler. 
 8000bc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bca:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000bce:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000bd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd4:	691b      	ldr	r3, [r3, #16]
 8000bd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bda:	f023 0301 	bic.w	r3, r3, #1
 8000bde:	6113      	str	r3, [r2, #16]
      TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000be0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bea:	f023 0302 	bic.w	r3, r3, #2
 8000bee:	6013      	str	r3, [r2, #0]
      TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000bf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	60d3      	str	r3, [r2, #12]
      TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000c00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c0e:	6013      	str	r3, [r2, #0]

        /* configuring data logging timer */
      TIM5->CR1  &= ~TIM_CR1_CEN; 
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <main+0x258>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a16      	ldr	r2, [pc, #88]	; (8000c70 <main+0x258>)
 8000c16:	f023 0301 	bic.w	r3, r3, #1
 8000c1a:	6013      	str	r3, [r2, #0]

      TIM5-> CNT  = 100;				
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <main+0x258>)
 8000c1e:	2264      	movs	r2, #100	; 0x64
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
      TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <main+0x258>)
 8000c24:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000c28:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <main+0x258>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <main+0x258>)
 8000c30:	f023 0302 	bic.w	r3, r3, #2
 8000c34:	6013      	str	r3, [r2, #0]
      TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <main+0x258>)
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <main+0x258>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	60d3      	str	r3, [r2, #12]
      TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <main+0x258>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <main+0x258>)
 8000c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c4c:	6013      	str	r3, [r2, #0]
      TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <main+0x258>)
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <main+0x258>)
 8000c54:	f023 0301 	bic.w	r3, r3, #1
 8000c58:	6113      	str	r3, [r2, #16]

      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	2203      	movs	r2, #3
 8000c60:	490a      	ldr	r1, [pc, #40]	; (8000c8c <main+0x274>)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <main+0x260>)
 8000c64:	f008 f940 	bl	8008ee8 <HAL_UART_Transmit>
		  plunge_done_flag = 0;
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <main+0x264>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
	  if(plunge_done_flag) {
 8000c6e:	e751      	b.n	8000b14 <main+0xfc>
 8000c70:	40000c00 	.word	0x40000c00
 8000c74:	24061ecc 	.word	0x24061ecc
 8000c78:	2400034c 	.word	0x2400034c
 8000c7c:	24061ecd 	.word	0x24061ecd
 8000c80:	240003e0 	.word	0x240003e0
 8000c84:	0800e574 	.word	0x0800e574
 8000c88:	24061e60 	.word	0x24061e60
 8000c8c:	24000004 	.word	0x24000004
 8000c90:	24031120 	.word	0x24031120

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b09c      	sub	sp, #112	; 0x70
 8000c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	224c      	movs	r2, #76	; 0x4c
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f00b fc5e 	bl	800c564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2220      	movs	r2, #32
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f00b fc58 	bl	800c564 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000cb4:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <SystemClock_Config+0xe4>)
 8000cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cbe:	2004      	movs	r0, #4
 8000cc0:	f003 ff74 	bl	8004bac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <SystemClock_Config+0xe8>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a2b      	ldr	r2, [pc, #172]	; (8000d7c <SystemClock_Config+0xe8>)
 8000cce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <SystemClock_Config+0xe8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce0:	bf00      	nop
 8000ce2:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <SystemClock_Config+0xe8>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cee:	d1f8      	bne.n	8000ce2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000cf0:	2321      	movs	r3, #33	; 0x21
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cf4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d02:	2302      	movs	r3, #2
 8000d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d06:	2301      	movs	r3, #1
 8000d08:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000d0a:	2318      	movs	r3, #24
 8000d0c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d12:	2304      	movs	r3, #4
 8000d14:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d16:	2302      	movs	r3, #2
 8000d18:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d1a:	230c      	movs	r3, #12
 8000d1c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f003 ff98 	bl	8004c60 <HAL_RCC_OscConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d36:	f000 fb03 	bl	8001340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3a:	233f      	movs	r3, #63	; 0x3f
 8000d3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f004 fbb0 	bl	80054c4 <HAL_RCC_ClockConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000d6a:	f000 fae9 	bl	8001340 <Error_Handler>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3770      	adds	r7, #112	; 0x70
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	58024800 	.word	0x58024800

08000d80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d92:	463b      	mov	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
 8000da0:	615a      	str	r2, [r3, #20]
 8000da2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000da4:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000da6:	4a30      	ldr	r2, [pc, #192]	; (8000e68 <MX_ADC1_Init+0xe8>)
 8000da8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000db0:	4b2c      	ldr	r3, [pc, #176]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dbc:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dc2:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dc8:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd4:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dda:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de0:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000de6:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e00:	4818      	ldr	r0, [pc, #96]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000e02:	f001 f905 	bl	8002010 <HAL_ADC_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e0c:	f000 fa98 	bl	8001340 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4812      	ldr	r0, [pc, #72]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000e1c:	f002 f848 	bl	8002eb0 <HAL_ADCEx_MultiModeConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e26:	f000 fa8b 	bl	8001340 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <MX_ADC1_Init+0xec>)
 8000e2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e2e:	2306      	movs	r3, #6
 8000e30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e36:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e3a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e48:	463b      	mov	r3, r7
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_ADC1_Init+0xe4>)
 8000e4e:	f001 fbd9 	bl	8002604 <HAL_ADC_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000e58:	f000 fa72 	bl	8001340 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */
 // HAL_ADCEx_Calibration_Start(&hadc1,
		  //ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
  /* USER CODE END ADC1_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	240001fc 	.word	0x240001fc
 8000e68:	40022000 	.word	0x40022000
 8000e6c:	14f00020 	.word	0x14f00020

08000e70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_I2C1_Init+0x74>)
 8000e76:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <MX_I2C1_Init+0x78>)
 8000e78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_I2C1_Init+0x74>)
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <MX_I2C1_Init+0x7c>)
 8000e7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_I2C1_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_I2C1_Init+0x74>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_I2C1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_I2C1_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_I2C1_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_I2C1_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_I2C1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eaa:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <MX_I2C1_Init+0x74>)
 8000eac:	f003 f8da 	bl	8004064 <HAL_I2C_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000eb6:	f000 fa43 	bl	8001340 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <MX_I2C1_Init+0x74>)
 8000ebe:	f003 fddd 	bl	8004a7c <HAL_I2CEx_ConfigAnalogFilter>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ec8:	f000 fa3a 	bl	8001340 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_I2C1_Init+0x74>)
 8000ed0:	f003 fe1f 	bl	8004b12 <HAL_I2CEx_ConfigDigitalFilter>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eda:	f000 fa31 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	24000260 	.word	0x24000260
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	10b0dcfb 	.word	0x10b0dcfb

08000ef0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	; 0x30
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	2224      	movs	r2, #36	; 0x24
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00b fb30 	bl	800c564 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <MX_TIM2_Init+0xd4>)
 8000f10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f16:	4b2b      	ldr	r3, [pc, #172]	; (8000fc4 <MX_TIM2_Init+0xd4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <MX_TIM2_Init+0xd4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f22:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <MX_TIM2_Init+0xd4>)
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <MX_TIM2_Init+0xd4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <MX_TIM2_Init+0xd4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f36:	2301      	movs	r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4818      	ldr	r0, [pc, #96]	; (8000fc4 <MX_TIM2_Init+0xd4>)
 8000f62:	f007 fa9d 	bl	80084a0 <HAL_TIM_Encoder_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000f6c:	f000 f9e8 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4811      	ldr	r0, [pc, #68]	; (8000fc4 <MX_TIM2_Init+0xd4>)
 8000f7e:	f007 feb7 	bl	8008cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000f88:	f000 f9da 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 8000f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	6013      	str	r3, [r2, #0]
	TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 8000f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa6:	f023 0301 	bic.w	r3, r3, #1
 8000faa:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8000fac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb6:	f023 0301 	bic.w	r3, r3, #1
 8000fba:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	3730      	adds	r7, #48	; 0x30
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	240002b4 	.word	0x240002b4

08000fc8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	; (800105c <MX_TIM5_Init+0x94>)
 8000fe8:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <MX_TIM5_Init+0x98>)
 8000fea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_TIM5_Init+0x94>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <MX_TIM5_Init+0x94>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_TIM5_Init+0x94>)
 8000ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_TIM5_Init+0x94>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_TIM5_Init+0x94>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800100c:	4813      	ldr	r0, [pc, #76]	; (800105c <MX_TIM5_Init+0x94>)
 800100e:	f007 f9ef 	bl	80083f0 <HAL_TIM_Base_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001018:	f000 f992 	bl	8001340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001020:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	4619      	mov	r1, r3
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <MX_TIM5_Init+0x94>)
 800102a:	f007 fbff 	bl	800882c <HAL_TIM_ConfigClockSource>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001034:	f000 f984 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_TIM5_Init+0x94>)
 8001046:	f007 fe53 	bl	8008cf0 <HAL_TIMEx_MasterConfigSynchronization>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001050:	f000 f976 	bl	8001340 <Error_Handler>
//  TIM5->DIER |= TIM_DIER_UIE; // Enable update interrupt
//  TIM5->ARR = ENC_DMA_POLL_FREQ; // Timebase

  /* USER CODE END TIM5_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	3720      	adds	r7, #32
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	24000300 	.word	0x24000300
 8001060:	40000c00 	.word	0x40000c00

08001064 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 800106a:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <MX_USART3_UART_Init+0x94>)
 800106c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ac:	4811      	ldr	r0, [pc, #68]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 80010ae:	f007 fecb 	bl	8008e48 <HAL_UART_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010b8:	f000 f942 	bl	8001340 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010bc:	2100      	movs	r1, #0
 80010be:	480d      	ldr	r0, [pc, #52]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 80010c0:	f00a fb23 	bl	800b70a <HAL_UARTEx_SetTxFifoThreshold>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010ca:	f000 f939 	bl	8001340 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ce:	2100      	movs	r1, #0
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 80010d2:	f00a fb58 	bl	800b786 <HAL_UARTEx_SetRxFifoThreshold>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010dc:	f000 f930 	bl	8001340 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 80010e2:	f00a fad9 	bl	800b698 <HAL_UARTEx_DisableFifoMode>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010ec:	f000 f928 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2400034c 	.word	0x2400034c
 80010f8:	40004800 	.word	0x40004800

080010fc <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08e      	sub	sp, #56	; 0x38
 8001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	4b80      	ldr	r3, [pc, #512]	; (8001324 <MX_GPIO_Init+0x218>)
 8001124:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001128:	4a7e      	ldr	r2, [pc, #504]	; (8001324 <MX_GPIO_Init+0x218>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001132:	4b7c      	ldr	r3, [pc, #496]	; (8001324 <MX_GPIO_Init+0x218>)
 8001134:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	623b      	str	r3, [r7, #32]
 800113e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001140:	4b78      	ldr	r3, [pc, #480]	; (8001324 <MX_GPIO_Init+0x218>)
 8001142:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001146:	4a77      	ldr	r2, [pc, #476]	; (8001324 <MX_GPIO_Init+0x218>)
 8001148:	f043 0320 	orr.w	r3, r3, #32
 800114c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001150:	4b74      	ldr	r3, [pc, #464]	; (8001324 <MX_GPIO_Init+0x218>)
 8001152:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001156:	f003 0320 	and.w	r3, r3, #32
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115e:	4b71      	ldr	r3, [pc, #452]	; (8001324 <MX_GPIO_Init+0x218>)
 8001160:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001164:	4a6f      	ldr	r2, [pc, #444]	; (8001324 <MX_GPIO_Init+0x218>)
 8001166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800116a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800116e:	4b6d      	ldr	r3, [pc, #436]	; (8001324 <MX_GPIO_Init+0x218>)
 8001170:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001178:	61bb      	str	r3, [r7, #24]
 800117a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b69      	ldr	r3, [pc, #420]	; (8001324 <MX_GPIO_Init+0x218>)
 800117e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001182:	4a68      	ldr	r2, [pc, #416]	; (8001324 <MX_GPIO_Init+0x218>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800118c:	4b65      	ldr	r3, [pc, #404]	; (8001324 <MX_GPIO_Init+0x218>)
 800118e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	4b62      	ldr	r3, [pc, #392]	; (8001324 <MX_GPIO_Init+0x218>)
 800119c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011a0:	4a60      	ldr	r2, [pc, #384]	; (8001324 <MX_GPIO_Init+0x218>)
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011aa:	4b5e      	ldr	r3, [pc, #376]	; (8001324 <MX_GPIO_Init+0x218>)
 80011ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b8:	4b5a      	ldr	r3, [pc, #360]	; (8001324 <MX_GPIO_Init+0x218>)
 80011ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011be:	4a59      	ldr	r2, [pc, #356]	; (8001324 <MX_GPIO_Init+0x218>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011c8:	4b56      	ldr	r3, [pc, #344]	; (8001324 <MX_GPIO_Init+0x218>)
 80011ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011d6:	4b53      	ldr	r3, [pc, #332]	; (8001324 <MX_GPIO_Init+0x218>)
 80011d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011dc:	4a51      	ldr	r2, [pc, #324]	; (8001324 <MX_GPIO_Init+0x218>)
 80011de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011e6:	4b4f      	ldr	r3, [pc, #316]	; (8001324 <MX_GPIO_Init+0x218>)
 80011e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f4:	4b4b      	ldr	r3, [pc, #300]	; (8001324 <MX_GPIO_Init+0x218>)
 80011f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011fa:	4a4a      	ldr	r2, [pc, #296]	; (8001324 <MX_GPIO_Init+0x218>)
 80011fc:	f043 0310 	orr.w	r3, r3, #16
 8001200:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001204:	4b47      	ldr	r3, [pc, #284]	; (8001324 <MX_GPIO_Init+0x218>)
 8001206:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001218:	4843      	ldr	r0, [pc, #268]	; (8001328 <MX_GPIO_Init+0x21c>)
 800121a:	f002 ff09 	bl	8004030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001224:	4841      	ldr	r0, [pc, #260]	; (800132c <MX_GPIO_Init+0x220>)
 8001226:	f002 ff03 	bl	8004030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2102      	movs	r1, #2
 800122e:	4840      	ldr	r0, [pc, #256]	; (8001330 <MX_GPIO_Init+0x224>)
 8001230:	f002 fefe 	bl	8004030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123a:	2300      	movs	r3, #0
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001246:	4619      	mov	r1, r3
 8001248:	483a      	ldr	r0, [pc, #232]	; (8001334 <MX_GPIO_Init+0x228>)
 800124a:	f002 fd41 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800124e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	4619      	mov	r1, r3
 8001266:	4830      	ldr	r0, [pc, #192]	; (8001328 <MX_GPIO_Init+0x21c>)
 8001268:	f002 fd32 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800126c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	4619      	mov	r1, r3
 8001284:	4829      	ldr	r0, [pc, #164]	; (800132c <MX_GPIO_Init+0x220>)
 8001286:	f002 fd23 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800128e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	4619      	mov	r1, r3
 800129e:	4826      	ldr	r0, [pc, #152]	; (8001338 <MX_GPIO_Init+0x22c>)
 80012a0:	f002 fd16 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80012a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b6:	4619      	mov	r1, r3
 80012b8:	4820      	ldr	r0, [pc, #128]	; (800133c <MX_GPIO_Init+0x230>)
 80012ba:	f002 fd09 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80012be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80012d0:	230a      	movs	r3, #10
 80012d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d8:	4619      	mov	r1, r3
 80012da:	4818      	ldr	r0, [pc, #96]	; (800133c <MX_GPIO_Init+0x230>)
 80012dc:	f002 fcf8 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80012e0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f6:	4619      	mov	r1, r3
 80012f8:	4810      	ldr	r0, [pc, #64]	; (800133c <MX_GPIO_Init+0x230>)
 80012fa:	f002 fce9 	bl	8003cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012fe:	2302      	movs	r3, #2
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001312:	4619      	mov	r1, r3
 8001314:	4806      	ldr	r0, [pc, #24]	; (8001330 <MX_GPIO_Init+0x224>)
 8001316:	f002 fcdb 	bl	8003cd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800131a:	bf00      	nop
 800131c:	3738      	adds	r7, #56	; 0x38
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	58024400 	.word	0x58024400
 8001328:	58021400 	.word	0x58021400
 800132c:	58020400 	.word	0x58020400
 8001330:	58021000 	.word	0x58021000
 8001334:	58020800 	.word	0x58020800
 8001338:	58021800 	.word	0x58021800
 800133c:	58020000 	.word	0x58020000

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	e7fe      	b.n	8001348 <Error_Handler+0x8>
	...

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_MspInit+0x30>)
 8001354:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001358:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_MspInit+0x30>)
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_MspInit+0x30>)
 8001364:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	58024400 	.word	0x58024400

08001380 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0ba      	sub	sp, #232	; 0xe8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	22c0      	movs	r2, #192	; 0xc0
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f00b f8df 	bl	800c564 <memset>
  if(hadc->Instance==ADC1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a2b      	ldr	r2, [pc, #172]	; (8001458 <HAL_ADC_MspInit+0xd8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d14f      	bne.n	8001450 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 80013c0:	2310      	movs	r3, #16
 80013c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 80013c4:	2303      	movs	r3, #3
 80013c6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80013c8:	2302      	movs	r3, #2
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80013cc:	2302      	movs	r3, #2
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80013d0:	23c0      	movs	r3, #192	; 0xc0
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 fbf8 	bl	8005bdc <HAL_RCCEx_PeriphCLKConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80013f2:	f7ff ffa5 	bl	8001340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <HAL_ADC_MspInit+0xdc>)
 80013f8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80013fc:	4a17      	ldr	r2, [pc, #92]	; (800145c <HAL_ADC_MspInit+0xdc>)
 80013fe:	f043 0320 	orr.w	r3, r3, #32
 8001402:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_ADC_MspInit+0xdc>)
 8001408:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800140c:	f003 0320 	and.w	r3, r3, #32
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_ADC_MspInit+0xdc>)
 8001416:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <HAL_ADC_MspInit+0xdc>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <HAL_ADC_MspInit+0xdc>)
 8001426:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = THERMOCOUPLE_Pin;
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001438:	2303      	movs	r3, #3
 800143a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(THERMOCOUPLE_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <HAL_ADC_MspInit+0xe0>)
 800144c:	f002 fc40 	bl	8003cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	37e8      	adds	r7, #232	; 0xe8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40022000 	.word	0x40022000
 800145c:	58024400 	.word	0x58024400
 8001460:	58020400 	.word	0x58020400

08001464 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b0ba      	sub	sp, #232	; 0xe8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	22c0      	movs	r2, #192	; 0xc0
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f00b f86d 	bl	800c564 <memset>
  if(hi2c->Instance==I2C1)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a26      	ldr	r2, [pc, #152]	; (8001528 <HAL_I2C_MspInit+0xc4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d145      	bne.n	8001520 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001494:	f04f 0208 	mov.w	r2, #8
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	4618      	mov	r0, r3
 80014ac:	f004 fb96 	bl	8005bdc <HAL_RCCEx_PeriphCLKConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80014b6:	f7ff ff43 	bl	8001340 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <HAL_I2C_MspInit+0xc8>)
 80014bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014c0:	4a1a      	ldr	r2, [pc, #104]	; (800152c <HAL_I2C_MspInit+0xc8>)
 80014c2:	f043 0302 	orr.w	r3, r3, #2
 80014c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_I2C_MspInit+0xc8>)
 80014cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014d8:	23c0      	movs	r3, #192	; 0xc0
 80014da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014de:	2312      	movs	r3, #18
 80014e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014f0:	2304      	movs	r3, #4
 80014f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014fa:	4619      	mov	r1, r3
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <HAL_I2C_MspInit+0xcc>)
 80014fe:	f002 fbe7 	bl	8003cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_I2C_MspInit+0xc8>)
 8001504:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001508:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_I2C_MspInit+0xc8>)
 800150a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800150e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_I2C_MspInit+0xc8>)
 8001514:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001520:	bf00      	nop
 8001522:	37e8      	adds	r7, #232	; 0xe8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40005400 	.word	0x40005400
 800152c:	58024400 	.word	0x58024400
 8001530:	58020400 	.word	0x58020400

08001534 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001554:	d135      	bne.n	80015c2 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_TIM_Encoder_MspInit+0x98>)
 8001558:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800155c:	4a1b      	ldr	r2, [pc, #108]	; (80015cc <HAL_TIM_Encoder_MspInit+0x98>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_TIM_Encoder_MspInit+0x98>)
 8001568:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_TIM_Encoder_MspInit+0x98>)
 8001576:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800157a:	4a14      	ldr	r2, [pc, #80]	; (80015cc <HAL_TIM_Encoder_MspInit+0x98>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_TIM_Encoder_MspInit+0x98>)
 8001586:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PLUNGE_ENC_A_Pin|PLUNGE_ENC_B_Pin;
 8001592:	2303      	movs	r3, #3
 8001594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015a2:	2301      	movs	r3, #1
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4808      	ldr	r0, [pc, #32]	; (80015d0 <HAL_TIM_Encoder_MspInit+0x9c>)
 80015ae:	f002 fb8f 	bl	8003cd0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	201c      	movs	r0, #28
 80015b8:	f001 fdf1 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015bc:	201c      	movs	r0, #28
 80015be:	f001 fe08 	bl	80031d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	; 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	58024400 	.word	0x58024400
 80015d0:	58020000 	.word	0x58020000

080015d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <HAL_TIM_Base_MspInit+0x48>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d116      	bne.n	8001614 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_TIM_Base_MspInit+0x4c>)
 80015e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015ec:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <HAL_TIM_Base_MspInit+0x4c>)
 80015ee:	f043 0308 	orr.w	r3, r3, #8
 80015f2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_TIM_Base_MspInit+0x4c>)
 80015f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2100      	movs	r1, #0
 8001608:	2032      	movs	r0, #50	; 0x32
 800160a:	f001 fdc8 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800160e:	2032      	movs	r0, #50	; 0x32
 8001610:	f001 fddf 	bl	80031d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40000c00 	.word	0x40000c00
 8001620:	58024400 	.word	0x58024400

08001624 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b0ba      	sub	sp, #232	; 0xe8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	22c0      	movs	r2, #192	; 0xc0
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f00a ff8d 	bl	800c564 <memset>
  if(huart->Instance==USART3)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a2b      	ldr	r2, [pc, #172]	; (80016fc <HAL_UART_MspInit+0xd8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d14e      	bne.n	80016f2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001654:	f04f 0202 	mov.w	r2, #2
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001660:	2300      	movs	r3, #0
 8001662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	4618      	mov	r0, r3
 800166c:	f004 fab6 	bl	8005bdc <HAL_RCCEx_PeriphCLKConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001676:	f7ff fe63 	bl	8001340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <HAL_UART_MspInit+0xdc>)
 800167c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001680:	4a1f      	ldr	r2, [pc, #124]	; (8001700 <HAL_UART_MspInit+0xdc>)
 8001682:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001686:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <HAL_UART_MspInit+0xdc>)
 800168c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_UART_MspInit+0xdc>)
 800169a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800169e:	4a18      	ldr	r2, [pc, #96]	; (8001700 <HAL_UART_MspInit+0xdc>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_UART_MspInit+0xdc>)
 80016aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80016b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016d0:	2307      	movs	r3, #7
 80016d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016da:	4619      	mov	r1, r3
 80016dc:	4809      	ldr	r0, [pc, #36]	; (8001704 <HAL_UART_MspInit+0xe0>)
 80016de:	f002 faf7 	bl	8003cd0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	2027      	movs	r0, #39	; 0x27
 80016e8:	f001 fd59 	bl	800319e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016ec:	2027      	movs	r0, #39	; 0x27
 80016ee:	f001 fd70 	bl	80031d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016f2:	bf00      	nop
 80016f4:	37e8      	adds	r7, #232	; 0xe8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40004800 	.word	0x40004800
 8001700:	58024400 	.word	0x58024400
 8001704:	58020c00 	.word	0x58020c00

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800170c:	e7fe      	b.n	800170c <NMI_Handler+0x4>

0800170e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <MemManage_Handler+0x4>

0800171a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <UsageFault_Handler+0x4>

08001726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001754:	f000 fa36 	bl	8001bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <TIM2_IRQHandler+0x10>)
 8001762:	f006 ff43 	bl	80085ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	240002b4 	.word	0x240002b4

08001770 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <USART3_IRQHandler+0x10>)
 8001776:	f007 fc91 	bl	800909c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2400034c 	.word	0x2400034c

08001784 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* always do the logging portion */
  /* TODO: Convert this datalogging to DMA to speed it up. actually a priority I think it would have big performance gains*/
  log_position += 1; // increment number of data points taken
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <TIM5_IRQHandler+0x6c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <TIM5_IRQHandler+0x6c>)
 8001790:	6013      	str	r3, [r2, #0]
  current_pos = TIM2->CNT;
 8001792:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	4a16      	ldr	r2, [pc, #88]	; (80017f4 <TIM5_IRQHandler+0x70>)
 800179a:	6013      	str	r3, [r2, #0]
  HAL_ADC_Start(&hadc1);
 800179c:	4816      	ldr	r0, [pc, #88]	; (80017f8 <TIM5_IRQHandler+0x74>)
 800179e:	f000 fd91 	bl	80022c4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80017a2:	f04f 31ff 	mov.w	r1, #4294967295
 80017a6:	4814      	ldr	r0, [pc, #80]	; (80017f8 <TIM5_IRQHandler+0x74>)
 80017a8:	f000 fe46 	bl	8002438 <HAL_ADC_PollForConversion>
  current_temp = HAL_ADC_GetValue(&hadc1);
 80017ac:	4812      	ldr	r0, [pc, #72]	; (80017f8 <TIM5_IRQHandler+0x74>)
 80017ae:	f000 ff1b 	bl	80025e8 <HAL_ADC_GetValue>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a11      	ldr	r2, [pc, #68]	; (80017fc <TIM5_IRQHandler+0x78>)
 80017b6:	6013      	str	r3, [r2, #0]
  posLog[log_position] = current_pos; // update log of positions
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <TIM5_IRQHandler+0x70>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <TIM5_IRQHandler+0x6c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b291      	uxth	r1, r2
 80017c2:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <TIM5_IRQHandler+0x7c>)
 80017c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  thermoLog[log_position] = current_temp; 
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <TIM5_IRQHandler+0x78>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <TIM5_IRQHandler+0x6c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	b291      	uxth	r1, r2
 80017d2:	4a0c      	ldr	r2, [pc, #48]	; (8001804 <TIM5_IRQHandler+0x80>)
 80017d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

  TIM5->SR &= ~TIM_SR_UIF; // Clear the TIM5 update flag
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <TIM5_IRQHandler+0x84>)
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <TIM5_IRQHandler+0x84>)
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80017e4:	4809      	ldr	r0, [pc, #36]	; (800180c <TIM5_IRQHandler+0x88>)
 80017e6:	f006 ff01 	bl	80085ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	24061e60 	.word	0x24061e60
 80017f4:	24061ed0 	.word	0x24061ed0
 80017f8:	240001fc 	.word	0x240001fc
 80017fc:	24061ed4 	.word	0x24061ed4
 8001800:	240003e0 	.word	0x240003e0
 8001804:	24031120 	.word	0x24031120
 8001808:	40000c00 	.word	0x40000c00
 800180c:	24000300 	.word	0x24000300

08001810 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return 1;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_kill>:

int _kill(int pid, int sig)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800182a:	f00a feed 	bl	800c608 <__errno>
 800182e:	4603      	mov	r3, r0
 8001830:	2216      	movs	r2, #22
 8001832:	601a      	str	r2, [r3, #0]
  return -1;
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_exit>:

void _exit (int status)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ffe7 	bl	8001820 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001852:	e7fe      	b.n	8001852 <_exit+0x12>

08001854 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e00a      	b.n	800187c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001866:	f3af 8000 	nop.w
 800186a:	4601      	mov	r1, r0
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	60ba      	str	r2, [r7, #8]
 8001872:	b2ca      	uxtb	r2, r1
 8001874:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	dbf0      	blt.n	8001866 <_read+0x12>
  }

  return len;
 8001884:	687b      	ldr	r3, [r7, #4]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	e009      	b.n	80018b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	60ba      	str	r2, [r7, #8]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3301      	adds	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	dbf1      	blt.n	80018a0 <_write+0x12>
  }
  return len;
 80018bc:	687b      	ldr	r3, [r7, #4]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <_close>:

int _close(int file)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ee:	605a      	str	r2, [r3, #4]
  return 0;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_isatty>:

int _isatty(int file)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001938:	4a14      	ldr	r2, [pc, #80]	; (800198c <_sbrk+0x5c>)
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <_sbrk+0x60>)
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d102      	bne.n	8001952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <_sbrk+0x64>)
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <_sbrk+0x68>)
 8001950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	429a      	cmp	r2, r3
 800195e:	d207      	bcs.n	8001970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001960:	f00a fe52 	bl	800c608 <__errno>
 8001964:	4603      	mov	r3, r0
 8001966:	220c      	movs	r2, #12
 8001968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	e009      	b.n	8001984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <_sbrk+0x64>)
 8001980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001982:	68fb      	ldr	r3, [r7, #12]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	24100000 	.word	0x24100000
 8001990:	00000400 	.word	0x00000400
 8001994:	24061ed8 	.word	0x24061ed8
 8001998:	24062030 	.word	0x24062030

0800199c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019a0:	4b32      	ldr	r3, [pc, #200]	; (8001a6c <SystemInit+0xd0>)
 80019a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a6:	4a31      	ldr	r2, [pc, #196]	; (8001a6c <SystemInit+0xd0>)
 80019a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019b0:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <SystemInit+0xd4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 030f 	and.w	r3, r3, #15
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d807      	bhi.n	80019cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019bc:	4b2c      	ldr	r3, [pc, #176]	; (8001a70 <SystemInit+0xd4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 030f 	bic.w	r3, r3, #15
 80019c4:	4a2a      	ldr	r2, [pc, #168]	; (8001a70 <SystemInit+0xd4>)
 80019c6:	f043 0303 	orr.w	r3, r3, #3
 80019ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019cc:	4b29      	ldr	r3, [pc, #164]	; (8001a74 <SystemInit+0xd8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a28      	ldr	r2, [pc, #160]	; (8001a74 <SystemInit+0xd8>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019d8:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <SystemInit+0xd8>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019de:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <SystemInit+0xd8>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	4924      	ldr	r1, [pc, #144]	; (8001a74 <SystemInit+0xd8>)
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <SystemInit+0xdc>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019ea:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <SystemInit+0xd4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d007      	beq.n	8001a06 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019f6:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <SystemInit+0xd4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 030f 	bic.w	r3, r3, #15
 80019fe:	4a1c      	ldr	r2, [pc, #112]	; (8001a70 <SystemInit+0xd4>)
 8001a00:	f043 0303 	orr.w	r3, r3, #3
 8001a04:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <SystemInit+0xd8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <SystemInit+0xd8>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <SystemInit+0xd8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <SystemInit+0xd8>)
 8001a1a:	4a18      	ldr	r2, [pc, #96]	; (8001a7c <SystemInit+0xe0>)
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <SystemInit+0xd8>)
 8001a20:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <SystemInit+0xe4>)
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <SystemInit+0xd8>)
 8001a26:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <SystemInit+0xe8>)
 8001a28:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <SystemInit+0xd8>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <SystemInit+0xd8>)
 8001a32:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <SystemInit+0xe8>)
 8001a34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <SystemInit+0xd8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <SystemInit+0xd8>)
 8001a3e:	4a11      	ldr	r2, [pc, #68]	; (8001a84 <SystemInit+0xe8>)
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <SystemInit+0xd8>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <SystemInit+0xd8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <SystemInit+0xd8>)
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <SystemInit+0xd8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <SystemInit+0xec>)
 8001a5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a60:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00
 8001a70:	52002000 	.word	0x52002000
 8001a74:	58024400 	.word	0x58024400
 8001a78:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a7c:	02020200 	.word	0x02020200
 8001a80:	01ff0000 	.word	0x01ff0000
 8001a84:	01010280 	.word	0x01010280
 8001a88:	52004000 	.word	0x52004000

08001a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a90:	f7ff ff84 	bl	800199c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a94:	480c      	ldr	r0, [pc, #48]	; (8001ac8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a96:	490d      	ldr	r1, [pc, #52]	; (8001acc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a98:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aac:	4c0a      	ldr	r4, [pc, #40]	; (8001ad8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001aba:	f00a fdab 	bl	800c614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001abe:	f7fe ffab 	bl	8000a18 <main>
  bx  lr
 8001ac2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001ac8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001acc:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001ad0:	0800e934 	.word	0x0800e934
  ldr r2, =_sbss
 8001ad4:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8001ad8:	2406202c 	.word	0x2406202c

08001adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC_IRQHandler>
	...

08001ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae6:	2003      	movs	r0, #3
 8001ae8:	f001 fb4e 	bl	8003188 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001aec:	f003 fea0 	bl	8005830 <HAL_RCC_GetSysClockFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_Init+0x68>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	0a1b      	lsrs	r3, r3, #8
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	4913      	ldr	r1, [pc, #76]	; (8001b4c <HAL_Init+0x6c>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
 8001b08:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_Init+0x68>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <HAL_Init+0x6c>)
 8001b14:	5cd3      	ldrb	r3, [r2, r3]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b20:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <HAL_Init+0x70>)
 8001b22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b24:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <HAL_Init+0x74>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f000 f814 	bl	8001b58 <HAL_InitTick>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e002      	b.n	8001b40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3a:	f7ff fc07 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	58024400 	.word	0x58024400
 8001b4c:	0800e578 	.word	0x0800e578
 8001b50:	2400000c 	.word	0x2400000c
 8001b54:	24000008 	.word	0x24000008

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_InitTick+0x60>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e021      	b.n	8001bb0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_InitTick+0x64>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_InitTick+0x60>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f001 fb33 	bl	80031ee <HAL_SYSTICK_Config>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00e      	b.n	8001bb0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b0f      	cmp	r3, #15
 8001b96:	d80a      	bhi.n	8001bae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f001 fafd 	bl	800319e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba4:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <HAL_InitTick+0x68>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e000      	b.n	8001bb0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	24000014 	.word	0x24000014
 8001bbc:	24000008 	.word	0x24000008
 8001bc0:	24000010 	.word	0x24000010

08001bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_IncTick+0x20>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_IncTick+0x24>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <HAL_IncTick+0x24>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	24000014 	.word	0x24000014
 8001be8:	24061edc 	.word	0x24061edc

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	24061edc 	.word	0x24061edc

08001c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff ffee 	bl	8001bec <HAL_GetTick>
 8001c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d005      	beq.n	8001c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_Delay+0x44>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c2a:	bf00      	nop
 8001c2c:	f7ff ffde 	bl	8001bec <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d8f7      	bhi.n	8001c2c <HAL_Delay+0x28>
  {
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	24000014 	.word	0x24000014

08001c4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	609a      	str	r2, [r3, #8]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3360      	adds	r3, #96	; 0x60
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ce8:	bf00      	nop
 8001cea:	371c      	adds	r7, #28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	431a      	orrs	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	611a      	str	r2, [r3, #16]
}
 8001d1a:	bf00      	nop
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b087      	sub	sp, #28
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3360      	adds	r3, #96	; 0x60
 8001d36:	461a      	mov	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	601a      	str	r2, [r3, #0]
  }
}
 8001d50:	bf00      	nop
 8001d52:	371c      	adds	r7, #28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b087      	sub	sp, #28
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3330      	adds	r3, #48	; 0x30
 8001d92:	461a      	mov	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	4413      	add	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	211f      	movs	r1, #31
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	401a      	ands	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	0e9b      	lsrs	r3, r3, #26
 8001dba:	f003 011f 	and.w	r1, r3, #31
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dce:	bf00      	nop
 8001dd0:	371c      	adds	r7, #28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b087      	sub	sp, #28
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3314      	adds	r3, #20
 8001dea:	461a      	mov	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	0e5b      	lsrs	r3, r3, #25
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	4413      	add	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	0d1b      	lsrs	r3, r3, #20
 8001e02:	f003 031f 	and.w	r3, r3, #31
 8001e06:	2107      	movs	r1, #7
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	401a      	ands	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	0d1b      	lsrs	r3, r3, #20
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e24:	bf00      	nop
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f003 0318 	and.w	r3, r3, #24
 8001e52:	4908      	ldr	r1, [pc, #32]	; (8001e74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e54:	40d9      	lsrs	r1, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	400b      	ands	r3, r1
 8001e5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	000fffff 	.word	0x000fffff

08001e78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 031f 	and.w	r3, r3, #31
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6093      	str	r3, [r2, #8]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	5fffffc0 	.word	0x5fffffc0

08001ed4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ee8:	d101      	bne.n	8001eee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <LL_ADC_EnableInternalRegulator+0x24>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	6fffffc0 	.word	0x6fffffc0

08001f24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f38:	d101      	bne.n	8001f3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <LL_ADC_Enable+0x24>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	f043 0201 	orr.w	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	7fffffc0 	.word	0x7fffffc0

08001f74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <LL_ADC_IsEnabled+0x18>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <LL_ADC_IsEnabled+0x1a>
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <LL_ADC_REG_StartConversion+0x24>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	f043 0204 	orr.w	r2, r3, #4
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	7fffffc0 	.word	0x7fffffc0

08001fc4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d101      	bne.n	8001fdc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d101      	bne.n	8002002 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e138      	b.n	800229c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002034:	2b00      	cmp	r3, #0
 8002036:	d109      	bne.n	800204c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff f9a1 	bl	8001380 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff3f 	bl	8001ed4 <LL_ADC_IsDeepPowerDownEnabled>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d004      	beq.n	8002066 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff25 	bl	8001eb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ff5a 	bl	8001f24 <LL_ADC_IsInternalRegulatorEnabled>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d114      	bne.n	80020a0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff3e 	bl	8001efc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002080:	4b88      	ldr	r3, [pc, #544]	; (80022a4 <HAL_ADC_Init+0x294>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	099b      	lsrs	r3, r3, #6
 8002086:	4a88      	ldr	r2, [pc, #544]	; (80022a8 <HAL_ADC_Init+0x298>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	099b      	lsrs	r3, r3, #6
 800208e:	3301      	adds	r3, #1
 8002090:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002092:	e002      	b.n	800209a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	3b01      	subs	r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f9      	bne.n	8002094 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff3d 	bl	8001f24 <LL_ADC_IsInternalRegulatorEnabled>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10d      	bne.n	80020cc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b4:	f043 0210 	orr.w	r2, r3, #16
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c0:	f043 0201 	orr.w	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff77 	bl	8001fc4 <LL_ADC_REG_IsConversionOngoing>
 80020d6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f040 80d2 	bne.w	800228a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f040 80ce 	bne.w	800228a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020f6:	f043 0202 	orr.w	r2, r3, #2
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ff36 	bl	8001f74 <LL_ADC_IsEnabled>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d110      	bne.n	8002130 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800210e:	4867      	ldr	r0, [pc, #412]	; (80022ac <HAL_ADC_Init+0x29c>)
 8002110:	f7ff ff30 	bl	8001f74 <LL_ADC_IsEnabled>
 8002114:	4604      	mov	r4, r0
 8002116:	4866      	ldr	r0, [pc, #408]	; (80022b0 <HAL_ADC_Init+0x2a0>)
 8002118:	f7ff ff2c 	bl	8001f74 <LL_ADC_IsEnabled>
 800211c:	4603      	mov	r3, r0
 800211e:	4323      	orrs	r3, r4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d105      	bne.n	8002130 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4619      	mov	r1, r3
 800212a:	4862      	ldr	r0, [pc, #392]	; (80022b4 <HAL_ADC_Init+0x2a4>)
 800212c:	f7ff fd8e 	bl	8001c4c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	7d5b      	ldrb	r3, [r3, #21]
 8002134:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800213a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002140:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7f1b      	ldrb	r3, [r3, #28]
 8002146:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7f1b      	ldrb	r3, [r3, #28]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d106      	bne.n	8002162 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	3b01      	subs	r3, #1
 800215a:	045b      	lsls	r3, r3, #17
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	4b4c      	ldr	r3, [pc, #304]	; (80022b8 <HAL_ADC_Init+0x2a8>)
 8002186:	4013      	ands	r3, r2
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	69b9      	ldr	r1, [r7, #24]
 800218e:	430b      	orrs	r3, r1
 8002190:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff ff14 	bl	8001fc4 <LL_ADC_REG_IsConversionOngoing>
 800219c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff21 	bl	8001fea <LL_ADC_INJ_IsConversionOngoing>
 80021a8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d14a      	bne.n	8002246 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d147      	bne.n	8002246 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7d1b      	ldrb	r3, [r3, #20]
 80021ba:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	4b3c      	ldr	r3, [pc, #240]	; (80022bc <HAL_ADC_Init+0x2ac>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	69b9      	ldr	r1, [r7, #24]
 80021d4:	430b      	orrs	r3, r1
 80021d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d11b      	bne.n	800221a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691a      	ldr	r2, [r3, #16]
 80021ee:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <HAL_ADC_Init+0x2b0>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021f6:	3a01      	subs	r2, #1
 80021f8:	0411      	lsls	r1, r2, #16
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021fe:	4311      	orrs	r1, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002204:	4311      	orrs	r1, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800220a:	430a      	orrs	r2, r1
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	611a      	str	r2, [r3, #16]
 8002218:	e007      	b.n	800222a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fd41 	bl	8002cc8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d10c      	bne.n	8002268 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	f023 010f 	bic.w	r1, r3, #15
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	1e5a      	subs	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	631a      	str	r2, [r3, #48]	; 0x30
 8002266:	e007      	b.n	8002278 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 020f 	bic.w	r2, r2, #15
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227c:	f023 0303 	bic.w	r3, r3, #3
 8002280:	f043 0201 	orr.w	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	655a      	str	r2, [r3, #84]	; 0x54
 8002288:	e007      	b.n	800229a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228e:	f043 0210 	orr.w	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800229a:	7ffb      	ldrb	r3, [r7, #31]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3724      	adds	r7, #36	; 0x24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd90      	pop	{r4, r7, pc}
 80022a4:	24000008 	.word	0x24000008
 80022a8:	053e2d63 	.word	0x053e2d63
 80022ac:	40022000 	.word	0x40022000
 80022b0:	40022100 	.word	0x40022100
 80022b4:	40022300 	.word	0x40022300
 80022b8:	fff0c003 	.word	0xfff0c003
 80022bc:	ffffbffc 	.word	0xffffbffc
 80022c0:	fc00f81e 	.word	0xfc00f81e

080022c4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022cc:	4856      	ldr	r0, [pc, #344]	; (8002428 <HAL_ADC_Start+0x164>)
 80022ce:	f7ff fdd3 	bl	8001e78 <LL_ADC_GetMultimode>
 80022d2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fe73 	bl	8001fc4 <LL_ADC_REG_IsConversionOngoing>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f040 809a 	bne.w	800241a <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_Start+0x30>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e095      	b.n	8002420 <HAL_ADC_Start+0x15c>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 fc67 	bl	8002bd0 <ADC_Enable>
 8002302:	4603      	mov	r3, r0
 8002304:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002306:	7dfb      	ldrb	r3, [r7, #23]
 8002308:	2b00      	cmp	r3, #0
 800230a:	f040 8081 	bne.w	8002410 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002312:	4b46      	ldr	r3, [pc, #280]	; (800242c <HAL_ADC_Start+0x168>)
 8002314:	4013      	ands	r3, r2
 8002316:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a43      	ldr	r2, [pc, #268]	; (8002430 <HAL_ADC_Start+0x16c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d002      	beq.n	800232e <HAL_ADC_Start+0x6a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	e000      	b.n	8002330 <HAL_ADC_Start+0x6c>
 800232e:	4b41      	ldr	r3, [pc, #260]	; (8002434 <HAL_ADC_Start+0x170>)
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	4293      	cmp	r3, r2
 8002336:	d002      	beq.n	800233e <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d105      	bne.n	800234a <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002356:	d106      	bne.n	8002366 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	f023 0206 	bic.w	r2, r3, #6
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	659a      	str	r2, [r3, #88]	; 0x58
 8002364:	e002      	b.n	800236c <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	221c      	movs	r2, #28
 8002372:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a2b      	ldr	r2, [pc, #172]	; (8002430 <HAL_ADC_Start+0x16c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d002      	beq.n	800238c <HAL_ADC_Start+0xc8>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	e000      	b.n	800238e <HAL_ADC_Start+0xca>
 800238c:	4b29      	ldr	r3, [pc, #164]	; (8002434 <HAL_ADC_Start+0x170>)
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	4293      	cmp	r3, r2
 8002394:	d008      	beq.n	80023a8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b05      	cmp	r3, #5
 80023a0:	d002      	beq.n	80023a8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	2b09      	cmp	r3, #9
 80023a6:	d114      	bne.n	80023d2 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fde6 	bl	8001f9c <LL_ADC_REG_StartConversion>
 80023d0:	e025      	b.n	800241e <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a13      	ldr	r2, [pc, #76]	; (8002430 <HAL_ADC_Start+0x16c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d002      	beq.n	80023ee <HAL_ADC_Start+0x12a>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	e000      	b.n	80023f0 <HAL_ADC_Start+0x12c>
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <HAL_ADC_Start+0x170>)
 80023f0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00f      	beq.n	800241e <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002402:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002406:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	655a      	str	r2, [r3, #84]	; 0x54
 800240e:	e006      	b.n	800241e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002418:	e001      	b.n	800241e <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800241a:	2302      	movs	r3, #2
 800241c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800241e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40022300 	.word	0x40022300
 800242c:	fffff0fe 	.word	0xfffff0fe
 8002430:	40022100 	.word	0x40022100
 8002434:	40022000 	.word	0x40022000

08002438 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002442:	4866      	ldr	r0, [pc, #408]	; (80025dc <HAL_ADC_PollForConversion+0x1a4>)
 8002444:	f7ff fd18 	bl	8001e78 <LL_ADC_GetMultimode>
 8002448:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b08      	cmp	r3, #8
 8002450:	d102      	bne.n	8002458 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002452:	2308      	movs	r3, #8
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	e02a      	b.n	80024ae <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2b05      	cmp	r3, #5
 8002462:	d002      	beq.n	800246a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b09      	cmp	r3, #9
 8002468:	d111      	bne.n	800248e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d007      	beq.n	8002488 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247c:	f043 0220 	orr.w	r2, r3, #32
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0a4      	b.n	80025d2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002488:	2304      	movs	r3, #4
 800248a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800248c:	e00f      	b.n	80024ae <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800248e:	4853      	ldr	r0, [pc, #332]	; (80025dc <HAL_ADC_PollForConversion+0x1a4>)
 8002490:	f7ff fd00 	bl	8001e94 <LL_ADC_GetMultiDMATransfer>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249e:	f043 0220 	orr.w	r2, r3, #32
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e093      	b.n	80025d2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80024aa:	2304      	movs	r3, #4
 80024ac:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80024ae:	f7ff fb9d 	bl	8001bec <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024b4:	e021      	b.n	80024fa <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d01d      	beq.n	80024fa <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80024be:	f7ff fb95 	bl	8001bec <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d302      	bcc.n	80024d4 <HAL_ADC_PollForConversion+0x9c>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d112      	bne.n	80024fa <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10b      	bne.n	80024fa <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e6:	f043 0204 	orr.w	r2, r3, #4
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e06b      	b.n	80025d2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0d6      	beq.n	80024b6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fc1f 	bl	8001d5c <LL_ADC_REG_IsTriggerSourceSWStart>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01c      	beq.n	800255e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7d5b      	ldrb	r3, [r3, #21]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d118      	bne.n	800255e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b08      	cmp	r3, #8
 8002538:	d111      	bne.n	800255e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d105      	bne.n	800255e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	f043 0201 	orr.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1f      	ldr	r2, [pc, #124]	; (80025e0 <HAL_ADC_PollForConversion+0x1a8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d002      	beq.n	800256e <HAL_ADC_PollForConversion+0x136>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	e000      	b.n	8002570 <HAL_ADC_PollForConversion+0x138>
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_ADC_PollForConversion+0x1ac>)
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	4293      	cmp	r3, r2
 8002576:	d008      	beq.n	800258a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b05      	cmp	r3, #5
 8002582:	d002      	beq.n	800258a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2b09      	cmp	r3, #9
 8002588:	d104      	bne.n	8002594 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	e00c      	b.n	80025ae <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <HAL_ADC_PollForConversion+0x1a8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d002      	beq.n	80025a4 <HAL_ADC_PollForConversion+0x16c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	e000      	b.n	80025a6 <HAL_ADC_PollForConversion+0x16e>
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_ADC_PollForConversion+0x1ac>)
 80025a6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d104      	bne.n	80025be <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2208      	movs	r2, #8
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	e008      	b.n	80025d0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d103      	bne.n	80025d0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	220c      	movs	r2, #12
 80025ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3720      	adds	r7, #32
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40022300 	.word	0x40022300
 80025e0:	40022100 	.word	0x40022100
 80025e4:	40022000 	.word	0x40022000

080025e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b0a1      	sub	sp, #132	; 0x84
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a9a      	ldr	r2, [pc, #616]	; (8002888 <HAL_ADC_ConfigChannel+0x284>)
 800261e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_ADC_ConfigChannel+0x2a>
 800262a:	2302      	movs	r3, #2
 800262c:	e2bc      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x5a4>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fcc2 	bl	8001fc4 <LL_ADC_REG_IsConversionOngoing>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 82a1 	bne.w	8002b8a <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002650:	2b00      	cmp	r3, #0
 8002652:	d108      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x62>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0e9b      	lsrs	r3, r3, #26
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	2201      	movs	r2, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	e016      	b.n	8002694 <HAL_ADC_ConfigChannel+0x90>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002674:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002676:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002678:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800267e:	2320      	movs	r3, #32
 8002680:	e003      	b.n	800268a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	2201      	movs	r2, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	69d1      	ldr	r1, [r2, #28]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	430b      	orrs	r3, r1
 80026a0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f7ff fb67 	bl	8001d82 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fc83 	bl	8001fc4 <LL_ADC_REG_IsConversionOngoing>
 80026be:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fc90 	bl	8001fea <LL_ADC_INJ_IsConversionOngoing>
 80026ca:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f040 80a0 	bne.w	8002814 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f040 809c 	bne.w	8002814 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6819      	ldr	r1, [r3, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	461a      	mov	r2, r3
 80026ea:	f7ff fb76 	bl	8001dda <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10b      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x110>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	e00a      	b.n	800272a <HAL_ADC_ConfigChannel+0x126>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	2b04      	cmp	r3, #4
 8002732:	d027      	beq.n	8002784 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6919      	ldr	r1, [r3, #16]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002742:	f7ff fab7 	bl	8001cb4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6919      	ldr	r1, [r3, #16]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	7e5b      	ldrb	r3, [r3, #25]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d102      	bne.n	800275c <HAL_ADC_ConfigChannel+0x158>
 8002756:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800275a:	e000      	b.n	800275e <HAL_ADC_ConfigChannel+0x15a>
 800275c:	2300      	movs	r3, #0
 800275e:	461a      	mov	r2, r3
 8002760:	f7ff fae1 	bl	8001d26 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6919      	ldr	r1, [r3, #16]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	7e1b      	ldrb	r3, [r3, #24]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d102      	bne.n	800277a <HAL_ADC_ConfigChannel+0x176>
 8002774:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002778:	e000      	b.n	800277c <HAL_ADC_ConfigChannel+0x178>
 800277a:	2300      	movs	r3, #0
 800277c:	461a      	mov	r2, r3
 800277e:	f7ff fab9 	bl	8001cf4 <LL_ADC_SetDataRightShift>
 8002782:	e047      	b.n	8002814 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	069b      	lsls	r3, r3, #26
 8002794:	429a      	cmp	r2, r3
 8002796:	d107      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027a6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	069b      	lsls	r3, r3, #26
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d107      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027ca:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	069b      	lsls	r3, r3, #26
 80027dc:	429a      	cmp	r2, r3
 80027de:	d107      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027ee:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	069b      	lsls	r3, r3, #26
 8002800:	429a      	cmp	r2, r3
 8002802:	d107      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002812:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fbab 	bl	8001f74 <LL_ADC_IsEnabled>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	f040 81bb 	bne.w	8002b9c <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6819      	ldr	r1, [r3, #0]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	461a      	mov	r2, r3
 8002834:	f7ff fafc 	bl	8001e30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4a12      	ldr	r2, [pc, #72]	; (8002888 <HAL_ADC_ConfigChannel+0x284>)
 800283e:	4293      	cmp	r3, r2
 8002840:	f040 8130 	bne.w	8002aa4 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10b      	bne.n	800286c <HAL_ADC_ConfigChannel+0x268>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	0e9b      	lsrs	r3, r3, #26
 800285a:	3301      	adds	r3, #1
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	2b09      	cmp	r3, #9
 8002862:	bf94      	ite	ls
 8002864:	2301      	movls	r3, #1
 8002866:	2300      	movhi	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	e01b      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x2a0>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800287a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800287e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002880:	2b00      	cmp	r3, #0
 8002882:	d103      	bne.n	800288c <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002884:	2320      	movs	r3, #32
 8002886:	e005      	b.n	8002894 <HAL_ADC_ConfigChannel+0x290>
 8002888:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 800288c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	3301      	adds	r3, #1
 8002896:	f003 031f 	and.w	r3, r3, #31
 800289a:	2b09      	cmp	r3, #9
 800289c:	bf94      	ite	ls
 800289e:	2301      	movls	r3, #1
 80028a0:	2300      	movhi	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d079      	beq.n	800299c <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d107      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x2c0>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	0e9b      	lsrs	r3, r3, #26
 80028ba:	3301      	adds	r3, #1
 80028bc:	069b      	lsls	r3, r3, #26
 80028be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028c2:	e015      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x2ec>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80028d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80028d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80028dc:	2320      	movs	r3, #32
 80028de:	e003      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80028e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	3301      	adds	r3, #1
 80028ea:	069b      	lsls	r3, r3, #26
 80028ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d109      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x30c>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	0e9b      	lsrs	r3, r3, #26
 8002902:	3301      	adds	r3, #1
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	2101      	movs	r1, #1
 800290a:	fa01 f303 	lsl.w	r3, r1, r3
 800290e:	e017      	b.n	8002940 <HAL_ADC_ConfigChannel+0x33c>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800291e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002920:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002928:	2320      	movs	r3, #32
 800292a:	e003      	b.n	8002934 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 800292c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	3301      	adds	r3, #1
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	2101      	movs	r1, #1
 800293c:	fa01 f303 	lsl.w	r3, r1, r3
 8002940:	ea42 0103 	orr.w	r1, r2, r3
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10a      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x362>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	0e9b      	lsrs	r3, r3, #26
 8002956:	3301      	adds	r3, #1
 8002958:	f003 021f 	and.w	r2, r3, #31
 800295c:	4613      	mov	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	051b      	lsls	r3, r3, #20
 8002964:	e018      	b.n	8002998 <HAL_ADC_ConfigChannel+0x394>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800297e:	2320      	movs	r3, #32
 8002980:	e003      	b.n	800298a <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f003 021f 	and.w	r2, r3, #31
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002998:	430b      	orrs	r3, r1
 800299a:	e07e      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d107      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x3b4>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	0e9b      	lsrs	r3, r3, #26
 80029ae:	3301      	adds	r3, #1
 80029b0:	069b      	lsls	r3, r3, #26
 80029b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029b6:	e015      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x3e0>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80029d0:	2320      	movs	r3, #32
 80029d2:	e003      	b.n	80029dc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80029d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	3301      	adds	r3, #1
 80029de:	069b      	lsls	r3, r3, #26
 80029e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x400>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	3301      	adds	r3, #1
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	2101      	movs	r1, #1
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	e017      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x430>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa93 f3a3 	rbit	r3, r3
 8002a10:	61bb      	str	r3, [r7, #24]
  return result;
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002a1c:	2320      	movs	r3, #32
 8002a1e:	e003      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	3301      	adds	r3, #1
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	2101      	movs	r1, #1
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	ea42 0103 	orr.w	r1, r2, r3
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10d      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x45c>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	0e9b      	lsrs	r3, r3, #26
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f003 021f 	and.w	r2, r3, #31
 8002a50:	4613      	mov	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4413      	add	r3, r2
 8002a56:	3b1e      	subs	r3, #30
 8002a58:	051b      	lsls	r3, r3, #20
 8002a5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	e01b      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x494>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	60fb      	str	r3, [r7, #12]
  return result;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002a78:	2320      	movs	r3, #32
 8002a7a:	e003      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	3301      	adds	r3, #1
 8002a86:	f003 021f 	and.w	r2, r3, #31
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4413      	add	r3, r2
 8002a90:	3b1e      	subs	r3, #30
 8002a92:	051b      	lsls	r3, r3, #20
 8002a94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	6892      	ldr	r2, [r2, #8]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f7ff f99b 	bl	8001dda <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	da77      	bge.n	8002b9c <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aac:	4840      	ldr	r0, [pc, #256]	; (8002bb0 <HAL_ADC_ConfigChannel+0x5ac>)
 8002aae:	f7ff f8f3 	bl	8001c98 <LL_ADC_GetCommonPathInternalCh>
 8002ab2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ab4:	483f      	ldr	r0, [pc, #252]	; (8002bb4 <HAL_ADC_ConfigChannel+0x5b0>)
 8002ab6:	f7ff fa5d 	bl	8001f74 <LL_ADC_IsEnabled>
 8002aba:	4604      	mov	r4, r0
 8002abc:	483e      	ldr	r0, [pc, #248]	; (8002bb8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002abe:	f7ff fa59 	bl	8001f74 <LL_ADC_IsEnabled>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4323      	orrs	r3, r4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d155      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a3b      	ldr	r2, [pc, #236]	; (8002bbc <HAL_ADC_ConfigChannel+0x5b8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d122      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x516>
 8002ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d11d      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a35      	ldr	r2, [pc, #212]	; (8002bb8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d159      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002aee:	4619      	mov	r1, r3
 8002af0:	482f      	ldr	r0, [pc, #188]	; (8002bb0 <HAL_ADC_ConfigChannel+0x5ac>)
 8002af2:	f7ff f8be 	bl	8001c72 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002af6:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <HAL_ADC_ConfigChannel+0x5bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	099b      	lsrs	r3, r3, #6
 8002afc:	4a31      	ldr	r2, [pc, #196]	; (8002bc4 <HAL_ADC_ConfigChannel+0x5c0>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	099b      	lsrs	r3, r3, #6
 8002b04:	3301      	adds	r3, #1
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b0a:	e002      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f9      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b18:	e040      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a2a      	ldr	r2, [pc, #168]	; (8002bc8 <HAL_ADC_ConfigChannel+0x5c4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d111      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x544>
 8002b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10c      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a21      	ldr	r2, [pc, #132]	; (8002bb8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d131      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	4619      	mov	r1, r3
 8002b40:	481b      	ldr	r0, [pc, #108]	; (8002bb0 <HAL_ADC_ConfigChannel+0x5ac>)
 8002b42:	f7ff f896 	bl	8001c72 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b46:	e029      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <HAL_ADC_ConfigChannel+0x5c8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d124      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x598>
 8002b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d11f      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a15      	ldr	r2, [pc, #84]	; (8002bb8 <HAL_ADC_ConfigChannel+0x5b4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d11a      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4810      	ldr	r0, [pc, #64]	; (8002bb0 <HAL_ADC_ConfigChannel+0x5ac>)
 8002b70:	f7ff f87f 	bl	8001c72 <LL_ADC_SetCommonPathInternalCh>
 8002b74:	e012      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7a:	f043 0220 	orr.w	r2, r3, #32
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002b88:	e008      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8e:	f043 0220 	orr.w	r2, r3, #32
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ba4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3784      	adds	r7, #132	; 0x84
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd90      	pop	{r4, r7, pc}
 8002bb0:	40022300 	.word	0x40022300
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40022100 	.word	0x40022100
 8002bbc:	cb840000 	.word	0xcb840000
 8002bc0:	24000008 	.word	0x24000008
 8002bc4:	053e2d63 	.word	0x053e2d63
 8002bc8:	bac04000 	.word	0xbac04000
 8002bcc:	cfb80000 	.word	0xcfb80000

08002bd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff f9c9 	bl	8001f74 <LL_ADC_IsEnabled>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d161      	bne.n	8002cac <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <ADC_Enable+0xe8>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00d      	beq.n	8002c12 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfa:	f043 0210 	orr.w	r2, r3, #16
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c06:	f043 0201 	orr.w	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e04d      	b.n	8002cae <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff f998 	bl	8001f4c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c1c:	f7fe ffe6 	bl	8001bec <HAL_GetTick>
 8002c20:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c22:	4826      	ldr	r0, [pc, #152]	; (8002cbc <ADC_Enable+0xec>)
 8002c24:	f7ff f928 	bl	8001e78 <LL_ADC_GetMultimode>
 8002c28:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a24      	ldr	r2, [pc, #144]	; (8002cc0 <ADC_Enable+0xf0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d002      	beq.n	8002c3a <ADC_Enable+0x6a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	e000      	b.n	8002c3c <ADC_Enable+0x6c>
 8002c3a:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <ADC_Enable+0xf4>)
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d02c      	beq.n	8002c9e <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d130      	bne.n	8002cac <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c4a:	e028      	b.n	8002c9e <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff f98f 	bl	8001f74 <LL_ADC_IsEnabled>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d104      	bne.n	8002c66 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff f973 	bl	8001f4c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c66:	f7fe ffc1 	bl	8001bec <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d914      	bls.n	8002c9e <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d00d      	beq.n	8002c9e <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	f043 0210 	orr.w	r2, r3, #16
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e007      	b.n	8002cae <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d1cf      	bne.n	8002c4c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	8000003f 	.word	0x8000003f
 8002cbc:	40022300 	.word	0x40022300
 8002cc0:	40022100 	.word	0x40022100
 8002cc4:	40022000 	.word	0x40022000

08002cc8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002cd0:	4b60      	ldr	r3, [pc, #384]	; (8002e54 <ADC_ConfigureBoostMode+0x18c>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01c      	beq.n	8002d16 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002cdc:	f002 ff22 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8002ce0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cea:	d010      	beq.n	8002d0e <ADC_ConfigureBoostMode+0x46>
 8002cec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cf0:	d873      	bhi.n	8002dda <ADC_ConfigureBoostMode+0x112>
 8002cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf6:	d002      	beq.n	8002cfe <ADC_ConfigureBoostMode+0x36>
 8002cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cfc:	d16d      	bne.n	8002dda <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	0c1b      	lsrs	r3, r3, #16
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	60fb      	str	r3, [r7, #12]
        break;
 8002d0c:	e068      	b.n	8002de0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	089b      	lsrs	r3, r3, #2
 8002d12:	60fb      	str	r3, [r7, #12]
        break;
 8002d14:	e064      	b.n	8002de0 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002d16:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d1a:	f04f 0100 	mov.w	r1, #0
 8002d1e:	f004 f91b 	bl	8006f58 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d22:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002d2c:	d051      	beq.n	8002dd2 <ADC_ConfigureBoostMode+0x10a>
 8002d2e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002d32:	d854      	bhi.n	8002dde <ADC_ConfigureBoostMode+0x116>
 8002d34:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002d38:	d047      	beq.n	8002dca <ADC_ConfigureBoostMode+0x102>
 8002d3a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002d3e:	d84e      	bhi.n	8002dde <ADC_ConfigureBoostMode+0x116>
 8002d40:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002d44:	d03d      	beq.n	8002dc2 <ADC_ConfigureBoostMode+0xfa>
 8002d46:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002d4a:	d848      	bhi.n	8002dde <ADC_ConfigureBoostMode+0x116>
 8002d4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d50:	d033      	beq.n	8002dba <ADC_ConfigureBoostMode+0xf2>
 8002d52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d56:	d842      	bhi.n	8002dde <ADC_ConfigureBoostMode+0x116>
 8002d58:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002d5c:	d029      	beq.n	8002db2 <ADC_ConfigureBoostMode+0xea>
 8002d5e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002d62:	d83c      	bhi.n	8002dde <ADC_ConfigureBoostMode+0x116>
 8002d64:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002d68:	d01a      	beq.n	8002da0 <ADC_ConfigureBoostMode+0xd8>
 8002d6a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002d6e:	d836      	bhi.n	8002dde <ADC_ConfigureBoostMode+0x116>
 8002d70:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002d74:	d014      	beq.n	8002da0 <ADC_ConfigureBoostMode+0xd8>
 8002d76:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002d7a:	d830      	bhi.n	8002dde <ADC_ConfigureBoostMode+0x116>
 8002d7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d80:	d00e      	beq.n	8002da0 <ADC_ConfigureBoostMode+0xd8>
 8002d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d86:	d82a      	bhi.n	8002dde <ADC_ConfigureBoostMode+0x116>
 8002d88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d8c:	d008      	beq.n	8002da0 <ADC_ConfigureBoostMode+0xd8>
 8002d8e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d92:	d824      	bhi.n	8002dde <ADC_ConfigureBoostMode+0x116>
 8002d94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d98:	d002      	beq.n	8002da0 <ADC_ConfigureBoostMode+0xd8>
 8002d9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d9e:	d11e      	bne.n	8002dde <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	0c9b      	lsrs	r3, r3, #18
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dae:	60fb      	str	r3, [r7, #12]
        break;
 8002db0:	e016      	b.n	8002de0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
        break;
 8002db8:	e012      	b.n	8002de0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	60fb      	str	r3, [r7, #12]
        break;
 8002dc0:	e00e      	b.n	8002de0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	099b      	lsrs	r3, r3, #6
 8002dc6:	60fb      	str	r3, [r7, #12]
        break;
 8002dc8:	e00a      	b.n	8002de0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	09db      	lsrs	r3, r3, #7
 8002dce:	60fb      	str	r3, [r7, #12]
        break;
 8002dd0:	e006      	b.n	8002de0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	60fb      	str	r3, [r7, #12]
        break;
 8002dd8:	e002      	b.n	8002de0 <ADC_ConfigureBoostMode+0x118>
        break;
 8002dda:	bf00      	nop
 8002ddc:	e000      	b.n	8002de0 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002dde:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	085b      	lsrs	r3, r3, #1
 8002de4:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4a1b      	ldr	r2, [pc, #108]	; (8002e58 <ADC_ConfigureBoostMode+0x190>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d808      	bhi.n	8002e00 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002dfc:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002dfe:	e025      	b.n	8002e4c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a16      	ldr	r2, [pc, #88]	; (8002e5c <ADC_ConfigureBoostMode+0x194>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d80a      	bhi.n	8002e1e <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e1a:	609a      	str	r2, [r3, #8]
}
 8002e1c:	e016      	b.n	8002e4c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4a0f      	ldr	r2, [pc, #60]	; (8002e60 <ADC_ConfigureBoostMode+0x198>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d80a      	bhi.n	8002e3c <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e38:	609a      	str	r2, [r3, #8]
}
 8002e3a:	e007      	b.n	8002e4c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002e4a:	609a      	str	r2, [r3, #8]
}
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40022300 	.word	0x40022300
 8002e58:	005f5e10 	.word	0x005f5e10
 8002e5c:	00bebc20 	.word	0x00bebc20
 8002e60:	017d7840 	.word	0x017d7840

08002e64 <LL_ADC_IsEnabled>:
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <LL_ADC_IsEnabled+0x18>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <LL_ADC_IsEnabled+0x1a>
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <LL_ADC_REG_IsConversionOngoing>:
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d101      	bne.n	8002ea2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b09f      	sub	sp, #124	; 0x7c
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e080      	b.n	8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a3d      	ldr	r2, [pc, #244]	; (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d102      	bne.n	8002eee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ee8:	4b3c      	ldr	r3, [pc, #240]	; (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	e001      	b.n	8002ef2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10b      	bne.n	8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e05f      	b.n	8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff ffb9 	bl	8002e8a <LL_ADC_REG_IsConversionOngoing>
 8002f18:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ffb3 	bl	8002e8a <LL_ADC_REG_IsConversionOngoing>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d141      	bne.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d13e      	bne.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f30:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002f32:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d020      	beq.n	8002f7e <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f4e:	4822      	ldr	r0, [pc, #136]	; (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002f50:	f7ff ff88 	bl	8002e64 <LL_ADC_IsEnabled>
 8002f54:	4604      	mov	r4, r0
 8002f56:	4821      	ldr	r0, [pc, #132]	; (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002f58:	f7ff ff84 	bl	8002e64 <LL_ADC_IsEnabled>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4323      	orrs	r3, r4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d12e      	bne.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	6811      	ldr	r1, [r2, #0]
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	6892      	ldr	r2, [r2, #8]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	431a      	orrs	r2, r3
 8002f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f7c:	e021      	b.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f88:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f8a:	4813      	ldr	r0, [pc, #76]	; (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002f8c:	f7ff ff6a 	bl	8002e64 <LL_ADC_IsEnabled>
 8002f90:	4604      	mov	r4, r0
 8002f92:	4812      	ldr	r0, [pc, #72]	; (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002f94:	f7ff ff66 	bl	8002e64 <LL_ADC_IsEnabled>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4323      	orrs	r3, r4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d110      	bne.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002faa:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fac:	e009      	b.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	f043 0220 	orr.w	r2, r3, #32
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002fc0:	e000      	b.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fc2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fcc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	377c      	adds	r7, #124	; 0x7c
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd90      	pop	{r4, r7, pc}
 8002fd8:	40022000 	.word	0x40022000
 8002fdc:	40022100 	.word	0x40022100
 8002fe0:	40022300 	.word	0x40022300
 8002fe4:	fffff0e0 	.word	0xfffff0e0

08002fe8 <__NVIC_SetPriorityGrouping>:
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <__NVIC_SetPriorityGrouping+0x40>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 8003012:	4313      	orrs	r3, r2
 8003014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003016:	4a04      	ldr	r2, [pc, #16]	; (8003028 <__NVIC_SetPriorityGrouping+0x40>)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	60d3      	str	r3, [r2, #12]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00
 800302c:	05fa0000 	.word	0x05fa0000

08003030 <__NVIC_GetPriorityGrouping>:
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <__NVIC_GetPriorityGrouping+0x18>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	f003 0307 	and.w	r3, r3, #7
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_EnableIRQ>:
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db0b      	blt.n	8003076 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4907      	ldr	r1, [pc, #28]	; (8003084 <__NVIC_EnableIRQ+0x38>)
 8003066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2001      	movs	r0, #1
 800306e:	fa00 f202 	lsl.w	r2, r0, r2
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000e100 	.word	0xe000e100

08003088 <__NVIC_SetPriority>:
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003098:	2b00      	cmp	r3, #0
 800309a:	db0a      	blt.n	80030b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	490c      	ldr	r1, [pc, #48]	; (80030d4 <__NVIC_SetPriority+0x4c>)
 80030a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030a6:	0112      	lsls	r2, r2, #4
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	440b      	add	r3, r1
 80030ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80030b0:	e00a      	b.n	80030c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4908      	ldr	r1, [pc, #32]	; (80030d8 <__NVIC_SetPriority+0x50>)
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3b04      	subs	r3, #4
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	440b      	add	r3, r1
 80030c6:	761a      	strb	r2, [r3, #24]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f1c3 0307 	rsb	r3, r3, #7
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	bf28      	it	cs
 80030fa:	2304      	movcs	r3, #4
 80030fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3304      	adds	r3, #4
 8003102:	2b06      	cmp	r3, #6
 8003104:	d902      	bls.n	800310c <NVIC_EncodePriority+0x30>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3b03      	subs	r3, #3
 800310a:	e000      	b.n	800310e <NVIC_EncodePriority+0x32>
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003124:	f04f 31ff 	mov.w	r1, #4294967295
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	43d9      	mvns	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	4313      	orrs	r3, r2
         );
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	; 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003154:	d301      	bcc.n	800315a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003156:	2301      	movs	r3, #1
 8003158:	e00f      	b.n	800317a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315a:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <SysTick_Config+0x40>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003162:	210f      	movs	r1, #15
 8003164:	f04f 30ff 	mov.w	r0, #4294967295
 8003168:	f7ff ff8e 	bl	8003088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <SysTick_Config+0x40>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003172:	4b04      	ldr	r3, [pc, #16]	; (8003184 <SysTick_Config+0x40>)
 8003174:	2207      	movs	r2, #7
 8003176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	e000e010 	.word	0xe000e010

08003188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff29 	bl	8002fe8 <__NVIC_SetPriorityGrouping>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031ac:	f7ff ff40 	bl	8003030 <__NVIC_GetPriorityGrouping>
 80031b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	6978      	ldr	r0, [r7, #20]
 80031b8:	f7ff ff90 	bl	80030dc <NVIC_EncodePriority>
 80031bc:	4602      	mov	r2, r0
 80031be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031c2:	4611      	mov	r1, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff5f 	bl	8003088 <__NVIC_SetPriority>
}
 80031ca:	bf00      	nop
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	4603      	mov	r3, r0
 80031da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff33 	bl	800304c <__NVIC_EnableIRQ>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff ffa4 	bl	8003144 <SysTick_Config>
 80031fc:	4603      	mov	r3, r0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003210:	f7fe fcec 	bl	8001bec <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e2dc      	b.n	80037da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d008      	beq.n	800323e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2280      	movs	r2, #128	; 0x80
 8003230:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e2cd      	b.n	80037da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a76      	ldr	r2, [pc, #472]	; (800341c <HAL_DMA_Abort+0x214>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d04a      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a74      	ldr	r2, [pc, #464]	; (8003420 <HAL_DMA_Abort+0x218>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d045      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a73      	ldr	r2, [pc, #460]	; (8003424 <HAL_DMA_Abort+0x21c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d040      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a71      	ldr	r2, [pc, #452]	; (8003428 <HAL_DMA_Abort+0x220>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d03b      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a70      	ldr	r2, [pc, #448]	; (800342c <HAL_DMA_Abort+0x224>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d036      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a6e      	ldr	r2, [pc, #440]	; (8003430 <HAL_DMA_Abort+0x228>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d031      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6d      	ldr	r2, [pc, #436]	; (8003434 <HAL_DMA_Abort+0x22c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d02c      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a6b      	ldr	r2, [pc, #428]	; (8003438 <HAL_DMA_Abort+0x230>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d027      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a6a      	ldr	r2, [pc, #424]	; (800343c <HAL_DMA_Abort+0x234>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d022      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a68      	ldr	r2, [pc, #416]	; (8003440 <HAL_DMA_Abort+0x238>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01d      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a67      	ldr	r2, [pc, #412]	; (8003444 <HAL_DMA_Abort+0x23c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d018      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a65      	ldr	r2, [pc, #404]	; (8003448 <HAL_DMA_Abort+0x240>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d013      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a64      	ldr	r2, [pc, #400]	; (800344c <HAL_DMA_Abort+0x244>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00e      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a62      	ldr	r2, [pc, #392]	; (8003450 <HAL_DMA_Abort+0x248>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d009      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a61      	ldr	r2, [pc, #388]	; (8003454 <HAL_DMA_Abort+0x24c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d004      	beq.n	80032de <HAL_DMA_Abort+0xd6>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a5f      	ldr	r2, [pc, #380]	; (8003458 <HAL_DMA_Abort+0x250>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d101      	bne.n	80032e2 <HAL_DMA_Abort+0xda>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <HAL_DMA_Abort+0xdc>
 80032e2:	2300      	movs	r3, #0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d013      	beq.n	8003310 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 021e 	bic.w	r2, r2, #30
 80032f6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003306:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	e00a      	b.n	8003326 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 020e 	bic.w	r2, r2, #14
 800331e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a3c      	ldr	r2, [pc, #240]	; (800341c <HAL_DMA_Abort+0x214>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d072      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a3a      	ldr	r2, [pc, #232]	; (8003420 <HAL_DMA_Abort+0x218>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d06d      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a39      	ldr	r2, [pc, #228]	; (8003424 <HAL_DMA_Abort+0x21c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d068      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a37      	ldr	r2, [pc, #220]	; (8003428 <HAL_DMA_Abort+0x220>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d063      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a36      	ldr	r2, [pc, #216]	; (800342c <HAL_DMA_Abort+0x224>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d05e      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a34      	ldr	r2, [pc, #208]	; (8003430 <HAL_DMA_Abort+0x228>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d059      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a33      	ldr	r2, [pc, #204]	; (8003434 <HAL_DMA_Abort+0x22c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d054      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a31      	ldr	r2, [pc, #196]	; (8003438 <HAL_DMA_Abort+0x230>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d04f      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a30      	ldr	r2, [pc, #192]	; (800343c <HAL_DMA_Abort+0x234>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d04a      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a2e      	ldr	r2, [pc, #184]	; (8003440 <HAL_DMA_Abort+0x238>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d045      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2d      	ldr	r2, [pc, #180]	; (8003444 <HAL_DMA_Abort+0x23c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d040      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a2b      	ldr	r2, [pc, #172]	; (8003448 <HAL_DMA_Abort+0x240>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d03b      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a2a      	ldr	r2, [pc, #168]	; (800344c <HAL_DMA_Abort+0x244>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d036      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a28      	ldr	r2, [pc, #160]	; (8003450 <HAL_DMA_Abort+0x248>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d031      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a27      	ldr	r2, [pc, #156]	; (8003454 <HAL_DMA_Abort+0x24c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d02c      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a25      	ldr	r2, [pc, #148]	; (8003458 <HAL_DMA_Abort+0x250>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d027      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a24      	ldr	r2, [pc, #144]	; (800345c <HAL_DMA_Abort+0x254>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d022      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a22      	ldr	r2, [pc, #136]	; (8003460 <HAL_DMA_Abort+0x258>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01d      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a21      	ldr	r2, [pc, #132]	; (8003464 <HAL_DMA_Abort+0x25c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d018      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1f      	ldr	r2, [pc, #124]	; (8003468 <HAL_DMA_Abort+0x260>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d013      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1e      	ldr	r2, [pc, #120]	; (800346c <HAL_DMA_Abort+0x264>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00e      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1c      	ldr	r2, [pc, #112]	; (8003470 <HAL_DMA_Abort+0x268>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d009      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1b      	ldr	r2, [pc, #108]	; (8003474 <HAL_DMA_Abort+0x26c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_DMA_Abort+0x20e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a19      	ldr	r2, [pc, #100]	; (8003478 <HAL_DMA_Abort+0x270>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d132      	bne.n	800347c <HAL_DMA_Abort+0x274>
 8003416:	2301      	movs	r3, #1
 8003418:	e031      	b.n	800347e <HAL_DMA_Abort+0x276>
 800341a:	bf00      	nop
 800341c:	40020010 	.word	0x40020010
 8003420:	40020028 	.word	0x40020028
 8003424:	40020040 	.word	0x40020040
 8003428:	40020058 	.word	0x40020058
 800342c:	40020070 	.word	0x40020070
 8003430:	40020088 	.word	0x40020088
 8003434:	400200a0 	.word	0x400200a0
 8003438:	400200b8 	.word	0x400200b8
 800343c:	40020410 	.word	0x40020410
 8003440:	40020428 	.word	0x40020428
 8003444:	40020440 	.word	0x40020440
 8003448:	40020458 	.word	0x40020458
 800344c:	40020470 	.word	0x40020470
 8003450:	40020488 	.word	0x40020488
 8003454:	400204a0 	.word	0x400204a0
 8003458:	400204b8 	.word	0x400204b8
 800345c:	58025408 	.word	0x58025408
 8003460:	5802541c 	.word	0x5802541c
 8003464:	58025430 	.word	0x58025430
 8003468:	58025444 	.word	0x58025444
 800346c:	58025458 	.word	0x58025458
 8003470:	5802546c 	.word	0x5802546c
 8003474:	58025480 	.word	0x58025480
 8003478:	58025494 	.word	0x58025494
 800347c:	2300      	movs	r3, #0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003490:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a6d      	ldr	r2, [pc, #436]	; (800364c <HAL_DMA_Abort+0x444>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d04a      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a6b      	ldr	r2, [pc, #428]	; (8003650 <HAL_DMA_Abort+0x448>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d045      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a6a      	ldr	r2, [pc, #424]	; (8003654 <HAL_DMA_Abort+0x44c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d040      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a68      	ldr	r2, [pc, #416]	; (8003658 <HAL_DMA_Abort+0x450>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d03b      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a67      	ldr	r2, [pc, #412]	; (800365c <HAL_DMA_Abort+0x454>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d036      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a65      	ldr	r2, [pc, #404]	; (8003660 <HAL_DMA_Abort+0x458>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d031      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a64      	ldr	r2, [pc, #400]	; (8003664 <HAL_DMA_Abort+0x45c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d02c      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a62      	ldr	r2, [pc, #392]	; (8003668 <HAL_DMA_Abort+0x460>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d027      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a61      	ldr	r2, [pc, #388]	; (800366c <HAL_DMA_Abort+0x464>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d022      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a5f      	ldr	r2, [pc, #380]	; (8003670 <HAL_DMA_Abort+0x468>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01d      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a5e      	ldr	r2, [pc, #376]	; (8003674 <HAL_DMA_Abort+0x46c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d018      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a5c      	ldr	r2, [pc, #368]	; (8003678 <HAL_DMA_Abort+0x470>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a5b      	ldr	r2, [pc, #364]	; (800367c <HAL_DMA_Abort+0x474>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00e      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a59      	ldr	r2, [pc, #356]	; (8003680 <HAL_DMA_Abort+0x478>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d009      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a58      	ldr	r2, [pc, #352]	; (8003684 <HAL_DMA_Abort+0x47c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_DMA_Abort+0x32a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a56      	ldr	r2, [pc, #344]	; (8003688 <HAL_DMA_Abort+0x480>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d108      	bne.n	8003544 <HAL_DMA_Abort+0x33c>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0201 	bic.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	e007      	b.n	8003554 <HAL_DMA_Abort+0x34c>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0201 	bic.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003554:	e013      	b.n	800357e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003556:	f7fe fb49 	bl	8001bec <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b05      	cmp	r3, #5
 8003562:	d90c      	bls.n	800357e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2203      	movs	r2, #3
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e12d      	b.n	80037da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e5      	bne.n	8003556 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a2f      	ldr	r2, [pc, #188]	; (800364c <HAL_DMA_Abort+0x444>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d04a      	beq.n	800362a <HAL_DMA_Abort+0x422>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a2d      	ldr	r2, [pc, #180]	; (8003650 <HAL_DMA_Abort+0x448>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d045      	beq.n	800362a <HAL_DMA_Abort+0x422>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a2c      	ldr	r2, [pc, #176]	; (8003654 <HAL_DMA_Abort+0x44c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d040      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a2a      	ldr	r2, [pc, #168]	; (8003658 <HAL_DMA_Abort+0x450>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d03b      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a29      	ldr	r2, [pc, #164]	; (800365c <HAL_DMA_Abort+0x454>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d036      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a27      	ldr	r2, [pc, #156]	; (8003660 <HAL_DMA_Abort+0x458>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d031      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a26      	ldr	r2, [pc, #152]	; (8003664 <HAL_DMA_Abort+0x45c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d02c      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a24      	ldr	r2, [pc, #144]	; (8003668 <HAL_DMA_Abort+0x460>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d027      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a23      	ldr	r2, [pc, #140]	; (800366c <HAL_DMA_Abort+0x464>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d022      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a21      	ldr	r2, [pc, #132]	; (8003670 <HAL_DMA_Abort+0x468>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01d      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a20      	ldr	r2, [pc, #128]	; (8003674 <HAL_DMA_Abort+0x46c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d018      	beq.n	800362a <HAL_DMA_Abort+0x422>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1e      	ldr	r2, [pc, #120]	; (8003678 <HAL_DMA_Abort+0x470>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <HAL_DMA_Abort+0x422>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1d      	ldr	r2, [pc, #116]	; (800367c <HAL_DMA_Abort+0x474>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00e      	beq.n	800362a <HAL_DMA_Abort+0x422>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1b      	ldr	r2, [pc, #108]	; (8003680 <HAL_DMA_Abort+0x478>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d009      	beq.n	800362a <HAL_DMA_Abort+0x422>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1a      	ldr	r2, [pc, #104]	; (8003684 <HAL_DMA_Abort+0x47c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d004      	beq.n	800362a <HAL_DMA_Abort+0x422>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a18      	ldr	r2, [pc, #96]	; (8003688 <HAL_DMA_Abort+0x480>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_DMA_Abort+0x426>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_DMA_Abort+0x428>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d02b      	beq.n	800368c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003638:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	223f      	movs	r2, #63	; 0x3f
 8003644:	409a      	lsls	r2, r3
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	e02a      	b.n	80036a2 <HAL_DMA_Abort+0x49a>
 800364c:	40020010 	.word	0x40020010
 8003650:	40020028 	.word	0x40020028
 8003654:	40020040 	.word	0x40020040
 8003658:	40020058 	.word	0x40020058
 800365c:	40020070 	.word	0x40020070
 8003660:	40020088 	.word	0x40020088
 8003664:	400200a0 	.word	0x400200a0
 8003668:	400200b8 	.word	0x400200b8
 800366c:	40020410 	.word	0x40020410
 8003670:	40020428 	.word	0x40020428
 8003674:	40020440 	.word	0x40020440
 8003678:	40020458 	.word	0x40020458
 800367c:	40020470 	.word	0x40020470
 8003680:	40020488 	.word	0x40020488
 8003684:	400204a0 	.word	0x400204a0
 8003688:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	2201      	movs	r2, #1
 800369c:	409a      	lsls	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a4f      	ldr	r2, [pc, #316]	; (80037e4 <HAL_DMA_Abort+0x5dc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d072      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a4d      	ldr	r2, [pc, #308]	; (80037e8 <HAL_DMA_Abort+0x5e0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d06d      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a4c      	ldr	r2, [pc, #304]	; (80037ec <HAL_DMA_Abort+0x5e4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d068      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a4a      	ldr	r2, [pc, #296]	; (80037f0 <HAL_DMA_Abort+0x5e8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d063      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a49      	ldr	r2, [pc, #292]	; (80037f4 <HAL_DMA_Abort+0x5ec>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d05e      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a47      	ldr	r2, [pc, #284]	; (80037f8 <HAL_DMA_Abort+0x5f0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d059      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a46      	ldr	r2, [pc, #280]	; (80037fc <HAL_DMA_Abort+0x5f4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d054      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a44      	ldr	r2, [pc, #272]	; (8003800 <HAL_DMA_Abort+0x5f8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d04f      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a43      	ldr	r2, [pc, #268]	; (8003804 <HAL_DMA_Abort+0x5fc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d04a      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a41      	ldr	r2, [pc, #260]	; (8003808 <HAL_DMA_Abort+0x600>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d045      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a40      	ldr	r2, [pc, #256]	; (800380c <HAL_DMA_Abort+0x604>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d040      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a3e      	ldr	r2, [pc, #248]	; (8003810 <HAL_DMA_Abort+0x608>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d03b      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a3d      	ldr	r2, [pc, #244]	; (8003814 <HAL_DMA_Abort+0x60c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d036      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a3b      	ldr	r2, [pc, #236]	; (8003818 <HAL_DMA_Abort+0x610>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d031      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a3a      	ldr	r2, [pc, #232]	; (800381c <HAL_DMA_Abort+0x614>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d02c      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a38      	ldr	r2, [pc, #224]	; (8003820 <HAL_DMA_Abort+0x618>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d027      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a37      	ldr	r2, [pc, #220]	; (8003824 <HAL_DMA_Abort+0x61c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d022      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a35      	ldr	r2, [pc, #212]	; (8003828 <HAL_DMA_Abort+0x620>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d01d      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a34      	ldr	r2, [pc, #208]	; (800382c <HAL_DMA_Abort+0x624>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d018      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a32      	ldr	r2, [pc, #200]	; (8003830 <HAL_DMA_Abort+0x628>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a31      	ldr	r2, [pc, #196]	; (8003834 <HAL_DMA_Abort+0x62c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00e      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a2f      	ldr	r2, [pc, #188]	; (8003838 <HAL_DMA_Abort+0x630>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d009      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a2e      	ldr	r2, [pc, #184]	; (800383c <HAL_DMA_Abort+0x634>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_DMA_Abort+0x58a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a2c      	ldr	r2, [pc, #176]	; (8003840 <HAL_DMA_Abort+0x638>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <HAL_DMA_Abort+0x58e>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <HAL_DMA_Abort+0x590>
 8003796:	2300      	movs	r3, #0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d015      	beq.n	80037c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80037a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00c      	beq.n	80037c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40020010 	.word	0x40020010
 80037e8:	40020028 	.word	0x40020028
 80037ec:	40020040 	.word	0x40020040
 80037f0:	40020058 	.word	0x40020058
 80037f4:	40020070 	.word	0x40020070
 80037f8:	40020088 	.word	0x40020088
 80037fc:	400200a0 	.word	0x400200a0
 8003800:	400200b8 	.word	0x400200b8
 8003804:	40020410 	.word	0x40020410
 8003808:	40020428 	.word	0x40020428
 800380c:	40020440 	.word	0x40020440
 8003810:	40020458 	.word	0x40020458
 8003814:	40020470 	.word	0x40020470
 8003818:	40020488 	.word	0x40020488
 800381c:	400204a0 	.word	0x400204a0
 8003820:	400204b8 	.word	0x400204b8
 8003824:	58025408 	.word	0x58025408
 8003828:	5802541c 	.word	0x5802541c
 800382c:	58025430 	.word	0x58025430
 8003830:	58025444 	.word	0x58025444
 8003834:	58025458 	.word	0x58025458
 8003838:	5802546c 	.word	0x5802546c
 800383c:	58025480 	.word	0x58025480
 8003840:	58025494 	.word	0x58025494

08003844 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e237      	b.n	8003cc6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d004      	beq.n	800386c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2280      	movs	r2, #128	; 0x80
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e22c      	b.n	8003cc6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a5c      	ldr	r2, [pc, #368]	; (80039e4 <HAL_DMA_Abort_IT+0x1a0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d04a      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a5b      	ldr	r2, [pc, #364]	; (80039e8 <HAL_DMA_Abort_IT+0x1a4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d045      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a59      	ldr	r2, [pc, #356]	; (80039ec <HAL_DMA_Abort_IT+0x1a8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d040      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a58      	ldr	r2, [pc, #352]	; (80039f0 <HAL_DMA_Abort_IT+0x1ac>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d03b      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a56      	ldr	r2, [pc, #344]	; (80039f4 <HAL_DMA_Abort_IT+0x1b0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d036      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a55      	ldr	r2, [pc, #340]	; (80039f8 <HAL_DMA_Abort_IT+0x1b4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d031      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a53      	ldr	r2, [pc, #332]	; (80039fc <HAL_DMA_Abort_IT+0x1b8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d02c      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a52      	ldr	r2, [pc, #328]	; (8003a00 <HAL_DMA_Abort_IT+0x1bc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d027      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a50      	ldr	r2, [pc, #320]	; (8003a04 <HAL_DMA_Abort_IT+0x1c0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d022      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a4f      	ldr	r2, [pc, #316]	; (8003a08 <HAL_DMA_Abort_IT+0x1c4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d01d      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a4d      	ldr	r2, [pc, #308]	; (8003a0c <HAL_DMA_Abort_IT+0x1c8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d018      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a4c      	ldr	r2, [pc, #304]	; (8003a10 <HAL_DMA_Abort_IT+0x1cc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d013      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a4a      	ldr	r2, [pc, #296]	; (8003a14 <HAL_DMA_Abort_IT+0x1d0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00e      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a49      	ldr	r2, [pc, #292]	; (8003a18 <HAL_DMA_Abort_IT+0x1d4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d009      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a47      	ldr	r2, [pc, #284]	; (8003a1c <HAL_DMA_Abort_IT+0x1d8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <HAL_DMA_Abort_IT+0xc8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a46      	ldr	r2, [pc, #280]	; (8003a20 <HAL_DMA_Abort_IT+0x1dc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d101      	bne.n	8003910 <HAL_DMA_Abort_IT+0xcc>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_DMA_Abort_IT+0xce>
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8086 	beq.w	8003a24 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2204      	movs	r2, #4
 800391c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a2f      	ldr	r2, [pc, #188]	; (80039e4 <HAL_DMA_Abort_IT+0x1a0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d04a      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a2e      	ldr	r2, [pc, #184]	; (80039e8 <HAL_DMA_Abort_IT+0x1a4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d045      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a2c      	ldr	r2, [pc, #176]	; (80039ec <HAL_DMA_Abort_IT+0x1a8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d040      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a2b      	ldr	r2, [pc, #172]	; (80039f0 <HAL_DMA_Abort_IT+0x1ac>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d03b      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a29      	ldr	r2, [pc, #164]	; (80039f4 <HAL_DMA_Abort_IT+0x1b0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d036      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a28      	ldr	r2, [pc, #160]	; (80039f8 <HAL_DMA_Abort_IT+0x1b4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d031      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a26      	ldr	r2, [pc, #152]	; (80039fc <HAL_DMA_Abort_IT+0x1b8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d02c      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a25      	ldr	r2, [pc, #148]	; (8003a00 <HAL_DMA_Abort_IT+0x1bc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d027      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a23      	ldr	r2, [pc, #140]	; (8003a04 <HAL_DMA_Abort_IT+0x1c0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d022      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a22      	ldr	r2, [pc, #136]	; (8003a08 <HAL_DMA_Abort_IT+0x1c4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d01d      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a20      	ldr	r2, [pc, #128]	; (8003a0c <HAL_DMA_Abort_IT+0x1c8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d018      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1f      	ldr	r2, [pc, #124]	; (8003a10 <HAL_DMA_Abort_IT+0x1cc>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d013      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1d      	ldr	r2, [pc, #116]	; (8003a14 <HAL_DMA_Abort_IT+0x1d0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00e      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1c      	ldr	r2, [pc, #112]	; (8003a18 <HAL_DMA_Abort_IT+0x1d4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d009      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1a      	ldr	r2, [pc, #104]	; (8003a1c <HAL_DMA_Abort_IT+0x1d8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d004      	beq.n	80039c0 <HAL_DMA_Abort_IT+0x17c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a19      	ldr	r2, [pc, #100]	; (8003a20 <HAL_DMA_Abort_IT+0x1dc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d108      	bne.n	80039d2 <HAL_DMA_Abort_IT+0x18e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e178      	b.n	8003cc4 <HAL_DMA_Abort_IT+0x480>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0201 	bic.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e16f      	b.n	8003cc4 <HAL_DMA_Abort_IT+0x480>
 80039e4:	40020010 	.word	0x40020010
 80039e8:	40020028 	.word	0x40020028
 80039ec:	40020040 	.word	0x40020040
 80039f0:	40020058 	.word	0x40020058
 80039f4:	40020070 	.word	0x40020070
 80039f8:	40020088 	.word	0x40020088
 80039fc:	400200a0 	.word	0x400200a0
 8003a00:	400200b8 	.word	0x400200b8
 8003a04:	40020410 	.word	0x40020410
 8003a08:	40020428 	.word	0x40020428
 8003a0c:	40020440 	.word	0x40020440
 8003a10:	40020458 	.word	0x40020458
 8003a14:	40020470 	.word	0x40020470
 8003a18:	40020488 	.word	0x40020488
 8003a1c:	400204a0 	.word	0x400204a0
 8003a20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 020e 	bic.w	r2, r2, #14
 8003a32:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a6c      	ldr	r2, [pc, #432]	; (8003bec <HAL_DMA_Abort_IT+0x3a8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d04a      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a6b      	ldr	r2, [pc, #428]	; (8003bf0 <HAL_DMA_Abort_IT+0x3ac>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d045      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a69      	ldr	r2, [pc, #420]	; (8003bf4 <HAL_DMA_Abort_IT+0x3b0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d040      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a68      	ldr	r2, [pc, #416]	; (8003bf8 <HAL_DMA_Abort_IT+0x3b4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d03b      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a66      	ldr	r2, [pc, #408]	; (8003bfc <HAL_DMA_Abort_IT+0x3b8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d036      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a65      	ldr	r2, [pc, #404]	; (8003c00 <HAL_DMA_Abort_IT+0x3bc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d031      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a63      	ldr	r2, [pc, #396]	; (8003c04 <HAL_DMA_Abort_IT+0x3c0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d02c      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a62      	ldr	r2, [pc, #392]	; (8003c08 <HAL_DMA_Abort_IT+0x3c4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d027      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a60      	ldr	r2, [pc, #384]	; (8003c0c <HAL_DMA_Abort_IT+0x3c8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d022      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a5f      	ldr	r2, [pc, #380]	; (8003c10 <HAL_DMA_Abort_IT+0x3cc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d01d      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a5d      	ldr	r2, [pc, #372]	; (8003c14 <HAL_DMA_Abort_IT+0x3d0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d018      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a5c      	ldr	r2, [pc, #368]	; (8003c18 <HAL_DMA_Abort_IT+0x3d4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d013      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a5a      	ldr	r2, [pc, #360]	; (8003c1c <HAL_DMA_Abort_IT+0x3d8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00e      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a59      	ldr	r2, [pc, #356]	; (8003c20 <HAL_DMA_Abort_IT+0x3dc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d009      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a57      	ldr	r2, [pc, #348]	; (8003c24 <HAL_DMA_Abort_IT+0x3e0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d004      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x290>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a56      	ldr	r2, [pc, #344]	; (8003c28 <HAL_DMA_Abort_IT+0x3e4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d108      	bne.n	8003ae6 <HAL_DMA_Abort_IT+0x2a2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0201 	bic.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e007      	b.n	8003af6 <HAL_DMA_Abort_IT+0x2b2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0201 	bic.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a3c      	ldr	r2, [pc, #240]	; (8003bec <HAL_DMA_Abort_IT+0x3a8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d072      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a3a      	ldr	r2, [pc, #232]	; (8003bf0 <HAL_DMA_Abort_IT+0x3ac>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d06d      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a39      	ldr	r2, [pc, #228]	; (8003bf4 <HAL_DMA_Abort_IT+0x3b0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d068      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a37      	ldr	r2, [pc, #220]	; (8003bf8 <HAL_DMA_Abort_IT+0x3b4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d063      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a36      	ldr	r2, [pc, #216]	; (8003bfc <HAL_DMA_Abort_IT+0x3b8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d05e      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a34      	ldr	r2, [pc, #208]	; (8003c00 <HAL_DMA_Abort_IT+0x3bc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d059      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a33      	ldr	r2, [pc, #204]	; (8003c04 <HAL_DMA_Abort_IT+0x3c0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d054      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a31      	ldr	r2, [pc, #196]	; (8003c08 <HAL_DMA_Abort_IT+0x3c4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d04f      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a30      	ldr	r2, [pc, #192]	; (8003c0c <HAL_DMA_Abort_IT+0x3c8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d04a      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2e      	ldr	r2, [pc, #184]	; (8003c10 <HAL_DMA_Abort_IT+0x3cc>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d045      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2d      	ldr	r2, [pc, #180]	; (8003c14 <HAL_DMA_Abort_IT+0x3d0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d040      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a2b      	ldr	r2, [pc, #172]	; (8003c18 <HAL_DMA_Abort_IT+0x3d4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d03b      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2a      	ldr	r2, [pc, #168]	; (8003c1c <HAL_DMA_Abort_IT+0x3d8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d036      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a28      	ldr	r2, [pc, #160]	; (8003c20 <HAL_DMA_Abort_IT+0x3dc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d031      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a27      	ldr	r2, [pc, #156]	; (8003c24 <HAL_DMA_Abort_IT+0x3e0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d02c      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a25      	ldr	r2, [pc, #148]	; (8003c28 <HAL_DMA_Abort_IT+0x3e4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d027      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a24      	ldr	r2, [pc, #144]	; (8003c2c <HAL_DMA_Abort_IT+0x3e8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d022      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a22      	ldr	r2, [pc, #136]	; (8003c30 <HAL_DMA_Abort_IT+0x3ec>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d01d      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a21      	ldr	r2, [pc, #132]	; (8003c34 <HAL_DMA_Abort_IT+0x3f0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d018      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1f      	ldr	r2, [pc, #124]	; (8003c38 <HAL_DMA_Abort_IT+0x3f4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d013      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1e      	ldr	r2, [pc, #120]	; (8003c3c <HAL_DMA_Abort_IT+0x3f8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00e      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1c      	ldr	r2, [pc, #112]	; (8003c40 <HAL_DMA_Abort_IT+0x3fc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d009      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1b      	ldr	r2, [pc, #108]	; (8003c44 <HAL_DMA_Abort_IT+0x400>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d004      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x3a2>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a19      	ldr	r2, [pc, #100]	; (8003c48 <HAL_DMA_Abort_IT+0x404>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d132      	bne.n	8003c4c <HAL_DMA_Abort_IT+0x408>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e031      	b.n	8003c4e <HAL_DMA_Abort_IT+0x40a>
 8003bea:	bf00      	nop
 8003bec:	40020010 	.word	0x40020010
 8003bf0:	40020028 	.word	0x40020028
 8003bf4:	40020040 	.word	0x40020040
 8003bf8:	40020058 	.word	0x40020058
 8003bfc:	40020070 	.word	0x40020070
 8003c00:	40020088 	.word	0x40020088
 8003c04:	400200a0 	.word	0x400200a0
 8003c08:	400200b8 	.word	0x400200b8
 8003c0c:	40020410 	.word	0x40020410
 8003c10:	40020428 	.word	0x40020428
 8003c14:	40020440 	.word	0x40020440
 8003c18:	40020458 	.word	0x40020458
 8003c1c:	40020470 	.word	0x40020470
 8003c20:	40020488 	.word	0x40020488
 8003c24:	400204a0 	.word	0x400204a0
 8003c28:	400204b8 	.word	0x400204b8
 8003c2c:	58025408 	.word	0x58025408
 8003c30:	5802541c 	.word	0x5802541c
 8003c34:	58025430 	.word	0x58025430
 8003c38:	58025444 	.word	0x58025444
 8003c3c:	58025458 	.word	0x58025458
 8003c40:	5802546c 	.word	0x5802546c
 8003c44:	58025480 	.word	0x58025480
 8003c48:	58025494 	.word	0x58025494
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d028      	beq.n	8003ca4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c60:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c66:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	2201      	movs	r2, #1
 8003c72:	409a      	lsls	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c80:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00c      	beq.n	8003ca4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c98:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ca2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop

08003cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	; 0x24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003cde:	4b89      	ldr	r3, [pc, #548]	; (8003f04 <HAL_GPIO_Init+0x234>)
 8003ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ce2:	e194      	b.n	800400e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	2101      	movs	r1, #1
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 8186 	beq.w	8004008 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d005      	beq.n	8003d14 <HAL_GPIO_Init+0x44>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d130      	bne.n	8003d76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	2203      	movs	r2, #3
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43db      	mvns	r3, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4013      	ands	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	091b      	lsrs	r3, r3, #4
 8003d60:	f003 0201 	and.w	r2, r3, #1
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d017      	beq.n	8003db2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43db      	mvns	r3, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4013      	ands	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d123      	bne.n	8003e06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	08da      	lsrs	r2, r3, #3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3208      	adds	r2, #8
 8003dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	220f      	movs	r2, #15
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	08da      	lsrs	r2, r3, #3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3208      	adds	r2, #8
 8003e00:	69b9      	ldr	r1, [r7, #24]
 8003e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	2203      	movs	r2, #3
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43db      	mvns	r3, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 0203 	and.w	r2, r3, #3
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 80e0 	beq.w	8004008 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e48:	4b2f      	ldr	r3, [pc, #188]	; (8003f08 <HAL_GPIO_Init+0x238>)
 8003e4a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003e4e:	4a2e      	ldr	r2, [pc, #184]	; (8003f08 <HAL_GPIO_Init+0x238>)
 8003e50:	f043 0302 	orr.w	r3, r3, #2
 8003e54:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003e58:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <HAL_GPIO_Init+0x238>)
 8003e5a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e66:	4a29      	ldr	r2, [pc, #164]	; (8003f0c <HAL_GPIO_Init+0x23c>)
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	089b      	lsrs	r3, r3, #2
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	220f      	movs	r2, #15
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a20      	ldr	r2, [pc, #128]	; (8003f10 <HAL_GPIO_Init+0x240>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d052      	beq.n	8003f38 <HAL_GPIO_Init+0x268>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a1f      	ldr	r2, [pc, #124]	; (8003f14 <HAL_GPIO_Init+0x244>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d031      	beq.n	8003efe <HAL_GPIO_Init+0x22e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <HAL_GPIO_Init+0x248>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d02b      	beq.n	8003efa <HAL_GPIO_Init+0x22a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a1d      	ldr	r2, [pc, #116]	; (8003f1c <HAL_GPIO_Init+0x24c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d025      	beq.n	8003ef6 <HAL_GPIO_Init+0x226>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a1c      	ldr	r2, [pc, #112]	; (8003f20 <HAL_GPIO_Init+0x250>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01f      	beq.n	8003ef2 <HAL_GPIO_Init+0x222>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a1b      	ldr	r2, [pc, #108]	; (8003f24 <HAL_GPIO_Init+0x254>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d019      	beq.n	8003eee <HAL_GPIO_Init+0x21e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a1a      	ldr	r2, [pc, #104]	; (8003f28 <HAL_GPIO_Init+0x258>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d013      	beq.n	8003eea <HAL_GPIO_Init+0x21a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a19      	ldr	r2, [pc, #100]	; (8003f2c <HAL_GPIO_Init+0x25c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00d      	beq.n	8003ee6 <HAL_GPIO_Init+0x216>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <HAL_GPIO_Init+0x260>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d007      	beq.n	8003ee2 <HAL_GPIO_Init+0x212>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a17      	ldr	r2, [pc, #92]	; (8003f34 <HAL_GPIO_Init+0x264>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d101      	bne.n	8003ede <HAL_GPIO_Init+0x20e>
 8003eda:	2309      	movs	r3, #9
 8003edc:	e02d      	b.n	8003f3a <HAL_GPIO_Init+0x26a>
 8003ede:	230a      	movs	r3, #10
 8003ee0:	e02b      	b.n	8003f3a <HAL_GPIO_Init+0x26a>
 8003ee2:	2308      	movs	r3, #8
 8003ee4:	e029      	b.n	8003f3a <HAL_GPIO_Init+0x26a>
 8003ee6:	2307      	movs	r3, #7
 8003ee8:	e027      	b.n	8003f3a <HAL_GPIO_Init+0x26a>
 8003eea:	2306      	movs	r3, #6
 8003eec:	e025      	b.n	8003f3a <HAL_GPIO_Init+0x26a>
 8003eee:	2305      	movs	r3, #5
 8003ef0:	e023      	b.n	8003f3a <HAL_GPIO_Init+0x26a>
 8003ef2:	2304      	movs	r3, #4
 8003ef4:	e021      	b.n	8003f3a <HAL_GPIO_Init+0x26a>
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e01f      	b.n	8003f3a <HAL_GPIO_Init+0x26a>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e01d      	b.n	8003f3a <HAL_GPIO_Init+0x26a>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e01b      	b.n	8003f3a <HAL_GPIO_Init+0x26a>
 8003f02:	bf00      	nop
 8003f04:	58000080 	.word	0x58000080
 8003f08:	58024400 	.word	0x58024400
 8003f0c:	58000400 	.word	0x58000400
 8003f10:	58020000 	.word	0x58020000
 8003f14:	58020400 	.word	0x58020400
 8003f18:	58020800 	.word	0x58020800
 8003f1c:	58020c00 	.word	0x58020c00
 8003f20:	58021000 	.word	0x58021000
 8003f24:	58021400 	.word	0x58021400
 8003f28:	58021800 	.word	0x58021800
 8003f2c:	58021c00 	.word	0x58021c00
 8003f30:	58022000 	.word	0x58022000
 8003f34:	58022400 	.word	0x58022400
 8003f38:	2300      	movs	r3, #0
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	f002 0203 	and.w	r2, r2, #3
 8003f40:	0092      	lsls	r2, r2, #2
 8003f42:	4093      	lsls	r3, r2
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f4a:	4938      	ldr	r1, [pc, #224]	; (800402c <HAL_GPIO_Init+0x35c>)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	3302      	adds	r3, #2
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003f7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	4013      	ands	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	3301      	adds	r3, #1
 800400c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	f47f ae63 	bne.w	8003ce4 <HAL_GPIO_Init+0x14>
  }
}
 800401e:	bf00      	nop
 8004020:	bf00      	nop
 8004022:	3724      	adds	r7, #36	; 0x24
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	58000400 	.word	0x58000400

08004030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	807b      	strh	r3, [r7, #2]
 800403c:	4613      	mov	r3, r2
 800403e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004040:	787b      	ldrb	r3, [r7, #1]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004046:	887a      	ldrh	r2, [r7, #2]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800404c:	e003      	b.n	8004056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800404e:	887b      	ldrh	r3, [r7, #2]
 8004050:	041a      	lsls	r2, r3, #16
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	619a      	str	r2, [r3, #24]
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e07f      	b.n	8004176 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fd f9ea 	bl	8001464 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2224      	movs	r2, #36	; 0x24
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d107      	bne.n	80040de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	e006      	b.n	80040ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d104      	bne.n	80040fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6859      	ldr	r1, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <HAL_I2C_Init+0x11c>)
 800410a:	430b      	orrs	r3, r1
 800410c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800411c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69d9      	ldr	r1, [r3, #28]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1a      	ldr	r2, [r3, #32]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	02008000 	.word	0x02008000

08004184 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af02      	add	r7, sp, #8
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	461a      	mov	r2, r3
 8004190:	460b      	mov	r3, r1
 8004192:	817b      	strh	r3, [r7, #10]
 8004194:	4613      	mov	r3, r2
 8004196:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	f040 80da 	bne.w	800435a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_I2C_Master_Transmit+0x30>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e0d3      	b.n	800435c <HAL_I2C_Master_Transmit+0x1d8>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041bc:	f7fd fd16 	bl	8001bec <HAL_GetTick>
 80041c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	2319      	movs	r3, #25
 80041c8:	2201      	movs	r2, #1
 80041ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f9e6 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e0be      	b.n	800435c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2221      	movs	r2, #33	; 0x21
 80041e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2210      	movs	r2, #16
 80041ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	893a      	ldrh	r2, [r7, #8]
 80041fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	2bff      	cmp	r3, #255	; 0xff
 800420e:	d90e      	bls.n	800422e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	22ff      	movs	r2, #255	; 0xff
 8004214:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421a:	b2da      	uxtb	r2, r3
 800421c:	8979      	ldrh	r1, [r7, #10]
 800421e:	4b51      	ldr	r3, [pc, #324]	; (8004364 <HAL_I2C_Master_Transmit+0x1e0>)
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 fbf6 	bl	8004a18 <I2C_TransferConfig>
 800422c:	e06c      	b.n	8004308 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423c:	b2da      	uxtb	r2, r3
 800423e:	8979      	ldrh	r1, [r7, #10]
 8004240:	4b48      	ldr	r3, [pc, #288]	; (8004364 <HAL_I2C_Master_Transmit+0x1e0>)
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 fbe5 	bl	8004a18 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800424e:	e05b      	b.n	8004308 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	6a39      	ldr	r1, [r7, #32]
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 f9f2 	bl	800463e <I2C_WaitOnTXISFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e07b      	b.n	800435c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	781a      	ldrb	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d034      	beq.n	8004308 <HAL_I2C_Master_Transmit+0x184>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d130      	bne.n	8004308 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	2200      	movs	r2, #0
 80042ae:	2180      	movs	r1, #128	; 0x80
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f975 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e04d      	b.n	800435c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2bff      	cmp	r3, #255	; 0xff
 80042c8:	d90e      	bls.n	80042e8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	22ff      	movs	r2, #255	; 0xff
 80042ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	8979      	ldrh	r1, [r7, #10]
 80042d8:	2300      	movs	r3, #0
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 fb99 	bl	8004a18 <I2C_TransferConfig>
 80042e6:	e00f      	b.n	8004308 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	8979      	ldrh	r1, [r7, #10]
 80042fa:	2300      	movs	r3, #0
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fb88 	bl	8004a18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d19e      	bne.n	8004250 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	6a39      	ldr	r1, [r7, #32]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f9d8 	bl	80046cc <I2C_WaitOnSTOPFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e01a      	b.n	800435c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2220      	movs	r2, #32
 800432c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6859      	ldr	r1, [r3, #4]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_I2C_Master_Transmit+0x1e4>)
 800433a:	400b      	ands	r3, r1
 800433c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e000      	b.n	800435c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800435a:	2302      	movs	r3, #2
  }
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	80002000 	.word	0x80002000
 8004368:	fe00e800 	.word	0xfe00e800

0800436c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af02      	add	r7, sp, #8
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	461a      	mov	r2, r3
 8004378:	460b      	mov	r3, r1
 800437a:	817b      	strh	r3, [r7, #10]
 800437c:	4613      	mov	r3, r2
 800437e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b20      	cmp	r3, #32
 800438a:	f040 80db 	bne.w	8004544 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_I2C_Master_Receive+0x30>
 8004398:	2302      	movs	r3, #2
 800439a:	e0d4      	b.n	8004546 <HAL_I2C_Master_Receive+0x1da>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043a4:	f7fd fc22 	bl	8001bec <HAL_GetTick>
 80043a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	2319      	movs	r3, #25
 80043b0:	2201      	movs	r2, #1
 80043b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f8f2 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e0bf      	b.n	8004546 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2222      	movs	r2, #34	; 0x22
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2210      	movs	r2, #16
 80043d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	893a      	ldrh	r2, [r7, #8]
 80043e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2bff      	cmp	r3, #255	; 0xff
 80043f6:	d90e      	bls.n	8004416 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	22ff      	movs	r2, #255	; 0xff
 80043fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004402:	b2da      	uxtb	r2, r3
 8004404:	8979      	ldrh	r1, [r7, #10]
 8004406:	4b52      	ldr	r3, [pc, #328]	; (8004550 <HAL_I2C_Master_Receive+0x1e4>)
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 fb02 	bl	8004a18 <I2C_TransferConfig>
 8004414:	e06d      	b.n	80044f2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004424:	b2da      	uxtb	r2, r3
 8004426:	8979      	ldrh	r1, [r7, #10]
 8004428:	4b49      	ldr	r3, [pc, #292]	; (8004550 <HAL_I2C_Master_Receive+0x1e4>)
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 faf1 	bl	8004a18 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004436:	e05c      	b.n	80044f2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	6a39      	ldr	r1, [r7, #32]
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f989 	bl	8004754 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e07c      	b.n	8004546 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d034      	beq.n	80044f2 <HAL_I2C_Master_Receive+0x186>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448c:	2b00      	cmp	r3, #0
 800448e:	d130      	bne.n	80044f2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	2200      	movs	r2, #0
 8004498:	2180      	movs	r1, #128	; 0x80
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f880 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e04d      	b.n	8004546 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2bff      	cmp	r3, #255	; 0xff
 80044b2:	d90e      	bls.n	80044d2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	22ff      	movs	r2, #255	; 0xff
 80044b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	8979      	ldrh	r1, [r7, #10]
 80044c2:	2300      	movs	r3, #0
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 faa4 	bl	8004a18 <I2C_TransferConfig>
 80044d0:	e00f      	b.n	80044f2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	8979      	ldrh	r1, [r7, #10]
 80044e4:	2300      	movs	r3, #0
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 fa93 	bl	8004a18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d19d      	bne.n	8004438 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	6a39      	ldr	r1, [r7, #32]
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f8e3 	bl	80046cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e01a      	b.n	8004546 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2220      	movs	r2, #32
 8004516:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6859      	ldr	r1, [r3, #4]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <HAL_I2C_Master_Receive+0x1e8>)
 8004524:	400b      	ands	r3, r1
 8004526:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	e000      	b.n	8004546 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004544:	2302      	movs	r3, #2
  }
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	80002400 	.word	0x80002400
 8004554:	fe00e800 	.word	0xfe00e800

08004558 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b02      	cmp	r3, #2
 800456c:	d103      	bne.n	8004576 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2200      	movs	r2, #0
 8004574:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b01      	cmp	r3, #1
 8004582:	d007      	beq.n	8004594 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	619a      	str	r2, [r3, #24]
  }
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b0:	e031      	b.n	8004616 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d02d      	beq.n	8004616 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ba:	f7fd fb17 	bl	8001bec <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d302      	bcc.n	80045d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d122      	bne.n	8004616 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4013      	ands	r3, r2
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	429a      	cmp	r2, r3
 80045de:	bf0c      	ite	eq
 80045e0:	2301      	moveq	r3, #1
 80045e2:	2300      	movne	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d113      	bne.n	8004616 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	f043 0220 	orr.w	r2, r3, #32
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e00f      	b.n	8004636 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699a      	ldr	r2, [r3, #24]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4013      	ands	r3, r2
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	429a      	cmp	r2, r3
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	429a      	cmp	r2, r3
 8004632:	d0be      	beq.n	80045b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800464a:	e033      	b.n	80046b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f901 	bl	8004858 <I2C_IsErrorOccurred>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e031      	b.n	80046c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004666:	d025      	beq.n	80046b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004668:	f7fd fac0 	bl	8001bec <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	429a      	cmp	r2, r3
 8004676:	d302      	bcc.n	800467e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d11a      	bne.n	80046b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b02      	cmp	r3, #2
 800468a:	d013      	beq.n	80046b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004690:	f043 0220 	orr.w	r2, r3, #32
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e007      	b.n	80046c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d1c4      	bne.n	800464c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046d8:	e02f      	b.n	800473a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f8ba 	bl	8004858 <I2C_IsErrorOccurred>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e02d      	b.n	800474a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ee:	f7fd fa7d 	bl	8001bec <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d302      	bcc.n	8004704 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d11a      	bne.n	800473a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b20      	cmp	r3, #32
 8004710:	d013      	beq.n	800473a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	f043 0220 	orr.w	r2, r3, #32
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2220      	movs	r2, #32
 8004722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e007      	b.n	800474a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b20      	cmp	r3, #32
 8004746:	d1c8      	bne.n	80046da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004760:	e06b      	b.n	800483a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f876 	bl	8004858 <I2C_IsErrorOccurred>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e069      	b.n	800484a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b20      	cmp	r3, #32
 8004782:	d138      	bne.n	80047f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b04      	cmp	r3, #4
 8004790:	d105      	bne.n	800479e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e055      	b.n	800484a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d107      	bne.n	80047bc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2210      	movs	r2, #16
 80047b2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2204      	movs	r2, #4
 80047b8:	645a      	str	r2, [r3, #68]	; 0x44
 80047ba:	e002      	b.n	80047c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2220      	movs	r2, #32
 80047c8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6859      	ldr	r1, [r3, #4]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	4b1f      	ldr	r3, [pc, #124]	; (8004854 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80047d6:	400b      	ands	r3, r1
 80047d8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e029      	b.n	800484a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f6:	f7fd f9f9 	bl	8001bec <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	429a      	cmp	r2, r3
 8004804:	d302      	bcc.n	800480c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d116      	bne.n	800483a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b04      	cmp	r3, #4
 8004818:	d00f      	beq.n	800483a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	f043 0220 	orr.w	r2, r3, #32
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e007      	b.n	800484a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b04      	cmp	r3, #4
 8004846:	d18c      	bne.n	8004762 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	fe00e800 	.word	0xfe00e800

08004858 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	; 0x28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004872:	2300      	movs	r3, #0
 8004874:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	d068      	beq.n	8004956 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2210      	movs	r2, #16
 800488a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800488c:	e049      	b.n	8004922 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004894:	d045      	beq.n	8004922 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004896:	f7fd f9a9 	bl	8001bec <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d302      	bcc.n	80048ac <I2C_IsErrorOccurred+0x54>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d13a      	bne.n	8004922 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ce:	d121      	bne.n	8004914 <I2C_IsErrorOccurred+0xbc>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048d6:	d01d      	beq.n	8004914 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80048d8:	7cfb      	ldrb	r3, [r7, #19]
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d01a      	beq.n	8004914 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048ee:	f7fd f97d 	bl	8001bec <HAL_GetTick>
 80048f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048f4:	e00e      	b.n	8004914 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048f6:	f7fd f979 	bl	8001bec <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b19      	cmp	r3, #25
 8004902:	d907      	bls.n	8004914 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	f043 0320 	orr.w	r3, r3, #32
 800490a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004912:	e006      	b.n	8004922 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b20      	cmp	r3, #32
 8004920:	d1e9      	bne.n	80048f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b20      	cmp	r3, #32
 800492e:	d003      	beq.n	8004938 <I2C_IsErrorOccurred+0xe0>
 8004930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0aa      	beq.n	800488e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800493c:	2b00      	cmp	r3, #0
 800493e:	d103      	bne.n	8004948 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2220      	movs	r2, #32
 8004946:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	f043 0304 	orr.w	r3, r3, #4
 800494e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00b      	beq.n	8004980 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	f043 0301 	orr.w	r3, r3, #1
 800496e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004978:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	f043 0308 	orr.w	r3, r3, #8
 8004990:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800499a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00b      	beq.n	80049c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	f043 0302 	orr.w	r3, r3, #2
 80049b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80049c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01c      	beq.n	8004a06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f7ff fdc3 	bl	8004558 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <I2C_IsErrorOccurred+0x1bc>)
 80049de:	400b      	ands	r3, r1
 80049e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	431a      	orrs	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3728      	adds	r7, #40	; 0x28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	fe00e800 	.word	0xfe00e800

08004a18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	460b      	mov	r3, r1
 8004a24:	817b      	strh	r3, [r7, #10]
 8004a26:	4613      	mov	r3, r2
 8004a28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a2a:	897b      	ldrh	r3, [r7, #10]
 8004a2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a30:	7a7b      	ldrb	r3, [r7, #9]
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	0d5b      	lsrs	r3, r3, #21
 8004a52:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a56:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <I2C_TransferConfig+0x60>)
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	ea02 0103 	and.w	r1, r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	03ff63ff 	.word	0x03ff63ff

08004a7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	d138      	bne.n	8004b04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e032      	b.n	8004b06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2224      	movs	r2, #36	; 0x24
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ace:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6819      	ldr	r1, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	e000      	b.n	8004b06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b04:	2302      	movs	r3, #2
  }
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d139      	bne.n	8004b9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e033      	b.n	8004b9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2224      	movs	r2, #36	; 0x24
 8004b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0201 	bic.w	r2, r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	021b      	lsls	r3, r3, #8
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e000      	b.n	8004b9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
  }
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004bb4:	4b29      	ldr	r3, [pc, #164]	; (8004c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	2b06      	cmp	r3, #6
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004bc0:	4b26      	ldr	r3, [pc, #152]	; (8004c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d001      	beq.n	8004bd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e040      	b.n	8004c54 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e03e      	b.n	8004c54 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bd6:	4b21      	ldr	r3, [pc, #132]	; (8004c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004bde:	491f      	ldr	r1, [pc, #124]	; (8004c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004be6:	f7fd f801 	bl	8001bec <HAL_GetTick>
 8004bea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bec:	e009      	b.n	8004c02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004bee:	f7fc fffd 	bl	8001bec <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bfc:	d901      	bls.n	8004c02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e028      	b.n	8004c54 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c02:	4b16      	ldr	r3, [pc, #88]	; (8004c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c0e:	d1ee      	bne.n	8004bee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b1e      	cmp	r3, #30
 8004c14:	d008      	beq.n	8004c28 <HAL_PWREx_ConfigSupply+0x7c>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b2e      	cmp	r3, #46	; 0x2e
 8004c1a:	d005      	beq.n	8004c28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b1d      	cmp	r3, #29
 8004c20:	d002      	beq.n	8004c28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b2d      	cmp	r3, #45	; 0x2d
 8004c26:	d114      	bne.n	8004c52 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004c28:	f7fc ffe0 	bl	8001bec <HAL_GetTick>
 8004c2c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004c2e:	e009      	b.n	8004c44 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c30:	f7fc ffdc 	bl	8001bec <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c3e:	d901      	bls.n	8004c44 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e007      	b.n	8004c54 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_PWREx_ConfigSupply+0xb0>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c50:	d1ee      	bne.n	8004c30 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	58024800 	.word	0x58024800

08004c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08c      	sub	sp, #48	; 0x30
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d102      	bne.n	8004c74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f000 bc1f 	b.w	80054b2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80b3 	beq.w	8004de8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c82:	4b95      	ldr	r3, [pc, #596]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c8c:	4b92      	ldr	r3, [pc, #584]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d007      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x48>
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	2b18      	cmp	r3, #24
 8004c9c:	d112      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x64>
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	f003 0303 	and.w	r3, r3, #3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d10d      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	4b8b      	ldr	r3, [pc, #556]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8098 	beq.w	8004de6 <HAL_RCC_OscConfig+0x186>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f040 8093 	bne.w	8004de6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e3f6      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ccc:	d106      	bne.n	8004cdc <HAL_RCC_OscConfig+0x7c>
 8004cce:	4b82      	ldr	r3, [pc, #520]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a81      	ldr	r2, [pc, #516]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	e058      	b.n	8004d8e <HAL_RCC_OscConfig+0x12e>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d112      	bne.n	8004d0a <HAL_RCC_OscConfig+0xaa>
 8004ce4:	4b7c      	ldr	r3, [pc, #496]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a7b      	ldr	r2, [pc, #492]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	4b79      	ldr	r3, [pc, #484]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a78      	ldr	r2, [pc, #480]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004cf6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	4b76      	ldr	r3, [pc, #472]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a75      	ldr	r2, [pc, #468]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	e041      	b.n	8004d8e <HAL_RCC_OscConfig+0x12e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d12:	d112      	bne.n	8004d3a <HAL_RCC_OscConfig+0xda>
 8004d14:	4b70      	ldr	r3, [pc, #448]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a6f      	ldr	r2, [pc, #444]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	4b6d      	ldr	r3, [pc, #436]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a6c      	ldr	r2, [pc, #432]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	4b6a      	ldr	r3, [pc, #424]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a69      	ldr	r2, [pc, #420]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	e029      	b.n	8004d8e <HAL_RCC_OscConfig+0x12e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004d42:	d112      	bne.n	8004d6a <HAL_RCC_OscConfig+0x10a>
 8004d44:	4b64      	ldr	r3, [pc, #400]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a63      	ldr	r2, [pc, #396]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	4b61      	ldr	r3, [pc, #388]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a60      	ldr	r2, [pc, #384]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	4b5e      	ldr	r3, [pc, #376]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a5d      	ldr	r2, [pc, #372]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	e011      	b.n	8004d8e <HAL_RCC_OscConfig+0x12e>
 8004d6a:	4b5b      	ldr	r3, [pc, #364]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a5a      	ldr	r2, [pc, #360]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	4b58      	ldr	r3, [pc, #352]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a57      	ldr	r2, [pc, #348]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	4b55      	ldr	r3, [pc, #340]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a54      	ldr	r2, [pc, #336]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d88:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d013      	beq.n	8004dbe <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d96:	f7fc ff29 	bl	8001bec <HAL_GetTick>
 8004d9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d9e:	f7fc ff25 	bl	8001bec <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b64      	cmp	r3, #100	; 0x64
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e380      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004db0:	4b49      	ldr	r3, [pc, #292]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0f0      	beq.n	8004d9e <HAL_RCC_OscConfig+0x13e>
 8004dbc:	e014      	b.n	8004de8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbe:	f7fc ff15 	bl	8001bec <HAL_GetTick>
 8004dc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc6:	f7fc ff11 	bl	8001bec <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b64      	cmp	r3, #100	; 0x64
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e36c      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dd8:	4b3f      	ldr	r3, [pc, #252]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f0      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x166>
 8004de4:	e000      	b.n	8004de8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 808c 	beq.w	8004f0e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004df6:	4b38      	ldr	r3, [pc, #224]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dfe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e00:	4b35      	ldr	r3, [pc, #212]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <HAL_RCC_OscConfig+0x1bc>
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	2b18      	cmp	r3, #24
 8004e10:	d137      	bne.n	8004e82 <HAL_RCC_OscConfig+0x222>
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d132      	bne.n	8004e82 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e1c:	4b2e      	ldr	r3, [pc, #184]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_RCC_OscConfig+0x1d4>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e33e      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e34:	4b28      	ldr	r3, [pc, #160]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f023 0219 	bic.w	r2, r3, #25
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	4925      	ldr	r1, [pc, #148]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e46:	f7fc fed1 	bl	8001bec <HAL_GetTick>
 8004e4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e4e:	f7fc fecd 	bl	8001bec <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e328      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e60:	4b1d      	ldr	r3, [pc, #116]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0f0      	beq.n	8004e4e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6c:	4b1a      	ldr	r3, [pc, #104]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	061b      	lsls	r3, r3, #24
 8004e7a:	4917      	ldr	r1, [pc, #92]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e80:	e045      	b.n	8004f0e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d028      	beq.n	8004edc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e8a:	4b13      	ldr	r3, [pc, #76]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f023 0219 	bic.w	r2, r3, #25
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	4910      	ldr	r1, [pc, #64]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9c:	f7fc fea6 	bl	8001bec <HAL_GetTick>
 8004ea0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea4:	f7fc fea2 	bl	8001bec <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e2fd      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004eb6:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec2:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	061b      	lsls	r3, r3, #24
 8004ed0:	4901      	ldr	r1, [pc, #4]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	604b      	str	r3, [r1, #4]
 8004ed6:	e01a      	b.n	8004f0e <HAL_RCC_OscConfig+0x2ae>
 8004ed8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004edc:	4b97      	ldr	r3, [pc, #604]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a96      	ldr	r2, [pc, #600]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8004ee2:	f023 0301 	bic.w	r3, r3, #1
 8004ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee8:	f7fc fe80 	bl	8001bec <HAL_GetTick>
 8004eec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ef0:	f7fc fe7c 	bl	8001bec <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e2d7      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f02:	4b8e      	ldr	r3, [pc, #568]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0304 	and.w	r3, r3, #4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0310 	and.w	r3, r3, #16
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d06a      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f1a:	4b88      	ldr	r3, [pc, #544]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f24:	4b85      	ldr	r3, [pc, #532]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f28:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d007      	beq.n	8004f40 <HAL_RCC_OscConfig+0x2e0>
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b18      	cmp	r3, #24
 8004f34:	d11b      	bne.n	8004f6e <HAL_RCC_OscConfig+0x30e>
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f003 0303 	and.w	r3, r3, #3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d116      	bne.n	8004f6e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f40:	4b7e      	ldr	r3, [pc, #504]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <HAL_RCC_OscConfig+0x2f8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	2b80      	cmp	r3, #128	; 0x80
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e2ac      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f58:	4b78      	ldr	r3, [pc, #480]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	061b      	lsls	r3, r3, #24
 8004f66:	4975      	ldr	r1, [pc, #468]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f6c:	e040      	b.n	8004ff0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d023      	beq.n	8004fbe <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f76:	4b71      	ldr	r3, [pc, #452]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a70      	ldr	r2, [pc, #448]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8004f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f82:	f7fc fe33 	bl	8001bec <HAL_GetTick>
 8004f86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f8a:	f7fc fe2f 	bl	8001bec <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e28a      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f9c:	4b67      	ldr	r3, [pc, #412]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fa8:	4b64      	ldr	r3, [pc, #400]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	061b      	lsls	r3, r3, #24
 8004fb6:	4961      	ldr	r1, [pc, #388]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60cb      	str	r3, [r1, #12]
 8004fbc:	e018      	b.n	8004ff0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004fbe:	4b5f      	ldr	r3, [pc, #380]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a5e      	ldr	r2, [pc, #376]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8004fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fc fe0f 	bl	8001bec <HAL_GetTick>
 8004fce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004fd2:	f7fc fe0b 	bl	8001bec <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e266      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fe4:	4b55      	ldr	r3, [pc, #340]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1f0      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0308 	and.w	r3, r3, #8
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d036      	beq.n	800506a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d019      	beq.n	8005038 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005004:	4b4d      	ldr	r3, [pc, #308]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8005006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005008:	4a4c      	ldr	r2, [pc, #304]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005010:	f7fc fdec 	bl	8001bec <HAL_GetTick>
 8005014:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005018:	f7fc fde8 	bl	8001bec <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e243      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800502a:	4b44      	ldr	r3, [pc, #272]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 800502c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0f0      	beq.n	8005018 <HAL_RCC_OscConfig+0x3b8>
 8005036:	e018      	b.n	800506a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005038:	4b40      	ldr	r3, [pc, #256]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 800503a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503c:	4a3f      	ldr	r2, [pc, #252]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 800503e:	f023 0301 	bic.w	r3, r3, #1
 8005042:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005044:	f7fc fdd2 	bl	8001bec <HAL_GetTick>
 8005048:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800504c:	f7fc fdce 	bl	8001bec <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e229      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800505e:	4b37      	ldr	r3, [pc, #220]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8005060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d036      	beq.n	80050e4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d019      	beq.n	80050b2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800507e:	4b2f      	ldr	r3, [pc, #188]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a2e      	ldr	r2, [pc, #184]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8005084:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005088:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800508a:	f7fc fdaf 	bl	8001bec <HAL_GetTick>
 800508e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005090:	e008      	b.n	80050a4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005092:	f7fc fdab 	bl	8001bec <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e206      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050a4:	4b25      	ldr	r3, [pc, #148]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCC_OscConfig+0x432>
 80050b0:	e018      	b.n	80050e4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050b2:	4b22      	ldr	r3, [pc, #136]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a21      	ldr	r2, [pc, #132]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 80050b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050be:	f7fc fd95 	bl	8001bec <HAL_GetTick>
 80050c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050c6:	f7fc fd91 	bl	8001bec <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e1ec      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050d8:	4b18      	ldr	r3, [pc, #96]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1f0      	bne.n	80050c6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80af 	beq.w	8005250 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050f2:	4b13      	ldr	r3, [pc, #76]	; (8005140 <HAL_RCC_OscConfig+0x4e0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a12      	ldr	r2, [pc, #72]	; (8005140 <HAL_RCC_OscConfig+0x4e0>)
 80050f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050fe:	f7fc fd75 	bl	8001bec <HAL_GetTick>
 8005102:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005106:	f7fc fd71 	bl	8001bec <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b64      	cmp	r3, #100	; 0x64
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e1cc      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005118:	4b09      	ldr	r3, [pc, #36]	; (8005140 <HAL_RCC_OscConfig+0x4e0>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0f0      	beq.n	8005106 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d10b      	bne.n	8005144 <HAL_RCC_OscConfig+0x4e4>
 800512c:	4b03      	ldr	r3, [pc, #12]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005130:	4a02      	ldr	r2, [pc, #8]	; (800513c <HAL_RCC_OscConfig+0x4dc>)
 8005132:	f043 0301 	orr.w	r3, r3, #1
 8005136:	6713      	str	r3, [r2, #112]	; 0x70
 8005138:	e05b      	b.n	80051f2 <HAL_RCC_OscConfig+0x592>
 800513a:	bf00      	nop
 800513c:	58024400 	.word	0x58024400
 8005140:	58024800 	.word	0x58024800
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d112      	bne.n	8005172 <HAL_RCC_OscConfig+0x512>
 800514c:	4b9d      	ldr	r3, [pc, #628]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 800514e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005150:	4a9c      	ldr	r2, [pc, #624]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005152:	f023 0301 	bic.w	r3, r3, #1
 8005156:	6713      	str	r3, [r2, #112]	; 0x70
 8005158:	4b9a      	ldr	r3, [pc, #616]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 800515a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515c:	4a99      	ldr	r2, [pc, #612]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 800515e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005162:	6713      	str	r3, [r2, #112]	; 0x70
 8005164:	4b97      	ldr	r3, [pc, #604]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005168:	4a96      	ldr	r2, [pc, #600]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 800516a:	f023 0304 	bic.w	r3, r3, #4
 800516e:	6713      	str	r3, [r2, #112]	; 0x70
 8005170:	e03f      	b.n	80051f2 <HAL_RCC_OscConfig+0x592>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b05      	cmp	r3, #5
 8005178:	d112      	bne.n	80051a0 <HAL_RCC_OscConfig+0x540>
 800517a:	4b92      	ldr	r3, [pc, #584]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517e:	4a91      	ldr	r2, [pc, #580]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005180:	f043 0304 	orr.w	r3, r3, #4
 8005184:	6713      	str	r3, [r2, #112]	; 0x70
 8005186:	4b8f      	ldr	r3, [pc, #572]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518a:	4a8e      	ldr	r2, [pc, #568]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 800518c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005190:	6713      	str	r3, [r2, #112]	; 0x70
 8005192:	4b8c      	ldr	r3, [pc, #560]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005196:	4a8b      	ldr	r2, [pc, #556]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005198:	f043 0301 	orr.w	r3, r3, #1
 800519c:	6713      	str	r3, [r2, #112]	; 0x70
 800519e:	e028      	b.n	80051f2 <HAL_RCC_OscConfig+0x592>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2b85      	cmp	r3, #133	; 0x85
 80051a6:	d112      	bne.n	80051ce <HAL_RCC_OscConfig+0x56e>
 80051a8:	4b86      	ldr	r3, [pc, #536]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ac:	4a85      	ldr	r2, [pc, #532]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80051ae:	f043 0304 	orr.w	r3, r3, #4
 80051b2:	6713      	str	r3, [r2, #112]	; 0x70
 80051b4:	4b83      	ldr	r3, [pc, #524]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b8:	4a82      	ldr	r2, [pc, #520]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80051ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051be:	6713      	str	r3, [r2, #112]	; 0x70
 80051c0:	4b80      	ldr	r3, [pc, #512]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80051c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c4:	4a7f      	ldr	r2, [pc, #508]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	6713      	str	r3, [r2, #112]	; 0x70
 80051cc:	e011      	b.n	80051f2 <HAL_RCC_OscConfig+0x592>
 80051ce:	4b7d      	ldr	r3, [pc, #500]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d2:	4a7c      	ldr	r2, [pc, #496]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80051d4:	f023 0301 	bic.w	r3, r3, #1
 80051d8:	6713      	str	r3, [r2, #112]	; 0x70
 80051da:	4b7a      	ldr	r3, [pc, #488]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051de:	4a79      	ldr	r2, [pc, #484]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80051e0:	f023 0304 	bic.w	r3, r3, #4
 80051e4:	6713      	str	r3, [r2, #112]	; 0x70
 80051e6:	4b77      	ldr	r3, [pc, #476]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80051e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ea:	4a76      	ldr	r2, [pc, #472]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80051ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d015      	beq.n	8005226 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051fa:	f7fc fcf7 	bl	8001bec <HAL_GetTick>
 80051fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005200:	e00a      	b.n	8005218 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005202:	f7fc fcf3 	bl	8001bec <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005210:	4293      	cmp	r3, r2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e14c      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005218:	4b6a      	ldr	r3, [pc, #424]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 800521a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0ee      	beq.n	8005202 <HAL_RCC_OscConfig+0x5a2>
 8005224:	e014      	b.n	8005250 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005226:	f7fc fce1 	bl	8001bec <HAL_GetTick>
 800522a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800522c:	e00a      	b.n	8005244 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800522e:	f7fc fcdd 	bl	8001bec <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	f241 3288 	movw	r2, #5000	; 0x1388
 800523c:	4293      	cmp	r3, r2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e136      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005244:	4b5f      	ldr	r3, [pc, #380]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1ee      	bne.n	800522e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 812b 	beq.w	80054b0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800525a:	4b5a      	ldr	r3, [pc, #360]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005262:	2b18      	cmp	r3, #24
 8005264:	f000 80bb 	beq.w	80053de <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	2b02      	cmp	r3, #2
 800526e:	f040 8095 	bne.w	800539c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005272:	4b54      	ldr	r3, [pc, #336]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a53      	ldr	r2, [pc, #332]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005278:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800527c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527e:	f7fc fcb5 	bl	8001bec <HAL_GetTick>
 8005282:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005286:	f7fc fcb1 	bl	8001bec <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e10c      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005298:	4b4a      	ldr	r3, [pc, #296]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1f0      	bne.n	8005286 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052a4:	4b47      	ldr	r3, [pc, #284]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80052a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052a8:	4b47      	ldr	r3, [pc, #284]	; (80053c8 <HAL_RCC_OscConfig+0x768>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052b4:	0112      	lsls	r2, r2, #4
 80052b6:	430a      	orrs	r2, r1
 80052b8:	4942      	ldr	r1, [pc, #264]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	628b      	str	r3, [r1, #40]	; 0x28
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	3b01      	subs	r3, #1
 80052c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052cc:	3b01      	subs	r3, #1
 80052ce:	025b      	lsls	r3, r3, #9
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	3b01      	subs	r3, #1
 80052da:	041b      	lsls	r3, r3, #16
 80052dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e6:	3b01      	subs	r3, #1
 80052e8:	061b      	lsls	r3, r3, #24
 80052ea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052ee:	4935      	ldr	r1, [pc, #212]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80052f4:	4b33      	ldr	r3, [pc, #204]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	4a32      	ldr	r2, [pc, #200]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80052fa:	f023 0301 	bic.w	r3, r3, #1
 80052fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005300:	4b30      	ldr	r3, [pc, #192]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005304:	4b31      	ldr	r3, [pc, #196]	; (80053cc <HAL_RCC_OscConfig+0x76c>)
 8005306:	4013      	ands	r3, r2
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800530c:	00d2      	lsls	r2, r2, #3
 800530e:	492d      	ldr	r1, [pc, #180]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005310:	4313      	orrs	r3, r2
 8005312:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005314:	4b2b      	ldr	r3, [pc, #172]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	f023 020c 	bic.w	r2, r3, #12
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	4928      	ldr	r1, [pc, #160]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005322:	4313      	orrs	r3, r2
 8005324:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005326:	4b27      	ldr	r3, [pc, #156]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	f023 0202 	bic.w	r2, r3, #2
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005332:	4924      	ldr	r1, [pc, #144]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005334:	4313      	orrs	r3, r2
 8005336:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005338:	4b22      	ldr	r3, [pc, #136]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	4a21      	ldr	r2, [pc, #132]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 800533e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005342:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005344:	4b1f      	ldr	r3, [pc, #124]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	4a1e      	ldr	r2, [pc, #120]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 800534a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800534e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005350:	4b1c      	ldr	r3, [pc, #112]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	4a1b      	ldr	r2, [pc, #108]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005356:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800535a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800535c:	4b19      	ldr	r3, [pc, #100]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	4a18      	ldr	r2, [pc, #96]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005368:	4b16      	ldr	r3, [pc, #88]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a15      	ldr	r2, [pc, #84]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 800536e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005374:	f7fc fc3a 	bl	8001bec <HAL_GetTick>
 8005378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800537c:	f7fc fc36 	bl	8001bec <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e091      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800538e:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0f0      	beq.n	800537c <HAL_RCC_OscConfig+0x71c>
 800539a:	e089      	b.n	80054b0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800539c:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a08      	ldr	r2, [pc, #32]	; (80053c4 <HAL_RCC_OscConfig+0x764>)
 80053a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a8:	f7fc fc20 	bl	8001bec <HAL_GetTick>
 80053ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053ae:	e00f      	b.n	80053d0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b0:	f7fc fc1c 	bl	8001bec <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d908      	bls.n	80053d0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e077      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
 80053c2:	bf00      	nop
 80053c4:	58024400 	.word	0x58024400
 80053c8:	fffffc0c 	.word	0xfffffc0c
 80053cc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053d0:	4b3a      	ldr	r3, [pc, #232]	; (80054bc <HAL_RCC_OscConfig+0x85c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e9      	bne.n	80053b0 <HAL_RCC_OscConfig+0x750>
 80053dc:	e068      	b.n	80054b0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80053de:	4b37      	ldr	r3, [pc, #220]	; (80054bc <HAL_RCC_OscConfig+0x85c>)
 80053e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80053e4:	4b35      	ldr	r3, [pc, #212]	; (80054bc <HAL_RCC_OscConfig+0x85c>)
 80053e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d031      	beq.n	8005456 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f003 0203 	and.w	r2, r3, #3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d12a      	bne.n	8005456 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	091b      	lsrs	r3, r3, #4
 8005404:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800540c:	429a      	cmp	r2, r3
 800540e:	d122      	bne.n	8005456 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800541c:	429a      	cmp	r2, r3
 800541e:	d11a      	bne.n	8005456 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	0a5b      	lsrs	r3, r3, #9
 8005424:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800542e:	429a      	cmp	r2, r3
 8005430:	d111      	bne.n	8005456 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	0c1b      	lsrs	r3, r3, #16
 8005436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005440:	429a      	cmp	r2, r3
 8005442:	d108      	bne.n	8005456 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	0e1b      	lsrs	r3, r3, #24
 8005448:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005450:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005452:	429a      	cmp	r2, r3
 8005454:	d001      	beq.n	800545a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e02b      	b.n	80054b2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800545a:	4b18      	ldr	r3, [pc, #96]	; (80054bc <HAL_RCC_OscConfig+0x85c>)
 800545c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545e:	08db      	lsrs	r3, r3, #3
 8005460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005464:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	429a      	cmp	r2, r3
 800546e:	d01f      	beq.n	80054b0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005470:	4b12      	ldr	r3, [pc, #72]	; (80054bc <HAL_RCC_OscConfig+0x85c>)
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	4a11      	ldr	r2, [pc, #68]	; (80054bc <HAL_RCC_OscConfig+0x85c>)
 8005476:	f023 0301 	bic.w	r3, r3, #1
 800547a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800547c:	f7fc fbb6 	bl	8001bec <HAL_GetTick>
 8005480:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005482:	bf00      	nop
 8005484:	f7fc fbb2 	bl	8001bec <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	4293      	cmp	r3, r2
 800548e:	d0f9      	beq.n	8005484 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <HAL_RCC_OscConfig+0x85c>)
 8005492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005494:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <HAL_RCC_OscConfig+0x860>)
 8005496:	4013      	ands	r3, r2
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800549c:	00d2      	lsls	r2, r2, #3
 800549e:	4907      	ldr	r1, [pc, #28]	; (80054bc <HAL_RCC_OscConfig+0x85c>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <HAL_RCC_OscConfig+0x85c>)
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	4a04      	ldr	r2, [pc, #16]	; (80054bc <HAL_RCC_OscConfig+0x85c>)
 80054aa:	f043 0301 	orr.w	r3, r3, #1
 80054ae:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3730      	adds	r7, #48	; 0x30
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	58024400 	.word	0x58024400
 80054c0:	ffff0007 	.word	0xffff0007

080054c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e19c      	b.n	8005812 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054d8:	4b8a      	ldr	r3, [pc, #552]	; (8005704 <HAL_RCC_ClockConfig+0x240>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d910      	bls.n	8005508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e6:	4b87      	ldr	r3, [pc, #540]	; (8005704 <HAL_RCC_ClockConfig+0x240>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f023 020f 	bic.w	r2, r3, #15
 80054ee:	4985      	ldr	r1, [pc, #532]	; (8005704 <HAL_RCC_ClockConfig+0x240>)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f6:	4b83      	ldr	r3, [pc, #524]	; (8005704 <HAL_RCC_ClockConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d001      	beq.n	8005508 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e184      	b.n	8005812 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d010      	beq.n	8005536 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	4b7b      	ldr	r3, [pc, #492]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005520:	429a      	cmp	r2, r3
 8005522:	d908      	bls.n	8005536 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005524:	4b78      	ldr	r3, [pc, #480]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	4975      	ldr	r1, [pc, #468]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 8005532:	4313      	orrs	r3, r2
 8005534:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d010      	beq.n	8005564 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	695a      	ldr	r2, [r3, #20]
 8005546:	4b70      	ldr	r3, [pc, #448]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800554e:	429a      	cmp	r2, r3
 8005550:	d908      	bls.n	8005564 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005552:	4b6d      	ldr	r3, [pc, #436]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	496a      	ldr	r1, [pc, #424]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 8005560:	4313      	orrs	r3, r2
 8005562:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b00      	cmp	r3, #0
 800556e:	d010      	beq.n	8005592 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699a      	ldr	r2, [r3, #24]
 8005574:	4b64      	ldr	r3, [pc, #400]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800557c:	429a      	cmp	r2, r3
 800557e:	d908      	bls.n	8005592 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005580:	4b61      	ldr	r3, [pc, #388]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	495e      	ldr	r1, [pc, #376]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 800558e:	4313      	orrs	r3, r2
 8005590:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b00      	cmp	r3, #0
 800559c:	d010      	beq.n	80055c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69da      	ldr	r2, [r3, #28]
 80055a2:	4b59      	ldr	r3, [pc, #356]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d908      	bls.n	80055c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80055ae:	4b56      	ldr	r3, [pc, #344]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	4953      	ldr	r1, [pc, #332]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d010      	beq.n	80055ee <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	4b4d      	ldr	r3, [pc, #308]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	429a      	cmp	r2, r3
 80055da:	d908      	bls.n	80055ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055dc:	4b4a      	ldr	r3, [pc, #296]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	f023 020f 	bic.w	r2, r3, #15
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	4947      	ldr	r1, [pc, #284]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d055      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80055fa:	4b43      	ldr	r3, [pc, #268]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	4940      	ldr	r1, [pc, #256]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 8005608:	4313      	orrs	r3, r2
 800560a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b02      	cmp	r3, #2
 8005612:	d107      	bne.n	8005624 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005614:	4b3c      	ldr	r3, [pc, #240]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d121      	bne.n	8005664 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e0f6      	b.n	8005812 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b03      	cmp	r3, #3
 800562a:	d107      	bne.n	800563c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800562c:	4b36      	ldr	r3, [pc, #216]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d115      	bne.n	8005664 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e0ea      	b.n	8005812 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d107      	bne.n	8005654 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005644:	4b30      	ldr	r3, [pc, #192]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d109      	bne.n	8005664 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e0de      	b.n	8005812 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005654:	4b2c      	ldr	r3, [pc, #176]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e0d6      	b.n	8005812 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005664:	4b28      	ldr	r3, [pc, #160]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f023 0207 	bic.w	r2, r3, #7
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	4925      	ldr	r1, [pc, #148]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 8005672:	4313      	orrs	r3, r2
 8005674:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005676:	f7fc fab9 	bl	8001bec <HAL_GetTick>
 800567a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800567c:	e00a      	b.n	8005694 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800567e:	f7fc fab5 	bl	8001bec <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	f241 3288 	movw	r2, #5000	; 0x1388
 800568c:	4293      	cmp	r3, r2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e0be      	b.n	8005812 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005694:	4b1c      	ldr	r3, [pc, #112]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d1eb      	bne.n	800567e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d010      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	4b14      	ldr	r3, [pc, #80]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	429a      	cmp	r2, r3
 80056c0:	d208      	bcs.n	80056d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056c2:	4b11      	ldr	r3, [pc, #68]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f023 020f 	bic.w	r2, r3, #15
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	490e      	ldr	r1, [pc, #56]	; (8005708 <HAL_RCC_ClockConfig+0x244>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <HAL_RCC_ClockConfig+0x240>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 030f 	and.w	r3, r3, #15
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d214      	bcs.n	800570c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056e2:	4b08      	ldr	r3, [pc, #32]	; (8005704 <HAL_RCC_ClockConfig+0x240>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f023 020f 	bic.w	r2, r3, #15
 80056ea:	4906      	ldr	r1, [pc, #24]	; (8005704 <HAL_RCC_ClockConfig+0x240>)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f2:	4b04      	ldr	r3, [pc, #16]	; (8005704 <HAL_RCC_ClockConfig+0x240>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d005      	beq.n	800570c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e086      	b.n	8005812 <HAL_RCC_ClockConfig+0x34e>
 8005704:	52002000 	.word	0x52002000
 8005708:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d010      	beq.n	800573a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	4b3f      	ldr	r3, [pc, #252]	; (800581c <HAL_RCC_ClockConfig+0x358>)
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005724:	429a      	cmp	r2, r3
 8005726:	d208      	bcs.n	800573a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005728:	4b3c      	ldr	r3, [pc, #240]	; (800581c <HAL_RCC_ClockConfig+0x358>)
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	4939      	ldr	r1, [pc, #228]	; (800581c <HAL_RCC_ClockConfig+0x358>)
 8005736:	4313      	orrs	r3, r2
 8005738:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d010      	beq.n	8005768 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695a      	ldr	r2, [r3, #20]
 800574a:	4b34      	ldr	r3, [pc, #208]	; (800581c <HAL_RCC_ClockConfig+0x358>)
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005752:	429a      	cmp	r2, r3
 8005754:	d208      	bcs.n	8005768 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005756:	4b31      	ldr	r3, [pc, #196]	; (800581c <HAL_RCC_ClockConfig+0x358>)
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	492e      	ldr	r1, [pc, #184]	; (800581c <HAL_RCC_ClockConfig+0x358>)
 8005764:	4313      	orrs	r3, r2
 8005766:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b00      	cmp	r3, #0
 8005772:	d010      	beq.n	8005796 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699a      	ldr	r2, [r3, #24]
 8005778:	4b28      	ldr	r3, [pc, #160]	; (800581c <HAL_RCC_ClockConfig+0x358>)
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005780:	429a      	cmp	r2, r3
 8005782:	d208      	bcs.n	8005796 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005784:	4b25      	ldr	r3, [pc, #148]	; (800581c <HAL_RCC_ClockConfig+0x358>)
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	4922      	ldr	r1, [pc, #136]	; (800581c <HAL_RCC_ClockConfig+0x358>)
 8005792:	4313      	orrs	r3, r2
 8005794:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d010      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69da      	ldr	r2, [r3, #28]
 80057a6:	4b1d      	ldr	r3, [pc, #116]	; (800581c <HAL_RCC_ClockConfig+0x358>)
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d208      	bcs.n	80057c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80057b2:	4b1a      	ldr	r3, [pc, #104]	; (800581c <HAL_RCC_ClockConfig+0x358>)
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	4917      	ldr	r1, [pc, #92]	; (800581c <HAL_RCC_ClockConfig+0x358>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80057c4:	f000 f834 	bl	8005830 <HAL_RCC_GetSysClockFreq>
 80057c8:	4602      	mov	r2, r0
 80057ca:	4b14      	ldr	r3, [pc, #80]	; (800581c <HAL_RCC_ClockConfig+0x358>)
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	0a1b      	lsrs	r3, r3, #8
 80057d0:	f003 030f 	and.w	r3, r3, #15
 80057d4:	4912      	ldr	r1, [pc, #72]	; (8005820 <HAL_RCC_ClockConfig+0x35c>)
 80057d6:	5ccb      	ldrb	r3, [r1, r3]
 80057d8:	f003 031f 	and.w	r3, r3, #31
 80057dc:	fa22 f303 	lsr.w	r3, r2, r3
 80057e0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80057e2:	4b0e      	ldr	r3, [pc, #56]	; (800581c <HAL_RCC_ClockConfig+0x358>)
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	4a0d      	ldr	r2, [pc, #52]	; (8005820 <HAL_RCC_ClockConfig+0x35c>)
 80057ec:	5cd3      	ldrb	r3, [r2, r3]
 80057ee:	f003 031f 	and.w	r3, r3, #31
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	fa22 f303 	lsr.w	r3, r2, r3
 80057f8:	4a0a      	ldr	r2, [pc, #40]	; (8005824 <HAL_RCC_ClockConfig+0x360>)
 80057fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057fc:	4a0a      	ldr	r2, [pc, #40]	; (8005828 <HAL_RCC_ClockConfig+0x364>)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005802:	4b0a      	ldr	r3, [pc, #40]	; (800582c <HAL_RCC_ClockConfig+0x368>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f7fc f9a6 	bl	8001b58 <HAL_InitTick>
 800580c:	4603      	mov	r3, r0
 800580e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	58024400 	.word	0x58024400
 8005820:	0800e578 	.word	0x0800e578
 8005824:	2400000c 	.word	0x2400000c
 8005828:	24000008 	.word	0x24000008
 800582c:	24000010 	.word	0x24000010

08005830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005830:	b480      	push	{r7}
 8005832:	b089      	sub	sp, #36	; 0x24
 8005834:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005836:	4bb3      	ldr	r3, [pc, #716]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800583e:	2b18      	cmp	r3, #24
 8005840:	f200 8155 	bhi.w	8005aee <HAL_RCC_GetSysClockFreq+0x2be>
 8005844:	a201      	add	r2, pc, #4	; (adr r2, 800584c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	080058b1 	.word	0x080058b1
 8005850:	08005aef 	.word	0x08005aef
 8005854:	08005aef 	.word	0x08005aef
 8005858:	08005aef 	.word	0x08005aef
 800585c:	08005aef 	.word	0x08005aef
 8005860:	08005aef 	.word	0x08005aef
 8005864:	08005aef 	.word	0x08005aef
 8005868:	08005aef 	.word	0x08005aef
 800586c:	080058d7 	.word	0x080058d7
 8005870:	08005aef 	.word	0x08005aef
 8005874:	08005aef 	.word	0x08005aef
 8005878:	08005aef 	.word	0x08005aef
 800587c:	08005aef 	.word	0x08005aef
 8005880:	08005aef 	.word	0x08005aef
 8005884:	08005aef 	.word	0x08005aef
 8005888:	08005aef 	.word	0x08005aef
 800588c:	080058dd 	.word	0x080058dd
 8005890:	08005aef 	.word	0x08005aef
 8005894:	08005aef 	.word	0x08005aef
 8005898:	08005aef 	.word	0x08005aef
 800589c:	08005aef 	.word	0x08005aef
 80058a0:	08005aef 	.word	0x08005aef
 80058a4:	08005aef 	.word	0x08005aef
 80058a8:	08005aef 	.word	0x08005aef
 80058ac:	080058e3 	.word	0x080058e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058b0:	4b94      	ldr	r3, [pc, #592]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d009      	beq.n	80058d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058bc:	4b91      	ldr	r3, [pc, #580]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	08db      	lsrs	r3, r3, #3
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	4a90      	ldr	r2, [pc, #576]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
 80058cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80058ce:	e111      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80058d0:	4b8d      	ldr	r3, [pc, #564]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058d2:	61bb      	str	r3, [r7, #24]
      break;
 80058d4:	e10e      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80058d6:	4b8d      	ldr	r3, [pc, #564]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058d8:	61bb      	str	r3, [r7, #24]
      break;
 80058da:	e10b      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80058dc:	4b8c      	ldr	r3, [pc, #560]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80058de:	61bb      	str	r3, [r7, #24]
      break;
 80058e0:	e108      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058e2:	4b88      	ldr	r3, [pc, #544]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80058ec:	4b85      	ldr	r3, [pc, #532]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f0:	091b      	lsrs	r3, r3, #4
 80058f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80058f8:	4b82      	ldr	r3, [pc, #520]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005902:	4b80      	ldr	r3, [pc, #512]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005906:	08db      	lsrs	r3, r3, #3
 8005908:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	fb02 f303 	mul.w	r3, r2, r3
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 80e1 	beq.w	8005ae8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b02      	cmp	r3, #2
 800592a:	f000 8083 	beq.w	8005a34 <HAL_RCC_GetSysClockFreq+0x204>
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b02      	cmp	r3, #2
 8005932:	f200 80a1 	bhi.w	8005a78 <HAL_RCC_GetSysClockFreq+0x248>
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <HAL_RCC_GetSysClockFreq+0x114>
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d056      	beq.n	80059f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005942:	e099      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005944:	4b6f      	ldr	r3, [pc, #444]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0320 	and.w	r3, r3, #32
 800594c:	2b00      	cmp	r3, #0
 800594e:	d02d      	beq.n	80059ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005950:	4b6c      	ldr	r3, [pc, #432]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	08db      	lsrs	r3, r3, #3
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	4a6b      	ldr	r2, [pc, #428]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800595c:	fa22 f303 	lsr.w	r3, r2, r3
 8005960:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	ee07 3a90 	vmov	s15, r3
 8005968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800597a:	4b62      	ldr	r3, [pc, #392]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800598a:	ed97 6a02 	vldr	s12, [r7, #8]
 800598e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800599a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800599e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80059aa:	e087      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005b18 <HAL_RCC_GetSysClockFreq+0x2e8>
 80059ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059be:	4b51      	ldr	r3, [pc, #324]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c6:	ee07 3a90 	vmov	s15, r3
 80059ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80059d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059ee:	e065      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005b1c <HAL_RCC_GetSysClockFreq+0x2ec>
 80059fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a02:	4b40      	ldr	r3, [pc, #256]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a12:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a16:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a32:	e043      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005b20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a46:	4b2f      	ldr	r3, [pc, #188]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a5a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a76:	e021      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a82:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005b1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a8a:	4b1e      	ldr	r3, [pc, #120]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a9e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005b14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005aba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005abc:	4b11      	ldr	r3, [pc, #68]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	0a5b      	lsrs	r3, r3, #9
 8005ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	ee07 3a90 	vmov	s15, r3
 8005ad0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ad4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ae0:	ee17 3a90 	vmov	r3, s15
 8005ae4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005ae6:	e005      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61bb      	str	r3, [r7, #24]
      break;
 8005aec:	e002      	b.n	8005af4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005aee:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005af0:	61bb      	str	r3, [r7, #24]
      break;
 8005af2:	bf00      	nop
  }

  return sysclockfreq;
 8005af4:	69bb      	ldr	r3, [r7, #24]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3724      	adds	r7, #36	; 0x24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	58024400 	.word	0x58024400
 8005b08:	03d09000 	.word	0x03d09000
 8005b0c:	003d0900 	.word	0x003d0900
 8005b10:	007a1200 	.word	0x007a1200
 8005b14:	46000000 	.word	0x46000000
 8005b18:	4c742400 	.word	0x4c742400
 8005b1c:	4a742400 	.word	0x4a742400
 8005b20:	4af42400 	.word	0x4af42400

08005b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005b2a:	f7ff fe81 	bl	8005830 <HAL_RCC_GetSysClockFreq>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	4b10      	ldr	r3, [pc, #64]	; (8005b74 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	0a1b      	lsrs	r3, r3, #8
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	490f      	ldr	r1, [pc, #60]	; (8005b78 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b3c:	5ccb      	ldrb	r3, [r1, r3]
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	fa22 f303 	lsr.w	r3, r2, r3
 8005b46:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005b48:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	f003 030f 	and.w	r3, r3, #15
 8005b50:	4a09      	ldr	r2, [pc, #36]	; (8005b78 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b52:	5cd3      	ldrb	r3, [r2, r3]
 8005b54:	f003 031f 	and.w	r3, r3, #31
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5e:	4a07      	ldr	r2, [pc, #28]	; (8005b7c <HAL_RCC_GetHCLKFreq+0x58>)
 8005b60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b62:	4a07      	ldr	r2, [pc, #28]	; (8005b80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005b68:	4b04      	ldr	r3, [pc, #16]	; (8005b7c <HAL_RCC_GetHCLKFreq+0x58>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	58024400 	.word	0x58024400
 8005b78:	0800e578 	.word	0x0800e578
 8005b7c:	2400000c 	.word	0x2400000c
 8005b80:	24000008 	.word	0x24000008

08005b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005b88:	f7ff ffcc 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	091b      	lsrs	r3, r3, #4
 8005b94:	f003 0307 	and.w	r3, r3, #7
 8005b98:	4904      	ldr	r1, [pc, #16]	; (8005bac <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b9a:	5ccb      	ldrb	r3, [r1, r3]
 8005b9c:	f003 031f 	and.w	r3, r3, #31
 8005ba0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	58024400 	.word	0x58024400
 8005bac:	0800e578 	.word	0x0800e578

08005bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005bb4:	f7ff ffb6 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	4b06      	ldr	r3, [pc, #24]	; (8005bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	0a1b      	lsrs	r3, r3, #8
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	4904      	ldr	r1, [pc, #16]	; (8005bd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bc6:	5ccb      	ldrb	r3, [r1, r3]
 8005bc8:	f003 031f 	and.w	r3, r3, #31
 8005bcc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	0800e578 	.word	0x0800e578

08005bdc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be0:	b0c8      	sub	sp, #288	; 0x120
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005be8:	2300      	movs	r3, #0
 8005bea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005c00:	2500      	movs	r5, #0
 8005c02:	ea54 0305 	orrs.w	r3, r4, r5
 8005c06:	d049      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c12:	d02f      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c18:	d828      	bhi.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c1e:	d01a      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c24:	d822      	bhi.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c2e:	d007      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c30:	e01c      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c32:	4ba7      	ldr	r3, [pc, #668]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c36:	4aa6      	ldr	r2, [pc, #664]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c3e:	e01a      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c44:	3308      	adds	r3, #8
 8005c46:	2102      	movs	r1, #2
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f002 fa6d 	bl	8008128 <RCCEx_PLL2_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c54:	e00f      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c5a:	3328      	adds	r3, #40	; 0x28
 8005c5c:	2102      	movs	r1, #2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f002 fb14 	bl	800828c <RCCEx_PLL3_Config>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c6a:	e004      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005c72:	e000      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c7e:	4b94      	ldr	r3, [pc, #592]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c82:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c8c:	4a90      	ldr	r2, [pc, #576]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c8e:	430b      	orrs	r3, r1
 8005c90:	6513      	str	r3, [r2, #80]	; 0x50
 8005c92:	e003      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005ca8:	f04f 0900 	mov.w	r9, #0
 8005cac:	ea58 0309 	orrs.w	r3, r8, r9
 8005cb0:	d047      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d82a      	bhi.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005cbc:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005cd9 	.word	0x08005cd9
 8005cc8:	08005ce7 	.word	0x08005ce7
 8005ccc:	08005cfd 	.word	0x08005cfd
 8005cd0:	08005d1b 	.word	0x08005d1b
 8005cd4:	08005d1b 	.word	0x08005d1b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd8:	4b7d      	ldr	r3, [pc, #500]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	4a7c      	ldr	r2, [pc, #496]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ce4:	e01a      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cea:	3308      	adds	r3, #8
 8005cec:	2100      	movs	r1, #0
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f002 fa1a 	bl	8008128 <RCCEx_PLL2_Config>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cfa:	e00f      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d00:	3328      	adds	r3, #40	; 0x28
 8005d02:	2100      	movs	r1, #0
 8005d04:	4618      	mov	r0, r3
 8005d06:	f002 fac1 	bl	800828c <RCCEx_PLL3_Config>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d10:	e004      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d18:	e000      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10a      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d24:	4b6a      	ldr	r3, [pc, #424]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d28:	f023 0107 	bic.w	r1, r3, #7
 8005d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d32:	4a67      	ldr	r2, [pc, #412]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d34:	430b      	orrs	r3, r1
 8005d36:	6513      	str	r3, [r2, #80]	; 0x50
 8005d38:	e003      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005d4e:	f04f 0b00 	mov.w	fp, #0
 8005d52:	ea5a 030b 	orrs.w	r3, sl, fp
 8005d56:	d054      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005d62:	d036      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005d64:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005d68:	d82f      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d6e:	d032      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d74:	d829      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005d76:	2bc0      	cmp	r3, #192	; 0xc0
 8005d78:	d02f      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8005d7c:	d825      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005d7e:	2b80      	cmp	r3, #128	; 0x80
 8005d80:	d018      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005d82:	2b80      	cmp	r3, #128	; 0x80
 8005d84:	d821      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005d8a:	2b40      	cmp	r3, #64	; 0x40
 8005d8c:	d007      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005d8e:	e01c      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d90:	4b4f      	ldr	r3, [pc, #316]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	4a4e      	ldr	r2, [pc, #312]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005d9c:	e01e      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da2:	3308      	adds	r3, #8
 8005da4:	2100      	movs	r1, #0
 8005da6:	4618      	mov	r0, r3
 8005da8:	f002 f9be 	bl	8008128 <RCCEx_PLL2_Config>
 8005dac:	4603      	mov	r3, r0
 8005dae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005db2:	e013      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db8:	3328      	adds	r3, #40	; 0x28
 8005dba:	2100      	movs	r1, #0
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f002 fa65 	bl	800828c <RCCEx_PLL3_Config>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005dc8:	e008      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005dd0:	e004      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005dd2:	bf00      	nop
 8005dd4:	e002      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005dd6:	bf00      	nop
 8005dd8:	e000      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ddc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005de4:	4b3a      	ldr	r3, [pc, #232]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df2:	4a37      	ldr	r2, [pc, #220]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005df4:	430b      	orrs	r3, r1
 8005df6:	6513      	str	r3, [r2, #80]	; 0x50
 8005df8:	e003      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005dfe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005e0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e12:	2300      	movs	r3, #0
 8005e14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e18:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	d05c      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e28:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005e2c:	d03b      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e2e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005e32:	d834      	bhi.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e38:	d037      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e3e:	d82e      	bhi.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005e40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e44:	d033      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e46:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e4a:	d828      	bhi.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e50:	d01a      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e56:	d822      	bhi.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e60:	d007      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005e62:	e01c      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e64:	4b1a      	ldr	r3, [pc, #104]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	4a19      	ldr	r2, [pc, #100]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005e70:	e01e      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e76:	3308      	adds	r3, #8
 8005e78:	2100      	movs	r1, #0
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f002 f954 	bl	8008128 <RCCEx_PLL2_Config>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005e86:	e013      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e8c:	3328      	adds	r3, #40	; 0x28
 8005e8e:	2100      	movs	r1, #0
 8005e90:	4618      	mov	r0, r3
 8005e92:	f002 f9fb 	bl	800828c <RCCEx_PLL3_Config>
 8005e96:	4603      	mov	r3, r0
 8005e98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005ea4:	e004      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005ea6:	bf00      	nop
 8005ea8:	e002      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005eaa:	bf00      	nop
 8005eac:	e000      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10d      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005eb8:	4b05      	ldr	r3, [pc, #20]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ebc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec6:	4a02      	ldr	r2, [pc, #8]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ec8:	430b      	orrs	r3, r1
 8005eca:	6513      	str	r3, [r2, #80]	; 0x50
 8005ecc:	e006      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005ece:	bf00      	nop
 8005ed0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ed8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005ee8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005eec:	2300      	movs	r3, #0
 8005eee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ef2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	d03a      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f02:	2b30      	cmp	r3, #48	; 0x30
 8005f04:	d01f      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005f06:	2b30      	cmp	r3, #48	; 0x30
 8005f08:	d819      	bhi.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d00c      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d815      	bhi.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d019      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005f16:	2b10      	cmp	r3, #16
 8005f18:	d111      	bne.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f1a:	4bae      	ldr	r3, [pc, #696]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1e:	4aad      	ldr	r2, [pc, #692]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005f26:	e011      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	2102      	movs	r1, #2
 8005f30:	4618      	mov	r0, r3
 8005f32:	f002 f8f9 	bl	8008128 <RCCEx_PLL2_Config>
 8005f36:	4603      	mov	r3, r0
 8005f38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005f3c:	e006      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005f44:	e002      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005f46:	bf00      	nop
 8005f48:	e000      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10a      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005f54:	4b9f      	ldr	r3, [pc, #636]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f58:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f62:	4a9c      	ldr	r2, [pc, #624]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f64:	430b      	orrs	r3, r1
 8005f66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f68:	e003      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f6e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005f7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f82:	2300      	movs	r3, #0
 8005f84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f88:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	d051      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f9c:	d035      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005f9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fa2:	d82e      	bhi.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005fa4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fa8:	d031      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005faa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fae:	d828      	bhi.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fb4:	d01a      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fba:	d822      	bhi.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc4:	d007      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005fc6:	e01c      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fc8:	4b82      	ldr	r3, [pc, #520]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	4a81      	ldr	r2, [pc, #516]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005fd4:	e01c      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fda:	3308      	adds	r3, #8
 8005fdc:	2100      	movs	r1, #0
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f002 f8a2 	bl	8008128 <RCCEx_PLL2_Config>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005fea:	e011      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff0:	3328      	adds	r3, #40	; 0x28
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f002 f949 	bl	800828c <RCCEx_PLL3_Config>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006000:	e006      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006008:	e002      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800600a:	bf00      	nop
 800600c:	e000      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800600e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006010:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006018:	4b6e      	ldr	r3, [pc, #440]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800601a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006026:	4a6b      	ldr	r2, [pc, #428]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006028:	430b      	orrs	r3, r1
 800602a:	6513      	str	r3, [r2, #80]	; 0x50
 800602c:	e003      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006032:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006042:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006046:	2300      	movs	r3, #0
 8006048:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800604c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006050:	460b      	mov	r3, r1
 8006052:	4313      	orrs	r3, r2
 8006054:	d053      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006056:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800605a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800605c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006060:	d033      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006062:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006066:	d82c      	bhi.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006068:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800606c:	d02f      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800606e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006072:	d826      	bhi.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006074:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006078:	d02b      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800607a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800607e:	d820      	bhi.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006084:	d012      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800608a:	d81a      	bhi.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800608c:	2b00      	cmp	r3, #0
 800608e:	d022      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006094:	d115      	bne.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800609a:	3308      	adds	r3, #8
 800609c:	2101      	movs	r1, #1
 800609e:	4618      	mov	r0, r3
 80060a0:	f002 f842 	bl	8008128 <RCCEx_PLL2_Config>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80060aa:	e015      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060b0:	3328      	adds	r3, #40	; 0x28
 80060b2:	2101      	movs	r1, #1
 80060b4:	4618      	mov	r0, r3
 80060b6:	f002 f8e9 	bl	800828c <RCCEx_PLL3_Config>
 80060ba:	4603      	mov	r3, r0
 80060bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80060c0:	e00a      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80060c8:	e006      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80060ca:	bf00      	nop
 80060cc:	e004      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80060ce:	bf00      	nop
 80060d0:	e002      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80060d2:	bf00      	nop
 80060d4:	e000      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80060d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80060e0:	4b3c      	ldr	r3, [pc, #240]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80060e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060ee:	4a39      	ldr	r2, [pc, #228]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060f0:	430b      	orrs	r3, r1
 80060f2:	6513      	str	r3, [r2, #80]	; 0x50
 80060f4:	e003      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80060fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80060fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800610a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800610e:	2300      	movs	r3, #0
 8006110:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006114:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006118:	460b      	mov	r3, r1
 800611a:	4313      	orrs	r3, r2
 800611c:	d060      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800611e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006122:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006126:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800612a:	d039      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800612c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006130:	d832      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006132:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006136:	d035      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800613c:	d82c      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800613e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006142:	d031      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006148:	d826      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800614a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800614e:	d02d      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006150:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006154:	d820      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800615a:	d012      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800615c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006160:	d81a      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d024      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006166:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800616a:	d115      	bne.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800616c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006170:	3308      	adds	r3, #8
 8006172:	2101      	movs	r1, #1
 8006174:	4618      	mov	r0, r3
 8006176:	f001 ffd7 	bl	8008128 <RCCEx_PLL2_Config>
 800617a:	4603      	mov	r3, r0
 800617c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006180:	e017      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006186:	3328      	adds	r3, #40	; 0x28
 8006188:	2101      	movs	r1, #1
 800618a:	4618      	mov	r0, r3
 800618c:	f002 f87e 	bl	800828c <RCCEx_PLL3_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006196:	e00c      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800619e:	e008      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061a0:	bf00      	nop
 80061a2:	e006      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061a4:	bf00      	nop
 80061a6:	e004      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061a8:	bf00      	nop
 80061aa:	e002      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061ac:	bf00      	nop
 80061ae:	e000      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10e      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80061ba:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061be:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80061c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061ca:	4a02      	ldr	r2, [pc, #8]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061cc:	430b      	orrs	r3, r1
 80061ce:	6593      	str	r3, [r2, #88]	; 0x58
 80061d0:	e006      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80061d2:	bf00      	nop
 80061d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80061e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80061ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061f0:	2300      	movs	r3, #0
 80061f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80061f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80061fa:	460b      	mov	r3, r1
 80061fc:	4313      	orrs	r3, r2
 80061fe:	d037      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800620a:	d00e      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800620c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006210:	d816      	bhi.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006212:	2b00      	cmp	r3, #0
 8006214:	d018      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800621a:	d111      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800621c:	4bc4      	ldr	r3, [pc, #784]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	4ac3      	ldr	r2, [pc, #780]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006226:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006228:	e00f      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800622a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800622e:	3308      	adds	r3, #8
 8006230:	2101      	movs	r1, #1
 8006232:	4618      	mov	r0, r3
 8006234:	f001 ff78 	bl	8008128 <RCCEx_PLL2_Config>
 8006238:	4603      	mov	r3, r0
 800623a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800623e:	e004      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006246:	e000      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800624a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006252:	4bb7      	ldr	r3, [pc, #732]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006256:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800625a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800625e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006260:	4ab3      	ldr	r2, [pc, #716]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006262:	430b      	orrs	r3, r1
 8006264:	6513      	str	r3, [r2, #80]	; 0x50
 8006266:	e003      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006268:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800626c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800627c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006280:	2300      	movs	r3, #0
 8006282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006286:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800628a:	460b      	mov	r3, r1
 800628c:	4313      	orrs	r3, r2
 800628e:	d039      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006296:	2b03      	cmp	r3, #3
 8006298:	d81c      	bhi.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800629a:	a201      	add	r2, pc, #4	; (adr r2, 80062a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800629c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a0:	080062dd 	.word	0x080062dd
 80062a4:	080062b1 	.word	0x080062b1
 80062a8:	080062bf 	.word	0x080062bf
 80062ac:	080062dd 	.word	0x080062dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062b0:	4b9f      	ldr	r3, [pc, #636]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	4a9e      	ldr	r2, [pc, #632]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80062bc:	e00f      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062c2:	3308      	adds	r3, #8
 80062c4:	2102      	movs	r1, #2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f001 ff2e 	bl	8008128 <RCCEx_PLL2_Config>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80062d2:	e004      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80062da:	e000      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80062dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10a      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80062e6:	4b92      	ldr	r3, [pc, #584]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ea:	f023 0103 	bic.w	r1, r3, #3
 80062ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062f4:	4a8e      	ldr	r2, [pc, #568]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062f6:	430b      	orrs	r3, r1
 80062f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062fa:	e003      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006300:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006310:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006314:	2300      	movs	r3, #0
 8006316:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800631a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800631e:	460b      	mov	r3, r1
 8006320:	4313      	orrs	r3, r2
 8006322:	f000 8099 	beq.w	8006458 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006326:	4b83      	ldr	r3, [pc, #524]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a82      	ldr	r2, [pc, #520]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800632c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006330:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006332:	f7fb fc5b 	bl	8001bec <HAL_GetTick>
 8006336:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800633a:	e00b      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800633c:	f7fb fc56 	bl	8001bec <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b64      	cmp	r3, #100	; 0x64
 800634a:	d903      	bls.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006352:	e005      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006354:	4b77      	ldr	r3, [pc, #476]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0ed      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006360:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006364:	2b00      	cmp	r3, #0
 8006366:	d173      	bne.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006368:	4b71      	ldr	r3, [pc, #452]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800636a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800636c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006370:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006374:	4053      	eors	r3, r2
 8006376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800637a:	2b00      	cmp	r3, #0
 800637c:	d015      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800637e:	4b6c      	ldr	r3, [pc, #432]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006386:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800638a:	4b69      	ldr	r3, [pc, #420]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638e:	4a68      	ldr	r2, [pc, #416]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006394:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006396:	4b66      	ldr	r3, [pc, #408]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639a:	4a65      	ldr	r2, [pc, #404]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800639c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063a0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80063a2:	4a63      	ldr	r2, [pc, #396]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80063aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80063b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b6:	d118      	bne.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b8:	f7fb fc18 	bl	8001bec <HAL_GetTick>
 80063bc:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063c0:	e00d      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063c2:	f7fb fc13 	bl	8001bec <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80063cc:	1ad2      	subs	r2, r2, r3
 80063ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d903      	bls.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80063dc:	e005      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063de:	4b54      	ldr	r3, [pc, #336]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0eb      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80063ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d129      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80063fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006402:	d10e      	bne.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006404:	4b4a      	ldr	r3, [pc, #296]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800640c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006410:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006414:	091a      	lsrs	r2, r3, #4
 8006416:	4b48      	ldr	r3, [pc, #288]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006418:	4013      	ands	r3, r2
 800641a:	4a45      	ldr	r2, [pc, #276]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800641c:	430b      	orrs	r3, r1
 800641e:	6113      	str	r3, [r2, #16]
 8006420:	e005      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006422:	4b43      	ldr	r3, [pc, #268]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	4a42      	ldr	r2, [pc, #264]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006428:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800642c:	6113      	str	r3, [r2, #16]
 800642e:	4b40      	ldr	r3, [pc, #256]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006430:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006436:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800643a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800643e:	4a3c      	ldr	r2, [pc, #240]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006440:	430b      	orrs	r3, r1
 8006442:	6713      	str	r3, [r2, #112]	; 0x70
 8006444:	e008      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006446:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800644a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800644e:	e003      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006450:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006454:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	f002 0301 	and.w	r3, r2, #1
 8006464:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006468:	2300      	movs	r3, #0
 800646a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800646e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006472:	460b      	mov	r3, r1
 8006474:	4313      	orrs	r3, r2
 8006476:	f000 8090 	beq.w	800659a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800647a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800647e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006482:	2b28      	cmp	r3, #40	; 0x28
 8006484:	d870      	bhi.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006486:	a201      	add	r2, pc, #4	; (adr r2, 800648c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	08006571 	.word	0x08006571
 8006490:	08006569 	.word	0x08006569
 8006494:	08006569 	.word	0x08006569
 8006498:	08006569 	.word	0x08006569
 800649c:	08006569 	.word	0x08006569
 80064a0:	08006569 	.word	0x08006569
 80064a4:	08006569 	.word	0x08006569
 80064a8:	08006569 	.word	0x08006569
 80064ac:	0800653d 	.word	0x0800653d
 80064b0:	08006569 	.word	0x08006569
 80064b4:	08006569 	.word	0x08006569
 80064b8:	08006569 	.word	0x08006569
 80064bc:	08006569 	.word	0x08006569
 80064c0:	08006569 	.word	0x08006569
 80064c4:	08006569 	.word	0x08006569
 80064c8:	08006569 	.word	0x08006569
 80064cc:	08006553 	.word	0x08006553
 80064d0:	08006569 	.word	0x08006569
 80064d4:	08006569 	.word	0x08006569
 80064d8:	08006569 	.word	0x08006569
 80064dc:	08006569 	.word	0x08006569
 80064e0:	08006569 	.word	0x08006569
 80064e4:	08006569 	.word	0x08006569
 80064e8:	08006569 	.word	0x08006569
 80064ec:	08006571 	.word	0x08006571
 80064f0:	08006569 	.word	0x08006569
 80064f4:	08006569 	.word	0x08006569
 80064f8:	08006569 	.word	0x08006569
 80064fc:	08006569 	.word	0x08006569
 8006500:	08006569 	.word	0x08006569
 8006504:	08006569 	.word	0x08006569
 8006508:	08006569 	.word	0x08006569
 800650c:	08006571 	.word	0x08006571
 8006510:	08006569 	.word	0x08006569
 8006514:	08006569 	.word	0x08006569
 8006518:	08006569 	.word	0x08006569
 800651c:	08006569 	.word	0x08006569
 8006520:	08006569 	.word	0x08006569
 8006524:	08006569 	.word	0x08006569
 8006528:	08006569 	.word	0x08006569
 800652c:	08006571 	.word	0x08006571
 8006530:	58024400 	.word	0x58024400
 8006534:	58024800 	.word	0x58024800
 8006538:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800653c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006540:	3308      	adds	r3, #8
 8006542:	2101      	movs	r1, #1
 8006544:	4618      	mov	r0, r3
 8006546:	f001 fdef 	bl	8008128 <RCCEx_PLL2_Config>
 800654a:	4603      	mov	r3, r0
 800654c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006550:	e00f      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006556:	3328      	adds	r3, #40	; 0x28
 8006558:	2101      	movs	r1, #1
 800655a:	4618      	mov	r0, r3
 800655c:	f001 fe96 	bl	800828c <RCCEx_PLL3_Config>
 8006560:	4603      	mov	r3, r0
 8006562:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006566:	e004      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800656e:	e000      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006572:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10b      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800657a:	4bc0      	ldr	r3, [pc, #768]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800657c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800658a:	4abc      	ldr	r2, [pc, #752]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800658c:	430b      	orrs	r3, r1
 800658e:	6553      	str	r3, [r2, #84]	; 0x54
 8006590:	e003      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006592:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006596:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800659a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	f002 0302 	and.w	r3, r2, #2
 80065a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065aa:	2300      	movs	r3, #0
 80065ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80065b0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80065b4:	460b      	mov	r3, r1
 80065b6:	4313      	orrs	r3, r2
 80065b8:	d043      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80065ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065c2:	2b05      	cmp	r3, #5
 80065c4:	d824      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80065c6:	a201      	add	r2, pc, #4	; (adr r2, 80065cc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	08006619 	.word	0x08006619
 80065d0:	080065e5 	.word	0x080065e5
 80065d4:	080065fb 	.word	0x080065fb
 80065d8:	08006619 	.word	0x08006619
 80065dc:	08006619 	.word	0x08006619
 80065e0:	08006619 	.word	0x08006619
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065e8:	3308      	adds	r3, #8
 80065ea:	2101      	movs	r1, #1
 80065ec:	4618      	mov	r0, r3
 80065ee:	f001 fd9b 	bl	8008128 <RCCEx_PLL2_Config>
 80065f2:	4603      	mov	r3, r0
 80065f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80065f8:	e00f      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065fe:	3328      	adds	r3, #40	; 0x28
 8006600:	2101      	movs	r1, #1
 8006602:	4618      	mov	r0, r3
 8006604:	f001 fe42 	bl	800828c <RCCEx_PLL3_Config>
 8006608:	4603      	mov	r3, r0
 800660a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800660e:	e004      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006616:	e000      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800661a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10b      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006622:	4b96      	ldr	r3, [pc, #600]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006626:	f023 0107 	bic.w	r1, r3, #7
 800662a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800662e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006632:	4a92      	ldr	r2, [pc, #584]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006634:	430b      	orrs	r3, r1
 8006636:	6553      	str	r3, [r2, #84]	; 0x54
 8006638:	e003      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800663e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664a:	f002 0304 	and.w	r3, r2, #4
 800664e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006652:	2300      	movs	r3, #0
 8006654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006658:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800665c:	460b      	mov	r3, r1
 800665e:	4313      	orrs	r3, r2
 8006660:	d043      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006666:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800666a:	2b05      	cmp	r3, #5
 800666c:	d824      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800666e:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006674:	080066c1 	.word	0x080066c1
 8006678:	0800668d 	.word	0x0800668d
 800667c:	080066a3 	.word	0x080066a3
 8006680:	080066c1 	.word	0x080066c1
 8006684:	080066c1 	.word	0x080066c1
 8006688:	080066c1 	.word	0x080066c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800668c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006690:	3308      	adds	r3, #8
 8006692:	2101      	movs	r1, #1
 8006694:	4618      	mov	r0, r3
 8006696:	f001 fd47 	bl	8008128 <RCCEx_PLL2_Config>
 800669a:	4603      	mov	r3, r0
 800669c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80066a0:	e00f      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066a6:	3328      	adds	r3, #40	; 0x28
 80066a8:	2101      	movs	r1, #1
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 fdee 	bl	800828c <RCCEx_PLL3_Config>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80066b6:	e004      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80066be:	e000      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80066c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10b      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066ca:	4b6c      	ldr	r3, [pc, #432]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80066cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ce:	f023 0107 	bic.w	r1, r3, #7
 80066d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066da:	4a68      	ldr	r2, [pc, #416]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80066dc:	430b      	orrs	r3, r1
 80066de:	6593      	str	r3, [r2, #88]	; 0x58
 80066e0:	e003      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80066ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	f002 0320 	and.w	r3, r2, #32
 80066f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066fa:	2300      	movs	r3, #0
 80066fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006700:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006704:	460b      	mov	r3, r1
 8006706:	4313      	orrs	r3, r2
 8006708:	d055      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800670a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800670e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006712:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006716:	d033      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800671c:	d82c      	bhi.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800671e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006722:	d02f      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006728:	d826      	bhi.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800672a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800672e:	d02b      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006730:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006734:	d820      	bhi.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800673a:	d012      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800673c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006740:	d81a      	bhi.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d022      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800674a:	d115      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800674c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006750:	3308      	adds	r3, #8
 8006752:	2100      	movs	r1, #0
 8006754:	4618      	mov	r0, r3
 8006756:	f001 fce7 	bl	8008128 <RCCEx_PLL2_Config>
 800675a:	4603      	mov	r3, r0
 800675c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006760:	e015      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006766:	3328      	adds	r3, #40	; 0x28
 8006768:	2102      	movs	r1, #2
 800676a:	4618      	mov	r0, r3
 800676c:	f001 fd8e 	bl	800828c <RCCEx_PLL3_Config>
 8006770:	4603      	mov	r3, r0
 8006772:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006776:	e00a      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800677e:	e006      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006780:	bf00      	nop
 8006782:	e004      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006784:	bf00      	nop
 8006786:	e002      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006788:	bf00      	nop
 800678a:	e000      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800678c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800678e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10b      	bne.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006796:	4b39      	ldr	r3, [pc, #228]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800679e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067a6:	4a35      	ldr	r2, [pc, #212]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80067a8:	430b      	orrs	r3, r1
 80067aa:	6553      	str	r3, [r2, #84]	; 0x54
 80067ac:	e003      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80067b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80067c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067c6:	2300      	movs	r3, #0
 80067c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80067cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4313      	orrs	r3, r2
 80067d4:	d058      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80067d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80067e2:	d033      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80067e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80067e8:	d82c      	bhi.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80067ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ee:	d02f      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80067f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f4:	d826      	bhi.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80067f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067fa:	d02b      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80067fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006800:	d820      	bhi.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006806:	d012      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800680c:	d81a      	bhi.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800680e:	2b00      	cmp	r3, #0
 8006810:	d022      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006816:	d115      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800681c:	3308      	adds	r3, #8
 800681e:	2100      	movs	r1, #0
 8006820:	4618      	mov	r0, r3
 8006822:	f001 fc81 	bl	8008128 <RCCEx_PLL2_Config>
 8006826:	4603      	mov	r3, r0
 8006828:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800682c:	e015      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800682e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006832:	3328      	adds	r3, #40	; 0x28
 8006834:	2102      	movs	r1, #2
 8006836:	4618      	mov	r0, r3
 8006838:	f001 fd28 	bl	800828c <RCCEx_PLL3_Config>
 800683c:	4603      	mov	r3, r0
 800683e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006842:	e00a      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800684a:	e006      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800684c:	bf00      	nop
 800684e:	e004      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006850:	bf00      	nop
 8006852:	e002      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006854:	bf00      	nop
 8006856:	e000      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800685a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10e      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006862:	4b06      	ldr	r3, [pc, #24]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006866:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800686a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800686e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006872:	4a02      	ldr	r2, [pc, #8]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006874:	430b      	orrs	r3, r1
 8006876:	6593      	str	r3, [r2, #88]	; 0x58
 8006878:	e006      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800687a:	bf00      	nop
 800687c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006880:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006884:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006890:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006898:	2300      	movs	r3, #0
 800689a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800689e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80068a2:	460b      	mov	r3, r1
 80068a4:	4313      	orrs	r3, r2
 80068a6:	d055      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80068a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80068b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80068b4:	d033      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80068b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80068ba:	d82c      	bhi.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80068bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c0:	d02f      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80068c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c6:	d826      	bhi.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80068c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80068cc:	d02b      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80068ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80068d2:	d820      	bhi.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80068d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068d8:	d012      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80068da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068de:	d81a      	bhi.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d022      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80068e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e8:	d115      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068ee:	3308      	adds	r3, #8
 80068f0:	2100      	movs	r1, #0
 80068f2:	4618      	mov	r0, r3
 80068f4:	f001 fc18 	bl	8008128 <RCCEx_PLL2_Config>
 80068f8:	4603      	mov	r3, r0
 80068fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80068fe:	e015      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006904:	3328      	adds	r3, #40	; 0x28
 8006906:	2102      	movs	r1, #2
 8006908:	4618      	mov	r0, r3
 800690a:	f001 fcbf 	bl	800828c <RCCEx_PLL3_Config>
 800690e:	4603      	mov	r3, r0
 8006910:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006914:	e00a      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800691c:	e006      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800691e:	bf00      	nop
 8006920:	e004      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006922:	bf00      	nop
 8006924:	e002      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006926:	bf00      	nop
 8006928:	e000      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800692a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800692c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10b      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006934:	4ba1      	ldr	r3, [pc, #644]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006938:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800693c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006940:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006944:	4a9d      	ldr	r2, [pc, #628]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006946:	430b      	orrs	r3, r1
 8006948:	6593      	str	r3, [r2, #88]	; 0x58
 800694a:	e003      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006950:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	f002 0308 	and.w	r3, r2, #8
 8006960:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006964:	2300      	movs	r3, #0
 8006966:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800696a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800696e:	460b      	mov	r3, r1
 8006970:	4313      	orrs	r3, r2
 8006972:	d01e      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800697c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006980:	d10c      	bne.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006986:	3328      	adds	r3, #40	; 0x28
 8006988:	2102      	movs	r1, #2
 800698a:	4618      	mov	r0, r3
 800698c:	f001 fc7e 	bl	800828c <RCCEx_PLL3_Config>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d002      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800699c:	4b87      	ldr	r3, [pc, #540]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800699e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ac:	4a83      	ldr	r2, [pc, #524]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069ae:	430b      	orrs	r3, r1
 80069b0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ba:	f002 0310 	and.w	r3, r2, #16
 80069be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069c2:	2300      	movs	r3, #0
 80069c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80069c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80069cc:	460b      	mov	r3, r1
 80069ce:	4313      	orrs	r3, r2
 80069d0:	d01e      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80069d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069de:	d10c      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069e4:	3328      	adds	r3, #40	; 0x28
 80069e6:	2102      	movs	r1, #2
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 fc4f 	bl	800828c <RCCEx_PLL3_Config>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069fa:	4b70      	ldr	r3, [pc, #448]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a0a:	4a6c      	ldr	r2, [pc, #432]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a0c:	430b      	orrs	r3, r1
 8006a0e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006a1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a20:	2300      	movs	r3, #0
 8006a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a26:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	d03e      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a3c:	d022      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006a3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a42:	d81b      	bhi.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a4c:	d00b      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006a4e:	e015      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a54:	3308      	adds	r3, #8
 8006a56:	2100      	movs	r1, #0
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f001 fb65 	bl	8008128 <RCCEx_PLL2_Config>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a64:	e00f      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a6a:	3328      	adds	r3, #40	; 0x28
 8006a6c:	2102      	movs	r1, #2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f001 fc0c 	bl	800828c <RCCEx_PLL3_Config>
 8006a74:	4603      	mov	r3, r0
 8006a76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a7a:	e004      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006a82:	e000      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10b      	bne.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a8e:	4b4b      	ldr	r3, [pc, #300]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a92:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a9e:	4a47      	ldr	r2, [pc, #284]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006aa0:	430b      	orrs	r3, r1
 8006aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8006aa4:	e003      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006aaa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006aba:	67bb      	str	r3, [r7, #120]	; 0x78
 8006abc:	2300      	movs	r3, #0
 8006abe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ac0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	d03b      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ad6:	d01f      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006ad8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006adc:	d818      	bhi.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ae2:	d003      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006ae4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ae8:	d007      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006aea:	e011      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aec:	4b33      	ldr	r3, [pc, #204]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af0:	4a32      	ldr	r2, [pc, #200]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006af6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006af8:	e00f      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006afe:	3328      	adds	r3, #40	; 0x28
 8006b00:	2101      	movs	r1, #1
 8006b02:	4618      	mov	r0, r3
 8006b04:	f001 fbc2 	bl	800828c <RCCEx_PLL3_Config>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b0e:	e004      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006b16:	e000      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10b      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b22:	4b26      	ldr	r3, [pc, #152]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b26:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b32:	4a22      	ldr	r2, [pc, #136]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b34:	430b      	orrs	r3, r1
 8006b36:	6553      	str	r3, [r2, #84]	; 0x54
 8006b38:	e003      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006b4e:	673b      	str	r3, [r7, #112]	; 0x70
 8006b50:	2300      	movs	r3, #0
 8006b52:	677b      	str	r3, [r7, #116]	; 0x74
 8006b54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	d034      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b6c:	d007      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006b6e:	e011      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b70:	4b12      	ldr	r3, [pc, #72]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	4a11      	ldr	r2, [pc, #68]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b7c:	e00e      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b82:	3308      	adds	r3, #8
 8006b84:	2102      	movs	r1, #2
 8006b86:	4618      	mov	r0, r3
 8006b88:	f001 face 	bl	8008128 <RCCEx_PLL2_Config>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b92:	e003      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10d      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ba4:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb2:	4a02      	ldr	r2, [pc, #8]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006bb4:	430b      	orrs	r3, r1
 8006bb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bb8:	e006      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006bba:	bf00      	nop
 8006bbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006bc4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006bd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bda:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006bde:	460b      	mov	r3, r1
 8006be0:	4313      	orrs	r3, r2
 8006be2:	d00c      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006be8:	3328      	adds	r3, #40	; 0x28
 8006bea:	2102      	movs	r1, #2
 8006bec:	4618      	mov	r0, r3
 8006bee:	f001 fb4d 	bl	800828c <RCCEx_PLL3_Config>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006c0a:	663b      	str	r3, [r7, #96]	; 0x60
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	667b      	str	r3, [r7, #100]	; 0x64
 8006c10:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006c14:	460b      	mov	r3, r1
 8006c16:	4313      	orrs	r3, r2
 8006c18:	d038      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c26:	d018      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006c28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c2c:	d811      	bhi.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c32:	d014      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c38:	d80b      	bhi.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d011      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c42:	d106      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c44:	4bc3      	ldr	r3, [pc, #780]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	4ac2      	ldr	r2, [pc, #776]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006c50:	e008      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006c58:	e004      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006c5a:	bf00      	nop
 8006c5c:	e002      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006c5e:	bf00      	nop
 8006c60:	e000      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10b      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c6c:	4bb9      	ldr	r3, [pc, #740]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c70:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7c:	4ab5      	ldr	r2, [pc, #724]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c7e:	430b      	orrs	r3, r1
 8006c80:	6553      	str	r3, [r2, #84]	; 0x54
 8006c82:	e003      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c88:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006c98:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	d009      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ca8:	4baa      	ldr	r3, [pc, #680]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cb6:	4aa7      	ldr	r2, [pc, #668]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006cb8:	430b      	orrs	r3, r1
 8006cba:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006cc8:	653b      	str	r3, [r7, #80]	; 0x50
 8006cca:	2300      	movs	r3, #0
 8006ccc:	657b      	str	r3, [r7, #84]	; 0x54
 8006cce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	d009      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006cd8:	4b9e      	ldr	r3, [pc, #632]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cdc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce6:	4a9b      	ldr	r2, [pc, #620]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ce8:	430b      	orrs	r3, r1
 8006cea:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006cf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cfe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006d02:	460b      	mov	r3, r1
 8006d04:	4313      	orrs	r3, r2
 8006d06:	d009      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006d08:	4b92      	ldr	r3, [pc, #584]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8006d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d16:	4a8f      	ldr	r2, [pc, #572]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d18:	430b      	orrs	r3, r1
 8006d1a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006d28:	643b      	str	r3, [r7, #64]	; 0x40
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d2e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006d32:	460b      	mov	r3, r1
 8006d34:	4313      	orrs	r3, r2
 8006d36:	d00e      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d38:	4b86      	ldr	r3, [pc, #536]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	4a85      	ldr	r2, [pc, #532]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d42:	6113      	str	r3, [r2, #16]
 8006d44:	4b83      	ldr	r3, [pc, #524]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d46:	6919      	ldr	r1, [r3, #16]
 8006d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006d50:	4a80      	ldr	r2, [pc, #512]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d52:	430b      	orrs	r3, r1
 8006d54:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006d62:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d64:	2300      	movs	r3, #0
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d68:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	d009      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d72:	4b78      	ldr	r3, [pc, #480]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d76:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d80:	4a74      	ldr	r2, [pc, #464]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d82:	430b      	orrs	r3, r1
 8006d84:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006d92:	633b      	str	r3, [r7, #48]	; 0x30
 8006d94:	2300      	movs	r3, #0
 8006d96:	637b      	str	r3, [r7, #52]	; 0x34
 8006d98:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	d00a      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006da2:	4b6c      	ldr	r3, [pc, #432]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006db2:	4a68      	ldr	r2, [pc, #416]	; (8006f54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006db4:	430b      	orrs	r3, r1
 8006db6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	62b9      	str	r1, [r7, #40]	; 0x28
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006dce:	460b      	mov	r3, r1
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	d011      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dd8:	3308      	adds	r3, #8
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f001 f9a3 	bl	8008128 <RCCEx_PLL2_Config>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006de8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d003      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006df4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	2100      	movs	r1, #0
 8006e02:	6239      	str	r1, [r7, #32]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
 8006e0a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4313      	orrs	r3, r2
 8006e12:	d011      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e18:	3308      	adds	r3, #8
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f001 f983 	bl	8008128 <RCCEx_PLL2_Config>
 8006e22:	4603      	mov	r3, r0
 8006e24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006e28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	2100      	movs	r1, #0
 8006e42:	61b9      	str	r1, [r7, #24]
 8006e44:	f003 0304 	and.w	r3, r3, #4
 8006e48:	61fb      	str	r3, [r7, #28]
 8006e4a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4313      	orrs	r3, r2
 8006e52:	d011      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e58:	3308      	adds	r3, #8
 8006e5a:	2102      	movs	r1, #2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f001 f963 	bl	8008128 <RCCEx_PLL2_Config>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006e68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	2100      	movs	r1, #0
 8006e82:	6139      	str	r1, [r7, #16]
 8006e84:	f003 0308 	and.w	r3, r3, #8
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	4313      	orrs	r3, r2
 8006e92:	d011      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e98:	3328      	adds	r3, #40	; 0x28
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f001 f9f5 	bl	800828c <RCCEx_PLL3_Config>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8006ea8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006eb4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	f003 0310 	and.w	r3, r3, #16
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	d011      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ed8:	3328      	adds	r3, #40	; 0x28
 8006eda:	2101      	movs	r1, #1
 8006edc:	4618      	mov	r0, r3
 8006ede:	f001 f9d5 	bl	800828c <RCCEx_PLL3_Config>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006ee8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ef4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	2100      	movs	r1, #0
 8006f02:	6039      	str	r1, [r7, #0]
 8006f04:	f003 0320 	and.w	r3, r3, #32
 8006f08:	607b      	str	r3, [r7, #4]
 8006f0a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4313      	orrs	r3, r2
 8006f12:	d011      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f18:	3328      	adds	r3, #40	; 0x28
 8006f1a:	2102      	movs	r1, #2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f001 f9b5 	bl	800828c <RCCEx_PLL3_Config>
 8006f22:	4603      	mov	r3, r0
 8006f24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006f28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8006f38:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	e000      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f52:	bf00      	nop
 8006f54:	58024400 	.word	0x58024400

08006f58 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b090      	sub	sp, #64	; 0x40
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f66:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006f6a:	430b      	orrs	r3, r1
 8006f6c:	f040 8094 	bne.w	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006f70:	4b97      	ldr	r3, [pc, #604]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f74:	f003 0307 	and.w	r3, r3, #7
 8006f78:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	f200 8087 	bhi.w	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006f82:	a201      	add	r2, pc, #4	; (adr r2, 8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f88:	08006f9d 	.word	0x08006f9d
 8006f8c:	08006fc5 	.word	0x08006fc5
 8006f90:	08006fed 	.word	0x08006fed
 8006f94:	08007089 	.word	0x08007089
 8006f98:	08007015 	.word	0x08007015
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f9c:	4b8c      	ldr	r3, [pc, #560]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fa8:	d108      	bne.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 ff68 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fb8:	f000 bc97 	b.w	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fc0:	f000 bc93 	b.w	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fc4:	4b82      	ldr	r3, [pc, #520]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fd0:	d108      	bne.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fd2:	f107 0318 	add.w	r3, r7, #24
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fcac 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fe0:	f000 bc83 	b.w	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fe8:	f000 bc7f 	b.w	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fec:	4b78      	ldr	r3, [pc, #480]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ff8:	d108      	bne.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ffa:	f107 030c 	add.w	r3, r7, #12
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fdec 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007008:	f000 bc6f 	b.w	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007010:	f000 bc6b 	b.w	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007014:	4b6e      	ldr	r3, [pc, #440]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007018:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800701c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800701e:	4b6c      	ldr	r3, [pc, #432]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0304 	and.w	r3, r3, #4
 8007026:	2b04      	cmp	r3, #4
 8007028:	d10c      	bne.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800702a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702c:	2b00      	cmp	r3, #0
 800702e:	d109      	bne.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007030:	4b67      	ldr	r3, [pc, #412]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	08db      	lsrs	r3, r3, #3
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	4a66      	ldr	r2, [pc, #408]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800703c:	fa22 f303 	lsr.w	r3, r2, r3
 8007040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007042:	e01f      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007044:	4b62      	ldr	r3, [pc, #392]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007050:	d106      	bne.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007054:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007058:	d102      	bne.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800705a:	4b5f      	ldr	r3, [pc, #380]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800705c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800705e:	e011      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007060:	4b5b      	ldr	r3, [pc, #364]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007068:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800706c:	d106      	bne.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800706e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007074:	d102      	bne.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007076:	4b59      	ldr	r3, [pc, #356]	; (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800707a:	e003      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800707c:	2300      	movs	r3, #0
 800707e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007080:	f000 bc33 	b.w	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007084:	f000 bc31 	b.w	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007088:	4b55      	ldr	r3, [pc, #340]	; (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800708a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800708c:	f000 bc2d 	b.w	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007094:	f000 bc29 	b.w	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800709c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80070a0:	430b      	orrs	r3, r1
 80070a2:	f040 809f 	bne.w	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80070a6:	4b4a      	ldr	r3, [pc, #296]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80070a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070aa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80070ae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80070b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b6:	d04d      	beq.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80070b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070be:	f200 8084 	bhi.w	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80070c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c4:	2bc0      	cmp	r3, #192	; 0xc0
 80070c6:	d07d      	beq.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	2bc0      	cmp	r3, #192	; 0xc0
 80070cc:	d87d      	bhi.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80070ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d0:	2b80      	cmp	r3, #128	; 0x80
 80070d2:	d02d      	beq.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80070d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d6:	2b80      	cmp	r3, #128	; 0x80
 80070d8:	d877      	bhi.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	2b40      	cmp	r3, #64	; 0x40
 80070e4:	d012      	beq.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80070e6:	e070      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070e8:	4b39      	ldr	r3, [pc, #228]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070f4:	d107      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fec2 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007104:	e3f1      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007106:	2300      	movs	r3, #0
 8007108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800710a:	e3ee      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800710c:	4b30      	ldr	r3, [pc, #192]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007118:	d107      	bne.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800711a:	f107 0318 	add.w	r3, r7, #24
 800711e:	4618      	mov	r0, r3
 8007120:	f000 fc08 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007128:	e3df      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800712a:	2300      	movs	r3, #0
 800712c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800712e:	e3dc      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007130:	4b27      	ldr	r3, [pc, #156]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800713c:	d107      	bne.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800713e:	f107 030c 	add.w	r3, r7, #12
 8007142:	4618      	mov	r0, r3
 8007144:	f000 fd4a 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800714c:	e3cd      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800714e:	2300      	movs	r3, #0
 8007150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007152:	e3ca      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007154:	4b1e      	ldr	r3, [pc, #120]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007158:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800715c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800715e:	4b1c      	ldr	r3, [pc, #112]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0304 	and.w	r3, r3, #4
 8007166:	2b04      	cmp	r3, #4
 8007168:	d10c      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800716a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716c:	2b00      	cmp	r3, #0
 800716e:	d109      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007170:	4b17      	ldr	r3, [pc, #92]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	08db      	lsrs	r3, r3, #3
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	4a16      	ldr	r2, [pc, #88]	; (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800717c:	fa22 f303 	lsr.w	r3, r2, r3
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007182:	e01e      	b.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007184:	4b12      	ldr	r3, [pc, #72]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007190:	d106      	bne.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8007192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007198:	d102      	bne.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800719a:	4b0f      	ldr	r3, [pc, #60]	; (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800719c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800719e:	e010      	b.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071a0:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071ac:	d106      	bne.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80071ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071b4:	d102      	bne.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80071b6:	4b09      	ldr	r3, [pc, #36]	; (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80071b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ba:	e002      	b.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071bc:	2300      	movs	r3, #0
 80071be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80071c0:	e393      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80071c2:	e392      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80071c4:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80071c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071c8:	e38f      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80071ca:	2300      	movs	r3, #0
 80071cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ce:	e38c      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80071d0:	58024400 	.word	0x58024400
 80071d4:	03d09000 	.word	0x03d09000
 80071d8:	003d0900 	.word	0x003d0900
 80071dc:	007a1200 	.word	0x007a1200
 80071e0:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80071e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071e8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80071ec:	430b      	orrs	r3, r1
 80071ee:	f040 809c 	bne.w	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80071f2:	4b9e      	ldr	r3, [pc, #632]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80071f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f6:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80071fa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007202:	d054      	beq.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800720a:	f200 808b 	bhi.w	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007214:	f000 8083 	beq.w	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8007218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800721e:	f200 8081 	bhi.w	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007228:	d02f      	beq.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007230:	d878      	bhi.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007234:	2b00      	cmp	r3, #0
 8007236:	d004      	beq.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8007238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800723e:	d012      	beq.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8007240:	e070      	b.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007242:	4b8a      	ldr	r3, [pc, #552]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800724a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800724e:	d107      	bne.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fe15 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800725a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800725e:	e344      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007260:	2300      	movs	r3, #0
 8007262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007264:	e341      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007266:	4b81      	ldr	r3, [pc, #516]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800726e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007272:	d107      	bne.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007274:	f107 0318 	add.w	r3, r7, #24
 8007278:	4618      	mov	r0, r3
 800727a:	f000 fb5b 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007282:	e332      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007284:	2300      	movs	r3, #0
 8007286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007288:	e32f      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800728a:	4b78      	ldr	r3, [pc, #480]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007292:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007296:	d107      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007298:	f107 030c 	add.w	r3, r7, #12
 800729c:	4618      	mov	r0, r3
 800729e:	f000 fc9d 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072a6:	e320      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80072a8:	2300      	movs	r3, #0
 80072aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072ac:	e31d      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072ae:	4b6f      	ldr	r3, [pc, #444]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80072b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072b8:	4b6c      	ldr	r3, [pc, #432]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0304 	and.w	r3, r3, #4
 80072c0:	2b04      	cmp	r3, #4
 80072c2:	d10c      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80072c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d109      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072ca:	4b68      	ldr	r3, [pc, #416]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	08db      	lsrs	r3, r3, #3
 80072d0:	f003 0303 	and.w	r3, r3, #3
 80072d4:	4a66      	ldr	r2, [pc, #408]	; (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80072d6:	fa22 f303 	lsr.w	r3, r2, r3
 80072da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072dc:	e01e      	b.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072de:	4b63      	ldr	r3, [pc, #396]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ea:	d106      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80072ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072f2:	d102      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072f4:	4b5f      	ldr	r3, [pc, #380]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80072f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072f8:	e010      	b.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072fa:	4b5c      	ldr	r3, [pc, #368]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007302:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007306:	d106      	bne.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800730e:	d102      	bne.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007310:	4b59      	ldr	r3, [pc, #356]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8007312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007314:	e002      	b.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800731a:	e2e6      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800731c:	e2e5      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800731e:	4b57      	ldr	r3, [pc, #348]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007320:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007322:	e2e2      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007328:	e2df      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800732a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800732e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007332:	430b      	orrs	r3, r1
 8007334:	f040 80a7 	bne.w	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007338:	4b4c      	ldr	r3, [pc, #304]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800733a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800733c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007340:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007348:	d055      	beq.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007350:	f200 8096 	bhi.w	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007356:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800735a:	f000 8084 	beq.w	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800735e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007360:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007364:	f200 808c 	bhi.w	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800736e:	d030      	beq.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8007370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007376:	f200 8083 	bhi.w	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	2b00      	cmp	r3, #0
 800737e:	d004      	beq.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007386:	d012      	beq.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8007388:	e07a      	b.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800738a:	4b38      	ldr	r3, [pc, #224]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007392:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007396:	d107      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800739c:	4618      	mov	r0, r3
 800739e:	f000 fd71 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073a6:	e2a0      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073ac:	e29d      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073ae:	4b2f      	ldr	r3, [pc, #188]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073ba:	d107      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073bc:	f107 0318 	add.w	r3, r7, #24
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 fab7 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073ca:	e28e      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80073cc:	2300      	movs	r3, #0
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073d0:	e28b      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073d2:	4b26      	ldr	r3, [pc, #152]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073de:	d107      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073e0:	f107 030c 	add.w	r3, r7, #12
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fbf9 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073ee:	e27c      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073f4:	e279      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073f6:	4b1d      	ldr	r3, [pc, #116]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80073f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007400:	4b1a      	ldr	r3, [pc, #104]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0304 	and.w	r3, r3, #4
 8007408:	2b04      	cmp	r3, #4
 800740a:	d10c      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800740c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007412:	4b16      	ldr	r3, [pc, #88]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	08db      	lsrs	r3, r3, #3
 8007418:	f003 0303 	and.w	r3, r3, #3
 800741c:	4a14      	ldr	r2, [pc, #80]	; (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800741e:	fa22 f303 	lsr.w	r3, r2, r3
 8007422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007424:	e01e      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007426:	4b11      	ldr	r3, [pc, #68]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800742e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007432:	d106      	bne.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800743a:	d102      	bne.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800743c:	4b0d      	ldr	r3, [pc, #52]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800743e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007440:	e010      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007442:	4b0a      	ldr	r3, [pc, #40]	; (800746c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800744a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800744e:	d106      	bne.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007456:	d102      	bne.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007458:	4b07      	ldr	r3, [pc, #28]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800745a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800745c:	e002      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800745e:	2300      	movs	r3, #0
 8007460:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007462:	e242      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007464:	e241      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007466:	4b05      	ldr	r3, [pc, #20]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007468:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800746a:	e23e      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800746c:	58024400 	.word	0x58024400
 8007470:	03d09000 	.word	0x03d09000
 8007474:	003d0900 	.word	0x003d0900
 8007478:	007a1200 	.word	0x007a1200
 800747c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007484:	e231      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007486:	e9d7 2300 	ldrd	r2, r3, [r7]
 800748a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800748e:	430b      	orrs	r3, r1
 8007490:	f040 8085 	bne.w	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007494:	4b9c      	ldr	r3, [pc, #624]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007498:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800749c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074a4:	d06b      	beq.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80074a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074ac:	d874      	bhi.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80074ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074b4:	d056      	beq.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80074b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074bc:	d86c      	bhi.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074c4:	d03b      	beq.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80074c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80074cc:	d864      	bhi.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80074ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074d4:	d021      	beq.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80074d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074dc:	d85c      	bhi.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80074de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d004      	beq.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ea:	d004      	beq.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80074ec:	e054      	b.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80074ee:	f7fe fb49 	bl	8005b84 <HAL_RCC_GetPCLK1Freq>
 80074f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80074f4:	e1f9      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074f6:	4b84      	ldr	r3, [pc, #528]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007502:	d107      	bne.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007504:	f107 0318 	add.w	r3, r7, #24
 8007508:	4618      	mov	r0, r3
 800750a:	f000 fa13 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007512:	e1ea      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007514:	2300      	movs	r3, #0
 8007516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007518:	e1e7      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800751a:	4b7b      	ldr	r3, [pc, #492]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007526:	d107      	bne.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007528:	f107 030c 	add.w	r3, r7, #12
 800752c:	4618      	mov	r0, r3
 800752e:	f000 fb55 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007536:	e1d8      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007538:	2300      	movs	r3, #0
 800753a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800753c:	e1d5      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800753e:	4b72      	ldr	r3, [pc, #456]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0304 	and.w	r3, r3, #4
 8007546:	2b04      	cmp	r3, #4
 8007548:	d109      	bne.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800754a:	4b6f      	ldr	r3, [pc, #444]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	08db      	lsrs	r3, r3, #3
 8007550:	f003 0303 	and.w	r3, r3, #3
 8007554:	4a6d      	ldr	r2, [pc, #436]	; (800770c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007556:	fa22 f303 	lsr.w	r3, r2, r3
 800755a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800755c:	e1c5      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007562:	e1c2      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007564:	4b68      	ldr	r3, [pc, #416]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007570:	d102      	bne.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8007572:	4b67      	ldr	r3, [pc, #412]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007574:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007576:	e1b8      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007578:	2300      	movs	r3, #0
 800757a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800757c:	e1b5      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800757e:	4b62      	ldr	r3, [pc, #392]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007586:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800758a:	d102      	bne.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800758c:	4b61      	ldr	r3, [pc, #388]	; (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800758e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007590:	e1ab      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007592:	2300      	movs	r3, #0
 8007594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007596:	e1a8      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800759c:	e1a5      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800759e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80075a6:	430b      	orrs	r3, r1
 80075a8:	d173      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80075aa:	4b57      	ldr	r3, [pc, #348]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80075ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075b2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80075b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075ba:	d02f      	beq.n	800761c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80075bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075c2:	d863      	bhi.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d004      	beq.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d0:	d012      	beq.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80075d2:	e05b      	b.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80075d4:	4b4c      	ldr	r3, [pc, #304]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075e0:	d107      	bne.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075e2:	f107 0318 	add.w	r3, r7, #24
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 f9a4 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80075f0:	e17b      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075f6:	e178      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075f8:	4b43      	ldr	r3, [pc, #268]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007604:	d107      	bne.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007606:	f107 030c 	add.w	r3, r7, #12
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fae6 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007614:	e169      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800761a:	e166      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800761c:	4b3a      	ldr	r3, [pc, #232]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800761e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007620:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007624:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007626:	4b38      	ldr	r3, [pc, #224]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b04      	cmp	r3, #4
 8007630:	d10c      	bne.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8007632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007634:	2b00      	cmp	r3, #0
 8007636:	d109      	bne.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007638:	4b33      	ldr	r3, [pc, #204]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	08db      	lsrs	r3, r3, #3
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	4a32      	ldr	r2, [pc, #200]	; (800770c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007644:	fa22 f303 	lsr.w	r3, r2, r3
 8007648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800764a:	e01e      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800764c:	4b2e      	ldr	r3, [pc, #184]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007658:	d106      	bne.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800765a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007660:	d102      	bne.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007662:	4b2b      	ldr	r3, [pc, #172]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007666:	e010      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007668:	4b27      	ldr	r3, [pc, #156]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007670:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007674:	d106      	bne.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8007676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800767c:	d102      	bne.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800767e:	4b25      	ldr	r3, [pc, #148]	; (8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8007680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007682:	e002      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007684:	2300      	movs	r3, #0
 8007686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007688:	e12f      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800768a:	e12e      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007690:	e12b      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007696:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800769a:	430b      	orrs	r3, r1
 800769c:	d13c      	bne.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800769e:	4b1a      	ldr	r3, [pc, #104]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80076a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076a6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80076a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d004      	beq.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80076ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b4:	d012      	beq.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80076b6:	e023      	b.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076b8:	4b13      	ldr	r3, [pc, #76]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076c4:	d107      	bne.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 fbda 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076d4:	e109      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076da:	e106      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076dc:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076e8:	d107      	bne.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076ea:	f107 0318 	add.w	r3, r7, #24
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 f920 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076f8:	e0f7      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076fe:	e0f4      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007700:	2300      	movs	r3, #0
 8007702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007704:	e0f1      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007706:	bf00      	nop
 8007708:	58024400 	.word	0x58024400
 800770c:	03d09000 	.word	0x03d09000
 8007710:	003d0900 	.word	0x003d0900
 8007714:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800771c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007720:	430b      	orrs	r3, r1
 8007722:	f040 8091 	bne.w	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007726:	4b73      	ldr	r3, [pc, #460]	; (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800772a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800772e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007736:	f000 8081 	beq.w	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007740:	d87f      	bhi.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007748:	d06b      	beq.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800774a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007750:	d877      	bhi.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007758:	d056      	beq.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800775a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007760:	d86f      	bhi.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007764:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007768:	d03b      	beq.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800776a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007770:	d867      	bhi.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007778:	d021      	beq.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800777a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007780:	d85f      	bhi.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	2b00      	cmp	r3, #0
 8007786:	d004      	beq.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800778e:	d004      	beq.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8007790:	e057      	b.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007792:	f000 f8b9 	bl	8007908 <HAL_RCCEx_GetD3PCLK1Freq>
 8007796:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007798:	e0a7      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800779a:	4b56      	ldr	r3, [pc, #344]	; (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077a6:	d107      	bne.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077a8:	f107 0318 	add.w	r3, r7, #24
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 f8c1 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077b6:	e098      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077bc:	e095      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077be:	4b4d      	ldr	r3, [pc, #308]	; (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077ca:	d107      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077cc:	f107 030c 	add.w	r3, r7, #12
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 fa03 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077da:	e086      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80077dc:	2300      	movs	r3, #0
 80077de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077e0:	e083      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077e2:	4b44      	ldr	r3, [pc, #272]	; (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0304 	and.w	r3, r3, #4
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	d109      	bne.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077ee:	4b41      	ldr	r3, [pc, #260]	; (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	08db      	lsrs	r3, r3, #3
 80077f4:	f003 0303 	and.w	r3, r3, #3
 80077f8:	4a3f      	ldr	r2, [pc, #252]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80077fa:	fa22 f303 	lsr.w	r3, r2, r3
 80077fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007800:	e073      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007806:	e070      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007808:	4b3a      	ldr	r3, [pc, #232]	; (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007814:	d102      	bne.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8007816:	4b39      	ldr	r3, [pc, #228]	; (80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8007818:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800781a:	e066      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007820:	e063      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007822:	4b34      	ldr	r3, [pc, #208]	; (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800782a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800782e:	d102      	bne.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8007830:	4b33      	ldr	r3, [pc, #204]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007832:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007834:	e059      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007836:	2300      	movs	r3, #0
 8007838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800783a:	e056      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800783c:	4b31      	ldr	r3, [pc, #196]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800783e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007840:	e053      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007842:	2300      	movs	r3, #0
 8007844:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007846:	e050      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800784c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007850:	430b      	orrs	r3, r1
 8007852:	d148      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007854:	4b27      	ldr	r3, [pc, #156]	; (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007858:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800785c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007864:	d02a      	beq.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800786c:	d838      	bhi.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800786e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007870:	2b00      	cmp	r3, #0
 8007872:	d004      	beq.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8007874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007876:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800787a:	d00d      	beq.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800787c:	e030      	b.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800787e:	4b1d      	ldr	r3, [pc, #116]	; (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800788a:	d102      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800788c:	4b1c      	ldr	r3, [pc, #112]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800788e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007890:	e02b      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007896:	e028      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007898:	4b16      	ldr	r3, [pc, #88]	; (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078a4:	d107      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 faea 	bl	8007e84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078b4:	e019      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80078b6:	2300      	movs	r3, #0
 80078b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078ba:	e016      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078bc:	4b0d      	ldr	r3, [pc, #52]	; (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078c8:	d107      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078ca:	f107 0318 	add.w	r3, r7, #24
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 f830 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078d8:	e007      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078de:	e004      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80078e0:	2300      	movs	r3, #0
 80078e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078e4:	e001      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80078e6:	2300      	movs	r3, #0
 80078e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80078ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3740      	adds	r7, #64	; 0x40
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	58024400 	.word	0x58024400
 80078f8:	03d09000 	.word	0x03d09000
 80078fc:	003d0900 	.word	0x003d0900
 8007900:	007a1200 	.word	0x007a1200
 8007904:	00bb8000 	.word	0x00bb8000

08007908 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800790c:	f7fe f90a 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8007910:	4602      	mov	r2, r0
 8007912:	4b06      	ldr	r3, [pc, #24]	; (800792c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	091b      	lsrs	r3, r3, #4
 8007918:	f003 0307 	and.w	r3, r3, #7
 800791c:	4904      	ldr	r1, [pc, #16]	; (8007930 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800791e:	5ccb      	ldrb	r3, [r1, r3]
 8007920:	f003 031f 	and.w	r3, r3, #31
 8007924:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007928:	4618      	mov	r0, r3
 800792a:	bd80      	pop	{r7, pc}
 800792c:	58024400 	.word	0x58024400
 8007930:	0800e578 	.word	0x0800e578

08007934 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007934:	b480      	push	{r7}
 8007936:	b089      	sub	sp, #36	; 0x24
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800793c:	4ba1      	ldr	r3, [pc, #644]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800793e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007940:	f003 0303 	and.w	r3, r3, #3
 8007944:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007946:	4b9f      	ldr	r3, [pc, #636]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794a:	0b1b      	lsrs	r3, r3, #12
 800794c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007950:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007952:	4b9c      	ldr	r3, [pc, #624]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	091b      	lsrs	r3, r3, #4
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800795e:	4b99      	ldr	r3, [pc, #612]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007962:	08db      	lsrs	r3, r3, #3
 8007964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	fb02 f303 	mul.w	r3, r2, r3
 800796e:	ee07 3a90 	vmov	s15, r3
 8007972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007976:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 8111 	beq.w	8007ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	2b02      	cmp	r3, #2
 8007986:	f000 8083 	beq.w	8007a90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	2b02      	cmp	r3, #2
 800798e:	f200 80a1 	bhi.w	8007ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d003      	beq.n	80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d056      	beq.n	8007a4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800799e:	e099      	b.n	8007ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079a0:	4b88      	ldr	r3, [pc, #544]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0320 	and.w	r3, r3, #32
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d02d      	beq.n	8007a08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079ac:	4b85      	ldr	r3, [pc, #532]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	08db      	lsrs	r3, r3, #3
 80079b2:	f003 0303 	and.w	r3, r3, #3
 80079b6:	4a84      	ldr	r2, [pc, #528]	; (8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80079b8:	fa22 f303 	lsr.w	r3, r2, r3
 80079bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	ee07 3a90 	vmov	s15, r3
 80079c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	ee07 3a90 	vmov	s15, r3
 80079ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d6:	4b7b      	ldr	r3, [pc, #492]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079de:	ee07 3a90 	vmov	s15, r3
 80079e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a06:	e087      	b.n	8007b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	ee07 3a90 	vmov	s15, r3
 8007a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a1a:	4b6a      	ldr	r3, [pc, #424]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a22:	ee07 3a90 	vmov	s15, r3
 8007a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a4a:	e065      	b.n	8007b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	ee07 3a90 	vmov	s15, r3
 8007a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a5e:	4b59      	ldr	r3, [pc, #356]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a66:	ee07 3a90 	vmov	s15, r3
 8007a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a72:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a8e:	e043      	b.n	8007b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa2:	4b48      	ldr	r3, [pc, #288]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aaa:	ee07 3a90 	vmov	s15, r3
 8007aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ab6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ad2:	e021      	b.n	8007b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	ee07 3a90 	vmov	s15, r3
 8007ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ade:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ae6:	4b37      	ldr	r3, [pc, #220]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aee:	ee07 3a90 	vmov	s15, r3
 8007af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007afa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007b18:	4b2a      	ldr	r3, [pc, #168]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1c:	0a5b      	lsrs	r3, r3, #9
 8007b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b22:	ee07 3a90 	vmov	s15, r3
 8007b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b32:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b3e:	ee17 2a90 	vmov	r2, s15
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007b46:	4b1f      	ldr	r3, [pc, #124]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4a:	0c1b      	lsrs	r3, r3, #16
 8007b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b50:	ee07 3a90 	vmov	s15, r3
 8007b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b60:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b6c:	ee17 2a90 	vmov	r2, s15
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007b74:	4b13      	ldr	r3, [pc, #76]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b78:	0e1b      	lsrs	r3, r3, #24
 8007b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b7e:	ee07 3a90 	vmov	s15, r3
 8007b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b9a:	ee17 2a90 	vmov	r2, s15
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	609a      	str	r2, [r3, #8]
}
 8007bb6:	bf00      	nop
 8007bb8:	3724      	adds	r7, #36	; 0x24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	58024400 	.word	0x58024400
 8007bc8:	03d09000 	.word	0x03d09000
 8007bcc:	46000000 	.word	0x46000000
 8007bd0:	4c742400 	.word	0x4c742400
 8007bd4:	4a742400 	.word	0x4a742400
 8007bd8:	4af42400 	.word	0x4af42400

08007bdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b089      	sub	sp, #36	; 0x24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007be4:	4ba1      	ldr	r3, [pc, #644]	; (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007bee:	4b9f      	ldr	r3, [pc, #636]	; (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf2:	0d1b      	lsrs	r3, r3, #20
 8007bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bf8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007bfa:	4b9c      	ldr	r3, [pc, #624]	; (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfe:	0a1b      	lsrs	r3, r3, #8
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007c06:	4b99      	ldr	r3, [pc, #612]	; (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c0a:	08db      	lsrs	r3, r3, #3
 8007c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	fb02 f303 	mul.w	r3, r2, r3
 8007c16:	ee07 3a90 	vmov	s15, r3
 8007c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 8111 	beq.w	8007e4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	f000 8083 	beq.w	8007d38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	f200 80a1 	bhi.w	8007d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d056      	beq.n	8007cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007c46:	e099      	b.n	8007d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c48:	4b88      	ldr	r3, [pc, #544]	; (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0320 	and.w	r3, r3, #32
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d02d      	beq.n	8007cb0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c54:	4b85      	ldr	r3, [pc, #532]	; (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	08db      	lsrs	r3, r3, #3
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	4a84      	ldr	r2, [pc, #528]	; (8007e70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007c60:	fa22 f303 	lsr.w	r3, r2, r3
 8007c64:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	ee07 3a90 	vmov	s15, r3
 8007c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c7e:	4b7b      	ldr	r3, [pc, #492]	; (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007caa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007cae:	e087      	b.n	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	ee07 3a90 	vmov	s15, r3
 8007cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cc2:	4b6a      	ldr	r3, [pc, #424]	; (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cca:	ee07 3a90 	vmov	s15, r3
 8007cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cf2:	e065      	b.n	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	ee07 3a90 	vmov	s15, r3
 8007cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007e7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d06:	4b59      	ldr	r3, [pc, #356]	; (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0e:	ee07 3a90 	vmov	s15, r3
 8007d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d36:	e043      	b.n	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	ee07 3a90 	vmov	s15, r3
 8007d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007e80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d4a:	4b48      	ldr	r3, [pc, #288]	; (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d52:	ee07 3a90 	vmov	s15, r3
 8007d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d7a:	e021      	b.n	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007e7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d8e:	4b37      	ldr	r3, [pc, #220]	; (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d96:	ee07 3a90 	vmov	s15, r3
 8007d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007da2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dbe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007dc0:	4b2a      	ldr	r3, [pc, #168]	; (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc4:	0a5b      	lsrs	r3, r3, #9
 8007dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dca:	ee07 3a90 	vmov	s15, r3
 8007dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007de6:	ee17 2a90 	vmov	r2, s15
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007dee:	4b1f      	ldr	r3, [pc, #124]	; (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df2:	0c1b      	lsrs	r3, r3, #16
 8007df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df8:	ee07 3a90 	vmov	s15, r3
 8007dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e14:	ee17 2a90 	vmov	r2, s15
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007e1c:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e20:	0e1b      	lsrs	r3, r3, #24
 8007e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e26:	ee07 3a90 	vmov	s15, r3
 8007e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e42:	ee17 2a90 	vmov	r2, s15
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007e4a:	e008      	b.n	8007e5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	609a      	str	r2, [r3, #8]
}
 8007e5e:	bf00      	nop
 8007e60:	3724      	adds	r7, #36	; 0x24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	58024400 	.word	0x58024400
 8007e70:	03d09000 	.word	0x03d09000
 8007e74:	46000000 	.word	0x46000000
 8007e78:	4c742400 	.word	0x4c742400
 8007e7c:	4a742400 	.word	0x4a742400
 8007e80:	4af42400 	.word	0x4af42400

08007e84 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b089      	sub	sp, #36	; 0x24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e8c:	4ba0      	ldr	r3, [pc, #640]	; (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e90:	f003 0303 	and.w	r3, r3, #3
 8007e94:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007e96:	4b9e      	ldr	r3, [pc, #632]	; (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9a:	091b      	lsrs	r3, r3, #4
 8007e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ea0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007ea2:	4b9b      	ldr	r3, [pc, #620]	; (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007eac:	4b98      	ldr	r3, [pc, #608]	; (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb0:	08db      	lsrs	r3, r3, #3
 8007eb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	fb02 f303 	mul.w	r3, r2, r3
 8007ebc:	ee07 3a90 	vmov	s15, r3
 8007ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 8111 	beq.w	80080f2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	f000 8083 	beq.w	8007fde <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	f200 80a1 	bhi.w	8008022 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d003      	beq.n	8007eee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d056      	beq.n	8007f9a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007eec:	e099      	b.n	8008022 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eee:	4b88      	ldr	r3, [pc, #544]	; (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0320 	and.w	r3, r3, #32
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d02d      	beq.n	8007f56 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007efa:	4b85      	ldr	r3, [pc, #532]	; (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	08db      	lsrs	r3, r3, #3
 8007f00:	f003 0303 	and.w	r3, r3, #3
 8007f04:	4a83      	ldr	r2, [pc, #524]	; (8008114 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007f06:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	ee07 3a90 	vmov	s15, r3
 8007f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	ee07 3a90 	vmov	s15, r3
 8007f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f24:	4b7a      	ldr	r3, [pc, #488]	; (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2c:	ee07 3a90 	vmov	s15, r3
 8007f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f34:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f38:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f50:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007f54:	e087      	b.n	8008066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	ee07 3a90 	vmov	s15, r3
 8007f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800811c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f68:	4b69      	ldr	r3, [pc, #420]	; (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f70:	ee07 3a90 	vmov	s15, r3
 8007f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f78:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f7c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f98:	e065      	b.n	8008066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	ee07 3a90 	vmov	s15, r3
 8007fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008120 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fac:	4b58      	ldr	r3, [pc, #352]	; (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb4:	ee07 3a90 	vmov	s15, r3
 8007fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fc0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fdc:	e043      	b.n	8008066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	ee07 3a90 	vmov	s15, r3
 8007fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008124 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ff0:	4b47      	ldr	r3, [pc, #284]	; (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff8:	ee07 3a90 	vmov	s15, r3
 8007ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008000:	ed97 6a03 	vldr	s12, [r7, #12]
 8008004:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800800c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800801c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008020:	e021      	b.n	8008066 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	ee07 3a90 	vmov	s15, r3
 8008028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800811c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008034:	4b36      	ldr	r3, [pc, #216]	; (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803c:	ee07 3a90 	vmov	s15, r3
 8008040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008044:	ed97 6a03 	vldr	s12, [r7, #12]
 8008048:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008118 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800804c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800805c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008060:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008064:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008066:	4b2a      	ldr	r3, [pc, #168]	; (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806a:	0a5b      	lsrs	r3, r3, #9
 800806c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008070:	ee07 3a90 	vmov	s15, r3
 8008074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800807c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008080:	edd7 6a07 	vldr	s13, [r7, #28]
 8008084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800808c:	ee17 2a90 	vmov	r2, s15
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008094:	4b1e      	ldr	r3, [pc, #120]	; (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008098:	0c1b      	lsrs	r3, r3, #16
 800809a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800809e:	ee07 3a90 	vmov	s15, r3
 80080a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80080b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080ba:	ee17 2a90 	vmov	r2, s15
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80080c2:	4b13      	ldr	r3, [pc, #76]	; (8008110 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c6:	0e1b      	lsrs	r3, r3, #24
 80080c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080cc:	ee07 3a90 	vmov	s15, r3
 80080d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80080e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080e8:	ee17 2a90 	vmov	r2, s15
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80080f0:	e008      	b.n	8008104 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	609a      	str	r2, [r3, #8]
}
 8008104:	bf00      	nop
 8008106:	3724      	adds	r7, #36	; 0x24
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	58024400 	.word	0x58024400
 8008114:	03d09000 	.word	0x03d09000
 8008118:	46000000 	.word	0x46000000
 800811c:	4c742400 	.word	0x4c742400
 8008120:	4a742400 	.word	0x4a742400
 8008124:	4af42400 	.word	0x4af42400

08008128 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008136:	4b53      	ldr	r3, [pc, #332]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 8008138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813a:	f003 0303 	and.w	r3, r3, #3
 800813e:	2b03      	cmp	r3, #3
 8008140:	d101      	bne.n	8008146 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e099      	b.n	800827a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008146:	4b4f      	ldr	r3, [pc, #316]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a4e      	ldr	r2, [pc, #312]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 800814c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008152:	f7f9 fd4b 	bl	8001bec <HAL_GetTick>
 8008156:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008158:	e008      	b.n	800816c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800815a:	f7f9 fd47 	bl	8001bec <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	2b02      	cmp	r3, #2
 8008166:	d901      	bls.n	800816c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e086      	b.n	800827a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800816c:	4b45      	ldr	r3, [pc, #276]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1f0      	bne.n	800815a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008178:	4b42      	ldr	r3, [pc, #264]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 800817a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	031b      	lsls	r3, r3, #12
 8008186:	493f      	ldr	r1, [pc, #252]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 8008188:	4313      	orrs	r3, r2
 800818a:	628b      	str	r3, [r1, #40]	; 0x28
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	3b01      	subs	r3, #1
 8008192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	3b01      	subs	r3, #1
 800819c:	025b      	lsls	r3, r3, #9
 800819e:	b29b      	uxth	r3, r3
 80081a0:	431a      	orrs	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	041b      	lsls	r3, r3, #16
 80081aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081ae:	431a      	orrs	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	061b      	lsls	r3, r3, #24
 80081b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081bc:	4931      	ldr	r1, [pc, #196]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80081c2:	4b30      	ldr	r3, [pc, #192]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	492d      	ldr	r1, [pc, #180]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80081d4:	4b2b      	ldr	r3, [pc, #172]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 80081d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d8:	f023 0220 	bic.w	r2, r3, #32
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	4928      	ldr	r1, [pc, #160]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80081e6:	4b27      	ldr	r3, [pc, #156]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 80081e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ea:	4a26      	ldr	r2, [pc, #152]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 80081ec:	f023 0310 	bic.w	r3, r3, #16
 80081f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80081f2:	4b24      	ldr	r3, [pc, #144]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 80081f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081f6:	4b24      	ldr	r3, [pc, #144]	; (8008288 <RCCEx_PLL2_Config+0x160>)
 80081f8:	4013      	ands	r3, r2
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	69d2      	ldr	r2, [r2, #28]
 80081fe:	00d2      	lsls	r2, r2, #3
 8008200:	4920      	ldr	r1, [pc, #128]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 8008202:	4313      	orrs	r3, r2
 8008204:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008206:	4b1f      	ldr	r3, [pc, #124]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 8008208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820a:	4a1e      	ldr	r2, [pc, #120]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 800820c:	f043 0310 	orr.w	r3, r3, #16
 8008210:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d106      	bne.n	8008226 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008218:	4b1a      	ldr	r3, [pc, #104]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 800821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821c:	4a19      	ldr	r2, [pc, #100]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 800821e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008222:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008224:	e00f      	b.n	8008246 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d106      	bne.n	800823a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800822c:	4b15      	ldr	r3, [pc, #84]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 800822e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008230:	4a14      	ldr	r2, [pc, #80]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 8008232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008236:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008238:	e005      	b.n	8008246 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800823a:	4b12      	ldr	r3, [pc, #72]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 800823c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823e:	4a11      	ldr	r2, [pc, #68]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 8008240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008244:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008246:	4b0f      	ldr	r3, [pc, #60]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a0e      	ldr	r2, [pc, #56]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 800824c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008252:	f7f9 fccb 	bl	8001bec <HAL_GetTick>
 8008256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008258:	e008      	b.n	800826c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800825a:	f7f9 fcc7 	bl	8001bec <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	2b02      	cmp	r3, #2
 8008266:	d901      	bls.n	800826c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e006      	b.n	800827a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800826c:	4b05      	ldr	r3, [pc, #20]	; (8008284 <RCCEx_PLL2_Config+0x15c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d0f0      	beq.n	800825a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008278:	7bfb      	ldrb	r3, [r7, #15]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	58024400 	.word	0x58024400
 8008288:	ffff0007 	.word	0xffff0007

0800828c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800829a:	4b53      	ldr	r3, [pc, #332]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 800829c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829e:	f003 0303 	and.w	r3, r3, #3
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d101      	bne.n	80082aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e099      	b.n	80083de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80082aa:	4b4f      	ldr	r3, [pc, #316]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a4e      	ldr	r2, [pc, #312]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80082b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082b6:	f7f9 fc99 	bl	8001bec <HAL_GetTick>
 80082ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082bc:	e008      	b.n	80082d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80082be:	f7f9 fc95 	bl	8001bec <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d901      	bls.n	80082d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e086      	b.n	80083de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80082d0:	4b45      	ldr	r3, [pc, #276]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1f0      	bne.n	80082be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80082dc:	4b42      	ldr	r3, [pc, #264]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80082de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	051b      	lsls	r3, r3, #20
 80082ea:	493f      	ldr	r1, [pc, #252]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	628b      	str	r3, [r1, #40]	; 0x28
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	3b01      	subs	r3, #1
 80082f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	3b01      	subs	r3, #1
 8008300:	025b      	lsls	r3, r3, #9
 8008302:	b29b      	uxth	r3, r3
 8008304:	431a      	orrs	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	3b01      	subs	r3, #1
 800830c:	041b      	lsls	r3, r3, #16
 800830e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008312:	431a      	orrs	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	3b01      	subs	r3, #1
 800831a:	061b      	lsls	r3, r3, #24
 800831c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008320:	4931      	ldr	r1, [pc, #196]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008322:	4313      	orrs	r3, r2
 8008324:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008326:	4b30      	ldr	r3, [pc, #192]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	492d      	ldr	r1, [pc, #180]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008334:	4313      	orrs	r3, r2
 8008336:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008338:	4b2b      	ldr	r3, [pc, #172]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 800833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	4928      	ldr	r1, [pc, #160]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008346:	4313      	orrs	r3, r2
 8008348:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800834a:	4b27      	ldr	r3, [pc, #156]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 800834c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834e:	4a26      	ldr	r2, [pc, #152]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008354:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008356:	4b24      	ldr	r3, [pc, #144]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800835a:	4b24      	ldr	r3, [pc, #144]	; (80083ec <RCCEx_PLL3_Config+0x160>)
 800835c:	4013      	ands	r3, r2
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	69d2      	ldr	r2, [r2, #28]
 8008362:	00d2      	lsls	r2, r2, #3
 8008364:	4920      	ldr	r1, [pc, #128]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008366:	4313      	orrs	r3, r2
 8008368:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800836a:	4b1f      	ldr	r3, [pc, #124]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 800836c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836e:	4a1e      	ldr	r2, [pc, #120]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008374:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d106      	bne.n	800838a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800837c:	4b1a      	ldr	r3, [pc, #104]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 800837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008380:	4a19      	ldr	r2, [pc, #100]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008382:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008386:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008388:	e00f      	b.n	80083aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d106      	bne.n	800839e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008390:	4b15      	ldr	r3, [pc, #84]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008394:	4a14      	ldr	r2, [pc, #80]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 8008396:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800839a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800839c:	e005      	b.n	80083aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800839e:	4b12      	ldr	r3, [pc, #72]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80083a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a2:	4a11      	ldr	r2, [pc, #68]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80083a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80083aa:	4b0f      	ldr	r3, [pc, #60]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a0e      	ldr	r2, [pc, #56]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80083b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083b6:	f7f9 fc19 	bl	8001bec <HAL_GetTick>
 80083ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083bc:	e008      	b.n	80083d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80083be:	f7f9 fc15 	bl	8001bec <HAL_GetTick>
 80083c2:	4602      	mov	r2, r0
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d901      	bls.n	80083d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e006      	b.n	80083de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80083d0:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <RCCEx_PLL3_Config+0x15c>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d0f0      	beq.n	80083be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	58024400 	.word	0x58024400
 80083ec:	ffff0007 	.word	0xffff0007

080083f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e049      	b.n	8008496 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	d106      	bne.n	800841c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7f9 f8dc 	bl	80015d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2202      	movs	r2, #2
 8008420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	3304      	adds	r3, #4
 800842c:	4619      	mov	r1, r3
 800842e:	4610      	mov	r0, r2
 8008430:	f000 fb26 	bl	8008a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
	...

080084a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e08f      	b.n	80085d4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d106      	bne.n	80084ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7f9 f833 	bl	8001534 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2202      	movs	r2, #2
 80084d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6899      	ldr	r1, [r3, #8]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	4b3e      	ldr	r3, [pc, #248]	; (80085dc <HAL_TIM_Encoder_Init+0x13c>)
 80084e2:	400b      	ands	r3, r1
 80084e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3304      	adds	r3, #4
 80084ee:	4619      	mov	r1, r3
 80084f0:	4610      	mov	r0, r2
 80084f2:	f000 fac5 	bl	8008a80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	4313      	orrs	r3, r2
 8008516:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	4b31      	ldr	r3, [pc, #196]	; (80085e0 <HAL_TIM_Encoder_Init+0x140>)
 800851c:	4013      	ands	r3, r2
 800851e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	021b      	lsls	r3, r3, #8
 800852a:	4313      	orrs	r3, r2
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	4313      	orrs	r3, r2
 8008530:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	4b2b      	ldr	r3, [pc, #172]	; (80085e4 <HAL_TIM_Encoder_Init+0x144>)
 8008536:	4013      	ands	r3, r2
 8008538:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	4b2a      	ldr	r3, [pc, #168]	; (80085e8 <HAL_TIM_Encoder_Init+0x148>)
 800853e:	4013      	ands	r3, r2
 8008540:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	68da      	ldr	r2, [r3, #12]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	69db      	ldr	r3, [r3, #28]
 800854a:	021b      	lsls	r3, r3, #8
 800854c:	4313      	orrs	r3, r2
 800854e:	693a      	ldr	r2, [r7, #16]
 8008550:	4313      	orrs	r3, r2
 8008552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	011a      	lsls	r2, r3, #4
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	031b      	lsls	r3, r3, #12
 8008560:	4313      	orrs	r3, r2
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	4313      	orrs	r3, r2
 8008566:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800856e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008576:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	011b      	lsls	r3, r3, #4
 8008582:	4313      	orrs	r3, r2
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	4313      	orrs	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3718      	adds	r7, #24
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	fffebff8 	.word	0xfffebff8
 80085e0:	fffffcfc 	.word	0xfffffcfc
 80085e4:	fffff3f3 	.word	0xfffff3f3
 80085e8:	ffff0f0f 	.word	0xffff0f0f

080085ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	f003 0302 	and.w	r3, r3, #2
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d122      	bne.n	8008648 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f003 0302 	and.w	r3, r3, #2
 800860c:	2b02      	cmp	r3, #2
 800860e:	d11b      	bne.n	8008648 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f06f 0202 	mvn.w	r2, #2
 8008618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	f003 0303 	and.w	r3, r3, #3
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fa08 	bl	8008a44 <HAL_TIM_IC_CaptureCallback>
 8008634:	e005      	b.n	8008642 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f9fa 	bl	8008a30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fa0b 	bl	8008a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	f003 0304 	and.w	r3, r3, #4
 8008652:	2b04      	cmp	r3, #4
 8008654:	d122      	bne.n	800869c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	f003 0304 	and.w	r3, r3, #4
 8008660:	2b04      	cmp	r3, #4
 8008662:	d11b      	bne.n	800869c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f06f 0204 	mvn.w	r2, #4
 800866c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2202      	movs	r2, #2
 8008672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f9de 	bl	8008a44 <HAL_TIM_IC_CaptureCallback>
 8008688:	e005      	b.n	8008696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f9d0 	bl	8008a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f9e1 	bl	8008a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	f003 0308 	and.w	r3, r3, #8
 80086a6:	2b08      	cmp	r3, #8
 80086a8:	d122      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f003 0308 	and.w	r3, r3, #8
 80086b4:	2b08      	cmp	r3, #8
 80086b6:	d11b      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f06f 0208 	mvn.w	r2, #8
 80086c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2204      	movs	r2, #4
 80086c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	f003 0303 	and.w	r3, r3, #3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f9b4 	bl	8008a44 <HAL_TIM_IC_CaptureCallback>
 80086dc:	e005      	b.n	80086ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f9a6 	bl	8008a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f9b7 	bl	8008a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	f003 0310 	and.w	r3, r3, #16
 80086fa:	2b10      	cmp	r3, #16
 80086fc:	d122      	bne.n	8008744 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f003 0310 	and.w	r3, r3, #16
 8008708:	2b10      	cmp	r3, #16
 800870a:	d11b      	bne.n	8008744 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f06f 0210 	mvn.w	r2, #16
 8008714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2208      	movs	r2, #8
 800871a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f98a 	bl	8008a44 <HAL_TIM_IC_CaptureCallback>
 8008730:	e005      	b.n	800873e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f97c 	bl	8008a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f98d 	bl	8008a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b01      	cmp	r3, #1
 8008750:	d10e      	bne.n	8008770 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	f003 0301 	and.w	r3, r3, #1
 800875c:	2b01      	cmp	r3, #1
 800875e:	d107      	bne.n	8008770 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f06f 0201 	mvn.w	r2, #1
 8008768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f956 	bl	8008a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800877a:	2b80      	cmp	r3, #128	; 0x80
 800877c:	d10e      	bne.n	800879c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008788:	2b80      	cmp	r3, #128	; 0x80
 800878a:	d107      	bne.n	800879c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fb42 	bl	8008e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087aa:	d10e      	bne.n	80087ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087b6:	2b80      	cmp	r3, #128	; 0x80
 80087b8:	d107      	bne.n	80087ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80087c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fb35 	bl	8008e34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d4:	2b40      	cmp	r3, #64	; 0x40
 80087d6:	d10e      	bne.n	80087f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e2:	2b40      	cmp	r3, #64	; 0x40
 80087e4:	d107      	bne.n	80087f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 f93b 	bl	8008a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	f003 0320 	and.w	r3, r3, #32
 8008800:	2b20      	cmp	r3, #32
 8008802:	d10e      	bne.n	8008822 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b20      	cmp	r3, #32
 8008810:	d107      	bne.n	8008822 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f06f 0220 	mvn.w	r2, #32
 800881a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 faf5 	bl	8008e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008822:	bf00      	nop
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
	...

0800882c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <HAL_TIM_ConfigClockSource+0x1c>
 8008844:	2302      	movs	r3, #2
 8008846:	e0dc      	b.n	8008a02 <HAL_TIM_ConfigClockSource+0x1d6>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	4b6a      	ldr	r3, [pc, #424]	; (8008a0c <HAL_TIM_ConfigClockSource+0x1e0>)
 8008864:	4013      	ands	r3, r2
 8008866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800886e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a64      	ldr	r2, [pc, #400]	; (8008a10 <HAL_TIM_ConfigClockSource+0x1e4>)
 800887e:	4293      	cmp	r3, r2
 8008880:	f000 80a9 	beq.w	80089d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008884:	4a62      	ldr	r2, [pc, #392]	; (8008a10 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008886:	4293      	cmp	r3, r2
 8008888:	f200 80ae 	bhi.w	80089e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800888c:	4a61      	ldr	r2, [pc, #388]	; (8008a14 <HAL_TIM_ConfigClockSource+0x1e8>)
 800888e:	4293      	cmp	r3, r2
 8008890:	f000 80a1 	beq.w	80089d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008894:	4a5f      	ldr	r2, [pc, #380]	; (8008a14 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008896:	4293      	cmp	r3, r2
 8008898:	f200 80a6 	bhi.w	80089e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800889c:	4a5e      	ldr	r2, [pc, #376]	; (8008a18 <HAL_TIM_ConfigClockSource+0x1ec>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	f000 8099 	beq.w	80089d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80088a4:	4a5c      	ldr	r2, [pc, #368]	; (8008a18 <HAL_TIM_ConfigClockSource+0x1ec>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	f200 809e 	bhi.w	80089e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80088ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80088b0:	f000 8091 	beq.w	80089d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80088b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80088b8:	f200 8096 	bhi.w	80089e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80088bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088c0:	f000 8089 	beq.w	80089d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80088c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088c8:	f200 808e 	bhi.w	80089e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80088cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088d0:	d03e      	beq.n	8008950 <HAL_TIM_ConfigClockSource+0x124>
 80088d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088d6:	f200 8087 	bhi.w	80089e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80088da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088de:	f000 8086 	beq.w	80089ee <HAL_TIM_ConfigClockSource+0x1c2>
 80088e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e6:	d87f      	bhi.n	80089e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80088e8:	2b70      	cmp	r3, #112	; 0x70
 80088ea:	d01a      	beq.n	8008922 <HAL_TIM_ConfigClockSource+0xf6>
 80088ec:	2b70      	cmp	r3, #112	; 0x70
 80088ee:	d87b      	bhi.n	80089e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80088f0:	2b60      	cmp	r3, #96	; 0x60
 80088f2:	d050      	beq.n	8008996 <HAL_TIM_ConfigClockSource+0x16a>
 80088f4:	2b60      	cmp	r3, #96	; 0x60
 80088f6:	d877      	bhi.n	80089e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80088f8:	2b50      	cmp	r3, #80	; 0x50
 80088fa:	d03c      	beq.n	8008976 <HAL_TIM_ConfigClockSource+0x14a>
 80088fc:	2b50      	cmp	r3, #80	; 0x50
 80088fe:	d873      	bhi.n	80089e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008900:	2b40      	cmp	r3, #64	; 0x40
 8008902:	d058      	beq.n	80089b6 <HAL_TIM_ConfigClockSource+0x18a>
 8008904:	2b40      	cmp	r3, #64	; 0x40
 8008906:	d86f      	bhi.n	80089e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008908:	2b30      	cmp	r3, #48	; 0x30
 800890a:	d064      	beq.n	80089d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800890c:	2b30      	cmp	r3, #48	; 0x30
 800890e:	d86b      	bhi.n	80089e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008910:	2b20      	cmp	r3, #32
 8008912:	d060      	beq.n	80089d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008914:	2b20      	cmp	r3, #32
 8008916:	d867      	bhi.n	80089e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008918:	2b00      	cmp	r3, #0
 800891a:	d05c      	beq.n	80089d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800891c:	2b10      	cmp	r3, #16
 800891e:	d05a      	beq.n	80089d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008920:	e062      	b.n	80089e8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008932:	f000 f9bd 	bl	8008cb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	609a      	str	r2, [r3, #8]
      break;
 800894e:	e04f      	b.n	80089f0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008960:	f000 f9a6 	bl	8008cb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689a      	ldr	r2, [r3, #8]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008972:	609a      	str	r2, [r3, #8]
      break;
 8008974:	e03c      	b.n	80089f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008982:	461a      	mov	r2, r3
 8008984:	f000 f916 	bl	8008bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2150      	movs	r1, #80	; 0x50
 800898e:	4618      	mov	r0, r3
 8008990:	f000 f970 	bl	8008c74 <TIM_ITRx_SetConfig>
      break;
 8008994:	e02c      	b.n	80089f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80089a2:	461a      	mov	r2, r3
 80089a4:	f000 f935 	bl	8008c12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2160      	movs	r1, #96	; 0x60
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 f960 	bl	8008c74 <TIM_ITRx_SetConfig>
      break;
 80089b4:	e01c      	b.n	80089f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089c2:	461a      	mov	r2, r3
 80089c4:	f000 f8f6 	bl	8008bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2140      	movs	r1, #64	; 0x40
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 f950 	bl	8008c74 <TIM_ITRx_SetConfig>
      break;
 80089d4:	e00c      	b.n	80089f0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4619      	mov	r1, r3
 80089e0:	4610      	mov	r0, r2
 80089e2:	f000 f947 	bl	8008c74 <TIM_ITRx_SetConfig>
      break;
 80089e6:	e003      	b.n	80089f0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	73fb      	strb	r3, [r7, #15]
      break;
 80089ec:	e000      	b.n	80089f0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80089ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	ffceff88 	.word	0xffceff88
 8008a10:	00100040 	.word	0x00100040
 8008a14:	00100030 	.word	0x00100030
 8008a18:	00100020 	.word	0x00100020

08008a1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a40      	ldr	r2, [pc, #256]	; (8008b94 <TIM_Base_SetConfig+0x114>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d013      	beq.n	8008ac0 <TIM_Base_SetConfig+0x40>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a9e:	d00f      	beq.n	8008ac0 <TIM_Base_SetConfig+0x40>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a3d      	ldr	r2, [pc, #244]	; (8008b98 <TIM_Base_SetConfig+0x118>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d00b      	beq.n	8008ac0 <TIM_Base_SetConfig+0x40>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a3c      	ldr	r2, [pc, #240]	; (8008b9c <TIM_Base_SetConfig+0x11c>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d007      	beq.n	8008ac0 <TIM_Base_SetConfig+0x40>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a3b      	ldr	r2, [pc, #236]	; (8008ba0 <TIM_Base_SetConfig+0x120>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d003      	beq.n	8008ac0 <TIM_Base_SetConfig+0x40>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a3a      	ldr	r2, [pc, #232]	; (8008ba4 <TIM_Base_SetConfig+0x124>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d108      	bne.n	8008ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a2f      	ldr	r2, [pc, #188]	; (8008b94 <TIM_Base_SetConfig+0x114>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d01f      	beq.n	8008b1a <TIM_Base_SetConfig+0x9a>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ae0:	d01b      	beq.n	8008b1a <TIM_Base_SetConfig+0x9a>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a2c      	ldr	r2, [pc, #176]	; (8008b98 <TIM_Base_SetConfig+0x118>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d017      	beq.n	8008b1a <TIM_Base_SetConfig+0x9a>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a2b      	ldr	r2, [pc, #172]	; (8008b9c <TIM_Base_SetConfig+0x11c>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d013      	beq.n	8008b1a <TIM_Base_SetConfig+0x9a>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a2a      	ldr	r2, [pc, #168]	; (8008ba0 <TIM_Base_SetConfig+0x120>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d00f      	beq.n	8008b1a <TIM_Base_SetConfig+0x9a>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a29      	ldr	r2, [pc, #164]	; (8008ba4 <TIM_Base_SetConfig+0x124>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d00b      	beq.n	8008b1a <TIM_Base_SetConfig+0x9a>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a28      	ldr	r2, [pc, #160]	; (8008ba8 <TIM_Base_SetConfig+0x128>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d007      	beq.n	8008b1a <TIM_Base_SetConfig+0x9a>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a27      	ldr	r2, [pc, #156]	; (8008bac <TIM_Base_SetConfig+0x12c>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d003      	beq.n	8008b1a <TIM_Base_SetConfig+0x9a>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a26      	ldr	r2, [pc, #152]	; (8008bb0 <TIM_Base_SetConfig+0x130>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d108      	bne.n	8008b2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	689a      	ldr	r2, [r3, #8]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a10      	ldr	r2, [pc, #64]	; (8008b94 <TIM_Base_SetConfig+0x114>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d00f      	beq.n	8008b78 <TIM_Base_SetConfig+0xf8>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a12      	ldr	r2, [pc, #72]	; (8008ba4 <TIM_Base_SetConfig+0x124>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d00b      	beq.n	8008b78 <TIM_Base_SetConfig+0xf8>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a11      	ldr	r2, [pc, #68]	; (8008ba8 <TIM_Base_SetConfig+0x128>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d007      	beq.n	8008b78 <TIM_Base_SetConfig+0xf8>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a10      	ldr	r2, [pc, #64]	; (8008bac <TIM_Base_SetConfig+0x12c>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d003      	beq.n	8008b78 <TIM_Base_SetConfig+0xf8>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a0f      	ldr	r2, [pc, #60]	; (8008bb0 <TIM_Base_SetConfig+0x130>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d103      	bne.n	8008b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	691a      	ldr	r2, [r3, #16]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	615a      	str	r2, [r3, #20]
}
 8008b86:	bf00      	nop
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	40010000 	.word	0x40010000
 8008b98:	40000400 	.word	0x40000400
 8008b9c:	40000800 	.word	0x40000800
 8008ba0:	40000c00 	.word	0x40000c00
 8008ba4:	40010400 	.word	0x40010400
 8008ba8:	40014000 	.word	0x40014000
 8008bac:	40014400 	.word	0x40014400
 8008bb0:	40014800 	.word	0x40014800

08008bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	f023 0201 	bic.w	r2, r3, #1
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	011b      	lsls	r3, r3, #4
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f023 030a 	bic.w	r3, r3, #10
 8008bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	621a      	str	r2, [r3, #32]
}
 8008c06:	bf00      	nop
 8008c08:	371c      	adds	r7, #28
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b087      	sub	sp, #28
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	f023 0210 	bic.w	r2, r3, #16
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6a1b      	ldr	r3, [r3, #32]
 8008c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	031b      	lsls	r3, r3, #12
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	011b      	lsls	r3, r3, #4
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	621a      	str	r2, [r3, #32]
}
 8008c66:	bf00      	nop
 8008c68:	371c      	adds	r7, #28
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
	...

08008c74 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	4b09      	ldr	r3, [pc, #36]	; (8008cac <TIM_ITRx_SetConfig+0x38>)
 8008c88:	4013      	ands	r3, r2
 8008c8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	f043 0307 	orr.w	r3, r3, #7
 8008c96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	609a      	str	r2, [r3, #8]
}
 8008c9e:	bf00      	nop
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	ffcfff8f 	.word	0xffcfff8f

08008cb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
 8008cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	021a      	lsls	r2, r3, #8
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	609a      	str	r2, [r3, #8]
}
 8008ce4:	bf00      	nop
 8008ce6:	371c      	adds	r7, #28
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d101      	bne.n	8008d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d04:	2302      	movs	r3, #2
 8008d06:	e06d      	b.n	8008de4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2202      	movs	r2, #2
 8008d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a30      	ldr	r2, [pc, #192]	; (8008df0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d004      	beq.n	8008d3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a2f      	ldr	r2, [pc, #188]	; (8008df4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d108      	bne.n	8008d4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a20      	ldr	r2, [pc, #128]	; (8008df0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d022      	beq.n	8008db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d7a:	d01d      	beq.n	8008db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a1d      	ldr	r2, [pc, #116]	; (8008df8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d018      	beq.n	8008db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a1c      	ldr	r2, [pc, #112]	; (8008dfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d013      	beq.n	8008db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a1a      	ldr	r2, [pc, #104]	; (8008e00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d00e      	beq.n	8008db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a15      	ldr	r2, [pc, #84]	; (8008df4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d009      	beq.n	8008db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a16      	ldr	r2, [pc, #88]	; (8008e04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d004      	beq.n	8008db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a15      	ldr	r2, [pc, #84]	; (8008e08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d10c      	bne.n	8008dd2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	40010000 	.word	0x40010000
 8008df4:	40010400 	.word	0x40010400
 8008df8:	40000400 	.word	0x40000400
 8008dfc:	40000800 	.word	0x40000800
 8008e00:	40000c00 	.word	0x40000c00
 8008e04:	40001800 	.word	0x40001800
 8008e08:	40014000 	.word	0x40014000

08008e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d101      	bne.n	8008e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e042      	b.n	8008ee0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d106      	bne.n	8008e72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7f8 fbd9 	bl	8001624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2224      	movs	r2, #36	; 0x24
 8008e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f022 0201 	bic.w	r2, r2, #1
 8008e88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fce0 	bl	8009850 <UART_SetConfig>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d101      	bne.n	8008e9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e022      	b.n	8008ee0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f001 fb40 	bl	800a528 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008eb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689a      	ldr	r2, [r3, #8]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ec6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f042 0201 	orr.w	r2, r2, #1
 8008ed6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f001 fbc7 	bl	800a66c <UART_CheckIdleState>
 8008ede:	4603      	mov	r3, r0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b08a      	sub	sp, #40	; 0x28
 8008eec:	af02      	add	r7, sp, #8
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	603b      	str	r3, [r7, #0]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008efe:	2b20      	cmp	r3, #32
 8008f00:	d17b      	bne.n	8008ffa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d002      	beq.n	8008f0e <HAL_UART_Transmit+0x26>
 8008f08:	88fb      	ldrh	r3, [r7, #6]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e074      	b.n	8008ffc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2221      	movs	r2, #33	; 0x21
 8008f1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f22:	f7f8 fe63 	bl	8001bec <HAL_GetTick>
 8008f26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	88fa      	ldrh	r2, [r7, #6]
 8008f2c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	88fa      	ldrh	r2, [r7, #6]
 8008f34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f40:	d108      	bne.n	8008f54 <HAL_UART_Transmit+0x6c>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d104      	bne.n	8008f54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	61bb      	str	r3, [r7, #24]
 8008f52:	e003      	b.n	8008f5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f5c:	e030      	b.n	8008fc0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2200      	movs	r2, #0
 8008f66:	2180      	movs	r1, #128	; 0x80
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f001 fc29 	bl	800a7c0 <UART_WaitOnFlagUntilTimeout>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d005      	beq.n	8008f80 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2220      	movs	r2, #32
 8008f78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e03d      	b.n	8008ffc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10b      	bne.n	8008f9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	3302      	adds	r3, #2
 8008f9a:	61bb      	str	r3, [r7, #24]
 8008f9c:	e007      	b.n	8008fae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	781a      	ldrb	r2, [r3, #0]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	3301      	adds	r3, #1
 8008fac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1c8      	bne.n	8008f5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2140      	movs	r1, #64	; 0x40
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f001 fbf2 	bl	800a7c0 <UART_WaitOnFlagUntilTimeout>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d005      	beq.n	8008fee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2220      	movs	r2, #32
 8008fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e006      	b.n	8008ffc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2220      	movs	r2, #32
 8008ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	e000      	b.n	8008ffc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008ffa:	2302      	movs	r3, #2
  }
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3720      	adds	r7, #32
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b08a      	sub	sp, #40	; 0x28
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	4613      	mov	r3, r2
 8009010:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009018:	2b20      	cmp	r3, #32
 800901a:	d137      	bne.n	800908c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d002      	beq.n	8009028 <HAL_UART_Receive_IT+0x24>
 8009022:	88fb      	ldrh	r3, [r7, #6]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e030      	b.n	800908e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a18      	ldr	r2, [pc, #96]	; (8009098 <HAL_UART_Receive_IT+0x94>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d01f      	beq.n	800907c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d018      	beq.n	800907c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	e853 3f00 	ldrex	r3, [r3]
 8009056:	613b      	str	r3, [r7, #16]
   return(result);
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800905e:	627b      	str	r3, [r7, #36]	; 0x24
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	461a      	mov	r2, r3
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	623b      	str	r3, [r7, #32]
 800906a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906c:	69f9      	ldr	r1, [r7, #28]
 800906e:	6a3a      	ldr	r2, [r7, #32]
 8009070:	e841 2300 	strex	r3, r2, [r1]
 8009074:	61bb      	str	r3, [r7, #24]
   return(result);
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1e6      	bne.n	800904a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800907c:	88fb      	ldrh	r3, [r7, #6]
 800907e:	461a      	mov	r2, r3
 8009080:	68b9      	ldr	r1, [r7, #8]
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f001 fc04 	bl	800a890 <UART_Start_Receive_IT>
 8009088:	4603      	mov	r3, r0
 800908a:	e000      	b.n	800908e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800908c:	2302      	movs	r3, #2
  }
}
 800908e:	4618      	mov	r0, r3
 8009090:	3728      	adds	r7, #40	; 0x28
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	58000c00 	.word	0x58000c00

0800909c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b0ba      	sub	sp, #232	; 0xe8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80090c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80090ca:	4013      	ands	r3, r2
 80090cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80090d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d11b      	bne.n	8009110 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090dc:	f003 0320 	and.w	r3, r3, #32
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d015      	beq.n	8009110 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80090e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090e8:	f003 0320 	and.w	r3, r3, #32
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d105      	bne.n	80090fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d009      	beq.n	8009110 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 8377 	beq.w	80097f4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	4798      	blx	r3
      }
      return;
 800910e:	e371      	b.n	80097f4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009110:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 8123 	beq.w	8009360 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800911a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800911e:	4b8d      	ldr	r3, [pc, #564]	; (8009354 <HAL_UART_IRQHandler+0x2b8>)
 8009120:	4013      	ands	r3, r2
 8009122:	2b00      	cmp	r3, #0
 8009124:	d106      	bne.n	8009134 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009126:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800912a:	4b8b      	ldr	r3, [pc, #556]	; (8009358 <HAL_UART_IRQHandler+0x2bc>)
 800912c:	4013      	ands	r3, r2
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 8116 	beq.w	8009360 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	2b00      	cmp	r3, #0
 800913e:	d011      	beq.n	8009164 <HAL_UART_IRQHandler+0xc8>
 8009140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00b      	beq.n	8009164 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2201      	movs	r2, #1
 8009152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800915a:	f043 0201 	orr.w	r2, r3, #1
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009168:	f003 0302 	and.w	r3, r3, #2
 800916c:	2b00      	cmp	r3, #0
 800916e:	d011      	beq.n	8009194 <HAL_UART_IRQHandler+0xf8>
 8009170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00b      	beq.n	8009194 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2202      	movs	r2, #2
 8009182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800918a:	f043 0204 	orr.w	r2, r3, #4
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009198:	f003 0304 	and.w	r3, r3, #4
 800919c:	2b00      	cmp	r3, #0
 800919e:	d011      	beq.n	80091c4 <HAL_UART_IRQHandler+0x128>
 80091a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00b      	beq.n	80091c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2204      	movs	r2, #4
 80091b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ba:	f043 0202 	orr.w	r2, r3, #2
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091c8:	f003 0308 	and.w	r3, r3, #8
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d017      	beq.n	8009200 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091d4:	f003 0320 	and.w	r3, r3, #32
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d105      	bne.n	80091e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80091dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80091e0:	4b5c      	ldr	r3, [pc, #368]	; (8009354 <HAL_UART_IRQHandler+0x2b8>)
 80091e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00b      	beq.n	8009200 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2208      	movs	r2, #8
 80091ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091f6:	f043 0208 	orr.w	r2, r3, #8
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009208:	2b00      	cmp	r3, #0
 800920a:	d012      	beq.n	8009232 <HAL_UART_IRQHandler+0x196>
 800920c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00c      	beq.n	8009232 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009228:	f043 0220 	orr.w	r2, r3, #32
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 82dd 	beq.w	80097f8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800923e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009242:	f003 0320 	and.w	r3, r3, #32
 8009246:	2b00      	cmp	r3, #0
 8009248:	d013      	beq.n	8009272 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800924a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800924e:	f003 0320 	and.w	r3, r3, #32
 8009252:	2b00      	cmp	r3, #0
 8009254:	d105      	bne.n	8009262 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800925a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800925e:	2b00      	cmp	r3, #0
 8009260:	d007      	beq.n	8009272 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009278:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009286:	2b40      	cmp	r3, #64	; 0x40
 8009288:	d005      	beq.n	8009296 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800928a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800928e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009292:	2b00      	cmp	r3, #0
 8009294:	d054      	beq.n	8009340 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f001 fc1c 	bl	800aad4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a6:	2b40      	cmp	r3, #64	; 0x40
 80092a8:	d146      	bne.n	8009338 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3308      	adds	r3, #8
 80092b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80092c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3308      	adds	r3, #8
 80092d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80092d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80092da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80092e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80092e6:	e841 2300 	strex	r3, r2, [r1]
 80092ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80092ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1d9      	bne.n	80092aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d017      	beq.n	8009330 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009306:	4a15      	ldr	r2, [pc, #84]	; (800935c <HAL_UART_IRQHandler+0x2c0>)
 8009308:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009310:	4618      	mov	r0, r3
 8009312:	f7fa fa97 	bl	8003844 <HAL_DMA_Abort_IT>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d019      	beq.n	8009350 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800932a:	4610      	mov	r0, r2
 800932c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800932e:	e00f      	b.n	8009350 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fa77 	bl	8009824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009336:	e00b      	b.n	8009350 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fa73 	bl	8009824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800933e:	e007      	b.n	8009350 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 fa6f 	bl	8009824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800934e:	e253      	b.n	80097f8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009350:	bf00      	nop
    return;
 8009352:	e251      	b.n	80097f8 <HAL_UART_IRQHandler+0x75c>
 8009354:	10000001 	.word	0x10000001
 8009358:	04000120 	.word	0x04000120
 800935c:	0800aba1 	.word	0x0800aba1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009364:	2b01      	cmp	r3, #1
 8009366:	f040 81e7 	bne.w	8009738 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800936a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800936e:	f003 0310 	and.w	r3, r3, #16
 8009372:	2b00      	cmp	r3, #0
 8009374:	f000 81e0 	beq.w	8009738 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800937c:	f003 0310 	and.w	r3, r3, #16
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 81d9 	beq.w	8009738 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2210      	movs	r2, #16
 800938c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009398:	2b40      	cmp	r3, #64	; 0x40
 800939a:	f040 8151 	bne.w	8009640 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a96      	ldr	r2, [pc, #600]	; (8009600 <HAL_UART_IRQHandler+0x564>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d068      	beq.n	800947e <HAL_UART_IRQHandler+0x3e2>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a93      	ldr	r2, [pc, #588]	; (8009604 <HAL_UART_IRQHandler+0x568>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d061      	beq.n	800947e <HAL_UART_IRQHandler+0x3e2>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a91      	ldr	r2, [pc, #580]	; (8009608 <HAL_UART_IRQHandler+0x56c>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d05a      	beq.n	800947e <HAL_UART_IRQHandler+0x3e2>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a8e      	ldr	r2, [pc, #568]	; (800960c <HAL_UART_IRQHandler+0x570>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d053      	beq.n	800947e <HAL_UART_IRQHandler+0x3e2>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a8c      	ldr	r2, [pc, #560]	; (8009610 <HAL_UART_IRQHandler+0x574>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d04c      	beq.n	800947e <HAL_UART_IRQHandler+0x3e2>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a89      	ldr	r2, [pc, #548]	; (8009614 <HAL_UART_IRQHandler+0x578>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d045      	beq.n	800947e <HAL_UART_IRQHandler+0x3e2>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a87      	ldr	r2, [pc, #540]	; (8009618 <HAL_UART_IRQHandler+0x57c>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d03e      	beq.n	800947e <HAL_UART_IRQHandler+0x3e2>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a84      	ldr	r2, [pc, #528]	; (800961c <HAL_UART_IRQHandler+0x580>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d037      	beq.n	800947e <HAL_UART_IRQHandler+0x3e2>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a82      	ldr	r2, [pc, #520]	; (8009620 <HAL_UART_IRQHandler+0x584>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d030      	beq.n	800947e <HAL_UART_IRQHandler+0x3e2>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a7f      	ldr	r2, [pc, #508]	; (8009624 <HAL_UART_IRQHandler+0x588>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d029      	beq.n	800947e <HAL_UART_IRQHandler+0x3e2>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a7d      	ldr	r2, [pc, #500]	; (8009628 <HAL_UART_IRQHandler+0x58c>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d022      	beq.n	800947e <HAL_UART_IRQHandler+0x3e2>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a7a      	ldr	r2, [pc, #488]	; (800962c <HAL_UART_IRQHandler+0x590>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d01b      	beq.n	800947e <HAL_UART_IRQHandler+0x3e2>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a78      	ldr	r2, [pc, #480]	; (8009630 <HAL_UART_IRQHandler+0x594>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d014      	beq.n	800947e <HAL_UART_IRQHandler+0x3e2>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a75      	ldr	r2, [pc, #468]	; (8009634 <HAL_UART_IRQHandler+0x598>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d00d      	beq.n	800947e <HAL_UART_IRQHandler+0x3e2>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a73      	ldr	r2, [pc, #460]	; (8009638 <HAL_UART_IRQHandler+0x59c>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d006      	beq.n	800947e <HAL_UART_IRQHandler+0x3e2>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a70      	ldr	r2, [pc, #448]	; (800963c <HAL_UART_IRQHandler+0x5a0>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d106      	bne.n	800948c <HAL_UART_IRQHandler+0x3f0>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	b29b      	uxth	r3, r3
 800948a:	e005      	b.n	8009498 <HAL_UART_IRQHandler+0x3fc>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	b29b      	uxth	r3, r3
 8009498:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800949c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 81ab 	beq.w	80097fc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80094ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80094b0:	429a      	cmp	r2, r3
 80094b2:	f080 81a3 	bcs.w	80097fc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80094bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094c6:	69db      	ldr	r3, [r3, #28]
 80094c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094cc:	f000 8087 	beq.w	80095de <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094dc:	e853 3f00 	ldrex	r3, [r3]
 80094e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80094e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	461a      	mov	r2, r3
 80094f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009502:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009506:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800950a:	e841 2300 	strex	r3, r2, [r1]
 800950e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009512:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1da      	bne.n	80094d0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3308      	adds	r3, #8
 8009520:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009524:	e853 3f00 	ldrex	r3, [r3]
 8009528:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800952a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800952c:	f023 0301 	bic.w	r3, r3, #1
 8009530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	3308      	adds	r3, #8
 800953a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800953e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009542:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009544:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009546:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800954a:	e841 2300 	strex	r3, r2, [r1]
 800954e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1e1      	bne.n	800951a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3308      	adds	r3, #8
 800955c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009560:	e853 3f00 	ldrex	r3, [r3]
 8009564:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800956c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3308      	adds	r3, #8
 8009576:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800957a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800957c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009580:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009582:	e841 2300 	strex	r3, r2, [r1]
 8009586:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1e3      	bne.n	8009556 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2220      	movs	r2, #32
 8009592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80095aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095ac:	f023 0310 	bic.w	r3, r3, #16
 80095b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	461a      	mov	r2, r3
 80095ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095be:	65bb      	str	r3, [r7, #88]	; 0x58
 80095c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095c6:	e841 2300 	strex	r3, r2, [r1]
 80095ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80095cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1e4      	bne.n	800959c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095d8:	4618      	mov	r0, r3
 80095da:	f7f9 fe15 	bl	8003208 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2202      	movs	r2, #2
 80095e2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	4619      	mov	r1, r3
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f91d 	bl	8009838 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095fe:	e0fd      	b.n	80097fc <HAL_UART_IRQHandler+0x760>
 8009600:	40020010 	.word	0x40020010
 8009604:	40020028 	.word	0x40020028
 8009608:	40020040 	.word	0x40020040
 800960c:	40020058 	.word	0x40020058
 8009610:	40020070 	.word	0x40020070
 8009614:	40020088 	.word	0x40020088
 8009618:	400200a0 	.word	0x400200a0
 800961c:	400200b8 	.word	0x400200b8
 8009620:	40020410 	.word	0x40020410
 8009624:	40020428 	.word	0x40020428
 8009628:	40020440 	.word	0x40020440
 800962c:	40020458 	.word	0x40020458
 8009630:	40020470 	.word	0x40020470
 8009634:	40020488 	.word	0x40020488
 8009638:	400204a0 	.word	0x400204a0
 800963c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800964c:	b29b      	uxth	r3, r3
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800965a:	b29b      	uxth	r3, r3
 800965c:	2b00      	cmp	r3, #0
 800965e:	f000 80cf 	beq.w	8009800 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009662:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009666:	2b00      	cmp	r3, #0
 8009668:	f000 80ca 	beq.w	8009800 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800967a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009680:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	461a      	mov	r2, r3
 800968a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800968e:	647b      	str	r3, [r7, #68]	; 0x44
 8009690:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009692:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009694:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009696:	e841 2300 	strex	r3, r2, [r1]
 800969a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800969c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1e4      	bne.n	800966c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3308      	adds	r3, #8
 80096a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ac:	e853 3f00 	ldrex	r3, [r3]
 80096b0:	623b      	str	r3, [r7, #32]
   return(result);
 80096b2:	6a3a      	ldr	r2, [r7, #32]
 80096b4:	4b55      	ldr	r3, [pc, #340]	; (800980c <HAL_UART_IRQHandler+0x770>)
 80096b6:	4013      	ands	r3, r2
 80096b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	3308      	adds	r3, #8
 80096c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80096c6:	633a      	str	r2, [r7, #48]	; 0x30
 80096c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096ce:	e841 2300 	strex	r3, r2, [r1]
 80096d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1e3      	bne.n	80096a2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2220      	movs	r2, #32
 80096de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	e853 3f00 	ldrex	r3, [r3]
 80096fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f023 0310 	bic.w	r3, r3, #16
 8009702:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	461a      	mov	r2, r3
 800970c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009710:	61fb      	str	r3, [r7, #28]
 8009712:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009714:	69b9      	ldr	r1, [r7, #24]
 8009716:	69fa      	ldr	r2, [r7, #28]
 8009718:	e841 2300 	strex	r3, r2, [r1]
 800971c:	617b      	str	r3, [r7, #20]
   return(result);
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1e4      	bne.n	80096ee <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2202      	movs	r2, #2
 8009728:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800972a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f881 	bl	8009838 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009736:	e063      	b.n	8009800 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800973c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00e      	beq.n	8009762 <HAL_UART_IRQHandler+0x6c6>
 8009744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d008      	beq.n	8009762 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009758:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f001 ff7e 	bl	800b65c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009760:	e051      	b.n	8009806 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800976a:	2b00      	cmp	r3, #0
 800976c:	d014      	beq.n	8009798 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800976e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009776:	2b00      	cmp	r3, #0
 8009778:	d105      	bne.n	8009786 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800977a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800977e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009782:	2b00      	cmp	r3, #0
 8009784:	d008      	beq.n	8009798 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800978a:	2b00      	cmp	r3, #0
 800978c:	d03a      	beq.n	8009804 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	4798      	blx	r3
    }
    return;
 8009796:	e035      	b.n	8009804 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800979c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d009      	beq.n	80097b8 <HAL_UART_IRQHandler+0x71c>
 80097a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d003      	beq.n	80097b8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f001 fa0b 	bl	800abcc <UART_EndTransmit_IT>
    return;
 80097b6:	e026      	b.n	8009806 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80097b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d009      	beq.n	80097d8 <HAL_UART_IRQHandler+0x73c>
 80097c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d003      	beq.n	80097d8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f001 ff57 	bl	800b684 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097d6:	e016      	b.n	8009806 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80097d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d010      	beq.n	8009806 <HAL_UART_IRQHandler+0x76a>
 80097e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	da0c      	bge.n	8009806 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f001 ff3f 	bl	800b670 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097f2:	e008      	b.n	8009806 <HAL_UART_IRQHandler+0x76a>
      return;
 80097f4:	bf00      	nop
 80097f6:	e006      	b.n	8009806 <HAL_UART_IRQHandler+0x76a>
    return;
 80097f8:	bf00      	nop
 80097fa:	e004      	b.n	8009806 <HAL_UART_IRQHandler+0x76a>
      return;
 80097fc:	bf00      	nop
 80097fe:	e002      	b.n	8009806 <HAL_UART_IRQHandler+0x76a>
      return;
 8009800:	bf00      	nop
 8009802:	e000      	b.n	8009806 <HAL_UART_IRQHandler+0x76a>
    return;
 8009804:	bf00      	nop
  }
}
 8009806:	37e8      	adds	r7, #232	; 0xe8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	effffffe 	.word	0xeffffffe

08009810 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009854:	b092      	sub	sp, #72	; 0x48
 8009856:	af00      	add	r7, sp, #0
 8009858:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	689a      	ldr	r2, [r3, #8]
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	431a      	orrs	r2, r3
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	695b      	ldr	r3, [r3, #20]
 800986e:	431a      	orrs	r2, r3
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	69db      	ldr	r3, [r3, #28]
 8009874:	4313      	orrs	r3, r2
 8009876:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	4bbe      	ldr	r3, [pc, #760]	; (8009b78 <UART_SetConfig+0x328>)
 8009880:	4013      	ands	r3, r2
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	6812      	ldr	r2, [r2, #0]
 8009886:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009888:	430b      	orrs	r3, r1
 800988a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	68da      	ldr	r2, [r3, #12]
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	430a      	orrs	r2, r1
 80098a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4ab3      	ldr	r2, [pc, #716]	; (8009b7c <UART_SetConfig+0x32c>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d004      	beq.n	80098bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098b8:	4313      	orrs	r3, r2
 80098ba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	689a      	ldr	r2, [r3, #8]
 80098c2:	4baf      	ldr	r3, [pc, #700]	; (8009b80 <UART_SetConfig+0x330>)
 80098c4:	4013      	ands	r3, r2
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	6812      	ldr	r2, [r2, #0]
 80098ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80098cc:	430b      	orrs	r3, r1
 80098ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d6:	f023 010f 	bic.w	r1, r3, #15
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	430a      	orrs	r2, r1
 80098e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4aa6      	ldr	r2, [pc, #664]	; (8009b84 <UART_SetConfig+0x334>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d177      	bne.n	80099e0 <UART_SetConfig+0x190>
 80098f0:	4ba5      	ldr	r3, [pc, #660]	; (8009b88 <UART_SetConfig+0x338>)
 80098f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098f8:	2b28      	cmp	r3, #40	; 0x28
 80098fa:	d86d      	bhi.n	80099d8 <UART_SetConfig+0x188>
 80098fc:	a201      	add	r2, pc, #4	; (adr r2, 8009904 <UART_SetConfig+0xb4>)
 80098fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009902:	bf00      	nop
 8009904:	080099a9 	.word	0x080099a9
 8009908:	080099d9 	.word	0x080099d9
 800990c:	080099d9 	.word	0x080099d9
 8009910:	080099d9 	.word	0x080099d9
 8009914:	080099d9 	.word	0x080099d9
 8009918:	080099d9 	.word	0x080099d9
 800991c:	080099d9 	.word	0x080099d9
 8009920:	080099d9 	.word	0x080099d9
 8009924:	080099b1 	.word	0x080099b1
 8009928:	080099d9 	.word	0x080099d9
 800992c:	080099d9 	.word	0x080099d9
 8009930:	080099d9 	.word	0x080099d9
 8009934:	080099d9 	.word	0x080099d9
 8009938:	080099d9 	.word	0x080099d9
 800993c:	080099d9 	.word	0x080099d9
 8009940:	080099d9 	.word	0x080099d9
 8009944:	080099b9 	.word	0x080099b9
 8009948:	080099d9 	.word	0x080099d9
 800994c:	080099d9 	.word	0x080099d9
 8009950:	080099d9 	.word	0x080099d9
 8009954:	080099d9 	.word	0x080099d9
 8009958:	080099d9 	.word	0x080099d9
 800995c:	080099d9 	.word	0x080099d9
 8009960:	080099d9 	.word	0x080099d9
 8009964:	080099c1 	.word	0x080099c1
 8009968:	080099d9 	.word	0x080099d9
 800996c:	080099d9 	.word	0x080099d9
 8009970:	080099d9 	.word	0x080099d9
 8009974:	080099d9 	.word	0x080099d9
 8009978:	080099d9 	.word	0x080099d9
 800997c:	080099d9 	.word	0x080099d9
 8009980:	080099d9 	.word	0x080099d9
 8009984:	080099c9 	.word	0x080099c9
 8009988:	080099d9 	.word	0x080099d9
 800998c:	080099d9 	.word	0x080099d9
 8009990:	080099d9 	.word	0x080099d9
 8009994:	080099d9 	.word	0x080099d9
 8009998:	080099d9 	.word	0x080099d9
 800999c:	080099d9 	.word	0x080099d9
 80099a0:	080099d9 	.word	0x080099d9
 80099a4:	080099d1 	.word	0x080099d1
 80099a8:	2301      	movs	r3, #1
 80099aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ae:	e326      	b.n	8009ffe <UART_SetConfig+0x7ae>
 80099b0:	2304      	movs	r3, #4
 80099b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099b6:	e322      	b.n	8009ffe <UART_SetConfig+0x7ae>
 80099b8:	2308      	movs	r3, #8
 80099ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099be:	e31e      	b.n	8009ffe <UART_SetConfig+0x7ae>
 80099c0:	2310      	movs	r3, #16
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099c6:	e31a      	b.n	8009ffe <UART_SetConfig+0x7ae>
 80099c8:	2320      	movs	r3, #32
 80099ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ce:	e316      	b.n	8009ffe <UART_SetConfig+0x7ae>
 80099d0:	2340      	movs	r3, #64	; 0x40
 80099d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099d6:	e312      	b.n	8009ffe <UART_SetConfig+0x7ae>
 80099d8:	2380      	movs	r3, #128	; 0x80
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099de:	e30e      	b.n	8009ffe <UART_SetConfig+0x7ae>
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a69      	ldr	r2, [pc, #420]	; (8009b8c <UART_SetConfig+0x33c>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d130      	bne.n	8009a4c <UART_SetConfig+0x1fc>
 80099ea:	4b67      	ldr	r3, [pc, #412]	; (8009b88 <UART_SetConfig+0x338>)
 80099ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ee:	f003 0307 	and.w	r3, r3, #7
 80099f2:	2b05      	cmp	r3, #5
 80099f4:	d826      	bhi.n	8009a44 <UART_SetConfig+0x1f4>
 80099f6:	a201      	add	r2, pc, #4	; (adr r2, 80099fc <UART_SetConfig+0x1ac>)
 80099f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fc:	08009a15 	.word	0x08009a15
 8009a00:	08009a1d 	.word	0x08009a1d
 8009a04:	08009a25 	.word	0x08009a25
 8009a08:	08009a2d 	.word	0x08009a2d
 8009a0c:	08009a35 	.word	0x08009a35
 8009a10:	08009a3d 	.word	0x08009a3d
 8009a14:	2300      	movs	r3, #0
 8009a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a1a:	e2f0      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009a1c:	2304      	movs	r3, #4
 8009a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a22:	e2ec      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009a24:	2308      	movs	r3, #8
 8009a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a2a:	e2e8      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009a2c:	2310      	movs	r3, #16
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a32:	e2e4      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009a34:	2320      	movs	r3, #32
 8009a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a3a:	e2e0      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009a3c:	2340      	movs	r3, #64	; 0x40
 8009a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a42:	e2dc      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009a44:	2380      	movs	r3, #128	; 0x80
 8009a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a4a:	e2d8      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a4f      	ldr	r2, [pc, #316]	; (8009b90 <UART_SetConfig+0x340>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d130      	bne.n	8009ab8 <UART_SetConfig+0x268>
 8009a56:	4b4c      	ldr	r3, [pc, #304]	; (8009b88 <UART_SetConfig+0x338>)
 8009a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5a:	f003 0307 	and.w	r3, r3, #7
 8009a5e:	2b05      	cmp	r3, #5
 8009a60:	d826      	bhi.n	8009ab0 <UART_SetConfig+0x260>
 8009a62:	a201      	add	r2, pc, #4	; (adr r2, 8009a68 <UART_SetConfig+0x218>)
 8009a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a68:	08009a81 	.word	0x08009a81
 8009a6c:	08009a89 	.word	0x08009a89
 8009a70:	08009a91 	.word	0x08009a91
 8009a74:	08009a99 	.word	0x08009a99
 8009a78:	08009aa1 	.word	0x08009aa1
 8009a7c:	08009aa9 	.word	0x08009aa9
 8009a80:	2300      	movs	r3, #0
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a86:	e2ba      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009a88:	2304      	movs	r3, #4
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a8e:	e2b6      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009a90:	2308      	movs	r3, #8
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a96:	e2b2      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009a98:	2310      	movs	r3, #16
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a9e:	e2ae      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009aa0:	2320      	movs	r3, #32
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aa6:	e2aa      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009aa8:	2340      	movs	r3, #64	; 0x40
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aae:	e2a6      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009ab0:	2380      	movs	r3, #128	; 0x80
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ab6:	e2a2      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a35      	ldr	r2, [pc, #212]	; (8009b94 <UART_SetConfig+0x344>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d130      	bne.n	8009b24 <UART_SetConfig+0x2d4>
 8009ac2:	4b31      	ldr	r3, [pc, #196]	; (8009b88 <UART_SetConfig+0x338>)
 8009ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ac6:	f003 0307 	and.w	r3, r3, #7
 8009aca:	2b05      	cmp	r3, #5
 8009acc:	d826      	bhi.n	8009b1c <UART_SetConfig+0x2cc>
 8009ace:	a201      	add	r2, pc, #4	; (adr r2, 8009ad4 <UART_SetConfig+0x284>)
 8009ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad4:	08009aed 	.word	0x08009aed
 8009ad8:	08009af5 	.word	0x08009af5
 8009adc:	08009afd 	.word	0x08009afd
 8009ae0:	08009b05 	.word	0x08009b05
 8009ae4:	08009b0d 	.word	0x08009b0d
 8009ae8:	08009b15 	.word	0x08009b15
 8009aec:	2300      	movs	r3, #0
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af2:	e284      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009af4:	2304      	movs	r3, #4
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afa:	e280      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009afc:	2308      	movs	r3, #8
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b02:	e27c      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009b04:	2310      	movs	r3, #16
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b0a:	e278      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009b0c:	2320      	movs	r3, #32
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b12:	e274      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009b14:	2340      	movs	r3, #64	; 0x40
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b1a:	e270      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009b1c:	2380      	movs	r3, #128	; 0x80
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b22:	e26c      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a1b      	ldr	r2, [pc, #108]	; (8009b98 <UART_SetConfig+0x348>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d142      	bne.n	8009bb4 <UART_SetConfig+0x364>
 8009b2e:	4b16      	ldr	r3, [pc, #88]	; (8009b88 <UART_SetConfig+0x338>)
 8009b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b32:	f003 0307 	and.w	r3, r3, #7
 8009b36:	2b05      	cmp	r3, #5
 8009b38:	d838      	bhi.n	8009bac <UART_SetConfig+0x35c>
 8009b3a:	a201      	add	r2, pc, #4	; (adr r2, 8009b40 <UART_SetConfig+0x2f0>)
 8009b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b40:	08009b59 	.word	0x08009b59
 8009b44:	08009b61 	.word	0x08009b61
 8009b48:	08009b69 	.word	0x08009b69
 8009b4c:	08009b71 	.word	0x08009b71
 8009b50:	08009b9d 	.word	0x08009b9d
 8009b54:	08009ba5 	.word	0x08009ba5
 8009b58:	2300      	movs	r3, #0
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5e:	e24e      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009b60:	2304      	movs	r3, #4
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b66:	e24a      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009b68:	2308      	movs	r3, #8
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6e:	e246      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009b70:	2310      	movs	r3, #16
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b76:	e242      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009b78:	cfff69f3 	.word	0xcfff69f3
 8009b7c:	58000c00 	.word	0x58000c00
 8009b80:	11fff4ff 	.word	0x11fff4ff
 8009b84:	40011000 	.word	0x40011000
 8009b88:	58024400 	.word	0x58024400
 8009b8c:	40004400 	.word	0x40004400
 8009b90:	40004800 	.word	0x40004800
 8009b94:	40004c00 	.word	0x40004c00
 8009b98:	40005000 	.word	0x40005000
 8009b9c:	2320      	movs	r3, #32
 8009b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ba2:	e22c      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009ba4:	2340      	movs	r3, #64	; 0x40
 8009ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009baa:	e228      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009bac:	2380      	movs	r3, #128	; 0x80
 8009bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bb2:	e224      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4ab1      	ldr	r2, [pc, #708]	; (8009e80 <UART_SetConfig+0x630>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d176      	bne.n	8009cac <UART_SetConfig+0x45c>
 8009bbe:	4bb1      	ldr	r3, [pc, #708]	; (8009e84 <UART_SetConfig+0x634>)
 8009bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bc6:	2b28      	cmp	r3, #40	; 0x28
 8009bc8:	d86c      	bhi.n	8009ca4 <UART_SetConfig+0x454>
 8009bca:	a201      	add	r2, pc, #4	; (adr r2, 8009bd0 <UART_SetConfig+0x380>)
 8009bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd0:	08009c75 	.word	0x08009c75
 8009bd4:	08009ca5 	.word	0x08009ca5
 8009bd8:	08009ca5 	.word	0x08009ca5
 8009bdc:	08009ca5 	.word	0x08009ca5
 8009be0:	08009ca5 	.word	0x08009ca5
 8009be4:	08009ca5 	.word	0x08009ca5
 8009be8:	08009ca5 	.word	0x08009ca5
 8009bec:	08009ca5 	.word	0x08009ca5
 8009bf0:	08009c7d 	.word	0x08009c7d
 8009bf4:	08009ca5 	.word	0x08009ca5
 8009bf8:	08009ca5 	.word	0x08009ca5
 8009bfc:	08009ca5 	.word	0x08009ca5
 8009c00:	08009ca5 	.word	0x08009ca5
 8009c04:	08009ca5 	.word	0x08009ca5
 8009c08:	08009ca5 	.word	0x08009ca5
 8009c0c:	08009ca5 	.word	0x08009ca5
 8009c10:	08009c85 	.word	0x08009c85
 8009c14:	08009ca5 	.word	0x08009ca5
 8009c18:	08009ca5 	.word	0x08009ca5
 8009c1c:	08009ca5 	.word	0x08009ca5
 8009c20:	08009ca5 	.word	0x08009ca5
 8009c24:	08009ca5 	.word	0x08009ca5
 8009c28:	08009ca5 	.word	0x08009ca5
 8009c2c:	08009ca5 	.word	0x08009ca5
 8009c30:	08009c8d 	.word	0x08009c8d
 8009c34:	08009ca5 	.word	0x08009ca5
 8009c38:	08009ca5 	.word	0x08009ca5
 8009c3c:	08009ca5 	.word	0x08009ca5
 8009c40:	08009ca5 	.word	0x08009ca5
 8009c44:	08009ca5 	.word	0x08009ca5
 8009c48:	08009ca5 	.word	0x08009ca5
 8009c4c:	08009ca5 	.word	0x08009ca5
 8009c50:	08009c95 	.word	0x08009c95
 8009c54:	08009ca5 	.word	0x08009ca5
 8009c58:	08009ca5 	.word	0x08009ca5
 8009c5c:	08009ca5 	.word	0x08009ca5
 8009c60:	08009ca5 	.word	0x08009ca5
 8009c64:	08009ca5 	.word	0x08009ca5
 8009c68:	08009ca5 	.word	0x08009ca5
 8009c6c:	08009ca5 	.word	0x08009ca5
 8009c70:	08009c9d 	.word	0x08009c9d
 8009c74:	2301      	movs	r3, #1
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c7a:	e1c0      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009c7c:	2304      	movs	r3, #4
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c82:	e1bc      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009c84:	2308      	movs	r3, #8
 8009c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c8a:	e1b8      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009c8c:	2310      	movs	r3, #16
 8009c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c92:	e1b4      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009c94:	2320      	movs	r3, #32
 8009c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c9a:	e1b0      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009c9c:	2340      	movs	r3, #64	; 0x40
 8009c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ca2:	e1ac      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009ca4:	2380      	movs	r3, #128	; 0x80
 8009ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009caa:	e1a8      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a75      	ldr	r2, [pc, #468]	; (8009e88 <UART_SetConfig+0x638>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d130      	bne.n	8009d18 <UART_SetConfig+0x4c8>
 8009cb6:	4b73      	ldr	r3, [pc, #460]	; (8009e84 <UART_SetConfig+0x634>)
 8009cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cba:	f003 0307 	and.w	r3, r3, #7
 8009cbe:	2b05      	cmp	r3, #5
 8009cc0:	d826      	bhi.n	8009d10 <UART_SetConfig+0x4c0>
 8009cc2:	a201      	add	r2, pc, #4	; (adr r2, 8009cc8 <UART_SetConfig+0x478>)
 8009cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc8:	08009ce1 	.word	0x08009ce1
 8009ccc:	08009ce9 	.word	0x08009ce9
 8009cd0:	08009cf1 	.word	0x08009cf1
 8009cd4:	08009cf9 	.word	0x08009cf9
 8009cd8:	08009d01 	.word	0x08009d01
 8009cdc:	08009d09 	.word	0x08009d09
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce6:	e18a      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009ce8:	2304      	movs	r3, #4
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cee:	e186      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009cf0:	2308      	movs	r3, #8
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf6:	e182      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009cf8:	2310      	movs	r3, #16
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cfe:	e17e      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009d00:	2320      	movs	r3, #32
 8009d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d06:	e17a      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009d08:	2340      	movs	r3, #64	; 0x40
 8009d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d0e:	e176      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009d10:	2380      	movs	r3, #128	; 0x80
 8009d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d16:	e172      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a5b      	ldr	r2, [pc, #364]	; (8009e8c <UART_SetConfig+0x63c>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d130      	bne.n	8009d84 <UART_SetConfig+0x534>
 8009d22:	4b58      	ldr	r3, [pc, #352]	; (8009e84 <UART_SetConfig+0x634>)
 8009d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d26:	f003 0307 	and.w	r3, r3, #7
 8009d2a:	2b05      	cmp	r3, #5
 8009d2c:	d826      	bhi.n	8009d7c <UART_SetConfig+0x52c>
 8009d2e:	a201      	add	r2, pc, #4	; (adr r2, 8009d34 <UART_SetConfig+0x4e4>)
 8009d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d34:	08009d4d 	.word	0x08009d4d
 8009d38:	08009d55 	.word	0x08009d55
 8009d3c:	08009d5d 	.word	0x08009d5d
 8009d40:	08009d65 	.word	0x08009d65
 8009d44:	08009d6d 	.word	0x08009d6d
 8009d48:	08009d75 	.word	0x08009d75
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d52:	e154      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009d54:	2304      	movs	r3, #4
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d5a:	e150      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009d5c:	2308      	movs	r3, #8
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d62:	e14c      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009d64:	2310      	movs	r3, #16
 8009d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d6a:	e148      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009d6c:	2320      	movs	r3, #32
 8009d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d72:	e144      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009d74:	2340      	movs	r3, #64	; 0x40
 8009d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d7a:	e140      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009d7c:	2380      	movs	r3, #128	; 0x80
 8009d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d82:	e13c      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a41      	ldr	r2, [pc, #260]	; (8009e90 <UART_SetConfig+0x640>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	f040 8082 	bne.w	8009e94 <UART_SetConfig+0x644>
 8009d90:	4b3c      	ldr	r3, [pc, #240]	; (8009e84 <UART_SetConfig+0x634>)
 8009d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d98:	2b28      	cmp	r3, #40	; 0x28
 8009d9a:	d86d      	bhi.n	8009e78 <UART_SetConfig+0x628>
 8009d9c:	a201      	add	r2, pc, #4	; (adr r2, 8009da4 <UART_SetConfig+0x554>)
 8009d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da2:	bf00      	nop
 8009da4:	08009e49 	.word	0x08009e49
 8009da8:	08009e79 	.word	0x08009e79
 8009dac:	08009e79 	.word	0x08009e79
 8009db0:	08009e79 	.word	0x08009e79
 8009db4:	08009e79 	.word	0x08009e79
 8009db8:	08009e79 	.word	0x08009e79
 8009dbc:	08009e79 	.word	0x08009e79
 8009dc0:	08009e79 	.word	0x08009e79
 8009dc4:	08009e51 	.word	0x08009e51
 8009dc8:	08009e79 	.word	0x08009e79
 8009dcc:	08009e79 	.word	0x08009e79
 8009dd0:	08009e79 	.word	0x08009e79
 8009dd4:	08009e79 	.word	0x08009e79
 8009dd8:	08009e79 	.word	0x08009e79
 8009ddc:	08009e79 	.word	0x08009e79
 8009de0:	08009e79 	.word	0x08009e79
 8009de4:	08009e59 	.word	0x08009e59
 8009de8:	08009e79 	.word	0x08009e79
 8009dec:	08009e79 	.word	0x08009e79
 8009df0:	08009e79 	.word	0x08009e79
 8009df4:	08009e79 	.word	0x08009e79
 8009df8:	08009e79 	.word	0x08009e79
 8009dfc:	08009e79 	.word	0x08009e79
 8009e00:	08009e79 	.word	0x08009e79
 8009e04:	08009e61 	.word	0x08009e61
 8009e08:	08009e79 	.word	0x08009e79
 8009e0c:	08009e79 	.word	0x08009e79
 8009e10:	08009e79 	.word	0x08009e79
 8009e14:	08009e79 	.word	0x08009e79
 8009e18:	08009e79 	.word	0x08009e79
 8009e1c:	08009e79 	.word	0x08009e79
 8009e20:	08009e79 	.word	0x08009e79
 8009e24:	08009e69 	.word	0x08009e69
 8009e28:	08009e79 	.word	0x08009e79
 8009e2c:	08009e79 	.word	0x08009e79
 8009e30:	08009e79 	.word	0x08009e79
 8009e34:	08009e79 	.word	0x08009e79
 8009e38:	08009e79 	.word	0x08009e79
 8009e3c:	08009e79 	.word	0x08009e79
 8009e40:	08009e79 	.word	0x08009e79
 8009e44:	08009e71 	.word	0x08009e71
 8009e48:	2301      	movs	r3, #1
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e4e:	e0d6      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009e50:	2304      	movs	r3, #4
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e56:	e0d2      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009e58:	2308      	movs	r3, #8
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e5e:	e0ce      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009e60:	2310      	movs	r3, #16
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e66:	e0ca      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009e68:	2320      	movs	r3, #32
 8009e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e6e:	e0c6      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009e70:	2340      	movs	r3, #64	; 0x40
 8009e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e76:	e0c2      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009e78:	2380      	movs	r3, #128	; 0x80
 8009e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e7e:	e0be      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009e80:	40011400 	.word	0x40011400
 8009e84:	58024400 	.word	0x58024400
 8009e88:	40007800 	.word	0x40007800
 8009e8c:	40007c00 	.word	0x40007c00
 8009e90:	40011800 	.word	0x40011800
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4aad      	ldr	r2, [pc, #692]	; (800a150 <UART_SetConfig+0x900>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d176      	bne.n	8009f8c <UART_SetConfig+0x73c>
 8009e9e:	4bad      	ldr	r3, [pc, #692]	; (800a154 <UART_SetConfig+0x904>)
 8009ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ea2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ea6:	2b28      	cmp	r3, #40	; 0x28
 8009ea8:	d86c      	bhi.n	8009f84 <UART_SetConfig+0x734>
 8009eaa:	a201      	add	r2, pc, #4	; (adr r2, 8009eb0 <UART_SetConfig+0x660>)
 8009eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb0:	08009f55 	.word	0x08009f55
 8009eb4:	08009f85 	.word	0x08009f85
 8009eb8:	08009f85 	.word	0x08009f85
 8009ebc:	08009f85 	.word	0x08009f85
 8009ec0:	08009f85 	.word	0x08009f85
 8009ec4:	08009f85 	.word	0x08009f85
 8009ec8:	08009f85 	.word	0x08009f85
 8009ecc:	08009f85 	.word	0x08009f85
 8009ed0:	08009f5d 	.word	0x08009f5d
 8009ed4:	08009f85 	.word	0x08009f85
 8009ed8:	08009f85 	.word	0x08009f85
 8009edc:	08009f85 	.word	0x08009f85
 8009ee0:	08009f85 	.word	0x08009f85
 8009ee4:	08009f85 	.word	0x08009f85
 8009ee8:	08009f85 	.word	0x08009f85
 8009eec:	08009f85 	.word	0x08009f85
 8009ef0:	08009f65 	.word	0x08009f65
 8009ef4:	08009f85 	.word	0x08009f85
 8009ef8:	08009f85 	.word	0x08009f85
 8009efc:	08009f85 	.word	0x08009f85
 8009f00:	08009f85 	.word	0x08009f85
 8009f04:	08009f85 	.word	0x08009f85
 8009f08:	08009f85 	.word	0x08009f85
 8009f0c:	08009f85 	.word	0x08009f85
 8009f10:	08009f6d 	.word	0x08009f6d
 8009f14:	08009f85 	.word	0x08009f85
 8009f18:	08009f85 	.word	0x08009f85
 8009f1c:	08009f85 	.word	0x08009f85
 8009f20:	08009f85 	.word	0x08009f85
 8009f24:	08009f85 	.word	0x08009f85
 8009f28:	08009f85 	.word	0x08009f85
 8009f2c:	08009f85 	.word	0x08009f85
 8009f30:	08009f75 	.word	0x08009f75
 8009f34:	08009f85 	.word	0x08009f85
 8009f38:	08009f85 	.word	0x08009f85
 8009f3c:	08009f85 	.word	0x08009f85
 8009f40:	08009f85 	.word	0x08009f85
 8009f44:	08009f85 	.word	0x08009f85
 8009f48:	08009f85 	.word	0x08009f85
 8009f4c:	08009f85 	.word	0x08009f85
 8009f50:	08009f7d 	.word	0x08009f7d
 8009f54:	2301      	movs	r3, #1
 8009f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f5a:	e050      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009f5c:	2304      	movs	r3, #4
 8009f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f62:	e04c      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009f64:	2308      	movs	r3, #8
 8009f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f6a:	e048      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009f6c:	2310      	movs	r3, #16
 8009f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f72:	e044      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009f74:	2320      	movs	r3, #32
 8009f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f7a:	e040      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009f7c:	2340      	movs	r3, #64	; 0x40
 8009f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f82:	e03c      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009f84:	2380      	movs	r3, #128	; 0x80
 8009f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f8a:	e038      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a71      	ldr	r2, [pc, #452]	; (800a158 <UART_SetConfig+0x908>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d130      	bne.n	8009ff8 <UART_SetConfig+0x7a8>
 8009f96:	4b6f      	ldr	r3, [pc, #444]	; (800a154 <UART_SetConfig+0x904>)
 8009f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f9a:	f003 0307 	and.w	r3, r3, #7
 8009f9e:	2b05      	cmp	r3, #5
 8009fa0:	d826      	bhi.n	8009ff0 <UART_SetConfig+0x7a0>
 8009fa2:	a201      	add	r2, pc, #4	; (adr r2, 8009fa8 <UART_SetConfig+0x758>)
 8009fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa8:	08009fc1 	.word	0x08009fc1
 8009fac:	08009fc9 	.word	0x08009fc9
 8009fb0:	08009fd1 	.word	0x08009fd1
 8009fb4:	08009fd9 	.word	0x08009fd9
 8009fb8:	08009fe1 	.word	0x08009fe1
 8009fbc:	08009fe9 	.word	0x08009fe9
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fc6:	e01a      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009fc8:	2304      	movs	r3, #4
 8009fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fce:	e016      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009fd0:	2308      	movs	r3, #8
 8009fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fd6:	e012      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009fd8:	2310      	movs	r3, #16
 8009fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fde:	e00e      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009fe0:	2320      	movs	r3, #32
 8009fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fe6:	e00a      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009fe8:	2340      	movs	r3, #64	; 0x40
 8009fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fee:	e006      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009ff0:	2380      	movs	r3, #128	; 0x80
 8009ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ff6:	e002      	b.n	8009ffe <UART_SetConfig+0x7ae>
 8009ff8:	2380      	movs	r3, #128	; 0x80
 8009ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a55      	ldr	r2, [pc, #340]	; (800a158 <UART_SetConfig+0x908>)
 800a004:	4293      	cmp	r3, r2
 800a006:	f040 80f8 	bne.w	800a1fa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a00a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a00e:	2b20      	cmp	r3, #32
 800a010:	dc46      	bgt.n	800a0a0 <UART_SetConfig+0x850>
 800a012:	2b02      	cmp	r3, #2
 800a014:	db75      	blt.n	800a102 <UART_SetConfig+0x8b2>
 800a016:	3b02      	subs	r3, #2
 800a018:	2b1e      	cmp	r3, #30
 800a01a:	d872      	bhi.n	800a102 <UART_SetConfig+0x8b2>
 800a01c:	a201      	add	r2, pc, #4	; (adr r2, 800a024 <UART_SetConfig+0x7d4>)
 800a01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a022:	bf00      	nop
 800a024:	0800a0a7 	.word	0x0800a0a7
 800a028:	0800a103 	.word	0x0800a103
 800a02c:	0800a0af 	.word	0x0800a0af
 800a030:	0800a103 	.word	0x0800a103
 800a034:	0800a103 	.word	0x0800a103
 800a038:	0800a103 	.word	0x0800a103
 800a03c:	0800a0bf 	.word	0x0800a0bf
 800a040:	0800a103 	.word	0x0800a103
 800a044:	0800a103 	.word	0x0800a103
 800a048:	0800a103 	.word	0x0800a103
 800a04c:	0800a103 	.word	0x0800a103
 800a050:	0800a103 	.word	0x0800a103
 800a054:	0800a103 	.word	0x0800a103
 800a058:	0800a103 	.word	0x0800a103
 800a05c:	0800a0cf 	.word	0x0800a0cf
 800a060:	0800a103 	.word	0x0800a103
 800a064:	0800a103 	.word	0x0800a103
 800a068:	0800a103 	.word	0x0800a103
 800a06c:	0800a103 	.word	0x0800a103
 800a070:	0800a103 	.word	0x0800a103
 800a074:	0800a103 	.word	0x0800a103
 800a078:	0800a103 	.word	0x0800a103
 800a07c:	0800a103 	.word	0x0800a103
 800a080:	0800a103 	.word	0x0800a103
 800a084:	0800a103 	.word	0x0800a103
 800a088:	0800a103 	.word	0x0800a103
 800a08c:	0800a103 	.word	0x0800a103
 800a090:	0800a103 	.word	0x0800a103
 800a094:	0800a103 	.word	0x0800a103
 800a098:	0800a103 	.word	0x0800a103
 800a09c:	0800a0f5 	.word	0x0800a0f5
 800a0a0:	2b40      	cmp	r3, #64	; 0x40
 800a0a2:	d02a      	beq.n	800a0fa <UART_SetConfig+0x8aa>
 800a0a4:	e02d      	b.n	800a102 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a0a6:	f7fd fc2f 	bl	8007908 <HAL_RCCEx_GetD3PCLK1Freq>
 800a0aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a0ac:	e02f      	b.n	800a10e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fd fc3e 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0bc:	e027      	b.n	800a10e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0be:	f107 0318 	add.w	r3, r7, #24
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7fd fd8a 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0cc:	e01f      	b.n	800a10e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0ce:	4b21      	ldr	r3, [pc, #132]	; (800a154 <UART_SetConfig+0x904>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f003 0320 	and.w	r3, r3, #32
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d009      	beq.n	800a0ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0da:	4b1e      	ldr	r3, [pc, #120]	; (800a154 <UART_SetConfig+0x904>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	08db      	lsrs	r3, r3, #3
 800a0e0:	f003 0303 	and.w	r3, r3, #3
 800a0e4:	4a1d      	ldr	r2, [pc, #116]	; (800a15c <UART_SetConfig+0x90c>)
 800a0e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0ec:	e00f      	b.n	800a10e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a0ee:	4b1b      	ldr	r3, [pc, #108]	; (800a15c <UART_SetConfig+0x90c>)
 800a0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0f2:	e00c      	b.n	800a10e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0f4:	4b1a      	ldr	r3, [pc, #104]	; (800a160 <UART_SetConfig+0x910>)
 800a0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0f8:	e009      	b.n	800a10e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a100:	e005      	b.n	800a10e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a102:	2300      	movs	r3, #0
 800a104:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a10c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a110:	2b00      	cmp	r3, #0
 800a112:	f000 81ee 	beq.w	800a4f2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11a:	4a12      	ldr	r2, [pc, #72]	; (800a164 <UART_SetConfig+0x914>)
 800a11c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a120:	461a      	mov	r2, r3
 800a122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a124:	fbb3 f3f2 	udiv	r3, r3, r2
 800a128:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	4613      	mov	r3, r2
 800a130:	005b      	lsls	r3, r3, #1
 800a132:	4413      	add	r3, r2
 800a134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a136:	429a      	cmp	r2, r3
 800a138:	d305      	bcc.n	800a146 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a142:	429a      	cmp	r2, r3
 800a144:	d910      	bls.n	800a168 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a14c:	e1d1      	b.n	800a4f2 <UART_SetConfig+0xca2>
 800a14e:	bf00      	nop
 800a150:	40011c00 	.word	0x40011c00
 800a154:	58024400 	.word	0x58024400
 800a158:	58000c00 	.word	0x58000c00
 800a15c:	03d09000 	.word	0x03d09000
 800a160:	003d0900 	.word	0x003d0900
 800a164:	0800e588 	.word	0x0800e588
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a16a:	2200      	movs	r2, #0
 800a16c:	60bb      	str	r3, [r7, #8]
 800a16e:	60fa      	str	r2, [r7, #12]
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a174:	4ac0      	ldr	r2, [pc, #768]	; (800a478 <UART_SetConfig+0xc28>)
 800a176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	2200      	movs	r2, #0
 800a17e:	603b      	str	r3, [r7, #0]
 800a180:	607a      	str	r2, [r7, #4]
 800a182:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a186:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a18a:	f7f6 f909 	bl	80003a0 <__aeabi_uldivmod>
 800a18e:	4602      	mov	r2, r0
 800a190:	460b      	mov	r3, r1
 800a192:	4610      	mov	r0, r2
 800a194:	4619      	mov	r1, r3
 800a196:	f04f 0200 	mov.w	r2, #0
 800a19a:	f04f 0300 	mov.w	r3, #0
 800a19e:	020b      	lsls	r3, r1, #8
 800a1a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1a4:	0202      	lsls	r2, r0, #8
 800a1a6:	6979      	ldr	r1, [r7, #20]
 800a1a8:	6849      	ldr	r1, [r1, #4]
 800a1aa:	0849      	lsrs	r1, r1, #1
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	eb12 0804 	adds.w	r8, r2, r4
 800a1b6:	eb43 0905 	adc.w	r9, r3, r5
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	469a      	mov	sl, r3
 800a1c2:	4693      	mov	fp, r2
 800a1c4:	4652      	mov	r2, sl
 800a1c6:	465b      	mov	r3, fp
 800a1c8:	4640      	mov	r0, r8
 800a1ca:	4649      	mov	r1, r9
 800a1cc:	f7f6 f8e8 	bl	80003a0 <__aeabi_uldivmod>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1de:	d308      	bcc.n	800a1f2 <UART_SetConfig+0x9a2>
 800a1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1e6:	d204      	bcs.n	800a1f2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1ee:	60da      	str	r2, [r3, #12]
 800a1f0:	e17f      	b.n	800a4f2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a1f8:	e17b      	b.n	800a4f2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	69db      	ldr	r3, [r3, #28]
 800a1fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a202:	f040 80bd 	bne.w	800a380 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a206:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a20a:	2b20      	cmp	r3, #32
 800a20c:	dc48      	bgt.n	800a2a0 <UART_SetConfig+0xa50>
 800a20e:	2b00      	cmp	r3, #0
 800a210:	db7b      	blt.n	800a30a <UART_SetConfig+0xaba>
 800a212:	2b20      	cmp	r3, #32
 800a214:	d879      	bhi.n	800a30a <UART_SetConfig+0xaba>
 800a216:	a201      	add	r2, pc, #4	; (adr r2, 800a21c <UART_SetConfig+0x9cc>)
 800a218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21c:	0800a2a7 	.word	0x0800a2a7
 800a220:	0800a2af 	.word	0x0800a2af
 800a224:	0800a30b 	.word	0x0800a30b
 800a228:	0800a30b 	.word	0x0800a30b
 800a22c:	0800a2b7 	.word	0x0800a2b7
 800a230:	0800a30b 	.word	0x0800a30b
 800a234:	0800a30b 	.word	0x0800a30b
 800a238:	0800a30b 	.word	0x0800a30b
 800a23c:	0800a2c7 	.word	0x0800a2c7
 800a240:	0800a30b 	.word	0x0800a30b
 800a244:	0800a30b 	.word	0x0800a30b
 800a248:	0800a30b 	.word	0x0800a30b
 800a24c:	0800a30b 	.word	0x0800a30b
 800a250:	0800a30b 	.word	0x0800a30b
 800a254:	0800a30b 	.word	0x0800a30b
 800a258:	0800a30b 	.word	0x0800a30b
 800a25c:	0800a2d7 	.word	0x0800a2d7
 800a260:	0800a30b 	.word	0x0800a30b
 800a264:	0800a30b 	.word	0x0800a30b
 800a268:	0800a30b 	.word	0x0800a30b
 800a26c:	0800a30b 	.word	0x0800a30b
 800a270:	0800a30b 	.word	0x0800a30b
 800a274:	0800a30b 	.word	0x0800a30b
 800a278:	0800a30b 	.word	0x0800a30b
 800a27c:	0800a30b 	.word	0x0800a30b
 800a280:	0800a30b 	.word	0x0800a30b
 800a284:	0800a30b 	.word	0x0800a30b
 800a288:	0800a30b 	.word	0x0800a30b
 800a28c:	0800a30b 	.word	0x0800a30b
 800a290:	0800a30b 	.word	0x0800a30b
 800a294:	0800a30b 	.word	0x0800a30b
 800a298:	0800a30b 	.word	0x0800a30b
 800a29c:	0800a2fd 	.word	0x0800a2fd
 800a2a0:	2b40      	cmp	r3, #64	; 0x40
 800a2a2:	d02e      	beq.n	800a302 <UART_SetConfig+0xab2>
 800a2a4:	e031      	b.n	800a30a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2a6:	f7fb fc6d 	bl	8005b84 <HAL_RCC_GetPCLK1Freq>
 800a2aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a2ac:	e033      	b.n	800a316 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2ae:	f7fb fc7f 	bl	8005bb0 <HAL_RCC_GetPCLK2Freq>
 800a2b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a2b4:	e02f      	b.n	800a316 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fd fb3a 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2c4:	e027      	b.n	800a316 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2c6:	f107 0318 	add.w	r3, r7, #24
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7fd fc86 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2d4:	e01f      	b.n	800a316 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2d6:	4b69      	ldr	r3, [pc, #420]	; (800a47c <UART_SetConfig+0xc2c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f003 0320 	and.w	r3, r3, #32
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d009      	beq.n	800a2f6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2e2:	4b66      	ldr	r3, [pc, #408]	; (800a47c <UART_SetConfig+0xc2c>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	08db      	lsrs	r3, r3, #3
 800a2e8:	f003 0303 	and.w	r3, r3, #3
 800a2ec:	4a64      	ldr	r2, [pc, #400]	; (800a480 <UART_SetConfig+0xc30>)
 800a2ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2f4:	e00f      	b.n	800a316 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a2f6:	4b62      	ldr	r3, [pc, #392]	; (800a480 <UART_SetConfig+0xc30>)
 800a2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2fa:	e00c      	b.n	800a316 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2fc:	4b61      	ldr	r3, [pc, #388]	; (800a484 <UART_SetConfig+0xc34>)
 800a2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a300:	e009      	b.n	800a316 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a308:	e005      	b.n	800a316 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a30a:	2300      	movs	r3, #0
 800a30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a30e:	2301      	movs	r3, #1
 800a310:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a314:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f000 80ea 	beq.w	800a4f2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a322:	4a55      	ldr	r2, [pc, #340]	; (800a478 <UART_SetConfig+0xc28>)
 800a324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a328:	461a      	mov	r2, r3
 800a32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a32c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a330:	005a      	lsls	r2, r3, #1
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	085b      	lsrs	r3, r3, #1
 800a338:	441a      	add	r2, r3
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a342:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a346:	2b0f      	cmp	r3, #15
 800a348:	d916      	bls.n	800a378 <UART_SetConfig+0xb28>
 800a34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a350:	d212      	bcs.n	800a378 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a354:	b29b      	uxth	r3, r3
 800a356:	f023 030f 	bic.w	r3, r3, #15
 800a35a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35e:	085b      	lsrs	r3, r3, #1
 800a360:	b29b      	uxth	r3, r3
 800a362:	f003 0307 	and.w	r3, r3, #7
 800a366:	b29a      	uxth	r2, r3
 800a368:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a36a:	4313      	orrs	r3, r2
 800a36c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a374:	60da      	str	r2, [r3, #12]
 800a376:	e0bc      	b.n	800a4f2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a37e:	e0b8      	b.n	800a4f2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a380:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a384:	2b20      	cmp	r3, #32
 800a386:	dc4b      	bgt.n	800a420 <UART_SetConfig+0xbd0>
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f2c0 8087 	blt.w	800a49c <UART_SetConfig+0xc4c>
 800a38e:	2b20      	cmp	r3, #32
 800a390:	f200 8084 	bhi.w	800a49c <UART_SetConfig+0xc4c>
 800a394:	a201      	add	r2, pc, #4	; (adr r2, 800a39c <UART_SetConfig+0xb4c>)
 800a396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39a:	bf00      	nop
 800a39c:	0800a427 	.word	0x0800a427
 800a3a0:	0800a42f 	.word	0x0800a42f
 800a3a4:	0800a49d 	.word	0x0800a49d
 800a3a8:	0800a49d 	.word	0x0800a49d
 800a3ac:	0800a437 	.word	0x0800a437
 800a3b0:	0800a49d 	.word	0x0800a49d
 800a3b4:	0800a49d 	.word	0x0800a49d
 800a3b8:	0800a49d 	.word	0x0800a49d
 800a3bc:	0800a447 	.word	0x0800a447
 800a3c0:	0800a49d 	.word	0x0800a49d
 800a3c4:	0800a49d 	.word	0x0800a49d
 800a3c8:	0800a49d 	.word	0x0800a49d
 800a3cc:	0800a49d 	.word	0x0800a49d
 800a3d0:	0800a49d 	.word	0x0800a49d
 800a3d4:	0800a49d 	.word	0x0800a49d
 800a3d8:	0800a49d 	.word	0x0800a49d
 800a3dc:	0800a457 	.word	0x0800a457
 800a3e0:	0800a49d 	.word	0x0800a49d
 800a3e4:	0800a49d 	.word	0x0800a49d
 800a3e8:	0800a49d 	.word	0x0800a49d
 800a3ec:	0800a49d 	.word	0x0800a49d
 800a3f0:	0800a49d 	.word	0x0800a49d
 800a3f4:	0800a49d 	.word	0x0800a49d
 800a3f8:	0800a49d 	.word	0x0800a49d
 800a3fc:	0800a49d 	.word	0x0800a49d
 800a400:	0800a49d 	.word	0x0800a49d
 800a404:	0800a49d 	.word	0x0800a49d
 800a408:	0800a49d 	.word	0x0800a49d
 800a40c:	0800a49d 	.word	0x0800a49d
 800a410:	0800a49d 	.word	0x0800a49d
 800a414:	0800a49d 	.word	0x0800a49d
 800a418:	0800a49d 	.word	0x0800a49d
 800a41c:	0800a48f 	.word	0x0800a48f
 800a420:	2b40      	cmp	r3, #64	; 0x40
 800a422:	d037      	beq.n	800a494 <UART_SetConfig+0xc44>
 800a424:	e03a      	b.n	800a49c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a426:	f7fb fbad 	bl	8005b84 <HAL_RCC_GetPCLK1Freq>
 800a42a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a42c:	e03c      	b.n	800a4a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a42e:	f7fb fbbf 	bl	8005bb0 <HAL_RCC_GetPCLK2Freq>
 800a432:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a434:	e038      	b.n	800a4a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fd fa7a 	bl	8007934 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a444:	e030      	b.n	800a4a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a446:	f107 0318 	add.w	r3, r7, #24
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fd fbc6 	bl	8007bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a454:	e028      	b.n	800a4a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a456:	4b09      	ldr	r3, [pc, #36]	; (800a47c <UART_SetConfig+0xc2c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f003 0320 	and.w	r3, r3, #32
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d012      	beq.n	800a488 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a462:	4b06      	ldr	r3, [pc, #24]	; (800a47c <UART_SetConfig+0xc2c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	08db      	lsrs	r3, r3, #3
 800a468:	f003 0303 	and.w	r3, r3, #3
 800a46c:	4a04      	ldr	r2, [pc, #16]	; (800a480 <UART_SetConfig+0xc30>)
 800a46e:	fa22 f303 	lsr.w	r3, r2, r3
 800a472:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a474:	e018      	b.n	800a4a8 <UART_SetConfig+0xc58>
 800a476:	bf00      	nop
 800a478:	0800e588 	.word	0x0800e588
 800a47c:	58024400 	.word	0x58024400
 800a480:	03d09000 	.word	0x03d09000
 800a484:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a488:	4b24      	ldr	r3, [pc, #144]	; (800a51c <UART_SetConfig+0xccc>)
 800a48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a48c:	e00c      	b.n	800a4a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a48e:	4b24      	ldr	r3, [pc, #144]	; (800a520 <UART_SetConfig+0xcd0>)
 800a490:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a492:	e009      	b.n	800a4a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a494:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a498:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a49a:	e005      	b.n	800a4a8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a49c:	2300      	movs	r3, #0
 800a49e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a4a6:	bf00      	nop
    }

    if (pclk != 0U)
 800a4a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d021      	beq.n	800a4f2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b2:	4a1c      	ldr	r2, [pc, #112]	; (800a524 <UART_SetConfig+0xcd4>)
 800a4b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4bc:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	085b      	lsrs	r3, r3, #1
 800a4c6:	441a      	add	r2, r3
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4d0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d4:	2b0f      	cmp	r3, #15
 800a4d6:	d909      	bls.n	800a4ec <UART_SetConfig+0xc9c>
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4de:	d205      	bcs.n	800a4ec <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	60da      	str	r2, [r3, #12]
 800a4ea:	e002      	b.n	800a4f2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	2200      	movs	r2, #0
 800a506:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	2200      	movs	r2, #0
 800a50c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a50e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a512:	4618      	mov	r0, r3
 800a514:	3748      	adds	r7, #72	; 0x48
 800a516:	46bd      	mov	sp, r7
 800a518:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a51c:	03d09000 	.word	0x03d09000
 800a520:	003d0900 	.word	0x003d0900
 800a524:	0800e588 	.word	0x0800e588

0800a528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a534:	f003 0301 	and.w	r3, r3, #1
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00a      	beq.n	800a552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	430a      	orrs	r2, r1
 800a550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a556:	f003 0302 	and.w	r3, r3, #2
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00a      	beq.n	800a574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	430a      	orrs	r2, r1
 800a572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a578:	f003 0304 	and.w	r3, r3, #4
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00a      	beq.n	800a596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	430a      	orrs	r2, r1
 800a594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a59a:	f003 0308 	and.w	r3, r3, #8
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00a      	beq.n	800a5b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	430a      	orrs	r2, r1
 800a5b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5bc:	f003 0310 	and.w	r3, r3, #16
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d00a      	beq.n	800a5da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	430a      	orrs	r2, r1
 800a5d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5de:	f003 0320 	and.w	r3, r3, #32
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00a      	beq.n	800a5fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	430a      	orrs	r2, r1
 800a5fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a604:	2b00      	cmp	r3, #0
 800a606:	d01a      	beq.n	800a63e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	430a      	orrs	r2, r1
 800a61c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a626:	d10a      	bne.n	800a63e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	430a      	orrs	r2, r1
 800a63c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00a      	beq.n	800a660 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	430a      	orrs	r2, r1
 800a65e:	605a      	str	r2, [r3, #4]
  }
}
 800a660:	bf00      	nop
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b098      	sub	sp, #96	; 0x60
 800a670:	af02      	add	r7, sp, #8
 800a672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a67c:	f7f7 fab6 	bl	8001bec <HAL_GetTick>
 800a680:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 0308 	and.w	r3, r3, #8
 800a68c:	2b08      	cmp	r3, #8
 800a68e:	d12f      	bne.n	800a6f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a698:	2200      	movs	r2, #0
 800a69a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f88e 	bl	800a7c0 <UART_WaitOnFlagUntilTimeout>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d022      	beq.n	800a6f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b2:	e853 3f00 	ldrex	r3, [r3]
 800a6b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a6b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6be:	653b      	str	r3, [r7, #80]	; 0x50
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6c8:	647b      	str	r3, [r7, #68]	; 0x44
 800a6ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a6ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6d0:	e841 2300 	strex	r3, r2, [r1]
 800a6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1e6      	bne.n	800a6aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2220      	movs	r2, #32
 800a6e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	e063      	b.n	800a7b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 0304 	and.w	r3, r3, #4
 800a6fa:	2b04      	cmp	r3, #4
 800a6fc:	d149      	bne.n	800a792 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a706:	2200      	movs	r2, #0
 800a708:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f857 	bl	800a7c0 <UART_WaitOnFlagUntilTimeout>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d03c      	beq.n	800a792 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a720:	e853 3f00 	ldrex	r3, [r3]
 800a724:	623b      	str	r3, [r7, #32]
   return(result);
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a72c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	461a      	mov	r2, r3
 800a734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a736:	633b      	str	r3, [r7, #48]	; 0x30
 800a738:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a73c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a73e:	e841 2300 	strex	r3, r2, [r1]
 800a742:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1e6      	bne.n	800a718 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	3308      	adds	r3, #8
 800a750:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	e853 3f00 	ldrex	r3, [r3]
 800a758:	60fb      	str	r3, [r7, #12]
   return(result);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f023 0301 	bic.w	r3, r3, #1
 800a760:	64bb      	str	r3, [r7, #72]	; 0x48
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3308      	adds	r3, #8
 800a768:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a76a:	61fa      	str	r2, [r7, #28]
 800a76c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76e:	69b9      	ldr	r1, [r7, #24]
 800a770:	69fa      	ldr	r2, [r7, #28]
 800a772:	e841 2300 	strex	r3, r2, [r1]
 800a776:	617b      	str	r3, [r7, #20]
   return(result);
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1e5      	bne.n	800a74a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2220      	movs	r2, #32
 800a782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a78e:	2303      	movs	r3, #3
 800a790:	e012      	b.n	800a7b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2220      	movs	r2, #32
 800a796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2220      	movs	r2, #32
 800a79e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3758      	adds	r7, #88	; 0x58
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	603b      	str	r3, [r7, #0]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7d0:	e049      	b.n	800a866 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7d8:	d045      	beq.n	800a866 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7da:	f7f7 fa07 	bl	8001bec <HAL_GetTick>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	1ad3      	subs	r3, r2, r3
 800a7e4:	69ba      	ldr	r2, [r7, #24]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d302      	bcc.n	800a7f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	e048      	b.n	800a886 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 0304 	and.w	r3, r3, #4
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d031      	beq.n	800a866 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	f003 0308 	and.w	r3, r3, #8
 800a80c:	2b08      	cmp	r3, #8
 800a80e:	d110      	bne.n	800a832 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2208      	movs	r2, #8
 800a816:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f000 f95b 	bl	800aad4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2208      	movs	r2, #8
 800a822:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	e029      	b.n	800a886 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	69db      	ldr	r3, [r3, #28]
 800a838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a83c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a840:	d111      	bne.n	800a866 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a84a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f000 f941 	bl	800aad4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2220      	movs	r2, #32
 800a856:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a862:	2303      	movs	r3, #3
 800a864:	e00f      	b.n	800a886 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	69da      	ldr	r2, [r3, #28]
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	4013      	ands	r3, r2
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	429a      	cmp	r2, r3
 800a874:	bf0c      	ite	eq
 800a876:	2301      	moveq	r3, #1
 800a878:	2300      	movne	r3, #0
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	461a      	mov	r2, r3
 800a87e:	79fb      	ldrb	r3, [r7, #7]
 800a880:	429a      	cmp	r2, r3
 800a882:	d0a6      	beq.n	800a7d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a890:	b480      	push	{r7}
 800a892:	b0a3      	sub	sp, #140	; 0x8c
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	4613      	mov	r3, r2
 800a89c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	68ba      	ldr	r2, [r7, #8]
 800a8a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	88fa      	ldrh	r2, [r7, #6]
 800a8a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	88fa      	ldrh	r2, [r7, #6]
 800a8b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8c2:	d10e      	bne.n	800a8e2 <UART_Start_Receive_IT+0x52>
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d105      	bne.n	800a8d8 <UART_Start_Receive_IT+0x48>
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a8d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8d6:	e02d      	b.n	800a934 <UART_Start_Receive_IT+0xa4>
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	22ff      	movs	r2, #255	; 0xff
 800a8dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8e0:	e028      	b.n	800a934 <UART_Start_Receive_IT+0xa4>
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10d      	bne.n	800a906 <UART_Start_Receive_IT+0x76>
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d104      	bne.n	800a8fc <UART_Start_Receive_IT+0x6c>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	22ff      	movs	r2, #255	; 0xff
 800a8f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8fa:	e01b      	b.n	800a934 <UART_Start_Receive_IT+0xa4>
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	227f      	movs	r2, #127	; 0x7f
 800a900:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a904:	e016      	b.n	800a934 <UART_Start_Receive_IT+0xa4>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a90e:	d10d      	bne.n	800a92c <UART_Start_Receive_IT+0x9c>
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d104      	bne.n	800a922 <UART_Start_Receive_IT+0x92>
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	227f      	movs	r2, #127	; 0x7f
 800a91c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a920:	e008      	b.n	800a934 <UART_Start_Receive_IT+0xa4>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	223f      	movs	r2, #63	; 0x3f
 800a926:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a92a:	e003      	b.n	800a934 <UART_Start_Receive_IT+0xa4>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2200      	movs	r2, #0
 800a930:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2200      	movs	r2, #0
 800a938:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2222      	movs	r2, #34	; 0x22
 800a940:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	3308      	adds	r3, #8
 800a94a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a94e:	e853 3f00 	ldrex	r3, [r3]
 800a952:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a956:	f043 0301 	orr.w	r3, r3, #1
 800a95a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	3308      	adds	r3, #8
 800a964:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a968:	673a      	str	r2, [r7, #112]	; 0x70
 800a96a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a96e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a970:	e841 2300 	strex	r3, r2, [r1]
 800a974:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d1e3      	bne.n	800a944 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a984:	d14f      	bne.n	800aa26 <UART_Start_Receive_IT+0x196>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a98c:	88fa      	ldrh	r2, [r7, #6]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d349      	bcc.n	800aa26 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a99a:	d107      	bne.n	800a9ac <UART_Start_Receive_IT+0x11c>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d103      	bne.n	800a9ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	4a47      	ldr	r2, [pc, #284]	; (800aac4 <UART_Start_Receive_IT+0x234>)
 800a9a8:	675a      	str	r2, [r3, #116]	; 0x74
 800a9aa:	e002      	b.n	800a9b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	4a46      	ldr	r2, [pc, #280]	; (800aac8 <UART_Start_Receive_IT+0x238>)
 800a9b0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d01a      	beq.n	800a9f0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9c2:	e853 3f00 	ldrex	r3, [r3]
 800a9c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a9c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a9dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9de:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9e4:	e841 2300 	strex	r3, r2, [r1]
 800a9e8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a9ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1e4      	bne.n	800a9ba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	3308      	adds	r3, #8
 800a9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9fa:	e853 3f00 	ldrex	r3, [r3]
 800a9fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa06:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	3308      	adds	r3, #8
 800aa0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800aa10:	64ba      	str	r2, [r7, #72]	; 0x48
 800aa12:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa18:	e841 2300 	strex	r3, r2, [r1]
 800aa1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aa1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1e5      	bne.n	800a9f0 <UART_Start_Receive_IT+0x160>
 800aa24:	e046      	b.n	800aab4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa2e:	d107      	bne.n	800aa40 <UART_Start_Receive_IT+0x1b0>
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d103      	bne.n	800aa40 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	4a24      	ldr	r2, [pc, #144]	; (800aacc <UART_Start_Receive_IT+0x23c>)
 800aa3c:	675a      	str	r2, [r3, #116]	; 0x74
 800aa3e:	e002      	b.n	800aa46 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	4a23      	ldr	r2, [pc, #140]	; (800aad0 <UART_Start_Receive_IT+0x240>)
 800aa44:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	691b      	ldr	r3, [r3, #16]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d019      	beq.n	800aa82 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa56:	e853 3f00 	ldrex	r3, [r3]
 800aa5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800aa62:	677b      	str	r3, [r7, #116]	; 0x74
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	461a      	mov	r2, r3
 800aa6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa6c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa74:	e841 2300 	strex	r3, r2, [r1]
 800aa78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1e6      	bne.n	800aa4e <UART_Start_Receive_IT+0x1be>
 800aa80:	e018      	b.n	800aab4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	e853 3f00 	ldrex	r3, [r3]
 800aa8e:	613b      	str	r3, [r7, #16]
   return(result);
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	f043 0320 	orr.w	r3, r3, #32
 800aa96:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaa0:	623b      	str	r3, [r7, #32]
 800aaa2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa4:	69f9      	ldr	r1, [r7, #28]
 800aaa6:	6a3a      	ldr	r2, [r7, #32]
 800aaa8:	e841 2300 	strex	r3, r2, [r1]
 800aaac:	61bb      	str	r3, [r7, #24]
   return(result);
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1e6      	bne.n	800aa82 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	378c      	adds	r7, #140	; 0x8c
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	0800b2f5 	.word	0x0800b2f5
 800aac8:	0800af95 	.word	0x0800af95
 800aacc:	0800addd 	.word	0x0800addd
 800aad0:	0800ac25 	.word	0x0800ac25

0800aad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b095      	sub	sp, #84	; 0x54
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae4:	e853 3f00 	ldrex	r3, [r3]
 800aae8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aaf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aafa:	643b      	str	r3, [r7, #64]	; 0x40
 800aafc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab02:	e841 2300 	strex	r3, r2, [r1]
 800ab06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d1e6      	bne.n	800aadc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3308      	adds	r3, #8
 800ab14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab16:	6a3b      	ldr	r3, [r7, #32]
 800ab18:	e853 3f00 	ldrex	r3, [r3]
 800ab1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab1e:	69fa      	ldr	r2, [r7, #28]
 800ab20:	4b1e      	ldr	r3, [pc, #120]	; (800ab9c <UART_EndRxTransfer+0xc8>)
 800ab22:	4013      	ands	r3, r2
 800ab24:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	3308      	adds	r3, #8
 800ab2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ab30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab36:	e841 2300 	strex	r3, r2, [r1]
 800ab3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1e5      	bne.n	800ab0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d118      	bne.n	800ab7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	e853 3f00 	ldrex	r3, [r3]
 800ab56:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f023 0310 	bic.w	r3, r3, #16
 800ab5e:	647b      	str	r3, [r7, #68]	; 0x44
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	461a      	mov	r2, r3
 800ab66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab68:	61bb      	str	r3, [r7, #24]
 800ab6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6c:	6979      	ldr	r1, [r7, #20]
 800ab6e:	69ba      	ldr	r2, [r7, #24]
 800ab70:	e841 2300 	strex	r3, r2, [r1]
 800ab74:	613b      	str	r3, [r7, #16]
   return(result);
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1e6      	bne.n	800ab4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2220      	movs	r2, #32
 800ab80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ab90:	bf00      	nop
 800ab92:	3754      	adds	r7, #84	; 0x54
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	effffffe 	.word	0xeffffffe

0800aba0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f7fe fe30 	bl	8009824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abc4:	bf00      	nop
 800abc6:	3710      	adds	r7, #16
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b088      	sub	sp, #32
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	e853 3f00 	ldrex	r3, [r3]
 800abe0:	60bb      	str	r3, [r7, #8]
   return(result);
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abe8:	61fb      	str	r3, [r7, #28]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	461a      	mov	r2, r3
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	61bb      	str	r3, [r7, #24]
 800abf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf6:	6979      	ldr	r1, [r7, #20]
 800abf8:	69ba      	ldr	r2, [r7, #24]
 800abfa:	e841 2300 	strex	r3, r2, [r1]
 800abfe:	613b      	str	r3, [r7, #16]
   return(result);
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d1e6      	bne.n	800abd4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2220      	movs	r2, #32
 800ac0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f7fe fdfb 	bl	8009810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac1a:	bf00      	nop
 800ac1c:	3720      	adds	r7, #32
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
	...

0800ac24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b09c      	sub	sp, #112	; 0x70
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ac32:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac3c:	2b22      	cmp	r3, #34	; 0x22
 800ac3e:	f040 80be 	bne.w	800adbe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac48:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ac4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ac50:	b2d9      	uxtb	r1, r3
 800ac52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac5c:	400a      	ands	r2, r1
 800ac5e:	b2d2      	uxtb	r2, r2
 800ac60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac66:	1c5a      	adds	r2, r3, #1
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	3b01      	subs	r3, #1
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	f040 80a1 	bne.w	800adce <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac94:	e853 3f00 	ldrex	r3, [r3]
 800ac98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aca0:	66bb      	str	r3, [r7, #104]	; 0x68
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	461a      	mov	r2, r3
 800aca8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800acaa:	65bb      	str	r3, [r7, #88]	; 0x58
 800acac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800acb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800acb2:	e841 2300 	strex	r3, r2, [r1]
 800acb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800acb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1e6      	bne.n	800ac8c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3308      	adds	r3, #8
 800acc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc8:	e853 3f00 	ldrex	r3, [r3]
 800accc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800acce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd0:	f023 0301 	bic.w	r3, r3, #1
 800acd4:	667b      	str	r3, [r7, #100]	; 0x64
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3308      	adds	r3, #8
 800acdc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800acde:	647a      	str	r2, [r7, #68]	; 0x44
 800ace0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ace4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ace6:	e841 2300 	strex	r3, r2, [r1]
 800acea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800acec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1e5      	bne.n	800acbe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2220      	movs	r2, #32
 800acf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a33      	ldr	r2, [pc, #204]	; (800add8 <UART_RxISR_8BIT+0x1b4>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d01f      	beq.n	800ad50 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d018      	beq.n	800ad50 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad26:	e853 3f00 	ldrex	r3, [r3]
 800ad2a:	623b      	str	r3, [r7, #32]
   return(result);
 800ad2c:	6a3b      	ldr	r3, [r7, #32]
 800ad2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ad32:	663b      	str	r3, [r7, #96]	; 0x60
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	461a      	mov	r2, r3
 800ad3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad3c:	633b      	str	r3, [r7, #48]	; 0x30
 800ad3e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad44:	e841 2300 	strex	r3, r2, [r1]
 800ad48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1e6      	bne.n	800ad1e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d12e      	bne.n	800adb6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	e853 3f00 	ldrex	r3, [r3]
 800ad6a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f023 0310 	bic.w	r3, r3, #16
 800ad72:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	461a      	mov	r2, r3
 800ad7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad7c:	61fb      	str	r3, [r7, #28]
 800ad7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad80:	69b9      	ldr	r1, [r7, #24]
 800ad82:	69fa      	ldr	r2, [r7, #28]
 800ad84:	e841 2300 	strex	r3, r2, [r1]
 800ad88:	617b      	str	r3, [r7, #20]
   return(result);
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1e6      	bne.n	800ad5e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	69db      	ldr	r3, [r3, #28]
 800ad96:	f003 0310 	and.w	r3, r3, #16
 800ad9a:	2b10      	cmp	r3, #16
 800ad9c:	d103      	bne.n	800ada6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2210      	movs	r2, #16
 800ada4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800adac:	4619      	mov	r1, r3
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f7fe fd42 	bl	8009838 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800adb4:	e00b      	b.n	800adce <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f7f5 fd48 	bl	800084c <HAL_UART_RxCpltCallback>
}
 800adbc:	e007      	b.n	800adce <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	699a      	ldr	r2, [r3, #24]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f042 0208 	orr.w	r2, r2, #8
 800adcc:	619a      	str	r2, [r3, #24]
}
 800adce:	bf00      	nop
 800add0:	3770      	adds	r7, #112	; 0x70
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	58000c00 	.word	0x58000c00

0800addc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b09c      	sub	sp, #112	; 0x70
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800adea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adf4:	2b22      	cmp	r3, #34	; 0x22
 800adf6:	f040 80be 	bne.w	800af76 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae08:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ae0a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ae0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ae12:	4013      	ands	r3, r2
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae1e:	1c9a      	adds	r2, r3, #2
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f040 80a1 	bne.w	800af86 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae4c:	e853 3f00 	ldrex	r3, [r3]
 800ae50:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ae52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae58:	667b      	str	r3, [r7, #100]	; 0x64
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	461a      	mov	r2, r3
 800ae60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae62:	657b      	str	r3, [r7, #84]	; 0x54
 800ae64:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae6a:	e841 2300 	strex	r3, r2, [r1]
 800ae6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ae70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d1e6      	bne.n	800ae44 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	3308      	adds	r3, #8
 800ae7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae80:	e853 3f00 	ldrex	r3, [r3]
 800ae84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae88:	f023 0301 	bic.w	r3, r3, #1
 800ae8c:	663b      	str	r3, [r7, #96]	; 0x60
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	3308      	adds	r3, #8
 800ae94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae96:	643a      	str	r2, [r7, #64]	; 0x40
 800ae98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae9e:	e841 2300 	strex	r3, r2, [r1]
 800aea2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1e5      	bne.n	800ae76 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2220      	movs	r2, #32
 800aeae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a33      	ldr	r2, [pc, #204]	; (800af90 <UART_RxISR_16BIT+0x1b4>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d01f      	beq.n	800af08 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d018      	beq.n	800af08 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aedc:	6a3b      	ldr	r3, [r7, #32]
 800aede:	e853 3f00 	ldrex	r3, [r3]
 800aee2:	61fb      	str	r3, [r7, #28]
   return(result);
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aeea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	461a      	mov	r2, r3
 800aef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aef6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aefa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aefc:	e841 2300 	strex	r3, r2, [r1]
 800af00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af04:	2b00      	cmp	r3, #0
 800af06:	d1e6      	bne.n	800aed6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d12e      	bne.n	800af6e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	e853 3f00 	ldrex	r3, [r3]
 800af22:	60bb      	str	r3, [r7, #8]
   return(result);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	f023 0310 	bic.w	r3, r3, #16
 800af2a:	65bb      	str	r3, [r7, #88]	; 0x58
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	461a      	mov	r2, r3
 800af32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af34:	61bb      	str	r3, [r7, #24]
 800af36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af38:	6979      	ldr	r1, [r7, #20]
 800af3a:	69ba      	ldr	r2, [r7, #24]
 800af3c:	e841 2300 	strex	r3, r2, [r1]
 800af40:	613b      	str	r3, [r7, #16]
   return(result);
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d1e6      	bne.n	800af16 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	69db      	ldr	r3, [r3, #28]
 800af4e:	f003 0310 	and.w	r3, r3, #16
 800af52:	2b10      	cmp	r3, #16
 800af54:	d103      	bne.n	800af5e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2210      	movs	r2, #16
 800af5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800af64:	4619      	mov	r1, r3
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f7fe fc66 	bl	8009838 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800af6c:	e00b      	b.n	800af86 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f7f5 fc6c 	bl	800084c <HAL_UART_RxCpltCallback>
}
 800af74:	e007      	b.n	800af86 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	699a      	ldr	r2, [r3, #24]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f042 0208 	orr.w	r2, r2, #8
 800af84:	619a      	str	r2, [r3, #24]
}
 800af86:	bf00      	nop
 800af88:	3770      	adds	r7, #112	; 0x70
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	58000c00 	.word	0x58000c00

0800af94 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b0ac      	sub	sp, #176	; 0xb0
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800afa2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	69db      	ldr	r3, [r3, #28]
 800afac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afca:	2b22      	cmp	r3, #34	; 0x22
 800afcc:	f040 8180 	bne.w	800b2d0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800afd6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800afda:	e123      	b.n	800b224 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800afe6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800afea:	b2d9      	uxtb	r1, r3
 800afec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800aff0:	b2da      	uxtb	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aff6:	400a      	ands	r2, r1
 800aff8:	b2d2      	uxtb	r2, r2
 800affa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b000:	1c5a      	adds	r2, r3, #1
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	3b01      	subs	r3, #1
 800b010:	b29a      	uxth	r2, r3
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b026:	f003 0307 	and.w	r3, r3, #7
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d053      	beq.n	800b0d6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b02e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b032:	f003 0301 	and.w	r3, r3, #1
 800b036:	2b00      	cmp	r3, #0
 800b038:	d011      	beq.n	800b05e <UART_RxISR_8BIT_FIFOEN+0xca>
 800b03a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b03e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00b      	beq.n	800b05e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2201      	movs	r2, #1
 800b04c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b054:	f043 0201 	orr.w	r2, r3, #1
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b05e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b062:	f003 0302 	and.w	r3, r3, #2
 800b066:	2b00      	cmp	r3, #0
 800b068:	d011      	beq.n	800b08e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b06a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b06e:	f003 0301 	and.w	r3, r3, #1
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00b      	beq.n	800b08e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2202      	movs	r2, #2
 800b07c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b084:	f043 0204 	orr.w	r2, r3, #4
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b08e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b092:	f003 0304 	and.w	r3, r3, #4
 800b096:	2b00      	cmp	r3, #0
 800b098:	d011      	beq.n	800b0be <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b09a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b09e:	f003 0301 	and.w	r3, r3, #1
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00b      	beq.n	800b0be <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2204      	movs	r2, #4
 800b0ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0b4:	f043 0202 	orr.w	r2, r3, #2
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d006      	beq.n	800b0d6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7fe fbab 	bl	8009824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	f040 80a0 	bne.w	800b224 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0ec:	e853 3f00 	ldrex	r3, [r3]
 800b0f0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b0f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	461a      	mov	r2, r3
 800b102:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b106:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b108:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b10c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b10e:	e841 2300 	strex	r3, r2, [r1]
 800b112:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1e4      	bne.n	800b0e4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	3308      	adds	r3, #8
 800b120:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b124:	e853 3f00 	ldrex	r3, [r3]
 800b128:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b12a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b12c:	4b6e      	ldr	r3, [pc, #440]	; (800b2e8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800b12e:	4013      	ands	r3, r2
 800b130:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	3308      	adds	r3, #8
 800b13a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b13e:	66ba      	str	r2, [r7, #104]	; 0x68
 800b140:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b142:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b144:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b146:	e841 2300 	strex	r3, r2, [r1]
 800b14a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b14c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d1e3      	bne.n	800b11a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2220      	movs	r2, #32
 800b156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a60      	ldr	r2, [pc, #384]	; (800b2ec <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d021      	beq.n	800b1b4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d01a      	beq.n	800b1b4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b186:	e853 3f00 	ldrex	r3, [r3]
 800b18a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b18c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b18e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b192:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	461a      	mov	r2, r3
 800b19c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b1a0:	657b      	str	r3, [r7, #84]	; 0x54
 800b1a2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b1a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b1a8:	e841 2300 	strex	r3, r2, [r1]
 800b1ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b1ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1e4      	bne.n	800b17e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d130      	bne.n	800b21e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ca:	e853 3f00 	ldrex	r3, [r3]
 800b1ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d2:	f023 0310 	bic.w	r3, r3, #16
 800b1d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1e4:	643b      	str	r3, [r7, #64]	; 0x40
 800b1e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b1ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1ec:	e841 2300 	strex	r3, r2, [r1]
 800b1f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1e4      	bne.n	800b1c2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	69db      	ldr	r3, [r3, #28]
 800b1fe:	f003 0310 	and.w	r3, r3, #16
 800b202:	2b10      	cmp	r3, #16
 800b204:	d103      	bne.n	800b20e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2210      	movs	r2, #16
 800b20c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b214:	4619      	mov	r1, r3
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f7fe fb0e 	bl	8009838 <HAL_UARTEx_RxEventCallback>
 800b21c:	e002      	b.n	800b224 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f7f5 fb14 	bl	800084c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b224:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d006      	beq.n	800b23a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800b22c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b230:	f003 0320 	and.w	r3, r3, #32
 800b234:	2b00      	cmp	r3, #0
 800b236:	f47f aed1 	bne.w	800afdc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b240:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b244:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d049      	beq.n	800b2e0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b252:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800b256:	429a      	cmp	r2, r3
 800b258:	d242      	bcs.n	800b2e0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	3308      	adds	r3, #8
 800b260:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b262:	6a3b      	ldr	r3, [r7, #32]
 800b264:	e853 3f00 	ldrex	r3, [r3]
 800b268:	61fb      	str	r3, [r7, #28]
   return(result);
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b270:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3308      	adds	r3, #8
 800b27a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b27e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b280:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b286:	e841 2300 	strex	r3, r2, [r1]
 800b28a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1e3      	bne.n	800b25a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4a16      	ldr	r2, [pc, #88]	; (800b2f0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b296:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	e853 3f00 	ldrex	r3, [r3]
 800b2a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	f043 0320 	orr.w	r3, r3, #32
 800b2ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b2ba:	61bb      	str	r3, [r7, #24]
 800b2bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2be:	6979      	ldr	r1, [r7, #20]
 800b2c0:	69ba      	ldr	r2, [r7, #24]
 800b2c2:	e841 2300 	strex	r3, r2, [r1]
 800b2c6:	613b      	str	r3, [r7, #16]
   return(result);
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1e4      	bne.n	800b298 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b2ce:	e007      	b.n	800b2e0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	699a      	ldr	r2, [r3, #24]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f042 0208 	orr.w	r2, r2, #8
 800b2de:	619a      	str	r2, [r3, #24]
}
 800b2e0:	bf00      	nop
 800b2e2:	37b0      	adds	r7, #176	; 0xb0
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	effffffe 	.word	0xeffffffe
 800b2ec:	58000c00 	.word	0x58000c00
 800b2f0:	0800ac25 	.word	0x0800ac25

0800b2f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b0ae      	sub	sp, #184	; 0xb8
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b302:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	69db      	ldr	r3, [r3, #28]
 800b30c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b32a:	2b22      	cmp	r3, #34	; 0x22
 800b32c:	f040 8184 	bne.w	800b638 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b336:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b33a:	e127      	b.n	800b58c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b342:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b34a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b34e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800b352:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800b356:	4013      	ands	r3, r2
 800b358:	b29a      	uxth	r2, r3
 800b35a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b35e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b364:	1c9a      	adds	r2, r3, #2
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b370:	b29b      	uxth	r3, r3
 800b372:	3b01      	subs	r3, #1
 800b374:	b29a      	uxth	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	69db      	ldr	r3, [r3, #28]
 800b382:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b386:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b38a:	f003 0307 	and.w	r3, r3, #7
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d053      	beq.n	800b43a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b392:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b396:	f003 0301 	and.w	r3, r3, #1
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d011      	beq.n	800b3c2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b39e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00b      	beq.n	800b3c2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3b8:	f043 0201 	orr.w	r2, r3, #1
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b3c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b3c6:	f003 0302 	and.w	r3, r3, #2
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d011      	beq.n	800b3f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b3ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3d2:	f003 0301 	and.w	r3, r3, #1
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d00b      	beq.n	800b3f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2202      	movs	r2, #2
 800b3e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3e8:	f043 0204 	orr.w	r2, r3, #4
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b3f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b3f6:	f003 0304 	and.w	r3, r3, #4
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d011      	beq.n	800b422 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b3fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b402:	f003 0301 	and.w	r3, r3, #1
 800b406:	2b00      	cmp	r3, #0
 800b408:	d00b      	beq.n	800b422 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2204      	movs	r2, #4
 800b410:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b418:	f043 0202 	orr.w	r2, r3, #2
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d006      	beq.n	800b43a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f7fe f9f9 	bl	8009824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2200      	movs	r2, #0
 800b436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b440:	b29b      	uxth	r3, r3
 800b442:	2b00      	cmp	r3, #0
 800b444:	f040 80a2 	bne.w	800b58c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b44e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b450:	e853 3f00 	ldrex	r3, [r3]
 800b454:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b456:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b45c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	461a      	mov	r2, r3
 800b466:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b46a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b46e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b470:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b472:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b476:	e841 2300 	strex	r3, r2, [r1]
 800b47a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b47c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1e2      	bne.n	800b448 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	3308      	adds	r3, #8
 800b488:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b48c:	e853 3f00 	ldrex	r3, [r3]
 800b490:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b492:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b494:	4b6e      	ldr	r3, [pc, #440]	; (800b650 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800b496:	4013      	ands	r3, r2
 800b498:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	3308      	adds	r3, #8
 800b4a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b4a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b4a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b4ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b4ae:	e841 2300 	strex	r3, r2, [r1]
 800b4b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b4b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d1e3      	bne.n	800b482 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2220      	movs	r2, #32
 800b4be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a60      	ldr	r2, [pc, #384]	; (800b654 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d021      	beq.n	800b51c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d01a      	beq.n	800b51c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4ee:	e853 3f00 	ldrex	r3, [r3]
 800b4f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b4f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b4fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	461a      	mov	r2, r3
 800b504:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b508:	65bb      	str	r3, [r7, #88]	; 0x58
 800b50a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b50e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b510:	e841 2300 	strex	r3, r2, [r1]
 800b514:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1e4      	bne.n	800b4e6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b520:	2b01      	cmp	r3, #1
 800b522:	d130      	bne.n	800b586 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b532:	e853 3f00 	ldrex	r3, [r3]
 800b536:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b53a:	f023 0310 	bic.w	r3, r3, #16
 800b53e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	461a      	mov	r2, r3
 800b548:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b54c:	647b      	str	r3, [r7, #68]	; 0x44
 800b54e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b550:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b552:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b554:	e841 2300 	strex	r3, r2, [r1]
 800b558:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1e4      	bne.n	800b52a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	69db      	ldr	r3, [r3, #28]
 800b566:	f003 0310 	and.w	r3, r3, #16
 800b56a:	2b10      	cmp	r3, #16
 800b56c:	d103      	bne.n	800b576 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2210      	movs	r2, #16
 800b574:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b57c:	4619      	mov	r1, r3
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7fe f95a 	bl	8009838 <HAL_UARTEx_RxEventCallback>
 800b584:	e002      	b.n	800b58c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7f5 f960 	bl	800084c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b58c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800b590:	2b00      	cmp	r3, #0
 800b592:	d006      	beq.n	800b5a2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b594:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b598:	f003 0320 	and.w	r3, r3, #32
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f47f aecd 	bne.w	800b33c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5a8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b5ac:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d049      	beq.n	800b648 <UART_RxISR_16BIT_FIFOEN+0x354>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5ba:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d242      	bcs.n	800b648 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	3308      	adds	r3, #8
 800b5c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5cc:	e853 3f00 	ldrex	r3, [r3]
 800b5d0:	623b      	str	r3, [r7, #32]
   return(result);
 800b5d2:	6a3b      	ldr	r3, [r7, #32]
 800b5d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3308      	adds	r3, #8
 800b5e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b5e6:	633a      	str	r2, [r7, #48]	; 0x30
 800b5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5ee:	e841 2300 	strex	r3, r2, [r1]
 800b5f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d1e3      	bne.n	800b5c2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a16      	ldr	r2, [pc, #88]	; (800b658 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b5fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	e853 3f00 	ldrex	r3, [r3]
 800b60c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f043 0320 	orr.w	r3, r3, #32
 800b614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	461a      	mov	r2, r3
 800b61e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b622:	61fb      	str	r3, [r7, #28]
 800b624:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b626:	69b9      	ldr	r1, [r7, #24]
 800b628:	69fa      	ldr	r2, [r7, #28]
 800b62a:	e841 2300 	strex	r3, r2, [r1]
 800b62e:	617b      	str	r3, [r7, #20]
   return(result);
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1e4      	bne.n	800b600 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b636:	e007      	b.n	800b648 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	699a      	ldr	r2, [r3, #24]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f042 0208 	orr.w	r2, r2, #8
 800b646:	619a      	str	r2, [r3, #24]
}
 800b648:	bf00      	nop
 800b64a:	37b8      	adds	r7, #184	; 0xb8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	effffffe 	.word	0xeffffffe
 800b654:	58000c00 	.word	0x58000c00
 800b658:	0800addd 	.word	0x0800addd

0800b65c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b664:	bf00      	nop
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b678:	bf00      	nop
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b68c:	bf00      	nop
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d101      	bne.n	800b6ae <HAL_UARTEx_DisableFifoMode+0x16>
 800b6aa:	2302      	movs	r3, #2
 800b6ac:	e027      	b.n	800b6fe <HAL_UARTEx_DisableFifoMode+0x66>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2224      	movs	r2, #36	; 0x24
 800b6ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f022 0201 	bic.w	r2, r2, #1
 800b6d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b6dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2220      	movs	r2, #32
 800b6f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b6fc:	2300      	movs	r3, #0
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3714      	adds	r7, #20
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b084      	sub	sp, #16
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d101      	bne.n	800b722 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b71e:	2302      	movs	r3, #2
 800b720:	e02d      	b.n	800b77e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2201      	movs	r2, #1
 800b726:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2224      	movs	r2, #36	; 0x24
 800b72e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f022 0201 	bic.w	r2, r2, #1
 800b748:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	683a      	ldr	r2, [r7, #0]
 800b75a:	430a      	orrs	r2, r1
 800b75c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f850 	bl	800b804 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	68fa      	ldr	r2, [r7, #12]
 800b76a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2220      	movs	r2, #32
 800b770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b77c:	2300      	movs	r3, #0
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b084      	sub	sp, #16
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
 800b78e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b796:	2b01      	cmp	r3, #1
 800b798:	d101      	bne.n	800b79e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b79a:	2302      	movs	r3, #2
 800b79c:	e02d      	b.n	800b7fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2224      	movs	r2, #36	; 0x24
 800b7aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f022 0201 	bic.w	r2, r2, #1
 800b7c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	683a      	ldr	r2, [r7, #0]
 800b7d6:	430a      	orrs	r2, r1
 800b7d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 f812 	bl	800b804 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	68fa      	ldr	r2, [r7, #12]
 800b7e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2220      	movs	r2, #32
 800b7ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
	...

0800b804 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b810:	2b00      	cmp	r3, #0
 800b812:	d108      	bne.n	800b826 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2201      	movs	r2, #1
 800b820:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b824:	e031      	b.n	800b88a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b826:	2310      	movs	r3, #16
 800b828:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b82a:	2310      	movs	r3, #16
 800b82c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	0e5b      	lsrs	r3, r3, #25
 800b836:	b2db      	uxtb	r3, r3
 800b838:	f003 0307 	and.w	r3, r3, #7
 800b83c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	0f5b      	lsrs	r3, r3, #29
 800b846:	b2db      	uxtb	r3, r3
 800b848:	f003 0307 	and.w	r3, r3, #7
 800b84c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b84e:	7bbb      	ldrb	r3, [r7, #14]
 800b850:	7b3a      	ldrb	r2, [r7, #12]
 800b852:	4911      	ldr	r1, [pc, #68]	; (800b898 <UARTEx_SetNbDataToProcess+0x94>)
 800b854:	5c8a      	ldrb	r2, [r1, r2]
 800b856:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b85a:	7b3a      	ldrb	r2, [r7, #12]
 800b85c:	490f      	ldr	r1, [pc, #60]	; (800b89c <UARTEx_SetNbDataToProcess+0x98>)
 800b85e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b860:	fb93 f3f2 	sdiv	r3, r3, r2
 800b864:	b29a      	uxth	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b86c:	7bfb      	ldrb	r3, [r7, #15]
 800b86e:	7b7a      	ldrb	r2, [r7, #13]
 800b870:	4909      	ldr	r1, [pc, #36]	; (800b898 <UARTEx_SetNbDataToProcess+0x94>)
 800b872:	5c8a      	ldrb	r2, [r1, r2]
 800b874:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b878:	7b7a      	ldrb	r2, [r7, #13]
 800b87a:	4908      	ldr	r1, [pc, #32]	; (800b89c <UARTEx_SetNbDataToProcess+0x98>)
 800b87c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b87e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b882:	b29a      	uxth	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b88a:	bf00      	nop
 800b88c:	3714      	adds	r7, #20
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	0800e5a0 	.word	0x0800e5a0
 800b89c:	0800e5a8 	.word	0x0800e5a8

0800b8a0 <__cvt>:
 800b8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8a2:	ed2d 8b02 	vpush	{d8}
 800b8a6:	eeb0 8b40 	vmov.f64	d8, d0
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	4617      	mov	r7, r2
 800b8ae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b8b0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b8b2:	ee18 2a90 	vmov	r2, s17
 800b8b6:	f025 0520 	bic.w	r5, r5, #32
 800b8ba:	2a00      	cmp	r2, #0
 800b8bc:	bfb6      	itet	lt
 800b8be:	222d      	movlt	r2, #45	; 0x2d
 800b8c0:	2200      	movge	r2, #0
 800b8c2:	eeb1 8b40 	vneglt.f64	d8, d0
 800b8c6:	2d46      	cmp	r5, #70	; 0x46
 800b8c8:	460c      	mov	r4, r1
 800b8ca:	701a      	strb	r2, [r3, #0]
 800b8cc:	d004      	beq.n	800b8d8 <__cvt+0x38>
 800b8ce:	2d45      	cmp	r5, #69	; 0x45
 800b8d0:	d100      	bne.n	800b8d4 <__cvt+0x34>
 800b8d2:	3401      	adds	r4, #1
 800b8d4:	2102      	movs	r1, #2
 800b8d6:	e000      	b.n	800b8da <__cvt+0x3a>
 800b8d8:	2103      	movs	r1, #3
 800b8da:	ab03      	add	r3, sp, #12
 800b8dc:	9301      	str	r3, [sp, #4]
 800b8de:	ab02      	add	r3, sp, #8
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	4622      	mov	r2, r4
 800b8e4:	4633      	mov	r3, r6
 800b8e6:	eeb0 0b48 	vmov.f64	d0, d8
 800b8ea:	f000 ff45 	bl	800c778 <_dtoa_r>
 800b8ee:	2d47      	cmp	r5, #71	; 0x47
 800b8f0:	d101      	bne.n	800b8f6 <__cvt+0x56>
 800b8f2:	07fb      	lsls	r3, r7, #31
 800b8f4:	d51a      	bpl.n	800b92c <__cvt+0x8c>
 800b8f6:	2d46      	cmp	r5, #70	; 0x46
 800b8f8:	eb00 0204 	add.w	r2, r0, r4
 800b8fc:	d10c      	bne.n	800b918 <__cvt+0x78>
 800b8fe:	7803      	ldrb	r3, [r0, #0]
 800b900:	2b30      	cmp	r3, #48	; 0x30
 800b902:	d107      	bne.n	800b914 <__cvt+0x74>
 800b904:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b90c:	bf1c      	itt	ne
 800b90e:	f1c4 0401 	rsbne	r4, r4, #1
 800b912:	6034      	strne	r4, [r6, #0]
 800b914:	6833      	ldr	r3, [r6, #0]
 800b916:	441a      	add	r2, r3
 800b918:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b920:	bf08      	it	eq
 800b922:	9203      	streq	r2, [sp, #12]
 800b924:	2130      	movs	r1, #48	; 0x30
 800b926:	9b03      	ldr	r3, [sp, #12]
 800b928:	4293      	cmp	r3, r2
 800b92a:	d307      	bcc.n	800b93c <__cvt+0x9c>
 800b92c:	9b03      	ldr	r3, [sp, #12]
 800b92e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b930:	1a1b      	subs	r3, r3, r0
 800b932:	6013      	str	r3, [r2, #0]
 800b934:	b005      	add	sp, #20
 800b936:	ecbd 8b02 	vpop	{d8}
 800b93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b93c:	1c5c      	adds	r4, r3, #1
 800b93e:	9403      	str	r4, [sp, #12]
 800b940:	7019      	strb	r1, [r3, #0]
 800b942:	e7f0      	b.n	800b926 <__cvt+0x86>

0800b944 <__exponent>:
 800b944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b946:	4603      	mov	r3, r0
 800b948:	2900      	cmp	r1, #0
 800b94a:	bfb8      	it	lt
 800b94c:	4249      	neglt	r1, r1
 800b94e:	f803 2b02 	strb.w	r2, [r3], #2
 800b952:	bfb4      	ite	lt
 800b954:	222d      	movlt	r2, #45	; 0x2d
 800b956:	222b      	movge	r2, #43	; 0x2b
 800b958:	2909      	cmp	r1, #9
 800b95a:	7042      	strb	r2, [r0, #1]
 800b95c:	dd2a      	ble.n	800b9b4 <__exponent+0x70>
 800b95e:	f10d 0207 	add.w	r2, sp, #7
 800b962:	4617      	mov	r7, r2
 800b964:	260a      	movs	r6, #10
 800b966:	4694      	mov	ip, r2
 800b968:	fb91 f5f6 	sdiv	r5, r1, r6
 800b96c:	fb06 1415 	mls	r4, r6, r5, r1
 800b970:	3430      	adds	r4, #48	; 0x30
 800b972:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b976:	460c      	mov	r4, r1
 800b978:	2c63      	cmp	r4, #99	; 0x63
 800b97a:	f102 32ff 	add.w	r2, r2, #4294967295
 800b97e:	4629      	mov	r1, r5
 800b980:	dcf1      	bgt.n	800b966 <__exponent+0x22>
 800b982:	3130      	adds	r1, #48	; 0x30
 800b984:	f1ac 0402 	sub.w	r4, ip, #2
 800b988:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b98c:	1c41      	adds	r1, r0, #1
 800b98e:	4622      	mov	r2, r4
 800b990:	42ba      	cmp	r2, r7
 800b992:	d30a      	bcc.n	800b9aa <__exponent+0x66>
 800b994:	f10d 0209 	add.w	r2, sp, #9
 800b998:	eba2 020c 	sub.w	r2, r2, ip
 800b99c:	42bc      	cmp	r4, r7
 800b99e:	bf88      	it	hi
 800b9a0:	2200      	movhi	r2, #0
 800b9a2:	4413      	add	r3, r2
 800b9a4:	1a18      	subs	r0, r3, r0
 800b9a6:	b003      	add	sp, #12
 800b9a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9aa:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b9ae:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b9b2:	e7ed      	b.n	800b990 <__exponent+0x4c>
 800b9b4:	2330      	movs	r3, #48	; 0x30
 800b9b6:	3130      	adds	r1, #48	; 0x30
 800b9b8:	7083      	strb	r3, [r0, #2]
 800b9ba:	70c1      	strb	r1, [r0, #3]
 800b9bc:	1d03      	adds	r3, r0, #4
 800b9be:	e7f1      	b.n	800b9a4 <__exponent+0x60>

0800b9c0 <_printf_float>:
 800b9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c4:	b08b      	sub	sp, #44	; 0x2c
 800b9c6:	460c      	mov	r4, r1
 800b9c8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b9cc:	4616      	mov	r6, r2
 800b9ce:	461f      	mov	r7, r3
 800b9d0:	4605      	mov	r5, r0
 800b9d2:	f000 fdcf 	bl	800c574 <_localeconv_r>
 800b9d6:	f8d0 b000 	ldr.w	fp, [r0]
 800b9da:	4658      	mov	r0, fp
 800b9dc:	f7f4 fcd8 	bl	8000390 <strlen>
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	9308      	str	r3, [sp, #32]
 800b9e4:	f8d8 3000 	ldr.w	r3, [r8]
 800b9e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b9ec:	6822      	ldr	r2, [r4, #0]
 800b9ee:	3307      	adds	r3, #7
 800b9f0:	f023 0307 	bic.w	r3, r3, #7
 800b9f4:	f103 0108 	add.w	r1, r3, #8
 800b9f8:	f8c8 1000 	str.w	r1, [r8]
 800b9fc:	ed93 0b00 	vldr	d0, [r3]
 800ba00:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800bc60 <_printf_float+0x2a0>
 800ba04:	eeb0 7bc0 	vabs.f64	d7, d0
 800ba08:	eeb4 7b46 	vcmp.f64	d7, d6
 800ba0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba10:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800ba14:	4682      	mov	sl, r0
 800ba16:	dd24      	ble.n	800ba62 <_printf_float+0xa2>
 800ba18:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ba1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba20:	d502      	bpl.n	800ba28 <_printf_float+0x68>
 800ba22:	232d      	movs	r3, #45	; 0x2d
 800ba24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba28:	498f      	ldr	r1, [pc, #572]	; (800bc68 <_printf_float+0x2a8>)
 800ba2a:	4b90      	ldr	r3, [pc, #576]	; (800bc6c <_printf_float+0x2ac>)
 800ba2c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ba30:	bf94      	ite	ls
 800ba32:	4688      	movls	r8, r1
 800ba34:	4698      	movhi	r8, r3
 800ba36:	2303      	movs	r3, #3
 800ba38:	6123      	str	r3, [r4, #16]
 800ba3a:	f022 0204 	bic.w	r2, r2, #4
 800ba3e:	2300      	movs	r3, #0
 800ba40:	6022      	str	r2, [r4, #0]
 800ba42:	9304      	str	r3, [sp, #16]
 800ba44:	9700      	str	r7, [sp, #0]
 800ba46:	4633      	mov	r3, r6
 800ba48:	aa09      	add	r2, sp, #36	; 0x24
 800ba4a:	4621      	mov	r1, r4
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	f000 f9d1 	bl	800bdf4 <_printf_common>
 800ba52:	3001      	adds	r0, #1
 800ba54:	f040 808a 	bne.w	800bb6c <_printf_float+0x1ac>
 800ba58:	f04f 30ff 	mov.w	r0, #4294967295
 800ba5c:	b00b      	add	sp, #44	; 0x2c
 800ba5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba62:	eeb4 0b40 	vcmp.f64	d0, d0
 800ba66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6a:	d709      	bvc.n	800ba80 <_printf_float+0xc0>
 800ba6c:	ee10 3a90 	vmov	r3, s1
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	bfbc      	itt	lt
 800ba74:	232d      	movlt	r3, #45	; 0x2d
 800ba76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ba7a:	497d      	ldr	r1, [pc, #500]	; (800bc70 <_printf_float+0x2b0>)
 800ba7c:	4b7d      	ldr	r3, [pc, #500]	; (800bc74 <_printf_float+0x2b4>)
 800ba7e:	e7d5      	b.n	800ba2c <_printf_float+0x6c>
 800ba80:	6863      	ldr	r3, [r4, #4]
 800ba82:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ba86:	9104      	str	r1, [sp, #16]
 800ba88:	1c59      	adds	r1, r3, #1
 800ba8a:	d13c      	bne.n	800bb06 <_printf_float+0x146>
 800ba8c:	2306      	movs	r3, #6
 800ba8e:	6063      	str	r3, [r4, #4]
 800ba90:	2300      	movs	r3, #0
 800ba92:	9303      	str	r3, [sp, #12]
 800ba94:	ab08      	add	r3, sp, #32
 800ba96:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ba9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ba9e:	ab07      	add	r3, sp, #28
 800baa0:	6861      	ldr	r1, [r4, #4]
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	6022      	str	r2, [r4, #0]
 800baa6:	f10d 031b 	add.w	r3, sp, #27
 800baaa:	4628      	mov	r0, r5
 800baac:	f7ff fef8 	bl	800b8a0 <__cvt>
 800bab0:	9b04      	ldr	r3, [sp, #16]
 800bab2:	9907      	ldr	r1, [sp, #28]
 800bab4:	2b47      	cmp	r3, #71	; 0x47
 800bab6:	4680      	mov	r8, r0
 800bab8:	d108      	bne.n	800bacc <_printf_float+0x10c>
 800baba:	1cc8      	adds	r0, r1, #3
 800babc:	db02      	blt.n	800bac4 <_printf_float+0x104>
 800babe:	6863      	ldr	r3, [r4, #4]
 800bac0:	4299      	cmp	r1, r3
 800bac2:	dd41      	ble.n	800bb48 <_printf_float+0x188>
 800bac4:	f1a9 0902 	sub.w	r9, r9, #2
 800bac8:	fa5f f989 	uxtb.w	r9, r9
 800bacc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bad0:	d820      	bhi.n	800bb14 <_printf_float+0x154>
 800bad2:	3901      	subs	r1, #1
 800bad4:	464a      	mov	r2, r9
 800bad6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bada:	9107      	str	r1, [sp, #28]
 800badc:	f7ff ff32 	bl	800b944 <__exponent>
 800bae0:	9a08      	ldr	r2, [sp, #32]
 800bae2:	9004      	str	r0, [sp, #16]
 800bae4:	1813      	adds	r3, r2, r0
 800bae6:	2a01      	cmp	r2, #1
 800bae8:	6123      	str	r3, [r4, #16]
 800baea:	dc02      	bgt.n	800baf2 <_printf_float+0x132>
 800baec:	6822      	ldr	r2, [r4, #0]
 800baee:	07d2      	lsls	r2, r2, #31
 800baf0:	d501      	bpl.n	800baf6 <_printf_float+0x136>
 800baf2:	3301      	adds	r3, #1
 800baf4:	6123      	str	r3, [r4, #16]
 800baf6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d0a2      	beq.n	800ba44 <_printf_float+0x84>
 800bafe:	232d      	movs	r3, #45	; 0x2d
 800bb00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb04:	e79e      	b.n	800ba44 <_printf_float+0x84>
 800bb06:	9904      	ldr	r1, [sp, #16]
 800bb08:	2947      	cmp	r1, #71	; 0x47
 800bb0a:	d1c1      	bne.n	800ba90 <_printf_float+0xd0>
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d1bf      	bne.n	800ba90 <_printf_float+0xd0>
 800bb10:	2301      	movs	r3, #1
 800bb12:	e7bc      	b.n	800ba8e <_printf_float+0xce>
 800bb14:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bb18:	d118      	bne.n	800bb4c <_printf_float+0x18c>
 800bb1a:	2900      	cmp	r1, #0
 800bb1c:	6863      	ldr	r3, [r4, #4]
 800bb1e:	dd0b      	ble.n	800bb38 <_printf_float+0x178>
 800bb20:	6121      	str	r1, [r4, #16]
 800bb22:	b913      	cbnz	r3, 800bb2a <_printf_float+0x16a>
 800bb24:	6822      	ldr	r2, [r4, #0]
 800bb26:	07d0      	lsls	r0, r2, #31
 800bb28:	d502      	bpl.n	800bb30 <_printf_float+0x170>
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	440b      	add	r3, r1
 800bb2e:	6123      	str	r3, [r4, #16]
 800bb30:	2300      	movs	r3, #0
 800bb32:	65a1      	str	r1, [r4, #88]	; 0x58
 800bb34:	9304      	str	r3, [sp, #16]
 800bb36:	e7de      	b.n	800baf6 <_printf_float+0x136>
 800bb38:	b913      	cbnz	r3, 800bb40 <_printf_float+0x180>
 800bb3a:	6822      	ldr	r2, [r4, #0]
 800bb3c:	07d2      	lsls	r2, r2, #31
 800bb3e:	d501      	bpl.n	800bb44 <_printf_float+0x184>
 800bb40:	3302      	adds	r3, #2
 800bb42:	e7f4      	b.n	800bb2e <_printf_float+0x16e>
 800bb44:	2301      	movs	r3, #1
 800bb46:	e7f2      	b.n	800bb2e <_printf_float+0x16e>
 800bb48:	f04f 0967 	mov.w	r9, #103	; 0x67
 800bb4c:	9b08      	ldr	r3, [sp, #32]
 800bb4e:	4299      	cmp	r1, r3
 800bb50:	db05      	blt.n	800bb5e <_printf_float+0x19e>
 800bb52:	6823      	ldr	r3, [r4, #0]
 800bb54:	6121      	str	r1, [r4, #16]
 800bb56:	07d8      	lsls	r0, r3, #31
 800bb58:	d5ea      	bpl.n	800bb30 <_printf_float+0x170>
 800bb5a:	1c4b      	adds	r3, r1, #1
 800bb5c:	e7e7      	b.n	800bb2e <_printf_float+0x16e>
 800bb5e:	2900      	cmp	r1, #0
 800bb60:	bfd4      	ite	le
 800bb62:	f1c1 0202 	rsble	r2, r1, #2
 800bb66:	2201      	movgt	r2, #1
 800bb68:	4413      	add	r3, r2
 800bb6a:	e7e0      	b.n	800bb2e <_printf_float+0x16e>
 800bb6c:	6823      	ldr	r3, [r4, #0]
 800bb6e:	055a      	lsls	r2, r3, #21
 800bb70:	d407      	bmi.n	800bb82 <_printf_float+0x1c2>
 800bb72:	6923      	ldr	r3, [r4, #16]
 800bb74:	4642      	mov	r2, r8
 800bb76:	4631      	mov	r1, r6
 800bb78:	4628      	mov	r0, r5
 800bb7a:	47b8      	blx	r7
 800bb7c:	3001      	adds	r0, #1
 800bb7e:	d12a      	bne.n	800bbd6 <_printf_float+0x216>
 800bb80:	e76a      	b.n	800ba58 <_printf_float+0x98>
 800bb82:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bb86:	f240 80e0 	bls.w	800bd4a <_printf_float+0x38a>
 800bb8a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bb8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb96:	d133      	bne.n	800bc00 <_printf_float+0x240>
 800bb98:	4a37      	ldr	r2, [pc, #220]	; (800bc78 <_printf_float+0x2b8>)
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	4631      	mov	r1, r6
 800bb9e:	4628      	mov	r0, r5
 800bba0:	47b8      	blx	r7
 800bba2:	3001      	adds	r0, #1
 800bba4:	f43f af58 	beq.w	800ba58 <_printf_float+0x98>
 800bba8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	db02      	blt.n	800bbb6 <_printf_float+0x1f6>
 800bbb0:	6823      	ldr	r3, [r4, #0]
 800bbb2:	07d8      	lsls	r0, r3, #31
 800bbb4:	d50f      	bpl.n	800bbd6 <_printf_float+0x216>
 800bbb6:	4653      	mov	r3, sl
 800bbb8:	465a      	mov	r2, fp
 800bbba:	4631      	mov	r1, r6
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	47b8      	blx	r7
 800bbc0:	3001      	adds	r0, #1
 800bbc2:	f43f af49 	beq.w	800ba58 <_printf_float+0x98>
 800bbc6:	f04f 0800 	mov.w	r8, #0
 800bbca:	f104 091a 	add.w	r9, r4, #26
 800bbce:	9b08      	ldr	r3, [sp, #32]
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	4543      	cmp	r3, r8
 800bbd4:	dc09      	bgt.n	800bbea <_printf_float+0x22a>
 800bbd6:	6823      	ldr	r3, [r4, #0]
 800bbd8:	079b      	lsls	r3, r3, #30
 800bbda:	f100 8106 	bmi.w	800bdea <_printf_float+0x42a>
 800bbde:	68e0      	ldr	r0, [r4, #12]
 800bbe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbe2:	4298      	cmp	r0, r3
 800bbe4:	bfb8      	it	lt
 800bbe6:	4618      	movlt	r0, r3
 800bbe8:	e738      	b.n	800ba5c <_printf_float+0x9c>
 800bbea:	2301      	movs	r3, #1
 800bbec:	464a      	mov	r2, r9
 800bbee:	4631      	mov	r1, r6
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	47b8      	blx	r7
 800bbf4:	3001      	adds	r0, #1
 800bbf6:	f43f af2f 	beq.w	800ba58 <_printf_float+0x98>
 800bbfa:	f108 0801 	add.w	r8, r8, #1
 800bbfe:	e7e6      	b.n	800bbce <_printf_float+0x20e>
 800bc00:	9b07      	ldr	r3, [sp, #28]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	dc3a      	bgt.n	800bc7c <_printf_float+0x2bc>
 800bc06:	4a1c      	ldr	r2, [pc, #112]	; (800bc78 <_printf_float+0x2b8>)
 800bc08:	2301      	movs	r3, #1
 800bc0a:	4631      	mov	r1, r6
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	47b8      	blx	r7
 800bc10:	3001      	adds	r0, #1
 800bc12:	f43f af21 	beq.w	800ba58 <_printf_float+0x98>
 800bc16:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	d102      	bne.n	800bc24 <_printf_float+0x264>
 800bc1e:	6823      	ldr	r3, [r4, #0]
 800bc20:	07d9      	lsls	r1, r3, #31
 800bc22:	d5d8      	bpl.n	800bbd6 <_printf_float+0x216>
 800bc24:	4653      	mov	r3, sl
 800bc26:	465a      	mov	r2, fp
 800bc28:	4631      	mov	r1, r6
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	47b8      	blx	r7
 800bc2e:	3001      	adds	r0, #1
 800bc30:	f43f af12 	beq.w	800ba58 <_printf_float+0x98>
 800bc34:	f04f 0900 	mov.w	r9, #0
 800bc38:	f104 0a1a 	add.w	sl, r4, #26
 800bc3c:	9b07      	ldr	r3, [sp, #28]
 800bc3e:	425b      	negs	r3, r3
 800bc40:	454b      	cmp	r3, r9
 800bc42:	dc01      	bgt.n	800bc48 <_printf_float+0x288>
 800bc44:	9b08      	ldr	r3, [sp, #32]
 800bc46:	e795      	b.n	800bb74 <_printf_float+0x1b4>
 800bc48:	2301      	movs	r3, #1
 800bc4a:	4652      	mov	r2, sl
 800bc4c:	4631      	mov	r1, r6
 800bc4e:	4628      	mov	r0, r5
 800bc50:	47b8      	blx	r7
 800bc52:	3001      	adds	r0, #1
 800bc54:	f43f af00 	beq.w	800ba58 <_printf_float+0x98>
 800bc58:	f109 0901 	add.w	r9, r9, #1
 800bc5c:	e7ee      	b.n	800bc3c <_printf_float+0x27c>
 800bc5e:	bf00      	nop
 800bc60:	ffffffff 	.word	0xffffffff
 800bc64:	7fefffff 	.word	0x7fefffff
 800bc68:	0800e5b0 	.word	0x0800e5b0
 800bc6c:	0800e5b4 	.word	0x0800e5b4
 800bc70:	0800e5b8 	.word	0x0800e5b8
 800bc74:	0800e5bc 	.word	0x0800e5bc
 800bc78:	0800e5c0 	.word	0x0800e5c0
 800bc7c:	9a08      	ldr	r2, [sp, #32]
 800bc7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc80:	429a      	cmp	r2, r3
 800bc82:	bfa8      	it	ge
 800bc84:	461a      	movge	r2, r3
 800bc86:	2a00      	cmp	r2, #0
 800bc88:	4691      	mov	r9, r2
 800bc8a:	dc38      	bgt.n	800bcfe <_printf_float+0x33e>
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	9305      	str	r3, [sp, #20]
 800bc90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc94:	f104 021a 	add.w	r2, r4, #26
 800bc98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc9a:	9905      	ldr	r1, [sp, #20]
 800bc9c:	9304      	str	r3, [sp, #16]
 800bc9e:	eba3 0309 	sub.w	r3, r3, r9
 800bca2:	428b      	cmp	r3, r1
 800bca4:	dc33      	bgt.n	800bd0e <_printf_float+0x34e>
 800bca6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	db3c      	blt.n	800bd28 <_printf_float+0x368>
 800bcae:	6823      	ldr	r3, [r4, #0]
 800bcb0:	07da      	lsls	r2, r3, #31
 800bcb2:	d439      	bmi.n	800bd28 <_printf_float+0x368>
 800bcb4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800bcb8:	eba2 0903 	sub.w	r9, r2, r3
 800bcbc:	9b04      	ldr	r3, [sp, #16]
 800bcbe:	1ad2      	subs	r2, r2, r3
 800bcc0:	4591      	cmp	r9, r2
 800bcc2:	bfa8      	it	ge
 800bcc4:	4691      	movge	r9, r2
 800bcc6:	f1b9 0f00 	cmp.w	r9, #0
 800bcca:	dc35      	bgt.n	800bd38 <_printf_float+0x378>
 800bccc:	f04f 0800 	mov.w	r8, #0
 800bcd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcd4:	f104 0a1a 	add.w	sl, r4, #26
 800bcd8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bcdc:	1a9b      	subs	r3, r3, r2
 800bcde:	eba3 0309 	sub.w	r3, r3, r9
 800bce2:	4543      	cmp	r3, r8
 800bce4:	f77f af77 	ble.w	800bbd6 <_printf_float+0x216>
 800bce8:	2301      	movs	r3, #1
 800bcea:	4652      	mov	r2, sl
 800bcec:	4631      	mov	r1, r6
 800bcee:	4628      	mov	r0, r5
 800bcf0:	47b8      	blx	r7
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	f43f aeb0 	beq.w	800ba58 <_printf_float+0x98>
 800bcf8:	f108 0801 	add.w	r8, r8, #1
 800bcfc:	e7ec      	b.n	800bcd8 <_printf_float+0x318>
 800bcfe:	4613      	mov	r3, r2
 800bd00:	4631      	mov	r1, r6
 800bd02:	4642      	mov	r2, r8
 800bd04:	4628      	mov	r0, r5
 800bd06:	47b8      	blx	r7
 800bd08:	3001      	adds	r0, #1
 800bd0a:	d1bf      	bne.n	800bc8c <_printf_float+0x2cc>
 800bd0c:	e6a4      	b.n	800ba58 <_printf_float+0x98>
 800bd0e:	2301      	movs	r3, #1
 800bd10:	4631      	mov	r1, r6
 800bd12:	4628      	mov	r0, r5
 800bd14:	9204      	str	r2, [sp, #16]
 800bd16:	47b8      	blx	r7
 800bd18:	3001      	adds	r0, #1
 800bd1a:	f43f ae9d 	beq.w	800ba58 <_printf_float+0x98>
 800bd1e:	9b05      	ldr	r3, [sp, #20]
 800bd20:	9a04      	ldr	r2, [sp, #16]
 800bd22:	3301      	adds	r3, #1
 800bd24:	9305      	str	r3, [sp, #20]
 800bd26:	e7b7      	b.n	800bc98 <_printf_float+0x2d8>
 800bd28:	4653      	mov	r3, sl
 800bd2a:	465a      	mov	r2, fp
 800bd2c:	4631      	mov	r1, r6
 800bd2e:	4628      	mov	r0, r5
 800bd30:	47b8      	blx	r7
 800bd32:	3001      	adds	r0, #1
 800bd34:	d1be      	bne.n	800bcb4 <_printf_float+0x2f4>
 800bd36:	e68f      	b.n	800ba58 <_printf_float+0x98>
 800bd38:	9a04      	ldr	r2, [sp, #16]
 800bd3a:	464b      	mov	r3, r9
 800bd3c:	4442      	add	r2, r8
 800bd3e:	4631      	mov	r1, r6
 800bd40:	4628      	mov	r0, r5
 800bd42:	47b8      	blx	r7
 800bd44:	3001      	adds	r0, #1
 800bd46:	d1c1      	bne.n	800bccc <_printf_float+0x30c>
 800bd48:	e686      	b.n	800ba58 <_printf_float+0x98>
 800bd4a:	9a08      	ldr	r2, [sp, #32]
 800bd4c:	2a01      	cmp	r2, #1
 800bd4e:	dc01      	bgt.n	800bd54 <_printf_float+0x394>
 800bd50:	07db      	lsls	r3, r3, #31
 800bd52:	d537      	bpl.n	800bdc4 <_printf_float+0x404>
 800bd54:	2301      	movs	r3, #1
 800bd56:	4642      	mov	r2, r8
 800bd58:	4631      	mov	r1, r6
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	47b8      	blx	r7
 800bd5e:	3001      	adds	r0, #1
 800bd60:	f43f ae7a 	beq.w	800ba58 <_printf_float+0x98>
 800bd64:	4653      	mov	r3, sl
 800bd66:	465a      	mov	r2, fp
 800bd68:	4631      	mov	r1, r6
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	47b8      	blx	r7
 800bd6e:	3001      	adds	r0, #1
 800bd70:	f43f ae72 	beq.w	800ba58 <_printf_float+0x98>
 800bd74:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bd78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd80:	9b08      	ldr	r3, [sp, #32]
 800bd82:	d01a      	beq.n	800bdba <_printf_float+0x3fa>
 800bd84:	3b01      	subs	r3, #1
 800bd86:	f108 0201 	add.w	r2, r8, #1
 800bd8a:	4631      	mov	r1, r6
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	47b8      	blx	r7
 800bd90:	3001      	adds	r0, #1
 800bd92:	d10e      	bne.n	800bdb2 <_printf_float+0x3f2>
 800bd94:	e660      	b.n	800ba58 <_printf_float+0x98>
 800bd96:	2301      	movs	r3, #1
 800bd98:	464a      	mov	r2, r9
 800bd9a:	4631      	mov	r1, r6
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	47b8      	blx	r7
 800bda0:	3001      	adds	r0, #1
 800bda2:	f43f ae59 	beq.w	800ba58 <_printf_float+0x98>
 800bda6:	f108 0801 	add.w	r8, r8, #1
 800bdaa:	9b08      	ldr	r3, [sp, #32]
 800bdac:	3b01      	subs	r3, #1
 800bdae:	4543      	cmp	r3, r8
 800bdb0:	dcf1      	bgt.n	800bd96 <_printf_float+0x3d6>
 800bdb2:	9b04      	ldr	r3, [sp, #16]
 800bdb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bdb8:	e6dd      	b.n	800bb76 <_printf_float+0x1b6>
 800bdba:	f04f 0800 	mov.w	r8, #0
 800bdbe:	f104 091a 	add.w	r9, r4, #26
 800bdc2:	e7f2      	b.n	800bdaa <_printf_float+0x3ea>
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	4642      	mov	r2, r8
 800bdc8:	e7df      	b.n	800bd8a <_printf_float+0x3ca>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	464a      	mov	r2, r9
 800bdce:	4631      	mov	r1, r6
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	47b8      	blx	r7
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	f43f ae3f 	beq.w	800ba58 <_printf_float+0x98>
 800bdda:	f108 0801 	add.w	r8, r8, #1
 800bdde:	68e3      	ldr	r3, [r4, #12]
 800bde0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bde2:	1a5b      	subs	r3, r3, r1
 800bde4:	4543      	cmp	r3, r8
 800bde6:	dcf0      	bgt.n	800bdca <_printf_float+0x40a>
 800bde8:	e6f9      	b.n	800bbde <_printf_float+0x21e>
 800bdea:	f04f 0800 	mov.w	r8, #0
 800bdee:	f104 0919 	add.w	r9, r4, #25
 800bdf2:	e7f4      	b.n	800bdde <_printf_float+0x41e>

0800bdf4 <_printf_common>:
 800bdf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdf8:	4616      	mov	r6, r2
 800bdfa:	4699      	mov	r9, r3
 800bdfc:	688a      	ldr	r2, [r1, #8]
 800bdfe:	690b      	ldr	r3, [r1, #16]
 800be00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be04:	4293      	cmp	r3, r2
 800be06:	bfb8      	it	lt
 800be08:	4613      	movlt	r3, r2
 800be0a:	6033      	str	r3, [r6, #0]
 800be0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be10:	4607      	mov	r7, r0
 800be12:	460c      	mov	r4, r1
 800be14:	b10a      	cbz	r2, 800be1a <_printf_common+0x26>
 800be16:	3301      	adds	r3, #1
 800be18:	6033      	str	r3, [r6, #0]
 800be1a:	6823      	ldr	r3, [r4, #0]
 800be1c:	0699      	lsls	r1, r3, #26
 800be1e:	bf42      	ittt	mi
 800be20:	6833      	ldrmi	r3, [r6, #0]
 800be22:	3302      	addmi	r3, #2
 800be24:	6033      	strmi	r3, [r6, #0]
 800be26:	6825      	ldr	r5, [r4, #0]
 800be28:	f015 0506 	ands.w	r5, r5, #6
 800be2c:	d106      	bne.n	800be3c <_printf_common+0x48>
 800be2e:	f104 0a19 	add.w	sl, r4, #25
 800be32:	68e3      	ldr	r3, [r4, #12]
 800be34:	6832      	ldr	r2, [r6, #0]
 800be36:	1a9b      	subs	r3, r3, r2
 800be38:	42ab      	cmp	r3, r5
 800be3a:	dc26      	bgt.n	800be8a <_printf_common+0x96>
 800be3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be40:	1e13      	subs	r3, r2, #0
 800be42:	6822      	ldr	r2, [r4, #0]
 800be44:	bf18      	it	ne
 800be46:	2301      	movne	r3, #1
 800be48:	0692      	lsls	r2, r2, #26
 800be4a:	d42b      	bmi.n	800bea4 <_printf_common+0xb0>
 800be4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be50:	4649      	mov	r1, r9
 800be52:	4638      	mov	r0, r7
 800be54:	47c0      	blx	r8
 800be56:	3001      	adds	r0, #1
 800be58:	d01e      	beq.n	800be98 <_printf_common+0xa4>
 800be5a:	6823      	ldr	r3, [r4, #0]
 800be5c:	6922      	ldr	r2, [r4, #16]
 800be5e:	f003 0306 	and.w	r3, r3, #6
 800be62:	2b04      	cmp	r3, #4
 800be64:	bf02      	ittt	eq
 800be66:	68e5      	ldreq	r5, [r4, #12]
 800be68:	6833      	ldreq	r3, [r6, #0]
 800be6a:	1aed      	subeq	r5, r5, r3
 800be6c:	68a3      	ldr	r3, [r4, #8]
 800be6e:	bf0c      	ite	eq
 800be70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be74:	2500      	movne	r5, #0
 800be76:	4293      	cmp	r3, r2
 800be78:	bfc4      	itt	gt
 800be7a:	1a9b      	subgt	r3, r3, r2
 800be7c:	18ed      	addgt	r5, r5, r3
 800be7e:	2600      	movs	r6, #0
 800be80:	341a      	adds	r4, #26
 800be82:	42b5      	cmp	r5, r6
 800be84:	d11a      	bne.n	800bebc <_printf_common+0xc8>
 800be86:	2000      	movs	r0, #0
 800be88:	e008      	b.n	800be9c <_printf_common+0xa8>
 800be8a:	2301      	movs	r3, #1
 800be8c:	4652      	mov	r2, sl
 800be8e:	4649      	mov	r1, r9
 800be90:	4638      	mov	r0, r7
 800be92:	47c0      	blx	r8
 800be94:	3001      	adds	r0, #1
 800be96:	d103      	bne.n	800bea0 <_printf_common+0xac>
 800be98:	f04f 30ff 	mov.w	r0, #4294967295
 800be9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bea0:	3501      	adds	r5, #1
 800bea2:	e7c6      	b.n	800be32 <_printf_common+0x3e>
 800bea4:	18e1      	adds	r1, r4, r3
 800bea6:	1c5a      	adds	r2, r3, #1
 800bea8:	2030      	movs	r0, #48	; 0x30
 800beaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800beae:	4422      	add	r2, r4
 800beb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800beb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800beb8:	3302      	adds	r3, #2
 800beba:	e7c7      	b.n	800be4c <_printf_common+0x58>
 800bebc:	2301      	movs	r3, #1
 800bebe:	4622      	mov	r2, r4
 800bec0:	4649      	mov	r1, r9
 800bec2:	4638      	mov	r0, r7
 800bec4:	47c0      	blx	r8
 800bec6:	3001      	adds	r0, #1
 800bec8:	d0e6      	beq.n	800be98 <_printf_common+0xa4>
 800beca:	3601      	adds	r6, #1
 800becc:	e7d9      	b.n	800be82 <_printf_common+0x8e>
	...

0800bed0 <_printf_i>:
 800bed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bed4:	7e0f      	ldrb	r7, [r1, #24]
 800bed6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bed8:	2f78      	cmp	r7, #120	; 0x78
 800beda:	4691      	mov	r9, r2
 800bedc:	4680      	mov	r8, r0
 800bede:	460c      	mov	r4, r1
 800bee0:	469a      	mov	sl, r3
 800bee2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bee6:	d807      	bhi.n	800bef8 <_printf_i+0x28>
 800bee8:	2f62      	cmp	r7, #98	; 0x62
 800beea:	d80a      	bhi.n	800bf02 <_printf_i+0x32>
 800beec:	2f00      	cmp	r7, #0
 800beee:	f000 80d4 	beq.w	800c09a <_printf_i+0x1ca>
 800bef2:	2f58      	cmp	r7, #88	; 0x58
 800bef4:	f000 80c0 	beq.w	800c078 <_printf_i+0x1a8>
 800bef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800befc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf00:	e03a      	b.n	800bf78 <_printf_i+0xa8>
 800bf02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf06:	2b15      	cmp	r3, #21
 800bf08:	d8f6      	bhi.n	800bef8 <_printf_i+0x28>
 800bf0a:	a101      	add	r1, pc, #4	; (adr r1, 800bf10 <_printf_i+0x40>)
 800bf0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf10:	0800bf69 	.word	0x0800bf69
 800bf14:	0800bf7d 	.word	0x0800bf7d
 800bf18:	0800bef9 	.word	0x0800bef9
 800bf1c:	0800bef9 	.word	0x0800bef9
 800bf20:	0800bef9 	.word	0x0800bef9
 800bf24:	0800bef9 	.word	0x0800bef9
 800bf28:	0800bf7d 	.word	0x0800bf7d
 800bf2c:	0800bef9 	.word	0x0800bef9
 800bf30:	0800bef9 	.word	0x0800bef9
 800bf34:	0800bef9 	.word	0x0800bef9
 800bf38:	0800bef9 	.word	0x0800bef9
 800bf3c:	0800c081 	.word	0x0800c081
 800bf40:	0800bfa9 	.word	0x0800bfa9
 800bf44:	0800c03b 	.word	0x0800c03b
 800bf48:	0800bef9 	.word	0x0800bef9
 800bf4c:	0800bef9 	.word	0x0800bef9
 800bf50:	0800c0a3 	.word	0x0800c0a3
 800bf54:	0800bef9 	.word	0x0800bef9
 800bf58:	0800bfa9 	.word	0x0800bfa9
 800bf5c:	0800bef9 	.word	0x0800bef9
 800bf60:	0800bef9 	.word	0x0800bef9
 800bf64:	0800c043 	.word	0x0800c043
 800bf68:	682b      	ldr	r3, [r5, #0]
 800bf6a:	1d1a      	adds	r2, r3, #4
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	602a      	str	r2, [r5, #0]
 800bf70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e09f      	b.n	800c0bc <_printf_i+0x1ec>
 800bf7c:	6820      	ldr	r0, [r4, #0]
 800bf7e:	682b      	ldr	r3, [r5, #0]
 800bf80:	0607      	lsls	r7, r0, #24
 800bf82:	f103 0104 	add.w	r1, r3, #4
 800bf86:	6029      	str	r1, [r5, #0]
 800bf88:	d501      	bpl.n	800bf8e <_printf_i+0xbe>
 800bf8a:	681e      	ldr	r6, [r3, #0]
 800bf8c:	e003      	b.n	800bf96 <_printf_i+0xc6>
 800bf8e:	0646      	lsls	r6, r0, #25
 800bf90:	d5fb      	bpl.n	800bf8a <_printf_i+0xba>
 800bf92:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bf96:	2e00      	cmp	r6, #0
 800bf98:	da03      	bge.n	800bfa2 <_printf_i+0xd2>
 800bf9a:	232d      	movs	r3, #45	; 0x2d
 800bf9c:	4276      	negs	r6, r6
 800bf9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfa2:	485a      	ldr	r0, [pc, #360]	; (800c10c <_printf_i+0x23c>)
 800bfa4:	230a      	movs	r3, #10
 800bfa6:	e012      	b.n	800bfce <_printf_i+0xfe>
 800bfa8:	682b      	ldr	r3, [r5, #0]
 800bfaa:	6820      	ldr	r0, [r4, #0]
 800bfac:	1d19      	adds	r1, r3, #4
 800bfae:	6029      	str	r1, [r5, #0]
 800bfb0:	0605      	lsls	r5, r0, #24
 800bfb2:	d501      	bpl.n	800bfb8 <_printf_i+0xe8>
 800bfb4:	681e      	ldr	r6, [r3, #0]
 800bfb6:	e002      	b.n	800bfbe <_printf_i+0xee>
 800bfb8:	0641      	lsls	r1, r0, #25
 800bfba:	d5fb      	bpl.n	800bfb4 <_printf_i+0xe4>
 800bfbc:	881e      	ldrh	r6, [r3, #0]
 800bfbe:	4853      	ldr	r0, [pc, #332]	; (800c10c <_printf_i+0x23c>)
 800bfc0:	2f6f      	cmp	r7, #111	; 0x6f
 800bfc2:	bf0c      	ite	eq
 800bfc4:	2308      	moveq	r3, #8
 800bfc6:	230a      	movne	r3, #10
 800bfc8:	2100      	movs	r1, #0
 800bfca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfce:	6865      	ldr	r5, [r4, #4]
 800bfd0:	60a5      	str	r5, [r4, #8]
 800bfd2:	2d00      	cmp	r5, #0
 800bfd4:	bfa2      	ittt	ge
 800bfd6:	6821      	ldrge	r1, [r4, #0]
 800bfd8:	f021 0104 	bicge.w	r1, r1, #4
 800bfdc:	6021      	strge	r1, [r4, #0]
 800bfde:	b90e      	cbnz	r6, 800bfe4 <_printf_i+0x114>
 800bfe0:	2d00      	cmp	r5, #0
 800bfe2:	d04b      	beq.n	800c07c <_printf_i+0x1ac>
 800bfe4:	4615      	mov	r5, r2
 800bfe6:	fbb6 f1f3 	udiv	r1, r6, r3
 800bfea:	fb03 6711 	mls	r7, r3, r1, r6
 800bfee:	5dc7      	ldrb	r7, [r0, r7]
 800bff0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bff4:	4637      	mov	r7, r6
 800bff6:	42bb      	cmp	r3, r7
 800bff8:	460e      	mov	r6, r1
 800bffa:	d9f4      	bls.n	800bfe6 <_printf_i+0x116>
 800bffc:	2b08      	cmp	r3, #8
 800bffe:	d10b      	bne.n	800c018 <_printf_i+0x148>
 800c000:	6823      	ldr	r3, [r4, #0]
 800c002:	07de      	lsls	r6, r3, #31
 800c004:	d508      	bpl.n	800c018 <_printf_i+0x148>
 800c006:	6923      	ldr	r3, [r4, #16]
 800c008:	6861      	ldr	r1, [r4, #4]
 800c00a:	4299      	cmp	r1, r3
 800c00c:	bfde      	ittt	le
 800c00e:	2330      	movle	r3, #48	; 0x30
 800c010:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c014:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c018:	1b52      	subs	r2, r2, r5
 800c01a:	6122      	str	r2, [r4, #16]
 800c01c:	f8cd a000 	str.w	sl, [sp]
 800c020:	464b      	mov	r3, r9
 800c022:	aa03      	add	r2, sp, #12
 800c024:	4621      	mov	r1, r4
 800c026:	4640      	mov	r0, r8
 800c028:	f7ff fee4 	bl	800bdf4 <_printf_common>
 800c02c:	3001      	adds	r0, #1
 800c02e:	d14a      	bne.n	800c0c6 <_printf_i+0x1f6>
 800c030:	f04f 30ff 	mov.w	r0, #4294967295
 800c034:	b004      	add	sp, #16
 800c036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c03a:	6823      	ldr	r3, [r4, #0]
 800c03c:	f043 0320 	orr.w	r3, r3, #32
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	4833      	ldr	r0, [pc, #204]	; (800c110 <_printf_i+0x240>)
 800c044:	2778      	movs	r7, #120	; 0x78
 800c046:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c04a:	6823      	ldr	r3, [r4, #0]
 800c04c:	6829      	ldr	r1, [r5, #0]
 800c04e:	061f      	lsls	r7, r3, #24
 800c050:	f851 6b04 	ldr.w	r6, [r1], #4
 800c054:	d402      	bmi.n	800c05c <_printf_i+0x18c>
 800c056:	065f      	lsls	r7, r3, #25
 800c058:	bf48      	it	mi
 800c05a:	b2b6      	uxthmi	r6, r6
 800c05c:	07df      	lsls	r7, r3, #31
 800c05e:	bf48      	it	mi
 800c060:	f043 0320 	orrmi.w	r3, r3, #32
 800c064:	6029      	str	r1, [r5, #0]
 800c066:	bf48      	it	mi
 800c068:	6023      	strmi	r3, [r4, #0]
 800c06a:	b91e      	cbnz	r6, 800c074 <_printf_i+0x1a4>
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	f023 0320 	bic.w	r3, r3, #32
 800c072:	6023      	str	r3, [r4, #0]
 800c074:	2310      	movs	r3, #16
 800c076:	e7a7      	b.n	800bfc8 <_printf_i+0xf8>
 800c078:	4824      	ldr	r0, [pc, #144]	; (800c10c <_printf_i+0x23c>)
 800c07a:	e7e4      	b.n	800c046 <_printf_i+0x176>
 800c07c:	4615      	mov	r5, r2
 800c07e:	e7bd      	b.n	800bffc <_printf_i+0x12c>
 800c080:	682b      	ldr	r3, [r5, #0]
 800c082:	6826      	ldr	r6, [r4, #0]
 800c084:	6961      	ldr	r1, [r4, #20]
 800c086:	1d18      	adds	r0, r3, #4
 800c088:	6028      	str	r0, [r5, #0]
 800c08a:	0635      	lsls	r5, r6, #24
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	d501      	bpl.n	800c094 <_printf_i+0x1c4>
 800c090:	6019      	str	r1, [r3, #0]
 800c092:	e002      	b.n	800c09a <_printf_i+0x1ca>
 800c094:	0670      	lsls	r0, r6, #25
 800c096:	d5fb      	bpl.n	800c090 <_printf_i+0x1c0>
 800c098:	8019      	strh	r1, [r3, #0]
 800c09a:	2300      	movs	r3, #0
 800c09c:	6123      	str	r3, [r4, #16]
 800c09e:	4615      	mov	r5, r2
 800c0a0:	e7bc      	b.n	800c01c <_printf_i+0x14c>
 800c0a2:	682b      	ldr	r3, [r5, #0]
 800c0a4:	1d1a      	adds	r2, r3, #4
 800c0a6:	602a      	str	r2, [r5, #0]
 800c0a8:	681d      	ldr	r5, [r3, #0]
 800c0aa:	6862      	ldr	r2, [r4, #4]
 800c0ac:	2100      	movs	r1, #0
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	f7f4 f91e 	bl	80002f0 <memchr>
 800c0b4:	b108      	cbz	r0, 800c0ba <_printf_i+0x1ea>
 800c0b6:	1b40      	subs	r0, r0, r5
 800c0b8:	6060      	str	r0, [r4, #4]
 800c0ba:	6863      	ldr	r3, [r4, #4]
 800c0bc:	6123      	str	r3, [r4, #16]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0c4:	e7aa      	b.n	800c01c <_printf_i+0x14c>
 800c0c6:	6923      	ldr	r3, [r4, #16]
 800c0c8:	462a      	mov	r2, r5
 800c0ca:	4649      	mov	r1, r9
 800c0cc:	4640      	mov	r0, r8
 800c0ce:	47d0      	blx	sl
 800c0d0:	3001      	adds	r0, #1
 800c0d2:	d0ad      	beq.n	800c030 <_printf_i+0x160>
 800c0d4:	6823      	ldr	r3, [r4, #0]
 800c0d6:	079b      	lsls	r3, r3, #30
 800c0d8:	d413      	bmi.n	800c102 <_printf_i+0x232>
 800c0da:	68e0      	ldr	r0, [r4, #12]
 800c0dc:	9b03      	ldr	r3, [sp, #12]
 800c0de:	4298      	cmp	r0, r3
 800c0e0:	bfb8      	it	lt
 800c0e2:	4618      	movlt	r0, r3
 800c0e4:	e7a6      	b.n	800c034 <_printf_i+0x164>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	4632      	mov	r2, r6
 800c0ea:	4649      	mov	r1, r9
 800c0ec:	4640      	mov	r0, r8
 800c0ee:	47d0      	blx	sl
 800c0f0:	3001      	adds	r0, #1
 800c0f2:	d09d      	beq.n	800c030 <_printf_i+0x160>
 800c0f4:	3501      	adds	r5, #1
 800c0f6:	68e3      	ldr	r3, [r4, #12]
 800c0f8:	9903      	ldr	r1, [sp, #12]
 800c0fa:	1a5b      	subs	r3, r3, r1
 800c0fc:	42ab      	cmp	r3, r5
 800c0fe:	dcf2      	bgt.n	800c0e6 <_printf_i+0x216>
 800c100:	e7eb      	b.n	800c0da <_printf_i+0x20a>
 800c102:	2500      	movs	r5, #0
 800c104:	f104 0619 	add.w	r6, r4, #25
 800c108:	e7f5      	b.n	800c0f6 <_printf_i+0x226>
 800c10a:	bf00      	nop
 800c10c:	0800e5c2 	.word	0x0800e5c2
 800c110:	0800e5d3 	.word	0x0800e5d3

0800c114 <std>:
 800c114:	2300      	movs	r3, #0
 800c116:	b510      	push	{r4, lr}
 800c118:	4604      	mov	r4, r0
 800c11a:	e9c0 3300 	strd	r3, r3, [r0]
 800c11e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c122:	6083      	str	r3, [r0, #8]
 800c124:	8181      	strh	r1, [r0, #12]
 800c126:	6643      	str	r3, [r0, #100]	; 0x64
 800c128:	81c2      	strh	r2, [r0, #14]
 800c12a:	6183      	str	r3, [r0, #24]
 800c12c:	4619      	mov	r1, r3
 800c12e:	2208      	movs	r2, #8
 800c130:	305c      	adds	r0, #92	; 0x5c
 800c132:	f000 fa17 	bl	800c564 <memset>
 800c136:	4b0d      	ldr	r3, [pc, #52]	; (800c16c <std+0x58>)
 800c138:	6263      	str	r3, [r4, #36]	; 0x24
 800c13a:	4b0d      	ldr	r3, [pc, #52]	; (800c170 <std+0x5c>)
 800c13c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c13e:	4b0d      	ldr	r3, [pc, #52]	; (800c174 <std+0x60>)
 800c140:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c142:	4b0d      	ldr	r3, [pc, #52]	; (800c178 <std+0x64>)
 800c144:	6323      	str	r3, [r4, #48]	; 0x30
 800c146:	4b0d      	ldr	r3, [pc, #52]	; (800c17c <std+0x68>)
 800c148:	6224      	str	r4, [r4, #32]
 800c14a:	429c      	cmp	r4, r3
 800c14c:	d006      	beq.n	800c15c <std+0x48>
 800c14e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c152:	4294      	cmp	r4, r2
 800c154:	d002      	beq.n	800c15c <std+0x48>
 800c156:	33d0      	adds	r3, #208	; 0xd0
 800c158:	429c      	cmp	r4, r3
 800c15a:	d105      	bne.n	800c168 <std+0x54>
 800c15c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c164:	f000 ba7a 	b.w	800c65c <__retarget_lock_init_recursive>
 800c168:	bd10      	pop	{r4, pc}
 800c16a:	bf00      	nop
 800c16c:	0800c3b5 	.word	0x0800c3b5
 800c170:	0800c3d7 	.word	0x0800c3d7
 800c174:	0800c40f 	.word	0x0800c40f
 800c178:	0800c433 	.word	0x0800c433
 800c17c:	24061ee0 	.word	0x24061ee0

0800c180 <stdio_exit_handler>:
 800c180:	4a02      	ldr	r2, [pc, #8]	; (800c18c <stdio_exit_handler+0xc>)
 800c182:	4903      	ldr	r1, [pc, #12]	; (800c190 <stdio_exit_handler+0x10>)
 800c184:	4803      	ldr	r0, [pc, #12]	; (800c194 <stdio_exit_handler+0x14>)
 800c186:	f000 b869 	b.w	800c25c <_fwalk_sglue>
 800c18a:	bf00      	nop
 800c18c:	24000018 	.word	0x24000018
 800c190:	0800e18d 	.word	0x0800e18d
 800c194:	24000024 	.word	0x24000024

0800c198 <cleanup_stdio>:
 800c198:	6841      	ldr	r1, [r0, #4]
 800c19a:	4b0c      	ldr	r3, [pc, #48]	; (800c1cc <cleanup_stdio+0x34>)
 800c19c:	4299      	cmp	r1, r3
 800c19e:	b510      	push	{r4, lr}
 800c1a0:	4604      	mov	r4, r0
 800c1a2:	d001      	beq.n	800c1a8 <cleanup_stdio+0x10>
 800c1a4:	f001 fff2 	bl	800e18c <_fflush_r>
 800c1a8:	68a1      	ldr	r1, [r4, #8]
 800c1aa:	4b09      	ldr	r3, [pc, #36]	; (800c1d0 <cleanup_stdio+0x38>)
 800c1ac:	4299      	cmp	r1, r3
 800c1ae:	d002      	beq.n	800c1b6 <cleanup_stdio+0x1e>
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f001 ffeb 	bl	800e18c <_fflush_r>
 800c1b6:	68e1      	ldr	r1, [r4, #12]
 800c1b8:	4b06      	ldr	r3, [pc, #24]	; (800c1d4 <cleanup_stdio+0x3c>)
 800c1ba:	4299      	cmp	r1, r3
 800c1bc:	d004      	beq.n	800c1c8 <cleanup_stdio+0x30>
 800c1be:	4620      	mov	r0, r4
 800c1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1c4:	f001 bfe2 	b.w	800e18c <_fflush_r>
 800c1c8:	bd10      	pop	{r4, pc}
 800c1ca:	bf00      	nop
 800c1cc:	24061ee0 	.word	0x24061ee0
 800c1d0:	24061f48 	.word	0x24061f48
 800c1d4:	24061fb0 	.word	0x24061fb0

0800c1d8 <global_stdio_init.part.0>:
 800c1d8:	b510      	push	{r4, lr}
 800c1da:	4b0b      	ldr	r3, [pc, #44]	; (800c208 <global_stdio_init.part.0+0x30>)
 800c1dc:	4c0b      	ldr	r4, [pc, #44]	; (800c20c <global_stdio_init.part.0+0x34>)
 800c1de:	4a0c      	ldr	r2, [pc, #48]	; (800c210 <global_stdio_init.part.0+0x38>)
 800c1e0:	601a      	str	r2, [r3, #0]
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	2104      	movs	r1, #4
 800c1e8:	f7ff ff94 	bl	800c114 <std>
 800c1ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	2109      	movs	r1, #9
 800c1f4:	f7ff ff8e 	bl	800c114 <std>
 800c1f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c1fc:	2202      	movs	r2, #2
 800c1fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c202:	2112      	movs	r1, #18
 800c204:	f7ff bf86 	b.w	800c114 <std>
 800c208:	24062018 	.word	0x24062018
 800c20c:	24061ee0 	.word	0x24061ee0
 800c210:	0800c181 	.word	0x0800c181

0800c214 <__sfp_lock_acquire>:
 800c214:	4801      	ldr	r0, [pc, #4]	; (800c21c <__sfp_lock_acquire+0x8>)
 800c216:	f000 ba22 	b.w	800c65e <__retarget_lock_acquire_recursive>
 800c21a:	bf00      	nop
 800c21c:	24062021 	.word	0x24062021

0800c220 <__sfp_lock_release>:
 800c220:	4801      	ldr	r0, [pc, #4]	; (800c228 <__sfp_lock_release+0x8>)
 800c222:	f000 ba1d 	b.w	800c660 <__retarget_lock_release_recursive>
 800c226:	bf00      	nop
 800c228:	24062021 	.word	0x24062021

0800c22c <__sinit>:
 800c22c:	b510      	push	{r4, lr}
 800c22e:	4604      	mov	r4, r0
 800c230:	f7ff fff0 	bl	800c214 <__sfp_lock_acquire>
 800c234:	6a23      	ldr	r3, [r4, #32]
 800c236:	b11b      	cbz	r3, 800c240 <__sinit+0x14>
 800c238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c23c:	f7ff bff0 	b.w	800c220 <__sfp_lock_release>
 800c240:	4b04      	ldr	r3, [pc, #16]	; (800c254 <__sinit+0x28>)
 800c242:	6223      	str	r3, [r4, #32]
 800c244:	4b04      	ldr	r3, [pc, #16]	; (800c258 <__sinit+0x2c>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d1f5      	bne.n	800c238 <__sinit+0xc>
 800c24c:	f7ff ffc4 	bl	800c1d8 <global_stdio_init.part.0>
 800c250:	e7f2      	b.n	800c238 <__sinit+0xc>
 800c252:	bf00      	nop
 800c254:	0800c199 	.word	0x0800c199
 800c258:	24062018 	.word	0x24062018

0800c25c <_fwalk_sglue>:
 800c25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c260:	4607      	mov	r7, r0
 800c262:	4688      	mov	r8, r1
 800c264:	4614      	mov	r4, r2
 800c266:	2600      	movs	r6, #0
 800c268:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c26c:	f1b9 0901 	subs.w	r9, r9, #1
 800c270:	d505      	bpl.n	800c27e <_fwalk_sglue+0x22>
 800c272:	6824      	ldr	r4, [r4, #0]
 800c274:	2c00      	cmp	r4, #0
 800c276:	d1f7      	bne.n	800c268 <_fwalk_sglue+0xc>
 800c278:	4630      	mov	r0, r6
 800c27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c27e:	89ab      	ldrh	r3, [r5, #12]
 800c280:	2b01      	cmp	r3, #1
 800c282:	d907      	bls.n	800c294 <_fwalk_sglue+0x38>
 800c284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c288:	3301      	adds	r3, #1
 800c28a:	d003      	beq.n	800c294 <_fwalk_sglue+0x38>
 800c28c:	4629      	mov	r1, r5
 800c28e:	4638      	mov	r0, r7
 800c290:	47c0      	blx	r8
 800c292:	4306      	orrs	r6, r0
 800c294:	3568      	adds	r5, #104	; 0x68
 800c296:	e7e9      	b.n	800c26c <_fwalk_sglue+0x10>

0800c298 <iprintf>:
 800c298:	b40f      	push	{r0, r1, r2, r3}
 800c29a:	b507      	push	{r0, r1, r2, lr}
 800c29c:	4906      	ldr	r1, [pc, #24]	; (800c2b8 <iprintf+0x20>)
 800c29e:	ab04      	add	r3, sp, #16
 800c2a0:	6808      	ldr	r0, [r1, #0]
 800c2a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2a6:	6881      	ldr	r1, [r0, #8]
 800c2a8:	9301      	str	r3, [sp, #4]
 800c2aa:	f001 fdcf 	bl	800de4c <_vfiprintf_r>
 800c2ae:	b003      	add	sp, #12
 800c2b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2b4:	b004      	add	sp, #16
 800c2b6:	4770      	bx	lr
 800c2b8:	24000070 	.word	0x24000070

0800c2bc <_puts_r>:
 800c2bc:	6a03      	ldr	r3, [r0, #32]
 800c2be:	b570      	push	{r4, r5, r6, lr}
 800c2c0:	6884      	ldr	r4, [r0, #8]
 800c2c2:	4605      	mov	r5, r0
 800c2c4:	460e      	mov	r6, r1
 800c2c6:	b90b      	cbnz	r3, 800c2cc <_puts_r+0x10>
 800c2c8:	f7ff ffb0 	bl	800c22c <__sinit>
 800c2cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2ce:	07db      	lsls	r3, r3, #31
 800c2d0:	d405      	bmi.n	800c2de <_puts_r+0x22>
 800c2d2:	89a3      	ldrh	r3, [r4, #12]
 800c2d4:	0598      	lsls	r0, r3, #22
 800c2d6:	d402      	bmi.n	800c2de <_puts_r+0x22>
 800c2d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2da:	f000 f9c0 	bl	800c65e <__retarget_lock_acquire_recursive>
 800c2de:	89a3      	ldrh	r3, [r4, #12]
 800c2e0:	0719      	lsls	r1, r3, #28
 800c2e2:	d513      	bpl.n	800c30c <_puts_r+0x50>
 800c2e4:	6923      	ldr	r3, [r4, #16]
 800c2e6:	b18b      	cbz	r3, 800c30c <_puts_r+0x50>
 800c2e8:	3e01      	subs	r6, #1
 800c2ea:	68a3      	ldr	r3, [r4, #8]
 800c2ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	60a3      	str	r3, [r4, #8]
 800c2f4:	b9e9      	cbnz	r1, 800c332 <_puts_r+0x76>
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	da2e      	bge.n	800c358 <_puts_r+0x9c>
 800c2fa:	4622      	mov	r2, r4
 800c2fc:	210a      	movs	r1, #10
 800c2fe:	4628      	mov	r0, r5
 800c300:	f000 f89b 	bl	800c43a <__swbuf_r>
 800c304:	3001      	adds	r0, #1
 800c306:	d007      	beq.n	800c318 <_puts_r+0x5c>
 800c308:	250a      	movs	r5, #10
 800c30a:	e007      	b.n	800c31c <_puts_r+0x60>
 800c30c:	4621      	mov	r1, r4
 800c30e:	4628      	mov	r0, r5
 800c310:	f000 f8d0 	bl	800c4b4 <__swsetup_r>
 800c314:	2800      	cmp	r0, #0
 800c316:	d0e7      	beq.n	800c2e8 <_puts_r+0x2c>
 800c318:	f04f 35ff 	mov.w	r5, #4294967295
 800c31c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c31e:	07da      	lsls	r2, r3, #31
 800c320:	d405      	bmi.n	800c32e <_puts_r+0x72>
 800c322:	89a3      	ldrh	r3, [r4, #12]
 800c324:	059b      	lsls	r3, r3, #22
 800c326:	d402      	bmi.n	800c32e <_puts_r+0x72>
 800c328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c32a:	f000 f999 	bl	800c660 <__retarget_lock_release_recursive>
 800c32e:	4628      	mov	r0, r5
 800c330:	bd70      	pop	{r4, r5, r6, pc}
 800c332:	2b00      	cmp	r3, #0
 800c334:	da04      	bge.n	800c340 <_puts_r+0x84>
 800c336:	69a2      	ldr	r2, [r4, #24]
 800c338:	429a      	cmp	r2, r3
 800c33a:	dc06      	bgt.n	800c34a <_puts_r+0x8e>
 800c33c:	290a      	cmp	r1, #10
 800c33e:	d004      	beq.n	800c34a <_puts_r+0x8e>
 800c340:	6823      	ldr	r3, [r4, #0]
 800c342:	1c5a      	adds	r2, r3, #1
 800c344:	6022      	str	r2, [r4, #0]
 800c346:	7019      	strb	r1, [r3, #0]
 800c348:	e7cf      	b.n	800c2ea <_puts_r+0x2e>
 800c34a:	4622      	mov	r2, r4
 800c34c:	4628      	mov	r0, r5
 800c34e:	f000 f874 	bl	800c43a <__swbuf_r>
 800c352:	3001      	adds	r0, #1
 800c354:	d1c9      	bne.n	800c2ea <_puts_r+0x2e>
 800c356:	e7df      	b.n	800c318 <_puts_r+0x5c>
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	250a      	movs	r5, #10
 800c35c:	1c5a      	adds	r2, r3, #1
 800c35e:	6022      	str	r2, [r4, #0]
 800c360:	701d      	strb	r5, [r3, #0]
 800c362:	e7db      	b.n	800c31c <_puts_r+0x60>

0800c364 <puts>:
 800c364:	4b02      	ldr	r3, [pc, #8]	; (800c370 <puts+0xc>)
 800c366:	4601      	mov	r1, r0
 800c368:	6818      	ldr	r0, [r3, #0]
 800c36a:	f7ff bfa7 	b.w	800c2bc <_puts_r>
 800c36e:	bf00      	nop
 800c370:	24000070 	.word	0x24000070

0800c374 <siprintf>:
 800c374:	b40e      	push	{r1, r2, r3}
 800c376:	b500      	push	{lr}
 800c378:	b09c      	sub	sp, #112	; 0x70
 800c37a:	ab1d      	add	r3, sp, #116	; 0x74
 800c37c:	9002      	str	r0, [sp, #8]
 800c37e:	9006      	str	r0, [sp, #24]
 800c380:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c384:	4809      	ldr	r0, [pc, #36]	; (800c3ac <siprintf+0x38>)
 800c386:	9107      	str	r1, [sp, #28]
 800c388:	9104      	str	r1, [sp, #16]
 800c38a:	4909      	ldr	r1, [pc, #36]	; (800c3b0 <siprintf+0x3c>)
 800c38c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c390:	9105      	str	r1, [sp, #20]
 800c392:	6800      	ldr	r0, [r0, #0]
 800c394:	9301      	str	r3, [sp, #4]
 800c396:	a902      	add	r1, sp, #8
 800c398:	f001 fc30 	bl	800dbfc <_svfiprintf_r>
 800c39c:	9b02      	ldr	r3, [sp, #8]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	701a      	strb	r2, [r3, #0]
 800c3a2:	b01c      	add	sp, #112	; 0x70
 800c3a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3a8:	b003      	add	sp, #12
 800c3aa:	4770      	bx	lr
 800c3ac:	24000070 	.word	0x24000070
 800c3b0:	ffff0208 	.word	0xffff0208

0800c3b4 <__sread>:
 800c3b4:	b510      	push	{r4, lr}
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3bc:	f000 f900 	bl	800c5c0 <_read_r>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	bfab      	itete	ge
 800c3c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c3c6:	89a3      	ldrhlt	r3, [r4, #12]
 800c3c8:	181b      	addge	r3, r3, r0
 800c3ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3ce:	bfac      	ite	ge
 800c3d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3d2:	81a3      	strhlt	r3, [r4, #12]
 800c3d4:	bd10      	pop	{r4, pc}

0800c3d6 <__swrite>:
 800c3d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3da:	461f      	mov	r7, r3
 800c3dc:	898b      	ldrh	r3, [r1, #12]
 800c3de:	05db      	lsls	r3, r3, #23
 800c3e0:	4605      	mov	r5, r0
 800c3e2:	460c      	mov	r4, r1
 800c3e4:	4616      	mov	r6, r2
 800c3e6:	d505      	bpl.n	800c3f4 <__swrite+0x1e>
 800c3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ec:	2302      	movs	r3, #2
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	f000 f8d4 	bl	800c59c <_lseek_r>
 800c3f4:	89a3      	ldrh	r3, [r4, #12]
 800c3f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3fe:	81a3      	strh	r3, [r4, #12]
 800c400:	4632      	mov	r2, r6
 800c402:	463b      	mov	r3, r7
 800c404:	4628      	mov	r0, r5
 800c406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c40a:	f000 b8eb 	b.w	800c5e4 <_write_r>

0800c40e <__sseek>:
 800c40e:	b510      	push	{r4, lr}
 800c410:	460c      	mov	r4, r1
 800c412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c416:	f000 f8c1 	bl	800c59c <_lseek_r>
 800c41a:	1c43      	adds	r3, r0, #1
 800c41c:	89a3      	ldrh	r3, [r4, #12]
 800c41e:	bf15      	itete	ne
 800c420:	6560      	strne	r0, [r4, #84]	; 0x54
 800c422:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c426:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c42a:	81a3      	strheq	r3, [r4, #12]
 800c42c:	bf18      	it	ne
 800c42e:	81a3      	strhne	r3, [r4, #12]
 800c430:	bd10      	pop	{r4, pc}

0800c432 <__sclose>:
 800c432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c436:	f000 b8a1 	b.w	800c57c <_close_r>

0800c43a <__swbuf_r>:
 800c43a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c43c:	460e      	mov	r6, r1
 800c43e:	4614      	mov	r4, r2
 800c440:	4605      	mov	r5, r0
 800c442:	b118      	cbz	r0, 800c44c <__swbuf_r+0x12>
 800c444:	6a03      	ldr	r3, [r0, #32]
 800c446:	b90b      	cbnz	r3, 800c44c <__swbuf_r+0x12>
 800c448:	f7ff fef0 	bl	800c22c <__sinit>
 800c44c:	69a3      	ldr	r3, [r4, #24]
 800c44e:	60a3      	str	r3, [r4, #8]
 800c450:	89a3      	ldrh	r3, [r4, #12]
 800c452:	071a      	lsls	r2, r3, #28
 800c454:	d525      	bpl.n	800c4a2 <__swbuf_r+0x68>
 800c456:	6923      	ldr	r3, [r4, #16]
 800c458:	b31b      	cbz	r3, 800c4a2 <__swbuf_r+0x68>
 800c45a:	6823      	ldr	r3, [r4, #0]
 800c45c:	6922      	ldr	r2, [r4, #16]
 800c45e:	1a98      	subs	r0, r3, r2
 800c460:	6963      	ldr	r3, [r4, #20]
 800c462:	b2f6      	uxtb	r6, r6
 800c464:	4283      	cmp	r3, r0
 800c466:	4637      	mov	r7, r6
 800c468:	dc04      	bgt.n	800c474 <__swbuf_r+0x3a>
 800c46a:	4621      	mov	r1, r4
 800c46c:	4628      	mov	r0, r5
 800c46e:	f001 fe8d 	bl	800e18c <_fflush_r>
 800c472:	b9e0      	cbnz	r0, 800c4ae <__swbuf_r+0x74>
 800c474:	68a3      	ldr	r3, [r4, #8]
 800c476:	3b01      	subs	r3, #1
 800c478:	60a3      	str	r3, [r4, #8]
 800c47a:	6823      	ldr	r3, [r4, #0]
 800c47c:	1c5a      	adds	r2, r3, #1
 800c47e:	6022      	str	r2, [r4, #0]
 800c480:	701e      	strb	r6, [r3, #0]
 800c482:	6962      	ldr	r2, [r4, #20]
 800c484:	1c43      	adds	r3, r0, #1
 800c486:	429a      	cmp	r2, r3
 800c488:	d004      	beq.n	800c494 <__swbuf_r+0x5a>
 800c48a:	89a3      	ldrh	r3, [r4, #12]
 800c48c:	07db      	lsls	r3, r3, #31
 800c48e:	d506      	bpl.n	800c49e <__swbuf_r+0x64>
 800c490:	2e0a      	cmp	r6, #10
 800c492:	d104      	bne.n	800c49e <__swbuf_r+0x64>
 800c494:	4621      	mov	r1, r4
 800c496:	4628      	mov	r0, r5
 800c498:	f001 fe78 	bl	800e18c <_fflush_r>
 800c49c:	b938      	cbnz	r0, 800c4ae <__swbuf_r+0x74>
 800c49e:	4638      	mov	r0, r7
 800c4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4a2:	4621      	mov	r1, r4
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	f000 f805 	bl	800c4b4 <__swsetup_r>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	d0d5      	beq.n	800c45a <__swbuf_r+0x20>
 800c4ae:	f04f 37ff 	mov.w	r7, #4294967295
 800c4b2:	e7f4      	b.n	800c49e <__swbuf_r+0x64>

0800c4b4 <__swsetup_r>:
 800c4b4:	b538      	push	{r3, r4, r5, lr}
 800c4b6:	4b2a      	ldr	r3, [pc, #168]	; (800c560 <__swsetup_r+0xac>)
 800c4b8:	4605      	mov	r5, r0
 800c4ba:	6818      	ldr	r0, [r3, #0]
 800c4bc:	460c      	mov	r4, r1
 800c4be:	b118      	cbz	r0, 800c4c8 <__swsetup_r+0x14>
 800c4c0:	6a03      	ldr	r3, [r0, #32]
 800c4c2:	b90b      	cbnz	r3, 800c4c8 <__swsetup_r+0x14>
 800c4c4:	f7ff feb2 	bl	800c22c <__sinit>
 800c4c8:	89a3      	ldrh	r3, [r4, #12]
 800c4ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4ce:	0718      	lsls	r0, r3, #28
 800c4d0:	d422      	bmi.n	800c518 <__swsetup_r+0x64>
 800c4d2:	06d9      	lsls	r1, r3, #27
 800c4d4:	d407      	bmi.n	800c4e6 <__swsetup_r+0x32>
 800c4d6:	2309      	movs	r3, #9
 800c4d8:	602b      	str	r3, [r5, #0]
 800c4da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c4de:	81a3      	strh	r3, [r4, #12]
 800c4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e4:	e034      	b.n	800c550 <__swsetup_r+0x9c>
 800c4e6:	0758      	lsls	r0, r3, #29
 800c4e8:	d512      	bpl.n	800c510 <__swsetup_r+0x5c>
 800c4ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4ec:	b141      	cbz	r1, 800c500 <__swsetup_r+0x4c>
 800c4ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4f2:	4299      	cmp	r1, r3
 800c4f4:	d002      	beq.n	800c4fc <__swsetup_r+0x48>
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	f000 feaa 	bl	800d250 <_free_r>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	6363      	str	r3, [r4, #52]	; 0x34
 800c500:	89a3      	ldrh	r3, [r4, #12]
 800c502:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c506:	81a3      	strh	r3, [r4, #12]
 800c508:	2300      	movs	r3, #0
 800c50a:	6063      	str	r3, [r4, #4]
 800c50c:	6923      	ldr	r3, [r4, #16]
 800c50e:	6023      	str	r3, [r4, #0]
 800c510:	89a3      	ldrh	r3, [r4, #12]
 800c512:	f043 0308 	orr.w	r3, r3, #8
 800c516:	81a3      	strh	r3, [r4, #12]
 800c518:	6923      	ldr	r3, [r4, #16]
 800c51a:	b94b      	cbnz	r3, 800c530 <__swsetup_r+0x7c>
 800c51c:	89a3      	ldrh	r3, [r4, #12]
 800c51e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c526:	d003      	beq.n	800c530 <__swsetup_r+0x7c>
 800c528:	4621      	mov	r1, r4
 800c52a:	4628      	mov	r0, r5
 800c52c:	f001 fe7c 	bl	800e228 <__smakebuf_r>
 800c530:	89a0      	ldrh	r0, [r4, #12]
 800c532:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c536:	f010 0301 	ands.w	r3, r0, #1
 800c53a:	d00a      	beq.n	800c552 <__swsetup_r+0x9e>
 800c53c:	2300      	movs	r3, #0
 800c53e:	60a3      	str	r3, [r4, #8]
 800c540:	6963      	ldr	r3, [r4, #20]
 800c542:	425b      	negs	r3, r3
 800c544:	61a3      	str	r3, [r4, #24]
 800c546:	6923      	ldr	r3, [r4, #16]
 800c548:	b943      	cbnz	r3, 800c55c <__swsetup_r+0xa8>
 800c54a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c54e:	d1c4      	bne.n	800c4da <__swsetup_r+0x26>
 800c550:	bd38      	pop	{r3, r4, r5, pc}
 800c552:	0781      	lsls	r1, r0, #30
 800c554:	bf58      	it	pl
 800c556:	6963      	ldrpl	r3, [r4, #20]
 800c558:	60a3      	str	r3, [r4, #8]
 800c55a:	e7f4      	b.n	800c546 <__swsetup_r+0x92>
 800c55c:	2000      	movs	r0, #0
 800c55e:	e7f7      	b.n	800c550 <__swsetup_r+0x9c>
 800c560:	24000070 	.word	0x24000070

0800c564 <memset>:
 800c564:	4402      	add	r2, r0
 800c566:	4603      	mov	r3, r0
 800c568:	4293      	cmp	r3, r2
 800c56a:	d100      	bne.n	800c56e <memset+0xa>
 800c56c:	4770      	bx	lr
 800c56e:	f803 1b01 	strb.w	r1, [r3], #1
 800c572:	e7f9      	b.n	800c568 <memset+0x4>

0800c574 <_localeconv_r>:
 800c574:	4800      	ldr	r0, [pc, #0]	; (800c578 <_localeconv_r+0x4>)
 800c576:	4770      	bx	lr
 800c578:	24000164 	.word	0x24000164

0800c57c <_close_r>:
 800c57c:	b538      	push	{r3, r4, r5, lr}
 800c57e:	4d06      	ldr	r5, [pc, #24]	; (800c598 <_close_r+0x1c>)
 800c580:	2300      	movs	r3, #0
 800c582:	4604      	mov	r4, r0
 800c584:	4608      	mov	r0, r1
 800c586:	602b      	str	r3, [r5, #0]
 800c588:	f7f5 f99d 	bl	80018c6 <_close>
 800c58c:	1c43      	adds	r3, r0, #1
 800c58e:	d102      	bne.n	800c596 <_close_r+0x1a>
 800c590:	682b      	ldr	r3, [r5, #0]
 800c592:	b103      	cbz	r3, 800c596 <_close_r+0x1a>
 800c594:	6023      	str	r3, [r4, #0]
 800c596:	bd38      	pop	{r3, r4, r5, pc}
 800c598:	2406201c 	.word	0x2406201c

0800c59c <_lseek_r>:
 800c59c:	b538      	push	{r3, r4, r5, lr}
 800c59e:	4d07      	ldr	r5, [pc, #28]	; (800c5bc <_lseek_r+0x20>)
 800c5a0:	4604      	mov	r4, r0
 800c5a2:	4608      	mov	r0, r1
 800c5a4:	4611      	mov	r1, r2
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	602a      	str	r2, [r5, #0]
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	f7f5 f9b2 	bl	8001914 <_lseek>
 800c5b0:	1c43      	adds	r3, r0, #1
 800c5b2:	d102      	bne.n	800c5ba <_lseek_r+0x1e>
 800c5b4:	682b      	ldr	r3, [r5, #0]
 800c5b6:	b103      	cbz	r3, 800c5ba <_lseek_r+0x1e>
 800c5b8:	6023      	str	r3, [r4, #0]
 800c5ba:	bd38      	pop	{r3, r4, r5, pc}
 800c5bc:	2406201c 	.word	0x2406201c

0800c5c0 <_read_r>:
 800c5c0:	b538      	push	{r3, r4, r5, lr}
 800c5c2:	4d07      	ldr	r5, [pc, #28]	; (800c5e0 <_read_r+0x20>)
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	4608      	mov	r0, r1
 800c5c8:	4611      	mov	r1, r2
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	602a      	str	r2, [r5, #0]
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	f7f5 f940 	bl	8001854 <_read>
 800c5d4:	1c43      	adds	r3, r0, #1
 800c5d6:	d102      	bne.n	800c5de <_read_r+0x1e>
 800c5d8:	682b      	ldr	r3, [r5, #0]
 800c5da:	b103      	cbz	r3, 800c5de <_read_r+0x1e>
 800c5dc:	6023      	str	r3, [r4, #0]
 800c5de:	bd38      	pop	{r3, r4, r5, pc}
 800c5e0:	2406201c 	.word	0x2406201c

0800c5e4 <_write_r>:
 800c5e4:	b538      	push	{r3, r4, r5, lr}
 800c5e6:	4d07      	ldr	r5, [pc, #28]	; (800c604 <_write_r+0x20>)
 800c5e8:	4604      	mov	r4, r0
 800c5ea:	4608      	mov	r0, r1
 800c5ec:	4611      	mov	r1, r2
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	602a      	str	r2, [r5, #0]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	f7f5 f94b 	bl	800188e <_write>
 800c5f8:	1c43      	adds	r3, r0, #1
 800c5fa:	d102      	bne.n	800c602 <_write_r+0x1e>
 800c5fc:	682b      	ldr	r3, [r5, #0]
 800c5fe:	b103      	cbz	r3, 800c602 <_write_r+0x1e>
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	bd38      	pop	{r3, r4, r5, pc}
 800c604:	2406201c 	.word	0x2406201c

0800c608 <__errno>:
 800c608:	4b01      	ldr	r3, [pc, #4]	; (800c610 <__errno+0x8>)
 800c60a:	6818      	ldr	r0, [r3, #0]
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop
 800c610:	24000070 	.word	0x24000070

0800c614 <__libc_init_array>:
 800c614:	b570      	push	{r4, r5, r6, lr}
 800c616:	4d0d      	ldr	r5, [pc, #52]	; (800c64c <__libc_init_array+0x38>)
 800c618:	4c0d      	ldr	r4, [pc, #52]	; (800c650 <__libc_init_array+0x3c>)
 800c61a:	1b64      	subs	r4, r4, r5
 800c61c:	10a4      	asrs	r4, r4, #2
 800c61e:	2600      	movs	r6, #0
 800c620:	42a6      	cmp	r6, r4
 800c622:	d109      	bne.n	800c638 <__libc_init_array+0x24>
 800c624:	4d0b      	ldr	r5, [pc, #44]	; (800c654 <__libc_init_array+0x40>)
 800c626:	4c0c      	ldr	r4, [pc, #48]	; (800c658 <__libc_init_array+0x44>)
 800c628:	f001 ff7c 	bl	800e524 <_init>
 800c62c:	1b64      	subs	r4, r4, r5
 800c62e:	10a4      	asrs	r4, r4, #2
 800c630:	2600      	movs	r6, #0
 800c632:	42a6      	cmp	r6, r4
 800c634:	d105      	bne.n	800c642 <__libc_init_array+0x2e>
 800c636:	bd70      	pop	{r4, r5, r6, pc}
 800c638:	f855 3b04 	ldr.w	r3, [r5], #4
 800c63c:	4798      	blx	r3
 800c63e:	3601      	adds	r6, #1
 800c640:	e7ee      	b.n	800c620 <__libc_init_array+0xc>
 800c642:	f855 3b04 	ldr.w	r3, [r5], #4
 800c646:	4798      	blx	r3
 800c648:	3601      	adds	r6, #1
 800c64a:	e7f2      	b.n	800c632 <__libc_init_array+0x1e>
 800c64c:	0800e92c 	.word	0x0800e92c
 800c650:	0800e92c 	.word	0x0800e92c
 800c654:	0800e92c 	.word	0x0800e92c
 800c658:	0800e930 	.word	0x0800e930

0800c65c <__retarget_lock_init_recursive>:
 800c65c:	4770      	bx	lr

0800c65e <__retarget_lock_acquire_recursive>:
 800c65e:	4770      	bx	lr

0800c660 <__retarget_lock_release_recursive>:
 800c660:	4770      	bx	lr

0800c662 <quorem>:
 800c662:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c666:	6903      	ldr	r3, [r0, #16]
 800c668:	690c      	ldr	r4, [r1, #16]
 800c66a:	42a3      	cmp	r3, r4
 800c66c:	4607      	mov	r7, r0
 800c66e:	db7e      	blt.n	800c76e <quorem+0x10c>
 800c670:	3c01      	subs	r4, #1
 800c672:	f101 0814 	add.w	r8, r1, #20
 800c676:	f100 0514 	add.w	r5, r0, #20
 800c67a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c67e:	9301      	str	r3, [sp, #4]
 800c680:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c684:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c688:	3301      	adds	r3, #1
 800c68a:	429a      	cmp	r2, r3
 800c68c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c690:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c694:	fbb2 f6f3 	udiv	r6, r2, r3
 800c698:	d331      	bcc.n	800c6fe <quorem+0x9c>
 800c69a:	f04f 0e00 	mov.w	lr, #0
 800c69e:	4640      	mov	r0, r8
 800c6a0:	46ac      	mov	ip, r5
 800c6a2:	46f2      	mov	sl, lr
 800c6a4:	f850 2b04 	ldr.w	r2, [r0], #4
 800c6a8:	b293      	uxth	r3, r2
 800c6aa:	fb06 e303 	mla	r3, r6, r3, lr
 800c6ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c6b2:	0c1a      	lsrs	r2, r3, #16
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	ebaa 0303 	sub.w	r3, sl, r3
 800c6ba:	f8dc a000 	ldr.w	sl, [ip]
 800c6be:	fa13 f38a 	uxtah	r3, r3, sl
 800c6c2:	fb06 220e 	mla	r2, r6, lr, r2
 800c6c6:	9300      	str	r3, [sp, #0]
 800c6c8:	9b00      	ldr	r3, [sp, #0]
 800c6ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c6ce:	b292      	uxth	r2, r2
 800c6d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c6d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6d8:	f8bd 3000 	ldrh.w	r3, [sp]
 800c6dc:	4581      	cmp	r9, r0
 800c6de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6e2:	f84c 3b04 	str.w	r3, [ip], #4
 800c6e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c6ea:	d2db      	bcs.n	800c6a4 <quorem+0x42>
 800c6ec:	f855 300b 	ldr.w	r3, [r5, fp]
 800c6f0:	b92b      	cbnz	r3, 800c6fe <quorem+0x9c>
 800c6f2:	9b01      	ldr	r3, [sp, #4]
 800c6f4:	3b04      	subs	r3, #4
 800c6f6:	429d      	cmp	r5, r3
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	d32c      	bcc.n	800c756 <quorem+0xf4>
 800c6fc:	613c      	str	r4, [r7, #16]
 800c6fe:	4638      	mov	r0, r7
 800c700:	f001 f922 	bl	800d948 <__mcmp>
 800c704:	2800      	cmp	r0, #0
 800c706:	db22      	blt.n	800c74e <quorem+0xec>
 800c708:	3601      	adds	r6, #1
 800c70a:	4629      	mov	r1, r5
 800c70c:	2000      	movs	r0, #0
 800c70e:	f858 2b04 	ldr.w	r2, [r8], #4
 800c712:	f8d1 c000 	ldr.w	ip, [r1]
 800c716:	b293      	uxth	r3, r2
 800c718:	1ac3      	subs	r3, r0, r3
 800c71a:	0c12      	lsrs	r2, r2, #16
 800c71c:	fa13 f38c 	uxtah	r3, r3, ip
 800c720:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c724:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c728:	b29b      	uxth	r3, r3
 800c72a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c72e:	45c1      	cmp	r9, r8
 800c730:	f841 3b04 	str.w	r3, [r1], #4
 800c734:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c738:	d2e9      	bcs.n	800c70e <quorem+0xac>
 800c73a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c73e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c742:	b922      	cbnz	r2, 800c74e <quorem+0xec>
 800c744:	3b04      	subs	r3, #4
 800c746:	429d      	cmp	r5, r3
 800c748:	461a      	mov	r2, r3
 800c74a:	d30a      	bcc.n	800c762 <quorem+0x100>
 800c74c:	613c      	str	r4, [r7, #16]
 800c74e:	4630      	mov	r0, r6
 800c750:	b003      	add	sp, #12
 800c752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c756:	6812      	ldr	r2, [r2, #0]
 800c758:	3b04      	subs	r3, #4
 800c75a:	2a00      	cmp	r2, #0
 800c75c:	d1ce      	bne.n	800c6fc <quorem+0x9a>
 800c75e:	3c01      	subs	r4, #1
 800c760:	e7c9      	b.n	800c6f6 <quorem+0x94>
 800c762:	6812      	ldr	r2, [r2, #0]
 800c764:	3b04      	subs	r3, #4
 800c766:	2a00      	cmp	r2, #0
 800c768:	d1f0      	bne.n	800c74c <quorem+0xea>
 800c76a:	3c01      	subs	r4, #1
 800c76c:	e7eb      	b.n	800c746 <quorem+0xe4>
 800c76e:	2000      	movs	r0, #0
 800c770:	e7ee      	b.n	800c750 <quorem+0xee>
 800c772:	0000      	movs	r0, r0
 800c774:	0000      	movs	r0, r0
	...

0800c778 <_dtoa_r>:
 800c778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77c:	ed2d 8b02 	vpush	{d8}
 800c780:	69c5      	ldr	r5, [r0, #28]
 800c782:	b091      	sub	sp, #68	; 0x44
 800c784:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c788:	ec59 8b10 	vmov	r8, r9, d0
 800c78c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c78e:	9106      	str	r1, [sp, #24]
 800c790:	4606      	mov	r6, r0
 800c792:	9208      	str	r2, [sp, #32]
 800c794:	930c      	str	r3, [sp, #48]	; 0x30
 800c796:	b975      	cbnz	r5, 800c7b6 <_dtoa_r+0x3e>
 800c798:	2010      	movs	r0, #16
 800c79a:	f000 fda5 	bl	800d2e8 <malloc>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	61f0      	str	r0, [r6, #28]
 800c7a2:	b920      	cbnz	r0, 800c7ae <_dtoa_r+0x36>
 800c7a4:	4ba6      	ldr	r3, [pc, #664]	; (800ca40 <_dtoa_r+0x2c8>)
 800c7a6:	21ef      	movs	r1, #239	; 0xef
 800c7a8:	48a6      	ldr	r0, [pc, #664]	; (800ca44 <_dtoa_r+0x2cc>)
 800c7aa:	f001 fdd3 	bl	800e354 <__assert_func>
 800c7ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c7b2:	6005      	str	r5, [r0, #0]
 800c7b4:	60c5      	str	r5, [r0, #12]
 800c7b6:	69f3      	ldr	r3, [r6, #28]
 800c7b8:	6819      	ldr	r1, [r3, #0]
 800c7ba:	b151      	cbz	r1, 800c7d2 <_dtoa_r+0x5a>
 800c7bc:	685a      	ldr	r2, [r3, #4]
 800c7be:	604a      	str	r2, [r1, #4]
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	4093      	lsls	r3, r2
 800c7c4:	608b      	str	r3, [r1, #8]
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	f000 fe82 	bl	800d4d0 <_Bfree>
 800c7cc:	69f3      	ldr	r3, [r6, #28]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	601a      	str	r2, [r3, #0]
 800c7d2:	f1b9 0300 	subs.w	r3, r9, #0
 800c7d6:	bfbb      	ittet	lt
 800c7d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c7dc:	9303      	strlt	r3, [sp, #12]
 800c7de:	2300      	movge	r3, #0
 800c7e0:	2201      	movlt	r2, #1
 800c7e2:	bfac      	ite	ge
 800c7e4:	6023      	strge	r3, [r4, #0]
 800c7e6:	6022      	strlt	r2, [r4, #0]
 800c7e8:	4b97      	ldr	r3, [pc, #604]	; (800ca48 <_dtoa_r+0x2d0>)
 800c7ea:	9c03      	ldr	r4, [sp, #12]
 800c7ec:	43a3      	bics	r3, r4
 800c7ee:	d11c      	bne.n	800c82a <_dtoa_r+0xb2>
 800c7f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7f2:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7f6:	6013      	str	r3, [r2, #0]
 800c7f8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c7fc:	ea53 0308 	orrs.w	r3, r3, r8
 800c800:	f000 84fb 	beq.w	800d1fa <_dtoa_r+0xa82>
 800c804:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c806:	b963      	cbnz	r3, 800c822 <_dtoa_r+0xaa>
 800c808:	4b90      	ldr	r3, [pc, #576]	; (800ca4c <_dtoa_r+0x2d4>)
 800c80a:	e020      	b.n	800c84e <_dtoa_r+0xd6>
 800c80c:	4b90      	ldr	r3, [pc, #576]	; (800ca50 <_dtoa_r+0x2d8>)
 800c80e:	9301      	str	r3, [sp, #4]
 800c810:	3308      	adds	r3, #8
 800c812:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c814:	6013      	str	r3, [r2, #0]
 800c816:	9801      	ldr	r0, [sp, #4]
 800c818:	b011      	add	sp, #68	; 0x44
 800c81a:	ecbd 8b02 	vpop	{d8}
 800c81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c822:	4b8a      	ldr	r3, [pc, #552]	; (800ca4c <_dtoa_r+0x2d4>)
 800c824:	9301      	str	r3, [sp, #4]
 800c826:	3303      	adds	r3, #3
 800c828:	e7f3      	b.n	800c812 <_dtoa_r+0x9a>
 800c82a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c82e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c836:	d10c      	bne.n	800c852 <_dtoa_r+0xda>
 800c838:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c83a:	2301      	movs	r3, #1
 800c83c:	6013      	str	r3, [r2, #0]
 800c83e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c840:	2b00      	cmp	r3, #0
 800c842:	f000 84d7 	beq.w	800d1f4 <_dtoa_r+0xa7c>
 800c846:	4b83      	ldr	r3, [pc, #524]	; (800ca54 <_dtoa_r+0x2dc>)
 800c848:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c84a:	6013      	str	r3, [r2, #0]
 800c84c:	3b01      	subs	r3, #1
 800c84e:	9301      	str	r3, [sp, #4]
 800c850:	e7e1      	b.n	800c816 <_dtoa_r+0x9e>
 800c852:	aa0e      	add	r2, sp, #56	; 0x38
 800c854:	a90f      	add	r1, sp, #60	; 0x3c
 800c856:	4630      	mov	r0, r6
 800c858:	eeb0 0b48 	vmov.f64	d0, d8
 800c85c:	f001 f91a 	bl	800da94 <__d2b>
 800c860:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800c864:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c866:	4605      	mov	r5, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d046      	beq.n	800c8fa <_dtoa_r+0x182>
 800c86c:	eeb0 7b48 	vmov.f64	d7, d8
 800c870:	ee18 1a90 	vmov	r1, s17
 800c874:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c878:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800c87c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c880:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c884:	2000      	movs	r0, #0
 800c886:	ee07 1a90 	vmov	s15, r1
 800c88a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800c88e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800ca28 <_dtoa_r+0x2b0>
 800c892:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c896:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800ca30 <_dtoa_r+0x2b8>
 800c89a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c89e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800ca38 <_dtoa_r+0x2c0>
 800c8a2:	ee07 3a90 	vmov	s15, r3
 800c8a6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c8aa:	eeb0 7b46 	vmov.f64	d7, d6
 800c8ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c8b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c8b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8be:	ee16 ba90 	vmov	fp, s13
 800c8c2:	9009      	str	r0, [sp, #36]	; 0x24
 800c8c4:	d508      	bpl.n	800c8d8 <_dtoa_r+0x160>
 800c8c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c8ca:	eeb4 6b47 	vcmp.f64	d6, d7
 800c8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8d2:	bf18      	it	ne
 800c8d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c8d8:	f1bb 0f16 	cmp.w	fp, #22
 800c8dc:	d82b      	bhi.n	800c936 <_dtoa_r+0x1be>
 800c8de:	495e      	ldr	r1, [pc, #376]	; (800ca58 <_dtoa_r+0x2e0>)
 800c8e0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800c8e4:	ed91 7b00 	vldr	d7, [r1]
 800c8e8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8f0:	d501      	bpl.n	800c8f6 <_dtoa_r+0x17e>
 800c8f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	e01e      	b.n	800c938 <_dtoa_r+0x1c0>
 800c8fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8fc:	4413      	add	r3, r2
 800c8fe:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800c902:	2920      	cmp	r1, #32
 800c904:	bfc1      	itttt	gt
 800c906:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800c90a:	408c      	lslgt	r4, r1
 800c90c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800c910:	fa28 f101 	lsrgt.w	r1, r8, r1
 800c914:	bfd6      	itet	le
 800c916:	f1c1 0120 	rsble	r1, r1, #32
 800c91a:	4321      	orrgt	r1, r4
 800c91c:	fa08 f101 	lslle.w	r1, r8, r1
 800c920:	ee07 1a90 	vmov	s15, r1
 800c924:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c928:	3b01      	subs	r3, #1
 800c92a:	ee17 1a90 	vmov	r1, s15
 800c92e:	2001      	movs	r0, #1
 800c930:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c934:	e7a7      	b.n	800c886 <_dtoa_r+0x10e>
 800c936:	2101      	movs	r1, #1
 800c938:	1ad2      	subs	r2, r2, r3
 800c93a:	1e53      	subs	r3, r2, #1
 800c93c:	9305      	str	r3, [sp, #20]
 800c93e:	bf45      	ittet	mi
 800c940:	f1c2 0301 	rsbmi	r3, r2, #1
 800c944:	9304      	strmi	r3, [sp, #16]
 800c946:	2300      	movpl	r3, #0
 800c948:	2300      	movmi	r3, #0
 800c94a:	bf4c      	ite	mi
 800c94c:	9305      	strmi	r3, [sp, #20]
 800c94e:	9304      	strpl	r3, [sp, #16]
 800c950:	f1bb 0f00 	cmp.w	fp, #0
 800c954:	910b      	str	r1, [sp, #44]	; 0x2c
 800c956:	db18      	blt.n	800c98a <_dtoa_r+0x212>
 800c958:	9b05      	ldr	r3, [sp, #20]
 800c95a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800c95e:	445b      	add	r3, fp
 800c960:	9305      	str	r3, [sp, #20]
 800c962:	2300      	movs	r3, #0
 800c964:	9a06      	ldr	r2, [sp, #24]
 800c966:	2a09      	cmp	r2, #9
 800c968:	d848      	bhi.n	800c9fc <_dtoa_r+0x284>
 800c96a:	2a05      	cmp	r2, #5
 800c96c:	bfc4      	itt	gt
 800c96e:	3a04      	subgt	r2, #4
 800c970:	9206      	strgt	r2, [sp, #24]
 800c972:	9a06      	ldr	r2, [sp, #24]
 800c974:	f1a2 0202 	sub.w	r2, r2, #2
 800c978:	bfcc      	ite	gt
 800c97a:	2400      	movgt	r4, #0
 800c97c:	2401      	movle	r4, #1
 800c97e:	2a03      	cmp	r2, #3
 800c980:	d847      	bhi.n	800ca12 <_dtoa_r+0x29a>
 800c982:	e8df f002 	tbb	[pc, r2]
 800c986:	2d0b      	.short	0x2d0b
 800c988:	392b      	.short	0x392b
 800c98a:	9b04      	ldr	r3, [sp, #16]
 800c98c:	2200      	movs	r2, #0
 800c98e:	eba3 030b 	sub.w	r3, r3, fp
 800c992:	9304      	str	r3, [sp, #16]
 800c994:	920a      	str	r2, [sp, #40]	; 0x28
 800c996:	f1cb 0300 	rsb	r3, fp, #0
 800c99a:	e7e3      	b.n	800c964 <_dtoa_r+0x1ec>
 800c99c:	2200      	movs	r2, #0
 800c99e:	9207      	str	r2, [sp, #28]
 800c9a0:	9a08      	ldr	r2, [sp, #32]
 800c9a2:	2a00      	cmp	r2, #0
 800c9a4:	dc38      	bgt.n	800ca18 <_dtoa_r+0x2a0>
 800c9a6:	f04f 0a01 	mov.w	sl, #1
 800c9aa:	46d1      	mov	r9, sl
 800c9ac:	4652      	mov	r2, sl
 800c9ae:	f8cd a020 	str.w	sl, [sp, #32]
 800c9b2:	69f7      	ldr	r7, [r6, #28]
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	2004      	movs	r0, #4
 800c9b8:	f100 0c14 	add.w	ip, r0, #20
 800c9bc:	4594      	cmp	ip, r2
 800c9be:	d930      	bls.n	800ca22 <_dtoa_r+0x2aa>
 800c9c0:	6079      	str	r1, [r7, #4]
 800c9c2:	4630      	mov	r0, r6
 800c9c4:	930d      	str	r3, [sp, #52]	; 0x34
 800c9c6:	f000 fd43 	bl	800d450 <_Balloc>
 800c9ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9cc:	9001      	str	r0, [sp, #4]
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	d145      	bne.n	800ca60 <_dtoa_r+0x2e8>
 800c9d4:	4b21      	ldr	r3, [pc, #132]	; (800ca5c <_dtoa_r+0x2e4>)
 800c9d6:	f240 11af 	movw	r1, #431	; 0x1af
 800c9da:	e6e5      	b.n	800c7a8 <_dtoa_r+0x30>
 800c9dc:	2201      	movs	r2, #1
 800c9de:	e7de      	b.n	800c99e <_dtoa_r+0x226>
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	9207      	str	r2, [sp, #28]
 800c9e4:	9a08      	ldr	r2, [sp, #32]
 800c9e6:	eb0b 0a02 	add.w	sl, fp, r2
 800c9ea:	f10a 0901 	add.w	r9, sl, #1
 800c9ee:	464a      	mov	r2, r9
 800c9f0:	2a01      	cmp	r2, #1
 800c9f2:	bfb8      	it	lt
 800c9f4:	2201      	movlt	r2, #1
 800c9f6:	e7dc      	b.n	800c9b2 <_dtoa_r+0x23a>
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	e7f2      	b.n	800c9e2 <_dtoa_r+0x26a>
 800c9fc:	2401      	movs	r4, #1
 800c9fe:	2200      	movs	r2, #0
 800ca00:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800ca04:	f04f 3aff 	mov.w	sl, #4294967295
 800ca08:	2100      	movs	r1, #0
 800ca0a:	46d1      	mov	r9, sl
 800ca0c:	2212      	movs	r2, #18
 800ca0e:	9108      	str	r1, [sp, #32]
 800ca10:	e7cf      	b.n	800c9b2 <_dtoa_r+0x23a>
 800ca12:	2201      	movs	r2, #1
 800ca14:	9207      	str	r2, [sp, #28]
 800ca16:	e7f5      	b.n	800ca04 <_dtoa_r+0x28c>
 800ca18:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ca1c:	46d1      	mov	r9, sl
 800ca1e:	4652      	mov	r2, sl
 800ca20:	e7c7      	b.n	800c9b2 <_dtoa_r+0x23a>
 800ca22:	3101      	adds	r1, #1
 800ca24:	0040      	lsls	r0, r0, #1
 800ca26:	e7c7      	b.n	800c9b8 <_dtoa_r+0x240>
 800ca28:	636f4361 	.word	0x636f4361
 800ca2c:	3fd287a7 	.word	0x3fd287a7
 800ca30:	8b60c8b3 	.word	0x8b60c8b3
 800ca34:	3fc68a28 	.word	0x3fc68a28
 800ca38:	509f79fb 	.word	0x509f79fb
 800ca3c:	3fd34413 	.word	0x3fd34413
 800ca40:	0800e5f1 	.word	0x0800e5f1
 800ca44:	0800e608 	.word	0x0800e608
 800ca48:	7ff00000 	.word	0x7ff00000
 800ca4c:	0800e5ed 	.word	0x0800e5ed
 800ca50:	0800e5e4 	.word	0x0800e5e4
 800ca54:	0800e5c1 	.word	0x0800e5c1
 800ca58:	0800e6f8 	.word	0x0800e6f8
 800ca5c:	0800e660 	.word	0x0800e660
 800ca60:	69f2      	ldr	r2, [r6, #28]
 800ca62:	9901      	ldr	r1, [sp, #4]
 800ca64:	6011      	str	r1, [r2, #0]
 800ca66:	f1b9 0f0e 	cmp.w	r9, #14
 800ca6a:	d86c      	bhi.n	800cb46 <_dtoa_r+0x3ce>
 800ca6c:	2c00      	cmp	r4, #0
 800ca6e:	d06a      	beq.n	800cb46 <_dtoa_r+0x3ce>
 800ca70:	f1bb 0f00 	cmp.w	fp, #0
 800ca74:	f340 80a0 	ble.w	800cbb8 <_dtoa_r+0x440>
 800ca78:	4ac1      	ldr	r2, [pc, #772]	; (800cd80 <_dtoa_r+0x608>)
 800ca7a:	f00b 010f 	and.w	r1, fp, #15
 800ca7e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ca82:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ca86:	ed92 7b00 	vldr	d7, [r2]
 800ca8a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800ca8e:	f000 8087 	beq.w	800cba0 <_dtoa_r+0x428>
 800ca92:	49bc      	ldr	r1, [pc, #752]	; (800cd84 <_dtoa_r+0x60c>)
 800ca94:	ed91 6b08 	vldr	d6, [r1, #32]
 800ca98:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ca9c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800caa0:	f002 020f 	and.w	r2, r2, #15
 800caa4:	2103      	movs	r1, #3
 800caa6:	48b7      	ldr	r0, [pc, #732]	; (800cd84 <_dtoa_r+0x60c>)
 800caa8:	2a00      	cmp	r2, #0
 800caaa:	d17b      	bne.n	800cba4 <_dtoa_r+0x42c>
 800caac:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cab0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cab4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800caba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cabe:	2a00      	cmp	r2, #0
 800cac0:	f000 80a0 	beq.w	800cc04 <_dtoa_r+0x48c>
 800cac4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cac8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad0:	f140 8098 	bpl.w	800cc04 <_dtoa_r+0x48c>
 800cad4:	f1b9 0f00 	cmp.w	r9, #0
 800cad8:	f000 8094 	beq.w	800cc04 <_dtoa_r+0x48c>
 800cadc:	f1ba 0f00 	cmp.w	sl, #0
 800cae0:	dd2f      	ble.n	800cb42 <_dtoa_r+0x3ca>
 800cae2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800cae6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800caea:	ed8d 7b02 	vstr	d7, [sp, #8]
 800caee:	f10b 32ff 	add.w	r2, fp, #4294967295
 800caf2:	3101      	adds	r1, #1
 800caf4:	4654      	mov	r4, sl
 800caf6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cafa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800cafe:	ee07 1a90 	vmov	s15, r1
 800cb02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cb06:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cb0a:	ee15 7a90 	vmov	r7, s11
 800cb0e:	ec51 0b15 	vmov	r0, r1, d5
 800cb12:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800cb16:	2c00      	cmp	r4, #0
 800cb18:	d177      	bne.n	800cc0a <_dtoa_r+0x492>
 800cb1a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cb1e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cb22:	ec41 0b17 	vmov	d7, r0, r1
 800cb26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cb2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb2e:	f300 826a 	bgt.w	800d006 <_dtoa_r+0x88e>
 800cb32:	eeb1 7b47 	vneg.f64	d7, d7
 800cb36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cb3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb3e:	f100 8260 	bmi.w	800d002 <_dtoa_r+0x88a>
 800cb42:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cb46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb48:	2a00      	cmp	r2, #0
 800cb4a:	f2c0 811d 	blt.w	800cd88 <_dtoa_r+0x610>
 800cb4e:	f1bb 0f0e 	cmp.w	fp, #14
 800cb52:	f300 8119 	bgt.w	800cd88 <_dtoa_r+0x610>
 800cb56:	4b8a      	ldr	r3, [pc, #552]	; (800cd80 <_dtoa_r+0x608>)
 800cb58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cb5c:	ed93 6b00 	vldr	d6, [r3]
 800cb60:	9b08      	ldr	r3, [sp, #32]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	f280 80b7 	bge.w	800ccd6 <_dtoa_r+0x55e>
 800cb68:	f1b9 0f00 	cmp.w	r9, #0
 800cb6c:	f300 80b3 	bgt.w	800ccd6 <_dtoa_r+0x55e>
 800cb70:	f040 8246 	bne.w	800d000 <_dtoa_r+0x888>
 800cb74:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cb78:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cb7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cb84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb88:	464c      	mov	r4, r9
 800cb8a:	464f      	mov	r7, r9
 800cb8c:	f280 821c 	bge.w	800cfc8 <_dtoa_r+0x850>
 800cb90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cb94:	2331      	movs	r3, #49	; 0x31
 800cb96:	f808 3b01 	strb.w	r3, [r8], #1
 800cb9a:	f10b 0b01 	add.w	fp, fp, #1
 800cb9e:	e218      	b.n	800cfd2 <_dtoa_r+0x85a>
 800cba0:	2102      	movs	r1, #2
 800cba2:	e780      	b.n	800caa6 <_dtoa_r+0x32e>
 800cba4:	07d4      	lsls	r4, r2, #31
 800cba6:	d504      	bpl.n	800cbb2 <_dtoa_r+0x43a>
 800cba8:	ed90 6b00 	vldr	d6, [r0]
 800cbac:	3101      	adds	r1, #1
 800cbae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cbb2:	1052      	asrs	r2, r2, #1
 800cbb4:	3008      	adds	r0, #8
 800cbb6:	e777      	b.n	800caa8 <_dtoa_r+0x330>
 800cbb8:	d022      	beq.n	800cc00 <_dtoa_r+0x488>
 800cbba:	f1cb 0200 	rsb	r2, fp, #0
 800cbbe:	4970      	ldr	r1, [pc, #448]	; (800cd80 <_dtoa_r+0x608>)
 800cbc0:	f002 000f 	and.w	r0, r2, #15
 800cbc4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800cbc8:	ed91 7b00 	vldr	d7, [r1]
 800cbcc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800cbd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cbd4:	486b      	ldr	r0, [pc, #428]	; (800cd84 <_dtoa_r+0x60c>)
 800cbd6:	1112      	asrs	r2, r2, #4
 800cbd8:	2400      	movs	r4, #0
 800cbda:	2102      	movs	r1, #2
 800cbdc:	b92a      	cbnz	r2, 800cbea <_dtoa_r+0x472>
 800cbde:	2c00      	cmp	r4, #0
 800cbe0:	f43f af6a 	beq.w	800cab8 <_dtoa_r+0x340>
 800cbe4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cbe8:	e766      	b.n	800cab8 <_dtoa_r+0x340>
 800cbea:	07d7      	lsls	r7, r2, #31
 800cbec:	d505      	bpl.n	800cbfa <_dtoa_r+0x482>
 800cbee:	ed90 6b00 	vldr	d6, [r0]
 800cbf2:	3101      	adds	r1, #1
 800cbf4:	2401      	movs	r4, #1
 800cbf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cbfa:	1052      	asrs	r2, r2, #1
 800cbfc:	3008      	adds	r0, #8
 800cbfe:	e7ed      	b.n	800cbdc <_dtoa_r+0x464>
 800cc00:	2102      	movs	r1, #2
 800cc02:	e759      	b.n	800cab8 <_dtoa_r+0x340>
 800cc04:	465a      	mov	r2, fp
 800cc06:	464c      	mov	r4, r9
 800cc08:	e775      	b.n	800caf6 <_dtoa_r+0x37e>
 800cc0a:	ec41 0b17 	vmov	d7, r0, r1
 800cc0e:	495c      	ldr	r1, [pc, #368]	; (800cd80 <_dtoa_r+0x608>)
 800cc10:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800cc14:	ed11 4b02 	vldr	d4, [r1, #-8]
 800cc18:	9901      	ldr	r1, [sp, #4]
 800cc1a:	440c      	add	r4, r1
 800cc1c:	9907      	ldr	r1, [sp, #28]
 800cc1e:	b351      	cbz	r1, 800cc76 <_dtoa_r+0x4fe>
 800cc20:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800cc24:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800cc28:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cc2c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800cc30:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800cc34:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cc38:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cc3c:	ee14 1a90 	vmov	r1, s9
 800cc40:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cc44:	3130      	adds	r1, #48	; 0x30
 800cc46:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cc4a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc52:	f808 1b01 	strb.w	r1, [r8], #1
 800cc56:	d439      	bmi.n	800cccc <_dtoa_r+0x554>
 800cc58:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cc5c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cc60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc64:	d472      	bmi.n	800cd4c <_dtoa_r+0x5d4>
 800cc66:	45a0      	cmp	r8, r4
 800cc68:	f43f af6b 	beq.w	800cb42 <_dtoa_r+0x3ca>
 800cc6c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cc70:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cc74:	e7e0      	b.n	800cc38 <_dtoa_r+0x4c0>
 800cc76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cc7a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cc7e:	4620      	mov	r0, r4
 800cc80:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800cc84:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cc88:	ee14 1a90 	vmov	r1, s9
 800cc8c:	3130      	adds	r1, #48	; 0x30
 800cc8e:	f808 1b01 	strb.w	r1, [r8], #1
 800cc92:	45a0      	cmp	r8, r4
 800cc94:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cc98:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cc9c:	d118      	bne.n	800ccd0 <_dtoa_r+0x558>
 800cc9e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cca2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800cca6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ccaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccae:	dc4d      	bgt.n	800cd4c <_dtoa_r+0x5d4>
 800ccb0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ccb4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ccb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccbc:	f57f af41 	bpl.w	800cb42 <_dtoa_r+0x3ca>
 800ccc0:	4680      	mov	r8, r0
 800ccc2:	3801      	subs	r0, #1
 800ccc4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ccc8:	2b30      	cmp	r3, #48	; 0x30
 800ccca:	d0f9      	beq.n	800ccc0 <_dtoa_r+0x548>
 800cccc:	4693      	mov	fp, r2
 800ccce:	e02a      	b.n	800cd26 <_dtoa_r+0x5ae>
 800ccd0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ccd4:	e7d6      	b.n	800cc84 <_dtoa_r+0x50c>
 800ccd6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccda:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ccde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cce2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cce6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ccea:	ee15 3a10 	vmov	r3, s10
 800ccee:	3330      	adds	r3, #48	; 0x30
 800ccf0:	f808 3b01 	strb.w	r3, [r8], #1
 800ccf4:	9b01      	ldr	r3, [sp, #4]
 800ccf6:	eba8 0303 	sub.w	r3, r8, r3
 800ccfa:	4599      	cmp	r9, r3
 800ccfc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cd00:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cd04:	d133      	bne.n	800cd6e <_dtoa_r+0x5f6>
 800cd06:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cd0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd12:	dc1a      	bgt.n	800cd4a <_dtoa_r+0x5d2>
 800cd14:	eeb4 7b46 	vcmp.f64	d7, d6
 800cd18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd1c:	d103      	bne.n	800cd26 <_dtoa_r+0x5ae>
 800cd1e:	ee15 3a10 	vmov	r3, s10
 800cd22:	07d9      	lsls	r1, r3, #31
 800cd24:	d411      	bmi.n	800cd4a <_dtoa_r+0x5d2>
 800cd26:	4629      	mov	r1, r5
 800cd28:	4630      	mov	r0, r6
 800cd2a:	f000 fbd1 	bl	800d4d0 <_Bfree>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd32:	f888 3000 	strb.w	r3, [r8]
 800cd36:	f10b 0301 	add.w	r3, fp, #1
 800cd3a:	6013      	str	r3, [r2, #0]
 800cd3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	f43f ad69 	beq.w	800c816 <_dtoa_r+0x9e>
 800cd44:	f8c3 8000 	str.w	r8, [r3]
 800cd48:	e565      	b.n	800c816 <_dtoa_r+0x9e>
 800cd4a:	465a      	mov	r2, fp
 800cd4c:	4643      	mov	r3, r8
 800cd4e:	4698      	mov	r8, r3
 800cd50:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800cd54:	2939      	cmp	r1, #57	; 0x39
 800cd56:	d106      	bne.n	800cd66 <_dtoa_r+0x5ee>
 800cd58:	9901      	ldr	r1, [sp, #4]
 800cd5a:	4299      	cmp	r1, r3
 800cd5c:	d1f7      	bne.n	800cd4e <_dtoa_r+0x5d6>
 800cd5e:	9801      	ldr	r0, [sp, #4]
 800cd60:	2130      	movs	r1, #48	; 0x30
 800cd62:	3201      	adds	r2, #1
 800cd64:	7001      	strb	r1, [r0, #0]
 800cd66:	7819      	ldrb	r1, [r3, #0]
 800cd68:	3101      	adds	r1, #1
 800cd6a:	7019      	strb	r1, [r3, #0]
 800cd6c:	e7ae      	b.n	800cccc <_dtoa_r+0x554>
 800cd6e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cd72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cd76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd7a:	d1b2      	bne.n	800cce2 <_dtoa_r+0x56a>
 800cd7c:	e7d3      	b.n	800cd26 <_dtoa_r+0x5ae>
 800cd7e:	bf00      	nop
 800cd80:	0800e6f8 	.word	0x0800e6f8
 800cd84:	0800e6d0 	.word	0x0800e6d0
 800cd88:	9907      	ldr	r1, [sp, #28]
 800cd8a:	2900      	cmp	r1, #0
 800cd8c:	f000 80d0 	beq.w	800cf30 <_dtoa_r+0x7b8>
 800cd90:	9906      	ldr	r1, [sp, #24]
 800cd92:	2901      	cmp	r1, #1
 800cd94:	f300 80b4 	bgt.w	800cf00 <_dtoa_r+0x788>
 800cd98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd9a:	2900      	cmp	r1, #0
 800cd9c:	f000 80ac 	beq.w	800cef8 <_dtoa_r+0x780>
 800cda0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cda4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cda8:	461c      	mov	r4, r3
 800cdaa:	9309      	str	r3, [sp, #36]	; 0x24
 800cdac:	9b04      	ldr	r3, [sp, #16]
 800cdae:	4413      	add	r3, r2
 800cdb0:	9304      	str	r3, [sp, #16]
 800cdb2:	9b05      	ldr	r3, [sp, #20]
 800cdb4:	2101      	movs	r1, #1
 800cdb6:	4413      	add	r3, r2
 800cdb8:	4630      	mov	r0, r6
 800cdba:	9305      	str	r3, [sp, #20]
 800cdbc:	f000 fc3e 	bl	800d63c <__i2b>
 800cdc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdc2:	4607      	mov	r7, r0
 800cdc4:	f1b8 0f00 	cmp.w	r8, #0
 800cdc8:	d00d      	beq.n	800cde6 <_dtoa_r+0x66e>
 800cdca:	9a05      	ldr	r2, [sp, #20]
 800cdcc:	2a00      	cmp	r2, #0
 800cdce:	dd0a      	ble.n	800cde6 <_dtoa_r+0x66e>
 800cdd0:	4542      	cmp	r2, r8
 800cdd2:	9904      	ldr	r1, [sp, #16]
 800cdd4:	bfa8      	it	ge
 800cdd6:	4642      	movge	r2, r8
 800cdd8:	1a89      	subs	r1, r1, r2
 800cdda:	9104      	str	r1, [sp, #16]
 800cddc:	9905      	ldr	r1, [sp, #20]
 800cdde:	eba8 0802 	sub.w	r8, r8, r2
 800cde2:	1a8a      	subs	r2, r1, r2
 800cde4:	9205      	str	r2, [sp, #20]
 800cde6:	b303      	cbz	r3, 800ce2a <_dtoa_r+0x6b2>
 800cde8:	9a07      	ldr	r2, [sp, #28]
 800cdea:	2a00      	cmp	r2, #0
 800cdec:	f000 80a5 	beq.w	800cf3a <_dtoa_r+0x7c2>
 800cdf0:	2c00      	cmp	r4, #0
 800cdf2:	dd13      	ble.n	800ce1c <_dtoa_r+0x6a4>
 800cdf4:	4639      	mov	r1, r7
 800cdf6:	4622      	mov	r2, r4
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	930d      	str	r3, [sp, #52]	; 0x34
 800cdfc:	f000 fcde 	bl	800d7bc <__pow5mult>
 800ce00:	462a      	mov	r2, r5
 800ce02:	4601      	mov	r1, r0
 800ce04:	4607      	mov	r7, r0
 800ce06:	4630      	mov	r0, r6
 800ce08:	f000 fc2e 	bl	800d668 <__multiply>
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	9009      	str	r0, [sp, #36]	; 0x24
 800ce10:	4630      	mov	r0, r6
 800ce12:	f000 fb5d 	bl	800d4d0 <_Bfree>
 800ce16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce1a:	4615      	mov	r5, r2
 800ce1c:	1b1a      	subs	r2, r3, r4
 800ce1e:	d004      	beq.n	800ce2a <_dtoa_r+0x6b2>
 800ce20:	4629      	mov	r1, r5
 800ce22:	4630      	mov	r0, r6
 800ce24:	f000 fcca 	bl	800d7bc <__pow5mult>
 800ce28:	4605      	mov	r5, r0
 800ce2a:	2101      	movs	r1, #1
 800ce2c:	4630      	mov	r0, r6
 800ce2e:	f000 fc05 	bl	800d63c <__i2b>
 800ce32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	4604      	mov	r4, r0
 800ce38:	f340 8081 	ble.w	800cf3e <_dtoa_r+0x7c6>
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	4601      	mov	r1, r0
 800ce40:	4630      	mov	r0, r6
 800ce42:	f000 fcbb 	bl	800d7bc <__pow5mult>
 800ce46:	9b06      	ldr	r3, [sp, #24]
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	4604      	mov	r4, r0
 800ce4c:	dd7a      	ble.n	800cf44 <_dtoa_r+0x7cc>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	9309      	str	r3, [sp, #36]	; 0x24
 800ce52:	6922      	ldr	r2, [r4, #16]
 800ce54:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ce58:	6910      	ldr	r0, [r2, #16]
 800ce5a:	f000 fba1 	bl	800d5a0 <__hi0bits>
 800ce5e:	f1c0 0020 	rsb	r0, r0, #32
 800ce62:	9b05      	ldr	r3, [sp, #20]
 800ce64:	4418      	add	r0, r3
 800ce66:	f010 001f 	ands.w	r0, r0, #31
 800ce6a:	f000 8093 	beq.w	800cf94 <_dtoa_r+0x81c>
 800ce6e:	f1c0 0220 	rsb	r2, r0, #32
 800ce72:	2a04      	cmp	r2, #4
 800ce74:	f340 8085 	ble.w	800cf82 <_dtoa_r+0x80a>
 800ce78:	9b04      	ldr	r3, [sp, #16]
 800ce7a:	f1c0 001c 	rsb	r0, r0, #28
 800ce7e:	4403      	add	r3, r0
 800ce80:	9304      	str	r3, [sp, #16]
 800ce82:	9b05      	ldr	r3, [sp, #20]
 800ce84:	4480      	add	r8, r0
 800ce86:	4403      	add	r3, r0
 800ce88:	9305      	str	r3, [sp, #20]
 800ce8a:	9b04      	ldr	r3, [sp, #16]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	dd05      	ble.n	800ce9c <_dtoa_r+0x724>
 800ce90:	4629      	mov	r1, r5
 800ce92:	461a      	mov	r2, r3
 800ce94:	4630      	mov	r0, r6
 800ce96:	f000 fceb 	bl	800d870 <__lshift>
 800ce9a:	4605      	mov	r5, r0
 800ce9c:	9b05      	ldr	r3, [sp, #20]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	dd05      	ble.n	800ceae <_dtoa_r+0x736>
 800cea2:	4621      	mov	r1, r4
 800cea4:	461a      	mov	r2, r3
 800cea6:	4630      	mov	r0, r6
 800cea8:	f000 fce2 	bl	800d870 <__lshift>
 800ceac:	4604      	mov	r4, r0
 800ceae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d071      	beq.n	800cf98 <_dtoa_r+0x820>
 800ceb4:	4621      	mov	r1, r4
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	f000 fd46 	bl	800d948 <__mcmp>
 800cebc:	2800      	cmp	r0, #0
 800cebe:	da6b      	bge.n	800cf98 <_dtoa_r+0x820>
 800cec0:	2300      	movs	r3, #0
 800cec2:	4629      	mov	r1, r5
 800cec4:	220a      	movs	r2, #10
 800cec6:	4630      	mov	r0, r6
 800cec8:	f000 fb24 	bl	800d514 <__multadd>
 800cecc:	9b07      	ldr	r3, [sp, #28]
 800cece:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ced2:	4605      	mov	r5, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	f000 8197 	beq.w	800d208 <_dtoa_r+0xa90>
 800ceda:	4639      	mov	r1, r7
 800cedc:	2300      	movs	r3, #0
 800cede:	220a      	movs	r2, #10
 800cee0:	4630      	mov	r0, r6
 800cee2:	f000 fb17 	bl	800d514 <__multadd>
 800cee6:	f1ba 0f00 	cmp.w	sl, #0
 800ceea:	4607      	mov	r7, r0
 800ceec:	f300 8093 	bgt.w	800d016 <_dtoa_r+0x89e>
 800cef0:	9b06      	ldr	r3, [sp, #24]
 800cef2:	2b02      	cmp	r3, #2
 800cef4:	dc57      	bgt.n	800cfa6 <_dtoa_r+0x82e>
 800cef6:	e08e      	b.n	800d016 <_dtoa_r+0x89e>
 800cef8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cefa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cefe:	e751      	b.n	800cda4 <_dtoa_r+0x62c>
 800cf00:	f109 34ff 	add.w	r4, r9, #4294967295
 800cf04:	42a3      	cmp	r3, r4
 800cf06:	bfbf      	itttt	lt
 800cf08:	1ae2      	sublt	r2, r4, r3
 800cf0a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cf0c:	189b      	addlt	r3, r3, r2
 800cf0e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cf10:	bfae      	itee	ge
 800cf12:	1b1c      	subge	r4, r3, r4
 800cf14:	4623      	movlt	r3, r4
 800cf16:	2400      	movlt	r4, #0
 800cf18:	f1b9 0f00 	cmp.w	r9, #0
 800cf1c:	bfb5      	itete	lt
 800cf1e:	9a04      	ldrlt	r2, [sp, #16]
 800cf20:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800cf24:	eba2 0809 	sublt.w	r8, r2, r9
 800cf28:	464a      	movge	r2, r9
 800cf2a:	bfb8      	it	lt
 800cf2c:	2200      	movlt	r2, #0
 800cf2e:	e73c      	b.n	800cdaa <_dtoa_r+0x632>
 800cf30:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cf34:	9f07      	ldr	r7, [sp, #28]
 800cf36:	461c      	mov	r4, r3
 800cf38:	e744      	b.n	800cdc4 <_dtoa_r+0x64c>
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	e770      	b.n	800ce20 <_dtoa_r+0x6a8>
 800cf3e:	9b06      	ldr	r3, [sp, #24]
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	dc18      	bgt.n	800cf76 <_dtoa_r+0x7fe>
 800cf44:	9b02      	ldr	r3, [sp, #8]
 800cf46:	b9b3      	cbnz	r3, 800cf76 <_dtoa_r+0x7fe>
 800cf48:	9b03      	ldr	r3, [sp, #12]
 800cf4a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800cf4e:	b9a2      	cbnz	r2, 800cf7a <_dtoa_r+0x802>
 800cf50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cf54:	0d12      	lsrs	r2, r2, #20
 800cf56:	0512      	lsls	r2, r2, #20
 800cf58:	b18a      	cbz	r2, 800cf7e <_dtoa_r+0x806>
 800cf5a:	9b04      	ldr	r3, [sp, #16]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	9304      	str	r3, [sp, #16]
 800cf60:	9b05      	ldr	r3, [sp, #20]
 800cf62:	3301      	adds	r3, #1
 800cf64:	9305      	str	r3, [sp, #20]
 800cf66:	2301      	movs	r3, #1
 800cf68:	9309      	str	r3, [sp, #36]	; 0x24
 800cf6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	f47f af70 	bne.w	800ce52 <_dtoa_r+0x6da>
 800cf72:	2001      	movs	r0, #1
 800cf74:	e775      	b.n	800ce62 <_dtoa_r+0x6ea>
 800cf76:	2300      	movs	r3, #0
 800cf78:	e7f6      	b.n	800cf68 <_dtoa_r+0x7f0>
 800cf7a:	9b02      	ldr	r3, [sp, #8]
 800cf7c:	e7f4      	b.n	800cf68 <_dtoa_r+0x7f0>
 800cf7e:	9209      	str	r2, [sp, #36]	; 0x24
 800cf80:	e7f3      	b.n	800cf6a <_dtoa_r+0x7f2>
 800cf82:	d082      	beq.n	800ce8a <_dtoa_r+0x712>
 800cf84:	9b04      	ldr	r3, [sp, #16]
 800cf86:	321c      	adds	r2, #28
 800cf88:	4413      	add	r3, r2
 800cf8a:	9304      	str	r3, [sp, #16]
 800cf8c:	9b05      	ldr	r3, [sp, #20]
 800cf8e:	4490      	add	r8, r2
 800cf90:	4413      	add	r3, r2
 800cf92:	e779      	b.n	800ce88 <_dtoa_r+0x710>
 800cf94:	4602      	mov	r2, r0
 800cf96:	e7f5      	b.n	800cf84 <_dtoa_r+0x80c>
 800cf98:	f1b9 0f00 	cmp.w	r9, #0
 800cf9c:	dc36      	bgt.n	800d00c <_dtoa_r+0x894>
 800cf9e:	9b06      	ldr	r3, [sp, #24]
 800cfa0:	2b02      	cmp	r3, #2
 800cfa2:	dd33      	ble.n	800d00c <_dtoa_r+0x894>
 800cfa4:	46ca      	mov	sl, r9
 800cfa6:	f1ba 0f00 	cmp.w	sl, #0
 800cfaa:	d10d      	bne.n	800cfc8 <_dtoa_r+0x850>
 800cfac:	4621      	mov	r1, r4
 800cfae:	4653      	mov	r3, sl
 800cfb0:	2205      	movs	r2, #5
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	f000 faae 	bl	800d514 <__multadd>
 800cfb8:	4601      	mov	r1, r0
 800cfba:	4604      	mov	r4, r0
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	f000 fcc3 	bl	800d948 <__mcmp>
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	f73f ade4 	bgt.w	800cb90 <_dtoa_r+0x418>
 800cfc8:	9b08      	ldr	r3, [sp, #32]
 800cfca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cfce:	ea6f 0b03 	mvn.w	fp, r3
 800cfd2:	f04f 0900 	mov.w	r9, #0
 800cfd6:	4621      	mov	r1, r4
 800cfd8:	4630      	mov	r0, r6
 800cfda:	f000 fa79 	bl	800d4d0 <_Bfree>
 800cfde:	2f00      	cmp	r7, #0
 800cfe0:	f43f aea1 	beq.w	800cd26 <_dtoa_r+0x5ae>
 800cfe4:	f1b9 0f00 	cmp.w	r9, #0
 800cfe8:	d005      	beq.n	800cff6 <_dtoa_r+0x87e>
 800cfea:	45b9      	cmp	r9, r7
 800cfec:	d003      	beq.n	800cff6 <_dtoa_r+0x87e>
 800cfee:	4649      	mov	r1, r9
 800cff0:	4630      	mov	r0, r6
 800cff2:	f000 fa6d 	bl	800d4d0 <_Bfree>
 800cff6:	4639      	mov	r1, r7
 800cff8:	4630      	mov	r0, r6
 800cffa:	f000 fa69 	bl	800d4d0 <_Bfree>
 800cffe:	e692      	b.n	800cd26 <_dtoa_r+0x5ae>
 800d000:	2400      	movs	r4, #0
 800d002:	4627      	mov	r7, r4
 800d004:	e7e0      	b.n	800cfc8 <_dtoa_r+0x850>
 800d006:	4693      	mov	fp, r2
 800d008:	4627      	mov	r7, r4
 800d00a:	e5c1      	b.n	800cb90 <_dtoa_r+0x418>
 800d00c:	9b07      	ldr	r3, [sp, #28]
 800d00e:	46ca      	mov	sl, r9
 800d010:	2b00      	cmp	r3, #0
 800d012:	f000 8100 	beq.w	800d216 <_dtoa_r+0xa9e>
 800d016:	f1b8 0f00 	cmp.w	r8, #0
 800d01a:	dd05      	ble.n	800d028 <_dtoa_r+0x8b0>
 800d01c:	4639      	mov	r1, r7
 800d01e:	4642      	mov	r2, r8
 800d020:	4630      	mov	r0, r6
 800d022:	f000 fc25 	bl	800d870 <__lshift>
 800d026:	4607      	mov	r7, r0
 800d028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d05d      	beq.n	800d0ea <_dtoa_r+0x972>
 800d02e:	6879      	ldr	r1, [r7, #4]
 800d030:	4630      	mov	r0, r6
 800d032:	f000 fa0d 	bl	800d450 <_Balloc>
 800d036:	4680      	mov	r8, r0
 800d038:	b928      	cbnz	r0, 800d046 <_dtoa_r+0x8ce>
 800d03a:	4b82      	ldr	r3, [pc, #520]	; (800d244 <_dtoa_r+0xacc>)
 800d03c:	4602      	mov	r2, r0
 800d03e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d042:	f7ff bbb1 	b.w	800c7a8 <_dtoa_r+0x30>
 800d046:	693a      	ldr	r2, [r7, #16]
 800d048:	3202      	adds	r2, #2
 800d04a:	0092      	lsls	r2, r2, #2
 800d04c:	f107 010c 	add.w	r1, r7, #12
 800d050:	300c      	adds	r0, #12
 800d052:	f001 f971 	bl	800e338 <memcpy>
 800d056:	2201      	movs	r2, #1
 800d058:	4641      	mov	r1, r8
 800d05a:	4630      	mov	r0, r6
 800d05c:	f000 fc08 	bl	800d870 <__lshift>
 800d060:	9b01      	ldr	r3, [sp, #4]
 800d062:	3301      	adds	r3, #1
 800d064:	9304      	str	r3, [sp, #16]
 800d066:	9b01      	ldr	r3, [sp, #4]
 800d068:	4453      	add	r3, sl
 800d06a:	9308      	str	r3, [sp, #32]
 800d06c:	9b02      	ldr	r3, [sp, #8]
 800d06e:	f003 0301 	and.w	r3, r3, #1
 800d072:	46b9      	mov	r9, r7
 800d074:	9307      	str	r3, [sp, #28]
 800d076:	4607      	mov	r7, r0
 800d078:	9b04      	ldr	r3, [sp, #16]
 800d07a:	4621      	mov	r1, r4
 800d07c:	3b01      	subs	r3, #1
 800d07e:	4628      	mov	r0, r5
 800d080:	9302      	str	r3, [sp, #8]
 800d082:	f7ff faee 	bl	800c662 <quorem>
 800d086:	4603      	mov	r3, r0
 800d088:	3330      	adds	r3, #48	; 0x30
 800d08a:	9005      	str	r0, [sp, #20]
 800d08c:	4649      	mov	r1, r9
 800d08e:	4628      	mov	r0, r5
 800d090:	9309      	str	r3, [sp, #36]	; 0x24
 800d092:	f000 fc59 	bl	800d948 <__mcmp>
 800d096:	463a      	mov	r2, r7
 800d098:	4682      	mov	sl, r0
 800d09a:	4621      	mov	r1, r4
 800d09c:	4630      	mov	r0, r6
 800d09e:	f000 fc6f 	bl	800d980 <__mdiff>
 800d0a2:	68c2      	ldr	r2, [r0, #12]
 800d0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0a6:	4680      	mov	r8, r0
 800d0a8:	bb0a      	cbnz	r2, 800d0ee <_dtoa_r+0x976>
 800d0aa:	4601      	mov	r1, r0
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	f000 fc4b 	bl	800d948 <__mcmp>
 800d0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	4641      	mov	r1, r8
 800d0b8:	4630      	mov	r0, r6
 800d0ba:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800d0be:	f000 fa07 	bl	800d4d0 <_Bfree>
 800d0c2:	9b06      	ldr	r3, [sp, #24]
 800d0c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0c6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d0ca:	ea43 0102 	orr.w	r1, r3, r2
 800d0ce:	9b07      	ldr	r3, [sp, #28]
 800d0d0:	4319      	orrs	r1, r3
 800d0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0d4:	d10d      	bne.n	800d0f2 <_dtoa_r+0x97a>
 800d0d6:	2b39      	cmp	r3, #57	; 0x39
 800d0d8:	d029      	beq.n	800d12e <_dtoa_r+0x9b6>
 800d0da:	f1ba 0f00 	cmp.w	sl, #0
 800d0de:	dd01      	ble.n	800d0e4 <_dtoa_r+0x96c>
 800d0e0:	9b05      	ldr	r3, [sp, #20]
 800d0e2:	3331      	adds	r3, #49	; 0x31
 800d0e4:	9a02      	ldr	r2, [sp, #8]
 800d0e6:	7013      	strb	r3, [r2, #0]
 800d0e8:	e775      	b.n	800cfd6 <_dtoa_r+0x85e>
 800d0ea:	4638      	mov	r0, r7
 800d0ec:	e7b8      	b.n	800d060 <_dtoa_r+0x8e8>
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	e7e1      	b.n	800d0b6 <_dtoa_r+0x93e>
 800d0f2:	f1ba 0f00 	cmp.w	sl, #0
 800d0f6:	db06      	blt.n	800d106 <_dtoa_r+0x98e>
 800d0f8:	9906      	ldr	r1, [sp, #24]
 800d0fa:	ea41 0a0a 	orr.w	sl, r1, sl
 800d0fe:	9907      	ldr	r1, [sp, #28]
 800d100:	ea5a 0a01 	orrs.w	sl, sl, r1
 800d104:	d120      	bne.n	800d148 <_dtoa_r+0x9d0>
 800d106:	2a00      	cmp	r2, #0
 800d108:	ddec      	ble.n	800d0e4 <_dtoa_r+0x96c>
 800d10a:	4629      	mov	r1, r5
 800d10c:	2201      	movs	r2, #1
 800d10e:	4630      	mov	r0, r6
 800d110:	9304      	str	r3, [sp, #16]
 800d112:	f000 fbad 	bl	800d870 <__lshift>
 800d116:	4621      	mov	r1, r4
 800d118:	4605      	mov	r5, r0
 800d11a:	f000 fc15 	bl	800d948 <__mcmp>
 800d11e:	2800      	cmp	r0, #0
 800d120:	9b04      	ldr	r3, [sp, #16]
 800d122:	dc02      	bgt.n	800d12a <_dtoa_r+0x9b2>
 800d124:	d1de      	bne.n	800d0e4 <_dtoa_r+0x96c>
 800d126:	07da      	lsls	r2, r3, #31
 800d128:	d5dc      	bpl.n	800d0e4 <_dtoa_r+0x96c>
 800d12a:	2b39      	cmp	r3, #57	; 0x39
 800d12c:	d1d8      	bne.n	800d0e0 <_dtoa_r+0x968>
 800d12e:	9a02      	ldr	r2, [sp, #8]
 800d130:	2339      	movs	r3, #57	; 0x39
 800d132:	7013      	strb	r3, [r2, #0]
 800d134:	4643      	mov	r3, r8
 800d136:	4698      	mov	r8, r3
 800d138:	3b01      	subs	r3, #1
 800d13a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d13e:	2a39      	cmp	r2, #57	; 0x39
 800d140:	d051      	beq.n	800d1e6 <_dtoa_r+0xa6e>
 800d142:	3201      	adds	r2, #1
 800d144:	701a      	strb	r2, [r3, #0]
 800d146:	e746      	b.n	800cfd6 <_dtoa_r+0x85e>
 800d148:	2a00      	cmp	r2, #0
 800d14a:	dd03      	ble.n	800d154 <_dtoa_r+0x9dc>
 800d14c:	2b39      	cmp	r3, #57	; 0x39
 800d14e:	d0ee      	beq.n	800d12e <_dtoa_r+0x9b6>
 800d150:	3301      	adds	r3, #1
 800d152:	e7c7      	b.n	800d0e4 <_dtoa_r+0x96c>
 800d154:	9a04      	ldr	r2, [sp, #16]
 800d156:	9908      	ldr	r1, [sp, #32]
 800d158:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d15c:	428a      	cmp	r2, r1
 800d15e:	d02b      	beq.n	800d1b8 <_dtoa_r+0xa40>
 800d160:	4629      	mov	r1, r5
 800d162:	2300      	movs	r3, #0
 800d164:	220a      	movs	r2, #10
 800d166:	4630      	mov	r0, r6
 800d168:	f000 f9d4 	bl	800d514 <__multadd>
 800d16c:	45b9      	cmp	r9, r7
 800d16e:	4605      	mov	r5, r0
 800d170:	f04f 0300 	mov.w	r3, #0
 800d174:	f04f 020a 	mov.w	r2, #10
 800d178:	4649      	mov	r1, r9
 800d17a:	4630      	mov	r0, r6
 800d17c:	d107      	bne.n	800d18e <_dtoa_r+0xa16>
 800d17e:	f000 f9c9 	bl	800d514 <__multadd>
 800d182:	4681      	mov	r9, r0
 800d184:	4607      	mov	r7, r0
 800d186:	9b04      	ldr	r3, [sp, #16]
 800d188:	3301      	adds	r3, #1
 800d18a:	9304      	str	r3, [sp, #16]
 800d18c:	e774      	b.n	800d078 <_dtoa_r+0x900>
 800d18e:	f000 f9c1 	bl	800d514 <__multadd>
 800d192:	4639      	mov	r1, r7
 800d194:	4681      	mov	r9, r0
 800d196:	2300      	movs	r3, #0
 800d198:	220a      	movs	r2, #10
 800d19a:	4630      	mov	r0, r6
 800d19c:	f000 f9ba 	bl	800d514 <__multadd>
 800d1a0:	4607      	mov	r7, r0
 800d1a2:	e7f0      	b.n	800d186 <_dtoa_r+0xa0e>
 800d1a4:	f1ba 0f00 	cmp.w	sl, #0
 800d1a8:	9a01      	ldr	r2, [sp, #4]
 800d1aa:	bfcc      	ite	gt
 800d1ac:	46d0      	movgt	r8, sl
 800d1ae:	f04f 0801 	movle.w	r8, #1
 800d1b2:	4490      	add	r8, r2
 800d1b4:	f04f 0900 	mov.w	r9, #0
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	4630      	mov	r0, r6
 800d1be:	9302      	str	r3, [sp, #8]
 800d1c0:	f000 fb56 	bl	800d870 <__lshift>
 800d1c4:	4621      	mov	r1, r4
 800d1c6:	4605      	mov	r5, r0
 800d1c8:	f000 fbbe 	bl	800d948 <__mcmp>
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	dcb1      	bgt.n	800d134 <_dtoa_r+0x9bc>
 800d1d0:	d102      	bne.n	800d1d8 <_dtoa_r+0xa60>
 800d1d2:	9b02      	ldr	r3, [sp, #8]
 800d1d4:	07db      	lsls	r3, r3, #31
 800d1d6:	d4ad      	bmi.n	800d134 <_dtoa_r+0x9bc>
 800d1d8:	4643      	mov	r3, r8
 800d1da:	4698      	mov	r8, r3
 800d1dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1e0:	2a30      	cmp	r2, #48	; 0x30
 800d1e2:	d0fa      	beq.n	800d1da <_dtoa_r+0xa62>
 800d1e4:	e6f7      	b.n	800cfd6 <_dtoa_r+0x85e>
 800d1e6:	9a01      	ldr	r2, [sp, #4]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d1a4      	bne.n	800d136 <_dtoa_r+0x9be>
 800d1ec:	f10b 0b01 	add.w	fp, fp, #1
 800d1f0:	2331      	movs	r3, #49	; 0x31
 800d1f2:	e778      	b.n	800d0e6 <_dtoa_r+0x96e>
 800d1f4:	4b14      	ldr	r3, [pc, #80]	; (800d248 <_dtoa_r+0xad0>)
 800d1f6:	f7ff bb2a 	b.w	800c84e <_dtoa_r+0xd6>
 800d1fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f47f ab05 	bne.w	800c80c <_dtoa_r+0x94>
 800d202:	4b12      	ldr	r3, [pc, #72]	; (800d24c <_dtoa_r+0xad4>)
 800d204:	f7ff bb23 	b.w	800c84e <_dtoa_r+0xd6>
 800d208:	f1ba 0f00 	cmp.w	sl, #0
 800d20c:	dc03      	bgt.n	800d216 <_dtoa_r+0xa9e>
 800d20e:	9b06      	ldr	r3, [sp, #24]
 800d210:	2b02      	cmp	r3, #2
 800d212:	f73f aec8 	bgt.w	800cfa6 <_dtoa_r+0x82e>
 800d216:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d21a:	4621      	mov	r1, r4
 800d21c:	4628      	mov	r0, r5
 800d21e:	f7ff fa20 	bl	800c662 <quorem>
 800d222:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d226:	f808 3b01 	strb.w	r3, [r8], #1
 800d22a:	9a01      	ldr	r2, [sp, #4]
 800d22c:	eba8 0202 	sub.w	r2, r8, r2
 800d230:	4592      	cmp	sl, r2
 800d232:	ddb7      	ble.n	800d1a4 <_dtoa_r+0xa2c>
 800d234:	4629      	mov	r1, r5
 800d236:	2300      	movs	r3, #0
 800d238:	220a      	movs	r2, #10
 800d23a:	4630      	mov	r0, r6
 800d23c:	f000 f96a 	bl	800d514 <__multadd>
 800d240:	4605      	mov	r5, r0
 800d242:	e7ea      	b.n	800d21a <_dtoa_r+0xaa2>
 800d244:	0800e660 	.word	0x0800e660
 800d248:	0800e5c0 	.word	0x0800e5c0
 800d24c:	0800e5e4 	.word	0x0800e5e4

0800d250 <_free_r>:
 800d250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d252:	2900      	cmp	r1, #0
 800d254:	d044      	beq.n	800d2e0 <_free_r+0x90>
 800d256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d25a:	9001      	str	r0, [sp, #4]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f1a1 0404 	sub.w	r4, r1, #4
 800d262:	bfb8      	it	lt
 800d264:	18e4      	addlt	r4, r4, r3
 800d266:	f000 f8e7 	bl	800d438 <__malloc_lock>
 800d26a:	4a1e      	ldr	r2, [pc, #120]	; (800d2e4 <_free_r+0x94>)
 800d26c:	9801      	ldr	r0, [sp, #4]
 800d26e:	6813      	ldr	r3, [r2, #0]
 800d270:	b933      	cbnz	r3, 800d280 <_free_r+0x30>
 800d272:	6063      	str	r3, [r4, #4]
 800d274:	6014      	str	r4, [r2, #0]
 800d276:	b003      	add	sp, #12
 800d278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d27c:	f000 b8e2 	b.w	800d444 <__malloc_unlock>
 800d280:	42a3      	cmp	r3, r4
 800d282:	d908      	bls.n	800d296 <_free_r+0x46>
 800d284:	6825      	ldr	r5, [r4, #0]
 800d286:	1961      	adds	r1, r4, r5
 800d288:	428b      	cmp	r3, r1
 800d28a:	bf01      	itttt	eq
 800d28c:	6819      	ldreq	r1, [r3, #0]
 800d28e:	685b      	ldreq	r3, [r3, #4]
 800d290:	1949      	addeq	r1, r1, r5
 800d292:	6021      	streq	r1, [r4, #0]
 800d294:	e7ed      	b.n	800d272 <_free_r+0x22>
 800d296:	461a      	mov	r2, r3
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	b10b      	cbz	r3, 800d2a0 <_free_r+0x50>
 800d29c:	42a3      	cmp	r3, r4
 800d29e:	d9fa      	bls.n	800d296 <_free_r+0x46>
 800d2a0:	6811      	ldr	r1, [r2, #0]
 800d2a2:	1855      	adds	r5, r2, r1
 800d2a4:	42a5      	cmp	r5, r4
 800d2a6:	d10b      	bne.n	800d2c0 <_free_r+0x70>
 800d2a8:	6824      	ldr	r4, [r4, #0]
 800d2aa:	4421      	add	r1, r4
 800d2ac:	1854      	adds	r4, r2, r1
 800d2ae:	42a3      	cmp	r3, r4
 800d2b0:	6011      	str	r1, [r2, #0]
 800d2b2:	d1e0      	bne.n	800d276 <_free_r+0x26>
 800d2b4:	681c      	ldr	r4, [r3, #0]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	6053      	str	r3, [r2, #4]
 800d2ba:	440c      	add	r4, r1
 800d2bc:	6014      	str	r4, [r2, #0]
 800d2be:	e7da      	b.n	800d276 <_free_r+0x26>
 800d2c0:	d902      	bls.n	800d2c8 <_free_r+0x78>
 800d2c2:	230c      	movs	r3, #12
 800d2c4:	6003      	str	r3, [r0, #0]
 800d2c6:	e7d6      	b.n	800d276 <_free_r+0x26>
 800d2c8:	6825      	ldr	r5, [r4, #0]
 800d2ca:	1961      	adds	r1, r4, r5
 800d2cc:	428b      	cmp	r3, r1
 800d2ce:	bf04      	itt	eq
 800d2d0:	6819      	ldreq	r1, [r3, #0]
 800d2d2:	685b      	ldreq	r3, [r3, #4]
 800d2d4:	6063      	str	r3, [r4, #4]
 800d2d6:	bf04      	itt	eq
 800d2d8:	1949      	addeq	r1, r1, r5
 800d2da:	6021      	streq	r1, [r4, #0]
 800d2dc:	6054      	str	r4, [r2, #4]
 800d2de:	e7ca      	b.n	800d276 <_free_r+0x26>
 800d2e0:	b003      	add	sp, #12
 800d2e2:	bd30      	pop	{r4, r5, pc}
 800d2e4:	24062024 	.word	0x24062024

0800d2e8 <malloc>:
 800d2e8:	4b02      	ldr	r3, [pc, #8]	; (800d2f4 <malloc+0xc>)
 800d2ea:	4601      	mov	r1, r0
 800d2ec:	6818      	ldr	r0, [r3, #0]
 800d2ee:	f000 b823 	b.w	800d338 <_malloc_r>
 800d2f2:	bf00      	nop
 800d2f4:	24000070 	.word	0x24000070

0800d2f8 <sbrk_aligned>:
 800d2f8:	b570      	push	{r4, r5, r6, lr}
 800d2fa:	4e0e      	ldr	r6, [pc, #56]	; (800d334 <sbrk_aligned+0x3c>)
 800d2fc:	460c      	mov	r4, r1
 800d2fe:	6831      	ldr	r1, [r6, #0]
 800d300:	4605      	mov	r5, r0
 800d302:	b911      	cbnz	r1, 800d30a <sbrk_aligned+0x12>
 800d304:	f001 f808 	bl	800e318 <_sbrk_r>
 800d308:	6030      	str	r0, [r6, #0]
 800d30a:	4621      	mov	r1, r4
 800d30c:	4628      	mov	r0, r5
 800d30e:	f001 f803 	bl	800e318 <_sbrk_r>
 800d312:	1c43      	adds	r3, r0, #1
 800d314:	d00a      	beq.n	800d32c <sbrk_aligned+0x34>
 800d316:	1cc4      	adds	r4, r0, #3
 800d318:	f024 0403 	bic.w	r4, r4, #3
 800d31c:	42a0      	cmp	r0, r4
 800d31e:	d007      	beq.n	800d330 <sbrk_aligned+0x38>
 800d320:	1a21      	subs	r1, r4, r0
 800d322:	4628      	mov	r0, r5
 800d324:	f000 fff8 	bl	800e318 <_sbrk_r>
 800d328:	3001      	adds	r0, #1
 800d32a:	d101      	bne.n	800d330 <sbrk_aligned+0x38>
 800d32c:	f04f 34ff 	mov.w	r4, #4294967295
 800d330:	4620      	mov	r0, r4
 800d332:	bd70      	pop	{r4, r5, r6, pc}
 800d334:	24062028 	.word	0x24062028

0800d338 <_malloc_r>:
 800d338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d33c:	1ccd      	adds	r5, r1, #3
 800d33e:	f025 0503 	bic.w	r5, r5, #3
 800d342:	3508      	adds	r5, #8
 800d344:	2d0c      	cmp	r5, #12
 800d346:	bf38      	it	cc
 800d348:	250c      	movcc	r5, #12
 800d34a:	2d00      	cmp	r5, #0
 800d34c:	4607      	mov	r7, r0
 800d34e:	db01      	blt.n	800d354 <_malloc_r+0x1c>
 800d350:	42a9      	cmp	r1, r5
 800d352:	d905      	bls.n	800d360 <_malloc_r+0x28>
 800d354:	230c      	movs	r3, #12
 800d356:	603b      	str	r3, [r7, #0]
 800d358:	2600      	movs	r6, #0
 800d35a:	4630      	mov	r0, r6
 800d35c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d360:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d434 <_malloc_r+0xfc>
 800d364:	f000 f868 	bl	800d438 <__malloc_lock>
 800d368:	f8d8 3000 	ldr.w	r3, [r8]
 800d36c:	461c      	mov	r4, r3
 800d36e:	bb5c      	cbnz	r4, 800d3c8 <_malloc_r+0x90>
 800d370:	4629      	mov	r1, r5
 800d372:	4638      	mov	r0, r7
 800d374:	f7ff ffc0 	bl	800d2f8 <sbrk_aligned>
 800d378:	1c43      	adds	r3, r0, #1
 800d37a:	4604      	mov	r4, r0
 800d37c:	d155      	bne.n	800d42a <_malloc_r+0xf2>
 800d37e:	f8d8 4000 	ldr.w	r4, [r8]
 800d382:	4626      	mov	r6, r4
 800d384:	2e00      	cmp	r6, #0
 800d386:	d145      	bne.n	800d414 <_malloc_r+0xdc>
 800d388:	2c00      	cmp	r4, #0
 800d38a:	d048      	beq.n	800d41e <_malloc_r+0xe6>
 800d38c:	6823      	ldr	r3, [r4, #0]
 800d38e:	4631      	mov	r1, r6
 800d390:	4638      	mov	r0, r7
 800d392:	eb04 0903 	add.w	r9, r4, r3
 800d396:	f000 ffbf 	bl	800e318 <_sbrk_r>
 800d39a:	4581      	cmp	r9, r0
 800d39c:	d13f      	bne.n	800d41e <_malloc_r+0xe6>
 800d39e:	6821      	ldr	r1, [r4, #0]
 800d3a0:	1a6d      	subs	r5, r5, r1
 800d3a2:	4629      	mov	r1, r5
 800d3a4:	4638      	mov	r0, r7
 800d3a6:	f7ff ffa7 	bl	800d2f8 <sbrk_aligned>
 800d3aa:	3001      	adds	r0, #1
 800d3ac:	d037      	beq.n	800d41e <_malloc_r+0xe6>
 800d3ae:	6823      	ldr	r3, [r4, #0]
 800d3b0:	442b      	add	r3, r5
 800d3b2:	6023      	str	r3, [r4, #0]
 800d3b4:	f8d8 3000 	ldr.w	r3, [r8]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d038      	beq.n	800d42e <_malloc_r+0xf6>
 800d3bc:	685a      	ldr	r2, [r3, #4]
 800d3be:	42a2      	cmp	r2, r4
 800d3c0:	d12b      	bne.n	800d41a <_malloc_r+0xe2>
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	605a      	str	r2, [r3, #4]
 800d3c6:	e00f      	b.n	800d3e8 <_malloc_r+0xb0>
 800d3c8:	6822      	ldr	r2, [r4, #0]
 800d3ca:	1b52      	subs	r2, r2, r5
 800d3cc:	d41f      	bmi.n	800d40e <_malloc_r+0xd6>
 800d3ce:	2a0b      	cmp	r2, #11
 800d3d0:	d917      	bls.n	800d402 <_malloc_r+0xca>
 800d3d2:	1961      	adds	r1, r4, r5
 800d3d4:	42a3      	cmp	r3, r4
 800d3d6:	6025      	str	r5, [r4, #0]
 800d3d8:	bf18      	it	ne
 800d3da:	6059      	strne	r1, [r3, #4]
 800d3dc:	6863      	ldr	r3, [r4, #4]
 800d3de:	bf08      	it	eq
 800d3e0:	f8c8 1000 	streq.w	r1, [r8]
 800d3e4:	5162      	str	r2, [r4, r5]
 800d3e6:	604b      	str	r3, [r1, #4]
 800d3e8:	4638      	mov	r0, r7
 800d3ea:	f104 060b 	add.w	r6, r4, #11
 800d3ee:	f000 f829 	bl	800d444 <__malloc_unlock>
 800d3f2:	f026 0607 	bic.w	r6, r6, #7
 800d3f6:	1d23      	adds	r3, r4, #4
 800d3f8:	1af2      	subs	r2, r6, r3
 800d3fa:	d0ae      	beq.n	800d35a <_malloc_r+0x22>
 800d3fc:	1b9b      	subs	r3, r3, r6
 800d3fe:	50a3      	str	r3, [r4, r2]
 800d400:	e7ab      	b.n	800d35a <_malloc_r+0x22>
 800d402:	42a3      	cmp	r3, r4
 800d404:	6862      	ldr	r2, [r4, #4]
 800d406:	d1dd      	bne.n	800d3c4 <_malloc_r+0x8c>
 800d408:	f8c8 2000 	str.w	r2, [r8]
 800d40c:	e7ec      	b.n	800d3e8 <_malloc_r+0xb0>
 800d40e:	4623      	mov	r3, r4
 800d410:	6864      	ldr	r4, [r4, #4]
 800d412:	e7ac      	b.n	800d36e <_malloc_r+0x36>
 800d414:	4634      	mov	r4, r6
 800d416:	6876      	ldr	r6, [r6, #4]
 800d418:	e7b4      	b.n	800d384 <_malloc_r+0x4c>
 800d41a:	4613      	mov	r3, r2
 800d41c:	e7cc      	b.n	800d3b8 <_malloc_r+0x80>
 800d41e:	230c      	movs	r3, #12
 800d420:	603b      	str	r3, [r7, #0]
 800d422:	4638      	mov	r0, r7
 800d424:	f000 f80e 	bl	800d444 <__malloc_unlock>
 800d428:	e797      	b.n	800d35a <_malloc_r+0x22>
 800d42a:	6025      	str	r5, [r4, #0]
 800d42c:	e7dc      	b.n	800d3e8 <_malloc_r+0xb0>
 800d42e:	605b      	str	r3, [r3, #4]
 800d430:	deff      	udf	#255	; 0xff
 800d432:	bf00      	nop
 800d434:	24062024 	.word	0x24062024

0800d438 <__malloc_lock>:
 800d438:	4801      	ldr	r0, [pc, #4]	; (800d440 <__malloc_lock+0x8>)
 800d43a:	f7ff b910 	b.w	800c65e <__retarget_lock_acquire_recursive>
 800d43e:	bf00      	nop
 800d440:	24062020 	.word	0x24062020

0800d444 <__malloc_unlock>:
 800d444:	4801      	ldr	r0, [pc, #4]	; (800d44c <__malloc_unlock+0x8>)
 800d446:	f7ff b90b 	b.w	800c660 <__retarget_lock_release_recursive>
 800d44a:	bf00      	nop
 800d44c:	24062020 	.word	0x24062020

0800d450 <_Balloc>:
 800d450:	b570      	push	{r4, r5, r6, lr}
 800d452:	69c6      	ldr	r6, [r0, #28]
 800d454:	4604      	mov	r4, r0
 800d456:	460d      	mov	r5, r1
 800d458:	b976      	cbnz	r6, 800d478 <_Balloc+0x28>
 800d45a:	2010      	movs	r0, #16
 800d45c:	f7ff ff44 	bl	800d2e8 <malloc>
 800d460:	4602      	mov	r2, r0
 800d462:	61e0      	str	r0, [r4, #28]
 800d464:	b920      	cbnz	r0, 800d470 <_Balloc+0x20>
 800d466:	4b18      	ldr	r3, [pc, #96]	; (800d4c8 <_Balloc+0x78>)
 800d468:	4818      	ldr	r0, [pc, #96]	; (800d4cc <_Balloc+0x7c>)
 800d46a:	216b      	movs	r1, #107	; 0x6b
 800d46c:	f000 ff72 	bl	800e354 <__assert_func>
 800d470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d474:	6006      	str	r6, [r0, #0]
 800d476:	60c6      	str	r6, [r0, #12]
 800d478:	69e6      	ldr	r6, [r4, #28]
 800d47a:	68f3      	ldr	r3, [r6, #12]
 800d47c:	b183      	cbz	r3, 800d4a0 <_Balloc+0x50>
 800d47e:	69e3      	ldr	r3, [r4, #28]
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d486:	b9b8      	cbnz	r0, 800d4b8 <_Balloc+0x68>
 800d488:	2101      	movs	r1, #1
 800d48a:	fa01 f605 	lsl.w	r6, r1, r5
 800d48e:	1d72      	adds	r2, r6, #5
 800d490:	0092      	lsls	r2, r2, #2
 800d492:	4620      	mov	r0, r4
 800d494:	f000 ff7c 	bl	800e390 <_calloc_r>
 800d498:	b160      	cbz	r0, 800d4b4 <_Balloc+0x64>
 800d49a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d49e:	e00e      	b.n	800d4be <_Balloc+0x6e>
 800d4a0:	2221      	movs	r2, #33	; 0x21
 800d4a2:	2104      	movs	r1, #4
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	f000 ff73 	bl	800e390 <_calloc_r>
 800d4aa:	69e3      	ldr	r3, [r4, #28]
 800d4ac:	60f0      	str	r0, [r6, #12]
 800d4ae:	68db      	ldr	r3, [r3, #12]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d1e4      	bne.n	800d47e <_Balloc+0x2e>
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	bd70      	pop	{r4, r5, r6, pc}
 800d4b8:	6802      	ldr	r2, [r0, #0]
 800d4ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d4be:	2300      	movs	r3, #0
 800d4c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4c4:	e7f7      	b.n	800d4b6 <_Balloc+0x66>
 800d4c6:	bf00      	nop
 800d4c8:	0800e5f1 	.word	0x0800e5f1
 800d4cc:	0800e671 	.word	0x0800e671

0800d4d0 <_Bfree>:
 800d4d0:	b570      	push	{r4, r5, r6, lr}
 800d4d2:	69c6      	ldr	r6, [r0, #28]
 800d4d4:	4605      	mov	r5, r0
 800d4d6:	460c      	mov	r4, r1
 800d4d8:	b976      	cbnz	r6, 800d4f8 <_Bfree+0x28>
 800d4da:	2010      	movs	r0, #16
 800d4dc:	f7ff ff04 	bl	800d2e8 <malloc>
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	61e8      	str	r0, [r5, #28]
 800d4e4:	b920      	cbnz	r0, 800d4f0 <_Bfree+0x20>
 800d4e6:	4b09      	ldr	r3, [pc, #36]	; (800d50c <_Bfree+0x3c>)
 800d4e8:	4809      	ldr	r0, [pc, #36]	; (800d510 <_Bfree+0x40>)
 800d4ea:	218f      	movs	r1, #143	; 0x8f
 800d4ec:	f000 ff32 	bl	800e354 <__assert_func>
 800d4f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4f4:	6006      	str	r6, [r0, #0]
 800d4f6:	60c6      	str	r6, [r0, #12]
 800d4f8:	b13c      	cbz	r4, 800d50a <_Bfree+0x3a>
 800d4fa:	69eb      	ldr	r3, [r5, #28]
 800d4fc:	6862      	ldr	r2, [r4, #4]
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d504:	6021      	str	r1, [r4, #0]
 800d506:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d50a:	bd70      	pop	{r4, r5, r6, pc}
 800d50c:	0800e5f1 	.word	0x0800e5f1
 800d510:	0800e671 	.word	0x0800e671

0800d514 <__multadd>:
 800d514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d518:	690d      	ldr	r5, [r1, #16]
 800d51a:	4607      	mov	r7, r0
 800d51c:	460c      	mov	r4, r1
 800d51e:	461e      	mov	r6, r3
 800d520:	f101 0c14 	add.w	ip, r1, #20
 800d524:	2000      	movs	r0, #0
 800d526:	f8dc 3000 	ldr.w	r3, [ip]
 800d52a:	b299      	uxth	r1, r3
 800d52c:	fb02 6101 	mla	r1, r2, r1, r6
 800d530:	0c1e      	lsrs	r6, r3, #16
 800d532:	0c0b      	lsrs	r3, r1, #16
 800d534:	fb02 3306 	mla	r3, r2, r6, r3
 800d538:	b289      	uxth	r1, r1
 800d53a:	3001      	adds	r0, #1
 800d53c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d540:	4285      	cmp	r5, r0
 800d542:	f84c 1b04 	str.w	r1, [ip], #4
 800d546:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d54a:	dcec      	bgt.n	800d526 <__multadd+0x12>
 800d54c:	b30e      	cbz	r6, 800d592 <__multadd+0x7e>
 800d54e:	68a3      	ldr	r3, [r4, #8]
 800d550:	42ab      	cmp	r3, r5
 800d552:	dc19      	bgt.n	800d588 <__multadd+0x74>
 800d554:	6861      	ldr	r1, [r4, #4]
 800d556:	4638      	mov	r0, r7
 800d558:	3101      	adds	r1, #1
 800d55a:	f7ff ff79 	bl	800d450 <_Balloc>
 800d55e:	4680      	mov	r8, r0
 800d560:	b928      	cbnz	r0, 800d56e <__multadd+0x5a>
 800d562:	4602      	mov	r2, r0
 800d564:	4b0c      	ldr	r3, [pc, #48]	; (800d598 <__multadd+0x84>)
 800d566:	480d      	ldr	r0, [pc, #52]	; (800d59c <__multadd+0x88>)
 800d568:	21ba      	movs	r1, #186	; 0xba
 800d56a:	f000 fef3 	bl	800e354 <__assert_func>
 800d56e:	6922      	ldr	r2, [r4, #16]
 800d570:	3202      	adds	r2, #2
 800d572:	f104 010c 	add.w	r1, r4, #12
 800d576:	0092      	lsls	r2, r2, #2
 800d578:	300c      	adds	r0, #12
 800d57a:	f000 fedd 	bl	800e338 <memcpy>
 800d57e:	4621      	mov	r1, r4
 800d580:	4638      	mov	r0, r7
 800d582:	f7ff ffa5 	bl	800d4d0 <_Bfree>
 800d586:	4644      	mov	r4, r8
 800d588:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d58c:	3501      	adds	r5, #1
 800d58e:	615e      	str	r6, [r3, #20]
 800d590:	6125      	str	r5, [r4, #16]
 800d592:	4620      	mov	r0, r4
 800d594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d598:	0800e660 	.word	0x0800e660
 800d59c:	0800e671 	.word	0x0800e671

0800d5a0 <__hi0bits>:
 800d5a0:	0c03      	lsrs	r3, r0, #16
 800d5a2:	041b      	lsls	r3, r3, #16
 800d5a4:	b9d3      	cbnz	r3, 800d5dc <__hi0bits+0x3c>
 800d5a6:	0400      	lsls	r0, r0, #16
 800d5a8:	2310      	movs	r3, #16
 800d5aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d5ae:	bf04      	itt	eq
 800d5b0:	0200      	lsleq	r0, r0, #8
 800d5b2:	3308      	addeq	r3, #8
 800d5b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d5b8:	bf04      	itt	eq
 800d5ba:	0100      	lsleq	r0, r0, #4
 800d5bc:	3304      	addeq	r3, #4
 800d5be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d5c2:	bf04      	itt	eq
 800d5c4:	0080      	lsleq	r0, r0, #2
 800d5c6:	3302      	addeq	r3, #2
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	db05      	blt.n	800d5d8 <__hi0bits+0x38>
 800d5cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d5d0:	f103 0301 	add.w	r3, r3, #1
 800d5d4:	bf08      	it	eq
 800d5d6:	2320      	moveq	r3, #32
 800d5d8:	4618      	mov	r0, r3
 800d5da:	4770      	bx	lr
 800d5dc:	2300      	movs	r3, #0
 800d5de:	e7e4      	b.n	800d5aa <__hi0bits+0xa>

0800d5e0 <__lo0bits>:
 800d5e0:	6803      	ldr	r3, [r0, #0]
 800d5e2:	f013 0207 	ands.w	r2, r3, #7
 800d5e6:	d00c      	beq.n	800d602 <__lo0bits+0x22>
 800d5e8:	07d9      	lsls	r1, r3, #31
 800d5ea:	d422      	bmi.n	800d632 <__lo0bits+0x52>
 800d5ec:	079a      	lsls	r2, r3, #30
 800d5ee:	bf49      	itett	mi
 800d5f0:	085b      	lsrmi	r3, r3, #1
 800d5f2:	089b      	lsrpl	r3, r3, #2
 800d5f4:	6003      	strmi	r3, [r0, #0]
 800d5f6:	2201      	movmi	r2, #1
 800d5f8:	bf5c      	itt	pl
 800d5fa:	6003      	strpl	r3, [r0, #0]
 800d5fc:	2202      	movpl	r2, #2
 800d5fe:	4610      	mov	r0, r2
 800d600:	4770      	bx	lr
 800d602:	b299      	uxth	r1, r3
 800d604:	b909      	cbnz	r1, 800d60a <__lo0bits+0x2a>
 800d606:	0c1b      	lsrs	r3, r3, #16
 800d608:	2210      	movs	r2, #16
 800d60a:	b2d9      	uxtb	r1, r3
 800d60c:	b909      	cbnz	r1, 800d612 <__lo0bits+0x32>
 800d60e:	3208      	adds	r2, #8
 800d610:	0a1b      	lsrs	r3, r3, #8
 800d612:	0719      	lsls	r1, r3, #28
 800d614:	bf04      	itt	eq
 800d616:	091b      	lsreq	r3, r3, #4
 800d618:	3204      	addeq	r2, #4
 800d61a:	0799      	lsls	r1, r3, #30
 800d61c:	bf04      	itt	eq
 800d61e:	089b      	lsreq	r3, r3, #2
 800d620:	3202      	addeq	r2, #2
 800d622:	07d9      	lsls	r1, r3, #31
 800d624:	d403      	bmi.n	800d62e <__lo0bits+0x4e>
 800d626:	085b      	lsrs	r3, r3, #1
 800d628:	f102 0201 	add.w	r2, r2, #1
 800d62c:	d003      	beq.n	800d636 <__lo0bits+0x56>
 800d62e:	6003      	str	r3, [r0, #0]
 800d630:	e7e5      	b.n	800d5fe <__lo0bits+0x1e>
 800d632:	2200      	movs	r2, #0
 800d634:	e7e3      	b.n	800d5fe <__lo0bits+0x1e>
 800d636:	2220      	movs	r2, #32
 800d638:	e7e1      	b.n	800d5fe <__lo0bits+0x1e>
	...

0800d63c <__i2b>:
 800d63c:	b510      	push	{r4, lr}
 800d63e:	460c      	mov	r4, r1
 800d640:	2101      	movs	r1, #1
 800d642:	f7ff ff05 	bl	800d450 <_Balloc>
 800d646:	4602      	mov	r2, r0
 800d648:	b928      	cbnz	r0, 800d656 <__i2b+0x1a>
 800d64a:	4b05      	ldr	r3, [pc, #20]	; (800d660 <__i2b+0x24>)
 800d64c:	4805      	ldr	r0, [pc, #20]	; (800d664 <__i2b+0x28>)
 800d64e:	f240 1145 	movw	r1, #325	; 0x145
 800d652:	f000 fe7f 	bl	800e354 <__assert_func>
 800d656:	2301      	movs	r3, #1
 800d658:	6144      	str	r4, [r0, #20]
 800d65a:	6103      	str	r3, [r0, #16]
 800d65c:	bd10      	pop	{r4, pc}
 800d65e:	bf00      	nop
 800d660:	0800e660 	.word	0x0800e660
 800d664:	0800e671 	.word	0x0800e671

0800d668 <__multiply>:
 800d668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d66c:	4691      	mov	r9, r2
 800d66e:	690a      	ldr	r2, [r1, #16]
 800d670:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d674:	429a      	cmp	r2, r3
 800d676:	bfb8      	it	lt
 800d678:	460b      	movlt	r3, r1
 800d67a:	460c      	mov	r4, r1
 800d67c:	bfbc      	itt	lt
 800d67e:	464c      	movlt	r4, r9
 800d680:	4699      	movlt	r9, r3
 800d682:	6927      	ldr	r7, [r4, #16]
 800d684:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d688:	68a3      	ldr	r3, [r4, #8]
 800d68a:	6861      	ldr	r1, [r4, #4]
 800d68c:	eb07 060a 	add.w	r6, r7, sl
 800d690:	42b3      	cmp	r3, r6
 800d692:	b085      	sub	sp, #20
 800d694:	bfb8      	it	lt
 800d696:	3101      	addlt	r1, #1
 800d698:	f7ff feda 	bl	800d450 <_Balloc>
 800d69c:	b930      	cbnz	r0, 800d6ac <__multiply+0x44>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	4b44      	ldr	r3, [pc, #272]	; (800d7b4 <__multiply+0x14c>)
 800d6a2:	4845      	ldr	r0, [pc, #276]	; (800d7b8 <__multiply+0x150>)
 800d6a4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d6a8:	f000 fe54 	bl	800e354 <__assert_func>
 800d6ac:	f100 0514 	add.w	r5, r0, #20
 800d6b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d6b4:	462b      	mov	r3, r5
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	4543      	cmp	r3, r8
 800d6ba:	d321      	bcc.n	800d700 <__multiply+0x98>
 800d6bc:	f104 0314 	add.w	r3, r4, #20
 800d6c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d6c4:	f109 0314 	add.w	r3, r9, #20
 800d6c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d6cc:	9202      	str	r2, [sp, #8]
 800d6ce:	1b3a      	subs	r2, r7, r4
 800d6d0:	3a15      	subs	r2, #21
 800d6d2:	f022 0203 	bic.w	r2, r2, #3
 800d6d6:	3204      	adds	r2, #4
 800d6d8:	f104 0115 	add.w	r1, r4, #21
 800d6dc:	428f      	cmp	r7, r1
 800d6de:	bf38      	it	cc
 800d6e0:	2204      	movcc	r2, #4
 800d6e2:	9201      	str	r2, [sp, #4]
 800d6e4:	9a02      	ldr	r2, [sp, #8]
 800d6e6:	9303      	str	r3, [sp, #12]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d80c      	bhi.n	800d706 <__multiply+0x9e>
 800d6ec:	2e00      	cmp	r6, #0
 800d6ee:	dd03      	ble.n	800d6f8 <__multiply+0x90>
 800d6f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d05b      	beq.n	800d7b0 <__multiply+0x148>
 800d6f8:	6106      	str	r6, [r0, #16]
 800d6fa:	b005      	add	sp, #20
 800d6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d700:	f843 2b04 	str.w	r2, [r3], #4
 800d704:	e7d8      	b.n	800d6b8 <__multiply+0x50>
 800d706:	f8b3 a000 	ldrh.w	sl, [r3]
 800d70a:	f1ba 0f00 	cmp.w	sl, #0
 800d70e:	d024      	beq.n	800d75a <__multiply+0xf2>
 800d710:	f104 0e14 	add.w	lr, r4, #20
 800d714:	46a9      	mov	r9, r5
 800d716:	f04f 0c00 	mov.w	ip, #0
 800d71a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d71e:	f8d9 1000 	ldr.w	r1, [r9]
 800d722:	fa1f fb82 	uxth.w	fp, r2
 800d726:	b289      	uxth	r1, r1
 800d728:	fb0a 110b 	mla	r1, sl, fp, r1
 800d72c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d730:	f8d9 2000 	ldr.w	r2, [r9]
 800d734:	4461      	add	r1, ip
 800d736:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d73a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d73e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d742:	b289      	uxth	r1, r1
 800d744:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d748:	4577      	cmp	r7, lr
 800d74a:	f849 1b04 	str.w	r1, [r9], #4
 800d74e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d752:	d8e2      	bhi.n	800d71a <__multiply+0xb2>
 800d754:	9a01      	ldr	r2, [sp, #4]
 800d756:	f845 c002 	str.w	ip, [r5, r2]
 800d75a:	9a03      	ldr	r2, [sp, #12]
 800d75c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d760:	3304      	adds	r3, #4
 800d762:	f1b9 0f00 	cmp.w	r9, #0
 800d766:	d021      	beq.n	800d7ac <__multiply+0x144>
 800d768:	6829      	ldr	r1, [r5, #0]
 800d76a:	f104 0c14 	add.w	ip, r4, #20
 800d76e:	46ae      	mov	lr, r5
 800d770:	f04f 0a00 	mov.w	sl, #0
 800d774:	f8bc b000 	ldrh.w	fp, [ip]
 800d778:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d77c:	fb09 220b 	mla	r2, r9, fp, r2
 800d780:	4452      	add	r2, sl
 800d782:	b289      	uxth	r1, r1
 800d784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d788:	f84e 1b04 	str.w	r1, [lr], #4
 800d78c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d790:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d794:	f8be 1000 	ldrh.w	r1, [lr]
 800d798:	fb09 110a 	mla	r1, r9, sl, r1
 800d79c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d7a0:	4567      	cmp	r7, ip
 800d7a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d7a6:	d8e5      	bhi.n	800d774 <__multiply+0x10c>
 800d7a8:	9a01      	ldr	r2, [sp, #4]
 800d7aa:	50a9      	str	r1, [r5, r2]
 800d7ac:	3504      	adds	r5, #4
 800d7ae:	e799      	b.n	800d6e4 <__multiply+0x7c>
 800d7b0:	3e01      	subs	r6, #1
 800d7b2:	e79b      	b.n	800d6ec <__multiply+0x84>
 800d7b4:	0800e660 	.word	0x0800e660
 800d7b8:	0800e671 	.word	0x0800e671

0800d7bc <__pow5mult>:
 800d7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7c0:	4615      	mov	r5, r2
 800d7c2:	f012 0203 	ands.w	r2, r2, #3
 800d7c6:	4606      	mov	r6, r0
 800d7c8:	460f      	mov	r7, r1
 800d7ca:	d007      	beq.n	800d7dc <__pow5mult+0x20>
 800d7cc:	4c25      	ldr	r4, [pc, #148]	; (800d864 <__pow5mult+0xa8>)
 800d7ce:	3a01      	subs	r2, #1
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7d6:	f7ff fe9d 	bl	800d514 <__multadd>
 800d7da:	4607      	mov	r7, r0
 800d7dc:	10ad      	asrs	r5, r5, #2
 800d7de:	d03d      	beq.n	800d85c <__pow5mult+0xa0>
 800d7e0:	69f4      	ldr	r4, [r6, #28]
 800d7e2:	b97c      	cbnz	r4, 800d804 <__pow5mult+0x48>
 800d7e4:	2010      	movs	r0, #16
 800d7e6:	f7ff fd7f 	bl	800d2e8 <malloc>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	61f0      	str	r0, [r6, #28]
 800d7ee:	b928      	cbnz	r0, 800d7fc <__pow5mult+0x40>
 800d7f0:	4b1d      	ldr	r3, [pc, #116]	; (800d868 <__pow5mult+0xac>)
 800d7f2:	481e      	ldr	r0, [pc, #120]	; (800d86c <__pow5mult+0xb0>)
 800d7f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d7f8:	f000 fdac 	bl	800e354 <__assert_func>
 800d7fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d800:	6004      	str	r4, [r0, #0]
 800d802:	60c4      	str	r4, [r0, #12]
 800d804:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d808:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d80c:	b94c      	cbnz	r4, 800d822 <__pow5mult+0x66>
 800d80e:	f240 2171 	movw	r1, #625	; 0x271
 800d812:	4630      	mov	r0, r6
 800d814:	f7ff ff12 	bl	800d63c <__i2b>
 800d818:	2300      	movs	r3, #0
 800d81a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d81e:	4604      	mov	r4, r0
 800d820:	6003      	str	r3, [r0, #0]
 800d822:	f04f 0900 	mov.w	r9, #0
 800d826:	07eb      	lsls	r3, r5, #31
 800d828:	d50a      	bpl.n	800d840 <__pow5mult+0x84>
 800d82a:	4639      	mov	r1, r7
 800d82c:	4622      	mov	r2, r4
 800d82e:	4630      	mov	r0, r6
 800d830:	f7ff ff1a 	bl	800d668 <__multiply>
 800d834:	4639      	mov	r1, r7
 800d836:	4680      	mov	r8, r0
 800d838:	4630      	mov	r0, r6
 800d83a:	f7ff fe49 	bl	800d4d0 <_Bfree>
 800d83e:	4647      	mov	r7, r8
 800d840:	106d      	asrs	r5, r5, #1
 800d842:	d00b      	beq.n	800d85c <__pow5mult+0xa0>
 800d844:	6820      	ldr	r0, [r4, #0]
 800d846:	b938      	cbnz	r0, 800d858 <__pow5mult+0x9c>
 800d848:	4622      	mov	r2, r4
 800d84a:	4621      	mov	r1, r4
 800d84c:	4630      	mov	r0, r6
 800d84e:	f7ff ff0b 	bl	800d668 <__multiply>
 800d852:	6020      	str	r0, [r4, #0]
 800d854:	f8c0 9000 	str.w	r9, [r0]
 800d858:	4604      	mov	r4, r0
 800d85a:	e7e4      	b.n	800d826 <__pow5mult+0x6a>
 800d85c:	4638      	mov	r0, r7
 800d85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d862:	bf00      	nop
 800d864:	0800e7c0 	.word	0x0800e7c0
 800d868:	0800e5f1 	.word	0x0800e5f1
 800d86c:	0800e671 	.word	0x0800e671

0800d870 <__lshift>:
 800d870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d874:	460c      	mov	r4, r1
 800d876:	6849      	ldr	r1, [r1, #4]
 800d878:	6923      	ldr	r3, [r4, #16]
 800d87a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d87e:	68a3      	ldr	r3, [r4, #8]
 800d880:	4607      	mov	r7, r0
 800d882:	4691      	mov	r9, r2
 800d884:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d888:	f108 0601 	add.w	r6, r8, #1
 800d88c:	42b3      	cmp	r3, r6
 800d88e:	db0b      	blt.n	800d8a8 <__lshift+0x38>
 800d890:	4638      	mov	r0, r7
 800d892:	f7ff fddd 	bl	800d450 <_Balloc>
 800d896:	4605      	mov	r5, r0
 800d898:	b948      	cbnz	r0, 800d8ae <__lshift+0x3e>
 800d89a:	4602      	mov	r2, r0
 800d89c:	4b28      	ldr	r3, [pc, #160]	; (800d940 <__lshift+0xd0>)
 800d89e:	4829      	ldr	r0, [pc, #164]	; (800d944 <__lshift+0xd4>)
 800d8a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d8a4:	f000 fd56 	bl	800e354 <__assert_func>
 800d8a8:	3101      	adds	r1, #1
 800d8aa:	005b      	lsls	r3, r3, #1
 800d8ac:	e7ee      	b.n	800d88c <__lshift+0x1c>
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	f100 0114 	add.w	r1, r0, #20
 800d8b4:	f100 0210 	add.w	r2, r0, #16
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	4553      	cmp	r3, sl
 800d8bc:	db33      	blt.n	800d926 <__lshift+0xb6>
 800d8be:	6920      	ldr	r0, [r4, #16]
 800d8c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d8c4:	f104 0314 	add.w	r3, r4, #20
 800d8c8:	f019 091f 	ands.w	r9, r9, #31
 800d8cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d8d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d8d4:	d02b      	beq.n	800d92e <__lshift+0xbe>
 800d8d6:	f1c9 0e20 	rsb	lr, r9, #32
 800d8da:	468a      	mov	sl, r1
 800d8dc:	2200      	movs	r2, #0
 800d8de:	6818      	ldr	r0, [r3, #0]
 800d8e0:	fa00 f009 	lsl.w	r0, r0, r9
 800d8e4:	4310      	orrs	r0, r2
 800d8e6:	f84a 0b04 	str.w	r0, [sl], #4
 800d8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ee:	459c      	cmp	ip, r3
 800d8f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d8f4:	d8f3      	bhi.n	800d8de <__lshift+0x6e>
 800d8f6:	ebac 0304 	sub.w	r3, ip, r4
 800d8fa:	3b15      	subs	r3, #21
 800d8fc:	f023 0303 	bic.w	r3, r3, #3
 800d900:	3304      	adds	r3, #4
 800d902:	f104 0015 	add.w	r0, r4, #21
 800d906:	4584      	cmp	ip, r0
 800d908:	bf38      	it	cc
 800d90a:	2304      	movcc	r3, #4
 800d90c:	50ca      	str	r2, [r1, r3]
 800d90e:	b10a      	cbz	r2, 800d914 <__lshift+0xa4>
 800d910:	f108 0602 	add.w	r6, r8, #2
 800d914:	3e01      	subs	r6, #1
 800d916:	4638      	mov	r0, r7
 800d918:	612e      	str	r6, [r5, #16]
 800d91a:	4621      	mov	r1, r4
 800d91c:	f7ff fdd8 	bl	800d4d0 <_Bfree>
 800d920:	4628      	mov	r0, r5
 800d922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d926:	f842 0f04 	str.w	r0, [r2, #4]!
 800d92a:	3301      	adds	r3, #1
 800d92c:	e7c5      	b.n	800d8ba <__lshift+0x4a>
 800d92e:	3904      	subs	r1, #4
 800d930:	f853 2b04 	ldr.w	r2, [r3], #4
 800d934:	f841 2f04 	str.w	r2, [r1, #4]!
 800d938:	459c      	cmp	ip, r3
 800d93a:	d8f9      	bhi.n	800d930 <__lshift+0xc0>
 800d93c:	e7ea      	b.n	800d914 <__lshift+0xa4>
 800d93e:	bf00      	nop
 800d940:	0800e660 	.word	0x0800e660
 800d944:	0800e671 	.word	0x0800e671

0800d948 <__mcmp>:
 800d948:	b530      	push	{r4, r5, lr}
 800d94a:	6902      	ldr	r2, [r0, #16]
 800d94c:	690c      	ldr	r4, [r1, #16]
 800d94e:	1b12      	subs	r2, r2, r4
 800d950:	d10e      	bne.n	800d970 <__mcmp+0x28>
 800d952:	f100 0314 	add.w	r3, r0, #20
 800d956:	3114      	adds	r1, #20
 800d958:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d95c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d960:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d964:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d968:	42a5      	cmp	r5, r4
 800d96a:	d003      	beq.n	800d974 <__mcmp+0x2c>
 800d96c:	d305      	bcc.n	800d97a <__mcmp+0x32>
 800d96e:	2201      	movs	r2, #1
 800d970:	4610      	mov	r0, r2
 800d972:	bd30      	pop	{r4, r5, pc}
 800d974:	4283      	cmp	r3, r0
 800d976:	d3f3      	bcc.n	800d960 <__mcmp+0x18>
 800d978:	e7fa      	b.n	800d970 <__mcmp+0x28>
 800d97a:	f04f 32ff 	mov.w	r2, #4294967295
 800d97e:	e7f7      	b.n	800d970 <__mcmp+0x28>

0800d980 <__mdiff>:
 800d980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d984:	460c      	mov	r4, r1
 800d986:	4606      	mov	r6, r0
 800d988:	4611      	mov	r1, r2
 800d98a:	4620      	mov	r0, r4
 800d98c:	4690      	mov	r8, r2
 800d98e:	f7ff ffdb 	bl	800d948 <__mcmp>
 800d992:	1e05      	subs	r5, r0, #0
 800d994:	d110      	bne.n	800d9b8 <__mdiff+0x38>
 800d996:	4629      	mov	r1, r5
 800d998:	4630      	mov	r0, r6
 800d99a:	f7ff fd59 	bl	800d450 <_Balloc>
 800d99e:	b930      	cbnz	r0, 800d9ae <__mdiff+0x2e>
 800d9a0:	4b3a      	ldr	r3, [pc, #232]	; (800da8c <__mdiff+0x10c>)
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	f240 2137 	movw	r1, #567	; 0x237
 800d9a8:	4839      	ldr	r0, [pc, #228]	; (800da90 <__mdiff+0x110>)
 800d9aa:	f000 fcd3 	bl	800e354 <__assert_func>
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d9b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9b8:	bfa4      	itt	ge
 800d9ba:	4643      	movge	r3, r8
 800d9bc:	46a0      	movge	r8, r4
 800d9be:	4630      	mov	r0, r6
 800d9c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d9c4:	bfa6      	itte	ge
 800d9c6:	461c      	movge	r4, r3
 800d9c8:	2500      	movge	r5, #0
 800d9ca:	2501      	movlt	r5, #1
 800d9cc:	f7ff fd40 	bl	800d450 <_Balloc>
 800d9d0:	b920      	cbnz	r0, 800d9dc <__mdiff+0x5c>
 800d9d2:	4b2e      	ldr	r3, [pc, #184]	; (800da8c <__mdiff+0x10c>)
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	f240 2145 	movw	r1, #581	; 0x245
 800d9da:	e7e5      	b.n	800d9a8 <__mdiff+0x28>
 800d9dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d9e0:	6926      	ldr	r6, [r4, #16]
 800d9e2:	60c5      	str	r5, [r0, #12]
 800d9e4:	f104 0914 	add.w	r9, r4, #20
 800d9e8:	f108 0514 	add.w	r5, r8, #20
 800d9ec:	f100 0e14 	add.w	lr, r0, #20
 800d9f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d9f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d9f8:	f108 0210 	add.w	r2, r8, #16
 800d9fc:	46f2      	mov	sl, lr
 800d9fe:	2100      	movs	r1, #0
 800da00:	f859 3b04 	ldr.w	r3, [r9], #4
 800da04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800da08:	fa11 f88b 	uxtah	r8, r1, fp
 800da0c:	b299      	uxth	r1, r3
 800da0e:	0c1b      	lsrs	r3, r3, #16
 800da10:	eba8 0801 	sub.w	r8, r8, r1
 800da14:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800da18:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800da1c:	fa1f f888 	uxth.w	r8, r8
 800da20:	1419      	asrs	r1, r3, #16
 800da22:	454e      	cmp	r6, r9
 800da24:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800da28:	f84a 3b04 	str.w	r3, [sl], #4
 800da2c:	d8e8      	bhi.n	800da00 <__mdiff+0x80>
 800da2e:	1b33      	subs	r3, r6, r4
 800da30:	3b15      	subs	r3, #21
 800da32:	f023 0303 	bic.w	r3, r3, #3
 800da36:	3304      	adds	r3, #4
 800da38:	3415      	adds	r4, #21
 800da3a:	42a6      	cmp	r6, r4
 800da3c:	bf38      	it	cc
 800da3e:	2304      	movcc	r3, #4
 800da40:	441d      	add	r5, r3
 800da42:	4473      	add	r3, lr
 800da44:	469e      	mov	lr, r3
 800da46:	462e      	mov	r6, r5
 800da48:	4566      	cmp	r6, ip
 800da4a:	d30e      	bcc.n	800da6a <__mdiff+0xea>
 800da4c:	f10c 0203 	add.w	r2, ip, #3
 800da50:	1b52      	subs	r2, r2, r5
 800da52:	f022 0203 	bic.w	r2, r2, #3
 800da56:	3d03      	subs	r5, #3
 800da58:	45ac      	cmp	ip, r5
 800da5a:	bf38      	it	cc
 800da5c:	2200      	movcc	r2, #0
 800da5e:	4413      	add	r3, r2
 800da60:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800da64:	b17a      	cbz	r2, 800da86 <__mdiff+0x106>
 800da66:	6107      	str	r7, [r0, #16]
 800da68:	e7a4      	b.n	800d9b4 <__mdiff+0x34>
 800da6a:	f856 8b04 	ldr.w	r8, [r6], #4
 800da6e:	fa11 f288 	uxtah	r2, r1, r8
 800da72:	1414      	asrs	r4, r2, #16
 800da74:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800da78:	b292      	uxth	r2, r2
 800da7a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800da7e:	f84e 2b04 	str.w	r2, [lr], #4
 800da82:	1421      	asrs	r1, r4, #16
 800da84:	e7e0      	b.n	800da48 <__mdiff+0xc8>
 800da86:	3f01      	subs	r7, #1
 800da88:	e7ea      	b.n	800da60 <__mdiff+0xe0>
 800da8a:	bf00      	nop
 800da8c:	0800e660 	.word	0x0800e660
 800da90:	0800e671 	.word	0x0800e671

0800da94 <__d2b>:
 800da94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da98:	460f      	mov	r7, r1
 800da9a:	2101      	movs	r1, #1
 800da9c:	ec59 8b10 	vmov	r8, r9, d0
 800daa0:	4616      	mov	r6, r2
 800daa2:	f7ff fcd5 	bl	800d450 <_Balloc>
 800daa6:	4604      	mov	r4, r0
 800daa8:	b930      	cbnz	r0, 800dab8 <__d2b+0x24>
 800daaa:	4602      	mov	r2, r0
 800daac:	4b24      	ldr	r3, [pc, #144]	; (800db40 <__d2b+0xac>)
 800daae:	4825      	ldr	r0, [pc, #148]	; (800db44 <__d2b+0xb0>)
 800dab0:	f240 310f 	movw	r1, #783	; 0x30f
 800dab4:	f000 fc4e 	bl	800e354 <__assert_func>
 800dab8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dabc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dac0:	bb2d      	cbnz	r5, 800db0e <__d2b+0x7a>
 800dac2:	9301      	str	r3, [sp, #4]
 800dac4:	f1b8 0300 	subs.w	r3, r8, #0
 800dac8:	d026      	beq.n	800db18 <__d2b+0x84>
 800daca:	4668      	mov	r0, sp
 800dacc:	9300      	str	r3, [sp, #0]
 800dace:	f7ff fd87 	bl	800d5e0 <__lo0bits>
 800dad2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dad6:	b1e8      	cbz	r0, 800db14 <__d2b+0x80>
 800dad8:	f1c0 0320 	rsb	r3, r0, #32
 800dadc:	fa02 f303 	lsl.w	r3, r2, r3
 800dae0:	430b      	orrs	r3, r1
 800dae2:	40c2      	lsrs	r2, r0
 800dae4:	6163      	str	r3, [r4, #20]
 800dae6:	9201      	str	r2, [sp, #4]
 800dae8:	9b01      	ldr	r3, [sp, #4]
 800daea:	61a3      	str	r3, [r4, #24]
 800daec:	2b00      	cmp	r3, #0
 800daee:	bf14      	ite	ne
 800daf0:	2202      	movne	r2, #2
 800daf2:	2201      	moveq	r2, #1
 800daf4:	6122      	str	r2, [r4, #16]
 800daf6:	b1bd      	cbz	r5, 800db28 <__d2b+0x94>
 800daf8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dafc:	4405      	add	r5, r0
 800dafe:	603d      	str	r5, [r7, #0]
 800db00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db04:	6030      	str	r0, [r6, #0]
 800db06:	4620      	mov	r0, r4
 800db08:	b003      	add	sp, #12
 800db0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db12:	e7d6      	b.n	800dac2 <__d2b+0x2e>
 800db14:	6161      	str	r1, [r4, #20]
 800db16:	e7e7      	b.n	800dae8 <__d2b+0x54>
 800db18:	a801      	add	r0, sp, #4
 800db1a:	f7ff fd61 	bl	800d5e0 <__lo0bits>
 800db1e:	9b01      	ldr	r3, [sp, #4]
 800db20:	6163      	str	r3, [r4, #20]
 800db22:	3020      	adds	r0, #32
 800db24:	2201      	movs	r2, #1
 800db26:	e7e5      	b.n	800daf4 <__d2b+0x60>
 800db28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db30:	6038      	str	r0, [r7, #0]
 800db32:	6918      	ldr	r0, [r3, #16]
 800db34:	f7ff fd34 	bl	800d5a0 <__hi0bits>
 800db38:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db3c:	e7e2      	b.n	800db04 <__d2b+0x70>
 800db3e:	bf00      	nop
 800db40:	0800e660 	.word	0x0800e660
 800db44:	0800e671 	.word	0x0800e671

0800db48 <__ssputs_r>:
 800db48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db4c:	688e      	ldr	r6, [r1, #8]
 800db4e:	461f      	mov	r7, r3
 800db50:	42be      	cmp	r6, r7
 800db52:	680b      	ldr	r3, [r1, #0]
 800db54:	4682      	mov	sl, r0
 800db56:	460c      	mov	r4, r1
 800db58:	4690      	mov	r8, r2
 800db5a:	d82c      	bhi.n	800dbb6 <__ssputs_r+0x6e>
 800db5c:	898a      	ldrh	r2, [r1, #12]
 800db5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db62:	d026      	beq.n	800dbb2 <__ssputs_r+0x6a>
 800db64:	6965      	ldr	r5, [r4, #20]
 800db66:	6909      	ldr	r1, [r1, #16]
 800db68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db6c:	eba3 0901 	sub.w	r9, r3, r1
 800db70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db74:	1c7b      	adds	r3, r7, #1
 800db76:	444b      	add	r3, r9
 800db78:	106d      	asrs	r5, r5, #1
 800db7a:	429d      	cmp	r5, r3
 800db7c:	bf38      	it	cc
 800db7e:	461d      	movcc	r5, r3
 800db80:	0553      	lsls	r3, r2, #21
 800db82:	d527      	bpl.n	800dbd4 <__ssputs_r+0x8c>
 800db84:	4629      	mov	r1, r5
 800db86:	f7ff fbd7 	bl	800d338 <_malloc_r>
 800db8a:	4606      	mov	r6, r0
 800db8c:	b360      	cbz	r0, 800dbe8 <__ssputs_r+0xa0>
 800db8e:	6921      	ldr	r1, [r4, #16]
 800db90:	464a      	mov	r2, r9
 800db92:	f000 fbd1 	bl	800e338 <memcpy>
 800db96:	89a3      	ldrh	r3, [r4, #12]
 800db98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dba0:	81a3      	strh	r3, [r4, #12]
 800dba2:	6126      	str	r6, [r4, #16]
 800dba4:	6165      	str	r5, [r4, #20]
 800dba6:	444e      	add	r6, r9
 800dba8:	eba5 0509 	sub.w	r5, r5, r9
 800dbac:	6026      	str	r6, [r4, #0]
 800dbae:	60a5      	str	r5, [r4, #8]
 800dbb0:	463e      	mov	r6, r7
 800dbb2:	42be      	cmp	r6, r7
 800dbb4:	d900      	bls.n	800dbb8 <__ssputs_r+0x70>
 800dbb6:	463e      	mov	r6, r7
 800dbb8:	6820      	ldr	r0, [r4, #0]
 800dbba:	4632      	mov	r2, r6
 800dbbc:	4641      	mov	r1, r8
 800dbbe:	f000 fb6f 	bl	800e2a0 <memmove>
 800dbc2:	68a3      	ldr	r3, [r4, #8]
 800dbc4:	1b9b      	subs	r3, r3, r6
 800dbc6:	60a3      	str	r3, [r4, #8]
 800dbc8:	6823      	ldr	r3, [r4, #0]
 800dbca:	4433      	add	r3, r6
 800dbcc:	6023      	str	r3, [r4, #0]
 800dbce:	2000      	movs	r0, #0
 800dbd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbd4:	462a      	mov	r2, r5
 800dbd6:	f000 fc03 	bl	800e3e0 <_realloc_r>
 800dbda:	4606      	mov	r6, r0
 800dbdc:	2800      	cmp	r0, #0
 800dbde:	d1e0      	bne.n	800dba2 <__ssputs_r+0x5a>
 800dbe0:	6921      	ldr	r1, [r4, #16]
 800dbe2:	4650      	mov	r0, sl
 800dbe4:	f7ff fb34 	bl	800d250 <_free_r>
 800dbe8:	230c      	movs	r3, #12
 800dbea:	f8ca 3000 	str.w	r3, [sl]
 800dbee:	89a3      	ldrh	r3, [r4, #12]
 800dbf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbf4:	81a3      	strh	r3, [r4, #12]
 800dbf6:	f04f 30ff 	mov.w	r0, #4294967295
 800dbfa:	e7e9      	b.n	800dbd0 <__ssputs_r+0x88>

0800dbfc <_svfiprintf_r>:
 800dbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc00:	4698      	mov	r8, r3
 800dc02:	898b      	ldrh	r3, [r1, #12]
 800dc04:	061b      	lsls	r3, r3, #24
 800dc06:	b09d      	sub	sp, #116	; 0x74
 800dc08:	4607      	mov	r7, r0
 800dc0a:	460d      	mov	r5, r1
 800dc0c:	4614      	mov	r4, r2
 800dc0e:	d50e      	bpl.n	800dc2e <_svfiprintf_r+0x32>
 800dc10:	690b      	ldr	r3, [r1, #16]
 800dc12:	b963      	cbnz	r3, 800dc2e <_svfiprintf_r+0x32>
 800dc14:	2140      	movs	r1, #64	; 0x40
 800dc16:	f7ff fb8f 	bl	800d338 <_malloc_r>
 800dc1a:	6028      	str	r0, [r5, #0]
 800dc1c:	6128      	str	r0, [r5, #16]
 800dc1e:	b920      	cbnz	r0, 800dc2a <_svfiprintf_r+0x2e>
 800dc20:	230c      	movs	r3, #12
 800dc22:	603b      	str	r3, [r7, #0]
 800dc24:	f04f 30ff 	mov.w	r0, #4294967295
 800dc28:	e0d0      	b.n	800ddcc <_svfiprintf_r+0x1d0>
 800dc2a:	2340      	movs	r3, #64	; 0x40
 800dc2c:	616b      	str	r3, [r5, #20]
 800dc2e:	2300      	movs	r3, #0
 800dc30:	9309      	str	r3, [sp, #36]	; 0x24
 800dc32:	2320      	movs	r3, #32
 800dc34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc38:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc3c:	2330      	movs	r3, #48	; 0x30
 800dc3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dde4 <_svfiprintf_r+0x1e8>
 800dc42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc46:	f04f 0901 	mov.w	r9, #1
 800dc4a:	4623      	mov	r3, r4
 800dc4c:	469a      	mov	sl, r3
 800dc4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc52:	b10a      	cbz	r2, 800dc58 <_svfiprintf_r+0x5c>
 800dc54:	2a25      	cmp	r2, #37	; 0x25
 800dc56:	d1f9      	bne.n	800dc4c <_svfiprintf_r+0x50>
 800dc58:	ebba 0b04 	subs.w	fp, sl, r4
 800dc5c:	d00b      	beq.n	800dc76 <_svfiprintf_r+0x7a>
 800dc5e:	465b      	mov	r3, fp
 800dc60:	4622      	mov	r2, r4
 800dc62:	4629      	mov	r1, r5
 800dc64:	4638      	mov	r0, r7
 800dc66:	f7ff ff6f 	bl	800db48 <__ssputs_r>
 800dc6a:	3001      	adds	r0, #1
 800dc6c:	f000 80a9 	beq.w	800ddc2 <_svfiprintf_r+0x1c6>
 800dc70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc72:	445a      	add	r2, fp
 800dc74:	9209      	str	r2, [sp, #36]	; 0x24
 800dc76:	f89a 3000 	ldrb.w	r3, [sl]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	f000 80a1 	beq.w	800ddc2 <_svfiprintf_r+0x1c6>
 800dc80:	2300      	movs	r3, #0
 800dc82:	f04f 32ff 	mov.w	r2, #4294967295
 800dc86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc8a:	f10a 0a01 	add.w	sl, sl, #1
 800dc8e:	9304      	str	r3, [sp, #16]
 800dc90:	9307      	str	r3, [sp, #28]
 800dc92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc96:	931a      	str	r3, [sp, #104]	; 0x68
 800dc98:	4654      	mov	r4, sl
 800dc9a:	2205      	movs	r2, #5
 800dc9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dca0:	4850      	ldr	r0, [pc, #320]	; (800dde4 <_svfiprintf_r+0x1e8>)
 800dca2:	f7f2 fb25 	bl	80002f0 <memchr>
 800dca6:	9a04      	ldr	r2, [sp, #16]
 800dca8:	b9d8      	cbnz	r0, 800dce2 <_svfiprintf_r+0xe6>
 800dcaa:	06d0      	lsls	r0, r2, #27
 800dcac:	bf44      	itt	mi
 800dcae:	2320      	movmi	r3, #32
 800dcb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcb4:	0711      	lsls	r1, r2, #28
 800dcb6:	bf44      	itt	mi
 800dcb8:	232b      	movmi	r3, #43	; 0x2b
 800dcba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcbe:	f89a 3000 	ldrb.w	r3, [sl]
 800dcc2:	2b2a      	cmp	r3, #42	; 0x2a
 800dcc4:	d015      	beq.n	800dcf2 <_svfiprintf_r+0xf6>
 800dcc6:	9a07      	ldr	r2, [sp, #28]
 800dcc8:	4654      	mov	r4, sl
 800dcca:	2000      	movs	r0, #0
 800dccc:	f04f 0c0a 	mov.w	ip, #10
 800dcd0:	4621      	mov	r1, r4
 800dcd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcd6:	3b30      	subs	r3, #48	; 0x30
 800dcd8:	2b09      	cmp	r3, #9
 800dcda:	d94d      	bls.n	800dd78 <_svfiprintf_r+0x17c>
 800dcdc:	b1b0      	cbz	r0, 800dd0c <_svfiprintf_r+0x110>
 800dcde:	9207      	str	r2, [sp, #28]
 800dce0:	e014      	b.n	800dd0c <_svfiprintf_r+0x110>
 800dce2:	eba0 0308 	sub.w	r3, r0, r8
 800dce6:	fa09 f303 	lsl.w	r3, r9, r3
 800dcea:	4313      	orrs	r3, r2
 800dcec:	9304      	str	r3, [sp, #16]
 800dcee:	46a2      	mov	sl, r4
 800dcf0:	e7d2      	b.n	800dc98 <_svfiprintf_r+0x9c>
 800dcf2:	9b03      	ldr	r3, [sp, #12]
 800dcf4:	1d19      	adds	r1, r3, #4
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	9103      	str	r1, [sp, #12]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	bfbb      	ittet	lt
 800dcfe:	425b      	neglt	r3, r3
 800dd00:	f042 0202 	orrlt.w	r2, r2, #2
 800dd04:	9307      	strge	r3, [sp, #28]
 800dd06:	9307      	strlt	r3, [sp, #28]
 800dd08:	bfb8      	it	lt
 800dd0a:	9204      	strlt	r2, [sp, #16]
 800dd0c:	7823      	ldrb	r3, [r4, #0]
 800dd0e:	2b2e      	cmp	r3, #46	; 0x2e
 800dd10:	d10c      	bne.n	800dd2c <_svfiprintf_r+0x130>
 800dd12:	7863      	ldrb	r3, [r4, #1]
 800dd14:	2b2a      	cmp	r3, #42	; 0x2a
 800dd16:	d134      	bne.n	800dd82 <_svfiprintf_r+0x186>
 800dd18:	9b03      	ldr	r3, [sp, #12]
 800dd1a:	1d1a      	adds	r2, r3, #4
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	9203      	str	r2, [sp, #12]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	bfb8      	it	lt
 800dd24:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd28:	3402      	adds	r4, #2
 800dd2a:	9305      	str	r3, [sp, #20]
 800dd2c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ddf4 <_svfiprintf_r+0x1f8>
 800dd30:	7821      	ldrb	r1, [r4, #0]
 800dd32:	2203      	movs	r2, #3
 800dd34:	4650      	mov	r0, sl
 800dd36:	f7f2 fadb 	bl	80002f0 <memchr>
 800dd3a:	b138      	cbz	r0, 800dd4c <_svfiprintf_r+0x150>
 800dd3c:	9b04      	ldr	r3, [sp, #16]
 800dd3e:	eba0 000a 	sub.w	r0, r0, sl
 800dd42:	2240      	movs	r2, #64	; 0x40
 800dd44:	4082      	lsls	r2, r0
 800dd46:	4313      	orrs	r3, r2
 800dd48:	3401      	adds	r4, #1
 800dd4a:	9304      	str	r3, [sp, #16]
 800dd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd50:	4825      	ldr	r0, [pc, #148]	; (800dde8 <_svfiprintf_r+0x1ec>)
 800dd52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd56:	2206      	movs	r2, #6
 800dd58:	f7f2 faca 	bl	80002f0 <memchr>
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	d038      	beq.n	800ddd2 <_svfiprintf_r+0x1d6>
 800dd60:	4b22      	ldr	r3, [pc, #136]	; (800ddec <_svfiprintf_r+0x1f0>)
 800dd62:	bb1b      	cbnz	r3, 800ddac <_svfiprintf_r+0x1b0>
 800dd64:	9b03      	ldr	r3, [sp, #12]
 800dd66:	3307      	adds	r3, #7
 800dd68:	f023 0307 	bic.w	r3, r3, #7
 800dd6c:	3308      	adds	r3, #8
 800dd6e:	9303      	str	r3, [sp, #12]
 800dd70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd72:	4433      	add	r3, r6
 800dd74:	9309      	str	r3, [sp, #36]	; 0x24
 800dd76:	e768      	b.n	800dc4a <_svfiprintf_r+0x4e>
 800dd78:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd7c:	460c      	mov	r4, r1
 800dd7e:	2001      	movs	r0, #1
 800dd80:	e7a6      	b.n	800dcd0 <_svfiprintf_r+0xd4>
 800dd82:	2300      	movs	r3, #0
 800dd84:	3401      	adds	r4, #1
 800dd86:	9305      	str	r3, [sp, #20]
 800dd88:	4619      	mov	r1, r3
 800dd8a:	f04f 0c0a 	mov.w	ip, #10
 800dd8e:	4620      	mov	r0, r4
 800dd90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd94:	3a30      	subs	r2, #48	; 0x30
 800dd96:	2a09      	cmp	r2, #9
 800dd98:	d903      	bls.n	800dda2 <_svfiprintf_r+0x1a6>
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d0c6      	beq.n	800dd2c <_svfiprintf_r+0x130>
 800dd9e:	9105      	str	r1, [sp, #20]
 800dda0:	e7c4      	b.n	800dd2c <_svfiprintf_r+0x130>
 800dda2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dda6:	4604      	mov	r4, r0
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e7f0      	b.n	800dd8e <_svfiprintf_r+0x192>
 800ddac:	ab03      	add	r3, sp, #12
 800ddae:	9300      	str	r3, [sp, #0]
 800ddb0:	462a      	mov	r2, r5
 800ddb2:	4b0f      	ldr	r3, [pc, #60]	; (800ddf0 <_svfiprintf_r+0x1f4>)
 800ddb4:	a904      	add	r1, sp, #16
 800ddb6:	4638      	mov	r0, r7
 800ddb8:	f7fd fe02 	bl	800b9c0 <_printf_float>
 800ddbc:	1c42      	adds	r2, r0, #1
 800ddbe:	4606      	mov	r6, r0
 800ddc0:	d1d6      	bne.n	800dd70 <_svfiprintf_r+0x174>
 800ddc2:	89ab      	ldrh	r3, [r5, #12]
 800ddc4:	065b      	lsls	r3, r3, #25
 800ddc6:	f53f af2d 	bmi.w	800dc24 <_svfiprintf_r+0x28>
 800ddca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddcc:	b01d      	add	sp, #116	; 0x74
 800ddce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd2:	ab03      	add	r3, sp, #12
 800ddd4:	9300      	str	r3, [sp, #0]
 800ddd6:	462a      	mov	r2, r5
 800ddd8:	4b05      	ldr	r3, [pc, #20]	; (800ddf0 <_svfiprintf_r+0x1f4>)
 800ddda:	a904      	add	r1, sp, #16
 800dddc:	4638      	mov	r0, r7
 800ddde:	f7fe f877 	bl	800bed0 <_printf_i>
 800dde2:	e7eb      	b.n	800ddbc <_svfiprintf_r+0x1c0>
 800dde4:	0800e7cc 	.word	0x0800e7cc
 800dde8:	0800e7d6 	.word	0x0800e7d6
 800ddec:	0800b9c1 	.word	0x0800b9c1
 800ddf0:	0800db49 	.word	0x0800db49
 800ddf4:	0800e7d2 	.word	0x0800e7d2

0800ddf8 <__sfputc_r>:
 800ddf8:	6893      	ldr	r3, [r2, #8]
 800ddfa:	3b01      	subs	r3, #1
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	b410      	push	{r4}
 800de00:	6093      	str	r3, [r2, #8]
 800de02:	da08      	bge.n	800de16 <__sfputc_r+0x1e>
 800de04:	6994      	ldr	r4, [r2, #24]
 800de06:	42a3      	cmp	r3, r4
 800de08:	db01      	blt.n	800de0e <__sfputc_r+0x16>
 800de0a:	290a      	cmp	r1, #10
 800de0c:	d103      	bne.n	800de16 <__sfputc_r+0x1e>
 800de0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de12:	f7fe bb12 	b.w	800c43a <__swbuf_r>
 800de16:	6813      	ldr	r3, [r2, #0]
 800de18:	1c58      	adds	r0, r3, #1
 800de1a:	6010      	str	r0, [r2, #0]
 800de1c:	7019      	strb	r1, [r3, #0]
 800de1e:	4608      	mov	r0, r1
 800de20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de24:	4770      	bx	lr

0800de26 <__sfputs_r>:
 800de26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de28:	4606      	mov	r6, r0
 800de2a:	460f      	mov	r7, r1
 800de2c:	4614      	mov	r4, r2
 800de2e:	18d5      	adds	r5, r2, r3
 800de30:	42ac      	cmp	r4, r5
 800de32:	d101      	bne.n	800de38 <__sfputs_r+0x12>
 800de34:	2000      	movs	r0, #0
 800de36:	e007      	b.n	800de48 <__sfputs_r+0x22>
 800de38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de3c:	463a      	mov	r2, r7
 800de3e:	4630      	mov	r0, r6
 800de40:	f7ff ffda 	bl	800ddf8 <__sfputc_r>
 800de44:	1c43      	adds	r3, r0, #1
 800de46:	d1f3      	bne.n	800de30 <__sfputs_r+0xa>
 800de48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de4c <_vfiprintf_r>:
 800de4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de50:	460d      	mov	r5, r1
 800de52:	b09d      	sub	sp, #116	; 0x74
 800de54:	4614      	mov	r4, r2
 800de56:	4698      	mov	r8, r3
 800de58:	4606      	mov	r6, r0
 800de5a:	b118      	cbz	r0, 800de64 <_vfiprintf_r+0x18>
 800de5c:	6a03      	ldr	r3, [r0, #32]
 800de5e:	b90b      	cbnz	r3, 800de64 <_vfiprintf_r+0x18>
 800de60:	f7fe f9e4 	bl	800c22c <__sinit>
 800de64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de66:	07d9      	lsls	r1, r3, #31
 800de68:	d405      	bmi.n	800de76 <_vfiprintf_r+0x2a>
 800de6a:	89ab      	ldrh	r3, [r5, #12]
 800de6c:	059a      	lsls	r2, r3, #22
 800de6e:	d402      	bmi.n	800de76 <_vfiprintf_r+0x2a>
 800de70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de72:	f7fe fbf4 	bl	800c65e <__retarget_lock_acquire_recursive>
 800de76:	89ab      	ldrh	r3, [r5, #12]
 800de78:	071b      	lsls	r3, r3, #28
 800de7a:	d501      	bpl.n	800de80 <_vfiprintf_r+0x34>
 800de7c:	692b      	ldr	r3, [r5, #16]
 800de7e:	b99b      	cbnz	r3, 800dea8 <_vfiprintf_r+0x5c>
 800de80:	4629      	mov	r1, r5
 800de82:	4630      	mov	r0, r6
 800de84:	f7fe fb16 	bl	800c4b4 <__swsetup_r>
 800de88:	b170      	cbz	r0, 800dea8 <_vfiprintf_r+0x5c>
 800de8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de8c:	07dc      	lsls	r4, r3, #31
 800de8e:	d504      	bpl.n	800de9a <_vfiprintf_r+0x4e>
 800de90:	f04f 30ff 	mov.w	r0, #4294967295
 800de94:	b01d      	add	sp, #116	; 0x74
 800de96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de9a:	89ab      	ldrh	r3, [r5, #12]
 800de9c:	0598      	lsls	r0, r3, #22
 800de9e:	d4f7      	bmi.n	800de90 <_vfiprintf_r+0x44>
 800dea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dea2:	f7fe fbdd 	bl	800c660 <__retarget_lock_release_recursive>
 800dea6:	e7f3      	b.n	800de90 <_vfiprintf_r+0x44>
 800dea8:	2300      	movs	r3, #0
 800deaa:	9309      	str	r3, [sp, #36]	; 0x24
 800deac:	2320      	movs	r3, #32
 800deae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800deb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800deb6:	2330      	movs	r3, #48	; 0x30
 800deb8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e06c <_vfiprintf_r+0x220>
 800debc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dec0:	f04f 0901 	mov.w	r9, #1
 800dec4:	4623      	mov	r3, r4
 800dec6:	469a      	mov	sl, r3
 800dec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800decc:	b10a      	cbz	r2, 800ded2 <_vfiprintf_r+0x86>
 800dece:	2a25      	cmp	r2, #37	; 0x25
 800ded0:	d1f9      	bne.n	800dec6 <_vfiprintf_r+0x7a>
 800ded2:	ebba 0b04 	subs.w	fp, sl, r4
 800ded6:	d00b      	beq.n	800def0 <_vfiprintf_r+0xa4>
 800ded8:	465b      	mov	r3, fp
 800deda:	4622      	mov	r2, r4
 800dedc:	4629      	mov	r1, r5
 800dede:	4630      	mov	r0, r6
 800dee0:	f7ff ffa1 	bl	800de26 <__sfputs_r>
 800dee4:	3001      	adds	r0, #1
 800dee6:	f000 80a9 	beq.w	800e03c <_vfiprintf_r+0x1f0>
 800deea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800deec:	445a      	add	r2, fp
 800deee:	9209      	str	r2, [sp, #36]	; 0x24
 800def0:	f89a 3000 	ldrb.w	r3, [sl]
 800def4:	2b00      	cmp	r3, #0
 800def6:	f000 80a1 	beq.w	800e03c <_vfiprintf_r+0x1f0>
 800defa:	2300      	movs	r3, #0
 800defc:	f04f 32ff 	mov.w	r2, #4294967295
 800df00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df04:	f10a 0a01 	add.w	sl, sl, #1
 800df08:	9304      	str	r3, [sp, #16]
 800df0a:	9307      	str	r3, [sp, #28]
 800df0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df10:	931a      	str	r3, [sp, #104]	; 0x68
 800df12:	4654      	mov	r4, sl
 800df14:	2205      	movs	r2, #5
 800df16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df1a:	4854      	ldr	r0, [pc, #336]	; (800e06c <_vfiprintf_r+0x220>)
 800df1c:	f7f2 f9e8 	bl	80002f0 <memchr>
 800df20:	9a04      	ldr	r2, [sp, #16]
 800df22:	b9d8      	cbnz	r0, 800df5c <_vfiprintf_r+0x110>
 800df24:	06d1      	lsls	r1, r2, #27
 800df26:	bf44      	itt	mi
 800df28:	2320      	movmi	r3, #32
 800df2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df2e:	0713      	lsls	r3, r2, #28
 800df30:	bf44      	itt	mi
 800df32:	232b      	movmi	r3, #43	; 0x2b
 800df34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df38:	f89a 3000 	ldrb.w	r3, [sl]
 800df3c:	2b2a      	cmp	r3, #42	; 0x2a
 800df3e:	d015      	beq.n	800df6c <_vfiprintf_r+0x120>
 800df40:	9a07      	ldr	r2, [sp, #28]
 800df42:	4654      	mov	r4, sl
 800df44:	2000      	movs	r0, #0
 800df46:	f04f 0c0a 	mov.w	ip, #10
 800df4a:	4621      	mov	r1, r4
 800df4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df50:	3b30      	subs	r3, #48	; 0x30
 800df52:	2b09      	cmp	r3, #9
 800df54:	d94d      	bls.n	800dff2 <_vfiprintf_r+0x1a6>
 800df56:	b1b0      	cbz	r0, 800df86 <_vfiprintf_r+0x13a>
 800df58:	9207      	str	r2, [sp, #28]
 800df5a:	e014      	b.n	800df86 <_vfiprintf_r+0x13a>
 800df5c:	eba0 0308 	sub.w	r3, r0, r8
 800df60:	fa09 f303 	lsl.w	r3, r9, r3
 800df64:	4313      	orrs	r3, r2
 800df66:	9304      	str	r3, [sp, #16]
 800df68:	46a2      	mov	sl, r4
 800df6a:	e7d2      	b.n	800df12 <_vfiprintf_r+0xc6>
 800df6c:	9b03      	ldr	r3, [sp, #12]
 800df6e:	1d19      	adds	r1, r3, #4
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	9103      	str	r1, [sp, #12]
 800df74:	2b00      	cmp	r3, #0
 800df76:	bfbb      	ittet	lt
 800df78:	425b      	neglt	r3, r3
 800df7a:	f042 0202 	orrlt.w	r2, r2, #2
 800df7e:	9307      	strge	r3, [sp, #28]
 800df80:	9307      	strlt	r3, [sp, #28]
 800df82:	bfb8      	it	lt
 800df84:	9204      	strlt	r2, [sp, #16]
 800df86:	7823      	ldrb	r3, [r4, #0]
 800df88:	2b2e      	cmp	r3, #46	; 0x2e
 800df8a:	d10c      	bne.n	800dfa6 <_vfiprintf_r+0x15a>
 800df8c:	7863      	ldrb	r3, [r4, #1]
 800df8e:	2b2a      	cmp	r3, #42	; 0x2a
 800df90:	d134      	bne.n	800dffc <_vfiprintf_r+0x1b0>
 800df92:	9b03      	ldr	r3, [sp, #12]
 800df94:	1d1a      	adds	r2, r3, #4
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	9203      	str	r2, [sp, #12]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	bfb8      	it	lt
 800df9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800dfa2:	3402      	adds	r4, #2
 800dfa4:	9305      	str	r3, [sp, #20]
 800dfa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e07c <_vfiprintf_r+0x230>
 800dfaa:	7821      	ldrb	r1, [r4, #0]
 800dfac:	2203      	movs	r2, #3
 800dfae:	4650      	mov	r0, sl
 800dfb0:	f7f2 f99e 	bl	80002f0 <memchr>
 800dfb4:	b138      	cbz	r0, 800dfc6 <_vfiprintf_r+0x17a>
 800dfb6:	9b04      	ldr	r3, [sp, #16]
 800dfb8:	eba0 000a 	sub.w	r0, r0, sl
 800dfbc:	2240      	movs	r2, #64	; 0x40
 800dfbe:	4082      	lsls	r2, r0
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	3401      	adds	r4, #1
 800dfc4:	9304      	str	r3, [sp, #16]
 800dfc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfca:	4829      	ldr	r0, [pc, #164]	; (800e070 <_vfiprintf_r+0x224>)
 800dfcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dfd0:	2206      	movs	r2, #6
 800dfd2:	f7f2 f98d 	bl	80002f0 <memchr>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d03f      	beq.n	800e05a <_vfiprintf_r+0x20e>
 800dfda:	4b26      	ldr	r3, [pc, #152]	; (800e074 <_vfiprintf_r+0x228>)
 800dfdc:	bb1b      	cbnz	r3, 800e026 <_vfiprintf_r+0x1da>
 800dfde:	9b03      	ldr	r3, [sp, #12]
 800dfe0:	3307      	adds	r3, #7
 800dfe2:	f023 0307 	bic.w	r3, r3, #7
 800dfe6:	3308      	adds	r3, #8
 800dfe8:	9303      	str	r3, [sp, #12]
 800dfea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfec:	443b      	add	r3, r7
 800dfee:	9309      	str	r3, [sp, #36]	; 0x24
 800dff0:	e768      	b.n	800dec4 <_vfiprintf_r+0x78>
 800dff2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dff6:	460c      	mov	r4, r1
 800dff8:	2001      	movs	r0, #1
 800dffa:	e7a6      	b.n	800df4a <_vfiprintf_r+0xfe>
 800dffc:	2300      	movs	r3, #0
 800dffe:	3401      	adds	r4, #1
 800e000:	9305      	str	r3, [sp, #20]
 800e002:	4619      	mov	r1, r3
 800e004:	f04f 0c0a 	mov.w	ip, #10
 800e008:	4620      	mov	r0, r4
 800e00a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e00e:	3a30      	subs	r2, #48	; 0x30
 800e010:	2a09      	cmp	r2, #9
 800e012:	d903      	bls.n	800e01c <_vfiprintf_r+0x1d0>
 800e014:	2b00      	cmp	r3, #0
 800e016:	d0c6      	beq.n	800dfa6 <_vfiprintf_r+0x15a>
 800e018:	9105      	str	r1, [sp, #20]
 800e01a:	e7c4      	b.n	800dfa6 <_vfiprintf_r+0x15a>
 800e01c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e020:	4604      	mov	r4, r0
 800e022:	2301      	movs	r3, #1
 800e024:	e7f0      	b.n	800e008 <_vfiprintf_r+0x1bc>
 800e026:	ab03      	add	r3, sp, #12
 800e028:	9300      	str	r3, [sp, #0]
 800e02a:	462a      	mov	r2, r5
 800e02c:	4b12      	ldr	r3, [pc, #72]	; (800e078 <_vfiprintf_r+0x22c>)
 800e02e:	a904      	add	r1, sp, #16
 800e030:	4630      	mov	r0, r6
 800e032:	f7fd fcc5 	bl	800b9c0 <_printf_float>
 800e036:	4607      	mov	r7, r0
 800e038:	1c78      	adds	r0, r7, #1
 800e03a:	d1d6      	bne.n	800dfea <_vfiprintf_r+0x19e>
 800e03c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e03e:	07d9      	lsls	r1, r3, #31
 800e040:	d405      	bmi.n	800e04e <_vfiprintf_r+0x202>
 800e042:	89ab      	ldrh	r3, [r5, #12]
 800e044:	059a      	lsls	r2, r3, #22
 800e046:	d402      	bmi.n	800e04e <_vfiprintf_r+0x202>
 800e048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e04a:	f7fe fb09 	bl	800c660 <__retarget_lock_release_recursive>
 800e04e:	89ab      	ldrh	r3, [r5, #12]
 800e050:	065b      	lsls	r3, r3, #25
 800e052:	f53f af1d 	bmi.w	800de90 <_vfiprintf_r+0x44>
 800e056:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e058:	e71c      	b.n	800de94 <_vfiprintf_r+0x48>
 800e05a:	ab03      	add	r3, sp, #12
 800e05c:	9300      	str	r3, [sp, #0]
 800e05e:	462a      	mov	r2, r5
 800e060:	4b05      	ldr	r3, [pc, #20]	; (800e078 <_vfiprintf_r+0x22c>)
 800e062:	a904      	add	r1, sp, #16
 800e064:	4630      	mov	r0, r6
 800e066:	f7fd ff33 	bl	800bed0 <_printf_i>
 800e06a:	e7e4      	b.n	800e036 <_vfiprintf_r+0x1ea>
 800e06c:	0800e7cc 	.word	0x0800e7cc
 800e070:	0800e7d6 	.word	0x0800e7d6
 800e074:	0800b9c1 	.word	0x0800b9c1
 800e078:	0800de27 	.word	0x0800de27
 800e07c:	0800e7d2 	.word	0x0800e7d2

0800e080 <__sflush_r>:
 800e080:	898a      	ldrh	r2, [r1, #12]
 800e082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e086:	4605      	mov	r5, r0
 800e088:	0710      	lsls	r0, r2, #28
 800e08a:	460c      	mov	r4, r1
 800e08c:	d458      	bmi.n	800e140 <__sflush_r+0xc0>
 800e08e:	684b      	ldr	r3, [r1, #4]
 800e090:	2b00      	cmp	r3, #0
 800e092:	dc05      	bgt.n	800e0a0 <__sflush_r+0x20>
 800e094:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e096:	2b00      	cmp	r3, #0
 800e098:	dc02      	bgt.n	800e0a0 <__sflush_r+0x20>
 800e09a:	2000      	movs	r0, #0
 800e09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0a2:	2e00      	cmp	r6, #0
 800e0a4:	d0f9      	beq.n	800e09a <__sflush_r+0x1a>
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e0ac:	682f      	ldr	r7, [r5, #0]
 800e0ae:	6a21      	ldr	r1, [r4, #32]
 800e0b0:	602b      	str	r3, [r5, #0]
 800e0b2:	d032      	beq.n	800e11a <__sflush_r+0x9a>
 800e0b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e0b6:	89a3      	ldrh	r3, [r4, #12]
 800e0b8:	075a      	lsls	r2, r3, #29
 800e0ba:	d505      	bpl.n	800e0c8 <__sflush_r+0x48>
 800e0bc:	6863      	ldr	r3, [r4, #4]
 800e0be:	1ac0      	subs	r0, r0, r3
 800e0c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0c2:	b10b      	cbz	r3, 800e0c8 <__sflush_r+0x48>
 800e0c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0c6:	1ac0      	subs	r0, r0, r3
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0ce:	6a21      	ldr	r1, [r4, #32]
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	47b0      	blx	r6
 800e0d4:	1c43      	adds	r3, r0, #1
 800e0d6:	89a3      	ldrh	r3, [r4, #12]
 800e0d8:	d106      	bne.n	800e0e8 <__sflush_r+0x68>
 800e0da:	6829      	ldr	r1, [r5, #0]
 800e0dc:	291d      	cmp	r1, #29
 800e0de:	d82b      	bhi.n	800e138 <__sflush_r+0xb8>
 800e0e0:	4a29      	ldr	r2, [pc, #164]	; (800e188 <__sflush_r+0x108>)
 800e0e2:	410a      	asrs	r2, r1
 800e0e4:	07d6      	lsls	r6, r2, #31
 800e0e6:	d427      	bmi.n	800e138 <__sflush_r+0xb8>
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	6062      	str	r2, [r4, #4]
 800e0ec:	04d9      	lsls	r1, r3, #19
 800e0ee:	6922      	ldr	r2, [r4, #16]
 800e0f0:	6022      	str	r2, [r4, #0]
 800e0f2:	d504      	bpl.n	800e0fe <__sflush_r+0x7e>
 800e0f4:	1c42      	adds	r2, r0, #1
 800e0f6:	d101      	bne.n	800e0fc <__sflush_r+0x7c>
 800e0f8:	682b      	ldr	r3, [r5, #0]
 800e0fa:	b903      	cbnz	r3, 800e0fe <__sflush_r+0x7e>
 800e0fc:	6560      	str	r0, [r4, #84]	; 0x54
 800e0fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e100:	602f      	str	r7, [r5, #0]
 800e102:	2900      	cmp	r1, #0
 800e104:	d0c9      	beq.n	800e09a <__sflush_r+0x1a>
 800e106:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e10a:	4299      	cmp	r1, r3
 800e10c:	d002      	beq.n	800e114 <__sflush_r+0x94>
 800e10e:	4628      	mov	r0, r5
 800e110:	f7ff f89e 	bl	800d250 <_free_r>
 800e114:	2000      	movs	r0, #0
 800e116:	6360      	str	r0, [r4, #52]	; 0x34
 800e118:	e7c0      	b.n	800e09c <__sflush_r+0x1c>
 800e11a:	2301      	movs	r3, #1
 800e11c:	4628      	mov	r0, r5
 800e11e:	47b0      	blx	r6
 800e120:	1c41      	adds	r1, r0, #1
 800e122:	d1c8      	bne.n	800e0b6 <__sflush_r+0x36>
 800e124:	682b      	ldr	r3, [r5, #0]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d0c5      	beq.n	800e0b6 <__sflush_r+0x36>
 800e12a:	2b1d      	cmp	r3, #29
 800e12c:	d001      	beq.n	800e132 <__sflush_r+0xb2>
 800e12e:	2b16      	cmp	r3, #22
 800e130:	d101      	bne.n	800e136 <__sflush_r+0xb6>
 800e132:	602f      	str	r7, [r5, #0]
 800e134:	e7b1      	b.n	800e09a <__sflush_r+0x1a>
 800e136:	89a3      	ldrh	r3, [r4, #12]
 800e138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e13c:	81a3      	strh	r3, [r4, #12]
 800e13e:	e7ad      	b.n	800e09c <__sflush_r+0x1c>
 800e140:	690f      	ldr	r7, [r1, #16]
 800e142:	2f00      	cmp	r7, #0
 800e144:	d0a9      	beq.n	800e09a <__sflush_r+0x1a>
 800e146:	0793      	lsls	r3, r2, #30
 800e148:	680e      	ldr	r6, [r1, #0]
 800e14a:	bf08      	it	eq
 800e14c:	694b      	ldreq	r3, [r1, #20]
 800e14e:	600f      	str	r7, [r1, #0]
 800e150:	bf18      	it	ne
 800e152:	2300      	movne	r3, #0
 800e154:	eba6 0807 	sub.w	r8, r6, r7
 800e158:	608b      	str	r3, [r1, #8]
 800e15a:	f1b8 0f00 	cmp.w	r8, #0
 800e15e:	dd9c      	ble.n	800e09a <__sflush_r+0x1a>
 800e160:	6a21      	ldr	r1, [r4, #32]
 800e162:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e164:	4643      	mov	r3, r8
 800e166:	463a      	mov	r2, r7
 800e168:	4628      	mov	r0, r5
 800e16a:	47b0      	blx	r6
 800e16c:	2800      	cmp	r0, #0
 800e16e:	dc06      	bgt.n	800e17e <__sflush_r+0xfe>
 800e170:	89a3      	ldrh	r3, [r4, #12]
 800e172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e176:	81a3      	strh	r3, [r4, #12]
 800e178:	f04f 30ff 	mov.w	r0, #4294967295
 800e17c:	e78e      	b.n	800e09c <__sflush_r+0x1c>
 800e17e:	4407      	add	r7, r0
 800e180:	eba8 0800 	sub.w	r8, r8, r0
 800e184:	e7e9      	b.n	800e15a <__sflush_r+0xda>
 800e186:	bf00      	nop
 800e188:	dfbffffe 	.word	0xdfbffffe

0800e18c <_fflush_r>:
 800e18c:	b538      	push	{r3, r4, r5, lr}
 800e18e:	690b      	ldr	r3, [r1, #16]
 800e190:	4605      	mov	r5, r0
 800e192:	460c      	mov	r4, r1
 800e194:	b913      	cbnz	r3, 800e19c <_fflush_r+0x10>
 800e196:	2500      	movs	r5, #0
 800e198:	4628      	mov	r0, r5
 800e19a:	bd38      	pop	{r3, r4, r5, pc}
 800e19c:	b118      	cbz	r0, 800e1a6 <_fflush_r+0x1a>
 800e19e:	6a03      	ldr	r3, [r0, #32]
 800e1a0:	b90b      	cbnz	r3, 800e1a6 <_fflush_r+0x1a>
 800e1a2:	f7fe f843 	bl	800c22c <__sinit>
 800e1a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d0f3      	beq.n	800e196 <_fflush_r+0xa>
 800e1ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1b0:	07d0      	lsls	r0, r2, #31
 800e1b2:	d404      	bmi.n	800e1be <_fflush_r+0x32>
 800e1b4:	0599      	lsls	r1, r3, #22
 800e1b6:	d402      	bmi.n	800e1be <_fflush_r+0x32>
 800e1b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1ba:	f7fe fa50 	bl	800c65e <__retarget_lock_acquire_recursive>
 800e1be:	4628      	mov	r0, r5
 800e1c0:	4621      	mov	r1, r4
 800e1c2:	f7ff ff5d 	bl	800e080 <__sflush_r>
 800e1c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1c8:	07da      	lsls	r2, r3, #31
 800e1ca:	4605      	mov	r5, r0
 800e1cc:	d4e4      	bmi.n	800e198 <_fflush_r+0xc>
 800e1ce:	89a3      	ldrh	r3, [r4, #12]
 800e1d0:	059b      	lsls	r3, r3, #22
 800e1d2:	d4e1      	bmi.n	800e198 <_fflush_r+0xc>
 800e1d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1d6:	f7fe fa43 	bl	800c660 <__retarget_lock_release_recursive>
 800e1da:	e7dd      	b.n	800e198 <_fflush_r+0xc>

0800e1dc <__swhatbuf_r>:
 800e1dc:	b570      	push	{r4, r5, r6, lr}
 800e1de:	460c      	mov	r4, r1
 800e1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1e4:	2900      	cmp	r1, #0
 800e1e6:	b096      	sub	sp, #88	; 0x58
 800e1e8:	4615      	mov	r5, r2
 800e1ea:	461e      	mov	r6, r3
 800e1ec:	da0d      	bge.n	800e20a <__swhatbuf_r+0x2e>
 800e1ee:	89a3      	ldrh	r3, [r4, #12]
 800e1f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e1f4:	f04f 0100 	mov.w	r1, #0
 800e1f8:	bf0c      	ite	eq
 800e1fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e1fe:	2340      	movne	r3, #64	; 0x40
 800e200:	2000      	movs	r0, #0
 800e202:	6031      	str	r1, [r6, #0]
 800e204:	602b      	str	r3, [r5, #0]
 800e206:	b016      	add	sp, #88	; 0x58
 800e208:	bd70      	pop	{r4, r5, r6, pc}
 800e20a:	466a      	mov	r2, sp
 800e20c:	f000 f862 	bl	800e2d4 <_fstat_r>
 800e210:	2800      	cmp	r0, #0
 800e212:	dbec      	blt.n	800e1ee <__swhatbuf_r+0x12>
 800e214:	9901      	ldr	r1, [sp, #4]
 800e216:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e21a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e21e:	4259      	negs	r1, r3
 800e220:	4159      	adcs	r1, r3
 800e222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e226:	e7eb      	b.n	800e200 <__swhatbuf_r+0x24>

0800e228 <__smakebuf_r>:
 800e228:	898b      	ldrh	r3, [r1, #12]
 800e22a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e22c:	079d      	lsls	r5, r3, #30
 800e22e:	4606      	mov	r6, r0
 800e230:	460c      	mov	r4, r1
 800e232:	d507      	bpl.n	800e244 <__smakebuf_r+0x1c>
 800e234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e238:	6023      	str	r3, [r4, #0]
 800e23a:	6123      	str	r3, [r4, #16]
 800e23c:	2301      	movs	r3, #1
 800e23e:	6163      	str	r3, [r4, #20]
 800e240:	b002      	add	sp, #8
 800e242:	bd70      	pop	{r4, r5, r6, pc}
 800e244:	ab01      	add	r3, sp, #4
 800e246:	466a      	mov	r2, sp
 800e248:	f7ff ffc8 	bl	800e1dc <__swhatbuf_r>
 800e24c:	9900      	ldr	r1, [sp, #0]
 800e24e:	4605      	mov	r5, r0
 800e250:	4630      	mov	r0, r6
 800e252:	f7ff f871 	bl	800d338 <_malloc_r>
 800e256:	b948      	cbnz	r0, 800e26c <__smakebuf_r+0x44>
 800e258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e25c:	059a      	lsls	r2, r3, #22
 800e25e:	d4ef      	bmi.n	800e240 <__smakebuf_r+0x18>
 800e260:	f023 0303 	bic.w	r3, r3, #3
 800e264:	f043 0302 	orr.w	r3, r3, #2
 800e268:	81a3      	strh	r3, [r4, #12]
 800e26a:	e7e3      	b.n	800e234 <__smakebuf_r+0xc>
 800e26c:	89a3      	ldrh	r3, [r4, #12]
 800e26e:	6020      	str	r0, [r4, #0]
 800e270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e274:	81a3      	strh	r3, [r4, #12]
 800e276:	9b00      	ldr	r3, [sp, #0]
 800e278:	6163      	str	r3, [r4, #20]
 800e27a:	9b01      	ldr	r3, [sp, #4]
 800e27c:	6120      	str	r0, [r4, #16]
 800e27e:	b15b      	cbz	r3, 800e298 <__smakebuf_r+0x70>
 800e280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e284:	4630      	mov	r0, r6
 800e286:	f000 f837 	bl	800e2f8 <_isatty_r>
 800e28a:	b128      	cbz	r0, 800e298 <__smakebuf_r+0x70>
 800e28c:	89a3      	ldrh	r3, [r4, #12]
 800e28e:	f023 0303 	bic.w	r3, r3, #3
 800e292:	f043 0301 	orr.w	r3, r3, #1
 800e296:	81a3      	strh	r3, [r4, #12]
 800e298:	89a3      	ldrh	r3, [r4, #12]
 800e29a:	431d      	orrs	r5, r3
 800e29c:	81a5      	strh	r5, [r4, #12]
 800e29e:	e7cf      	b.n	800e240 <__smakebuf_r+0x18>

0800e2a0 <memmove>:
 800e2a0:	4288      	cmp	r0, r1
 800e2a2:	b510      	push	{r4, lr}
 800e2a4:	eb01 0402 	add.w	r4, r1, r2
 800e2a8:	d902      	bls.n	800e2b0 <memmove+0x10>
 800e2aa:	4284      	cmp	r4, r0
 800e2ac:	4623      	mov	r3, r4
 800e2ae:	d807      	bhi.n	800e2c0 <memmove+0x20>
 800e2b0:	1e43      	subs	r3, r0, #1
 800e2b2:	42a1      	cmp	r1, r4
 800e2b4:	d008      	beq.n	800e2c8 <memmove+0x28>
 800e2b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2be:	e7f8      	b.n	800e2b2 <memmove+0x12>
 800e2c0:	4402      	add	r2, r0
 800e2c2:	4601      	mov	r1, r0
 800e2c4:	428a      	cmp	r2, r1
 800e2c6:	d100      	bne.n	800e2ca <memmove+0x2a>
 800e2c8:	bd10      	pop	{r4, pc}
 800e2ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e2ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e2d2:	e7f7      	b.n	800e2c4 <memmove+0x24>

0800e2d4 <_fstat_r>:
 800e2d4:	b538      	push	{r3, r4, r5, lr}
 800e2d6:	4d07      	ldr	r5, [pc, #28]	; (800e2f4 <_fstat_r+0x20>)
 800e2d8:	2300      	movs	r3, #0
 800e2da:	4604      	mov	r4, r0
 800e2dc:	4608      	mov	r0, r1
 800e2de:	4611      	mov	r1, r2
 800e2e0:	602b      	str	r3, [r5, #0]
 800e2e2:	f7f3 fafc 	bl	80018de <_fstat>
 800e2e6:	1c43      	adds	r3, r0, #1
 800e2e8:	d102      	bne.n	800e2f0 <_fstat_r+0x1c>
 800e2ea:	682b      	ldr	r3, [r5, #0]
 800e2ec:	b103      	cbz	r3, 800e2f0 <_fstat_r+0x1c>
 800e2ee:	6023      	str	r3, [r4, #0]
 800e2f0:	bd38      	pop	{r3, r4, r5, pc}
 800e2f2:	bf00      	nop
 800e2f4:	2406201c 	.word	0x2406201c

0800e2f8 <_isatty_r>:
 800e2f8:	b538      	push	{r3, r4, r5, lr}
 800e2fa:	4d06      	ldr	r5, [pc, #24]	; (800e314 <_isatty_r+0x1c>)
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	4604      	mov	r4, r0
 800e300:	4608      	mov	r0, r1
 800e302:	602b      	str	r3, [r5, #0]
 800e304:	f7f3 fafb 	bl	80018fe <_isatty>
 800e308:	1c43      	adds	r3, r0, #1
 800e30a:	d102      	bne.n	800e312 <_isatty_r+0x1a>
 800e30c:	682b      	ldr	r3, [r5, #0]
 800e30e:	b103      	cbz	r3, 800e312 <_isatty_r+0x1a>
 800e310:	6023      	str	r3, [r4, #0]
 800e312:	bd38      	pop	{r3, r4, r5, pc}
 800e314:	2406201c 	.word	0x2406201c

0800e318 <_sbrk_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	4d06      	ldr	r5, [pc, #24]	; (800e334 <_sbrk_r+0x1c>)
 800e31c:	2300      	movs	r3, #0
 800e31e:	4604      	mov	r4, r0
 800e320:	4608      	mov	r0, r1
 800e322:	602b      	str	r3, [r5, #0]
 800e324:	f7f3 fb04 	bl	8001930 <_sbrk>
 800e328:	1c43      	adds	r3, r0, #1
 800e32a:	d102      	bne.n	800e332 <_sbrk_r+0x1a>
 800e32c:	682b      	ldr	r3, [r5, #0]
 800e32e:	b103      	cbz	r3, 800e332 <_sbrk_r+0x1a>
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	bd38      	pop	{r3, r4, r5, pc}
 800e334:	2406201c 	.word	0x2406201c

0800e338 <memcpy>:
 800e338:	440a      	add	r2, r1
 800e33a:	4291      	cmp	r1, r2
 800e33c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e340:	d100      	bne.n	800e344 <memcpy+0xc>
 800e342:	4770      	bx	lr
 800e344:	b510      	push	{r4, lr}
 800e346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e34a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e34e:	4291      	cmp	r1, r2
 800e350:	d1f9      	bne.n	800e346 <memcpy+0xe>
 800e352:	bd10      	pop	{r4, pc}

0800e354 <__assert_func>:
 800e354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e356:	4614      	mov	r4, r2
 800e358:	461a      	mov	r2, r3
 800e35a:	4b09      	ldr	r3, [pc, #36]	; (800e380 <__assert_func+0x2c>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4605      	mov	r5, r0
 800e360:	68d8      	ldr	r0, [r3, #12]
 800e362:	b14c      	cbz	r4, 800e378 <__assert_func+0x24>
 800e364:	4b07      	ldr	r3, [pc, #28]	; (800e384 <__assert_func+0x30>)
 800e366:	9100      	str	r1, [sp, #0]
 800e368:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e36c:	4906      	ldr	r1, [pc, #24]	; (800e388 <__assert_func+0x34>)
 800e36e:	462b      	mov	r3, r5
 800e370:	f000 f872 	bl	800e458 <fiprintf>
 800e374:	f000 f882 	bl	800e47c <abort>
 800e378:	4b04      	ldr	r3, [pc, #16]	; (800e38c <__assert_func+0x38>)
 800e37a:	461c      	mov	r4, r3
 800e37c:	e7f3      	b.n	800e366 <__assert_func+0x12>
 800e37e:	bf00      	nop
 800e380:	24000070 	.word	0x24000070
 800e384:	0800e7e7 	.word	0x0800e7e7
 800e388:	0800e7f4 	.word	0x0800e7f4
 800e38c:	0800e822 	.word	0x0800e822

0800e390 <_calloc_r>:
 800e390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e392:	fba1 2402 	umull	r2, r4, r1, r2
 800e396:	b94c      	cbnz	r4, 800e3ac <_calloc_r+0x1c>
 800e398:	4611      	mov	r1, r2
 800e39a:	9201      	str	r2, [sp, #4]
 800e39c:	f7fe ffcc 	bl	800d338 <_malloc_r>
 800e3a0:	9a01      	ldr	r2, [sp, #4]
 800e3a2:	4605      	mov	r5, r0
 800e3a4:	b930      	cbnz	r0, 800e3b4 <_calloc_r+0x24>
 800e3a6:	4628      	mov	r0, r5
 800e3a8:	b003      	add	sp, #12
 800e3aa:	bd30      	pop	{r4, r5, pc}
 800e3ac:	220c      	movs	r2, #12
 800e3ae:	6002      	str	r2, [r0, #0]
 800e3b0:	2500      	movs	r5, #0
 800e3b2:	e7f8      	b.n	800e3a6 <_calloc_r+0x16>
 800e3b4:	4621      	mov	r1, r4
 800e3b6:	f7fe f8d5 	bl	800c564 <memset>
 800e3ba:	e7f4      	b.n	800e3a6 <_calloc_r+0x16>

0800e3bc <__ascii_mbtowc>:
 800e3bc:	b082      	sub	sp, #8
 800e3be:	b901      	cbnz	r1, 800e3c2 <__ascii_mbtowc+0x6>
 800e3c0:	a901      	add	r1, sp, #4
 800e3c2:	b142      	cbz	r2, 800e3d6 <__ascii_mbtowc+0x1a>
 800e3c4:	b14b      	cbz	r3, 800e3da <__ascii_mbtowc+0x1e>
 800e3c6:	7813      	ldrb	r3, [r2, #0]
 800e3c8:	600b      	str	r3, [r1, #0]
 800e3ca:	7812      	ldrb	r2, [r2, #0]
 800e3cc:	1e10      	subs	r0, r2, #0
 800e3ce:	bf18      	it	ne
 800e3d0:	2001      	movne	r0, #1
 800e3d2:	b002      	add	sp, #8
 800e3d4:	4770      	bx	lr
 800e3d6:	4610      	mov	r0, r2
 800e3d8:	e7fb      	b.n	800e3d2 <__ascii_mbtowc+0x16>
 800e3da:	f06f 0001 	mvn.w	r0, #1
 800e3de:	e7f8      	b.n	800e3d2 <__ascii_mbtowc+0x16>

0800e3e0 <_realloc_r>:
 800e3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e4:	4680      	mov	r8, r0
 800e3e6:	4614      	mov	r4, r2
 800e3e8:	460e      	mov	r6, r1
 800e3ea:	b921      	cbnz	r1, 800e3f6 <_realloc_r+0x16>
 800e3ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f0:	4611      	mov	r1, r2
 800e3f2:	f7fe bfa1 	b.w	800d338 <_malloc_r>
 800e3f6:	b92a      	cbnz	r2, 800e404 <_realloc_r+0x24>
 800e3f8:	f7fe ff2a 	bl	800d250 <_free_r>
 800e3fc:	4625      	mov	r5, r4
 800e3fe:	4628      	mov	r0, r5
 800e400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e404:	f000 f841 	bl	800e48a <_malloc_usable_size_r>
 800e408:	4284      	cmp	r4, r0
 800e40a:	4607      	mov	r7, r0
 800e40c:	d802      	bhi.n	800e414 <_realloc_r+0x34>
 800e40e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e412:	d812      	bhi.n	800e43a <_realloc_r+0x5a>
 800e414:	4621      	mov	r1, r4
 800e416:	4640      	mov	r0, r8
 800e418:	f7fe ff8e 	bl	800d338 <_malloc_r>
 800e41c:	4605      	mov	r5, r0
 800e41e:	2800      	cmp	r0, #0
 800e420:	d0ed      	beq.n	800e3fe <_realloc_r+0x1e>
 800e422:	42bc      	cmp	r4, r7
 800e424:	4622      	mov	r2, r4
 800e426:	4631      	mov	r1, r6
 800e428:	bf28      	it	cs
 800e42a:	463a      	movcs	r2, r7
 800e42c:	f7ff ff84 	bl	800e338 <memcpy>
 800e430:	4631      	mov	r1, r6
 800e432:	4640      	mov	r0, r8
 800e434:	f7fe ff0c 	bl	800d250 <_free_r>
 800e438:	e7e1      	b.n	800e3fe <_realloc_r+0x1e>
 800e43a:	4635      	mov	r5, r6
 800e43c:	e7df      	b.n	800e3fe <_realloc_r+0x1e>

0800e43e <__ascii_wctomb>:
 800e43e:	b149      	cbz	r1, 800e454 <__ascii_wctomb+0x16>
 800e440:	2aff      	cmp	r2, #255	; 0xff
 800e442:	bf85      	ittet	hi
 800e444:	238a      	movhi	r3, #138	; 0x8a
 800e446:	6003      	strhi	r3, [r0, #0]
 800e448:	700a      	strbls	r2, [r1, #0]
 800e44a:	f04f 30ff 	movhi.w	r0, #4294967295
 800e44e:	bf98      	it	ls
 800e450:	2001      	movls	r0, #1
 800e452:	4770      	bx	lr
 800e454:	4608      	mov	r0, r1
 800e456:	4770      	bx	lr

0800e458 <fiprintf>:
 800e458:	b40e      	push	{r1, r2, r3}
 800e45a:	b503      	push	{r0, r1, lr}
 800e45c:	4601      	mov	r1, r0
 800e45e:	ab03      	add	r3, sp, #12
 800e460:	4805      	ldr	r0, [pc, #20]	; (800e478 <fiprintf+0x20>)
 800e462:	f853 2b04 	ldr.w	r2, [r3], #4
 800e466:	6800      	ldr	r0, [r0, #0]
 800e468:	9301      	str	r3, [sp, #4]
 800e46a:	f7ff fcef 	bl	800de4c <_vfiprintf_r>
 800e46e:	b002      	add	sp, #8
 800e470:	f85d eb04 	ldr.w	lr, [sp], #4
 800e474:	b003      	add	sp, #12
 800e476:	4770      	bx	lr
 800e478:	24000070 	.word	0x24000070

0800e47c <abort>:
 800e47c:	b508      	push	{r3, lr}
 800e47e:	2006      	movs	r0, #6
 800e480:	f000 f834 	bl	800e4ec <raise>
 800e484:	2001      	movs	r0, #1
 800e486:	f7f3 f9db 	bl	8001840 <_exit>

0800e48a <_malloc_usable_size_r>:
 800e48a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e48e:	1f18      	subs	r0, r3, #4
 800e490:	2b00      	cmp	r3, #0
 800e492:	bfbc      	itt	lt
 800e494:	580b      	ldrlt	r3, [r1, r0]
 800e496:	18c0      	addlt	r0, r0, r3
 800e498:	4770      	bx	lr

0800e49a <_raise_r>:
 800e49a:	291f      	cmp	r1, #31
 800e49c:	b538      	push	{r3, r4, r5, lr}
 800e49e:	4604      	mov	r4, r0
 800e4a0:	460d      	mov	r5, r1
 800e4a2:	d904      	bls.n	800e4ae <_raise_r+0x14>
 800e4a4:	2316      	movs	r3, #22
 800e4a6:	6003      	str	r3, [r0, #0]
 800e4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ac:	bd38      	pop	{r3, r4, r5, pc}
 800e4ae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e4b0:	b112      	cbz	r2, 800e4b8 <_raise_r+0x1e>
 800e4b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4b6:	b94b      	cbnz	r3, 800e4cc <_raise_r+0x32>
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	f000 f831 	bl	800e520 <_getpid_r>
 800e4be:	462a      	mov	r2, r5
 800e4c0:	4601      	mov	r1, r0
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4c8:	f000 b818 	b.w	800e4fc <_kill_r>
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d00a      	beq.n	800e4e6 <_raise_r+0x4c>
 800e4d0:	1c59      	adds	r1, r3, #1
 800e4d2:	d103      	bne.n	800e4dc <_raise_r+0x42>
 800e4d4:	2316      	movs	r3, #22
 800e4d6:	6003      	str	r3, [r0, #0]
 800e4d8:	2001      	movs	r0, #1
 800e4da:	e7e7      	b.n	800e4ac <_raise_r+0x12>
 800e4dc:	2400      	movs	r4, #0
 800e4de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e4e2:	4628      	mov	r0, r5
 800e4e4:	4798      	blx	r3
 800e4e6:	2000      	movs	r0, #0
 800e4e8:	e7e0      	b.n	800e4ac <_raise_r+0x12>
	...

0800e4ec <raise>:
 800e4ec:	4b02      	ldr	r3, [pc, #8]	; (800e4f8 <raise+0xc>)
 800e4ee:	4601      	mov	r1, r0
 800e4f0:	6818      	ldr	r0, [r3, #0]
 800e4f2:	f7ff bfd2 	b.w	800e49a <_raise_r>
 800e4f6:	bf00      	nop
 800e4f8:	24000070 	.word	0x24000070

0800e4fc <_kill_r>:
 800e4fc:	b538      	push	{r3, r4, r5, lr}
 800e4fe:	4d07      	ldr	r5, [pc, #28]	; (800e51c <_kill_r+0x20>)
 800e500:	2300      	movs	r3, #0
 800e502:	4604      	mov	r4, r0
 800e504:	4608      	mov	r0, r1
 800e506:	4611      	mov	r1, r2
 800e508:	602b      	str	r3, [r5, #0]
 800e50a:	f7f3 f989 	bl	8001820 <_kill>
 800e50e:	1c43      	adds	r3, r0, #1
 800e510:	d102      	bne.n	800e518 <_kill_r+0x1c>
 800e512:	682b      	ldr	r3, [r5, #0]
 800e514:	b103      	cbz	r3, 800e518 <_kill_r+0x1c>
 800e516:	6023      	str	r3, [r4, #0]
 800e518:	bd38      	pop	{r3, r4, r5, pc}
 800e51a:	bf00      	nop
 800e51c:	2406201c 	.word	0x2406201c

0800e520 <_getpid_r>:
 800e520:	f7f3 b976 	b.w	8001810 <_getpid>

0800e524 <_init>:
 800e524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e526:	bf00      	nop
 800e528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e52a:	bc08      	pop	{r3}
 800e52c:	469e      	mov	lr, r3
 800e52e:	4770      	bx	lr

0800e530 <_fini>:
 800e530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e532:	bf00      	nop
 800e534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e536:	bc08      	pop	{r3}
 800e538:	469e      	mov	lr, r3
 800e53a:	4770      	bx	lr
