
PlungeCooler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094fc  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080097ac  080097ac  000197ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800981c  0800981c  0001981c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009824  08009824  00019824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009828  08009828  00019828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800982c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000edf4  24000070  08009898  00020070  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400ee64  08009898  0002ee64  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 11 .debug_info   000166c4  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000028c4  00000000  00000000  000367a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001140  00000000  00000000  00039068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000d88  00000000  00000000  0003a1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00030bc4  00000000  00000000  0003af30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017f31  00000000  00000000  0006baf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001400cf  00000000  00000000  00083a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004e50  00000000  00000000  001c3af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001c8944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000070 	.word	0x24000070
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009794 	.word	0x08009794

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000074 	.word	0x24000074
 80002ec:	08009794 	.word	0x08009794

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <dispense>:
 */
#include "globals.h"
#include "main.h"
#include <stdio.h>

void dispense(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
//	char a[] = "DEPOSITING!!!\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)a, strlen(a), HAL_MAX_DELAY);
	HAL_GPIO_WritePin(DROP_GPIO_Port, DROP_Pin, 1); //Dispense drop
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a8:	480e      	ldr	r0, [pc, #56]	; (80006e4 <dispense+0x48>)
 80006aa:	f002 fb65 	bl	8002d78 <HAL_GPIO_WritePin>
	for(int i=0; i<20000; i+=2) i--; 		//pseudo-delay. replace with a short timer setup is ideal
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	e005      	b.n	80006c0 <dispense+0x24>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3302      	adds	r3, #2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80006c6:	4293      	cmp	r3, r2
 80006c8:	ddf4      	ble.n	80006b4 <dispense+0x18>
	HAL_GPIO_WritePin(DROP_GPIO_Port, DROP_Pin, 0); //Dispense drop
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <dispense+0x48>)
 80006d2:	f002 fb51 	bl	8002d78 <HAL_GPIO_WritePin>

	DEPOSITED = 1;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <dispense+0x4c>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58021000 	.word	0x58021000
 80006e8:	2400ec81 	.word	0x2400ec81

080006ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	db0b      	blt.n	8000716 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	f003 021f 	and.w	r2, r3, #31
 8000704:	4907      	ldr	r1, [pc, #28]	; (8000724 <__NVIC_EnableIRQ+0x38>)
 8000706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800070a:	095b      	lsrs	r3, r3, #5
 800070c:	2001      	movs	r0, #1
 800070e:	fa00 f202 	lsl.w	r2, r0, r2
 8000712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000e100 	.word	0xe000e100

08000728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db0a      	blt.n	8000752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	490c      	ldr	r1, [pc, #48]	; (8000774 <__NVIC_SetPriority+0x4c>)
 8000742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	440b      	add	r3, r1
 800074c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000750:	e00a      	b.n	8000768 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4908      	ldr	r1, [pc, #32]	; (8000778 <__NVIC_SetPriority+0x50>)
 8000758:	88fb      	ldrh	r3, [r7, #6]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	3b04      	subs	r3, #4
 8000760:	0112      	lsls	r2, r2, #4
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	440b      	add	r3, r1
 8000766:	761a      	strb	r2, [r3, #24]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <move_tilt_steps>:
uint8_t rx_flag = 0;
int panPos = 0;
int tiltPos = 0;

/*** MOTOR CONTROL FUNCTIONS ***/
void move_tilt_steps(uint32_t delay, uint8_t dir, uint32_t num_steps) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	460b      	mov	r3, r1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(TILT_EN_GPIO_Port, TILT_EN_Pin, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2104      	movs	r1, #4
 800078e:	481a      	ldr	r0, [pc, #104]	; (80007f8 <move_tilt_steps+0x7c>)
 8000790:	f002 faf2 	bl	8002d78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TILT_DIR_GPIO_Port, TILT_DIR_Pin, dir);
 8000794:	7afb      	ldrb	r3, [r7, #11]
 8000796:	461a      	mov	r2, r3
 8000798:	2102      	movs	r1, #2
 800079a:	4818      	ldr	r0, [pc, #96]	; (80007fc <move_tilt_steps+0x80>)
 800079c:	f002 faec 	bl	8002d78 <HAL_GPIO_WritePin>
	for(int i=0; i<num_steps; i++) {
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e012      	b.n	80007cc <move_tilt_steps+0x50>
		HAL_GPIO_WritePin(TILT_STP_GPIO_Port, TILT_STP_Pin, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	2108      	movs	r1, #8
 80007aa:	4813      	ldr	r0, [pc, #76]	; (80007f8 <move_tilt_steps+0x7c>)
 80007ac:	f002 fae4 	bl	8002d78 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 80007b0:	68f8      	ldr	r0, [r7, #12]
 80007b2:	f001 fa99 	bl	8001ce8 <HAL_Delay>
		HAL_GPIO_WritePin(TILT_STP_GPIO_Port, TILT_STP_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2108      	movs	r1, #8
 80007ba:	480f      	ldr	r0, [pc, #60]	; (80007f8 <move_tilt_steps+0x7c>)
 80007bc:	f002 fadc 	bl	8002d78 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 80007c0:	68f8      	ldr	r0, [r7, #12]
 80007c2:	f001 fa91 	bl	8001ce8 <HAL_Delay>
	for(int i=0; i<num_steps; i++) {
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	3301      	adds	r3, #1
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d8e8      	bhi.n	80007a6 <move_tilt_steps+0x2a>

	}
//	char b[] = "done steps\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

	tiltPos += num_steps * (1 - 2 * dir); // + if dir is 0, else -
 80007d4:	7afb      	ldrb	r3, [r7, #11]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	f1c3 0301 	rsb	r3, r3, #1
 80007dc:	461a      	mov	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	fb02 f303 	mul.w	r3, r2, r3
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <move_tilt_steps+0x84>)
 80007e6:	6812      	ldr	r2, [r2, #0]
 80007e8:	4413      	add	r3, r2
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <move_tilt_steps+0x84>)
 80007ee:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(TILT_EN_GPIO_Port, TILT_EN_Pin, 1);

}
 80007f0:	bf00      	nop
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	58020800 	.word	0x58020800
 80007fc:	58020400 	.word	0x58020400
 8000800:	2400ecf8 	.word	0x2400ecf8

08000804 <move_tilt_deg>:

void move_tilt_deg(uint32_t degrees, uint8_t dir) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
	move_tilt_steps(TILT_DEFAULT_DELAY, dir, degrees*TILT_DEG_TO_STEPS);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 8000816:	fb03 f202 	mul.w	r2, r3, r2
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	4619      	mov	r1, r3
 800081e:	2001      	movs	r0, #1
 8000820:	f7ff ffac 	bl	800077c <move_tilt_steps>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <move_pan_steps>:

void move_pan_steps(uint32_t delay, uint8_t dir, uint32_t num_steps) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	460b      	mov	r3, r1
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(PAN_EN_GPIO_Port, PAN_EN_Pin, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2101      	movs	r1, #1
 800083e:	481b      	ldr	r0, [pc, #108]	; (80008ac <move_pan_steps+0x80>)
 8000840:	f002 fa9a 	bl	8002d78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PAN_DIR_GPIO_Port, PAN_DIR_Pin, dir);
 8000844:	7afb      	ldrb	r3, [r7, #11]
 8000846:	461a      	mov	r2, r3
 8000848:	2108      	movs	r1, #8
 800084a:	4819      	ldr	r0, [pc, #100]	; (80008b0 <move_pan_steps+0x84>)
 800084c:	f002 fa94 	bl	8002d78 <HAL_GPIO_WritePin>
	for(int i=0; i<num_steps; i++) {
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e014      	b.n	8000880 <move_pan_steps+0x54>
		HAL_GPIO_WritePin(PAN_STP_GPIO_Port, PAN_STP_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800085c:	4815      	ldr	r0, [pc, #84]	; (80008b4 <move_pan_steps+0x88>)
 800085e:	f002 fa8b 	bl	8002d78 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f001 fa40 	bl	8001ce8 <HAL_Delay>
		HAL_GPIO_WritePin(PAN_STP_GPIO_Port, PAN_STP_Pin, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800086e:	4811      	ldr	r0, [pc, #68]	; (80008b4 <move_pan_steps+0x88>)
 8000870:	f002 fa82 	bl	8002d78 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f001 fa37 	bl	8001ce8 <HAL_Delay>
	for(int i=0; i<num_steps; i++) {
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	429a      	cmp	r2, r3
 8000886:	d8e6      	bhi.n	8000856 <move_pan_steps+0x2a>
	}
//	char b[] = "done steps\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

	panPos += num_steps * (1 - 2 * dir); // + if dir is 0, else -
 8000888:	7afb      	ldrb	r3, [r7, #11]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	f1c3 0301 	rsb	r3, r3, #1
 8000890:	461a      	mov	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	fb02 f303 	mul.w	r3, r2, r3
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <move_pan_steps+0x8c>)
 800089a:	6812      	ldr	r2, [r2, #0]
 800089c:	4413      	add	r3, r2
 800089e:	461a      	mov	r2, r3
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <move_pan_steps+0x8c>)
 80008a2:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(PAN_EN_GPIO_Port, PAN_EN_Pin, 1);

}
 80008a4:	bf00      	nop
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	58020800 	.word	0x58020800
 80008b0:	58020000 	.word	0x58020000
 80008b4:	58021400 	.word	0x58021400
 80008b8:	2400ecf4 	.word	0x2400ecf4

080008bc <move_pan_deg>:

void move_pan_deg(uint32_t degrees, uint8_t dir) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
	move_pan_steps(PAN_DEFAULT_DELAY, dir, degrees*PAN_DEG_TO_STEPS);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 80008ce:	fb03 f202 	mul.w	r2, r3, r2
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	4619      	mov	r1, r3
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff ffa8 	bl	800082c <move_pan_steps>
	char pos[30];
//	sprintf(pos, "panPos: %d\r\n", panPos);
//	HAL_UART_Transmit(&huart3, (uint8_t*)pos, strlen(pos), HAL_MAX_DELAY);

}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ack>:
void start_plunge(void) {

}

/*** USART Rx HANDLE ***/
void ack(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart3, tx_ack, 3, HAL_MAX_DELAY);
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	2203      	movs	r2, #3
 80008ee:	4903      	ldr	r1, [pc, #12]	; (80008fc <ack+0x18>)
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <ack+0x1c>)
 80008f2:	f005 fdcf 	bl	8006494 <HAL_UART_Transmit>
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	24000004 	.word	0x24000004
 8000900:	24000170 	.word	0x24000170

08000904 <bad>:

void bad(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, tx_bad, 3, HAL_MAX_DELAY);
 8000908:	f04f 33ff 	mov.w	r3, #4294967295
 800090c:	2203      	movs	r2, #3
 800090e:	4903      	ldr	r1, [pc, #12]	; (800091c <bad+0x18>)
 8000910:	4803      	ldr	r0, [pc, #12]	; (8000920 <bad+0x1c>)
 8000912:	f005 fdbf 	bl	8006494 <HAL_UART_Transmit>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	24000008 	.word	0x24000008
 8000920:	24000170 	.word	0x24000170

08000924 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    rxBuffer[rxIndex] = received_character[0];
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_UART_RxCpltCallback+0x54>)
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_UART_RxCpltCallback+0x58>)
 8000934:	7819      	ldrb	r1, [r3, #0]
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_UART_RxCpltCallback+0x5c>)
 8000938:	5499      	strb	r1, [r3, r2]
	rxIndex++;
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_UART_RxCpltCallback+0x54>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	3301      	adds	r3, #1
 8000940:	b29a      	uxth	r2, r3
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_UART_RxCpltCallback+0x54>)
 8000944:	801a      	strh	r2, [r3, #0]

	if (received_character[0] == '\n' || received_character[0] == '\r') {
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_UART_RxCpltCallback+0x58>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b0a      	cmp	r3, #10
 800094c:	d003      	beq.n	8000956 <HAL_UART_RxCpltCallback+0x32>
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_UART_RxCpltCallback+0x58>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b0d      	cmp	r3, #13
 8000954:	d106      	bne.n	8000964 <HAL_UART_RxCpltCallback+0x40>
    	rxIndex = 0;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_UART_RxCpltCallback+0x54>)
 8000958:	2200      	movs	r2, #0
 800095a:	801a      	strh	r2, [r3, #0]
    	rx_flag = 1;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_UART_RxCpltCallback+0x60>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e005      	b.n	8000970 <HAL_UART_RxCpltCallback+0x4c>
    } else {
        HAL_UART_Receive_IT(&huart3, received_character, 1);
 8000964:	2201      	movs	r2, #1
 8000966:	4905      	ldr	r1, [pc, #20]	; (800097c <HAL_UART_RxCpltCallback+0x58>)
 8000968:	4807      	ldr	r0, [pc, #28]	; (8000988 <HAL_UART_RxCpltCallback+0x64>)
 800096a:	f005 fe21 	bl	80065b0 <HAL_UART_Receive_IT>
    }
}
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2400ecec 	.word	0x2400ecec
 800097c:	2400ecf0 	.word	0x2400ecf0
 8000980:	2400ec88 	.word	0x2400ec88
 8000984:	2400ecf1 	.word	0x2400ecf1
 8000988:	24000170 	.word	0x24000170

0800098c <rx_handle>:

void rx_handle(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b0a0      	sub	sp, #128	; 0x80
 8000990:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, val);
 8000992:	4b5a      	ldr	r3, [pc, #360]	; (8000afc <rx_handle+0x170>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	2102      	movs	r1, #2
 800099a:	4859      	ldr	r0, [pc, #356]	; (8000b00 <rx_handle+0x174>)
 800099c:	f002 f9ec 	bl	8002d78 <HAL_GPIO_WritePin>
	if(val)
 80009a0:	4b56      	ldr	r3, [pc, #344]	; (8000afc <rx_handle+0x170>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d003      	beq.n	80009b0 <rx_handle+0x24>
		val = 0;
 80009a8:	4b54      	ldr	r3, [pc, #336]	; (8000afc <rx_handle+0x170>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	e002      	b.n	80009b6 <rx_handle+0x2a>
	else
		val = 1;
 80009b0:	4b52      	ldr	r3, [pc, #328]	; (8000afc <rx_handle+0x170>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
	//sprintf(num, "RX0: %d\r\n", rxBuffer[0]);
	//HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);
	switch(rxBuffer[0]) {
 80009b6:	4b53      	ldr	r3, [pc, #332]	; (8000b04 <rx_handle+0x178>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	3b31      	subs	r3, #49	; 0x31
 80009bc:	2b05      	cmp	r3, #5
 80009be:	f200 818d 	bhi.w	8000cdc <rx_handle+0x350>
 80009c2:	a201      	add	r2, pc, #4	; (adr r2, 80009c8 <rx_handle+0x3c>)
 80009c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c8:	080009e1 	.word	0x080009e1
 80009cc:	08000a89 	.word	0x08000a89
 80009d0:	08000cdd 	.word	0x08000cdd
 80009d4:	08000c95 	.word	0x08000c95
 80009d8:	08000caf 	.word	0x08000caf
 80009dc:	08000cc9 	.word	0x08000cc9
    	case MOVE: ;
    		uint32_t amount = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	67fb      	str	r3, [r7, #124]	; 0x7c
			for(int i=2; i<=4; i++) {
 80009e4:	2302      	movs	r3, #2
 80009e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80009e8:	e01b      	b.n	8000a22 <rx_handle+0x96>
				 char digit = rxBuffer[i];
 80009ea:	4a46      	ldr	r2, [pc, #280]	; (8000b04 <rx_handle+0x178>)
 80009ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80009ee:	4413      	add	r3, r2
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
				 if (digit >= '0' && digit <= '9') {
 80009f6:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80009fa:	2b2f      	cmp	r3, #47	; 0x2f
 80009fc:	d90e      	bls.n	8000a1c <rx_handle+0x90>
 80009fe:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000a02:	2b39      	cmp	r3, #57	; 0x39
 8000a04:	d80a      	bhi.n	8000a1c <rx_handle+0x90>
					 amount = (amount * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 8000a06:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000a08:	4613      	mov	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	461a      	mov	r2, r3
 8000a12:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000a16:	4413      	add	r3, r2
 8000a18:	3b30      	subs	r3, #48	; 0x30
 8000a1a:	67fb      	str	r3, [r7, #124]	; 0x7c
			for(int i=2; i<=4; i++) {
 8000a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a1e:	3301      	adds	r3, #1
 8000a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8000a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	dde0      	ble.n	80009ea <rx_handle+0x5e>

			char response[100];
//			sprintf(response, "%c%c received this amount: %d\r\n", (int)rxBuffer[0], (int)rxBuffer[1], (int)amount);
//			HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);

			switch(rxBuffer[1]) {
 8000a28:	4b36      	ldr	r3, [pc, #216]	; (8000b04 <rx_handle+0x178>)
 8000a2a:	785b      	ldrb	r3, [r3, #1]
 8000a2c:	3b31      	subs	r3, #49	; 0x31
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d826      	bhi.n	8000a80 <rx_handle+0xf4>
 8000a32:	a201      	add	r2, pc, #4	; (adr r2, 8000a38 <rx_handle+0xac>)
 8000a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a38:	08000a49 	.word	0x08000a49
 8000a3c:	08000a57 	.word	0x08000a57
 8000a40:	08000a65 	.word	0x08000a65
 8000a44:	08000a73 	.word	0x08000a73
				case UP: ;
					move_tilt_deg(amount, DIR_TILT_UP);
 8000a48:	2101      	movs	r1, #1
 8000a4a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a4c:	f7ff feda 	bl	8000804 <move_tilt_deg>
					ack();
 8000a50:	f7ff ff48 	bl	80008e4 <ack>
					break;
 8000a54:	e017      	b.n	8000a86 <rx_handle+0xfa>
				case DOWN: ;
					move_tilt_deg(amount, DIR_TILT_DOWN);
 8000a56:	2100      	movs	r1, #0
 8000a58:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a5a:	f7ff fed3 	bl	8000804 <move_tilt_deg>
					ack();
 8000a5e:	f7ff ff41 	bl	80008e4 <ack>
					break;
 8000a62:	e010      	b.n	8000a86 <rx_handle+0xfa>
				case LEFT: ;
					move_pan_deg(amount, DIR_PAN_LEFT);
 8000a64:	2101      	movs	r1, #1
 8000a66:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a68:	f7ff ff28 	bl	80008bc <move_pan_deg>
					ack();
 8000a6c:	f7ff ff3a 	bl	80008e4 <ack>
					break;
 8000a70:	e009      	b.n	8000a86 <rx_handle+0xfa>
				case RIGHT: ;
					move_pan_deg(amount, DIR_PAN_RIGHT);
 8000a72:	2100      	movs	r1, #0
 8000a74:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a76:	f7ff ff21 	bl	80008bc <move_pan_deg>
					ack();
 8000a7a:	f7ff ff33 	bl	80008e4 <ack>
					break;
 8000a7e:	e002      	b.n	8000a86 <rx_handle+0xfa>
				default: ;
					bad();
 8000a80:	f7ff ff40 	bl	8000904 <bad>
					break;
 8000a84:	bf00      	nop
			}

			break;
 8000a86:	e129      	b.n	8000cdc <rx_handle+0x350>

		case PLUNGE: ;
			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); //disengage brake
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2140      	movs	r1, #64	; 0x40
 8000a8c:	481e      	ldr	r0, [pc, #120]	; (8000b08 <rx_handle+0x17c>)
 8000a8e:	f002 f973 	bl	8002d78 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	2203      	movs	r2, #3
 8000a98:	491c      	ldr	r1, [pc, #112]	; (8000b0c <rx_handle+0x180>)
 8000a9a:	481d      	ldr	r0, [pc, #116]	; (8000b10 <rx_handle+0x184>)
 8000a9c:	f005 fcfa 	bl	8006494 <HAL_UART_Transmit>

		/* retrieve info */
			plunge_done_flag = 0;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <rx_handle+0x188>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]

			uint32_t brake_pos = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	677b      	str	r3, [r7, #116]	; 0x74
			timepoint_pos = 0;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <rx_handle+0x18c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
			for(int i=1; i<=6; i++) {
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	673b      	str	r3, [r7, #112]	; 0x70
 8000ab4:	e01b      	b.n	8000aee <rx_handle+0x162>
				 char digit = rxBuffer[i];
 8000ab6:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <rx_handle+0x178>)
 8000ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000aba:	4413      	add	r3, r2
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
				 if (digit >= '0' && digit <= '9') {
 8000ac2:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000ac6:	2b2f      	cmp	r3, #47	; 0x2f
 8000ac8:	d90e      	bls.n	8000ae8 <rx_handle+0x15c>
 8000aca:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000ace:	2b39      	cmp	r3, #57	; 0x39
 8000ad0:	d80a      	bhi.n	8000ae8 <rx_handle+0x15c>
					 brake_pos = (brake_pos * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 8000ad2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	461a      	mov	r2, r3
 8000ade:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000ae2:	4413      	add	r3, r2
 8000ae4:	3b30      	subs	r3, #48	; 0x30
 8000ae6:	677b      	str	r3, [r7, #116]	; 0x74
			for(int i=1; i<=6; i++) {
 8000ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000aea:	3301      	adds	r3, #1
 8000aec:	673b      	str	r3, [r7, #112]	; 0x70
 8000aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000af0:	2b06      	cmp	r3, #6
 8000af2:	dde0      	ble.n	8000ab6 <rx_handle+0x12a>
				 }
			}
			for(int i=7; i<=12; i++) {
 8000af4:	2307      	movs	r3, #7
 8000af6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000af8:	e02e      	b.n	8000b58 <rx_handle+0x1cc>
 8000afa:	bf00      	nop
 8000afc:	24000000 	.word	0x24000000
 8000b00:	58021000 	.word	0x58021000
 8000b04:	2400ec88 	.word	0x2400ec88
 8000b08:	58020000 	.word	0x58020000
 8000b0c:	24000004 	.word	0x24000004
 8000b10:	24000170 	.word	0x24000170
 8000b14:	2400ec80 	.word	0x2400ec80
 8000b18:	2400ec6c 	.word	0x2400ec6c
				 char digit = rxBuffer[i];
 8000b1c:	4a75      	ldr	r2, [pc, #468]	; (8000cf4 <rx_handle+0x368>)
 8000b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b20:	4413      	add	r3, r2
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
				 if (digit >= '0' && digit <= '9') {
 8000b28:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b2c:	2b2f      	cmp	r3, #47	; 0x2f
 8000b2e:	d910      	bls.n	8000b52 <rx_handle+0x1c6>
 8000b30:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b34:	2b39      	cmp	r3, #57	; 0x39
 8000b36:	d80c      	bhi.n	8000b52 <rx_handle+0x1c6>
					 timepoint_pos = (timepoint_pos * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 8000b38:	4b6f      	ldr	r3, [pc, #444]	; (8000cf8 <rx_handle+0x36c>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	461a      	mov	r2, r3
 8000b46:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b4a:	4413      	add	r3, r2
 8000b4c:	3b30      	subs	r3, #48	; 0x30
 8000b4e:	4a6a      	ldr	r2, [pc, #424]	; (8000cf8 <rx_handle+0x36c>)
 8000b50:	6013      	str	r3, [r2, #0]
			for(int i=7; i<=12; i++) {
 8000b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b54:	3301      	adds	r3, #1
 8000b56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b5a:	2b0c      	cmp	r3, #12
 8000b5c:	ddde      	ble.n	8000b1c <rx_handle+0x190>
	//		HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);

			/***TODO: figure out what angle to tilt to given timepoint_pos***/

			/* reset tracking variables */
			log_position = 0;
 8000b5e:	4b67      	ldr	r3, [pc, #412]	; (8000cfc <rx_handle+0x370>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
			running_sum = 0;
 8000b64:	4b66      	ldr	r3, [pc, #408]	; (8000d00 <rx_handle+0x374>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
			memset(posLog, 0, sizeof(posLog));
 8000b6a:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4864      	ldr	r0, [pc, #400]	; (8000d04 <rx_handle+0x378>)
 8000b72:	f008 f98b 	bl	8008e8c <memset>
			DEPOSITED = 0;
 8000b76:	4b64      	ldr	r3, [pc, #400]	; (8000d08 <rx_handle+0x37c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]

			/* dispense position calculation */
			//						    us								mm						mm/s	   s->us
			dispense_delay_clocks = 10000;//(DISPENSE_LATENCY + (TARGET_DIST_ORTH*cos(tiltPos*M_PI/180))/DROP_SPEED*1000*1000)*US_TO_TICKS;
 8000b7c:	4b63      	ldr	r3, [pc, #396]	; (8000d0c <rx_handle+0x380>)
 8000b7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b82:	601a      	str	r2, [r3, #0]
			// ^ delay in ticks between dispensing and drop hit target in x direction


			/* configure tim4 for final dispense timing */
			TIM4->CR1  &= ~TIM_CR1_CEN;
 8000b84:	4b62      	ldr	r3, [pc, #392]	; (8000d10 <rx_handle+0x384>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a61      	ldr	r2, [pc, #388]	; (8000d10 <rx_handle+0x384>)
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	6013      	str	r3, [r2, #0]

			TIM4->CNT   =  0;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000b90:	4b5f      	ldr	r3, [pc, #380]	; (8000d10 <rx_handle+0x384>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->ARR 	= brake_pos; 	// Counter rolls over at brake_pos which triggers an interrupt handled in TIM2_IRQHandler (stm32h7xx_it.c)
 8000b96:	4a5e      	ldr	r2, [pc, #376]	; (8000d10 <rx_handle+0x384>)
 8000b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM4->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000b9c:	4b5c      	ldr	r3, [pc, #368]	; (8000d10 <rx_handle+0x384>)
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	4a5b      	ldr	r2, [pc, #364]	; (8000d10 <rx_handle+0x384>)
 8000ba2:	f023 0301 	bic.w	r3, r3, #1
 8000ba6:	6113      	str	r3, [r2, #16]
			TIM4->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000ba8:	4b59      	ldr	r3, [pc, #356]	; (8000d10 <rx_handle+0x384>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a58      	ldr	r2, [pc, #352]	; (8000d10 <rx_handle+0x384>)
 8000bae:	f023 0302 	bic.w	r3, r3, #2
 8000bb2:	6013      	str	r3, [r2, #0]
			TIM4->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000bb4:	4b56      	ldr	r3, [pc, #344]	; (8000d10 <rx_handle+0x384>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	4a55      	ldr	r2, [pc, #340]	; (8000d10 <rx_handle+0x384>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	60d3      	str	r3, [r2, #12]
			TIM4->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000bc0:	4b53      	ldr	r3, [pc, #332]	; (8000d10 <rx_handle+0x384>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a52      	ldr	r2, [pc, #328]	; (8000d10 <rx_handle+0x384>)
 8000bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bca:	6013      	str	r3, [r2, #0]

			/* configuring encoder counter */
			TIM2->CR1  &= ~TIM_CR1_CEN;
 8000bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bd6:	f023 0301 	bic.w	r3, r3, #1
 8000bda:	6013      	str	r3, [r2, #0]

			TIM2->CNT   =  0;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000bdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000be0:	2200      	movs	r2, #0
 8000be2:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->ARR 	= brake_pos; 		// Counter rolls over at brake_pos which triggers an interrupt handled in TIM2_IRQHandler (stm32h7xx_it.c)
 8000be4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bea:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000bec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf6:	f023 0301 	bic.w	r3, r3, #1
 8000bfa:	6113      	str	r3, [r2, #16]
			TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000bfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c06:	f023 0302 	bic.w	r3, r3, #2
 8000c0a:	6013      	str	r3, [r2, #0]
			TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	60d3      	str	r3, [r2, #12]
			TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000c1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2a:	6013      	str	r3, [r2, #0]

			TIM2->CR1  |=  TIM_CR1_CEN; 	//start counter
 8000c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6013      	str	r3, [r2, #0]

			/* configuring data logging timer */
			TIM5->CR1  &= ~TIM_CR1_CEN; // Start TIM5 to commence data collection
 8000c3c:	4b35      	ldr	r3, [pc, #212]	; (8000d14 <rx_handle+0x388>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a34      	ldr	r2, [pc, #208]	; (8000d14 <rx_handle+0x388>)
 8000c42:	f023 0301 	bic.w	r3, r3, #1
 8000c46:	6013      	str	r3, [r2, #0]

			TIM5-> CNT  = 0;				//
 8000c48:	4b32      	ldr	r3, [pc, #200]	; (8000d14 <rx_handle+0x388>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
			TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <rx_handle+0x388>)
 8000c50:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000c54:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000c56:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <rx_handle+0x388>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a2e      	ldr	r2, [pc, #184]	; (8000d14 <rx_handle+0x388>)
 8000c5c:	f023 0302 	bic.w	r3, r3, #2
 8000c60:	6013      	str	r3, [r2, #0]
			TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000c62:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <rx_handle+0x388>)
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	4a2b      	ldr	r2, [pc, #172]	; (8000d14 <rx_handle+0x388>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	60d3      	str	r3, [r2, #12]
			TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000c6e:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <rx_handle+0x388>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a28      	ldr	r2, [pc, #160]	; (8000d14 <rx_handle+0x388>)
 8000c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c78:	6013      	str	r3, [r2, #0]
			TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <rx_handle+0x388>)
 8000c7c:	691b      	ldr	r3, [r3, #16]
 8000c7e:	4a25      	ldr	r2, [pc, #148]	; (8000d14 <rx_handle+0x388>)
 8000c80:	f023 0301 	bic.w	r3, r3, #1
 8000c84:	6113      	str	r3, [r2, #16]

			TIM5->CR1  |= TIM_CR1_CEN; // Start TIM5 to commence data collection
 8000c86:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <rx_handle+0x388>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a22      	ldr	r2, [pc, #136]	; (8000d14 <rx_handle+0x388>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6013      	str	r3, [r2, #0]
//				char response[100] = {0};
//				enc_pos = TIM2->CNT;
//				sprintf(response, "enc: %d; disp_f: %d; runsum: %d; tim4: %d; log_pos: %d, clocks_to_disp: %d; disp: %d\r\n", (int)enc_pos, (int)disp_flag, (int)running_sum, (int)TIM4->CNT, (int)log_position, (int)TIM4->ARR, (int)DEPOSITED);
//				HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
//			}
			break;
 8000c92:	e023      	b.n	8000cdc <rx_handle+0x350>

		case RELEASE: ;
			HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000c94:	f04f 33ff 	mov.w	r3, #4294967295
 8000c98:	2203      	movs	r2, #3
 8000c9a:	491f      	ldr	r1, [pc, #124]	; (8000d18 <rx_handle+0x38c>)
 8000c9c:	481f      	ldr	r0, [pc, #124]	; (8000d1c <rx_handle+0x390>)
 8000c9e:	f005 fbf9 	bl	8006494 <HAL_UART_Transmit>

			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); //disengage brake
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2140      	movs	r1, #64	; 0x40
 8000ca6:	481e      	ldr	r0, [pc, #120]	; (8000d20 <rx_handle+0x394>)
 8000ca8:	f002 f866 	bl	8002d78 <HAL_GPIO_WritePin>
//			char j[100] = {0};
//			sprintf(j, "RELEASE\r\n");
//			HAL_UART_Transmit(&huart3, (uint8_t*)j, strlen(j), HAL_MAX_DELAY);

			break;
 8000cac:	e016      	b.n	8000cdc <rx_handle+0x350>
		case '5': ;
			HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	4918      	ldr	r1, [pc, #96]	; (8000d18 <rx_handle+0x38c>)
 8000cb6:	4819      	ldr	r0, [pc, #100]	; (8000d1c <rx_handle+0x390>)
 8000cb8:	f005 fbec 	bl	8006494 <HAL_UART_Transmit>

			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 0); //engage brake
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2140      	movs	r1, #64	; 0x40
 8000cc0:	4817      	ldr	r0, [pc, #92]	; (8000d20 <rx_handle+0x394>)
 8000cc2:	f002 f859 	bl	8002d78 <HAL_GPIO_WritePin>
//			char k[100] = {0};
//			sprintf(k, "BRAKE\r\n");
//			HAL_UART_Transmit(&huart3, (uint8_t*)k, strlen(k), HAL_MAX_DELAY);

			break;
 8000cc6:	e009      	b.n	8000cdc <rx_handle+0x350>
		case '6': ;
			char lm[100] = {0};
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	2260      	movs	r2, #96	; 0x60
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f008 f8d9 	bl	8008e8c <memset>
			//sprintf(lm, "current position: %d\r\n braked at: %d\r\n", TIM2->CNT, posn_braked_at);
			//HAL_UART_Transmit(&huart3, (uint8_t*)lm, strlen(lm), HAL_MAX_DELAY);
			break;
 8000cda:	bf00      	nop

    }
//	char b[] = "done handling\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

    rx_flag = 0;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <rx_handle+0x398>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart3, received_character, 1);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4910      	ldr	r1, [pc, #64]	; (8000d28 <rx_handle+0x39c>)
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <rx_handle+0x390>)
 8000ce8:	f005 fc62 	bl	80065b0 <HAL_UART_Receive_IT>
}
 8000cec:	bf00      	nop
 8000cee:	3780      	adds	r7, #128	; 0x80
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2400ec88 	.word	0x2400ec88
 8000cf8:	2400ec6c 	.word	0x2400ec6c
 8000cfc:	2400ec64 	.word	0x2400ec64
 8000d00:	2400ec68 	.word	0x2400ec68
 8000d04:	24000204 	.word	0x24000204
 8000d08:	2400ec81 	.word	0x2400ec81
 8000d0c:	2400ec70 	.word	0x2400ec70
 8000d10:	40000800 	.word	0x40000800
 8000d14:	40000c00 	.word	0x40000c00
 8000d18:	24000004 	.word	0x24000004
 8000d1c:	24000170 	.word	0x24000170
 8000d20:	58020000 	.word	0x58020000
 8000d24:	2400ecf1 	.word	0x2400ecf1
 8000d28:	2400ecf0 	.word	0x2400ecf0

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d32:	f000 ff47 	bl	8001bc4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d36:	f000 f87f 	bl	8000e38 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3a:	f000 fa59 	bl	80011f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d3e:	f000 f8f1 	bl	8000f24 <MX_TIM2_Init>
  MX_USB_OTG_HS_USB_Init();
 8000d42:	f000 fa4d 	bl	80011e0 <MX_USB_OTG_HS_USB_Init>
  MX_USART3_UART_Init();
 8000d46:	f000 f9ff 	bl	8001148 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000d4a:	f000 f9af 	bl	80010ac <MX_TIM5_Init>
  MX_TIM4_Init();
 8000d4e:	f000 f955 	bl	8000ffc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, received_character, 1); // initialize interrupts
 8000d52:	2201      	movs	r2, #1
 8000d54:	492f      	ldr	r1, [pc, #188]	; (8000e14 <main+0xe8>)
 8000d56:	4830      	ldr	r0, [pc, #192]	; (8000e18 <main+0xec>)
 8000d58:	f005 fc2a 	bl	80065b0 <HAL_UART_Receive_IT>

//  char msg[] = "program start \r\n";
//  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  // TIM2 for encoder tick counting
  NVIC_SetPriority(TIM2_IRQn, 1); // Braking is priority as long as dispense isnt happening
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	201c      	movs	r0, #28
 8000d60:	f7ff fce2 	bl	8000728 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000d64:	201c      	movs	r0, #28
 8000d66:	f7ff fcc1 	bl	80006ec <__NVIC_EnableIRQ>

  // TIM5 for logkeeping and speed calculations and TIM4 setup
  NVIC_SetPriority(TIM5_IRQn, 2); // Log keeping should be interruptable
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	2032      	movs	r0, #50	; 0x32
 8000d6e:	f7ff fcdb 	bl	8000728 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8000d72:	2032      	movs	r0, #50	; 0x32
 8000d74:	f7ff fcba 	bl	80006ec <__NVIC_EnableIRQ>

  // TIM4 for dispense timing after commenced by TIM5
  NVIC_SetPriority(TIM4_IRQn, 0); // Dispense accuracy is top priority
 8000d78:	2100      	movs	r1, #0
 8000d7a:	201e      	movs	r0, #30
 8000d7c:	f7ff fcd4 	bl	8000728 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8000d80:	201e      	movs	r0, #30
 8000d82:	f7ff fcb3 	bl	80006ec <__NVIC_EnableIRQ>

  HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); // Ensure brake is disengaged after reset
 8000d86:	2201      	movs	r2, #1
 8000d88:	2140      	movs	r1, #64	; 0x40
 8000d8a:	4824      	ldr	r0, [pc, #144]	; (8000e1c <main+0xf0>)
 8000d8c:	f001 fff4 	bl	8002d78 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
	  if(rx_flag) rx_handle();
 8000d90:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <main+0xf4>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <main+0x70>
 8000d98:	f7ff fdf8 	bl	800098c <rx_handle>


	  if(plunge_done_flag) {
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <main+0xf8>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0f5      	beq.n	8000d90 <main+0x64>
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	2203      	movs	r2, #3
 8000daa:	491f      	ldr	r1, [pc, #124]	; (8000e28 <main+0xfc>)
 8000dac:	481a      	ldr	r0, [pc, #104]	; (8000e18 <main+0xec>)
 8000dae:	f005 fb71 	bl	8006494 <HAL_UART_Transmit>
		  char msg[10];
		  for(int i=0 ; i<log_position; i++) {
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	e018      	b.n	8000dea <main+0xbe>
			  sprintf(msg, "%u\n", posLog[i]);
 8000db8:	4a1c      	ldr	r2, [pc, #112]	; (8000e2c <main+0x100>)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	491a      	ldr	r1, [pc, #104]	; (8000e30 <main+0x104>)
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f008 f840 	bl	8008e4c <siprintf>
//			  bytes[2] = ((posLog[i] >> 8) 		& 0xFF);
//			  bytes[3] = ((posLog[i])	 		& 0xFF);
//
//			  HAL_UART_Transmit(&huart3, bytes, 4, HAL_MAX_DELAY);
//			  HAL_UART_Transmit(&huart3, (uint8_t*)rn, strlen(rn), HAL_MAX_DELAY);
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000dcc:	463b      	mov	r3, r7
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fa8e 	bl	80002f0 <strlen>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	4639      	mov	r1, r7
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	480e      	ldr	r0, [pc, #56]	; (8000e18 <main+0xec>)
 8000de0:	f005 fb58 	bl	8006494 <HAL_UART_Transmit>
		  for(int i=0 ; i<log_position; i++) {
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	3301      	adds	r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <main+0x108>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d3e1      	bcc.n	8000db8 <main+0x8c>
		  }
		  HAL_Delay(750); // delay for PC to do other tasks
 8000df4:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000df8:	f000 ff76 	bl	8001ce8 <HAL_Delay>
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000e00:	2203      	movs	r2, #3
 8000e02:	4909      	ldr	r1, [pc, #36]	; (8000e28 <main+0xfc>)
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <main+0xec>)
 8000e06:	f005 fb45 	bl	8006494 <HAL_UART_Transmit>

		  plunge_done_flag = 0;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <main+0xf8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
	  if(rx_flag) rx_handle();
 8000e10:	e7be      	b.n	8000d90 <main+0x64>
 8000e12:	bf00      	nop
 8000e14:	2400ecf0 	.word	0x2400ecf0
 8000e18:	24000170 	.word	0x24000170
 8000e1c:	58020000 	.word	0x58020000
 8000e20:	2400ecf1 	.word	0x2400ecf1
 8000e24:	2400ec80 	.word	0x2400ec80
 8000e28:	24000004 	.word	0x24000004
 8000e2c:	24000204 	.word	0x24000204
 8000e30:	080097ac 	.word	0x080097ac
 8000e34:	2400ec64 	.word	0x2400ec64

08000e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b09c      	sub	sp, #112	; 0x70
 8000e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	224c      	movs	r2, #76	; 0x4c
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f008 f820 	bl	8008e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2220      	movs	r2, #32
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f008 f81a 	bl	8008e8c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000e58:	4b30      	ldr	r3, [pc, #192]	; (8000f1c <SystemClock_Config+0xe4>)
 8000e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e62:	2004      	movs	r0, #4
 8000e64:	f001 ffa2 	bl	8002dac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e68:	2300      	movs	r3, #0
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <SystemClock_Config+0xe8>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a2b      	ldr	r2, [pc, #172]	; (8000f20 <SystemClock_Config+0xe8>)
 8000e72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <SystemClock_Config+0xe8>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e84:	bf00      	nop
 8000e86:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <SystemClock_Config+0xe8>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e92:	d1f8      	bne.n	8000e86 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e94:	2321      	movs	r3, #33	; 0x21
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e98:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000eae:	2318      	movs	r3, #24
 8000eb0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 ffc6 	bl	8002e60 <HAL_RCC_OscConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000eda:	f000 fad9 	bl	8001490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ede:	233f      	movs	r3, #63	; 0x3f
 8000ee0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2102      	movs	r1, #2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f002 fbde 	bl	80036c4 <HAL_RCC_ClockConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000f0e:	f000 fabf 	bl	8001490 <Error_Handler>
  }
}
 8000f12:	bf00      	nop
 8000f14:	3770      	adds	r7, #112	; 0x70
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	58024400 	.word	0x58024400
 8000f20:	58024800 	.word	0x58024800

08000f24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08c      	sub	sp, #48	; 0x30
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	2224      	movs	r2, #36	; 0x24
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f007 ffaa 	bl	8008e8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	463b      	mov	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f42:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <MX_TIM2_Init+0xd4>)
 8000f44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <MX_TIM2_Init+0xd4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <MX_TIM2_Init+0xd4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f56:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <MX_TIM2_Init+0xd4>)
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <MX_TIM2_Init+0xd4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <MX_TIM2_Init+0xd4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f72:	2301      	movs	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f82:	2301      	movs	r3, #1
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	4619      	mov	r1, r3
 8000f94:	4818      	ldr	r0, [pc, #96]	; (8000ff8 <MX_TIM2_Init+0xd4>)
 8000f96:	f004 fd59 	bl	8005a4c <HAL_TIM_Encoder_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000fa0:	f000 fa76 	bl	8001490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <MX_TIM2_Init+0xd4>)
 8000fb2:	f005 f973 	bl	800629c <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000fbc:	f000 fa68 	bl	8001490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 8000fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fca:	f043 0302 	orr.w	r3, r3, #2
 8000fce:	6013      	str	r3, [r2, #0]
	TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 8000fd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fda:	f023 0301 	bic.w	r3, r3, #1
 8000fde:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8000fe0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fea:	f023 0301 	bic.w	r3, r3, #1
 8000fee:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	3730      	adds	r7, #48	; 0x30
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2400008c 	.word	0x2400008c

08000ffc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001002:	f107 0310 	add.w	r3, r7, #16
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800101a:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <MX_TIM4_Init+0xa8>)
 800101c:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <MX_TIM4_Init+0xac>)
 800101e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_TIM4_Init+0xa8>)
 8001022:	2200      	movs	r2, #0
 8001024:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_TIM4_Init+0xa8>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_TIM4_Init+0xa8>)
 800102e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001032:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_TIM4_Init+0xa8>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_TIM4_Init+0xa8>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001040:	4818      	ldr	r0, [pc, #96]	; (80010a4 <MX_TIM4_Init+0xa8>)
 8001042:	f004 fcab 	bl	800599c <HAL_TIM_Base_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800104c:	f000 fa20 	bl	8001490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001054:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	4619      	mov	r1, r3
 800105c:	4811      	ldr	r0, [pc, #68]	; (80010a4 <MX_TIM4_Init+0xa8>)
 800105e:	f004 febb 	bl	8005dd8 <HAL_TIM_ConfigClockSource>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001068:	f000 fa12 	bl	8001490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	4619      	mov	r1, r3
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <MX_TIM4_Init+0xa8>)
 800107a:	f005 f90f 	bl	800629c <HAL_TIMEx_MasterConfigSynchronization>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001084:	f000 fa04 	bl	8001490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
	TIM4->CR1 &= ~TIM_CR1_CEN; 	// dont start it
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MX_TIM4_Init+0xac>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <MX_TIM4_Init+0xac>)
 800108e:	f023 0301 	bic.w	r3, r3, #1
 8001092:	6013      	str	r3, [r2, #0]
	TIM4->CNT = 0;				//reset it
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <MX_TIM4_Init+0xac>)
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END TIM4_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	240000d8 	.word	0x240000d8
 80010a8:	40000800 	.word	0x40000800

080010ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_TIM5_Init+0x94>)
 80010cc:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <MX_TIM5_Init+0x98>)
 80010ce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_TIM5_Init+0x94>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_TIM5_Init+0x94>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_TIM5_Init+0x94>)
 80010de:	f04f 32ff 	mov.w	r2, #4294967295
 80010e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_TIM5_Init+0x94>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_TIM5_Init+0x94>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80010f0:	4813      	ldr	r0, [pc, #76]	; (8001140 <MX_TIM5_Init+0x94>)
 80010f2:	f004 fc53 	bl	800599c <HAL_TIM_Base_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80010fc:	f000 f9c8 	bl	8001490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001104:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <MX_TIM5_Init+0x94>)
 800110e:	f004 fe63 	bl	8005dd8 <HAL_TIM_ConfigClockSource>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001118:	f000 f9ba 	bl	8001490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_TIM5_Init+0x94>)
 800112a:	f005 f8b7 	bl	800629c <HAL_TIMEx_MasterConfigSynchronization>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001134:	f000 f9ac 	bl	8001490 <Error_Handler>
//  TIM5->DIER |= TIM_DIER_UIE; // Enable update interrupt
//  TIM5->ARR = ENC_DMA_POLL_FREQ; // Timebase

  /* USER CODE END TIM5_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	3720      	adds	r7, #32
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	24000124 	.word	0x24000124
 8001144:	40000c00 	.word	0x40000c00

08001148 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 800114e:	4a23      	ldr	r2, [pc, #140]	; (80011dc <MX_USART3_UART_Init+0x94>)
 8001150:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 8001154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001158:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001190:	4811      	ldr	r0, [pc, #68]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 8001192:	f005 f92f 	bl	80063f4 <HAL_UART_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800119c:	f000 f978 	bl	8001490 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a0:	2100      	movs	r1, #0
 80011a2:	480d      	ldr	r0, [pc, #52]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 80011a4:	f007 fd87 	bl	8008cb6 <HAL_UARTEx_SetTxFifoThreshold>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011ae:	f000 f96f 	bl	8001490 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b2:	2100      	movs	r1, #0
 80011b4:	4808      	ldr	r0, [pc, #32]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 80011b6:	f007 fdbc 	bl	8008d32 <HAL_UARTEx_SetRxFifoThreshold>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011c0:	f000 f966 	bl	8001490 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 80011c6:	f007 fd3d 	bl	8008c44 <HAL_UARTEx_DisableFifoMode>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011d0:	f000 f95e 	bl	8001490 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	24000170 	.word	0x24000170
 80011dc:	40004800 	.word	0x40004800

080011e0 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08e      	sub	sp, #56	; 0x38
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b9b      	ldr	r3, [pc, #620]	; (8001474 <MX_GPIO_Init+0x284>)
 8001208:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800120c:	4a99      	ldr	r2, [pc, #612]	; (8001474 <MX_GPIO_Init+0x284>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001216:	4b97      	ldr	r3, [pc, #604]	; (8001474 <MX_GPIO_Init+0x284>)
 8001218:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	623b      	str	r3, [r7, #32]
 8001222:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001224:	4b93      	ldr	r3, [pc, #588]	; (8001474 <MX_GPIO_Init+0x284>)
 8001226:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800122a:	4a92      	ldr	r2, [pc, #584]	; (8001474 <MX_GPIO_Init+0x284>)
 800122c:	f043 0320 	orr.w	r3, r3, #32
 8001230:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001234:	4b8f      	ldr	r3, [pc, #572]	; (8001474 <MX_GPIO_Init+0x284>)
 8001236:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001242:	4b8c      	ldr	r3, [pc, #560]	; (8001474 <MX_GPIO_Init+0x284>)
 8001244:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001248:	4a8a      	ldr	r2, [pc, #552]	; (8001474 <MX_GPIO_Init+0x284>)
 800124a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800124e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001252:	4b88      	ldr	r3, [pc, #544]	; (8001474 <MX_GPIO_Init+0x284>)
 8001254:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	4b84      	ldr	r3, [pc, #528]	; (8001474 <MX_GPIO_Init+0x284>)
 8001262:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001266:	4a83      	ldr	r2, [pc, #524]	; (8001474 <MX_GPIO_Init+0x284>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001270:	4b80      	ldr	r3, [pc, #512]	; (8001474 <MX_GPIO_Init+0x284>)
 8001272:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b7d      	ldr	r3, [pc, #500]	; (8001474 <MX_GPIO_Init+0x284>)
 8001280:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001284:	4a7b      	ldr	r2, [pc, #492]	; (8001474 <MX_GPIO_Init+0x284>)
 8001286:	f043 0302 	orr.w	r3, r3, #2
 800128a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800128e:	4b79      	ldr	r3, [pc, #484]	; (8001474 <MX_GPIO_Init+0x284>)
 8001290:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800129c:	4b75      	ldr	r3, [pc, #468]	; (8001474 <MX_GPIO_Init+0x284>)
 800129e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012a2:	4a74      	ldr	r2, [pc, #464]	; (8001474 <MX_GPIO_Init+0x284>)
 80012a4:	f043 0310 	orr.w	r3, r3, #16
 80012a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012ac:	4b71      	ldr	r3, [pc, #452]	; (8001474 <MX_GPIO_Init+0x284>)
 80012ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ba:	4b6e      	ldr	r3, [pc, #440]	; (8001474 <MX_GPIO_Init+0x284>)
 80012bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012c0:	4a6c      	ldr	r2, [pc, #432]	; (8001474 <MX_GPIO_Init+0x284>)
 80012c2:	f043 0308 	orr.w	r3, r3, #8
 80012c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012ca:	4b6a      	ldr	r3, [pc, #424]	; (8001474 <MX_GPIO_Init+0x284>)
 80012cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012d8:	4b66      	ldr	r3, [pc, #408]	; (8001474 <MX_GPIO_Init+0x284>)
 80012da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012de:	4a65      	ldr	r2, [pc, #404]	; (8001474 <MX_GPIO_Init+0x284>)
 80012e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012e8:	4b62      	ldr	r3, [pc, #392]	; (8001474 <MX_GPIO_Init+0x284>)
 80012ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USB_FS_PWR_EN_Pin|PAN_STP_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80012fc:	485e      	ldr	r0, [pc, #376]	; (8001478 <MX_GPIO_Init+0x288>)
 80012fe:	f001 fd3b 	bl	8002d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PAN_EN_Pin|TILT_EN_Pin|TILT_STP_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	210d      	movs	r1, #13
 8001306:	485d      	ldr	r0, [pc, #372]	; (800147c <MX_GPIO_Init+0x28c>)
 8001308:	f001 fd36 	bl	8002d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PAN_DIR_Pin|BRAKE_Pin, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	2148      	movs	r1, #72	; 0x48
 8001310:	485b      	ldr	r0, [pc, #364]	; (8001480 <MX_GPIO_Init+0x290>)
 8001312:	f001 fd31 	bl	8002d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TILT_DIR_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f244 0102 	movw	r1, #16386	; 0x4002
 800131c:	4859      	ldr	r0, [pc, #356]	; (8001484 <MX_GPIO_Init+0x294>)
 800131e:	f001 fd2b 	bl	8002d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DROP_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f240 4102 	movw	r1, #1026	; 0x402
 8001328:	4857      	ldr	r0, [pc, #348]	; (8001488 <MX_GPIO_Init+0x298>)
 800132a:	f001 fd25 	bl	8002d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800132e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	484e      	ldr	r0, [pc, #312]	; (800147c <MX_GPIO_Init+0x28c>)
 8001344:	f001 fb68 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PAN_STP_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|PAN_STP_Pin;
 8001348:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	4845      	ldr	r0, [pc, #276]	; (8001478 <MX_GPIO_Init+0x288>)
 8001362:	f001 fb59 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN_EN_Pin TILT_EN_Pin TILT_STP_Pin */
  GPIO_InitStruct.Pin = PAN_EN_Pin|TILT_EN_Pin|TILT_STP_Pin;
 8001366:	230d      	movs	r3, #13
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137a:	4619      	mov	r1, r3
 800137c:	483f      	ldr	r0, [pc, #252]	; (800147c <MX_GPIO_Init+0x28c>)
 800137e:	f001 fb4b 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PAN_DIR_Pin */
  GPIO_InitStruct.Pin = PAN_DIR_Pin;
 8001382:	2308      	movs	r3, #8
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PAN_DIR_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	4619      	mov	r1, r3
 8001398:	4839      	ldr	r0, [pc, #228]	; (8001480 <MX_GPIO_Init+0x290>)
 800139a:	f001 fb3d 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BRAKE_Pin */
  GPIO_InitStruct.Pin = BRAKE_Pin;
 800139e:	2340      	movs	r3, #64	; 0x40
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013a6:	2302      	movs	r3, #2
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BRAKE_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	4832      	ldr	r0, [pc, #200]	; (8001480 <MX_GPIO_Init+0x290>)
 80013b6:	f001 fb2f 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : TILT_DIR_Pin LD3_Pin */
  GPIO_InitStruct.Pin = TILT_DIR_Pin|LD3_Pin;
 80013ba:	f244 0302 	movw	r3, #16386	; 0x4002
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d0:	4619      	mov	r1, r3
 80013d2:	482c      	ldr	r0, [pc, #176]	; (8001484 <MX_GPIO_Init+0x294>)
 80013d4:	f001 fb20 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : DROP_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DROP_Pin|LD2_Pin;
 80013d8:	f240 4302 	movw	r3, #1026	; 0x402
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	4619      	mov	r1, r3
 80013f0:	4825      	ldr	r0, [pc, #148]	; (8001488 <MX_GPIO_Init+0x298>)
 80013f2:	f001 fb11 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001408:	4619      	mov	r1, r3
 800140a:	4820      	ldr	r0, [pc, #128]	; (800148c <MX_GPIO_Init+0x29c>)
 800140c:	f001 fb04 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001416:	2300      	movs	r3, #0
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001422:	4619      	mov	r1, r3
 8001424:	4816      	ldr	r0, [pc, #88]	; (8001480 <MX_GPIO_Init+0x290>)
 8001426:	f001 faf7 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800142a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800143c:	230a      	movs	r3, #10
 800143e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001444:	4619      	mov	r1, r3
 8001446:	480e      	ldr	r0, [pc, #56]	; (8001480 <MX_GPIO_Init+0x290>)
 8001448:	f001 fae6 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800144c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_GPIO_Init+0x290>)
 8001466:	f001 fad7 	bl	8002a18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800146a:	bf00      	nop
 800146c:	3738      	adds	r7, #56	; 0x38
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	58024400 	.word	0x58024400
 8001478:	58021400 	.word	0x58021400
 800147c:	58020800 	.word	0x58020800
 8001480:	58020000 	.word	0x58020000
 8001484:	58020400 	.word	0x58020400
 8001488:	58021000 	.word	0x58021000
 800148c:	58021800 	.word	0x58021800

08001490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001494:	b672      	cpsid	i
}
 8001496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001498:	e7fe      	b.n	8001498 <Error_Handler+0x8>
	...

0800149c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_MspInit+0x30>)
 80014a4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80014a8:	4a08      	ldr	r2, [pc, #32]	; (80014cc <HAL_MspInit+0x30>)
 80014aa:	f043 0302 	orr.w	r3, r3, #2
 80014ae:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_MspInit+0x30>)
 80014b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	58024400 	.word	0x58024400

080014d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f0:	d135      	bne.n	800155e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HAL_TIM_Encoder_MspInit+0x98>)
 80014f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80014f8:	4a1b      	ldr	r2, [pc, #108]	; (8001568 <HAL_TIM_Encoder_MspInit+0x98>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_TIM_Encoder_MspInit+0x98>)
 8001504:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_TIM_Encoder_MspInit+0x98>)
 8001512:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001516:	4a14      	ldr	r2, [pc, #80]	; (8001568 <HAL_TIM_Encoder_MspInit+0x98>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_TIM_Encoder_MspInit+0x98>)
 8001522:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PLUNGE_ENC_A_Pin|PLUNGE_ENC_B_Pin;
 800152e:	2303      	movs	r3, #3
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800153e:	2301      	movs	r3, #1
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4808      	ldr	r0, [pc, #32]	; (800156c <HAL_TIM_Encoder_MspInit+0x9c>)
 800154a:	f001 fa65 	bl	8002a18 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	201c      	movs	r0, #28
 8001554:	f000 fcc7 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001558:	201c      	movs	r0, #28
 800155a:	f000 fcde 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800155e:	bf00      	nop
 8001560:	3728      	adds	r7, #40	; 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	58024400 	.word	0x58024400
 800156c:	58020000 	.word	0x58020000

08001570 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a1d      	ldr	r2, [pc, #116]	; (80015f4 <HAL_TIM_Base_MspInit+0x84>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d117      	bne.n	80015b2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_TIM_Base_MspInit+0x88>)
 8001584:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001588:	4a1b      	ldr	r2, [pc, #108]	; (80015f8 <HAL_TIM_Base_MspInit+0x88>)
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_TIM_Base_MspInit+0x88>)
 8001594:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2100      	movs	r1, #0
 80015a4:	201e      	movs	r0, #30
 80015a6:	f000 fc9e 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015aa:	201e      	movs	r0, #30
 80015ac:	f000 fcb5 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80015b0:	e01b      	b.n	80015ea <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a11      	ldr	r2, [pc, #68]	; (80015fc <HAL_TIM_Base_MspInit+0x8c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d116      	bne.n	80015ea <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_TIM_Base_MspInit+0x88>)
 80015be:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015c2:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_TIM_Base_MspInit+0x88>)
 80015c4:	f043 0308 	orr.w	r3, r3, #8
 80015c8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_TIM_Base_MspInit+0x88>)
 80015ce:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	2032      	movs	r0, #50	; 0x32
 80015e0:	f000 fc81 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80015e4:	2032      	movs	r0, #50	; 0x32
 80015e6:	f000 fc98 	bl	8001f1a <HAL_NVIC_EnableIRQ>
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40000800 	.word	0x40000800
 80015f8:	58024400 	.word	0x58024400
 80015fc:	40000c00 	.word	0x40000c00

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b0ba      	sub	sp, #232	; 0xe8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	22c0      	movs	r2, #192	; 0xc0
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f007 fc33 	bl	8008e8c <memset>
  if(huart->Instance==USART3)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a2b      	ldr	r2, [pc, #172]	; (80016d8 <HAL_UART_MspInit+0xd8>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d14e      	bne.n	80016ce <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001630:	f04f 0202 	mov.w	r2, #2
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001642:	f107 0310 	add.w	r3, r7, #16
 8001646:	4618      	mov	r0, r3
 8001648:	f002 fbc8 	bl	8003ddc <HAL_RCCEx_PeriphCLKConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001652:	f7ff ff1d 	bl	8001490 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001656:	4b21      	ldr	r3, [pc, #132]	; (80016dc <HAL_UART_MspInit+0xdc>)
 8001658:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800165c:	4a1f      	ldr	r2, [pc, #124]	; (80016dc <HAL_UART_MspInit+0xdc>)
 800165e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001662:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_UART_MspInit+0xdc>)
 8001668:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800166c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_UART_MspInit+0xdc>)
 8001676:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800167a:	4a18      	ldr	r2, [pc, #96]	; (80016dc <HAL_UART_MspInit+0xdc>)
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001684:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_UART_MspInit+0xdc>)
 8001686:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001692:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ac:	2307      	movs	r3, #7
 80016ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4809      	ldr	r0, [pc, #36]	; (80016e0 <HAL_UART_MspInit+0xe0>)
 80016ba:	f001 f9ad 	bl	8002a18 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	2027      	movs	r0, #39	; 0x27
 80016c4:	f000 fc0f 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016c8:	2027      	movs	r0, #39	; 0x27
 80016ca:	f000 fc26 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016ce:	bf00      	nop
 80016d0:	37e8      	adds	r7, #232	; 0xe8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40004800 	.word	0x40004800
 80016dc:	58024400 	.word	0x58024400
 80016e0:	58020c00 	.word	0x58020c00

080016e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <NMI_Handler+0x4>

080016ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <MemManage_Handler+0x4>

080016f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <UsageFault_Handler+0x4>

08001702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001730:	f000 faba 	bl	8001ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//NOTE TO MORNING LEO: LOG SEEMS TO WORK, SHOULD TRANSMIT IT TO PC FOR EASY VISUALIZATION
	if ((TIM2->SR & TIM_SR_UIF) != 0) { // check if update interrupt occured
 800173c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d02a      	beq.n	80017a0 <TIM2_IRQHandler+0x68>
		HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 0); //engage brake
 800174a:	2200      	movs	r2, #0
 800174c:	2140      	movs	r1, #64	; 0x40
 800174e:	4817      	ldr	r0, [pc, #92]	; (80017ac <TIM2_IRQHandler+0x74>)
 8001750:	f001 fb12 	bl	8002d78 <HAL_GPIO_WritePin>
		posn_braked_at = TIM2->CNT;
 8001754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	4a15      	ldr	r2, [pc, #84]	; (80017b0 <TIM2_IRQHandler+0x78>)
 800175c:	6013      	str	r3, [r2, #0]
		//also somehow make sure motor is stopped

		plunge_done_flag = 1;
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <TIM2_IRQHandler+0x7c>)
 8001760:	2201      	movs	r2, #1
 8001762:	701a      	strb	r2, [r3, #0]

		TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 8001764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800176e:	f043 0302 	orr.w	r3, r3, #2
 8001772:	6013      	str	r3, [r2, #0]
		TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 8001774:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// disable tim2
 8001784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	6013      	str	r3, [r2, #0]
		TIM5->CR1  &= ~TIM_CR1_CEN; 	// disable tim5
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <TIM2_IRQHandler+0x80>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <TIM2_IRQHandler+0x80>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	6013      	str	r3, [r2, #0]

		//TIM2->ARR = 999999;			//massive so that we dont hit it when we try to move around. later i can just diable timer but for debugging i want to preserve tim2->cnt
    }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017a0:	4806      	ldr	r0, [pc, #24]	; (80017bc <TIM2_IRQHandler+0x84>)
 80017a2:	f004 f9f9 	bl	8005b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	58020000 	.word	0x58020000
 80017b0:	2400ec7c 	.word	0x2400ec7c
 80017b4:	2400ec80 	.word	0x2400ec80
 80017b8:	40000c00 	.word	0x40000c00
 80017bc:	2400008c 	.word	0x2400008c

080017c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if ((TIM4->SR & TIM_SR_UIF) != 0) {
 80017c4:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <TIM4_IRQHandler+0x3c>)
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d010      	beq.n	80017f2 <TIM4_IRQHandler+0x32>
		DEPOSITED = 1;
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <TIM4_IRQHandler+0x40>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
		dispense();
 80017d6:	f7fe ff61 	bl	800069c <dispense>
		TIM4->DIER &=  ~TIM_DIER_UIE; 	// update interrupt disabled
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <TIM4_IRQHandler+0x3c>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <TIM4_IRQHandler+0x3c>)
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	60d3      	str	r3, [r2, #12]
		TIM4->CR1 &= ~TIM_CR1_CEN; 	// only fire this timer once
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <TIM4_IRQHandler+0x3c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <TIM4_IRQHandler+0x3c>)
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017f2:	4804      	ldr	r0, [pc, #16]	; (8001804 <TIM4_IRQHandler+0x44>)
 80017f4:	f004 f9d0 	bl	8005b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40000800 	.word	0x40000800
 8001800:	2400ec81 	.word	0x2400ec81
 8001804:	240000d8 	.word	0x240000d8

08001808 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	//dispense();
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <USART3_IRQHandler+0x10>)
 800180e:	f004 ff1b 	bl	8006648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	24000170 	.word	0x24000170
 800181c:	00000000 	.word	0x00000000

08001820 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
		/* always do the logging portion */
		/* TODO: Convert this datalogging to DMA to speed it up. actually a priority I think it would have big performance gains*/
		log_position += 1; // increment number of data points taken
 8001826:	4b6c      	ldr	r3, [pc, #432]	; (80019d8 <TIM5_IRQHandler+0x1b8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	4a6a      	ldr	r2, [pc, #424]	; (80019d8 <TIM5_IRQHandler+0x1b8>)
 800182e:	6013      	str	r3, [r2, #0]
		current_pos = TIM2->CNT;
 8001830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	4a69      	ldr	r2, [pc, #420]	; (80019dc <TIM5_IRQHandler+0x1bc>)
 8001838:	6013      	str	r3, [r2, #0]
		posLog[log_position] = current_pos; // update log of positions
 800183a:	4b68      	ldr	r3, [pc, #416]	; (80019dc <TIM5_IRQHandler+0x1bc>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4b66      	ldr	r3, [pc, #408]	; (80019d8 <TIM5_IRQHandler+0x1b8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	b291      	uxth	r1, r2
 8001844:	4a66      	ldr	r2, [pc, #408]	; (80019e0 <TIM5_IRQHandler+0x1c0>)
 8001846:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		running_sum += current_pos - prev_pos;
 800184a:	4b64      	ldr	r3, [pc, #400]	; (80019dc <TIM5_IRQHandler+0x1bc>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b65      	ldr	r3, [pc, #404]	; (80019e4 <TIM5_IRQHandler+0x1c4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	1ad2      	subs	r2, r2, r3
 8001854:	4b64      	ldr	r3, [pc, #400]	; (80019e8 <TIM5_IRQHandler+0x1c8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4413      	add	r3, r2
 800185a:	4a63      	ldr	r2, [pc, #396]	; (80019e8 <TIM5_IRQHandler+0x1c8>)
 800185c:	6013      	str	r3, [r2, #0]
		prev_pos = current_pos;
 800185e:	4b5f      	ldr	r3, [pc, #380]	; (80019dc <TIM5_IRQHandler+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a60      	ldr	r2, [pc, #384]	; (80019e4 <TIM5_IRQHandler+0x1c4>)
 8001864:	6013      	str	r3, [r2, #0]
		/* if disp hasnt triggered yet, calculate speed and find disp pos */
		if(!disp_flag){
 8001866:	4b61      	ldr	r3, [pc, #388]	; (80019ec <TIM5_IRQHandler+0x1cc>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	f040 809f 	bne.w	80019ae <TIM5_IRQHandler+0x18e>
			if(log_position >= MOVING_AVG_LENGTH) {
 8001870:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <TIM5_IRQHandler+0x1b8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2bc7      	cmp	r3, #199	; 0xc7
 8001876:	f240 809a 	bls.w	80019ae <TIM5_IRQHandler+0x18e>
				/*update running sum of most recent n data points*/
				running_sum -= (posLog[log_position - MOVING_AVG_LENGTH + 1] - posLog[log_position - MOVING_AVG_LENGTH]);
 800187a:	4b5b      	ldr	r3, [pc, #364]	; (80019e8 <TIM5_IRQHandler+0x1c8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a56      	ldr	r2, [pc, #344]	; (80019d8 <TIM5_IRQHandler+0x1b8>)
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	3ac7      	subs	r2, #199	; 0xc7
 8001884:	4956      	ldr	r1, [pc, #344]	; (80019e0 <TIM5_IRQHandler+0x1c0>)
 8001886:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800188a:	4610      	mov	r0, r2
 800188c:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <TIM5_IRQHandler+0x1b8>)
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	3ac8      	subs	r2, #200	; 0xc8
 8001892:	4953      	ldr	r1, [pc, #332]	; (80019e0 <TIM5_IRQHandler+0x1c0>)
 8001894:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001898:	1a82      	subs	r2, r0, r2
 800189a:	1a9b      	subs	r3, r3, r2
 800189c:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <TIM5_IRQHandler+0x1c8>)
 800189e:	6013      	str	r3, [r2, #0]
				speed = (double)running_sum / (double)MOVING_AVG_LENGTH; // speed in pulses per log
 80018a0:	4b51      	ldr	r3, [pc, #324]	; (80019e8 <TIM5_IRQHandler+0x1c8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80018ac:	ed9f 5b46 	vldr	d5, [pc, #280]	; 80019c8 <TIM5_IRQHandler+0x1a8>
 80018b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018b4:	4b4e      	ldr	r3, [pc, #312]	; (80019f0 <TIM5_IRQHandler+0x1d0>)
 80018b6:	ed83 7b00 	vstr	d7, [r3]

				uint32_t clocks_per_encoder_pulse = (CLOCKS_PER_LOG / speed); // a form of speed measurement
 80018ba:	4b4d      	ldr	r3, [pc, #308]	; (80019f0 <TIM5_IRQHandler+0x1d0>)
 80018bc:	ed93 6b00 	vldr	d6, [r3]
 80018c0:	ed9f 5b43 	vldr	d5, [pc, #268]	; 80019d0 <TIM5_IRQHandler+0x1b0>
 80018c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80018c8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018cc:	ee17 3a90 	vmov	r3, s15
 80018d0:	607b      	str	r3, [r7, #4]

				next_next_pos = current_pos + 2*speed;	// predicted position 2 TIM5 updates from now. if this is beyond disp_pos we want to trigger TIM4
 80018d2:	4b42      	ldr	r3, [pc, #264]	; (80019dc <TIM5_IRQHandler+0x1bc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	ee07 3a90 	vmov	s15, r3
 80018da:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80018de:	4b44      	ldr	r3, [pc, #272]	; (80019f0 <TIM5_IRQHandler+0x1d0>)
 80018e0:	ed93 7b00 	vldr	d7, [r3]
 80018e4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80018e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018f0:	ee17 2a90 	vmov	r2, s15
 80018f4:	4b3f      	ldr	r3, [pc, #252]	; (80019f4 <TIM5_IRQHandler+0x1d4>)
 80018f6:	601a      	str	r2, [r3, #0]

				// enc				enc		   enc/log			clocks 				clocks/log
				dispense_pos = (timepoint_pos) - (speed * (dispense_delay_clocks / CLOCKS_PER_LOG));
 80018f8:	4b3f      	ldr	r3, [pc, #252]	; (80019f8 <TIM5_IRQHandler+0x1d8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001904:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <TIM5_IRQHandler+0x1dc>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	ee07 3a90 	vmov	s15, r3
 800190c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001910:	ed9f 4b2f 	vldr	d4, [pc, #188]	; 80019d0 <TIM5_IRQHandler+0x1b0>
 8001914:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001918:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <TIM5_IRQHandler+0x1d0>)
 800191a:	ed93 7b00 	vldr	d7, [r3]
 800191e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001922:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001926:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800192a:	ee17 2a90 	vmov	r2, s15
 800192e:	4b34      	ldr	r3, [pc, #208]	; (8001a00 <TIM5_IRQHandler+0x1e0>)
 8001930:	601a      	str	r2, [r3, #0]
				//		(enc ticks @ intersection) - (encoder ticks between disp signal and contact )
				// dispense_delay_clocks is based on the geometry of the dipense (ie distance and speed that the drop is shooting at)

				if(next_next_pos > dispense_pos) { // dispense comes within the next timebase
 8001932:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <TIM5_IRQHandler+0x1d4>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <TIM5_IRQHandler+0x1e0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d937      	bls.n	80019ae <TIM5_IRQHandler+0x18e>

					/* Insert a marker for when dispense happened */
					//log_position += 1;
					//posLog[log_position] = 12345678;

					disp_flag = 1;
 800193e:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <TIM5_IRQHandler+0x1cc>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]

					// using this with a third timer is likely the most accurate. allows inter-encoder values
					clocks_to_disp = clocks_per_encoder_pulse*(dispense_pos-current_pos);
 8001944:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <TIM5_IRQHandler+0x1e0>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <TIM5_IRQHandler+0x1bc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	4a2b      	ldr	r2, [pc, #172]	; (8001a04 <TIM5_IRQHandler+0x1e4>)
 8001956:	6013      	str	r3, [r2, #0]

					/* start TIM4 to count to clocks_to_disp */
					TIM4->CR1  &= ~TIM_CR1_CEN; 	//stop counter
 8001958:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <TIM5_IRQHandler+0x1e8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a2a      	ldr	r2, [pc, #168]	; (8001a08 <TIM5_IRQHandler+0x1e8>)
 800195e:	f023 0301 	bic.w	r3, r3, #1
 8001962:	6013      	str	r3, [r2, #0]
					TIM4->CNT   = 0;				// Reset count
 8001964:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <TIM5_IRQHandler+0x1e8>)
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
					TIM4->ARR 	= clocks_to_disp; 	// Update event when we want to dispense
 800196a:	4a27      	ldr	r2, [pc, #156]	; (8001a08 <TIM5_IRQHandler+0x1e8>)
 800196c:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <TIM5_IRQHandler+0x1e4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	62d3      	str	r3, [r2, #44]	; 0x2c
					TIM4->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8001972:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <TIM5_IRQHandler+0x1e8>)
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	4a24      	ldr	r2, [pc, #144]	; (8001a08 <TIM5_IRQHandler+0x1e8>)
 8001978:	f023 0301 	bic.w	r3, r3, #1
 800197c:	6113      	str	r3, [r2, #16]
					TIM4->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <TIM5_IRQHandler+0x1e8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a21      	ldr	r2, [pc, #132]	; (8001a08 <TIM5_IRQHandler+0x1e8>)
 8001984:	f023 0302 	bic.w	r3, r3, #2
 8001988:	6013      	str	r3, [r2, #0]
					TIM4->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 800198a:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <TIM5_IRQHandler+0x1e8>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <TIM5_IRQHandler+0x1e8>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	60d3      	str	r3, [r2, #12]
					TIM4->CR1  |=  TIM_CR1_ARPE;	// enable auto reload preload
 8001996:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <TIM5_IRQHandler+0x1e8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1b      	ldr	r2, [pc, #108]	; (8001a08 <TIM5_IRQHandler+0x1e8>)
 800199c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a0:	6013      	str	r3, [r2, #0]
					TIM4->CR1  |=  TIM_CR1_CEN; 	//start counter
 80019a2:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <TIM5_IRQHandler+0x1e8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <TIM5_IRQHandler+0x1e8>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6013      	str	r3, [r2, #0]
			}


		}

		TIM5->SR &= ~TIM_SR_UIF; // Clear the TIM5 update flag
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <TIM5_IRQHandler+0x1ec>)
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	4a16      	ldr	r2, [pc, #88]	; (8001a0c <TIM5_IRQHandler+0x1ec>)
 80019b4:	f023 0301 	bic.w	r3, r3, #1
 80019b8:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80019ba:	4815      	ldr	r0, [pc, #84]	; (8001a10 <TIM5_IRQHandler+0x1f0>)
 80019bc:	f004 f8ec 	bl	8005b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	00000000 	.word	0x00000000
 80019cc:	40690000 	.word	0x40690000
 80019d0:	00000000 	.word	0x00000000
 80019d4:	409e0000 	.word	0x409e0000
 80019d8:	2400ec64 	.word	0x2400ec64
 80019dc:	2400ed08 	.word	0x2400ed08
 80019e0:	24000204 	.word	0x24000204
 80019e4:	2400ed0c 	.word	0x2400ed0c
 80019e8:	2400ec68 	.word	0x2400ec68
 80019ec:	2400ec74 	.word	0x2400ec74
 80019f0:	2400ed00 	.word	0x2400ed00
 80019f4:	2400ed10 	.word	0x2400ed10
 80019f8:	2400ec6c 	.word	0x2400ec6c
 80019fc:	2400ec70 	.word	0x2400ec70
 8001a00:	2400ec78 	.word	0x2400ec78
 8001a04:	2400ec84 	.word	0x2400ec84
 8001a08:	40000800 	.word	0x40000800
 8001a0c:	40000c00 	.word	0x40000c00
 8001a10:	24000124 	.word	0x24000124

08001a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <_sbrk+0x5c>)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <_sbrk+0x60>)
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <_sbrk+0x64>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <_sbrk+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d207      	bcs.n	8001a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a44:	f007 fa2a 	bl	8008e9c <__errno>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	e009      	b.n	8001a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <_sbrk+0x64>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	24100000 	.word	0x24100000
 8001a74:	00000400 	.word	0x00000400
 8001a78:	2400ed14 	.word	0x2400ed14
 8001a7c:	2400ee68 	.word	0x2400ee68

08001a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a84:	4b32      	ldr	r3, [pc, #200]	; (8001b50 <SystemInit+0xd0>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8a:	4a31      	ldr	r2, [pc, #196]	; (8001b50 <SystemInit+0xd0>)
 8001a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a94:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <SystemInit+0xd4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d807      	bhi.n	8001ab0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001aa0:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <SystemInit+0xd4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 030f 	bic.w	r3, r3, #15
 8001aa8:	4a2a      	ldr	r2, [pc, #168]	; (8001b54 <SystemInit+0xd4>)
 8001aaa:	f043 0303 	orr.w	r3, r3, #3
 8001aae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ab0:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <SystemInit+0xd8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a28      	ldr	r2, [pc, #160]	; (8001b58 <SystemInit+0xd8>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001abc:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <SystemInit+0xd8>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ac2:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <SystemInit+0xd8>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4924      	ldr	r1, [pc, #144]	; (8001b58 <SystemInit+0xd8>)
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <SystemInit+0xdc>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ace:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <SystemInit+0xd4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d007      	beq.n	8001aea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ada:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <SystemInit+0xd4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 030f 	bic.w	r3, r3, #15
 8001ae2:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <SystemInit+0xd4>)
 8001ae4:	f043 0303 	orr.w	r3, r3, #3
 8001ae8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <SystemInit+0xd8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <SystemInit+0xd8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <SystemInit+0xd8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <SystemInit+0xd8>)
 8001afe:	4a18      	ldr	r2, [pc, #96]	; (8001b60 <SystemInit+0xe0>)
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <SystemInit+0xd8>)
 8001b04:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <SystemInit+0xe4>)
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <SystemInit+0xd8>)
 8001b0a:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <SystemInit+0xe8>)
 8001b0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <SystemInit+0xd8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <SystemInit+0xd8>)
 8001b16:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <SystemInit+0xe8>)
 8001b18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <SystemInit+0xd8>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <SystemInit+0xd8>)
 8001b22:	4a11      	ldr	r2, [pc, #68]	; (8001b68 <SystemInit+0xe8>)
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <SystemInit+0xd8>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <SystemInit+0xd8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <SystemInit+0xd8>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <SystemInit+0xd8>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <SystemInit+0xec>)
 8001b40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b44:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00
 8001b54:	52002000 	.word	0x52002000
 8001b58:	58024400 	.word	0x58024400
 8001b5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b60:	02020200 	.word	0x02020200
 8001b64:	01ff0000 	.word	0x01ff0000
 8001b68:	01010280 	.word	0x01010280
 8001b6c:	52004000 	.word	0x52004000

08001b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b74:	f7ff ff84 	bl	8001a80 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b78:	480c      	ldr	r0, [pc, #48]	; (8001bac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b7a:	490d      	ldr	r1, [pc, #52]	; (8001bb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b7c:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b80:	e002      	b.n	8001b88 <LoopCopyDataInit>

08001b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b86:	3304      	adds	r3, #4

08001b88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b8c:	d3f9      	bcc.n	8001b82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b90:	4c0a      	ldr	r4, [pc, #40]	; (8001bbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b94:	e001      	b.n	8001b9a <LoopFillZerobss>

08001b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b98:	3204      	adds	r2, #4

08001b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b9c:	d3fb      	bcc.n	8001b96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b9e:	f007 f983 	bl	8008ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ba2:	f7ff f8c3 	bl	8000d2c <main>
  bx  lr
 8001ba6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ba8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001bac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bb0:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001bb4:	0800982c 	.word	0x0800982c
  ldr r2, =_sbss
 8001bb8:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001bbc:	2400ee64 	.word	0x2400ee64

08001bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc0:	e7fe      	b.n	8001bc0 <ADC_IRQHandler>
	...

08001bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bca:	2003      	movs	r0, #3
 8001bcc:	f000 f980 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001bd0:	f001 ff2e 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_Init+0x68>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	4913      	ldr	r1, [pc, #76]	; (8001c30 <HAL_Init+0x6c>)
 8001be2:	5ccb      	ldrb	r3, [r1, r3]
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bec:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <HAL_Init+0x68>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <HAL_Init+0x6c>)
 8001bf8:	5cd3      	ldrb	r3, [r2, r3]
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
 8001c04:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <HAL_Init+0x70>)
 8001c06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c08:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <HAL_Init+0x74>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f000 f814 	bl	8001c3c <HAL_InitTick>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e002      	b.n	8001c24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1e:	f7ff fc3d 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	58024400 	.word	0x58024400
 8001c30:	080097b0 	.word	0x080097b0
 8001c34:	24000010 	.word	0x24000010
 8001c38:	2400000c 	.word	0x2400000c

08001c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c44:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_InitTick+0x60>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e021      	b.n	8001c94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_InitTick+0x64>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_InitTick+0x60>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f965 	bl	8001f36 <HAL_SYSTICK_Config>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00e      	b.n	8001c94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	d80a      	bhi.n	8001c92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f000 f92f 	bl	8001ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c88:	4a06      	ldr	r2, [pc, #24]	; (8001ca4 <HAL_InitTick+0x68>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e000      	b.n	8001c94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	24000018 	.word	0x24000018
 8001ca0:	2400000c 	.word	0x2400000c
 8001ca4:	24000014 	.word	0x24000014

08001ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_IncTick+0x24>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <HAL_IncTick+0x24>)
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	24000018 	.word	0x24000018
 8001ccc:	2400ed18 	.word	0x2400ed18

08001cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_GetTick+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	2400ed18 	.word	0x2400ed18

08001ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff ffee 	bl	8001cd0 <HAL_GetTick>
 8001cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d005      	beq.n	8001d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_Delay+0x44>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d0e:	bf00      	nop
 8001d10:	f7ff ffde 	bl	8001cd0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d8f7      	bhi.n	8001d10 <HAL_Delay+0x28>
  {
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	24000018 	.word	0x24000018

08001d30 <__NVIC_SetPriorityGrouping>:
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <__NVIC_SetPriorityGrouping+0x40>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <__NVIC_SetPriorityGrouping+0x40>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00
 8001d74:	05fa0000 	.word	0x05fa0000

08001d78 <__NVIC_GetPriorityGrouping>:
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <__NVIC_GetPriorityGrouping+0x18>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	f003 0307 	and.w	r3, r3, #7
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_EnableIRQ>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	db0b      	blt.n	8001dbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	4907      	ldr	r1, [pc, #28]	; (8001dcc <__NVIC_EnableIRQ+0x38>)
 8001dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2001      	movs	r0, #1
 8001db6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000e100 	.word	0xe000e100

08001dd0 <__NVIC_SetPriority>:
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ddc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db0a      	blt.n	8001dfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	490c      	ldr	r1, [pc, #48]	; (8001e1c <__NVIC_SetPriority+0x4c>)
 8001dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	440b      	add	r3, r1
 8001df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001df8:	e00a      	b.n	8001e10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4908      	ldr	r1, [pc, #32]	; (8001e20 <__NVIC_SetPriority+0x50>)
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	3b04      	subs	r3, #4
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	761a      	strb	r2, [r3, #24]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000e100 	.word	0xe000e100
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	; 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f1c3 0307 	rsb	r3, r3, #7
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	bf28      	it	cs
 8001e42:	2304      	movcs	r3, #4
 8001e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d902      	bls.n	8001e54 <NVIC_EncodePriority+0x30>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3b03      	subs	r3, #3
 8001e52:	e000      	b.n	8001e56 <NVIC_EncodePriority+0x32>
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	401a      	ands	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	43d9      	mvns	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	4313      	orrs	r3, r2
         );
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	; 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e9c:	d301      	bcc.n	8001ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00f      	b.n	8001ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <SysTick_Config+0x40>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eaa:	210f      	movs	r1, #15
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f7ff ff8e 	bl	8001dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <SysTick_Config+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <SysTick_Config+0x40>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff29 	bl	8001d30 <__NVIC_SetPriorityGrouping>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef4:	f7ff ff40 	bl	8001d78 <__NVIC_GetPriorityGrouping>
 8001ef8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	6978      	ldr	r0, [r7, #20]
 8001f00:	f7ff ff90 	bl	8001e24 <NVIC_EncodePriority>
 8001f04:	4602      	mov	r2, r0
 8001f06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff5f 	bl	8001dd0 <__NVIC_SetPriority>
}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff33 	bl	8001d94 <__NVIC_EnableIRQ>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ffa4 	bl	8001e8c <SysTick_Config>
 8001f44:	4603      	mov	r3, r0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff feba 	bl	8001cd0 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e2dc      	b.n	8002522 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d008      	beq.n	8001f86 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2280      	movs	r2, #128	; 0x80
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e2cd      	b.n	8002522 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a76      	ldr	r2, [pc, #472]	; (8002164 <HAL_DMA_Abort+0x214>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d04a      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a74      	ldr	r2, [pc, #464]	; (8002168 <HAL_DMA_Abort+0x218>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d045      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a73      	ldr	r2, [pc, #460]	; (800216c <HAL_DMA_Abort+0x21c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d040      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a71      	ldr	r2, [pc, #452]	; (8002170 <HAL_DMA_Abort+0x220>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d03b      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a70      	ldr	r2, [pc, #448]	; (8002174 <HAL_DMA_Abort+0x224>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d036      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a6e      	ldr	r2, [pc, #440]	; (8002178 <HAL_DMA_Abort+0x228>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d031      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a6d      	ldr	r2, [pc, #436]	; (800217c <HAL_DMA_Abort+0x22c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d02c      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a6b      	ldr	r2, [pc, #428]	; (8002180 <HAL_DMA_Abort+0x230>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d027      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a6a      	ldr	r2, [pc, #424]	; (8002184 <HAL_DMA_Abort+0x234>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d022      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a68      	ldr	r2, [pc, #416]	; (8002188 <HAL_DMA_Abort+0x238>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01d      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a67      	ldr	r2, [pc, #412]	; (800218c <HAL_DMA_Abort+0x23c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d018      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a65      	ldr	r2, [pc, #404]	; (8002190 <HAL_DMA_Abort+0x240>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a64      	ldr	r2, [pc, #400]	; (8002194 <HAL_DMA_Abort+0x244>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00e      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a62      	ldr	r2, [pc, #392]	; (8002198 <HAL_DMA_Abort+0x248>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d009      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a61      	ldr	r2, [pc, #388]	; (800219c <HAL_DMA_Abort+0x24c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d004      	beq.n	8002026 <HAL_DMA_Abort+0xd6>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a5f      	ldr	r2, [pc, #380]	; (80021a0 <HAL_DMA_Abort+0x250>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_DMA_Abort+0xda>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_DMA_Abort+0xdc>
 800202a:	2300      	movs	r3, #0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d013      	beq.n	8002058 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 021e 	bic.w	r2, r2, #30
 800203e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800204e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e00a      	b.n	800206e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 020e 	bic.w	r2, r2, #14
 8002066:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a3c      	ldr	r2, [pc, #240]	; (8002164 <HAL_DMA_Abort+0x214>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d072      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a3a      	ldr	r2, [pc, #232]	; (8002168 <HAL_DMA_Abort+0x218>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d06d      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a39      	ldr	r2, [pc, #228]	; (800216c <HAL_DMA_Abort+0x21c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d068      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a37      	ldr	r2, [pc, #220]	; (8002170 <HAL_DMA_Abort+0x220>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d063      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a36      	ldr	r2, [pc, #216]	; (8002174 <HAL_DMA_Abort+0x224>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d05e      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a34      	ldr	r2, [pc, #208]	; (8002178 <HAL_DMA_Abort+0x228>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d059      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a33      	ldr	r2, [pc, #204]	; (800217c <HAL_DMA_Abort+0x22c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d054      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a31      	ldr	r2, [pc, #196]	; (8002180 <HAL_DMA_Abort+0x230>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d04f      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a30      	ldr	r2, [pc, #192]	; (8002184 <HAL_DMA_Abort+0x234>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d04a      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a2e      	ldr	r2, [pc, #184]	; (8002188 <HAL_DMA_Abort+0x238>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d045      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a2d      	ldr	r2, [pc, #180]	; (800218c <HAL_DMA_Abort+0x23c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d040      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a2b      	ldr	r2, [pc, #172]	; (8002190 <HAL_DMA_Abort+0x240>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d03b      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a2a      	ldr	r2, [pc, #168]	; (8002194 <HAL_DMA_Abort+0x244>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d036      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a28      	ldr	r2, [pc, #160]	; (8002198 <HAL_DMA_Abort+0x248>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d031      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a27      	ldr	r2, [pc, #156]	; (800219c <HAL_DMA_Abort+0x24c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d02c      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a25      	ldr	r2, [pc, #148]	; (80021a0 <HAL_DMA_Abort+0x250>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d027      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a24      	ldr	r2, [pc, #144]	; (80021a4 <HAL_DMA_Abort+0x254>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d022      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a22      	ldr	r2, [pc, #136]	; (80021a8 <HAL_DMA_Abort+0x258>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d01d      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a21      	ldr	r2, [pc, #132]	; (80021ac <HAL_DMA_Abort+0x25c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d018      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1f      	ldr	r2, [pc, #124]	; (80021b0 <HAL_DMA_Abort+0x260>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a1e      	ldr	r2, [pc, #120]	; (80021b4 <HAL_DMA_Abort+0x264>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d00e      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1c      	ldr	r2, [pc, #112]	; (80021b8 <HAL_DMA_Abort+0x268>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d009      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <HAL_DMA_Abort+0x26c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d004      	beq.n	800215e <HAL_DMA_Abort+0x20e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <HAL_DMA_Abort+0x270>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d132      	bne.n	80021c4 <HAL_DMA_Abort+0x274>
 800215e:	2301      	movs	r3, #1
 8002160:	e031      	b.n	80021c6 <HAL_DMA_Abort+0x276>
 8002162:	bf00      	nop
 8002164:	40020010 	.word	0x40020010
 8002168:	40020028 	.word	0x40020028
 800216c:	40020040 	.word	0x40020040
 8002170:	40020058 	.word	0x40020058
 8002174:	40020070 	.word	0x40020070
 8002178:	40020088 	.word	0x40020088
 800217c:	400200a0 	.word	0x400200a0
 8002180:	400200b8 	.word	0x400200b8
 8002184:	40020410 	.word	0x40020410
 8002188:	40020428 	.word	0x40020428
 800218c:	40020440 	.word	0x40020440
 8002190:	40020458 	.word	0x40020458
 8002194:	40020470 	.word	0x40020470
 8002198:	40020488 	.word	0x40020488
 800219c:	400204a0 	.word	0x400204a0
 80021a0:	400204b8 	.word	0x400204b8
 80021a4:	58025408 	.word	0x58025408
 80021a8:	5802541c 	.word	0x5802541c
 80021ac:	58025430 	.word	0x58025430
 80021b0:	58025444 	.word	0x58025444
 80021b4:	58025458 	.word	0x58025458
 80021b8:	5802546c 	.word	0x5802546c
 80021bc:	58025480 	.word	0x58025480
 80021c0:	58025494 	.word	0x58025494
 80021c4:	2300      	movs	r3, #0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6d      	ldr	r2, [pc, #436]	; (8002394 <HAL_DMA_Abort+0x444>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d04a      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a6b      	ldr	r2, [pc, #428]	; (8002398 <HAL_DMA_Abort+0x448>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d045      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a6a      	ldr	r2, [pc, #424]	; (800239c <HAL_DMA_Abort+0x44c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d040      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a68      	ldr	r2, [pc, #416]	; (80023a0 <HAL_DMA_Abort+0x450>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d03b      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a67      	ldr	r2, [pc, #412]	; (80023a4 <HAL_DMA_Abort+0x454>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d036      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a65      	ldr	r2, [pc, #404]	; (80023a8 <HAL_DMA_Abort+0x458>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d031      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a64      	ldr	r2, [pc, #400]	; (80023ac <HAL_DMA_Abort+0x45c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d02c      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a62      	ldr	r2, [pc, #392]	; (80023b0 <HAL_DMA_Abort+0x460>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d027      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a61      	ldr	r2, [pc, #388]	; (80023b4 <HAL_DMA_Abort+0x464>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d022      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a5f      	ldr	r2, [pc, #380]	; (80023b8 <HAL_DMA_Abort+0x468>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01d      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a5e      	ldr	r2, [pc, #376]	; (80023bc <HAL_DMA_Abort+0x46c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d018      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a5c      	ldr	r2, [pc, #368]	; (80023c0 <HAL_DMA_Abort+0x470>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a5b      	ldr	r2, [pc, #364]	; (80023c4 <HAL_DMA_Abort+0x474>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d00e      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a59      	ldr	r2, [pc, #356]	; (80023c8 <HAL_DMA_Abort+0x478>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d009      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a58      	ldr	r2, [pc, #352]	; (80023cc <HAL_DMA_Abort+0x47c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d004      	beq.n	800227a <HAL_DMA_Abort+0x32a>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a56      	ldr	r2, [pc, #344]	; (80023d0 <HAL_DMA_Abort+0x480>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d108      	bne.n	800228c <HAL_DMA_Abort+0x33c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e007      	b.n	800229c <HAL_DMA_Abort+0x34c>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800229c:	e013      	b.n	80022c6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800229e:	f7ff fd17 	bl	8001cd0 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b05      	cmp	r3, #5
 80022aa:	d90c      	bls.n	80022c6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2203      	movs	r2, #3
 80022b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e12d      	b.n	8002522 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1e5      	bne.n	800229e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a2f      	ldr	r2, [pc, #188]	; (8002394 <HAL_DMA_Abort+0x444>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d04a      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a2d      	ldr	r2, [pc, #180]	; (8002398 <HAL_DMA_Abort+0x448>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d045      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a2c      	ldr	r2, [pc, #176]	; (800239c <HAL_DMA_Abort+0x44c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d040      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a2a      	ldr	r2, [pc, #168]	; (80023a0 <HAL_DMA_Abort+0x450>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d03b      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a29      	ldr	r2, [pc, #164]	; (80023a4 <HAL_DMA_Abort+0x454>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d036      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a27      	ldr	r2, [pc, #156]	; (80023a8 <HAL_DMA_Abort+0x458>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d031      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a26      	ldr	r2, [pc, #152]	; (80023ac <HAL_DMA_Abort+0x45c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d02c      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a24      	ldr	r2, [pc, #144]	; (80023b0 <HAL_DMA_Abort+0x460>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d027      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a23      	ldr	r2, [pc, #140]	; (80023b4 <HAL_DMA_Abort+0x464>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d022      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a21      	ldr	r2, [pc, #132]	; (80023b8 <HAL_DMA_Abort+0x468>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d01d      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a20      	ldr	r2, [pc, #128]	; (80023bc <HAL_DMA_Abort+0x46c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d018      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a1e      	ldr	r2, [pc, #120]	; (80023c0 <HAL_DMA_Abort+0x470>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d013      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <HAL_DMA_Abort+0x474>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00e      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <HAL_DMA_Abort+0x478>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d009      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1a      	ldr	r2, [pc, #104]	; (80023cc <HAL_DMA_Abort+0x47c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d004      	beq.n	8002372 <HAL_DMA_Abort+0x422>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <HAL_DMA_Abort+0x480>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d101      	bne.n	8002376 <HAL_DMA_Abort+0x426>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_DMA_Abort+0x428>
 8002376:	2300      	movs	r3, #0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d02b      	beq.n	80023d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	223f      	movs	r2, #63	; 0x3f
 800238c:	409a      	lsls	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	e02a      	b.n	80023ea <HAL_DMA_Abort+0x49a>
 8002394:	40020010 	.word	0x40020010
 8002398:	40020028 	.word	0x40020028
 800239c:	40020040 	.word	0x40020040
 80023a0:	40020058 	.word	0x40020058
 80023a4:	40020070 	.word	0x40020070
 80023a8:	40020088 	.word	0x40020088
 80023ac:	400200a0 	.word	0x400200a0
 80023b0:	400200b8 	.word	0x400200b8
 80023b4:	40020410 	.word	0x40020410
 80023b8:	40020428 	.word	0x40020428
 80023bc:	40020440 	.word	0x40020440
 80023c0:	40020458 	.word	0x40020458
 80023c4:	40020470 	.word	0x40020470
 80023c8:	40020488 	.word	0x40020488
 80023cc:	400204a0 	.word	0x400204a0
 80023d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	2201      	movs	r2, #1
 80023e4:	409a      	lsls	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a4f      	ldr	r2, [pc, #316]	; (800252c <HAL_DMA_Abort+0x5dc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d072      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a4d      	ldr	r2, [pc, #308]	; (8002530 <HAL_DMA_Abort+0x5e0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d06d      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a4c      	ldr	r2, [pc, #304]	; (8002534 <HAL_DMA_Abort+0x5e4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d068      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a4a      	ldr	r2, [pc, #296]	; (8002538 <HAL_DMA_Abort+0x5e8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d063      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a49      	ldr	r2, [pc, #292]	; (800253c <HAL_DMA_Abort+0x5ec>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d05e      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a47      	ldr	r2, [pc, #284]	; (8002540 <HAL_DMA_Abort+0x5f0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d059      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a46      	ldr	r2, [pc, #280]	; (8002544 <HAL_DMA_Abort+0x5f4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d054      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a44      	ldr	r2, [pc, #272]	; (8002548 <HAL_DMA_Abort+0x5f8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d04f      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a43      	ldr	r2, [pc, #268]	; (800254c <HAL_DMA_Abort+0x5fc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d04a      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a41      	ldr	r2, [pc, #260]	; (8002550 <HAL_DMA_Abort+0x600>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d045      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a40      	ldr	r2, [pc, #256]	; (8002554 <HAL_DMA_Abort+0x604>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d040      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a3e      	ldr	r2, [pc, #248]	; (8002558 <HAL_DMA_Abort+0x608>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d03b      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a3d      	ldr	r2, [pc, #244]	; (800255c <HAL_DMA_Abort+0x60c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d036      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a3b      	ldr	r2, [pc, #236]	; (8002560 <HAL_DMA_Abort+0x610>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d031      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a3a      	ldr	r2, [pc, #232]	; (8002564 <HAL_DMA_Abort+0x614>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d02c      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a38      	ldr	r2, [pc, #224]	; (8002568 <HAL_DMA_Abort+0x618>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d027      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a37      	ldr	r2, [pc, #220]	; (800256c <HAL_DMA_Abort+0x61c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d022      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a35      	ldr	r2, [pc, #212]	; (8002570 <HAL_DMA_Abort+0x620>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01d      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a34      	ldr	r2, [pc, #208]	; (8002574 <HAL_DMA_Abort+0x624>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d018      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a32      	ldr	r2, [pc, #200]	; (8002578 <HAL_DMA_Abort+0x628>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d013      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a31      	ldr	r2, [pc, #196]	; (800257c <HAL_DMA_Abort+0x62c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00e      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a2f      	ldr	r2, [pc, #188]	; (8002580 <HAL_DMA_Abort+0x630>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d009      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a2e      	ldr	r2, [pc, #184]	; (8002584 <HAL_DMA_Abort+0x634>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d004      	beq.n	80024da <HAL_DMA_Abort+0x58a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2c      	ldr	r2, [pc, #176]	; (8002588 <HAL_DMA_Abort+0x638>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d101      	bne.n	80024de <HAL_DMA_Abort+0x58e>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_DMA_Abort+0x590>
 80024de:	2300      	movs	r3, #0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d015      	beq.n	8002510 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00c      	beq.n	8002510 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002500:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002504:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800250e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40020010 	.word	0x40020010
 8002530:	40020028 	.word	0x40020028
 8002534:	40020040 	.word	0x40020040
 8002538:	40020058 	.word	0x40020058
 800253c:	40020070 	.word	0x40020070
 8002540:	40020088 	.word	0x40020088
 8002544:	400200a0 	.word	0x400200a0
 8002548:	400200b8 	.word	0x400200b8
 800254c:	40020410 	.word	0x40020410
 8002550:	40020428 	.word	0x40020428
 8002554:	40020440 	.word	0x40020440
 8002558:	40020458 	.word	0x40020458
 800255c:	40020470 	.word	0x40020470
 8002560:	40020488 	.word	0x40020488
 8002564:	400204a0 	.word	0x400204a0
 8002568:	400204b8 	.word	0x400204b8
 800256c:	58025408 	.word	0x58025408
 8002570:	5802541c 	.word	0x5802541c
 8002574:	58025430 	.word	0x58025430
 8002578:	58025444 	.word	0x58025444
 800257c:	58025458 	.word	0x58025458
 8002580:	5802546c 	.word	0x5802546c
 8002584:	58025480 	.word	0x58025480
 8002588:	58025494 	.word	0x58025494

0800258c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e237      	b.n	8002a0e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d004      	beq.n	80025b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e22c      	b.n	8002a0e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a5c      	ldr	r2, [pc, #368]	; (800272c <HAL_DMA_Abort_IT+0x1a0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d04a      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a5b      	ldr	r2, [pc, #364]	; (8002730 <HAL_DMA_Abort_IT+0x1a4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d045      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a59      	ldr	r2, [pc, #356]	; (8002734 <HAL_DMA_Abort_IT+0x1a8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d040      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a58      	ldr	r2, [pc, #352]	; (8002738 <HAL_DMA_Abort_IT+0x1ac>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d03b      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a56      	ldr	r2, [pc, #344]	; (800273c <HAL_DMA_Abort_IT+0x1b0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d036      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a55      	ldr	r2, [pc, #340]	; (8002740 <HAL_DMA_Abort_IT+0x1b4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d031      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a53      	ldr	r2, [pc, #332]	; (8002744 <HAL_DMA_Abort_IT+0x1b8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d02c      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a52      	ldr	r2, [pc, #328]	; (8002748 <HAL_DMA_Abort_IT+0x1bc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d027      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a50      	ldr	r2, [pc, #320]	; (800274c <HAL_DMA_Abort_IT+0x1c0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d022      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a4f      	ldr	r2, [pc, #316]	; (8002750 <HAL_DMA_Abort_IT+0x1c4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d01d      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a4d      	ldr	r2, [pc, #308]	; (8002754 <HAL_DMA_Abort_IT+0x1c8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d018      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a4c      	ldr	r2, [pc, #304]	; (8002758 <HAL_DMA_Abort_IT+0x1cc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d013      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a4a      	ldr	r2, [pc, #296]	; (800275c <HAL_DMA_Abort_IT+0x1d0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00e      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a49      	ldr	r2, [pc, #292]	; (8002760 <HAL_DMA_Abort_IT+0x1d4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d009      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a47      	ldr	r2, [pc, #284]	; (8002764 <HAL_DMA_Abort_IT+0x1d8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d004      	beq.n	8002654 <HAL_DMA_Abort_IT+0xc8>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a46      	ldr	r2, [pc, #280]	; (8002768 <HAL_DMA_Abort_IT+0x1dc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d101      	bne.n	8002658 <HAL_DMA_Abort_IT+0xcc>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <HAL_DMA_Abort_IT+0xce>
 8002658:	2300      	movs	r3, #0
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8086 	beq.w	800276c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2204      	movs	r2, #4
 8002664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a2f      	ldr	r2, [pc, #188]	; (800272c <HAL_DMA_Abort_IT+0x1a0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d04a      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a2e      	ldr	r2, [pc, #184]	; (8002730 <HAL_DMA_Abort_IT+0x1a4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d045      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a2c      	ldr	r2, [pc, #176]	; (8002734 <HAL_DMA_Abort_IT+0x1a8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d040      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a2b      	ldr	r2, [pc, #172]	; (8002738 <HAL_DMA_Abort_IT+0x1ac>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d03b      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a29      	ldr	r2, [pc, #164]	; (800273c <HAL_DMA_Abort_IT+0x1b0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d036      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a28      	ldr	r2, [pc, #160]	; (8002740 <HAL_DMA_Abort_IT+0x1b4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d031      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a26      	ldr	r2, [pc, #152]	; (8002744 <HAL_DMA_Abort_IT+0x1b8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d02c      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a25      	ldr	r2, [pc, #148]	; (8002748 <HAL_DMA_Abort_IT+0x1bc>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d027      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a23      	ldr	r2, [pc, #140]	; (800274c <HAL_DMA_Abort_IT+0x1c0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d022      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a22      	ldr	r2, [pc, #136]	; (8002750 <HAL_DMA_Abort_IT+0x1c4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d01d      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a20      	ldr	r2, [pc, #128]	; (8002754 <HAL_DMA_Abort_IT+0x1c8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d018      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1f      	ldr	r2, [pc, #124]	; (8002758 <HAL_DMA_Abort_IT+0x1cc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d013      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1d      	ldr	r2, [pc, #116]	; (800275c <HAL_DMA_Abort_IT+0x1d0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00e      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <HAL_DMA_Abort_IT+0x1d4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d009      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1a      	ldr	r2, [pc, #104]	; (8002764 <HAL_DMA_Abort_IT+0x1d8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d004      	beq.n	8002708 <HAL_DMA_Abort_IT+0x17c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a19      	ldr	r2, [pc, #100]	; (8002768 <HAL_DMA_Abort_IT+0x1dc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d108      	bne.n	800271a <HAL_DMA_Abort_IT+0x18e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0201 	bic.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e178      	b.n	8002a0c <HAL_DMA_Abort_IT+0x480>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0201 	bic.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	e16f      	b.n	8002a0c <HAL_DMA_Abort_IT+0x480>
 800272c:	40020010 	.word	0x40020010
 8002730:	40020028 	.word	0x40020028
 8002734:	40020040 	.word	0x40020040
 8002738:	40020058 	.word	0x40020058
 800273c:	40020070 	.word	0x40020070
 8002740:	40020088 	.word	0x40020088
 8002744:	400200a0 	.word	0x400200a0
 8002748:	400200b8 	.word	0x400200b8
 800274c:	40020410 	.word	0x40020410
 8002750:	40020428 	.word	0x40020428
 8002754:	40020440 	.word	0x40020440
 8002758:	40020458 	.word	0x40020458
 800275c:	40020470 	.word	0x40020470
 8002760:	40020488 	.word	0x40020488
 8002764:	400204a0 	.word	0x400204a0
 8002768:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 020e 	bic.w	r2, r2, #14
 800277a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a6c      	ldr	r2, [pc, #432]	; (8002934 <HAL_DMA_Abort_IT+0x3a8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d04a      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a6b      	ldr	r2, [pc, #428]	; (8002938 <HAL_DMA_Abort_IT+0x3ac>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d045      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a69      	ldr	r2, [pc, #420]	; (800293c <HAL_DMA_Abort_IT+0x3b0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d040      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a68      	ldr	r2, [pc, #416]	; (8002940 <HAL_DMA_Abort_IT+0x3b4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d03b      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a66      	ldr	r2, [pc, #408]	; (8002944 <HAL_DMA_Abort_IT+0x3b8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d036      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a65      	ldr	r2, [pc, #404]	; (8002948 <HAL_DMA_Abort_IT+0x3bc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d031      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a63      	ldr	r2, [pc, #396]	; (800294c <HAL_DMA_Abort_IT+0x3c0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d02c      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a62      	ldr	r2, [pc, #392]	; (8002950 <HAL_DMA_Abort_IT+0x3c4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d027      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a60      	ldr	r2, [pc, #384]	; (8002954 <HAL_DMA_Abort_IT+0x3c8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d022      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a5f      	ldr	r2, [pc, #380]	; (8002958 <HAL_DMA_Abort_IT+0x3cc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d01d      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a5d      	ldr	r2, [pc, #372]	; (800295c <HAL_DMA_Abort_IT+0x3d0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d018      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a5c      	ldr	r2, [pc, #368]	; (8002960 <HAL_DMA_Abort_IT+0x3d4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d013      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a5a      	ldr	r2, [pc, #360]	; (8002964 <HAL_DMA_Abort_IT+0x3d8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00e      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a59      	ldr	r2, [pc, #356]	; (8002968 <HAL_DMA_Abort_IT+0x3dc>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d009      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a57      	ldr	r2, [pc, #348]	; (800296c <HAL_DMA_Abort_IT+0x3e0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d004      	beq.n	800281c <HAL_DMA_Abort_IT+0x290>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a56      	ldr	r2, [pc, #344]	; (8002970 <HAL_DMA_Abort_IT+0x3e4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d108      	bne.n	800282e <HAL_DMA_Abort_IT+0x2a2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0201 	bic.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e007      	b.n	800283e <HAL_DMA_Abort_IT+0x2b2>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0201 	bic.w	r2, r2, #1
 800283c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a3c      	ldr	r2, [pc, #240]	; (8002934 <HAL_DMA_Abort_IT+0x3a8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d072      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a3a      	ldr	r2, [pc, #232]	; (8002938 <HAL_DMA_Abort_IT+0x3ac>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d06d      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a39      	ldr	r2, [pc, #228]	; (800293c <HAL_DMA_Abort_IT+0x3b0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d068      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a37      	ldr	r2, [pc, #220]	; (8002940 <HAL_DMA_Abort_IT+0x3b4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d063      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a36      	ldr	r2, [pc, #216]	; (8002944 <HAL_DMA_Abort_IT+0x3b8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d05e      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a34      	ldr	r2, [pc, #208]	; (8002948 <HAL_DMA_Abort_IT+0x3bc>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d059      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a33      	ldr	r2, [pc, #204]	; (800294c <HAL_DMA_Abort_IT+0x3c0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d054      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a31      	ldr	r2, [pc, #196]	; (8002950 <HAL_DMA_Abort_IT+0x3c4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d04f      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a30      	ldr	r2, [pc, #192]	; (8002954 <HAL_DMA_Abort_IT+0x3c8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d04a      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2e      	ldr	r2, [pc, #184]	; (8002958 <HAL_DMA_Abort_IT+0x3cc>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d045      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a2d      	ldr	r2, [pc, #180]	; (800295c <HAL_DMA_Abort_IT+0x3d0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d040      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2b      	ldr	r2, [pc, #172]	; (8002960 <HAL_DMA_Abort_IT+0x3d4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d03b      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2a      	ldr	r2, [pc, #168]	; (8002964 <HAL_DMA_Abort_IT+0x3d8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d036      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a28      	ldr	r2, [pc, #160]	; (8002968 <HAL_DMA_Abort_IT+0x3dc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d031      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a27      	ldr	r2, [pc, #156]	; (800296c <HAL_DMA_Abort_IT+0x3e0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d02c      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a25      	ldr	r2, [pc, #148]	; (8002970 <HAL_DMA_Abort_IT+0x3e4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d027      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a24      	ldr	r2, [pc, #144]	; (8002974 <HAL_DMA_Abort_IT+0x3e8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d022      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a22      	ldr	r2, [pc, #136]	; (8002978 <HAL_DMA_Abort_IT+0x3ec>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01d      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a21      	ldr	r2, [pc, #132]	; (800297c <HAL_DMA_Abort_IT+0x3f0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d018      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <HAL_DMA_Abort_IT+0x3f4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1e      	ldr	r2, [pc, #120]	; (8002984 <HAL_DMA_Abort_IT+0x3f8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00e      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <HAL_DMA_Abort_IT+0x3fc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1b      	ldr	r2, [pc, #108]	; (800298c <HAL_DMA_Abort_IT+0x400>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d004      	beq.n	800292e <HAL_DMA_Abort_IT+0x3a2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a19      	ldr	r2, [pc, #100]	; (8002990 <HAL_DMA_Abort_IT+0x404>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d132      	bne.n	8002994 <HAL_DMA_Abort_IT+0x408>
 800292e:	2301      	movs	r3, #1
 8002930:	e031      	b.n	8002996 <HAL_DMA_Abort_IT+0x40a>
 8002932:	bf00      	nop
 8002934:	40020010 	.word	0x40020010
 8002938:	40020028 	.word	0x40020028
 800293c:	40020040 	.word	0x40020040
 8002940:	40020058 	.word	0x40020058
 8002944:	40020070 	.word	0x40020070
 8002948:	40020088 	.word	0x40020088
 800294c:	400200a0 	.word	0x400200a0
 8002950:	400200b8 	.word	0x400200b8
 8002954:	40020410 	.word	0x40020410
 8002958:	40020428 	.word	0x40020428
 800295c:	40020440 	.word	0x40020440
 8002960:	40020458 	.word	0x40020458
 8002964:	40020470 	.word	0x40020470
 8002968:	40020488 	.word	0x40020488
 800296c:	400204a0 	.word	0x400204a0
 8002970:	400204b8 	.word	0x400204b8
 8002974:	58025408 	.word	0x58025408
 8002978:	5802541c 	.word	0x5802541c
 800297c:	58025430 	.word	0x58025430
 8002980:	58025444 	.word	0x58025444
 8002984:	58025458 	.word	0x58025458
 8002988:	5802546c 	.word	0x5802546c
 800298c:	58025480 	.word	0x58025480
 8002990:	58025494 	.word	0x58025494
 8002994:	2300      	movs	r3, #0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d028      	beq.n	80029ec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	2201      	movs	r2, #1
 80029ba:	409a      	lsls	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80029c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00c      	beq.n	80029ec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80029ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	; 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a26:	4b89      	ldr	r3, [pc, #548]	; (8002c4c <HAL_GPIO_Init+0x234>)
 8002a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a2a:	e194      	b.n	8002d56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	2101      	movs	r1, #1
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	fa01 f303 	lsl.w	r3, r1, r3
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8186 	beq.w	8002d50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d005      	beq.n	8002a5c <HAL_GPIO_Init+0x44>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d130      	bne.n	8002abe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	2203      	movs	r2, #3
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a92:	2201      	movs	r2, #1
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	f003 0201 	and.w	r2, r3, #1
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d017      	beq.n	8002afa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d123      	bne.n	8002b4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	08da      	lsrs	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3208      	adds	r2, #8
 8002b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	220f      	movs	r2, #15
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	08da      	lsrs	r2, r3, #3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3208      	adds	r2, #8
 8002b48:	69b9      	ldr	r1, [r7, #24]
 8002b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	2203      	movs	r2, #3
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0203 	and.w	r2, r3, #3
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 80e0 	beq.w	8002d50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b90:	4b2f      	ldr	r3, [pc, #188]	; (8002c50 <HAL_GPIO_Init+0x238>)
 8002b92:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b96:	4a2e      	ldr	r2, [pc, #184]	; (8002c50 <HAL_GPIO_Init+0x238>)
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002ba0:	4b2b      	ldr	r3, [pc, #172]	; (8002c50 <HAL_GPIO_Init+0x238>)
 8002ba2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bae:	4a29      	ldr	r2, [pc, #164]	; (8002c54 <HAL_GPIO_Init+0x23c>)
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	089b      	lsrs	r3, r3, #2
 8002bb4:	3302      	adds	r3, #2
 8002bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	220f      	movs	r2, #15
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a20      	ldr	r2, [pc, #128]	; (8002c58 <HAL_GPIO_Init+0x240>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d052      	beq.n	8002c80 <HAL_GPIO_Init+0x268>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a1f      	ldr	r2, [pc, #124]	; (8002c5c <HAL_GPIO_Init+0x244>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d031      	beq.n	8002c46 <HAL_GPIO_Init+0x22e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <HAL_GPIO_Init+0x248>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d02b      	beq.n	8002c42 <HAL_GPIO_Init+0x22a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <HAL_GPIO_Init+0x24c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d025      	beq.n	8002c3e <HAL_GPIO_Init+0x226>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <HAL_GPIO_Init+0x250>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d01f      	beq.n	8002c3a <HAL_GPIO_Init+0x222>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a1b      	ldr	r2, [pc, #108]	; (8002c6c <HAL_GPIO_Init+0x254>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d019      	beq.n	8002c36 <HAL_GPIO_Init+0x21e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a1a      	ldr	r2, [pc, #104]	; (8002c70 <HAL_GPIO_Init+0x258>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <HAL_GPIO_Init+0x21a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a19      	ldr	r2, [pc, #100]	; (8002c74 <HAL_GPIO_Init+0x25c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00d      	beq.n	8002c2e <HAL_GPIO_Init+0x216>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a18      	ldr	r2, [pc, #96]	; (8002c78 <HAL_GPIO_Init+0x260>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d007      	beq.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a17      	ldr	r2, [pc, #92]	; (8002c7c <HAL_GPIO_Init+0x264>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d101      	bne.n	8002c26 <HAL_GPIO_Init+0x20e>
 8002c22:	2309      	movs	r3, #9
 8002c24:	e02d      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c26:	230a      	movs	r3, #10
 8002c28:	e02b      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	e029      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c2e:	2307      	movs	r3, #7
 8002c30:	e027      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c32:	2306      	movs	r3, #6
 8002c34:	e025      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c36:	2305      	movs	r3, #5
 8002c38:	e023      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	e021      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e01f      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e01d      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e01b      	b.n	8002c82 <HAL_GPIO_Init+0x26a>
 8002c4a:	bf00      	nop
 8002c4c:	58000080 	.word	0x58000080
 8002c50:	58024400 	.word	0x58024400
 8002c54:	58000400 	.word	0x58000400
 8002c58:	58020000 	.word	0x58020000
 8002c5c:	58020400 	.word	0x58020400
 8002c60:	58020800 	.word	0x58020800
 8002c64:	58020c00 	.word	0x58020c00
 8002c68:	58021000 	.word	0x58021000
 8002c6c:	58021400 	.word	0x58021400
 8002c70:	58021800 	.word	0x58021800
 8002c74:	58021c00 	.word	0x58021c00
 8002c78:	58022000 	.word	0x58022000
 8002c7c:	58022400 	.word	0x58022400
 8002c80:	2300      	movs	r3, #0
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	f002 0203 	and.w	r2, r2, #3
 8002c88:	0092      	lsls	r2, r2, #2
 8002c8a:	4093      	lsls	r3, r2
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c92:	4938      	ldr	r1, [pc, #224]	; (8002d74 <HAL_GPIO_Init+0x35c>)
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	3301      	adds	r3, #1
 8002d54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f47f ae63 	bne.w	8002a2c <HAL_GPIO_Init+0x14>
  }
}
 8002d66:	bf00      	nop
 8002d68:	bf00      	nop
 8002d6a:	3724      	adds	r7, #36	; 0x24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	58000400 	.word	0x58000400

08002d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	807b      	strh	r3, [r7, #2]
 8002d84:	4613      	mov	r3, r2
 8002d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d88:	787b      	ldrb	r3, [r7, #1]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d8e:	887a      	ldrh	r2, [r7, #2]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d94:	e003      	b.n	8002d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d96:	887b      	ldrh	r3, [r7, #2]
 8002d98:	041a      	lsls	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	619a      	str	r2, [r3, #24]
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002db4:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <HAL_PWREx_ConfigSupply+0xb0>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	2b06      	cmp	r3, #6
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002dc0:	4b26      	ldr	r3, [pc, #152]	; (8002e5c <HAL_PWREx_ConfigSupply+0xb0>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d001      	beq.n	8002dd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e040      	b.n	8002e54 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e03e      	b.n	8002e54 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002dd6:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <HAL_PWREx_ConfigSupply+0xb0>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002dde:	491f      	ldr	r1, [pc, #124]	; (8002e5c <HAL_PWREx_ConfigSupply+0xb0>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002de6:	f7fe ff73 	bl	8001cd0 <HAL_GetTick>
 8002dea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dec:	e009      	b.n	8002e02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002dee:	f7fe ff6f 	bl	8001cd0 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dfc:	d901      	bls.n	8002e02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e028      	b.n	8002e54 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e02:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <HAL_PWREx_ConfigSupply+0xb0>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e0e:	d1ee      	bne.n	8002dee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b1e      	cmp	r3, #30
 8002e14:	d008      	beq.n	8002e28 <HAL_PWREx_ConfigSupply+0x7c>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b2e      	cmp	r3, #46	; 0x2e
 8002e1a:	d005      	beq.n	8002e28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b1d      	cmp	r3, #29
 8002e20:	d002      	beq.n	8002e28 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b2d      	cmp	r3, #45	; 0x2d
 8002e26:	d114      	bne.n	8002e52 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002e28:	f7fe ff52 	bl	8001cd0 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e2e:	e009      	b.n	8002e44 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e30:	f7fe ff4e 	bl	8001cd0 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e3e:	d901      	bls.n	8002e44 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e007      	b.n	8002e54 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_PWREx_ConfigSupply+0xb0>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e50:	d1ee      	bne.n	8002e30 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	58024800 	.word	0x58024800

08002e60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08c      	sub	sp, #48	; 0x30
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d102      	bne.n	8002e74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f000 bc1f 	b.w	80036b2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80b3 	beq.w	8002fe8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e82:	4b95      	ldr	r3, [pc, #596]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e8c:	4b92      	ldr	r3, [pc, #584]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d007      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x48>
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	2b18      	cmp	r3, #24
 8002e9c:	d112      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x64>
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d10d      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea8:	4b8b      	ldr	r3, [pc, #556]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8098 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x186>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f040 8093 	bne.w	8002fe6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e3f6      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ecc:	d106      	bne.n	8002edc <HAL_RCC_OscConfig+0x7c>
 8002ece:	4b82      	ldr	r3, [pc, #520]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a81      	ldr	r2, [pc, #516]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e058      	b.n	8002f8e <HAL_RCC_OscConfig+0x12e>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d112      	bne.n	8002f0a <HAL_RCC_OscConfig+0xaa>
 8002ee4:	4b7c      	ldr	r3, [pc, #496]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a7b      	ldr	r2, [pc, #492]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	4b79      	ldr	r3, [pc, #484]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a78      	ldr	r2, [pc, #480]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002ef6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	4b76      	ldr	r3, [pc, #472]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a75      	ldr	r2, [pc, #468]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	e041      	b.n	8002f8e <HAL_RCC_OscConfig+0x12e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f12:	d112      	bne.n	8002f3a <HAL_RCC_OscConfig+0xda>
 8002f14:	4b70      	ldr	r3, [pc, #448]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a6f      	ldr	r2, [pc, #444]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b6d      	ldr	r3, [pc, #436]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a6c      	ldr	r2, [pc, #432]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4b6a      	ldr	r3, [pc, #424]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a69      	ldr	r2, [pc, #420]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	e029      	b.n	8002f8e <HAL_RCC_OscConfig+0x12e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002f42:	d112      	bne.n	8002f6a <HAL_RCC_OscConfig+0x10a>
 8002f44:	4b64      	ldr	r3, [pc, #400]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a63      	ldr	r2, [pc, #396]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	4b61      	ldr	r3, [pc, #388]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a60      	ldr	r2, [pc, #384]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b5e      	ldr	r3, [pc, #376]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a5d      	ldr	r2, [pc, #372]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	e011      	b.n	8002f8e <HAL_RCC_OscConfig+0x12e>
 8002f6a:	4b5b      	ldr	r3, [pc, #364]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a5a      	ldr	r2, [pc, #360]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	4b58      	ldr	r3, [pc, #352]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a57      	ldr	r2, [pc, #348]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b55      	ldr	r3, [pc, #340]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a54      	ldr	r2, [pc, #336]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002f88:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d013      	beq.n	8002fbe <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f96:	f7fe fe9b 	bl	8001cd0 <HAL_GetTick>
 8002f9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f9e:	f7fe fe97 	bl	8001cd0 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b64      	cmp	r3, #100	; 0x64
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e380      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fb0:	4b49      	ldr	r3, [pc, #292]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x13e>
 8002fbc:	e014      	b.n	8002fe8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbe:	f7fe fe87 	bl	8001cd0 <HAL_GetTick>
 8002fc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc6:	f7fe fe83 	bl	8001cd0 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b64      	cmp	r3, #100	; 0x64
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e36c      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fd8:	4b3f      	ldr	r3, [pc, #252]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f0      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x166>
 8002fe4:	e000      	b.n	8002fe8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 808c 	beq.w	800310e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff6:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ffe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003000:	4b35      	ldr	r3, [pc, #212]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d007      	beq.n	800301c <HAL_RCC_OscConfig+0x1bc>
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	2b18      	cmp	r3, #24
 8003010:	d137      	bne.n	8003082 <HAL_RCC_OscConfig+0x222>
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d132      	bne.n	8003082 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800301c:	4b2e      	ldr	r3, [pc, #184]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_OscConfig+0x1d4>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e33e      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003034:	4b28      	ldr	r3, [pc, #160]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 0219 	bic.w	r2, r3, #25
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4925      	ldr	r1, [pc, #148]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003046:	f7fe fe43 	bl	8001cd0 <HAL_GetTick>
 800304a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304e:	f7fe fe3f 	bl	8001cd0 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e328      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003060:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306c:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	061b      	lsls	r3, r3, #24
 800307a:	4917      	ldr	r1, [pc, #92]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003080:	e045      	b.n	800310e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d028      	beq.n	80030dc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 0219 	bic.w	r2, r3, #25
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	4910      	ldr	r1, [pc, #64]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 8003098:	4313      	orrs	r3, r2
 800309a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe fe18 	bl	8001cd0 <HAL_GetTick>
 80030a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a4:	f7fe fe14 	bl	8001cd0 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e2fd      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c2:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	061b      	lsls	r3, r3, #24
 80030d0:	4901      	ldr	r1, [pc, #4]	; (80030d8 <HAL_RCC_OscConfig+0x278>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
 80030d6:	e01a      	b.n	800310e <HAL_RCC_OscConfig+0x2ae>
 80030d8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030dc:	4b97      	ldr	r3, [pc, #604]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a96      	ldr	r2, [pc, #600]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe fdf2 	bl	8001cd0 <HAL_GetTick>
 80030ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f0:	f7fe fdee 	bl	8001cd0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e2d7      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003102:	4b8e      	ldr	r3, [pc, #568]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	d06a      	beq.n	80031f0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800311a:	4b88      	ldr	r3, [pc, #544]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003122:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003124:	4b85      	ldr	r3, [pc, #532]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d007      	beq.n	8003140 <HAL_RCC_OscConfig+0x2e0>
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b18      	cmp	r3, #24
 8003134:	d11b      	bne.n	800316e <HAL_RCC_OscConfig+0x30e>
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d116      	bne.n	800316e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003140:	4b7e      	ldr	r3, [pc, #504]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_OscConfig+0x2f8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	2b80      	cmp	r3, #128	; 0x80
 8003152:	d001      	beq.n	8003158 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e2ac      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003158:	4b78      	ldr	r3, [pc, #480]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	061b      	lsls	r3, r3, #24
 8003166:	4975      	ldr	r1, [pc, #468]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 8003168:	4313      	orrs	r3, r2
 800316a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800316c:	e040      	b.n	80031f0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d023      	beq.n	80031be <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003176:	4b71      	ldr	r3, [pc, #452]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a70      	ldr	r2, [pc, #448]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 800317c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7fe fda5 	bl	8001cd0 <HAL_GetTick>
 8003186:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800318a:	f7fe fda1 	bl	8001cd0 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e28a      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800319c:	4b67      	ldr	r3, [pc, #412]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031a8:	4b64      	ldr	r3, [pc, #400]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	061b      	lsls	r3, r3, #24
 80031b6:	4961      	ldr	r1, [pc, #388]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60cb      	str	r3, [r1, #12]
 80031bc:	e018      	b.n	80031f0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80031be:	4b5f      	ldr	r3, [pc, #380]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a5e      	ldr	r2, [pc, #376]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 80031c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ca:	f7fe fd81 	bl	8001cd0 <HAL_GetTick>
 80031ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031d2:	f7fe fd7d 	bl	8001cd0 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e266      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031e4:	4b55      	ldr	r3, [pc, #340]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d036      	beq.n	800326a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d019      	beq.n	8003238 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003204:	4b4d      	ldr	r3, [pc, #308]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 8003206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003208:	4a4c      	ldr	r2, [pc, #304]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fe fd5e 	bl	8001cd0 <HAL_GetTick>
 8003214:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003218:	f7fe fd5a 	bl	8001cd0 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e243      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800322a:	4b44      	ldr	r3, [pc, #272]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 800322c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x3b8>
 8003236:	e018      	b.n	800326a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003238:	4b40      	ldr	r3, [pc, #256]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 800323a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323c:	4a3f      	ldr	r2, [pc, #252]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003244:	f7fe fd44 	bl	8001cd0 <HAL_GetTick>
 8003248:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800324c:	f7fe fd40 	bl	8001cd0 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e229      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800325e:	4b37      	ldr	r3, [pc, #220]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 8003260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	d036      	beq.n	80032e4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d019      	beq.n	80032b2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800327e:	4b2f      	ldr	r3, [pc, #188]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2e      	ldr	r2, [pc, #184]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 8003284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003288:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800328a:	f7fe fd21 	bl	8001cd0 <HAL_GetTick>
 800328e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003292:	f7fe fd1d 	bl	8001cd0 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e206      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032a4:	4b25      	ldr	r3, [pc, #148]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x432>
 80032b0:	e018      	b.n	80032e4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032b2:	4b22      	ldr	r3, [pc, #136]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a21      	ldr	r2, [pc, #132]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 80032b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032be:	f7fe fd07 	bl	8001cd0 <HAL_GetTick>
 80032c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032c6:	f7fe fd03 	bl	8001cd0 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e1ec      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032d8:	4b18      	ldr	r3, [pc, #96]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80af 	beq.w	8003450 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032f2:	4b13      	ldr	r3, [pc, #76]	; (8003340 <HAL_RCC_OscConfig+0x4e0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a12      	ldr	r2, [pc, #72]	; (8003340 <HAL_RCC_OscConfig+0x4e0>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032fe:	f7fe fce7 	bl	8001cd0 <HAL_GetTick>
 8003302:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003306:	f7fe fce3 	bl	8001cd0 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b64      	cmp	r3, #100	; 0x64
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e1cc      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003318:	4b09      	ldr	r3, [pc, #36]	; (8003340 <HAL_RCC_OscConfig+0x4e0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d10b      	bne.n	8003344 <HAL_RCC_OscConfig+0x4e4>
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	4a02      	ldr	r2, [pc, #8]	; (800333c <HAL_RCC_OscConfig+0x4dc>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6713      	str	r3, [r2, #112]	; 0x70
 8003338:	e05b      	b.n	80033f2 <HAL_RCC_OscConfig+0x592>
 800333a:	bf00      	nop
 800333c:	58024400 	.word	0x58024400
 8003340:	58024800 	.word	0x58024800
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d112      	bne.n	8003372 <HAL_RCC_OscConfig+0x512>
 800334c:	4b9d      	ldr	r3, [pc, #628]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	4a9c      	ldr	r2, [pc, #624]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	; 0x70
 8003358:	4b9a      	ldr	r3, [pc, #616]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	4a99      	ldr	r2, [pc, #612]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 800335e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003362:	6713      	str	r3, [r2, #112]	; 0x70
 8003364:	4b97      	ldr	r3, [pc, #604]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a96      	ldr	r2, [pc, #600]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 800336a:	f023 0304 	bic.w	r3, r3, #4
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
 8003370:	e03f      	b.n	80033f2 <HAL_RCC_OscConfig+0x592>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b05      	cmp	r3, #5
 8003378:	d112      	bne.n	80033a0 <HAL_RCC_OscConfig+0x540>
 800337a:	4b92      	ldr	r3, [pc, #584]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a91      	ldr	r2, [pc, #580]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003380:	f043 0304 	orr.w	r3, r3, #4
 8003384:	6713      	str	r3, [r2, #112]	; 0x70
 8003386:	4b8f      	ldr	r3, [pc, #572]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4a8e      	ldr	r2, [pc, #568]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 800338c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003390:	6713      	str	r3, [r2, #112]	; 0x70
 8003392:	4b8c      	ldr	r3, [pc, #560]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	4a8b      	ldr	r2, [pc, #556]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6713      	str	r3, [r2, #112]	; 0x70
 800339e:	e028      	b.n	80033f2 <HAL_RCC_OscConfig+0x592>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b85      	cmp	r3, #133	; 0x85
 80033a6:	d112      	bne.n	80033ce <HAL_RCC_OscConfig+0x56e>
 80033a8:	4b86      	ldr	r3, [pc, #536]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	4a85      	ldr	r2, [pc, #532]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80033ae:	f043 0304 	orr.w	r3, r3, #4
 80033b2:	6713      	str	r3, [r2, #112]	; 0x70
 80033b4:	4b83      	ldr	r3, [pc, #524]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b8:	4a82      	ldr	r2, [pc, #520]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80033ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033be:	6713      	str	r3, [r2, #112]	; 0x70
 80033c0:	4b80      	ldr	r3, [pc, #512]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	4a7f      	ldr	r2, [pc, #508]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	6713      	str	r3, [r2, #112]	; 0x70
 80033cc:	e011      	b.n	80033f2 <HAL_RCC_OscConfig+0x592>
 80033ce:	4b7d      	ldr	r3, [pc, #500]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	4a7c      	ldr	r2, [pc, #496]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80033d4:	f023 0301 	bic.w	r3, r3, #1
 80033d8:	6713      	str	r3, [r2, #112]	; 0x70
 80033da:	4b7a      	ldr	r3, [pc, #488]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	4a79      	ldr	r2, [pc, #484]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80033e0:	f023 0304 	bic.w	r3, r3, #4
 80033e4:	6713      	str	r3, [r2, #112]	; 0x70
 80033e6:	4b77      	ldr	r3, [pc, #476]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	4a76      	ldr	r2, [pc, #472]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80033ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d015      	beq.n	8003426 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fe fc69 	bl	8001cd0 <HAL_GetTick>
 80033fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fe fc65 	bl	8001cd0 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e14c      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003418:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0ee      	beq.n	8003402 <HAL_RCC_OscConfig+0x5a2>
 8003424:	e014      	b.n	8003450 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003426:	f7fe fc53 	bl	8001cd0 <HAL_GetTick>
 800342a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800342c:	e00a      	b.n	8003444 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342e:	f7fe fc4f 	bl	8001cd0 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	; 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e136      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003444:	4b5f      	ldr	r3, [pc, #380]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1ee      	bne.n	800342e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 812b 	beq.w	80036b0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800345a:	4b5a      	ldr	r3, [pc, #360]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003462:	2b18      	cmp	r3, #24
 8003464:	f000 80bb 	beq.w	80035de <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	2b02      	cmp	r3, #2
 800346e:	f040 8095 	bne.w	800359c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003472:	4b54      	ldr	r3, [pc, #336]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a53      	ldr	r2, [pc, #332]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003478:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800347c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fe fc27 	bl	8001cd0 <HAL_GetTick>
 8003482:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003486:	f7fe fc23 	bl	8001cd0 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e10c      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003498:	4b4a      	ldr	r3, [pc, #296]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f0      	bne.n	8003486 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a4:	4b47      	ldr	r3, [pc, #284]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80034a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034a8:	4b47      	ldr	r3, [pc, #284]	; (80035c8 <HAL_RCC_OscConfig+0x768>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034b4:	0112      	lsls	r2, r2, #4
 80034b6:	430a      	orrs	r2, r1
 80034b8:	4942      	ldr	r1, [pc, #264]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	628b      	str	r3, [r1, #40]	; 0x28
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	3b01      	subs	r3, #1
 80034c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034cc:	3b01      	subs	r3, #1
 80034ce:	025b      	lsls	r3, r3, #9
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	3b01      	subs	r3, #1
 80034da:	041b      	lsls	r3, r3, #16
 80034dc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e6:	3b01      	subs	r3, #1
 80034e8:	061b      	lsls	r3, r3, #24
 80034ea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80034ee:	4935      	ldr	r1, [pc, #212]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80034f4:	4b33      	ldr	r3, [pc, #204]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	4a32      	ldr	r2, [pc, #200]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003500:	4b30      	ldr	r3, [pc, #192]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003504:	4b31      	ldr	r3, [pc, #196]	; (80035cc <HAL_RCC_OscConfig+0x76c>)
 8003506:	4013      	ands	r3, r2
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800350c:	00d2      	lsls	r2, r2, #3
 800350e:	492d      	ldr	r1, [pc, #180]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003510:	4313      	orrs	r3, r2
 8003512:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003514:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	f023 020c 	bic.w	r2, r3, #12
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	4928      	ldr	r1, [pc, #160]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003522:	4313      	orrs	r3, r2
 8003524:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003526:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	f023 0202 	bic.w	r2, r3, #2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	4924      	ldr	r1, [pc, #144]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003534:	4313      	orrs	r3, r2
 8003536:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003538:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	4a21      	ldr	r2, [pc, #132]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 800353e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003542:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003544:	4b1f      	ldr	r3, [pc, #124]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	4a1e      	ldr	r2, [pc, #120]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 800354a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800354e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003550:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	4a1b      	ldr	r2, [pc, #108]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800355a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800355c:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003568:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 800356e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fe fbac 	bl	8001cd0 <HAL_GetTick>
 8003578:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357c:	f7fe fba8 	bl	8001cd0 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e091      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800358e:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0x71c>
 800359a:	e089      	b.n	80036b0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a08      	ldr	r2, [pc, #32]	; (80035c4 <HAL_RCC_OscConfig+0x764>)
 80035a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe fb92 	bl	8001cd0 <HAL_GetTick>
 80035ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035ae:	e00f      	b.n	80035d0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fe fb8e 	bl	8001cd0 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d908      	bls.n	80035d0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e077      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
 80035c2:	bf00      	nop
 80035c4:	58024400 	.word	0x58024400
 80035c8:	fffffc0c 	.word	0xfffffc0c
 80035cc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035d0:	4b3a      	ldr	r3, [pc, #232]	; (80036bc <HAL_RCC_OscConfig+0x85c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e9      	bne.n	80035b0 <HAL_RCC_OscConfig+0x750>
 80035dc:	e068      	b.n	80036b0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035de:	4b37      	ldr	r3, [pc, #220]	; (80036bc <HAL_RCC_OscConfig+0x85c>)
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035e4:	4b35      	ldr	r3, [pc, #212]	; (80036bc <HAL_RCC_OscConfig+0x85c>)
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d031      	beq.n	8003656 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f003 0203 	and.w	r2, r3, #3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d12a      	bne.n	8003656 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d122      	bne.n	8003656 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d11a      	bne.n	8003656 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	0a5b      	lsrs	r3, r3, #9
 8003624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d111      	bne.n	8003656 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d108      	bne.n	8003656 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	0e1b      	lsrs	r3, r3, #24
 8003648:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d001      	beq.n	800365a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e02b      	b.n	80036b2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800365a:	4b18      	ldr	r3, [pc, #96]	; (80036bc <HAL_RCC_OscConfig+0x85c>)
 800365c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365e:	08db      	lsrs	r3, r3, #3
 8003660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003664:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	429a      	cmp	r2, r3
 800366e:	d01f      	beq.n	80036b0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003670:	4b12      	ldr	r3, [pc, #72]	; (80036bc <HAL_RCC_OscConfig+0x85c>)
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	4a11      	ldr	r2, [pc, #68]	; (80036bc <HAL_RCC_OscConfig+0x85c>)
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800367c:	f7fe fb28 	bl	8001cd0 <HAL_GetTick>
 8003680:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003682:	bf00      	nop
 8003684:	f7fe fb24 	bl	8001cd0 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	4293      	cmp	r3, r2
 800368e:	d0f9      	beq.n	8003684 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003690:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_RCC_OscConfig+0x85c>)
 8003692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003694:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <HAL_RCC_OscConfig+0x860>)
 8003696:	4013      	ands	r3, r2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800369c:	00d2      	lsls	r2, r2, #3
 800369e:	4907      	ldr	r1, [pc, #28]	; (80036bc <HAL_RCC_OscConfig+0x85c>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_RCC_OscConfig+0x85c>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4a04      	ldr	r2, [pc, #16]	; (80036bc <HAL_RCC_OscConfig+0x85c>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3730      	adds	r7, #48	; 0x30
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	58024400 	.word	0x58024400
 80036c0:	ffff0007 	.word	0xffff0007

080036c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e19c      	b.n	8003a12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036d8:	4b8a      	ldr	r3, [pc, #552]	; (8003904 <HAL_RCC_ClockConfig+0x240>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d910      	bls.n	8003708 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e6:	4b87      	ldr	r3, [pc, #540]	; (8003904 <HAL_RCC_ClockConfig+0x240>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 020f 	bic.w	r2, r3, #15
 80036ee:	4985      	ldr	r1, [pc, #532]	; (8003904 <HAL_RCC_ClockConfig+0x240>)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	4b83      	ldr	r3, [pc, #524]	; (8003904 <HAL_RCC_ClockConfig+0x240>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e184      	b.n	8003a12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d010      	beq.n	8003736 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	4b7b      	ldr	r3, [pc, #492]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003720:	429a      	cmp	r2, r3
 8003722:	d908      	bls.n	8003736 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003724:	4b78      	ldr	r3, [pc, #480]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	4975      	ldr	r1, [pc, #468]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 8003732:	4313      	orrs	r3, r2
 8003734:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d010      	beq.n	8003764 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	4b70      	ldr	r3, [pc, #448]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800374e:	429a      	cmp	r2, r3
 8003750:	d908      	bls.n	8003764 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003752:	4b6d      	ldr	r3, [pc, #436]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	496a      	ldr	r1, [pc, #424]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 8003760:	4313      	orrs	r3, r2
 8003762:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b00      	cmp	r3, #0
 800376e:	d010      	beq.n	8003792 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	4b64      	ldr	r3, [pc, #400]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800377c:	429a      	cmp	r2, r3
 800377e:	d908      	bls.n	8003792 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003780:	4b61      	ldr	r3, [pc, #388]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	495e      	ldr	r1, [pc, #376]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 800378e:	4313      	orrs	r3, r2
 8003790:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	d010      	beq.n	80037c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69da      	ldr	r2, [r3, #28]
 80037a2:	4b59      	ldr	r3, [pc, #356]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d908      	bls.n	80037c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037ae:	4b56      	ldr	r3, [pc, #344]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	4953      	ldr	r1, [pc, #332]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d010      	beq.n	80037ee <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	4b4d      	ldr	r3, [pc, #308]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	429a      	cmp	r2, r3
 80037da:	d908      	bls.n	80037ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037dc:	4b4a      	ldr	r3, [pc, #296]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f023 020f 	bic.w	r2, r3, #15
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4947      	ldr	r1, [pc, #284]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d055      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80037fa:	4b43      	ldr	r3, [pc, #268]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	4940      	ldr	r1, [pc, #256]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 8003808:	4313      	orrs	r3, r2
 800380a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d107      	bne.n	8003824 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003814:	4b3c      	ldr	r3, [pc, #240]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d121      	bne.n	8003864 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0f6      	b.n	8003a12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b03      	cmp	r3, #3
 800382a:	d107      	bne.n	800383c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800382c:	4b36      	ldr	r3, [pc, #216]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d115      	bne.n	8003864 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0ea      	b.n	8003a12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d107      	bne.n	8003854 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003844:	4b30      	ldr	r3, [pc, #192]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d109      	bne.n	8003864 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0de      	b.n	8003a12 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003854:	4b2c      	ldr	r3, [pc, #176]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0d6      	b.n	8003a12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003864:	4b28      	ldr	r3, [pc, #160]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f023 0207 	bic.w	r2, r3, #7
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4925      	ldr	r1, [pc, #148]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 8003872:	4313      	orrs	r3, r2
 8003874:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003876:	f7fe fa2b 	bl	8001cd0 <HAL_GetTick>
 800387a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387c:	e00a      	b.n	8003894 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800387e:	f7fe fa27 	bl	8001cd0 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	f241 3288 	movw	r2, #5000	; 0x1388
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e0be      	b.n	8003a12 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003894:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d1eb      	bne.n	800387e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d010      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	4b14      	ldr	r3, [pc, #80]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	429a      	cmp	r2, r3
 80038c0:	d208      	bcs.n	80038d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c2:	4b11      	ldr	r3, [pc, #68]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f023 020f 	bic.w	r2, r3, #15
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	490e      	ldr	r1, [pc, #56]	; (8003908 <HAL_RCC_ClockConfig+0x244>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_RCC_ClockConfig+0x240>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d214      	bcs.n	800390c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b08      	ldr	r3, [pc, #32]	; (8003904 <HAL_RCC_ClockConfig+0x240>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 020f 	bic.w	r2, r3, #15
 80038ea:	4906      	ldr	r1, [pc, #24]	; (8003904 <HAL_RCC_ClockConfig+0x240>)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b04      	ldr	r3, [pc, #16]	; (8003904 <HAL_RCC_ClockConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d005      	beq.n	800390c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e086      	b.n	8003a12 <HAL_RCC_ClockConfig+0x34e>
 8003904:	52002000 	.word	0x52002000
 8003908:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d010      	beq.n	800393a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	4b3f      	ldr	r3, [pc, #252]	; (8003a1c <HAL_RCC_ClockConfig+0x358>)
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003924:	429a      	cmp	r2, r3
 8003926:	d208      	bcs.n	800393a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003928:	4b3c      	ldr	r3, [pc, #240]	; (8003a1c <HAL_RCC_ClockConfig+0x358>)
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	4939      	ldr	r1, [pc, #228]	; (8003a1c <HAL_RCC_ClockConfig+0x358>)
 8003936:	4313      	orrs	r3, r2
 8003938:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d010      	beq.n	8003968 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	4b34      	ldr	r3, [pc, #208]	; (8003a1c <HAL_RCC_ClockConfig+0x358>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003952:	429a      	cmp	r2, r3
 8003954:	d208      	bcs.n	8003968 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003956:	4b31      	ldr	r3, [pc, #196]	; (8003a1c <HAL_RCC_ClockConfig+0x358>)
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	492e      	ldr	r1, [pc, #184]	; (8003a1c <HAL_RCC_ClockConfig+0x358>)
 8003964:	4313      	orrs	r3, r2
 8003966:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b00      	cmp	r3, #0
 8003972:	d010      	beq.n	8003996 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699a      	ldr	r2, [r3, #24]
 8003978:	4b28      	ldr	r3, [pc, #160]	; (8003a1c <HAL_RCC_ClockConfig+0x358>)
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003980:	429a      	cmp	r2, r3
 8003982:	d208      	bcs.n	8003996 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <HAL_RCC_ClockConfig+0x358>)
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	4922      	ldr	r1, [pc, #136]	; (8003a1c <HAL_RCC_ClockConfig+0x358>)
 8003992:	4313      	orrs	r3, r2
 8003994:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d010      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69da      	ldr	r2, [r3, #28]
 80039a6:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <HAL_RCC_ClockConfig+0x358>)
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d208      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039b2:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <HAL_RCC_ClockConfig+0x358>)
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	4917      	ldr	r1, [pc, #92]	; (8003a1c <HAL_RCC_ClockConfig+0x358>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80039c4:	f000 f834 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80039c8:	4602      	mov	r2, r0
 80039ca:	4b14      	ldr	r3, [pc, #80]	; (8003a1c <HAL_RCC_ClockConfig+0x358>)
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	0a1b      	lsrs	r3, r3, #8
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	4912      	ldr	r1, [pc, #72]	; (8003a20 <HAL_RCC_ClockConfig+0x35c>)
 80039d6:	5ccb      	ldrb	r3, [r1, r3]
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	fa22 f303 	lsr.w	r3, r2, r3
 80039e0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80039e2:	4b0e      	ldr	r3, [pc, #56]	; (8003a1c <HAL_RCC_ClockConfig+0x358>)
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	4a0d      	ldr	r2, [pc, #52]	; (8003a20 <HAL_RCC_ClockConfig+0x35c>)
 80039ec:	5cd3      	ldrb	r3, [r2, r3]
 80039ee:	f003 031f 	and.w	r3, r3, #31
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
 80039f8:	4a0a      	ldr	r2, [pc, #40]	; (8003a24 <HAL_RCC_ClockConfig+0x360>)
 80039fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039fc:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <HAL_RCC_ClockConfig+0x364>)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003a02:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <HAL_RCC_ClockConfig+0x368>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe f918 	bl	8001c3c <HAL_InitTick>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	58024400 	.word	0x58024400
 8003a20:	080097b0 	.word	0x080097b0
 8003a24:	24000010 	.word	0x24000010
 8003a28:	2400000c 	.word	0x2400000c
 8003a2c:	24000014 	.word	0x24000014

08003a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b089      	sub	sp, #36	; 0x24
 8003a34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a36:	4bb3      	ldr	r3, [pc, #716]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a3e:	2b18      	cmp	r3, #24
 8003a40:	f200 8155 	bhi.w	8003cee <HAL_RCC_GetSysClockFreq+0x2be>
 8003a44:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003ab1 	.word	0x08003ab1
 8003a50:	08003cef 	.word	0x08003cef
 8003a54:	08003cef 	.word	0x08003cef
 8003a58:	08003cef 	.word	0x08003cef
 8003a5c:	08003cef 	.word	0x08003cef
 8003a60:	08003cef 	.word	0x08003cef
 8003a64:	08003cef 	.word	0x08003cef
 8003a68:	08003cef 	.word	0x08003cef
 8003a6c:	08003ad7 	.word	0x08003ad7
 8003a70:	08003cef 	.word	0x08003cef
 8003a74:	08003cef 	.word	0x08003cef
 8003a78:	08003cef 	.word	0x08003cef
 8003a7c:	08003cef 	.word	0x08003cef
 8003a80:	08003cef 	.word	0x08003cef
 8003a84:	08003cef 	.word	0x08003cef
 8003a88:	08003cef 	.word	0x08003cef
 8003a8c:	08003add 	.word	0x08003add
 8003a90:	08003cef 	.word	0x08003cef
 8003a94:	08003cef 	.word	0x08003cef
 8003a98:	08003cef 	.word	0x08003cef
 8003a9c:	08003cef 	.word	0x08003cef
 8003aa0:	08003cef 	.word	0x08003cef
 8003aa4:	08003cef 	.word	0x08003cef
 8003aa8:	08003cef 	.word	0x08003cef
 8003aac:	08003ae3 	.word	0x08003ae3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ab0:	4b94      	ldr	r3, [pc, #592]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d009      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003abc:	4b91      	ldr	r3, [pc, #580]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	08db      	lsrs	r3, r3, #3
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	4a90      	ldr	r2, [pc, #576]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8003acc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003ace:	e111      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ad0:	4b8d      	ldr	r3, [pc, #564]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ad2:	61bb      	str	r3, [r7, #24]
      break;
 8003ad4:	e10e      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003ad6:	4b8d      	ldr	r3, [pc, #564]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ad8:	61bb      	str	r3, [r7, #24]
      break;
 8003ada:	e10b      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003adc:	4b8c      	ldr	r3, [pc, #560]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ade:	61bb      	str	r3, [r7, #24]
      break;
 8003ae0:	e108      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ae2:	4b88      	ldr	r3, [pc, #544]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003aec:	4b85      	ldr	r3, [pc, #532]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003af6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003af8:	4b82      	ldr	r3, [pc, #520]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003b02:	4b80      	ldr	r3, [pc, #512]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b06:	08db      	lsrs	r3, r3, #3
 8003b08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 80e1 	beq.w	8003ce8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	f000 8083 	beq.w	8003c34 <HAL_RCC_GetSysClockFreq+0x204>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	f200 80a1 	bhi.w	8003c78 <HAL_RCC_GetSysClockFreq+0x248>
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x114>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d056      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003b42:	e099      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b44:	4b6f      	ldr	r3, [pc, #444]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d02d      	beq.n	8003bac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b50:	4b6c      	ldr	r3, [pc, #432]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	08db      	lsrs	r3, r3, #3
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	4a6b      	ldr	r2, [pc, #428]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b60:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	ee07 3a90 	vmov	s15, r3
 8003b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	ee07 3a90 	vmov	s15, r3
 8003b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7a:	4b62      	ldr	r3, [pc, #392]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b8e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003d14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003baa:	e087      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003d18 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bbe:	4b51      	ldr	r3, [pc, #324]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bce:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bd2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003d14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bee:	e065      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003d1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c02:	4b40      	ldr	r3, [pc, #256]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0a:	ee07 3a90 	vmov	s15, r3
 8003c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c16:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003d14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c32:	e043      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003d20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c46:	4b2f      	ldr	r3, [pc, #188]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4e:	ee07 3a90 	vmov	s15, r3
 8003c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c5a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003d14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c76:	e021      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c82:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003d1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c8a:	4b1e      	ldr	r3, [pc, #120]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c9e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003d14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003cbc:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	0a5b      	lsrs	r3, r3, #9
 8003cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	ee07 3a90 	vmov	s15, r3
 8003cd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ce0:	ee17 3a90 	vmov	r3, s15
 8003ce4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003ce6:	e005      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61bb      	str	r3, [r7, #24]
      break;
 8003cec:	e002      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003cee:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003cf0:	61bb      	str	r3, [r7, #24]
      break;
 8003cf2:	bf00      	nop
  }

  return sysclockfreq;
 8003cf4:	69bb      	ldr	r3, [r7, #24]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3724      	adds	r7, #36	; 0x24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	58024400 	.word	0x58024400
 8003d08:	03d09000 	.word	0x03d09000
 8003d0c:	003d0900 	.word	0x003d0900
 8003d10:	007a1200 	.word	0x007a1200
 8003d14:	46000000 	.word	0x46000000
 8003d18:	4c742400 	.word	0x4c742400
 8003d1c:	4a742400 	.word	0x4a742400
 8003d20:	4af42400 	.word	0x4af42400

08003d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003d2a:	f7ff fe81 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	0a1b      	lsrs	r3, r3, #8
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	490f      	ldr	r1, [pc, #60]	; (8003d78 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d3c:	5ccb      	ldrb	r3, [r1, r3]
 8003d3e:	f003 031f 	and.w	r3, r3, #31
 8003d42:	fa22 f303 	lsr.w	r3, r2, r3
 8003d46:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003d48:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d52:	5cd3      	ldrb	r3, [r2, r3]
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5e:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <HAL_RCC_GetHCLKFreq+0x58>)
 8003d60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d62:	4a07      	ldr	r2, [pc, #28]	; (8003d80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d68:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <HAL_RCC_GetHCLKFreq+0x58>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	58024400 	.word	0x58024400
 8003d78:	080097b0 	.word	0x080097b0
 8003d7c:	24000010 	.word	0x24000010
 8003d80:	2400000c 	.word	0x2400000c

08003d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003d88:	f7ff ffcc 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	091b      	lsrs	r3, r3, #4
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	4904      	ldr	r1, [pc, #16]	; (8003dac <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d9a:	5ccb      	ldrb	r3, [r1, r3]
 8003d9c:	f003 031f 	and.w	r3, r3, #31
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	58024400 	.word	0x58024400
 8003dac:	080097b0 	.word	0x080097b0

08003db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003db4:	f7ff ffb6 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	0a1b      	lsrs	r3, r3, #8
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	4904      	ldr	r1, [pc, #16]	; (8003dd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dc6:	5ccb      	ldrb	r3, [r1, r3]
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	58024400 	.word	0x58024400
 8003dd8:	080097b0 	.word	0x080097b0

08003ddc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de0:	b0c8      	sub	sp, #288	; 0x120
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003de8:	2300      	movs	r3, #0
 8003dea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dee:	2300      	movs	r3, #0
 8003df0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003e00:	2500      	movs	r5, #0
 8003e02:	ea54 0305 	orrs.w	r3, r4, r5
 8003e06:	d049      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e12:	d02f      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003e14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e18:	d828      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003e1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e1e:	d01a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e24:	d822      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e2e:	d007      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e30:	e01c      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e32:	4ba7      	ldr	r3, [pc, #668]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	4aa6      	ldr	r2, [pc, #664]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e3e:	e01a      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e44:	3308      	adds	r3, #8
 8003e46:	2102      	movs	r1, #2
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 fc43 	bl	80056d4 <RCCEx_PLL2_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e54:	e00f      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e5a:	3328      	adds	r3, #40	; 0x28
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 fcea 	bl	8005838 <RCCEx_PLL3_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e6a:	e004      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e72:	e000      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10a      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e7e:	4b94      	ldr	r3, [pc, #592]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e82:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8c:	4a90      	ldr	r2, [pc, #576]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	6513      	str	r3, [r2, #80]	; 0x50
 8003e92:	e003      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003ea8:	f04f 0900 	mov.w	r9, #0
 8003eac:	ea58 0309 	orrs.w	r3, r8, r9
 8003eb0:	d047      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d82a      	bhi.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003ebc:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec2:	bf00      	nop
 8003ec4:	08003ed9 	.word	0x08003ed9
 8003ec8:	08003ee7 	.word	0x08003ee7
 8003ecc:	08003efd 	.word	0x08003efd
 8003ed0:	08003f1b 	.word	0x08003f1b
 8003ed4:	08003f1b 	.word	0x08003f1b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ed8:	4b7d      	ldr	r3, [pc, #500]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	4a7c      	ldr	r2, [pc, #496]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ee4:	e01a      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eea:	3308      	adds	r3, #8
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f001 fbf0 	bl	80056d4 <RCCEx_PLL2_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003efa:	e00f      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f00:	3328      	adds	r3, #40	; 0x28
 8003f02:	2100      	movs	r1, #0
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 fc97 	bl	8005838 <RCCEx_PLL3_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f10:	e004      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f18:	e000      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003f1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10a      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f24:	4b6a      	ldr	r3, [pc, #424]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f28:	f023 0107 	bic.w	r1, r3, #7
 8003f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f32:	4a67      	ldr	r2, [pc, #412]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f34:	430b      	orrs	r3, r1
 8003f36:	6513      	str	r3, [r2, #80]	; 0x50
 8003f38:	e003      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003f4e:	f04f 0b00 	mov.w	fp, #0
 8003f52:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f56:	d054      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003f62:	d036      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003f64:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003f68:	d82f      	bhi.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6e:	d032      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f74:	d829      	bhi.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f76:	2bc0      	cmp	r3, #192	; 0xc0
 8003f78:	d02f      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003f7a:	2bc0      	cmp	r3, #192	; 0xc0
 8003f7c:	d825      	bhi.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f7e:	2b80      	cmp	r3, #128	; 0x80
 8003f80:	d018      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003f82:	2b80      	cmp	r3, #128	; 0x80
 8003f84:	d821      	bhi.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003f8a:	2b40      	cmp	r3, #64	; 0x40
 8003f8c:	d007      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003f8e:	e01c      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f90:	4b4f      	ldr	r3, [pc, #316]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	4a4e      	ldr	r2, [pc, #312]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003f9c:	e01e      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f001 fb94 	bl	80056d4 <RCCEx_PLL2_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003fb2:	e013      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb8:	3328      	adds	r3, #40	; 0x28
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f001 fc3b 	bl	8005838 <RCCEx_PLL3_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003fc8:	e008      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003fd0:	e004      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003fd2:	bf00      	nop
 8003fd4:	e002      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003fd6:	bf00      	nop
 8003fd8:	e000      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fdc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003fe4:	4b3a      	ldr	r3, [pc, #232]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff2:	4a37      	ldr	r2, [pc, #220]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	6513      	str	r3, [r2, #80]	; 0x50
 8003ff8:	e003      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ffe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800400e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004012:	2300      	movs	r3, #0
 8004014:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004018:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800401c:	460b      	mov	r3, r1
 800401e:	4313      	orrs	r3, r2
 8004020:	d05c      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004028:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800402c:	d03b      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800402e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004032:	d834      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004038:	d037      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800403a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800403e:	d82e      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004040:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004044:	d033      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004046:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800404a:	d828      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800404c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004050:	d01a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004056:	d822      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800405c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004060:	d007      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004062:	e01c      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004064:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	4a19      	ldr	r2, [pc, #100]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800406a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004070:	e01e      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004076:	3308      	adds	r3, #8
 8004078:	2100      	movs	r1, #0
 800407a:	4618      	mov	r0, r3
 800407c:	f001 fb2a 	bl	80056d4 <RCCEx_PLL2_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004086:	e013      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004088:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800408c:	3328      	adds	r3, #40	; 0x28
 800408e:	2100      	movs	r1, #0
 8004090:	4618      	mov	r0, r3
 8004092:	f001 fbd1 	bl	8005838 <RCCEx_PLL3_Config>
 8004096:	4603      	mov	r3, r0
 8004098:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800409c:	e008      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040a4:	e004      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80040a6:	bf00      	nop
 80040a8:	e002      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80040aa:	bf00      	nop
 80040ac:	e000      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80040ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10d      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040bc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80040c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c6:	4a02      	ldr	r2, [pc, #8]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6513      	str	r3, [r2, #80]	; 0x50
 80040cc:	e006      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x300>
 80040ce:	bf00      	nop
 80040d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80040dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80040e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80040f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80040f6:	460b      	mov	r3, r1
 80040f8:	4313      	orrs	r3, r2
 80040fa:	d03a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80040fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004102:	2b30      	cmp	r3, #48	; 0x30
 8004104:	d01f      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004106:	2b30      	cmp	r3, #48	; 0x30
 8004108:	d819      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800410a:	2b20      	cmp	r3, #32
 800410c:	d00c      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800410e:	2b20      	cmp	r3, #32
 8004110:	d815      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d019      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004116:	2b10      	cmp	r3, #16
 8004118:	d111      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800411a:	4bae      	ldr	r3, [pc, #696]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	4aad      	ldr	r2, [pc, #692]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004124:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004126:	e011      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800412c:	3308      	adds	r3, #8
 800412e:	2102      	movs	r1, #2
 8004130:	4618      	mov	r0, r3
 8004132:	f001 facf 	bl	80056d4 <RCCEx_PLL2_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800413c:	e006      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004144:	e002      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004146:	bf00      	nop
 8004148:	e000      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800414a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10a      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004154:	4b9f      	ldr	r3, [pc, #636]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004158:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800415c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004162:	4a9c      	ldr	r2, [pc, #624]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004164:	430b      	orrs	r3, r1
 8004166:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004168:	e003      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800416e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800417e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004182:	2300      	movs	r3, #0
 8004184:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004188:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800418c:	460b      	mov	r3, r1
 800418e:	4313      	orrs	r3, r2
 8004190:	d051      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800419c:	d035      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800419e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041a2:	d82e      	bhi.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80041a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041a8:	d031      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80041aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041ae:	d828      	bhi.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80041b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b4:	d01a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x410>
 80041b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ba:	d822      	bhi.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80041c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c4:	d007      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80041c6:	e01c      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c8:	4b82      	ldr	r3, [pc, #520]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	4a81      	ldr	r2, [pc, #516]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041d4:	e01c      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041da:	3308      	adds	r3, #8
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 fa78 	bl	80056d4 <RCCEx_PLL2_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041ea:	e011      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f0:	3328      	adds	r3, #40	; 0x28
 80041f2:	2100      	movs	r1, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f001 fb1f 	bl	8005838 <RCCEx_PLL3_Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004200:	e006      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004208:	e002      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800420e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004210:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10a      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004218:	4b6e      	ldr	r3, [pc, #440]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800421a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004226:	4a6b      	ldr	r2, [pc, #428]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004228:	430b      	orrs	r3, r1
 800422a:	6513      	str	r3, [r2, #80]	; 0x50
 800422c:	e003      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004232:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004242:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004246:	2300      	movs	r3, #0
 8004248:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800424c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004250:	460b      	mov	r3, r1
 8004252:	4313      	orrs	r3, r2
 8004254:	d053      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800425a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800425c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004260:	d033      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004262:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004266:	d82c      	bhi.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004268:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800426c:	d02f      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800426e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004272:	d826      	bhi.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004274:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004278:	d02b      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800427a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800427e:	d820      	bhi.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004284:	d012      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004286:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800428a:	d81a      	bhi.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800428c:	2b00      	cmp	r3, #0
 800428e:	d022      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004294:	d115      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800429a:	3308      	adds	r3, #8
 800429c:	2101      	movs	r1, #1
 800429e:	4618      	mov	r0, r3
 80042a0:	f001 fa18 	bl	80056d4 <RCCEx_PLL2_Config>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042aa:	e015      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b0:	3328      	adds	r3, #40	; 0x28
 80042b2:	2101      	movs	r1, #1
 80042b4:	4618      	mov	r0, r3
 80042b6:	f001 fabf 	bl	8005838 <RCCEx_PLL3_Config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042c0:	e00a      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042c8:	e006      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80042ca:	bf00      	nop
 80042cc:	e004      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80042ce:	bf00      	nop
 80042d0:	e002      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80042d2:	bf00      	nop
 80042d4:	e000      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80042d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80042e0:	4b3c      	ldr	r3, [pc, #240]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80042e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042ee:	4a39      	ldr	r2, [pc, #228]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042f0:	430b      	orrs	r3, r1
 80042f2:	6513      	str	r3, [r2, #80]	; 0x50
 80042f4:	e003      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80042fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004306:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800430a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800430e:	2300      	movs	r3, #0
 8004310:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004314:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004318:	460b      	mov	r3, r1
 800431a:	4313      	orrs	r3, r2
 800431c:	d060      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800431e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004322:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004326:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800432a:	d039      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800432c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004330:	d832      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004336:	d035      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800433c:	d82c      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800433e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004342:	d031      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004348:	d826      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800434a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800434e:	d02d      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004350:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004354:	d820      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004356:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800435a:	d012      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800435c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004360:	d81a      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004362:	2b00      	cmp	r3, #0
 8004364:	d024      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800436a:	d115      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800436c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004370:	3308      	adds	r3, #8
 8004372:	2101      	movs	r1, #1
 8004374:	4618      	mov	r0, r3
 8004376:	f001 f9ad 	bl	80056d4 <RCCEx_PLL2_Config>
 800437a:	4603      	mov	r3, r0
 800437c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004380:	e017      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004386:	3328      	adds	r3, #40	; 0x28
 8004388:	2101      	movs	r1, #1
 800438a:	4618      	mov	r0, r3
 800438c:	f001 fa54 	bl	8005838 <RCCEx_PLL3_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004396:	e00c      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800439e:	e008      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043a0:	bf00      	nop
 80043a2:	e006      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043a4:	bf00      	nop
 80043a6:	e004      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043a8:	bf00      	nop
 80043aa:	e002      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043ac:	bf00      	nop
 80043ae:	e000      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10e      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80043c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043ca:	4a02      	ldr	r2, [pc, #8]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6593      	str	r3, [r2, #88]	; 0x58
 80043d0:	e006      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80043d2:	bf00      	nop
 80043d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80043ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043f0:	2300      	movs	r3, #0
 80043f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80043f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043fa:	460b      	mov	r3, r1
 80043fc:	4313      	orrs	r3, r2
 80043fe:	d037      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800440a:	d00e      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800440c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004410:	d816      	bhi.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004412:	2b00      	cmp	r3, #0
 8004414:	d018      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800441a:	d111      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800441c:	4bc4      	ldr	r3, [pc, #784]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	4ac3      	ldr	r2, [pc, #780]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004426:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004428:	e00f      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800442a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800442e:	3308      	adds	r3, #8
 8004430:	2101      	movs	r1, #1
 8004432:	4618      	mov	r0, r3
 8004434:	f001 f94e 	bl	80056d4 <RCCEx_PLL2_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800443e:	e004      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004446:	e000      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800444a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004452:	4bb7      	ldr	r3, [pc, #732]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004456:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800445a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800445e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004460:	4ab3      	ldr	r2, [pc, #716]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004462:	430b      	orrs	r3, r1
 8004464:	6513      	str	r3, [r2, #80]	; 0x50
 8004466:	e003      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004468:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800446c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800447c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004480:	2300      	movs	r3, #0
 8004482:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004486:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800448a:	460b      	mov	r3, r1
 800448c:	4313      	orrs	r3, r2
 800448e:	d039      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004496:	2b03      	cmp	r3, #3
 8004498:	d81c      	bhi.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800449a:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800449c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a0:	080044dd 	.word	0x080044dd
 80044a4:	080044b1 	.word	0x080044b1
 80044a8:	080044bf 	.word	0x080044bf
 80044ac:	080044dd 	.word	0x080044dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b0:	4b9f      	ldr	r3, [pc, #636]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	4a9e      	ldr	r2, [pc, #632]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044bc:	e00f      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c2:	3308      	adds	r3, #8
 80044c4:	2102      	movs	r1, #2
 80044c6:	4618      	mov	r0, r3
 80044c8:	f001 f904 	bl	80056d4 <RCCEx_PLL2_Config>
 80044cc:	4603      	mov	r3, r0
 80044ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044d2:	e004      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044da:	e000      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80044dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10a      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044e6:	4b92      	ldr	r3, [pc, #584]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ea:	f023 0103 	bic.w	r1, r3, #3
 80044ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f4:	4a8e      	ldr	r2, [pc, #568]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044f6:	430b      	orrs	r3, r1
 80044f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044fa:	e003      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004500:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004514:	2300      	movs	r3, #0
 8004516:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800451a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800451e:	460b      	mov	r3, r1
 8004520:	4313      	orrs	r3, r2
 8004522:	f000 8099 	beq.w	8004658 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004526:	4b83      	ldr	r3, [pc, #524]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a82      	ldr	r2, [pc, #520]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004530:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004532:	f7fd fbcd 	bl	8001cd0 <HAL_GetTick>
 8004536:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800453a:	e00b      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453c:	f7fd fbc8 	bl	8001cd0 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b64      	cmp	r3, #100	; 0x64
 800454a:	d903      	bls.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004552:	e005      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004554:	4b77      	ldr	r3, [pc, #476]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0ed      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004560:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004564:	2b00      	cmp	r3, #0
 8004566:	d173      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004568:	4b71      	ldr	r3, [pc, #452]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800456a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800456c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004570:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004574:	4053      	eors	r3, r2
 8004576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457a:	2b00      	cmp	r3, #0
 800457c:	d015      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800457e:	4b6c      	ldr	r3, [pc, #432]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004586:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800458a:	4b69      	ldr	r3, [pc, #420]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	4a68      	ldr	r2, [pc, #416]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004594:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004596:	4b66      	ldr	r3, [pc, #408]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459a:	4a65      	ldr	r2, [pc, #404]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800459c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80045a2:	4a63      	ldr	r2, [pc, #396]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b6:	d118      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fd fb8a 	bl	8001cd0 <HAL_GetTick>
 80045bc:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045c0:	e00d      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c2:	f7fd fb85 	bl	8001cd0 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80045cc:	1ad2      	subs	r2, r2, r3
 80045ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d903      	bls.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80045dc:	e005      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045de:	4b54      	ldr	r3, [pc, #336]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0eb      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80045ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d129      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004602:	d10e      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004604:	4b4a      	ldr	r3, [pc, #296]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800460c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004610:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004614:	091a      	lsrs	r2, r3, #4
 8004616:	4b48      	ldr	r3, [pc, #288]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004618:	4013      	ands	r3, r2
 800461a:	4a45      	ldr	r2, [pc, #276]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800461c:	430b      	orrs	r3, r1
 800461e:	6113      	str	r3, [r2, #16]
 8004620:	e005      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004622:	4b43      	ldr	r3, [pc, #268]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	4a42      	ldr	r2, [pc, #264]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004628:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800462c:	6113      	str	r3, [r2, #16]
 800462e:	4b40      	ldr	r3, [pc, #256]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004630:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004636:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800463a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463e:	4a3c      	ldr	r2, [pc, #240]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004640:	430b      	orrs	r3, r1
 8004642:	6713      	str	r3, [r2, #112]	; 0x70
 8004644:	e008      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004646:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800464a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800464e:	e003      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004650:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004654:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f002 0301 	and.w	r3, r2, #1
 8004664:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004668:	2300      	movs	r3, #0
 800466a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800466e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004672:	460b      	mov	r3, r1
 8004674:	4313      	orrs	r3, r2
 8004676:	f000 8090 	beq.w	800479a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800467a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800467e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004682:	2b28      	cmp	r3, #40	; 0x28
 8004684:	d870      	bhi.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004686:	a201      	add	r2, pc, #4	; (adr r2, 800468c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468c:	08004771 	.word	0x08004771
 8004690:	08004769 	.word	0x08004769
 8004694:	08004769 	.word	0x08004769
 8004698:	08004769 	.word	0x08004769
 800469c:	08004769 	.word	0x08004769
 80046a0:	08004769 	.word	0x08004769
 80046a4:	08004769 	.word	0x08004769
 80046a8:	08004769 	.word	0x08004769
 80046ac:	0800473d 	.word	0x0800473d
 80046b0:	08004769 	.word	0x08004769
 80046b4:	08004769 	.word	0x08004769
 80046b8:	08004769 	.word	0x08004769
 80046bc:	08004769 	.word	0x08004769
 80046c0:	08004769 	.word	0x08004769
 80046c4:	08004769 	.word	0x08004769
 80046c8:	08004769 	.word	0x08004769
 80046cc:	08004753 	.word	0x08004753
 80046d0:	08004769 	.word	0x08004769
 80046d4:	08004769 	.word	0x08004769
 80046d8:	08004769 	.word	0x08004769
 80046dc:	08004769 	.word	0x08004769
 80046e0:	08004769 	.word	0x08004769
 80046e4:	08004769 	.word	0x08004769
 80046e8:	08004769 	.word	0x08004769
 80046ec:	08004771 	.word	0x08004771
 80046f0:	08004769 	.word	0x08004769
 80046f4:	08004769 	.word	0x08004769
 80046f8:	08004769 	.word	0x08004769
 80046fc:	08004769 	.word	0x08004769
 8004700:	08004769 	.word	0x08004769
 8004704:	08004769 	.word	0x08004769
 8004708:	08004769 	.word	0x08004769
 800470c:	08004771 	.word	0x08004771
 8004710:	08004769 	.word	0x08004769
 8004714:	08004769 	.word	0x08004769
 8004718:	08004769 	.word	0x08004769
 800471c:	08004769 	.word	0x08004769
 8004720:	08004769 	.word	0x08004769
 8004724:	08004769 	.word	0x08004769
 8004728:	08004769 	.word	0x08004769
 800472c:	08004771 	.word	0x08004771
 8004730:	58024400 	.word	0x58024400
 8004734:	58024800 	.word	0x58024800
 8004738:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800473c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004740:	3308      	adds	r3, #8
 8004742:	2101      	movs	r1, #1
 8004744:	4618      	mov	r0, r3
 8004746:	f000 ffc5 	bl	80056d4 <RCCEx_PLL2_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004750:	e00f      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004756:	3328      	adds	r3, #40	; 0x28
 8004758:	2101      	movs	r1, #1
 800475a:	4618      	mov	r0, r3
 800475c:	f001 f86c 	bl	8005838 <RCCEx_PLL3_Config>
 8004760:	4603      	mov	r3, r0
 8004762:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004766:	e004      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800476e:	e000      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004772:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10b      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800477a:	4bc0      	ldr	r3, [pc, #768]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800477c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800478a:	4abc      	ldr	r2, [pc, #752]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800478c:	430b      	orrs	r3, r1
 800478e:	6553      	str	r3, [r2, #84]	; 0x54
 8004790:	e003      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004792:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004796:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800479a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	f002 0302 	and.w	r3, r2, #2
 80047a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047aa:	2300      	movs	r3, #0
 80047ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80047b0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80047b4:	460b      	mov	r3, r1
 80047b6:	4313      	orrs	r3, r2
 80047b8:	d043      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80047ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d824      	bhi.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80047c6:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80047c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047cc:	08004819 	.word	0x08004819
 80047d0:	080047e5 	.word	0x080047e5
 80047d4:	080047fb 	.word	0x080047fb
 80047d8:	08004819 	.word	0x08004819
 80047dc:	08004819 	.word	0x08004819
 80047e0:	08004819 	.word	0x08004819
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e8:	3308      	adds	r3, #8
 80047ea:	2101      	movs	r1, #1
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 ff71 	bl	80056d4 <RCCEx_PLL2_Config>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80047f8:	e00f      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047fe:	3328      	adds	r3, #40	; 0x28
 8004800:	2101      	movs	r1, #1
 8004802:	4618      	mov	r0, r3
 8004804:	f001 f818 	bl	8005838 <RCCEx_PLL3_Config>
 8004808:	4603      	mov	r3, r0
 800480a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800480e:	e004      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004816:	e000      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800481a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10b      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004822:	4b96      	ldr	r3, [pc, #600]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004826:	f023 0107 	bic.w	r1, r3, #7
 800482a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800482e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004832:	4a92      	ldr	r2, [pc, #584]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004834:	430b      	orrs	r3, r1
 8004836:	6553      	str	r3, [r2, #84]	; 0x54
 8004838:	e003      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800483e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484a:	f002 0304 	and.w	r3, r2, #4
 800484e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004852:	2300      	movs	r3, #0
 8004854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004858:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800485c:	460b      	mov	r3, r1
 800485e:	4313      	orrs	r3, r2
 8004860:	d043      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004866:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800486a:	2b05      	cmp	r3, #5
 800486c:	d824      	bhi.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800486e:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004874:	080048c1 	.word	0x080048c1
 8004878:	0800488d 	.word	0x0800488d
 800487c:	080048a3 	.word	0x080048a3
 8004880:	080048c1 	.word	0x080048c1
 8004884:	080048c1 	.word	0x080048c1
 8004888:	080048c1 	.word	0x080048c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800488c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004890:	3308      	adds	r3, #8
 8004892:	2101      	movs	r1, #1
 8004894:	4618      	mov	r0, r3
 8004896:	f000 ff1d 	bl	80056d4 <RCCEx_PLL2_Config>
 800489a:	4603      	mov	r3, r0
 800489c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048a0:	e00f      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a6:	3328      	adds	r3, #40	; 0x28
 80048a8:	2101      	movs	r1, #1
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 ffc4 	bl	8005838 <RCCEx_PLL3_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048b6:	e004      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80048be:	e000      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80048c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10b      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048ca:	4b6c      	ldr	r3, [pc, #432]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ce:	f023 0107 	bic.w	r1, r3, #7
 80048d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048da:	4a68      	ldr	r2, [pc, #416]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048dc:	430b      	orrs	r3, r1
 80048de:	6593      	str	r3, [r2, #88]	; 0x58
 80048e0:	e003      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	f002 0320 	and.w	r3, r2, #32
 80048f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048fa:	2300      	movs	r3, #0
 80048fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004900:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004904:	460b      	mov	r3, r1
 8004906:	4313      	orrs	r3, r2
 8004908:	d055      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800490a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004912:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004916:	d033      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800491c:	d82c      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800491e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004922:	d02f      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004928:	d826      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800492a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800492e:	d02b      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004930:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004934:	d820      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004936:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800493a:	d012      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800493c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004940:	d81a      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004942:	2b00      	cmp	r3, #0
 8004944:	d022      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800494a:	d115      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800494c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004950:	3308      	adds	r3, #8
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f000 febd 	bl	80056d4 <RCCEx_PLL2_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004960:	e015      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004966:	3328      	adds	r3, #40	; 0x28
 8004968:	2102      	movs	r1, #2
 800496a:	4618      	mov	r0, r3
 800496c:	f000 ff64 	bl	8005838 <RCCEx_PLL3_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004976:	e00a      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800497e:	e006      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004980:	bf00      	nop
 8004982:	e004      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004984:	bf00      	nop
 8004986:	e002      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004988:	bf00      	nop
 800498a:	e000      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800498c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800498e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10b      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004996:	4b39      	ldr	r3, [pc, #228]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800499e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049a6:	4a35      	ldr	r2, [pc, #212]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80049a8:	430b      	orrs	r3, r1
 80049aa:	6553      	str	r3, [r2, #84]	; 0x54
 80049ac:	e003      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80049b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80049c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049c6:	2300      	movs	r3, #0
 80049c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80049cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80049d0:	460b      	mov	r3, r1
 80049d2:	4313      	orrs	r3, r2
 80049d4:	d058      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80049d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049e2:	d033      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80049e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049e8:	d82c      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80049ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ee:	d02f      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80049f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f4:	d826      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80049f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049fa:	d02b      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80049fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a00:	d820      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a06:	d012      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a0c:	d81a      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d022      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a16:	d115      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a1c:	3308      	adds	r3, #8
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fe57 	bl	80056d4 <RCCEx_PLL2_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a2c:	e015      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a32:	3328      	adds	r3, #40	; 0x28
 8004a34:	2102      	movs	r1, #2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fefe 	bl	8005838 <RCCEx_PLL3_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a42:	e00a      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a4a:	e006      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004a4c:	bf00      	nop
 8004a4e:	e004      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004a50:	bf00      	nop
 8004a52:	e002      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004a54:	bf00      	nop
 8004a56:	e000      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10e      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a62:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a72:	4a02      	ldr	r2, [pc, #8]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a74:	430b      	orrs	r3, r1
 8004a76:	6593      	str	r3, [r2, #88]	; 0x58
 8004a78:	e006      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004a7a:	bf00      	nop
 8004a7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	d055      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ab0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ab4:	d033      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004ab6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004aba:	d82c      	bhi.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac0:	d02f      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac6:	d826      	bhi.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004ac8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004acc:	d02b      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004ace:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ad2:	d820      	bhi.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004ad4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ad8:	d012      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004ada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ade:	d81a      	bhi.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d022      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae8:	d115      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aee:	3308      	adds	r3, #8
 8004af0:	2100      	movs	r1, #0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fdee 	bl	80056d4 <RCCEx_PLL2_Config>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004afe:	e015      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b04:	3328      	adds	r3, #40	; 0x28
 8004b06:	2102      	movs	r1, #2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 fe95 	bl	8005838 <RCCEx_PLL3_Config>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b14:	e00a      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b1c:	e006      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004b1e:	bf00      	nop
 8004b20:	e004      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004b22:	bf00      	nop
 8004b24:	e002      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004b26:	bf00      	nop
 8004b28:	e000      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10b      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b34:	4ba1      	ldr	r3, [pc, #644]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b38:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b44:	4a9d      	ldr	r2, [pc, #628]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b46:	430b      	orrs	r3, r1
 8004b48:	6593      	str	r3, [r2, #88]	; 0x58
 8004b4a:	e003      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b50:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	f002 0308 	and.w	r3, r2, #8
 8004b60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b64:	2300      	movs	r3, #0
 8004b66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4313      	orrs	r3, r2
 8004b72:	d01e      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b80:	d10c      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b86:	3328      	adds	r3, #40	; 0x28
 8004b88:	2102      	movs	r1, #2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fe54 	bl	8005838 <RCCEx_PLL3_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004b9c:	4b87      	ldr	r3, [pc, #540]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bac:	4a83      	ldr	r2, [pc, #524]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	f002 0310 	and.w	r3, r2, #16
 8004bbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004bc8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	d01e      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bde:	d10c      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004be4:	3328      	adds	r3, #40	; 0x28
 8004be6:	2102      	movs	r1, #2
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fe25 	bl	8005838 <RCCEx_PLL3_Config>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bfa:	4b70      	ldr	r3, [pc, #448]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c0a:	4a6c      	ldr	r2, [pc, #432]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c18:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004c1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c20:	2300      	movs	r3, #0
 8004c22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c26:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	d03e      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c3c:	d022      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004c3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c42:	d81b      	bhi.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c4c:	d00b      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004c4e:	e015      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c54:	3308      	adds	r3, #8
 8004c56:	2100      	movs	r1, #0
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fd3b 	bl	80056d4 <RCCEx_PLL2_Config>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c64:	e00f      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c6a:	3328      	adds	r3, #40	; 0x28
 8004c6c:	2102      	movs	r1, #2
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fde2 	bl	8005838 <RCCEx_PLL3_Config>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c7a:	e004      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c82:	e000      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10b      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c8e:	4b4b      	ldr	r3, [pc, #300]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c92:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c9e:	4a47      	ldr	r2, [pc, #284]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ca4:	e003      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004caa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004cba:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cc0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	d03b      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cd6:	d01f      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004cd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cdc:	d818      	bhi.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce2:	d003      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004ce4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce8:	d007      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004cea:	e011      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cec:	4b33      	ldr	r3, [pc, #204]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	4a32      	ldr	r2, [pc, #200]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004cf8:	e00f      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cfe:	3328      	adds	r3, #40	; 0x28
 8004d00:	2101      	movs	r1, #1
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fd98 	bl	8005838 <RCCEx_PLL3_Config>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d0e:	e004      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d16:	e000      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10b      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d22:	4b26      	ldr	r3, [pc, #152]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d26:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d32:	4a22      	ldr	r2, [pc, #136]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d34:	430b      	orrs	r3, r1
 8004d36:	6553      	str	r3, [r2, #84]	; 0x54
 8004d38:	e003      	b.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004d4e:	673b      	str	r3, [r7, #112]	; 0x70
 8004d50:	2300      	movs	r3, #0
 8004d52:	677b      	str	r3, [r7, #116]	; 0x74
 8004d54:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	d034      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d007      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004d6e:	e011      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d70:	4b12      	ldr	r3, [pc, #72]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	4a11      	ldr	r2, [pc, #68]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d7c:	e00e      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d82:	3308      	adds	r3, #8
 8004d84:	2102      	movs	r1, #2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fca4 	bl	80056d4 <RCCEx_PLL2_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d92:	e003      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10d      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db2:	4a02      	ldr	r2, [pc, #8]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004db4:	430b      	orrs	r3, r1
 8004db6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004db8:	e006      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004dba:	bf00      	nop
 8004dbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dc4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004dd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dda:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004dde:	460b      	mov	r3, r1
 8004de0:	4313      	orrs	r3, r2
 8004de2:	d00c      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de8:	3328      	adds	r3, #40	; 0x28
 8004dea:	2102      	movs	r1, #2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fd23 	bl	8005838 <RCCEx_PLL3_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e06:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004e0a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	667b      	str	r3, [r7, #100]	; 0x64
 8004e10:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004e14:	460b      	mov	r3, r1
 8004e16:	4313      	orrs	r3, r2
 8004e18:	d038      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e26:	d018      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004e28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e2c:	d811      	bhi.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e32:	d014      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e38:	d80b      	bhi.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d011      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e42:	d106      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e44:	4bc3      	ldr	r3, [pc, #780]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	4ac2      	ldr	r2, [pc, #776]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004e50:	e008      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004e58:	e004      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004e5a:	bf00      	nop
 8004e5c:	e002      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004e5e:	bf00      	nop
 8004e60:	e000      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10b      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e6c:	4bb9      	ldr	r3, [pc, #740]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e70:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7c:	4ab5      	ldr	r2, [pc, #724]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	6553      	str	r3, [r2, #84]	; 0x54
 8004e82:	e003      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e88:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e94:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004e98:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	d009      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ea8:	4baa      	ldr	r3, [pc, #680]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eb6:	4aa7      	ldr	r2, [pc, #668]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004ec8:	653b      	str	r3, [r7, #80]	; 0x50
 8004eca:	2300      	movs	r3, #0
 8004ecc:	657b      	str	r3, [r7, #84]	; 0x54
 8004ece:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	d009      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ed8:	4b9e      	ldr	r3, [pc, #632]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004edc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee6:	4a9b      	ldr	r2, [pc, #620]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004ef8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004efa:	2300      	movs	r3, #0
 8004efc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004efe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004f02:	460b      	mov	r3, r1
 8004f04:	4313      	orrs	r3, r2
 8004f06:	d009      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004f08:	4b92      	ldr	r3, [pc, #584]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f16:	4a8f      	ldr	r2, [pc, #572]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004f28:	643b      	str	r3, [r7, #64]	; 0x40
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f2e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004f32:	460b      	mov	r3, r1
 8004f34:	4313      	orrs	r3, r2
 8004f36:	d00e      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f38:	4b86      	ldr	r3, [pc, #536]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	4a85      	ldr	r2, [pc, #532]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f42:	6113      	str	r3, [r2, #16]
 8004f44:	4b83      	ldr	r3, [pc, #524]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f46:	6919      	ldr	r1, [r3, #16]
 8004f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f50:	4a80      	ldr	r2, [pc, #512]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f52:	430b      	orrs	r3, r1
 8004f54:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004f62:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f64:	2300      	movs	r3, #0
 8004f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f68:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	d009      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f72:	4b78      	ldr	r3, [pc, #480]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f76:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f80:	4a74      	ldr	r2, [pc, #464]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f82:	430b      	orrs	r3, r1
 8004f84:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004f92:	633b      	str	r3, [r7, #48]	; 0x30
 8004f94:	2300      	movs	r3, #0
 8004f96:	637b      	str	r3, [r7, #52]	; 0x34
 8004f98:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	d00a      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fa2:	4b6c      	ldr	r3, [pc, #432]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fb2:	4a68      	ldr	r2, [pc, #416]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	62b9      	str	r1, [r7, #40]	; 0x28
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	d011      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fd8:	3308      	adds	r3, #8
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fb79 	bl	80056d4 <RCCEx_PLL2_Config>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004fe8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ff4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	2100      	movs	r1, #0
 8005002:	6239      	str	r1, [r7, #32]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
 800500a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800500e:	460b      	mov	r3, r1
 8005010:	4313      	orrs	r3, r2
 8005012:	d011      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005018:	3308      	adds	r3, #8
 800501a:	2101      	movs	r1, #1
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fb59 	bl	80056d4 <RCCEx_PLL2_Config>
 8005022:	4603      	mov	r3, r0
 8005024:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005028:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005030:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005034:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005040:	2100      	movs	r1, #0
 8005042:	61b9      	str	r1, [r7, #24]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	61fb      	str	r3, [r7, #28]
 800504a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800504e:	460b      	mov	r3, r1
 8005050:	4313      	orrs	r3, r2
 8005052:	d011      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005058:	3308      	adds	r3, #8
 800505a:	2102      	movs	r1, #2
 800505c:	4618      	mov	r0, r3
 800505e:	f000 fb39 	bl	80056d4 <RCCEx_PLL2_Config>
 8005062:	4603      	mov	r3, r0
 8005064:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005068:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005070:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005074:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005080:	2100      	movs	r1, #0
 8005082:	6139      	str	r1, [r7, #16]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800508e:	460b      	mov	r3, r1
 8005090:	4313      	orrs	r3, r2
 8005092:	d011      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005098:	3328      	adds	r3, #40	; 0x28
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fbcb 	bl	8005838 <RCCEx_PLL3_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80050a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80050b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	2100      	movs	r1, #0
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80050ce:	460b      	mov	r3, r1
 80050d0:	4313      	orrs	r3, r2
 80050d2:	d011      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050d8:	3328      	adds	r3, #40	; 0x28
 80050da:	2101      	movs	r1, #1
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 fbab 	bl	8005838 <RCCEx_PLL3_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80050e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80050f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005100:	2100      	movs	r1, #0
 8005102:	6039      	str	r1, [r7, #0]
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800510e:	460b      	mov	r3, r1
 8005110:	4313      	orrs	r3, r2
 8005112:	d011      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005118:	3328      	adds	r3, #40	; 0x28
 800511a:	2102      	movs	r1, #2
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fb8b 	bl	8005838 <RCCEx_PLL3_Config>
 8005122:	4603      	mov	r3, r0
 8005124:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005128:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005130:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005134:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8005138:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	e000      	b.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
}
 8005146:	4618      	mov	r0, r3
 8005148:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800514c:	46bd      	mov	sp, r7
 800514e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005152:	bf00      	nop
 8005154:	58024400 	.word	0x58024400

08005158 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800515c:	f7fe fde2 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8005160:	4602      	mov	r2, r0
 8005162:	4b06      	ldr	r3, [pc, #24]	; (800517c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	091b      	lsrs	r3, r3, #4
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	4904      	ldr	r1, [pc, #16]	; (8005180 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800516e:	5ccb      	ldrb	r3, [r1, r3]
 8005170:	f003 031f 	and.w	r3, r3, #31
 8005174:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005178:	4618      	mov	r0, r3
 800517a:	bd80      	pop	{r7, pc}
 800517c:	58024400 	.word	0x58024400
 8005180:	080097b0 	.word	0x080097b0

08005184 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005184:	b480      	push	{r7}
 8005186:	b089      	sub	sp, #36	; 0x24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800518c:	4ba1      	ldr	r3, [pc, #644]	; (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800518e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005196:	4b9f      	ldr	r3, [pc, #636]	; (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	0b1b      	lsrs	r3, r3, #12
 800519c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80051a2:	4b9c      	ldr	r3, [pc, #624]	; (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	091b      	lsrs	r3, r3, #4
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80051ae:	4b99      	ldr	r3, [pc, #612]	; (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b2:	08db      	lsrs	r3, r3, #3
 80051b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	fb02 f303 	mul.w	r3, r2, r3
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8111 	beq.w	80053f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	f000 8083 	beq.w	80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	f200 80a1 	bhi.w	8005324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d056      	beq.n	800529c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80051ee:	e099      	b.n	8005324 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051f0:	4b88      	ldr	r3, [pc, #544]	; (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0320 	and.w	r3, r3, #32
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d02d      	beq.n	8005258 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051fc:	4b85      	ldr	r3, [pc, #532]	; (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	08db      	lsrs	r3, r3, #3
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	4a84      	ldr	r2, [pc, #528]	; (8005418 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
 800520c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	ee07 3a90 	vmov	s15, r3
 8005214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005226:	4b7b      	ldr	r3, [pc, #492]	; (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005236:	ed97 6a03 	vldr	s12, [r7, #12]
 800523a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800541c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800523e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800524a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800524e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005252:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005256:	e087      	b.n	8005368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005262:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800526a:	4b6a      	ldr	r3, [pc, #424]	; (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800527a:	ed97 6a03 	vldr	s12, [r7, #12]
 800527e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800541c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800528a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800528e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800529a:	e065      	b.n	8005368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ae:	4b59      	ldr	r3, [pc, #356]	; (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052be:	ed97 6a03 	vldr	s12, [r7, #12]
 80052c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800541c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052de:	e043      	b.n	8005368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005428 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80052ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052f2:	4b48      	ldr	r3, [pc, #288]	; (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005302:	ed97 6a03 	vldr	s12, [r7, #12]
 8005306:	eddf 5a45 	vldr	s11, [pc, #276]	; 800541c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800530a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800530e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800531a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800531e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005322:	e021      	b.n	8005368 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005336:	4b37      	ldr	r3, [pc, #220]	; (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005346:	ed97 6a03 	vldr	s12, [r7, #12]
 800534a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800541c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800534e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800535a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800535e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005366:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005368:	4b2a      	ldr	r3, [pc, #168]	; (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	0a5b      	lsrs	r3, r3, #9
 800536e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800537e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005382:	edd7 6a07 	vldr	s13, [r7, #28]
 8005386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800538a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800538e:	ee17 2a90 	vmov	r2, s15
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005396:	4b1f      	ldr	r3, [pc, #124]	; (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	0c1b      	lsrs	r3, r3, #16
 800539c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053a0:	ee07 3a90 	vmov	s15, r3
 80053a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80053b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053bc:	ee17 2a90 	vmov	r2, s15
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80053c4:	4b13      	ldr	r3, [pc, #76]	; (8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c8:	0e1b      	lsrs	r3, r3, #24
 80053ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053de:	edd7 6a07 	vldr	s13, [r7, #28]
 80053e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ea:	ee17 2a90 	vmov	r2, s15
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80053f2:	e008      	b.n	8005406 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	609a      	str	r2, [r3, #8]
}
 8005406:	bf00      	nop
 8005408:	3724      	adds	r7, #36	; 0x24
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	58024400 	.word	0x58024400
 8005418:	03d09000 	.word	0x03d09000
 800541c:	46000000 	.word	0x46000000
 8005420:	4c742400 	.word	0x4c742400
 8005424:	4a742400 	.word	0x4a742400
 8005428:	4af42400 	.word	0x4af42400

0800542c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800542c:	b480      	push	{r7}
 800542e:	b089      	sub	sp, #36	; 0x24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005434:	4ba1      	ldr	r3, [pc, #644]	; (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800543e:	4b9f      	ldr	r3, [pc, #636]	; (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005442:	0d1b      	lsrs	r3, r3, #20
 8005444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005448:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800544a:	4b9c      	ldr	r3, [pc, #624]	; (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544e:	0a1b      	lsrs	r3, r3, #8
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005456:	4b99      	ldr	r3, [pc, #612]	; (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545a:	08db      	lsrs	r3, r3, #3
 800545c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	fb02 f303 	mul.w	r3, r2, r3
 8005466:	ee07 3a90 	vmov	s15, r3
 800546a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8111 	beq.w	800569c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	2b02      	cmp	r3, #2
 800547e:	f000 8083 	beq.w	8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b02      	cmp	r3, #2
 8005486:	f200 80a1 	bhi.w	80055cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d003      	beq.n	8005498 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d056      	beq.n	8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005496:	e099      	b.n	80055cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005498:	4b88      	ldr	r3, [pc, #544]	; (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d02d      	beq.n	8005500 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054a4:	4b85      	ldr	r3, [pc, #532]	; (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	08db      	lsrs	r3, r3, #3
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	4a84      	ldr	r2, [pc, #528]	; (80056c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
 80054b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	ee07 3a90 	vmov	s15, r3
 80054bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ce:	4b7b      	ldr	r3, [pc, #492]	; (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054de:	ed97 6a03 	vldr	s12, [r7, #12]
 80054e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80054fe:	e087      	b.n	8005610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	ee07 3a90 	vmov	s15, r3
 8005506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800550e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005512:	4b6a      	ldr	r3, [pc, #424]	; (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005522:	ed97 6a03 	vldr	s12, [r7, #12]
 8005526:	eddf 5a67 	vldr	s11, [pc, #412]	; 80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800552a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800552e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800553a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005542:	e065      	b.n	8005610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005556:	4b59      	ldr	r3, [pc, #356]	; (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005566:	ed97 6a03 	vldr	s12, [r7, #12]
 800556a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800556e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800557a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800557e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005586:	e043      	b.n	8005610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005592:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800559a:	4b48      	ldr	r3, [pc, #288]	; (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055ca:	e021      	b.n	8005610 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	ee07 3a90 	vmov	s15, r3
 80055d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80056cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055de:	4b37      	ldr	r3, [pc, #220]	; (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80055f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800560a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800560e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005610:	4b2a      	ldr	r3, [pc, #168]	; (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	0a5b      	lsrs	r3, r3, #9
 8005616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005626:	ee37 7a87 	vadd.f32	s14, s15, s14
 800562a:	edd7 6a07 	vldr	s13, [r7, #28]
 800562e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005636:	ee17 2a90 	vmov	r2, s15
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800563e:	4b1f      	ldr	r3, [pc, #124]	; (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	0c1b      	lsrs	r3, r3, #16
 8005644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005648:	ee07 3a90 	vmov	s15, r3
 800564c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005658:	edd7 6a07 	vldr	s13, [r7, #28]
 800565c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005664:	ee17 2a90 	vmov	r2, s15
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800566c:	4b13      	ldr	r3, [pc, #76]	; (80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800566e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005670:	0e1b      	lsrs	r3, r3, #24
 8005672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005686:	edd7 6a07 	vldr	s13, [r7, #28]
 800568a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800568e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005692:	ee17 2a90 	vmov	r2, s15
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800569a:	e008      	b.n	80056ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	609a      	str	r2, [r3, #8]
}
 80056ae:	bf00      	nop
 80056b0:	3724      	adds	r7, #36	; 0x24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	58024400 	.word	0x58024400
 80056c0:	03d09000 	.word	0x03d09000
 80056c4:	46000000 	.word	0x46000000
 80056c8:	4c742400 	.word	0x4c742400
 80056cc:	4a742400 	.word	0x4a742400
 80056d0:	4af42400 	.word	0x4af42400

080056d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056e2:	4b53      	ldr	r3, [pc, #332]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 80056e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d101      	bne.n	80056f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e099      	b.n	8005826 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80056f2:	4b4f      	ldr	r3, [pc, #316]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a4e      	ldr	r2, [pc, #312]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 80056f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056fe:	f7fc fae7 	bl	8001cd0 <HAL_GetTick>
 8005702:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005704:	e008      	b.n	8005718 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005706:	f7fc fae3 	bl	8001cd0 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e086      	b.n	8005826 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005718:	4b45      	ldr	r3, [pc, #276]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f0      	bne.n	8005706 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005724:	4b42      	ldr	r3, [pc, #264]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	031b      	lsls	r3, r3, #12
 8005732:	493f      	ldr	r1, [pc, #252]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 8005734:	4313      	orrs	r3, r2
 8005736:	628b      	str	r3, [r1, #40]	; 0x28
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	3b01      	subs	r3, #1
 800573e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	3b01      	subs	r3, #1
 8005748:	025b      	lsls	r3, r3, #9
 800574a:	b29b      	uxth	r3, r3
 800574c:	431a      	orrs	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	3b01      	subs	r3, #1
 8005754:	041b      	lsls	r3, r3, #16
 8005756:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	3b01      	subs	r3, #1
 8005762:	061b      	lsls	r3, r3, #24
 8005764:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005768:	4931      	ldr	r1, [pc, #196]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 800576a:	4313      	orrs	r3, r2
 800576c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800576e:	4b30      	ldr	r3, [pc, #192]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 8005770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005772:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	492d      	ldr	r1, [pc, #180]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 800577c:	4313      	orrs	r3, r2
 800577e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005780:	4b2b      	ldr	r3, [pc, #172]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	f023 0220 	bic.w	r2, r3, #32
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	4928      	ldr	r1, [pc, #160]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 800578e:	4313      	orrs	r3, r2
 8005790:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005792:	4b27      	ldr	r3, [pc, #156]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	4a26      	ldr	r2, [pc, #152]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 8005798:	f023 0310 	bic.w	r3, r3, #16
 800579c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800579e:	4b24      	ldr	r3, [pc, #144]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057a2:	4b24      	ldr	r3, [pc, #144]	; (8005834 <RCCEx_PLL2_Config+0x160>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	69d2      	ldr	r2, [r2, #28]
 80057aa:	00d2      	lsls	r2, r2, #3
 80057ac:	4920      	ldr	r1, [pc, #128]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80057b2:	4b1f      	ldr	r3, [pc, #124]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	4a1e      	ldr	r2, [pc, #120]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057b8:	f043 0310 	orr.w	r3, r3, #16
 80057bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80057c4:	4b1a      	ldr	r3, [pc, #104]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	4a19      	ldr	r2, [pc, #100]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057d0:	e00f      	b.n	80057f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d106      	bne.n	80057e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80057d8:	4b15      	ldr	r3, [pc, #84]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	4a14      	ldr	r2, [pc, #80]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057e4:	e005      	b.n	80057f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80057e6:	4b12      	ldr	r3, [pc, #72]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	4a11      	ldr	r2, [pc, #68]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80057f2:	4b0f      	ldr	r3, [pc, #60]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a0e      	ldr	r2, [pc, #56]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 80057f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057fe:	f7fc fa67 	bl	8001cd0 <HAL_GetTick>
 8005802:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005804:	e008      	b.n	8005818 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005806:	f7fc fa63 	bl	8001cd0 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e006      	b.n	8005826 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005818:	4b05      	ldr	r3, [pc, #20]	; (8005830 <RCCEx_PLL2_Config+0x15c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0f0      	beq.n	8005806 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	58024400 	.word	0x58024400
 8005834:	ffff0007 	.word	0xffff0007

08005838 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005846:	4b53      	ldr	r3, [pc, #332]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	2b03      	cmp	r3, #3
 8005850:	d101      	bne.n	8005856 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e099      	b.n	800598a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005856:	4b4f      	ldr	r3, [pc, #316]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a4e      	ldr	r2, [pc, #312]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 800585c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005860:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005862:	f7fc fa35 	bl	8001cd0 <HAL_GetTick>
 8005866:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005868:	e008      	b.n	800587c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800586a:	f7fc fa31 	bl	8001cd0 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e086      	b.n	800598a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800587c:	4b45      	ldr	r3, [pc, #276]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1f0      	bne.n	800586a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005888:	4b42      	ldr	r3, [pc, #264]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 800588a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	051b      	lsls	r3, r3, #20
 8005896:	493f      	ldr	r1, [pc, #252]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005898:	4313      	orrs	r3, r2
 800589a:	628b      	str	r3, [r1, #40]	; 0x28
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	025b      	lsls	r3, r3, #9
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	041b      	lsls	r3, r3, #16
 80058ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	061b      	lsls	r3, r3, #24
 80058c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058cc:	4931      	ldr	r1, [pc, #196]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80058d2:	4b30      	ldr	r3, [pc, #192]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	492d      	ldr	r1, [pc, #180]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80058e4:	4b2b      	ldr	r3, [pc, #172]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	4928      	ldr	r1, [pc, #160]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80058f6:	4b27      	ldr	r3, [pc, #156]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	4a26      	ldr	r2, [pc, #152]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 80058fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005900:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005902:	4b24      	ldr	r3, [pc, #144]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005906:	4b24      	ldr	r3, [pc, #144]	; (8005998 <RCCEx_PLL3_Config+0x160>)
 8005908:	4013      	ands	r3, r2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	69d2      	ldr	r2, [r2, #28]
 800590e:	00d2      	lsls	r2, r2, #3
 8005910:	4920      	ldr	r1, [pc, #128]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005912:	4313      	orrs	r3, r2
 8005914:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005916:	4b1f      	ldr	r3, [pc, #124]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591a:	4a1e      	ldr	r2, [pc, #120]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 800591c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005920:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d106      	bne.n	8005936 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005928:	4b1a      	ldr	r3, [pc, #104]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	4a19      	ldr	r2, [pc, #100]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 800592e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005932:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005934:	e00f      	b.n	8005956 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d106      	bne.n	800594a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800593c:	4b15      	ldr	r3, [pc, #84]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	4a14      	ldr	r2, [pc, #80]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005942:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005946:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005948:	e005      	b.n	8005956 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800594a:	4b12      	ldr	r3, [pc, #72]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 800594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594e:	4a11      	ldr	r2, [pc, #68]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005950:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005954:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005956:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a0e      	ldr	r2, [pc, #56]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 800595c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005962:	f7fc f9b5 	bl	8001cd0 <HAL_GetTick>
 8005966:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005968:	e008      	b.n	800597c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800596a:	f7fc f9b1 	bl	8001cd0 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e006      	b.n	800598a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <RCCEx_PLL3_Config+0x15c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f0      	beq.n	800596a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005988:	7bfb      	ldrb	r3, [r7, #15]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	58024400 	.word	0x58024400
 8005998:	ffff0007 	.word	0xffff0007

0800599c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e049      	b.n	8005a42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fb fdd4 	bl	8001570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	4619      	mov	r1, r3
 80059da:	4610      	mov	r0, r2
 80059dc:	f000 fb26 	bl	800602c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e08f      	b.n	8005b80 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d106      	bne.n	8005a7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fb fd2b 	bl	80014d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6899      	ldr	r1, [r3, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	4b3e      	ldr	r3, [pc, #248]	; (8005b88 <HAL_TIM_Encoder_Init+0x13c>)
 8005a8e:	400b      	ands	r3, r1
 8005a90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	f000 fac5 	bl	800602c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4b31      	ldr	r3, [pc, #196]	; (8005b8c <HAL_TIM_Encoder_Init+0x140>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4b2b      	ldr	r3, [pc, #172]	; (8005b90 <HAL_TIM_Encoder_Init+0x144>)
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4b2a      	ldr	r3, [pc, #168]	; (8005b94 <HAL_TIM_Encoder_Init+0x148>)
 8005aea:	4013      	ands	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	021b      	lsls	r3, r3, #8
 8005af8:	4313      	orrs	r3, r2
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	011a      	lsls	r2, r3, #4
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	031b      	lsls	r3, r3, #12
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b1a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005b22:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	fffebff8 	.word	0xfffebff8
 8005b8c:	fffffcfc 	.word	0xfffffcfc
 8005b90:	fffff3f3 	.word	0xfffff3f3
 8005b94:	ffff0f0f 	.word	0xffff0f0f

08005b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d122      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d11b      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0202 	mvn.w	r2, #2
 8005bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fa08 	bl	8005ff0 <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f9fa 	bl	8005fdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fa0b 	bl	8006004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d122      	bne.n	8005c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d11b      	bne.n	8005c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0204 	mvn.w	r2, #4
 8005c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f9de 	bl	8005ff0 <HAL_TIM_IC_CaptureCallback>
 8005c34:	e005      	b.n	8005c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f9d0 	bl	8005fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f9e1 	bl	8006004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d122      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d11b      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0208 	mvn.w	r2, #8
 8005c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2204      	movs	r2, #4
 8005c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f9b4 	bl	8005ff0 <HAL_TIM_IC_CaptureCallback>
 8005c88:	e005      	b.n	8005c96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f9a6 	bl	8005fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f9b7 	bl	8006004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0310 	and.w	r3, r3, #16
 8005ca6:	2b10      	cmp	r3, #16
 8005ca8:	d122      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d11b      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0210 	mvn.w	r2, #16
 8005cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f98a 	bl	8005ff0 <HAL_TIM_IC_CaptureCallback>
 8005cdc:	e005      	b.n	8005cea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f97c 	bl	8005fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f98d 	bl	8006004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d10e      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d107      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0201 	mvn.w	r2, #1
 8005d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f956 	bl	8005fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d26:	2b80      	cmp	r3, #128	; 0x80
 8005d28:	d10e      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d34:	2b80      	cmp	r3, #128	; 0x80
 8005d36:	d107      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fb42 	bl	80063cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d56:	d10e      	bne.n	8005d76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d62:	2b80      	cmp	r3, #128	; 0x80
 8005d64:	d107      	bne.n	8005d76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fb35 	bl	80063e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d80:	2b40      	cmp	r3, #64	; 0x40
 8005d82:	d10e      	bne.n	8005da2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8e:	2b40      	cmp	r3, #64	; 0x40
 8005d90:	d107      	bne.n	8005da2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f93b 	bl	8006018 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f003 0320 	and.w	r3, r3, #32
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d10e      	bne.n	8005dce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d107      	bne.n	8005dce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f06f 0220 	mvn.w	r2, #32
 8005dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 faf5 	bl	80063b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dce:	bf00      	nop
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d101      	bne.n	8005df4 <HAL_TIM_ConfigClockSource+0x1c>
 8005df0:	2302      	movs	r3, #2
 8005df2:	e0dc      	b.n	8005fae <HAL_TIM_ConfigClockSource+0x1d6>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	4b6a      	ldr	r3, [pc, #424]	; (8005fb8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a64      	ldr	r2, [pc, #400]	; (8005fbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	f000 80a9 	beq.w	8005f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8005e30:	4a62      	ldr	r2, [pc, #392]	; (8005fbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	f200 80ae 	bhi.w	8005f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e38:	4a61      	ldr	r2, [pc, #388]	; (8005fc0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	f000 80a1 	beq.w	8005f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8005e40:	4a5f      	ldr	r2, [pc, #380]	; (8005fc0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	f200 80a6 	bhi.w	8005f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e48:	4a5e      	ldr	r2, [pc, #376]	; (8005fc4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	f000 8099 	beq.w	8005f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8005e50:	4a5c      	ldr	r2, [pc, #368]	; (8005fc4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	f200 809e 	bhi.w	8005f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005e5c:	f000 8091 	beq.w	8005f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8005e60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005e64:	f200 8096 	bhi.w	8005f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e6c:	f000 8089 	beq.w	8005f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8005e70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e74:	f200 808e 	bhi.w	8005f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e7c:	d03e      	beq.n	8005efc <HAL_TIM_ConfigClockSource+0x124>
 8005e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e82:	f200 8087 	bhi.w	8005f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8a:	f000 8086 	beq.w	8005f9a <HAL_TIM_ConfigClockSource+0x1c2>
 8005e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e92:	d87f      	bhi.n	8005f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e94:	2b70      	cmp	r3, #112	; 0x70
 8005e96:	d01a      	beq.n	8005ece <HAL_TIM_ConfigClockSource+0xf6>
 8005e98:	2b70      	cmp	r3, #112	; 0x70
 8005e9a:	d87b      	bhi.n	8005f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005e9c:	2b60      	cmp	r3, #96	; 0x60
 8005e9e:	d050      	beq.n	8005f42 <HAL_TIM_ConfigClockSource+0x16a>
 8005ea0:	2b60      	cmp	r3, #96	; 0x60
 8005ea2:	d877      	bhi.n	8005f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ea4:	2b50      	cmp	r3, #80	; 0x50
 8005ea6:	d03c      	beq.n	8005f22 <HAL_TIM_ConfigClockSource+0x14a>
 8005ea8:	2b50      	cmp	r3, #80	; 0x50
 8005eaa:	d873      	bhi.n	8005f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d058      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0x18a>
 8005eb0:	2b40      	cmp	r3, #64	; 0x40
 8005eb2:	d86f      	bhi.n	8005f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005eb4:	2b30      	cmp	r3, #48	; 0x30
 8005eb6:	d064      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8005eb8:	2b30      	cmp	r3, #48	; 0x30
 8005eba:	d86b      	bhi.n	8005f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d060      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d867      	bhi.n	8005f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d05c      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ec8:	2b10      	cmp	r3, #16
 8005eca:	d05a      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ecc:	e062      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ede:	f000 f9bd 	bl	800625c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ef0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	609a      	str	r2, [r3, #8]
      break;
 8005efa:	e04f      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f0c:	f000 f9a6 	bl	800625c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f1e:	609a      	str	r2, [r3, #8]
      break;
 8005f20:	e03c      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f000 f916 	bl	8006160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2150      	movs	r1, #80	; 0x50
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 f970 	bl	8006220 <TIM_ITRx_SetConfig>
      break;
 8005f40:	e02c      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f000 f935 	bl	80061be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2160      	movs	r1, #96	; 0x60
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f960 	bl	8006220 <TIM_ITRx_SetConfig>
      break;
 8005f60:	e01c      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f000 f8f6 	bl	8006160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2140      	movs	r1, #64	; 0x40
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 f950 	bl	8006220 <TIM_ITRx_SetConfig>
      break;
 8005f80:	e00c      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	f000 f947 	bl	8006220 <TIM_ITRx_SetConfig>
      break;
 8005f92:	e003      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	73fb      	strb	r3, [r7, #15]
      break;
 8005f98:	e000      	b.n	8005f9c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005f9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	ffceff88 	.word	0xffceff88
 8005fbc:	00100040 	.word	0x00100040
 8005fc0:	00100030 	.word	0x00100030
 8005fc4:	00100020 	.word	0x00100020

08005fc8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a40      	ldr	r2, [pc, #256]	; (8006140 <TIM_Base_SetConfig+0x114>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d013      	beq.n	800606c <TIM_Base_SetConfig+0x40>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604a:	d00f      	beq.n	800606c <TIM_Base_SetConfig+0x40>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a3d      	ldr	r2, [pc, #244]	; (8006144 <TIM_Base_SetConfig+0x118>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00b      	beq.n	800606c <TIM_Base_SetConfig+0x40>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a3c      	ldr	r2, [pc, #240]	; (8006148 <TIM_Base_SetConfig+0x11c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d007      	beq.n	800606c <TIM_Base_SetConfig+0x40>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a3b      	ldr	r2, [pc, #236]	; (800614c <TIM_Base_SetConfig+0x120>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d003      	beq.n	800606c <TIM_Base_SetConfig+0x40>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a3a      	ldr	r2, [pc, #232]	; (8006150 <TIM_Base_SetConfig+0x124>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d108      	bne.n	800607e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a2f      	ldr	r2, [pc, #188]	; (8006140 <TIM_Base_SetConfig+0x114>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d01f      	beq.n	80060c6 <TIM_Base_SetConfig+0x9a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608c:	d01b      	beq.n	80060c6 <TIM_Base_SetConfig+0x9a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a2c      	ldr	r2, [pc, #176]	; (8006144 <TIM_Base_SetConfig+0x118>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d017      	beq.n	80060c6 <TIM_Base_SetConfig+0x9a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a2b      	ldr	r2, [pc, #172]	; (8006148 <TIM_Base_SetConfig+0x11c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d013      	beq.n	80060c6 <TIM_Base_SetConfig+0x9a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a2a      	ldr	r2, [pc, #168]	; (800614c <TIM_Base_SetConfig+0x120>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00f      	beq.n	80060c6 <TIM_Base_SetConfig+0x9a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a29      	ldr	r2, [pc, #164]	; (8006150 <TIM_Base_SetConfig+0x124>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00b      	beq.n	80060c6 <TIM_Base_SetConfig+0x9a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a28      	ldr	r2, [pc, #160]	; (8006154 <TIM_Base_SetConfig+0x128>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d007      	beq.n	80060c6 <TIM_Base_SetConfig+0x9a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a27      	ldr	r2, [pc, #156]	; (8006158 <TIM_Base_SetConfig+0x12c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d003      	beq.n	80060c6 <TIM_Base_SetConfig+0x9a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a26      	ldr	r2, [pc, #152]	; (800615c <TIM_Base_SetConfig+0x130>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d108      	bne.n	80060d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a10      	ldr	r2, [pc, #64]	; (8006140 <TIM_Base_SetConfig+0x114>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00f      	beq.n	8006124 <TIM_Base_SetConfig+0xf8>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a12      	ldr	r2, [pc, #72]	; (8006150 <TIM_Base_SetConfig+0x124>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00b      	beq.n	8006124 <TIM_Base_SetConfig+0xf8>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a11      	ldr	r2, [pc, #68]	; (8006154 <TIM_Base_SetConfig+0x128>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d007      	beq.n	8006124 <TIM_Base_SetConfig+0xf8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a10      	ldr	r2, [pc, #64]	; (8006158 <TIM_Base_SetConfig+0x12c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d003      	beq.n	8006124 <TIM_Base_SetConfig+0xf8>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a0f      	ldr	r2, [pc, #60]	; (800615c <TIM_Base_SetConfig+0x130>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d103      	bne.n	800612c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	691a      	ldr	r2, [r3, #16]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	615a      	str	r2, [r3, #20]
}
 8006132:	bf00      	nop
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40010000 	.word	0x40010000
 8006144:	40000400 	.word	0x40000400
 8006148:	40000800 	.word	0x40000800
 800614c:	40000c00 	.word	0x40000c00
 8006150:	40010400 	.word	0x40010400
 8006154:	40014000 	.word	0x40014000
 8006158:	40014400 	.word	0x40014400
 800615c:	40014800 	.word	0x40014800

08006160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f023 0201 	bic.w	r2, r3, #1
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800618a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	4313      	orrs	r3, r2
 8006194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f023 030a 	bic.w	r3, r3, #10
 800619c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	621a      	str	r2, [r3, #32]
}
 80061b2:	bf00      	nop
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061be:	b480      	push	{r7}
 80061c0:	b087      	sub	sp, #28
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	60f8      	str	r0, [r7, #12]
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f023 0210 	bic.w	r2, r3, #16
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	031b      	lsls	r3, r3, #12
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	621a      	str	r2, [r3, #32]
}
 8006212:	bf00      	nop
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
	...

08006220 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4b09      	ldr	r3, [pc, #36]	; (8006258 <TIM_ITRx_SetConfig+0x38>)
 8006234:	4013      	ands	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4313      	orrs	r3, r2
 800623e:	f043 0307 	orr.w	r3, r3, #7
 8006242:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	609a      	str	r2, [r3, #8]
}
 800624a:	bf00      	nop
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	ffcfff8f 	.word	0xffcfff8f

0800625c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006276:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	021a      	lsls	r2, r3, #8
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	431a      	orrs	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4313      	orrs	r3, r2
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	609a      	str	r2, [r3, #8]
}
 8006290:	bf00      	nop
 8006292:	371c      	adds	r7, #28
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e06d      	b.n	8006390 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a30      	ldr	r2, [pc, #192]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d004      	beq.n	80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a2f      	ldr	r2, [pc, #188]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d108      	bne.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006300:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a20      	ldr	r2, [pc, #128]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d022      	beq.n	8006364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006326:	d01d      	beq.n	8006364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1d      	ldr	r2, [pc, #116]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d018      	beq.n	8006364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1c      	ldr	r2, [pc, #112]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d013      	beq.n	8006364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a1a      	ldr	r2, [pc, #104]	; (80063ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00e      	beq.n	8006364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a15      	ldr	r2, [pc, #84]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d009      	beq.n	8006364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a16      	ldr	r2, [pc, #88]	; (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d004      	beq.n	8006364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a15      	ldr	r2, [pc, #84]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d10c      	bne.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800636a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	4313      	orrs	r3, r2
 8006374:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	40010000 	.word	0x40010000
 80063a0:	40010400 	.word	0x40010400
 80063a4:	40000400 	.word	0x40000400
 80063a8:	40000800 	.word	0x40000800
 80063ac:	40000c00 	.word	0x40000c00
 80063b0:	40001800 	.word	0x40001800
 80063b4:	40014000 	.word	0x40014000

080063b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e042      	b.n	800648c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640c:	2b00      	cmp	r3, #0
 800640e:	d106      	bne.n	800641e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7fb f8f1 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2224      	movs	r2, #36	; 0x24
 8006422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0201 	bic.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fce0 	bl	8006dfc <UART_SetConfig>
 800643c:	4603      	mov	r3, r0
 800643e:	2b01      	cmp	r3, #1
 8006440:	d101      	bne.n	8006446 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e022      	b.n	800648c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f001 fb40 	bl	8007ad4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006472:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f001 fbc7 	bl	8007c18 <UART_CheckIdleState>
 800648a:	4603      	mov	r3, r0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08a      	sub	sp, #40	; 0x28
 8006498:	af02      	add	r7, sp, #8
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	603b      	str	r3, [r7, #0]
 80064a0:	4613      	mov	r3, r2
 80064a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	d17b      	bne.n	80065a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <HAL_UART_Transmit+0x26>
 80064b4:	88fb      	ldrh	r3, [r7, #6]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e074      	b.n	80065a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2221      	movs	r2, #33	; 0x21
 80064ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064ce:	f7fb fbff 	bl	8001cd0 <HAL_GetTick>
 80064d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	88fa      	ldrh	r2, [r7, #6]
 80064d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	88fa      	ldrh	r2, [r7, #6]
 80064e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ec:	d108      	bne.n	8006500 <HAL_UART_Transmit+0x6c>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d104      	bne.n	8006500 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	e003      	b.n	8006508 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006504:	2300      	movs	r3, #0
 8006506:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006508:	e030      	b.n	800656c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2200      	movs	r2, #0
 8006512:	2180      	movs	r1, #128	; 0x80
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f001 fc29 	bl	8007d6c <UART_WaitOnFlagUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2220      	movs	r2, #32
 8006524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e03d      	b.n	80065a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10b      	bne.n	800654a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006540:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	3302      	adds	r3, #2
 8006546:	61bb      	str	r3, [r7, #24]
 8006548:	e007      	b.n	800655a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	781a      	ldrb	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	3301      	adds	r3, #1
 8006558:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006560:	b29b      	uxth	r3, r3
 8006562:	3b01      	subs	r3, #1
 8006564:	b29a      	uxth	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006572:	b29b      	uxth	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1c8      	bne.n	800650a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2200      	movs	r2, #0
 8006580:	2140      	movs	r1, #64	; 0x40
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f001 fbf2 	bl	8007d6c <UART_WaitOnFlagUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d005      	beq.n	800659a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e006      	b.n	80065a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2220      	movs	r2, #32
 800659e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	e000      	b.n	80065a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80065a6:	2302      	movs	r3, #2
  }
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3720      	adds	r7, #32
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	; 0x28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065c4:	2b20      	cmp	r3, #32
 80065c6:	d137      	bne.n	8006638 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <HAL_UART_Receive_IT+0x24>
 80065ce:	88fb      	ldrh	r3, [r7, #6]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e030      	b.n	800663a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a18      	ldr	r2, [pc, #96]	; (8006644 <HAL_UART_Receive_IT+0x94>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d01f      	beq.n	8006628 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d018      	beq.n	8006628 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	e853 3f00 	ldrex	r3, [r3]
 8006602:	613b      	str	r3, [r7, #16]
   return(result);
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	623b      	str	r3, [r7, #32]
 8006616:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	69f9      	ldr	r1, [r7, #28]
 800661a:	6a3a      	ldr	r2, [r7, #32]
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	61bb      	str	r3, [r7, #24]
   return(result);
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e6      	bne.n	80065f6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006628:	88fb      	ldrh	r3, [r7, #6]
 800662a:	461a      	mov	r2, r3
 800662c:	68b9      	ldr	r1, [r7, #8]
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f001 fc04 	bl	8007e3c <UART_Start_Receive_IT>
 8006634:	4603      	mov	r3, r0
 8006636:	e000      	b.n	800663a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006638:	2302      	movs	r3, #2
  }
}
 800663a:	4618      	mov	r0, r3
 800663c:	3728      	adds	r7, #40	; 0x28
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	58000c00 	.word	0x58000c00

08006648 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b0ba      	sub	sp, #232	; 0xe8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800666e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006672:	f640 030f 	movw	r3, #2063	; 0x80f
 8006676:	4013      	ands	r3, r2
 8006678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800667c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006680:	2b00      	cmp	r3, #0
 8006682:	d11b      	bne.n	80066bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b00      	cmp	r3, #0
 800668e:	d015      	beq.n	80066bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006694:	f003 0320 	and.w	r3, r3, #32
 8006698:	2b00      	cmp	r3, #0
 800669a:	d105      	bne.n	80066a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800669c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d009      	beq.n	80066bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8377 	beq.w	8006da0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	4798      	blx	r3
      }
      return;
 80066ba:	e371      	b.n	8006da0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8123 	beq.w	800690c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80066c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80066ca:	4b8d      	ldr	r3, [pc, #564]	; (8006900 <HAL_UART_IRQHandler+0x2b8>)
 80066cc:	4013      	ands	r3, r2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d106      	bne.n	80066e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80066d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80066d6:	4b8b      	ldr	r3, [pc, #556]	; (8006904 <HAL_UART_IRQHandler+0x2bc>)
 80066d8:	4013      	ands	r3, r2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 8116 	beq.w	800690c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d011      	beq.n	8006710 <HAL_UART_IRQHandler+0xc8>
 80066ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00b      	beq.n	8006710 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2201      	movs	r2, #1
 80066fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006706:	f043 0201 	orr.w	r2, r3, #1
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d011      	beq.n	8006740 <HAL_UART_IRQHandler+0xf8>
 800671c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00b      	beq.n	8006740 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2202      	movs	r2, #2
 800672e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006736:	f043 0204 	orr.w	r2, r3, #4
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	d011      	beq.n	8006770 <HAL_UART_IRQHandler+0x128>
 800674c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00b      	beq.n	8006770 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2204      	movs	r2, #4
 800675e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006766:	f043 0202 	orr.w	r2, r3, #2
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006774:	f003 0308 	and.w	r3, r3, #8
 8006778:	2b00      	cmp	r3, #0
 800677a:	d017      	beq.n	80067ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800677c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006780:	f003 0320 	and.w	r3, r3, #32
 8006784:	2b00      	cmp	r3, #0
 8006786:	d105      	bne.n	8006794 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006788:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800678c:	4b5c      	ldr	r3, [pc, #368]	; (8006900 <HAL_UART_IRQHandler+0x2b8>)
 800678e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2208      	movs	r2, #8
 800679a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a2:	f043 0208 	orr.w	r2, r3, #8
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d012      	beq.n	80067de <HAL_UART_IRQHandler+0x196>
 80067b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00c      	beq.n	80067de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d4:	f043 0220 	orr.w	r2, r3, #32
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 82dd 	beq.w	8006da4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ee:	f003 0320 	and.w	r3, r3, #32
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d013      	beq.n	800681e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067fa:	f003 0320 	and.w	r3, r3, #32
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d105      	bne.n	800680e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d007      	beq.n	800681e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006824:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006832:	2b40      	cmp	r3, #64	; 0x40
 8006834:	d005      	beq.n	8006842 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006836:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800683a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800683e:	2b00      	cmp	r3, #0
 8006840:	d054      	beq.n	80068ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f001 fc1c 	bl	8008080 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006852:	2b40      	cmp	r3, #64	; 0x40
 8006854:	d146      	bne.n	80068e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3308      	adds	r3, #8
 800685c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800686c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3308      	adds	r3, #8
 800687e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006882:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006886:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800688e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800689a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1d9      	bne.n	8006856 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d017      	beq.n	80068dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068b2:	4a15      	ldr	r2, [pc, #84]	; (8006908 <HAL_UART_IRQHandler+0x2c0>)
 80068b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fb fe65 	bl	800258c <HAL_DMA_Abort_IT>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d019      	beq.n	80068fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80068d6:	4610      	mov	r0, r2
 80068d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068da:	e00f      	b.n	80068fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fa77 	bl	8006dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e2:	e00b      	b.n	80068fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fa73 	bl	8006dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ea:	e007      	b.n	80068fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fa6f 	bl	8006dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80068fa:	e253      	b.n	8006da4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068fc:	bf00      	nop
    return;
 80068fe:	e251      	b.n	8006da4 <HAL_UART_IRQHandler+0x75c>
 8006900:	10000001 	.word	0x10000001
 8006904:	04000120 	.word	0x04000120
 8006908:	0800814d 	.word	0x0800814d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006910:	2b01      	cmp	r3, #1
 8006912:	f040 81e7 	bne.w	8006ce4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800691a:	f003 0310 	and.w	r3, r3, #16
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 81e0 	beq.w	8006ce4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006928:	f003 0310 	and.w	r3, r3, #16
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 81d9 	beq.w	8006ce4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2210      	movs	r2, #16
 8006938:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006944:	2b40      	cmp	r3, #64	; 0x40
 8006946:	f040 8151 	bne.w	8006bec <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a96      	ldr	r2, [pc, #600]	; (8006bac <HAL_UART_IRQHandler+0x564>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d068      	beq.n	8006a2a <HAL_UART_IRQHandler+0x3e2>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a93      	ldr	r2, [pc, #588]	; (8006bb0 <HAL_UART_IRQHandler+0x568>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d061      	beq.n	8006a2a <HAL_UART_IRQHandler+0x3e2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a91      	ldr	r2, [pc, #580]	; (8006bb4 <HAL_UART_IRQHandler+0x56c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d05a      	beq.n	8006a2a <HAL_UART_IRQHandler+0x3e2>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a8e      	ldr	r2, [pc, #568]	; (8006bb8 <HAL_UART_IRQHandler+0x570>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d053      	beq.n	8006a2a <HAL_UART_IRQHandler+0x3e2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a8c      	ldr	r2, [pc, #560]	; (8006bbc <HAL_UART_IRQHandler+0x574>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d04c      	beq.n	8006a2a <HAL_UART_IRQHandler+0x3e2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a89      	ldr	r2, [pc, #548]	; (8006bc0 <HAL_UART_IRQHandler+0x578>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d045      	beq.n	8006a2a <HAL_UART_IRQHandler+0x3e2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a87      	ldr	r2, [pc, #540]	; (8006bc4 <HAL_UART_IRQHandler+0x57c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d03e      	beq.n	8006a2a <HAL_UART_IRQHandler+0x3e2>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a84      	ldr	r2, [pc, #528]	; (8006bc8 <HAL_UART_IRQHandler+0x580>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d037      	beq.n	8006a2a <HAL_UART_IRQHandler+0x3e2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a82      	ldr	r2, [pc, #520]	; (8006bcc <HAL_UART_IRQHandler+0x584>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d030      	beq.n	8006a2a <HAL_UART_IRQHandler+0x3e2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a7f      	ldr	r2, [pc, #508]	; (8006bd0 <HAL_UART_IRQHandler+0x588>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d029      	beq.n	8006a2a <HAL_UART_IRQHandler+0x3e2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a7d      	ldr	r2, [pc, #500]	; (8006bd4 <HAL_UART_IRQHandler+0x58c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d022      	beq.n	8006a2a <HAL_UART_IRQHandler+0x3e2>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a7a      	ldr	r2, [pc, #488]	; (8006bd8 <HAL_UART_IRQHandler+0x590>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d01b      	beq.n	8006a2a <HAL_UART_IRQHandler+0x3e2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a78      	ldr	r2, [pc, #480]	; (8006bdc <HAL_UART_IRQHandler+0x594>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d014      	beq.n	8006a2a <HAL_UART_IRQHandler+0x3e2>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a75      	ldr	r2, [pc, #468]	; (8006be0 <HAL_UART_IRQHandler+0x598>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00d      	beq.n	8006a2a <HAL_UART_IRQHandler+0x3e2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a73      	ldr	r2, [pc, #460]	; (8006be4 <HAL_UART_IRQHandler+0x59c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d006      	beq.n	8006a2a <HAL_UART_IRQHandler+0x3e2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a70      	ldr	r2, [pc, #448]	; (8006be8 <HAL_UART_IRQHandler+0x5a0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d106      	bne.n	8006a38 <HAL_UART_IRQHandler+0x3f0>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	e005      	b.n	8006a44 <HAL_UART_IRQHandler+0x3fc>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 81ab 	beq.w	8006da8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	f080 81a3 	bcs.w	8006da8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a78:	f000 8087 	beq.w	8006b8a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006aa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006aaa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ab2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1da      	bne.n	8006a7c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3308      	adds	r3, #8
 8006acc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ad0:	e853 3f00 	ldrex	r3, [r3]
 8006ad4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ad8:	f023 0301 	bic.w	r3, r3, #1
 8006adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3308      	adds	r3, #8
 8006ae6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006aea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006aee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006af2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e1      	bne.n	8006ac6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3308      	adds	r3, #8
 8006b08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3308      	adds	r3, #8
 8006b22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e3      	bne.n	8006b02 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b50:	e853 3f00 	ldrex	r3, [r3]
 8006b54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b58:	f023 0310 	bic.w	r3, r3, #16
 8006b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e4      	bne.n	8006b48 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fb f9e3 	bl	8001f50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f91d 	bl	8006de4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006baa:	e0fd      	b.n	8006da8 <HAL_UART_IRQHandler+0x760>
 8006bac:	40020010 	.word	0x40020010
 8006bb0:	40020028 	.word	0x40020028
 8006bb4:	40020040 	.word	0x40020040
 8006bb8:	40020058 	.word	0x40020058
 8006bbc:	40020070 	.word	0x40020070
 8006bc0:	40020088 	.word	0x40020088
 8006bc4:	400200a0 	.word	0x400200a0
 8006bc8:	400200b8 	.word	0x400200b8
 8006bcc:	40020410 	.word	0x40020410
 8006bd0:	40020428 	.word	0x40020428
 8006bd4:	40020440 	.word	0x40020440
 8006bd8:	40020458 	.word	0x40020458
 8006bdc:	40020470 	.word	0x40020470
 8006be0:	40020488 	.word	0x40020488
 8006be4:	400204a0 	.word	0x400204a0
 8006be8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 80cf 	beq.w	8006dac <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006c0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 80ca 	beq.w	8006dac <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c3c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e4      	bne.n	8006c18 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3308      	adds	r3, #8
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	e853 3f00 	ldrex	r3, [r3]
 8006c5c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c5e:	6a3a      	ldr	r2, [r7, #32]
 8006c60:	4b55      	ldr	r3, [pc, #340]	; (8006db8 <HAL_UART_IRQHandler+0x770>)
 8006c62:	4013      	ands	r3, r2
 8006c64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c72:	633a      	str	r2, [r7, #48]	; 0x30
 8006c74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e3      	bne.n	8006c4e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0310 	bic.w	r3, r3, #16
 8006cae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cbc:	61fb      	str	r3, [r7, #28]
 8006cbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	69b9      	ldr	r1, [r7, #24]
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e4      	bne.n	8006c9a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f881 	bl	8006de4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ce2:	e063      	b.n	8006dac <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00e      	beq.n	8006d0e <HAL_UART_IRQHandler+0x6c6>
 8006cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d008      	beq.n	8006d0e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 ff7e 	bl	8008c08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d0c:	e051      	b.n	8006db2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d014      	beq.n	8006d44 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d105      	bne.n	8006d32 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d008      	beq.n	8006d44 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d03a      	beq.n	8006db0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	4798      	blx	r3
    }
    return;
 8006d42:	e035      	b.n	8006db0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d009      	beq.n	8006d64 <HAL_UART_IRQHandler+0x71c>
 8006d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f001 fa0b 	bl	8008178 <UART_EndTransmit_IT>
    return;
 8006d62:	e026      	b.n	8006db2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d009      	beq.n	8006d84 <HAL_UART_IRQHandler+0x73c>
 8006d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 ff57 	bl	8008c30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d82:	e016      	b.n	8006db2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d010      	beq.n	8006db2 <HAL_UART_IRQHandler+0x76a>
 8006d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	da0c      	bge.n	8006db2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 ff3f 	bl	8008c1c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d9e:	e008      	b.n	8006db2 <HAL_UART_IRQHandler+0x76a>
      return;
 8006da0:	bf00      	nop
 8006da2:	e006      	b.n	8006db2 <HAL_UART_IRQHandler+0x76a>
    return;
 8006da4:	bf00      	nop
 8006da6:	e004      	b.n	8006db2 <HAL_UART_IRQHandler+0x76a>
      return;
 8006da8:	bf00      	nop
 8006daa:	e002      	b.n	8006db2 <HAL_UART_IRQHandler+0x76a>
      return;
 8006dac:	bf00      	nop
 8006dae:	e000      	b.n	8006db2 <HAL_UART_IRQHandler+0x76a>
    return;
 8006db0:	bf00      	nop
  }
}
 8006db2:	37e8      	adds	r7, #232	; 0xe8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	effffffe 	.word	0xeffffffe

08006dbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e00:	b092      	sub	sp, #72	; 0x48
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	431a      	orrs	r2, r3
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	4bbe      	ldr	r3, [pc, #760]	; (8007124 <UART_SetConfig+0x328>)
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	6812      	ldr	r2, [r2, #0]
 8006e32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e34:	430b      	orrs	r3, r1
 8006e36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4ab3      	ldr	r2, [pc, #716]	; (8007128 <UART_SetConfig+0x32c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d004      	beq.n	8006e68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e64:	4313      	orrs	r3, r2
 8006e66:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	4baf      	ldr	r3, [pc, #700]	; (800712c <UART_SetConfig+0x330>)
 8006e70:	4013      	ands	r3, r2
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	6812      	ldr	r2, [r2, #0]
 8006e76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e78:	430b      	orrs	r3, r1
 8006e7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e82:	f023 010f 	bic.w	r1, r3, #15
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4aa6      	ldr	r2, [pc, #664]	; (8007130 <UART_SetConfig+0x334>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d177      	bne.n	8006f8c <UART_SetConfig+0x190>
 8006e9c:	4ba5      	ldr	r3, [pc, #660]	; (8007134 <UART_SetConfig+0x338>)
 8006e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ea4:	2b28      	cmp	r3, #40	; 0x28
 8006ea6:	d86d      	bhi.n	8006f84 <UART_SetConfig+0x188>
 8006ea8:	a201      	add	r2, pc, #4	; (adr r2, 8006eb0 <UART_SetConfig+0xb4>)
 8006eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eae:	bf00      	nop
 8006eb0:	08006f55 	.word	0x08006f55
 8006eb4:	08006f85 	.word	0x08006f85
 8006eb8:	08006f85 	.word	0x08006f85
 8006ebc:	08006f85 	.word	0x08006f85
 8006ec0:	08006f85 	.word	0x08006f85
 8006ec4:	08006f85 	.word	0x08006f85
 8006ec8:	08006f85 	.word	0x08006f85
 8006ecc:	08006f85 	.word	0x08006f85
 8006ed0:	08006f5d 	.word	0x08006f5d
 8006ed4:	08006f85 	.word	0x08006f85
 8006ed8:	08006f85 	.word	0x08006f85
 8006edc:	08006f85 	.word	0x08006f85
 8006ee0:	08006f85 	.word	0x08006f85
 8006ee4:	08006f85 	.word	0x08006f85
 8006ee8:	08006f85 	.word	0x08006f85
 8006eec:	08006f85 	.word	0x08006f85
 8006ef0:	08006f65 	.word	0x08006f65
 8006ef4:	08006f85 	.word	0x08006f85
 8006ef8:	08006f85 	.word	0x08006f85
 8006efc:	08006f85 	.word	0x08006f85
 8006f00:	08006f85 	.word	0x08006f85
 8006f04:	08006f85 	.word	0x08006f85
 8006f08:	08006f85 	.word	0x08006f85
 8006f0c:	08006f85 	.word	0x08006f85
 8006f10:	08006f6d 	.word	0x08006f6d
 8006f14:	08006f85 	.word	0x08006f85
 8006f18:	08006f85 	.word	0x08006f85
 8006f1c:	08006f85 	.word	0x08006f85
 8006f20:	08006f85 	.word	0x08006f85
 8006f24:	08006f85 	.word	0x08006f85
 8006f28:	08006f85 	.word	0x08006f85
 8006f2c:	08006f85 	.word	0x08006f85
 8006f30:	08006f75 	.word	0x08006f75
 8006f34:	08006f85 	.word	0x08006f85
 8006f38:	08006f85 	.word	0x08006f85
 8006f3c:	08006f85 	.word	0x08006f85
 8006f40:	08006f85 	.word	0x08006f85
 8006f44:	08006f85 	.word	0x08006f85
 8006f48:	08006f85 	.word	0x08006f85
 8006f4c:	08006f85 	.word	0x08006f85
 8006f50:	08006f7d 	.word	0x08006f7d
 8006f54:	2301      	movs	r3, #1
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f5a:	e326      	b.n	80075aa <UART_SetConfig+0x7ae>
 8006f5c:	2304      	movs	r3, #4
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f62:	e322      	b.n	80075aa <UART_SetConfig+0x7ae>
 8006f64:	2308      	movs	r3, #8
 8006f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f6a:	e31e      	b.n	80075aa <UART_SetConfig+0x7ae>
 8006f6c:	2310      	movs	r3, #16
 8006f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f72:	e31a      	b.n	80075aa <UART_SetConfig+0x7ae>
 8006f74:	2320      	movs	r3, #32
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7a:	e316      	b.n	80075aa <UART_SetConfig+0x7ae>
 8006f7c:	2340      	movs	r3, #64	; 0x40
 8006f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f82:	e312      	b.n	80075aa <UART_SetConfig+0x7ae>
 8006f84:	2380      	movs	r3, #128	; 0x80
 8006f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8a:	e30e      	b.n	80075aa <UART_SetConfig+0x7ae>
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a69      	ldr	r2, [pc, #420]	; (8007138 <UART_SetConfig+0x33c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d130      	bne.n	8006ff8 <UART_SetConfig+0x1fc>
 8006f96:	4b67      	ldr	r3, [pc, #412]	; (8007134 <UART_SetConfig+0x338>)
 8006f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	2b05      	cmp	r3, #5
 8006fa0:	d826      	bhi.n	8006ff0 <UART_SetConfig+0x1f4>
 8006fa2:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <UART_SetConfig+0x1ac>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08006fc1 	.word	0x08006fc1
 8006fac:	08006fc9 	.word	0x08006fc9
 8006fb0:	08006fd1 	.word	0x08006fd1
 8006fb4:	08006fd9 	.word	0x08006fd9
 8006fb8:	08006fe1 	.word	0x08006fe1
 8006fbc:	08006fe9 	.word	0x08006fe9
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc6:	e2f0      	b.n	80075aa <UART_SetConfig+0x7ae>
 8006fc8:	2304      	movs	r3, #4
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fce:	e2ec      	b.n	80075aa <UART_SetConfig+0x7ae>
 8006fd0:	2308      	movs	r3, #8
 8006fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd6:	e2e8      	b.n	80075aa <UART_SetConfig+0x7ae>
 8006fd8:	2310      	movs	r3, #16
 8006fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fde:	e2e4      	b.n	80075aa <UART_SetConfig+0x7ae>
 8006fe0:	2320      	movs	r3, #32
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe6:	e2e0      	b.n	80075aa <UART_SetConfig+0x7ae>
 8006fe8:	2340      	movs	r3, #64	; 0x40
 8006fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fee:	e2dc      	b.n	80075aa <UART_SetConfig+0x7ae>
 8006ff0:	2380      	movs	r3, #128	; 0x80
 8006ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff6:	e2d8      	b.n	80075aa <UART_SetConfig+0x7ae>
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a4f      	ldr	r2, [pc, #316]	; (800713c <UART_SetConfig+0x340>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d130      	bne.n	8007064 <UART_SetConfig+0x268>
 8007002:	4b4c      	ldr	r3, [pc, #304]	; (8007134 <UART_SetConfig+0x338>)
 8007004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007006:	f003 0307 	and.w	r3, r3, #7
 800700a:	2b05      	cmp	r3, #5
 800700c:	d826      	bhi.n	800705c <UART_SetConfig+0x260>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <UART_SetConfig+0x218>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	0800702d 	.word	0x0800702d
 8007018:	08007035 	.word	0x08007035
 800701c:	0800703d 	.word	0x0800703d
 8007020:	08007045 	.word	0x08007045
 8007024:	0800704d 	.word	0x0800704d
 8007028:	08007055 	.word	0x08007055
 800702c:	2300      	movs	r3, #0
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007032:	e2ba      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007034:	2304      	movs	r3, #4
 8007036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703a:	e2b6      	b.n	80075aa <UART_SetConfig+0x7ae>
 800703c:	2308      	movs	r3, #8
 800703e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007042:	e2b2      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007044:	2310      	movs	r3, #16
 8007046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800704a:	e2ae      	b.n	80075aa <UART_SetConfig+0x7ae>
 800704c:	2320      	movs	r3, #32
 800704e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007052:	e2aa      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007054:	2340      	movs	r3, #64	; 0x40
 8007056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705a:	e2a6      	b.n	80075aa <UART_SetConfig+0x7ae>
 800705c:	2380      	movs	r3, #128	; 0x80
 800705e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007062:	e2a2      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a35      	ldr	r2, [pc, #212]	; (8007140 <UART_SetConfig+0x344>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d130      	bne.n	80070d0 <UART_SetConfig+0x2d4>
 800706e:	4b31      	ldr	r3, [pc, #196]	; (8007134 <UART_SetConfig+0x338>)
 8007070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	2b05      	cmp	r3, #5
 8007078:	d826      	bhi.n	80070c8 <UART_SetConfig+0x2cc>
 800707a:	a201      	add	r2, pc, #4	; (adr r2, 8007080 <UART_SetConfig+0x284>)
 800707c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007080:	08007099 	.word	0x08007099
 8007084:	080070a1 	.word	0x080070a1
 8007088:	080070a9 	.word	0x080070a9
 800708c:	080070b1 	.word	0x080070b1
 8007090:	080070b9 	.word	0x080070b9
 8007094:	080070c1 	.word	0x080070c1
 8007098:	2300      	movs	r3, #0
 800709a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709e:	e284      	b.n	80075aa <UART_SetConfig+0x7ae>
 80070a0:	2304      	movs	r3, #4
 80070a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a6:	e280      	b.n	80075aa <UART_SetConfig+0x7ae>
 80070a8:	2308      	movs	r3, #8
 80070aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ae:	e27c      	b.n	80075aa <UART_SetConfig+0x7ae>
 80070b0:	2310      	movs	r3, #16
 80070b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070b6:	e278      	b.n	80075aa <UART_SetConfig+0x7ae>
 80070b8:	2320      	movs	r3, #32
 80070ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070be:	e274      	b.n	80075aa <UART_SetConfig+0x7ae>
 80070c0:	2340      	movs	r3, #64	; 0x40
 80070c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070c6:	e270      	b.n	80075aa <UART_SetConfig+0x7ae>
 80070c8:	2380      	movs	r3, #128	; 0x80
 80070ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ce:	e26c      	b.n	80075aa <UART_SetConfig+0x7ae>
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1b      	ldr	r2, [pc, #108]	; (8007144 <UART_SetConfig+0x348>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d142      	bne.n	8007160 <UART_SetConfig+0x364>
 80070da:	4b16      	ldr	r3, [pc, #88]	; (8007134 <UART_SetConfig+0x338>)
 80070dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070de:	f003 0307 	and.w	r3, r3, #7
 80070e2:	2b05      	cmp	r3, #5
 80070e4:	d838      	bhi.n	8007158 <UART_SetConfig+0x35c>
 80070e6:	a201      	add	r2, pc, #4	; (adr r2, 80070ec <UART_SetConfig+0x2f0>)
 80070e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ec:	08007105 	.word	0x08007105
 80070f0:	0800710d 	.word	0x0800710d
 80070f4:	08007115 	.word	0x08007115
 80070f8:	0800711d 	.word	0x0800711d
 80070fc:	08007149 	.word	0x08007149
 8007100:	08007151 	.word	0x08007151
 8007104:	2300      	movs	r3, #0
 8007106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800710a:	e24e      	b.n	80075aa <UART_SetConfig+0x7ae>
 800710c:	2304      	movs	r3, #4
 800710e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007112:	e24a      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007114:	2308      	movs	r3, #8
 8007116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800711a:	e246      	b.n	80075aa <UART_SetConfig+0x7ae>
 800711c:	2310      	movs	r3, #16
 800711e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007122:	e242      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007124:	cfff69f3 	.word	0xcfff69f3
 8007128:	58000c00 	.word	0x58000c00
 800712c:	11fff4ff 	.word	0x11fff4ff
 8007130:	40011000 	.word	0x40011000
 8007134:	58024400 	.word	0x58024400
 8007138:	40004400 	.word	0x40004400
 800713c:	40004800 	.word	0x40004800
 8007140:	40004c00 	.word	0x40004c00
 8007144:	40005000 	.word	0x40005000
 8007148:	2320      	movs	r3, #32
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714e:	e22c      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007150:	2340      	movs	r3, #64	; 0x40
 8007152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007156:	e228      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007158:	2380      	movs	r3, #128	; 0x80
 800715a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715e:	e224      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4ab1      	ldr	r2, [pc, #708]	; (800742c <UART_SetConfig+0x630>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d176      	bne.n	8007258 <UART_SetConfig+0x45c>
 800716a:	4bb1      	ldr	r3, [pc, #708]	; (8007430 <UART_SetConfig+0x634>)
 800716c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007172:	2b28      	cmp	r3, #40	; 0x28
 8007174:	d86c      	bhi.n	8007250 <UART_SetConfig+0x454>
 8007176:	a201      	add	r2, pc, #4	; (adr r2, 800717c <UART_SetConfig+0x380>)
 8007178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717c:	08007221 	.word	0x08007221
 8007180:	08007251 	.word	0x08007251
 8007184:	08007251 	.word	0x08007251
 8007188:	08007251 	.word	0x08007251
 800718c:	08007251 	.word	0x08007251
 8007190:	08007251 	.word	0x08007251
 8007194:	08007251 	.word	0x08007251
 8007198:	08007251 	.word	0x08007251
 800719c:	08007229 	.word	0x08007229
 80071a0:	08007251 	.word	0x08007251
 80071a4:	08007251 	.word	0x08007251
 80071a8:	08007251 	.word	0x08007251
 80071ac:	08007251 	.word	0x08007251
 80071b0:	08007251 	.word	0x08007251
 80071b4:	08007251 	.word	0x08007251
 80071b8:	08007251 	.word	0x08007251
 80071bc:	08007231 	.word	0x08007231
 80071c0:	08007251 	.word	0x08007251
 80071c4:	08007251 	.word	0x08007251
 80071c8:	08007251 	.word	0x08007251
 80071cc:	08007251 	.word	0x08007251
 80071d0:	08007251 	.word	0x08007251
 80071d4:	08007251 	.word	0x08007251
 80071d8:	08007251 	.word	0x08007251
 80071dc:	08007239 	.word	0x08007239
 80071e0:	08007251 	.word	0x08007251
 80071e4:	08007251 	.word	0x08007251
 80071e8:	08007251 	.word	0x08007251
 80071ec:	08007251 	.word	0x08007251
 80071f0:	08007251 	.word	0x08007251
 80071f4:	08007251 	.word	0x08007251
 80071f8:	08007251 	.word	0x08007251
 80071fc:	08007241 	.word	0x08007241
 8007200:	08007251 	.word	0x08007251
 8007204:	08007251 	.word	0x08007251
 8007208:	08007251 	.word	0x08007251
 800720c:	08007251 	.word	0x08007251
 8007210:	08007251 	.word	0x08007251
 8007214:	08007251 	.word	0x08007251
 8007218:	08007251 	.word	0x08007251
 800721c:	08007249 	.word	0x08007249
 8007220:	2301      	movs	r3, #1
 8007222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007226:	e1c0      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007228:	2304      	movs	r3, #4
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722e:	e1bc      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007230:	2308      	movs	r3, #8
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007236:	e1b8      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007238:	2310      	movs	r3, #16
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723e:	e1b4      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007240:	2320      	movs	r3, #32
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007246:	e1b0      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007248:	2340      	movs	r3, #64	; 0x40
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724e:	e1ac      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007250:	2380      	movs	r3, #128	; 0x80
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007256:	e1a8      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a75      	ldr	r2, [pc, #468]	; (8007434 <UART_SetConfig+0x638>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d130      	bne.n	80072c4 <UART_SetConfig+0x4c8>
 8007262:	4b73      	ldr	r3, [pc, #460]	; (8007430 <UART_SetConfig+0x634>)
 8007264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	2b05      	cmp	r3, #5
 800726c:	d826      	bhi.n	80072bc <UART_SetConfig+0x4c0>
 800726e:	a201      	add	r2, pc, #4	; (adr r2, 8007274 <UART_SetConfig+0x478>)
 8007270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007274:	0800728d 	.word	0x0800728d
 8007278:	08007295 	.word	0x08007295
 800727c:	0800729d 	.word	0x0800729d
 8007280:	080072a5 	.word	0x080072a5
 8007284:	080072ad 	.word	0x080072ad
 8007288:	080072b5 	.word	0x080072b5
 800728c:	2300      	movs	r3, #0
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007292:	e18a      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007294:	2304      	movs	r3, #4
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800729a:	e186      	b.n	80075aa <UART_SetConfig+0x7ae>
 800729c:	2308      	movs	r3, #8
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072a2:	e182      	b.n	80075aa <UART_SetConfig+0x7ae>
 80072a4:	2310      	movs	r3, #16
 80072a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072aa:	e17e      	b.n	80075aa <UART_SetConfig+0x7ae>
 80072ac:	2320      	movs	r3, #32
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b2:	e17a      	b.n	80075aa <UART_SetConfig+0x7ae>
 80072b4:	2340      	movs	r3, #64	; 0x40
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ba:	e176      	b.n	80075aa <UART_SetConfig+0x7ae>
 80072bc:	2380      	movs	r3, #128	; 0x80
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c2:	e172      	b.n	80075aa <UART_SetConfig+0x7ae>
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a5b      	ldr	r2, [pc, #364]	; (8007438 <UART_SetConfig+0x63c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d130      	bne.n	8007330 <UART_SetConfig+0x534>
 80072ce:	4b58      	ldr	r3, [pc, #352]	; (8007430 <UART_SetConfig+0x634>)
 80072d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d2:	f003 0307 	and.w	r3, r3, #7
 80072d6:	2b05      	cmp	r3, #5
 80072d8:	d826      	bhi.n	8007328 <UART_SetConfig+0x52c>
 80072da:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <UART_SetConfig+0x4e4>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	080072f9 	.word	0x080072f9
 80072e4:	08007301 	.word	0x08007301
 80072e8:	08007309 	.word	0x08007309
 80072ec:	08007311 	.word	0x08007311
 80072f0:	08007319 	.word	0x08007319
 80072f4:	08007321 	.word	0x08007321
 80072f8:	2300      	movs	r3, #0
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072fe:	e154      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007300:	2304      	movs	r3, #4
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007306:	e150      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007308:	2308      	movs	r3, #8
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730e:	e14c      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007310:	2310      	movs	r3, #16
 8007312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007316:	e148      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007318:	2320      	movs	r3, #32
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731e:	e144      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007320:	2340      	movs	r3, #64	; 0x40
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007326:	e140      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007328:	2380      	movs	r3, #128	; 0x80
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800732e:	e13c      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a41      	ldr	r2, [pc, #260]	; (800743c <UART_SetConfig+0x640>)
 8007336:	4293      	cmp	r3, r2
 8007338:	f040 8082 	bne.w	8007440 <UART_SetConfig+0x644>
 800733c:	4b3c      	ldr	r3, [pc, #240]	; (8007430 <UART_SetConfig+0x634>)
 800733e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007340:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007344:	2b28      	cmp	r3, #40	; 0x28
 8007346:	d86d      	bhi.n	8007424 <UART_SetConfig+0x628>
 8007348:	a201      	add	r2, pc, #4	; (adr r2, 8007350 <UART_SetConfig+0x554>)
 800734a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734e:	bf00      	nop
 8007350:	080073f5 	.word	0x080073f5
 8007354:	08007425 	.word	0x08007425
 8007358:	08007425 	.word	0x08007425
 800735c:	08007425 	.word	0x08007425
 8007360:	08007425 	.word	0x08007425
 8007364:	08007425 	.word	0x08007425
 8007368:	08007425 	.word	0x08007425
 800736c:	08007425 	.word	0x08007425
 8007370:	080073fd 	.word	0x080073fd
 8007374:	08007425 	.word	0x08007425
 8007378:	08007425 	.word	0x08007425
 800737c:	08007425 	.word	0x08007425
 8007380:	08007425 	.word	0x08007425
 8007384:	08007425 	.word	0x08007425
 8007388:	08007425 	.word	0x08007425
 800738c:	08007425 	.word	0x08007425
 8007390:	08007405 	.word	0x08007405
 8007394:	08007425 	.word	0x08007425
 8007398:	08007425 	.word	0x08007425
 800739c:	08007425 	.word	0x08007425
 80073a0:	08007425 	.word	0x08007425
 80073a4:	08007425 	.word	0x08007425
 80073a8:	08007425 	.word	0x08007425
 80073ac:	08007425 	.word	0x08007425
 80073b0:	0800740d 	.word	0x0800740d
 80073b4:	08007425 	.word	0x08007425
 80073b8:	08007425 	.word	0x08007425
 80073bc:	08007425 	.word	0x08007425
 80073c0:	08007425 	.word	0x08007425
 80073c4:	08007425 	.word	0x08007425
 80073c8:	08007425 	.word	0x08007425
 80073cc:	08007425 	.word	0x08007425
 80073d0:	08007415 	.word	0x08007415
 80073d4:	08007425 	.word	0x08007425
 80073d8:	08007425 	.word	0x08007425
 80073dc:	08007425 	.word	0x08007425
 80073e0:	08007425 	.word	0x08007425
 80073e4:	08007425 	.word	0x08007425
 80073e8:	08007425 	.word	0x08007425
 80073ec:	08007425 	.word	0x08007425
 80073f0:	0800741d 	.word	0x0800741d
 80073f4:	2301      	movs	r3, #1
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073fa:	e0d6      	b.n	80075aa <UART_SetConfig+0x7ae>
 80073fc:	2304      	movs	r3, #4
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007402:	e0d2      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007404:	2308      	movs	r3, #8
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740a:	e0ce      	b.n	80075aa <UART_SetConfig+0x7ae>
 800740c:	2310      	movs	r3, #16
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007412:	e0ca      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007414:	2320      	movs	r3, #32
 8007416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741a:	e0c6      	b.n	80075aa <UART_SetConfig+0x7ae>
 800741c:	2340      	movs	r3, #64	; 0x40
 800741e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007422:	e0c2      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007424:	2380      	movs	r3, #128	; 0x80
 8007426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800742a:	e0be      	b.n	80075aa <UART_SetConfig+0x7ae>
 800742c:	40011400 	.word	0x40011400
 8007430:	58024400 	.word	0x58024400
 8007434:	40007800 	.word	0x40007800
 8007438:	40007c00 	.word	0x40007c00
 800743c:	40011800 	.word	0x40011800
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4aad      	ldr	r2, [pc, #692]	; (80076fc <UART_SetConfig+0x900>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d176      	bne.n	8007538 <UART_SetConfig+0x73c>
 800744a:	4bad      	ldr	r3, [pc, #692]	; (8007700 <UART_SetConfig+0x904>)
 800744c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007452:	2b28      	cmp	r3, #40	; 0x28
 8007454:	d86c      	bhi.n	8007530 <UART_SetConfig+0x734>
 8007456:	a201      	add	r2, pc, #4	; (adr r2, 800745c <UART_SetConfig+0x660>)
 8007458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745c:	08007501 	.word	0x08007501
 8007460:	08007531 	.word	0x08007531
 8007464:	08007531 	.word	0x08007531
 8007468:	08007531 	.word	0x08007531
 800746c:	08007531 	.word	0x08007531
 8007470:	08007531 	.word	0x08007531
 8007474:	08007531 	.word	0x08007531
 8007478:	08007531 	.word	0x08007531
 800747c:	08007509 	.word	0x08007509
 8007480:	08007531 	.word	0x08007531
 8007484:	08007531 	.word	0x08007531
 8007488:	08007531 	.word	0x08007531
 800748c:	08007531 	.word	0x08007531
 8007490:	08007531 	.word	0x08007531
 8007494:	08007531 	.word	0x08007531
 8007498:	08007531 	.word	0x08007531
 800749c:	08007511 	.word	0x08007511
 80074a0:	08007531 	.word	0x08007531
 80074a4:	08007531 	.word	0x08007531
 80074a8:	08007531 	.word	0x08007531
 80074ac:	08007531 	.word	0x08007531
 80074b0:	08007531 	.word	0x08007531
 80074b4:	08007531 	.word	0x08007531
 80074b8:	08007531 	.word	0x08007531
 80074bc:	08007519 	.word	0x08007519
 80074c0:	08007531 	.word	0x08007531
 80074c4:	08007531 	.word	0x08007531
 80074c8:	08007531 	.word	0x08007531
 80074cc:	08007531 	.word	0x08007531
 80074d0:	08007531 	.word	0x08007531
 80074d4:	08007531 	.word	0x08007531
 80074d8:	08007531 	.word	0x08007531
 80074dc:	08007521 	.word	0x08007521
 80074e0:	08007531 	.word	0x08007531
 80074e4:	08007531 	.word	0x08007531
 80074e8:	08007531 	.word	0x08007531
 80074ec:	08007531 	.word	0x08007531
 80074f0:	08007531 	.word	0x08007531
 80074f4:	08007531 	.word	0x08007531
 80074f8:	08007531 	.word	0x08007531
 80074fc:	08007529 	.word	0x08007529
 8007500:	2301      	movs	r3, #1
 8007502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007506:	e050      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007508:	2304      	movs	r3, #4
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750e:	e04c      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007510:	2308      	movs	r3, #8
 8007512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007516:	e048      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007518:	2310      	movs	r3, #16
 800751a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751e:	e044      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007520:	2320      	movs	r3, #32
 8007522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007526:	e040      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007528:	2340      	movs	r3, #64	; 0x40
 800752a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752e:	e03c      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007530:	2380      	movs	r3, #128	; 0x80
 8007532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007536:	e038      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a71      	ldr	r2, [pc, #452]	; (8007704 <UART_SetConfig+0x908>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d130      	bne.n	80075a4 <UART_SetConfig+0x7a8>
 8007542:	4b6f      	ldr	r3, [pc, #444]	; (8007700 <UART_SetConfig+0x904>)
 8007544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007546:	f003 0307 	and.w	r3, r3, #7
 800754a:	2b05      	cmp	r3, #5
 800754c:	d826      	bhi.n	800759c <UART_SetConfig+0x7a0>
 800754e:	a201      	add	r2, pc, #4	; (adr r2, 8007554 <UART_SetConfig+0x758>)
 8007550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007554:	0800756d 	.word	0x0800756d
 8007558:	08007575 	.word	0x08007575
 800755c:	0800757d 	.word	0x0800757d
 8007560:	08007585 	.word	0x08007585
 8007564:	0800758d 	.word	0x0800758d
 8007568:	08007595 	.word	0x08007595
 800756c:	2302      	movs	r3, #2
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007572:	e01a      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007574:	2304      	movs	r3, #4
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757a:	e016      	b.n	80075aa <UART_SetConfig+0x7ae>
 800757c:	2308      	movs	r3, #8
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007582:	e012      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007584:	2310      	movs	r3, #16
 8007586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800758a:	e00e      	b.n	80075aa <UART_SetConfig+0x7ae>
 800758c:	2320      	movs	r3, #32
 800758e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007592:	e00a      	b.n	80075aa <UART_SetConfig+0x7ae>
 8007594:	2340      	movs	r3, #64	; 0x40
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800759a:	e006      	b.n	80075aa <UART_SetConfig+0x7ae>
 800759c:	2380      	movs	r3, #128	; 0x80
 800759e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075a2:	e002      	b.n	80075aa <UART_SetConfig+0x7ae>
 80075a4:	2380      	movs	r3, #128	; 0x80
 80075a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a55      	ldr	r2, [pc, #340]	; (8007704 <UART_SetConfig+0x908>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	f040 80f8 	bne.w	80077a6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80075ba:	2b20      	cmp	r3, #32
 80075bc:	dc46      	bgt.n	800764c <UART_SetConfig+0x850>
 80075be:	2b02      	cmp	r3, #2
 80075c0:	db75      	blt.n	80076ae <UART_SetConfig+0x8b2>
 80075c2:	3b02      	subs	r3, #2
 80075c4:	2b1e      	cmp	r3, #30
 80075c6:	d872      	bhi.n	80076ae <UART_SetConfig+0x8b2>
 80075c8:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <UART_SetConfig+0x7d4>)
 80075ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ce:	bf00      	nop
 80075d0:	08007653 	.word	0x08007653
 80075d4:	080076af 	.word	0x080076af
 80075d8:	0800765b 	.word	0x0800765b
 80075dc:	080076af 	.word	0x080076af
 80075e0:	080076af 	.word	0x080076af
 80075e4:	080076af 	.word	0x080076af
 80075e8:	0800766b 	.word	0x0800766b
 80075ec:	080076af 	.word	0x080076af
 80075f0:	080076af 	.word	0x080076af
 80075f4:	080076af 	.word	0x080076af
 80075f8:	080076af 	.word	0x080076af
 80075fc:	080076af 	.word	0x080076af
 8007600:	080076af 	.word	0x080076af
 8007604:	080076af 	.word	0x080076af
 8007608:	0800767b 	.word	0x0800767b
 800760c:	080076af 	.word	0x080076af
 8007610:	080076af 	.word	0x080076af
 8007614:	080076af 	.word	0x080076af
 8007618:	080076af 	.word	0x080076af
 800761c:	080076af 	.word	0x080076af
 8007620:	080076af 	.word	0x080076af
 8007624:	080076af 	.word	0x080076af
 8007628:	080076af 	.word	0x080076af
 800762c:	080076af 	.word	0x080076af
 8007630:	080076af 	.word	0x080076af
 8007634:	080076af 	.word	0x080076af
 8007638:	080076af 	.word	0x080076af
 800763c:	080076af 	.word	0x080076af
 8007640:	080076af 	.word	0x080076af
 8007644:	080076af 	.word	0x080076af
 8007648:	080076a1 	.word	0x080076a1
 800764c:	2b40      	cmp	r3, #64	; 0x40
 800764e:	d02a      	beq.n	80076a6 <UART_SetConfig+0x8aa>
 8007650:	e02d      	b.n	80076ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007652:	f7fd fd81 	bl	8005158 <HAL_RCCEx_GetD3PCLK1Freq>
 8007656:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007658:	e02f      	b.n	80076ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800765a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800765e:	4618      	mov	r0, r3
 8007660:	f7fd fd90 	bl	8005184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007668:	e027      	b.n	80076ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800766a:	f107 0318 	add.w	r3, r7, #24
 800766e:	4618      	mov	r0, r3
 8007670:	f7fd fedc 	bl	800542c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007678:	e01f      	b.n	80076ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800767a:	4b21      	ldr	r3, [pc, #132]	; (8007700 <UART_SetConfig+0x904>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0320 	and.w	r3, r3, #32
 8007682:	2b00      	cmp	r3, #0
 8007684:	d009      	beq.n	800769a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007686:	4b1e      	ldr	r3, [pc, #120]	; (8007700 <UART_SetConfig+0x904>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	08db      	lsrs	r3, r3, #3
 800768c:	f003 0303 	and.w	r3, r3, #3
 8007690:	4a1d      	ldr	r2, [pc, #116]	; (8007708 <UART_SetConfig+0x90c>)
 8007692:	fa22 f303 	lsr.w	r3, r2, r3
 8007696:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007698:	e00f      	b.n	80076ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800769a:	4b1b      	ldr	r3, [pc, #108]	; (8007708 <UART_SetConfig+0x90c>)
 800769c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800769e:	e00c      	b.n	80076ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80076a0:	4b1a      	ldr	r3, [pc, #104]	; (800770c <UART_SetConfig+0x910>)
 80076a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076a4:	e009      	b.n	80076ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076ac:	e005      	b.n	80076ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80076b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 81ee 	beq.w	8007a9e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	4a12      	ldr	r2, [pc, #72]	; (8007710 <UART_SetConfig+0x914>)
 80076c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076cc:	461a      	mov	r2, r3
 80076ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80076d4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	4413      	add	r3, r2
 80076e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d305      	bcc.n	80076f2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d910      	bls.n	8007714 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80076f8:	e1d1      	b.n	8007a9e <UART_SetConfig+0xca2>
 80076fa:	bf00      	nop
 80076fc:	40011c00 	.word	0x40011c00
 8007700:	58024400 	.word	0x58024400
 8007704:	58000c00 	.word	0x58000c00
 8007708:	03d09000 	.word	0x03d09000
 800770c:	003d0900 	.word	0x003d0900
 8007710:	080097c0 	.word	0x080097c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007716:	2200      	movs	r2, #0
 8007718:	60bb      	str	r3, [r7, #8]
 800771a:	60fa      	str	r2, [r7, #12]
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	4ac0      	ldr	r2, [pc, #768]	; (8007a24 <UART_SetConfig+0xc28>)
 8007722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007726:	b29b      	uxth	r3, r3
 8007728:	2200      	movs	r2, #0
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	607a      	str	r2, [r7, #4]
 800772e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007732:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007736:	f7f8 fe33 	bl	80003a0 <__aeabi_uldivmod>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4610      	mov	r0, r2
 8007740:	4619      	mov	r1, r3
 8007742:	f04f 0200 	mov.w	r2, #0
 8007746:	f04f 0300 	mov.w	r3, #0
 800774a:	020b      	lsls	r3, r1, #8
 800774c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007750:	0202      	lsls	r2, r0, #8
 8007752:	6979      	ldr	r1, [r7, #20]
 8007754:	6849      	ldr	r1, [r1, #4]
 8007756:	0849      	lsrs	r1, r1, #1
 8007758:	2000      	movs	r0, #0
 800775a:	460c      	mov	r4, r1
 800775c:	4605      	mov	r5, r0
 800775e:	eb12 0804 	adds.w	r8, r2, r4
 8007762:	eb43 0905 	adc.w	r9, r3, r5
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	469a      	mov	sl, r3
 800776e:	4693      	mov	fp, r2
 8007770:	4652      	mov	r2, sl
 8007772:	465b      	mov	r3, fp
 8007774:	4640      	mov	r0, r8
 8007776:	4649      	mov	r1, r9
 8007778:	f7f8 fe12 	bl	80003a0 <__aeabi_uldivmod>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	4613      	mov	r3, r2
 8007782:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800778a:	d308      	bcc.n	800779e <UART_SetConfig+0x9a2>
 800778c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007792:	d204      	bcs.n	800779e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800779a:	60da      	str	r2, [r3, #12]
 800779c:	e17f      	b.n	8007a9e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80077a4:	e17b      	b.n	8007a9e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077ae:	f040 80bd 	bne.w	800792c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80077b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	dc48      	bgt.n	800784c <UART_SetConfig+0xa50>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	db7b      	blt.n	80078b6 <UART_SetConfig+0xaba>
 80077be:	2b20      	cmp	r3, #32
 80077c0:	d879      	bhi.n	80078b6 <UART_SetConfig+0xaba>
 80077c2:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <UART_SetConfig+0x9cc>)
 80077c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c8:	08007853 	.word	0x08007853
 80077cc:	0800785b 	.word	0x0800785b
 80077d0:	080078b7 	.word	0x080078b7
 80077d4:	080078b7 	.word	0x080078b7
 80077d8:	08007863 	.word	0x08007863
 80077dc:	080078b7 	.word	0x080078b7
 80077e0:	080078b7 	.word	0x080078b7
 80077e4:	080078b7 	.word	0x080078b7
 80077e8:	08007873 	.word	0x08007873
 80077ec:	080078b7 	.word	0x080078b7
 80077f0:	080078b7 	.word	0x080078b7
 80077f4:	080078b7 	.word	0x080078b7
 80077f8:	080078b7 	.word	0x080078b7
 80077fc:	080078b7 	.word	0x080078b7
 8007800:	080078b7 	.word	0x080078b7
 8007804:	080078b7 	.word	0x080078b7
 8007808:	08007883 	.word	0x08007883
 800780c:	080078b7 	.word	0x080078b7
 8007810:	080078b7 	.word	0x080078b7
 8007814:	080078b7 	.word	0x080078b7
 8007818:	080078b7 	.word	0x080078b7
 800781c:	080078b7 	.word	0x080078b7
 8007820:	080078b7 	.word	0x080078b7
 8007824:	080078b7 	.word	0x080078b7
 8007828:	080078b7 	.word	0x080078b7
 800782c:	080078b7 	.word	0x080078b7
 8007830:	080078b7 	.word	0x080078b7
 8007834:	080078b7 	.word	0x080078b7
 8007838:	080078b7 	.word	0x080078b7
 800783c:	080078b7 	.word	0x080078b7
 8007840:	080078b7 	.word	0x080078b7
 8007844:	080078b7 	.word	0x080078b7
 8007848:	080078a9 	.word	0x080078a9
 800784c:	2b40      	cmp	r3, #64	; 0x40
 800784e:	d02e      	beq.n	80078ae <UART_SetConfig+0xab2>
 8007850:	e031      	b.n	80078b6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007852:	f7fc fa97 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 8007856:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007858:	e033      	b.n	80078c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800785a:	f7fc faa9 	bl	8003db0 <HAL_RCC_GetPCLK2Freq>
 800785e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007860:	e02f      	b.n	80078c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007866:	4618      	mov	r0, r3
 8007868:	f7fd fc8c 	bl	8005184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007870:	e027      	b.n	80078c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007872:	f107 0318 	add.w	r3, r7, #24
 8007876:	4618      	mov	r0, r3
 8007878:	f7fd fdd8 	bl	800542c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007880:	e01f      	b.n	80078c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007882:	4b69      	ldr	r3, [pc, #420]	; (8007a28 <UART_SetConfig+0xc2c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b00      	cmp	r3, #0
 800788c:	d009      	beq.n	80078a2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800788e:	4b66      	ldr	r3, [pc, #408]	; (8007a28 <UART_SetConfig+0xc2c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	08db      	lsrs	r3, r3, #3
 8007894:	f003 0303 	and.w	r3, r3, #3
 8007898:	4a64      	ldr	r2, [pc, #400]	; (8007a2c <UART_SetConfig+0xc30>)
 800789a:	fa22 f303 	lsr.w	r3, r2, r3
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078a0:	e00f      	b.n	80078c2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80078a2:	4b62      	ldr	r3, [pc, #392]	; (8007a2c <UART_SetConfig+0xc30>)
 80078a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078a6:	e00c      	b.n	80078c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078a8:	4b61      	ldr	r3, [pc, #388]	; (8007a30 <UART_SetConfig+0xc34>)
 80078aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078ac:	e009      	b.n	80078c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078b4:	e005      	b.n	80078c2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80078c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 80ea 	beq.w	8007a9e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ce:	4a55      	ldr	r2, [pc, #340]	; (8007a24 <UART_SetConfig+0xc28>)
 80078d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078d4:	461a      	mov	r2, r3
 80078d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80078dc:	005a      	lsls	r2, r3, #1
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	085b      	lsrs	r3, r3, #1
 80078e4:	441a      	add	r2, r3
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	2b0f      	cmp	r3, #15
 80078f4:	d916      	bls.n	8007924 <UART_SetConfig+0xb28>
 80078f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078fc:	d212      	bcs.n	8007924 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007900:	b29b      	uxth	r3, r3
 8007902:	f023 030f 	bic.w	r3, r3, #15
 8007906:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790a:	085b      	lsrs	r3, r3, #1
 800790c:	b29b      	uxth	r3, r3
 800790e:	f003 0307 	and.w	r3, r3, #7
 8007912:	b29a      	uxth	r2, r3
 8007914:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007916:	4313      	orrs	r3, r2
 8007918:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007920:	60da      	str	r2, [r3, #12]
 8007922:	e0bc      	b.n	8007a9e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800792a:	e0b8      	b.n	8007a9e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800792c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007930:	2b20      	cmp	r3, #32
 8007932:	dc4b      	bgt.n	80079cc <UART_SetConfig+0xbd0>
 8007934:	2b00      	cmp	r3, #0
 8007936:	f2c0 8087 	blt.w	8007a48 <UART_SetConfig+0xc4c>
 800793a:	2b20      	cmp	r3, #32
 800793c:	f200 8084 	bhi.w	8007a48 <UART_SetConfig+0xc4c>
 8007940:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <UART_SetConfig+0xb4c>)
 8007942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007946:	bf00      	nop
 8007948:	080079d3 	.word	0x080079d3
 800794c:	080079db 	.word	0x080079db
 8007950:	08007a49 	.word	0x08007a49
 8007954:	08007a49 	.word	0x08007a49
 8007958:	080079e3 	.word	0x080079e3
 800795c:	08007a49 	.word	0x08007a49
 8007960:	08007a49 	.word	0x08007a49
 8007964:	08007a49 	.word	0x08007a49
 8007968:	080079f3 	.word	0x080079f3
 800796c:	08007a49 	.word	0x08007a49
 8007970:	08007a49 	.word	0x08007a49
 8007974:	08007a49 	.word	0x08007a49
 8007978:	08007a49 	.word	0x08007a49
 800797c:	08007a49 	.word	0x08007a49
 8007980:	08007a49 	.word	0x08007a49
 8007984:	08007a49 	.word	0x08007a49
 8007988:	08007a03 	.word	0x08007a03
 800798c:	08007a49 	.word	0x08007a49
 8007990:	08007a49 	.word	0x08007a49
 8007994:	08007a49 	.word	0x08007a49
 8007998:	08007a49 	.word	0x08007a49
 800799c:	08007a49 	.word	0x08007a49
 80079a0:	08007a49 	.word	0x08007a49
 80079a4:	08007a49 	.word	0x08007a49
 80079a8:	08007a49 	.word	0x08007a49
 80079ac:	08007a49 	.word	0x08007a49
 80079b0:	08007a49 	.word	0x08007a49
 80079b4:	08007a49 	.word	0x08007a49
 80079b8:	08007a49 	.word	0x08007a49
 80079bc:	08007a49 	.word	0x08007a49
 80079c0:	08007a49 	.word	0x08007a49
 80079c4:	08007a49 	.word	0x08007a49
 80079c8:	08007a3b 	.word	0x08007a3b
 80079cc:	2b40      	cmp	r3, #64	; 0x40
 80079ce:	d037      	beq.n	8007a40 <UART_SetConfig+0xc44>
 80079d0:	e03a      	b.n	8007a48 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079d2:	f7fc f9d7 	bl	8003d84 <HAL_RCC_GetPCLK1Freq>
 80079d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079d8:	e03c      	b.n	8007a54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079da:	f7fc f9e9 	bl	8003db0 <HAL_RCC_GetPCLK2Freq>
 80079de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079e0:	e038      	b.n	8007a54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fd fbcc 	bl	8005184 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079f0:	e030      	b.n	8007a54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079f2:	f107 0318 	add.w	r3, r7, #24
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fd fd18 	bl	800542c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a00:	e028      	b.n	8007a54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a02:	4b09      	ldr	r3, [pc, #36]	; (8007a28 <UART_SetConfig+0xc2c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d012      	beq.n	8007a34 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a0e:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <UART_SetConfig+0xc2c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	08db      	lsrs	r3, r3, #3
 8007a14:	f003 0303 	and.w	r3, r3, #3
 8007a18:	4a04      	ldr	r2, [pc, #16]	; (8007a2c <UART_SetConfig+0xc30>)
 8007a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a20:	e018      	b.n	8007a54 <UART_SetConfig+0xc58>
 8007a22:	bf00      	nop
 8007a24:	080097c0 	.word	0x080097c0
 8007a28:	58024400 	.word	0x58024400
 8007a2c:	03d09000 	.word	0x03d09000
 8007a30:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007a34:	4b24      	ldr	r3, [pc, #144]	; (8007ac8 <UART_SetConfig+0xccc>)
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a38:	e00c      	b.n	8007a54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a3a:	4b24      	ldr	r3, [pc, #144]	; (8007acc <UART_SetConfig+0xcd0>)
 8007a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a3e:	e009      	b.n	8007a54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a46:	e005      	b.n	8007a54 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007a52:	bf00      	nop
    }

    if (pclk != 0U)
 8007a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d021      	beq.n	8007a9e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5e:	4a1c      	ldr	r2, [pc, #112]	; (8007ad0 <UART_SetConfig+0xcd4>)
 8007a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a64:	461a      	mov	r2, r3
 8007a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a68:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	085b      	lsrs	r3, r3, #1
 8007a72:	441a      	add	r2, r3
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a7c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a80:	2b0f      	cmp	r3, #15
 8007a82:	d909      	bls.n	8007a98 <UART_SetConfig+0xc9c>
 8007a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a8a:	d205      	bcs.n	8007a98 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	60da      	str	r2, [r3, #12]
 8007a96:	e002      	b.n	8007a9e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007aba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3748      	adds	r7, #72	; 0x48
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ac8:	03d09000 	.word	0x03d09000
 8007acc:	003d0900 	.word	0x003d0900
 8007ad0:	080097c0 	.word	0x080097c0

08007ad4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00a      	beq.n	8007afe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	430a      	orrs	r2, r1
 8007b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00a      	beq.n	8007b42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b46:	f003 0308 	and.w	r3, r3, #8
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8a:	f003 0320 	and.w	r3, r3, #32
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d01a      	beq.n	8007bea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bd2:	d10a      	bne.n	8007bea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00a      	beq.n	8007c0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	605a      	str	r2, [r3, #4]
  }
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b098      	sub	sp, #96	; 0x60
 8007c1c:	af02      	add	r7, sp, #8
 8007c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c28:	f7fa f852 	bl	8001cd0 <HAL_GetTick>
 8007c2c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0308 	and.w	r3, r3, #8
 8007c38:	2b08      	cmp	r3, #8
 8007c3a:	d12f      	bne.n	8007c9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c44:	2200      	movs	r2, #0
 8007c46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f88e 	bl	8007d6c <UART_WaitOnFlagUntilTimeout>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d022      	beq.n	8007c9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c6a:	653b      	str	r3, [r7, #80]	; 0x50
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	461a      	mov	r2, r3
 8007c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c74:	647b      	str	r3, [r7, #68]	; 0x44
 8007c76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e6      	bne.n	8007c56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e063      	b.n	8007d64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0304 	and.w	r3, r3, #4
 8007ca6:	2b04      	cmp	r3, #4
 8007ca8:	d149      	bne.n	8007d3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007caa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f857 	bl	8007d6c <UART_WaitOnFlagUntilTimeout>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d03c      	beq.n	8007d3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8007ce4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e6      	bne.n	8007cc4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f023 0301 	bic.w	r3, r3, #1
 8007d0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3308      	adds	r3, #8
 8007d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d16:	61fa      	str	r2, [r7, #28]
 8007d18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1a:	69b9      	ldr	r1, [r7, #24]
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	617b      	str	r3, [r7, #20]
   return(result);
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1e5      	bne.n	8007cf6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e012      	b.n	8007d64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2220      	movs	r2, #32
 8007d42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3758      	adds	r7, #88	; 0x58
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	603b      	str	r3, [r7, #0]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d7c:	e049      	b.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d84:	d045      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d86:	f7f9 ffa3 	bl	8001cd0 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	69ba      	ldr	r2, [r7, #24]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d302      	bcc.n	8007d9c <UART_WaitOnFlagUntilTimeout+0x30>
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e048      	b.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0304 	and.w	r3, r3, #4
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d031      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	f003 0308 	and.w	r3, r3, #8
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d110      	bne.n	8007dde <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 f95b 	bl	8008080 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2208      	movs	r2, #8
 8007dce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e029      	b.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dec:	d111      	bne.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007df6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 f941 	bl	8008080 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2220      	movs	r2, #32
 8007e02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e00f      	b.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69da      	ldr	r2, [r3, #28]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	bf0c      	ite	eq
 8007e22:	2301      	moveq	r3, #1
 8007e24:	2300      	movne	r3, #0
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	461a      	mov	r2, r3
 8007e2a:	79fb      	ldrb	r3, [r7, #7]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d0a6      	beq.n	8007d7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
	...

08007e3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b0a3      	sub	sp, #140	; 0x8c
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	4613      	mov	r3, r2
 8007e48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	88fa      	ldrh	r2, [r7, #6]
 8007e54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	88fa      	ldrh	r2, [r7, #6]
 8007e5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e6e:	d10e      	bne.n	8007e8e <UART_Start_Receive_IT+0x52>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d105      	bne.n	8007e84 <UART_Start_Receive_IT+0x48>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007e7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e82:	e02d      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	22ff      	movs	r2, #255	; 0xff
 8007e88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e8c:	e028      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10d      	bne.n	8007eb2 <UART_Start_Receive_IT+0x76>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d104      	bne.n	8007ea8 <UART_Start_Receive_IT+0x6c>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	22ff      	movs	r2, #255	; 0xff
 8007ea2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ea6:	e01b      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	227f      	movs	r2, #127	; 0x7f
 8007eac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007eb0:	e016      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eba:	d10d      	bne.n	8007ed8 <UART_Start_Receive_IT+0x9c>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d104      	bne.n	8007ece <UART_Start_Receive_IT+0x92>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	227f      	movs	r2, #127	; 0x7f
 8007ec8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ecc:	e008      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	223f      	movs	r2, #63	; 0x3f
 8007ed2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ed6:	e003      	b.n	8007ee0 <UART_Start_Receive_IT+0xa4>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2222      	movs	r2, #34	; 0x22
 8007eec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3308      	adds	r3, #8
 8007ef6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007efa:	e853 3f00 	ldrex	r3, [r3]
 8007efe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007f00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f02:	f043 0301 	orr.w	r3, r3, #1
 8007f06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3308      	adds	r3, #8
 8007f10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007f14:	673a      	str	r2, [r7, #112]	; 0x70
 8007f16:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007f1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e3      	bne.n	8007ef0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f30:	d14f      	bne.n	8007fd2 <UART_Start_Receive_IT+0x196>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f38:	88fa      	ldrh	r2, [r7, #6]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d349      	bcc.n	8007fd2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f46:	d107      	bne.n	8007f58 <UART_Start_Receive_IT+0x11c>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d103      	bne.n	8007f58 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4a47      	ldr	r2, [pc, #284]	; (8008070 <UART_Start_Receive_IT+0x234>)
 8007f54:	675a      	str	r2, [r3, #116]	; 0x74
 8007f56:	e002      	b.n	8007f5e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4a46      	ldr	r2, [pc, #280]	; (8008074 <UART_Start_Receive_IT+0x238>)
 8007f5c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d01a      	beq.n	8007f9c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f8a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e4      	bne.n	8007f66 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3308      	adds	r3, #8
 8007fba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007fbc:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fbe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e5      	bne.n	8007f9c <UART_Start_Receive_IT+0x160>
 8007fd0:	e046      	b.n	8008060 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fda:	d107      	bne.n	8007fec <UART_Start_Receive_IT+0x1b0>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d103      	bne.n	8007fec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4a24      	ldr	r2, [pc, #144]	; (8008078 <UART_Start_Receive_IT+0x23c>)
 8007fe8:	675a      	str	r2, [r3, #116]	; 0x74
 8007fea:	e002      	b.n	8007ff2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4a23      	ldr	r2, [pc, #140]	; (800807c <UART_Start_Receive_IT+0x240>)
 8007ff0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d019      	beq.n	800802e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	e853 3f00 	ldrex	r3, [r3]
 8008006:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800800e:	677b      	str	r3, [r7, #116]	; 0x74
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	461a      	mov	r2, r3
 8008016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008018:	637b      	str	r3, [r7, #52]	; 0x34
 800801a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800801e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008020:	e841 2300 	strex	r3, r2, [r1]
 8008024:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e6      	bne.n	8007ffa <UART_Start_Receive_IT+0x1be>
 800802c:	e018      	b.n	8008060 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	613b      	str	r3, [r7, #16]
   return(result);
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f043 0320 	orr.w	r3, r3, #32
 8008042:	67bb      	str	r3, [r7, #120]	; 0x78
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800804c:	623b      	str	r3, [r7, #32]
 800804e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	69f9      	ldr	r1, [r7, #28]
 8008052:	6a3a      	ldr	r2, [r7, #32]
 8008054:	e841 2300 	strex	r3, r2, [r1]
 8008058:	61bb      	str	r3, [r7, #24]
   return(result);
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e6      	bne.n	800802e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	378c      	adds	r7, #140	; 0x8c
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	080088a1 	.word	0x080088a1
 8008074:	08008541 	.word	0x08008541
 8008078:	08008389 	.word	0x08008389
 800807c:	080081d1 	.word	0x080081d1

08008080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008080:	b480      	push	{r7}
 8008082:	b095      	sub	sp, #84	; 0x54
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008090:	e853 3f00 	ldrex	r3, [r3]
 8008094:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800809c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080a6:	643b      	str	r3, [r7, #64]	; 0x40
 80080a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080ae:	e841 2300 	strex	r3, r2, [r1]
 80080b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1e6      	bne.n	8008088 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3308      	adds	r3, #8
 80080c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	e853 3f00 	ldrex	r3, [r3]
 80080c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80080ca:	69fa      	ldr	r2, [r7, #28]
 80080cc:	4b1e      	ldr	r3, [pc, #120]	; (8008148 <UART_EndRxTransfer+0xc8>)
 80080ce:	4013      	ands	r3, r2
 80080d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3308      	adds	r3, #8
 80080d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080e2:	e841 2300 	strex	r3, r2, [r1]
 80080e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1e5      	bne.n	80080ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d118      	bne.n	8008128 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	e853 3f00 	ldrex	r3, [r3]
 8008102:	60bb      	str	r3, [r7, #8]
   return(result);
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f023 0310 	bic.w	r3, r3, #16
 800810a:	647b      	str	r3, [r7, #68]	; 0x44
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008114:	61bb      	str	r3, [r7, #24]
 8008116:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008118:	6979      	ldr	r1, [r7, #20]
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	e841 2300 	strex	r3, r2, [r1]
 8008120:	613b      	str	r3, [r7, #16]
   return(result);
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e6      	bne.n	80080f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2220      	movs	r2, #32
 800812c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800813c:	bf00      	nop
 800813e:	3754      	adds	r7, #84	; 0x54
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	effffffe 	.word	0xeffffffe

0800814c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008158:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f7fe fe30 	bl	8006dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b088      	sub	sp, #32
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	60bb      	str	r3, [r7, #8]
   return(result);
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008194:	61fb      	str	r3, [r7, #28]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	61bb      	str	r3, [r7, #24]
 80081a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	6979      	ldr	r1, [r7, #20]
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	e841 2300 	strex	r3, r2, [r1]
 80081aa:	613b      	str	r3, [r7, #16]
   return(result);
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1e6      	bne.n	8008180 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2220      	movs	r2, #32
 80081b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7fe fdfb 	bl	8006dbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081c6:	bf00      	nop
 80081c8:	3720      	adds	r7, #32
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b09c      	sub	sp, #112	; 0x70
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081e8:	2b22      	cmp	r3, #34	; 0x22
 80081ea:	f040 80be 	bne.w	800836a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80081f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80081fc:	b2d9      	uxtb	r1, r3
 80081fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008202:	b2da      	uxtb	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008208:	400a      	ands	r2, r1
 800820a:	b2d2      	uxtb	r2, r2
 800820c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008212:	1c5a      	adds	r2, r3, #1
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800821e:	b29b      	uxth	r3, r3
 8008220:	3b01      	subs	r3, #1
 8008222:	b29a      	uxth	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008230:	b29b      	uxth	r3, r3
 8008232:	2b00      	cmp	r3, #0
 8008234:	f040 80a1 	bne.w	800837a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008248:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800824c:	66bb      	str	r3, [r7, #104]	; 0x68
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008256:	65bb      	str	r3, [r7, #88]	; 0x58
 8008258:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800825c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1e6      	bne.n	8008238 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3308      	adds	r3, #8
 8008270:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008274:	e853 3f00 	ldrex	r3, [r3]
 8008278:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800827a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827c:	f023 0301 	bic.w	r3, r3, #1
 8008280:	667b      	str	r3, [r7, #100]	; 0x64
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3308      	adds	r3, #8
 8008288:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800828a:	647a      	str	r2, [r7, #68]	; 0x44
 800828c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e5      	bne.n	800826a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2220      	movs	r2, #32
 80082a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a33      	ldr	r2, [pc, #204]	; (8008384 <UART_RxISR_8BIT+0x1b4>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d01f      	beq.n	80082fc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d018      	beq.n	80082fc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	e853 3f00 	ldrex	r3, [r3]
 80082d6:	623b      	str	r3, [r7, #32]
   return(result);
 80082d8:	6a3b      	ldr	r3, [r7, #32]
 80082da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082de:	663b      	str	r3, [r7, #96]	; 0x60
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	461a      	mov	r2, r3
 80082e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082e8:	633b      	str	r3, [r7, #48]	; 0x30
 80082ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e6      	bne.n	80082ca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008300:	2b01      	cmp	r3, #1
 8008302:	d12e      	bne.n	8008362 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	60fb      	str	r3, [r7, #12]
   return(result);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 0310 	bic.w	r3, r3, #16
 800831e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008328:	61fb      	str	r3, [r7, #28]
 800832a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	69b9      	ldr	r1, [r7, #24]
 800832e:	69fa      	ldr	r2, [r7, #28]
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	617b      	str	r3, [r7, #20]
   return(result);
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e6      	bne.n	800830a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	f003 0310 	and.w	r3, r3, #16
 8008346:	2b10      	cmp	r3, #16
 8008348:	d103      	bne.n	8008352 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2210      	movs	r2, #16
 8008350:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008358:	4619      	mov	r1, r3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7fe fd42 	bl	8006de4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008360:	e00b      	b.n	800837a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7f8 fade 	bl	8000924 <HAL_UART_RxCpltCallback>
}
 8008368:	e007      	b.n	800837a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	699a      	ldr	r2, [r3, #24]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f042 0208 	orr.w	r2, r2, #8
 8008378:	619a      	str	r2, [r3, #24]
}
 800837a:	bf00      	nop
 800837c:	3770      	adds	r7, #112	; 0x70
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	58000c00 	.word	0x58000c00

08008388 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b09c      	sub	sp, #112	; 0x70
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008396:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083a0:	2b22      	cmp	r3, #34	; 0x22
 80083a2:	f040 80be 	bne.w	8008522 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80083b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80083ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80083be:	4013      	ands	r3, r2
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ca:	1c9a      	adds	r2, r3, #2
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	3b01      	subs	r3, #1
 80083da:	b29a      	uxth	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f040 80a1 	bne.w	8008532 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80083fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008400:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008404:	667b      	str	r3, [r7, #100]	; 0x64
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800840e:	657b      	str	r3, [r7, #84]	; 0x54
 8008410:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008414:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800841c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e6      	bne.n	80083f0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3308      	adds	r3, #8
 8008428:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	f023 0301 	bic.w	r3, r3, #1
 8008438:	663b      	str	r3, [r7, #96]	; 0x60
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	3308      	adds	r3, #8
 8008440:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008442:	643a      	str	r2, [r7, #64]	; 0x40
 8008444:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008448:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e5      	bne.n	8008422 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a33      	ldr	r2, [pc, #204]	; (800853c <UART_RxISR_16BIT+0x1b4>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d01f      	beq.n	80084b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d018      	beq.n	80084b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	e853 3f00 	ldrex	r3, [r3]
 800848e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008496:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	461a      	mov	r2, r3
 800849e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084a8:	e841 2300 	strex	r3, r2, [r1]
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e6      	bne.n	8008482 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d12e      	bne.n	800851a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	e853 3f00 	ldrex	r3, [r3]
 80084ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	f023 0310 	bic.w	r3, r3, #16
 80084d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	461a      	mov	r2, r3
 80084de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084e0:	61bb      	str	r3, [r7, #24]
 80084e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e4:	6979      	ldr	r1, [r7, #20]
 80084e6:	69ba      	ldr	r2, [r7, #24]
 80084e8:	e841 2300 	strex	r3, r2, [r1]
 80084ec:	613b      	str	r3, [r7, #16]
   return(result);
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1e6      	bne.n	80084c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	f003 0310 	and.w	r3, r3, #16
 80084fe:	2b10      	cmp	r3, #16
 8008500:	d103      	bne.n	800850a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2210      	movs	r2, #16
 8008508:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7fe fc66 	bl	8006de4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008518:	e00b      	b.n	8008532 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f7f8 fa02 	bl	8000924 <HAL_UART_RxCpltCallback>
}
 8008520:	e007      	b.n	8008532 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	699a      	ldr	r2, [r3, #24]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f042 0208 	orr.w	r2, r2, #8
 8008530:	619a      	str	r2, [r3, #24]
}
 8008532:	bf00      	nop
 8008534:	3770      	adds	r7, #112	; 0x70
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	58000c00 	.word	0x58000c00

08008540 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b0ac      	sub	sp, #176	; 0xb0
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800854e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008576:	2b22      	cmp	r3, #34	; 0x22
 8008578:	f040 8180 	bne.w	800887c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008582:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008586:	e123      	b.n	80087d0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008592:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008596:	b2d9      	uxtb	r1, r3
 8008598:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800859c:	b2da      	uxtb	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a2:	400a      	ands	r2, r1
 80085a4:	b2d2      	uxtb	r2, r2
 80085a6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ac:	1c5a      	adds	r2, r3, #1
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	3b01      	subs	r3, #1
 80085bc:	b29a      	uxth	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80085ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d053      	beq.n	8008682 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d011      	beq.n	800860a <UART_RxISR_8BIT_FIFOEN+0xca>
 80085e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80085ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00b      	beq.n	800860a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2201      	movs	r2, #1
 80085f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008600:	f043 0201 	orr.w	r2, r3, #1
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800860a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800860e:	f003 0302 	and.w	r3, r3, #2
 8008612:	2b00      	cmp	r3, #0
 8008614:	d011      	beq.n	800863a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008616:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00b      	beq.n	800863a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2202      	movs	r2, #2
 8008628:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008630:	f043 0204 	orr.w	r2, r3, #4
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800863a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800863e:	f003 0304 	and.w	r3, r3, #4
 8008642:	2b00      	cmp	r3, #0
 8008644:	d011      	beq.n	800866a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008646:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00b      	beq.n	800866a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2204      	movs	r2, #4
 8008658:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008660:	f043 0202 	orr.w	r2, r3, #2
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008670:	2b00      	cmp	r3, #0
 8008672:	d006      	beq.n	8008682 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7fe fbab 	bl	8006dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008688:	b29b      	uxth	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	f040 80a0 	bne.w	80087d0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008698:	e853 3f00 	ldrex	r3, [r3]
 800869c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800869e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	461a      	mov	r2, r3
 80086ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80086b4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80086b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80086ba:	e841 2300 	strex	r3, r2, [r1]
 80086be:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80086c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1e4      	bne.n	8008690 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3308      	adds	r3, #8
 80086cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086d0:	e853 3f00 	ldrex	r3, [r3]
 80086d4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80086d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086d8:	4b6e      	ldr	r3, [pc, #440]	; (8008894 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80086da:	4013      	ands	r3, r2
 80086dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3308      	adds	r3, #8
 80086e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086ea:	66ba      	str	r2, [r7, #104]	; 0x68
 80086ec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80086f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086f2:	e841 2300 	strex	r3, r2, [r1]
 80086f6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80086f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1e3      	bne.n	80086c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2220      	movs	r2, #32
 8008702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a60      	ldr	r2, [pc, #384]	; (8008898 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d021      	beq.n	8008760 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d01a      	beq.n	8008760 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008732:	e853 3f00 	ldrex	r3, [r3]
 8008736:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800873a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800873e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800874c:	657b      	str	r3, [r7, #84]	; 0x54
 800874e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008750:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008752:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008754:	e841 2300 	strex	r3, r2, [r1]
 8008758:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800875a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e4      	bne.n	800872a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008764:	2b01      	cmp	r3, #1
 8008766:	d130      	bne.n	80087ca <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008776:	e853 3f00 	ldrex	r3, [r3]
 800877a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800877c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877e:	f023 0310 	bic.w	r3, r3, #16
 8008782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	461a      	mov	r2, r3
 800878c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008790:	643b      	str	r3, [r7, #64]	; 0x40
 8008792:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008794:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008798:	e841 2300 	strex	r3, r2, [r1]
 800879c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e4      	bne.n	800876e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	f003 0310 	and.w	r3, r3, #16
 80087ae:	2b10      	cmp	r3, #16
 80087b0:	d103      	bne.n	80087ba <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2210      	movs	r2, #16
 80087b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7fe fb0e 	bl	8006de4 <HAL_UARTEx_RxEventCallback>
 80087c8:	e002      	b.n	80087d0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7f8 f8aa 	bl	8000924 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80087d0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d006      	beq.n	80087e6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80087d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087dc:	f003 0320 	and.w	r3, r3, #32
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f47f aed1 	bne.w	8008588 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80087f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d049      	beq.n	800888c <UART_RxISR_8BIT_FIFOEN+0x34c>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80087fe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008802:	429a      	cmp	r2, r3
 8008804:	d242      	bcs.n	800888c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	3308      	adds	r3, #8
 800880c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	e853 3f00 	ldrex	r3, [r3]
 8008814:	61fb      	str	r3, [r7, #28]
   return(result);
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800881c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3308      	adds	r3, #8
 8008826:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800882a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800882c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008832:	e841 2300 	strex	r3, r2, [r1]
 8008836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1e3      	bne.n	8008806 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a16      	ldr	r2, [pc, #88]	; (800889c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008842:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	60bb      	str	r3, [r7, #8]
   return(result);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	f043 0320 	orr.w	r3, r3, #32
 8008858:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	461a      	mov	r2, r3
 8008862:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008866:	61bb      	str	r3, [r7, #24]
 8008868:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886a:	6979      	ldr	r1, [r7, #20]
 800886c:	69ba      	ldr	r2, [r7, #24]
 800886e:	e841 2300 	strex	r3, r2, [r1]
 8008872:	613b      	str	r3, [r7, #16]
   return(result);
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1e4      	bne.n	8008844 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800887a:	e007      	b.n	800888c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	699a      	ldr	r2, [r3, #24]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f042 0208 	orr.w	r2, r2, #8
 800888a:	619a      	str	r2, [r3, #24]
}
 800888c:	bf00      	nop
 800888e:	37b0      	adds	r7, #176	; 0xb0
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	effffffe 	.word	0xeffffffe
 8008898:	58000c00 	.word	0x58000c00
 800889c:	080081d1 	.word	0x080081d1

080088a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b0ae      	sub	sp, #184	; 0xb8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80088ae:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088d6:	2b22      	cmp	r3, #34	; 0x22
 80088d8:	f040 8184 	bne.w	8008be4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80088e2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80088e6:	e127      	b.n	8008b38 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80088fa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80088fe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008902:	4013      	ands	r3, r2
 8008904:	b29a      	uxth	r2, r3
 8008906:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800890a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008910:	1c9a      	adds	r2, r3, #2
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800891c:	b29b      	uxth	r3, r3
 800891e:	3b01      	subs	r3, #1
 8008920:	b29a      	uxth	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008932:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008936:	f003 0307 	and.w	r3, r3, #7
 800893a:	2b00      	cmp	r3, #0
 800893c:	d053      	beq.n	80089e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800893e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	2b00      	cmp	r3, #0
 8008948:	d011      	beq.n	800896e <UART_RxISR_16BIT_FIFOEN+0xce>
 800894a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800894e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00b      	beq.n	800896e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2201      	movs	r2, #1
 800895c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008964:	f043 0201 	orr.w	r2, r3, #1
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800896e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d011      	beq.n	800899e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800897a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00b      	beq.n	800899e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2202      	movs	r2, #2
 800898c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008994:	f043 0204 	orr.w	r2, r3, #4
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800899e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089a2:	f003 0304 	and.w	r3, r3, #4
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d011      	beq.n	80089ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 80089aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00b      	beq.n	80089ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2204      	movs	r2, #4
 80089bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089c4:	f043 0202 	orr.w	r2, r3, #2
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d006      	beq.n	80089e6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7fe f9f9 	bl	8006dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f040 80a2 	bne.w	8008b38 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a1a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e2      	bne.n	80089f4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	3308      	adds	r3, #8
 8008a34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a38:	e853 3f00 	ldrex	r3, [r3]
 8008a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a40:	4b6e      	ldr	r3, [pc, #440]	; (8008bfc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008a42:	4013      	ands	r3, r2
 8008a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3308      	adds	r3, #8
 8008a4e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008a52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a5a:	e841 2300 	strex	r3, r2, [r1]
 8008a5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1e3      	bne.n	8008a2e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a60      	ldr	r2, [pc, #384]	; (8008c00 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d021      	beq.n	8008ac8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d01a      	beq.n	8008ac8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a9a:	e853 3f00 	ldrex	r3, [r3]
 8008a9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aa2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008aa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ab4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ab6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008aba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008abc:	e841 2300 	strex	r3, r2, [r1]
 8008ac0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1e4      	bne.n	8008a92 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d130      	bne.n	8008b32 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ade:	e853 3f00 	ldrex	r3, [r3]
 8008ae2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae6:	f023 0310 	bic.w	r3, r3, #16
 8008aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	461a      	mov	r2, r3
 8008af4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008af8:	647b      	str	r3, [r7, #68]	; 0x44
 8008afa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b00:	e841 2300 	strex	r3, r2, [r1]
 8008b04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1e4      	bne.n	8008ad6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	f003 0310 	and.w	r3, r3, #16
 8008b16:	2b10      	cmp	r3, #16
 8008b18:	d103      	bne.n	8008b22 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2210      	movs	r2, #16
 8008b20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7fe f95a 	bl	8006de4 <HAL_UARTEx_RxEventCallback>
 8008b30:	e002      	b.n	8008b38 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7f7 fef6 	bl	8000924 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b38:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d006      	beq.n	8008b4e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008b40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b44:	f003 0320 	and.w	r3, r3, #32
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f47f aecd 	bne.w	80088e8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b54:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008b58:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d049      	beq.n	8008bf4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b66:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d242      	bcs.n	8008bf4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3308      	adds	r3, #8
 8008b74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	e853 3f00 	ldrex	r3, [r3]
 8008b7c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3308      	adds	r3, #8
 8008b8e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008b92:	633a      	str	r2, [r7, #48]	; 0x30
 8008b94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e3      	bne.n	8008b6e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a16      	ldr	r2, [pc, #88]	; (8008c04 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008baa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	e853 3f00 	ldrex	r3, [r3]
 8008bb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f043 0320 	orr.w	r3, r3, #32
 8008bc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bce:	61fb      	str	r3, [r7, #28]
 8008bd0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd2:	69b9      	ldr	r1, [r7, #24]
 8008bd4:	69fa      	ldr	r2, [r7, #28]
 8008bd6:	e841 2300 	strex	r3, r2, [r1]
 8008bda:	617b      	str	r3, [r7, #20]
   return(result);
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1e4      	bne.n	8008bac <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008be2:	e007      	b.n	8008bf4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	699a      	ldr	r2, [r3, #24]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f042 0208 	orr.w	r2, r2, #8
 8008bf2:	619a      	str	r2, [r3, #24]
}
 8008bf4:	bf00      	nop
 8008bf6:	37b8      	adds	r7, #184	; 0xb8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	effffffe 	.word	0xeffffffe
 8008c00:	58000c00 	.word	0x58000c00
 8008c04:	08008389 	.word	0x08008389

08008c08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d101      	bne.n	8008c5a <HAL_UARTEx_DisableFifoMode+0x16>
 8008c56:	2302      	movs	r3, #2
 8008c58:	e027      	b.n	8008caa <HAL_UARTEx_DisableFifoMode+0x66>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2224      	movs	r2, #36	; 0x24
 8008c66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f022 0201 	bic.w	r2, r2, #1
 8008c80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d101      	bne.n	8008cce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008cca:	2302      	movs	r3, #2
 8008ccc:	e02d      	b.n	8008d2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2224      	movs	r2, #36	; 0x24
 8008cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f022 0201 	bic.w	r2, r2, #1
 8008cf4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	430a      	orrs	r2, r1
 8008d08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f850 	bl	8008db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2220      	movs	r2, #32
 8008d1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d101      	bne.n	8008d4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d46:	2302      	movs	r3, #2
 8008d48:	e02d      	b.n	8008da6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2224      	movs	r2, #36	; 0x24
 8008d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f022 0201 	bic.w	r2, r2, #1
 8008d70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	683a      	ldr	r2, [r7, #0]
 8008d82:	430a      	orrs	r2, r1
 8008d84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f812 	bl	8008db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2220      	movs	r2, #32
 8008d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d108      	bne.n	8008dd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008dd0:	e031      	b.n	8008e36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008dd2:	2310      	movs	r3, #16
 8008dd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008dd6:	2310      	movs	r3, #16
 8008dd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	0e5b      	lsrs	r3, r3, #25
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	f003 0307 	and.w	r3, r3, #7
 8008de8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	0f5b      	lsrs	r3, r3, #29
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	f003 0307 	and.w	r3, r3, #7
 8008df8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008dfa:	7bbb      	ldrb	r3, [r7, #14]
 8008dfc:	7b3a      	ldrb	r2, [r7, #12]
 8008dfe:	4911      	ldr	r1, [pc, #68]	; (8008e44 <UARTEx_SetNbDataToProcess+0x94>)
 8008e00:	5c8a      	ldrb	r2, [r1, r2]
 8008e02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e06:	7b3a      	ldrb	r2, [r7, #12]
 8008e08:	490f      	ldr	r1, [pc, #60]	; (8008e48 <UARTEx_SetNbDataToProcess+0x98>)
 8008e0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
 8008e1a:	7b7a      	ldrb	r2, [r7, #13]
 8008e1c:	4909      	ldr	r1, [pc, #36]	; (8008e44 <UARTEx_SetNbDataToProcess+0x94>)
 8008e1e:	5c8a      	ldrb	r2, [r1, r2]
 8008e20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e24:	7b7a      	ldrb	r2, [r7, #13]
 8008e26:	4908      	ldr	r1, [pc, #32]	; (8008e48 <UARTEx_SetNbDataToProcess+0x98>)
 8008e28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e36:	bf00      	nop
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	080097d8 	.word	0x080097d8
 8008e48:	080097e0 	.word	0x080097e0

08008e4c <siprintf>:
 8008e4c:	b40e      	push	{r1, r2, r3}
 8008e4e:	b500      	push	{lr}
 8008e50:	b09c      	sub	sp, #112	; 0x70
 8008e52:	ab1d      	add	r3, sp, #116	; 0x74
 8008e54:	9002      	str	r0, [sp, #8]
 8008e56:	9006      	str	r0, [sp, #24]
 8008e58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e5c:	4809      	ldr	r0, [pc, #36]	; (8008e84 <siprintf+0x38>)
 8008e5e:	9107      	str	r1, [sp, #28]
 8008e60:	9104      	str	r1, [sp, #16]
 8008e62:	4909      	ldr	r1, [pc, #36]	; (8008e88 <siprintf+0x3c>)
 8008e64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e68:	9105      	str	r1, [sp, #20]
 8008e6a:	6800      	ldr	r0, [r0, #0]
 8008e6c:	9301      	str	r3, [sp, #4]
 8008e6e:	a902      	add	r1, sp, #8
 8008e70:	f000 f992 	bl	8009198 <_svfiprintf_r>
 8008e74:	9b02      	ldr	r3, [sp, #8]
 8008e76:	2200      	movs	r2, #0
 8008e78:	701a      	strb	r2, [r3, #0]
 8008e7a:	b01c      	add	sp, #112	; 0x70
 8008e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e80:	b003      	add	sp, #12
 8008e82:	4770      	bx	lr
 8008e84:	24000068 	.word	0x24000068
 8008e88:	ffff0208 	.word	0xffff0208

08008e8c <memset>:
 8008e8c:	4402      	add	r2, r0
 8008e8e:	4603      	mov	r3, r0
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d100      	bne.n	8008e96 <memset+0xa>
 8008e94:	4770      	bx	lr
 8008e96:	f803 1b01 	strb.w	r1, [r3], #1
 8008e9a:	e7f9      	b.n	8008e90 <memset+0x4>

08008e9c <__errno>:
 8008e9c:	4b01      	ldr	r3, [pc, #4]	; (8008ea4 <__errno+0x8>)
 8008e9e:	6818      	ldr	r0, [r3, #0]
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	24000068 	.word	0x24000068

08008ea8 <__libc_init_array>:
 8008ea8:	b570      	push	{r4, r5, r6, lr}
 8008eaa:	4d0d      	ldr	r5, [pc, #52]	; (8008ee0 <__libc_init_array+0x38>)
 8008eac:	4c0d      	ldr	r4, [pc, #52]	; (8008ee4 <__libc_init_array+0x3c>)
 8008eae:	1b64      	subs	r4, r4, r5
 8008eb0:	10a4      	asrs	r4, r4, #2
 8008eb2:	2600      	movs	r6, #0
 8008eb4:	42a6      	cmp	r6, r4
 8008eb6:	d109      	bne.n	8008ecc <__libc_init_array+0x24>
 8008eb8:	4d0b      	ldr	r5, [pc, #44]	; (8008ee8 <__libc_init_array+0x40>)
 8008eba:	4c0c      	ldr	r4, [pc, #48]	; (8008eec <__libc_init_array+0x44>)
 8008ebc:	f000 fc6a 	bl	8009794 <_init>
 8008ec0:	1b64      	subs	r4, r4, r5
 8008ec2:	10a4      	asrs	r4, r4, #2
 8008ec4:	2600      	movs	r6, #0
 8008ec6:	42a6      	cmp	r6, r4
 8008ec8:	d105      	bne.n	8008ed6 <__libc_init_array+0x2e>
 8008eca:	bd70      	pop	{r4, r5, r6, pc}
 8008ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ed0:	4798      	blx	r3
 8008ed2:	3601      	adds	r6, #1
 8008ed4:	e7ee      	b.n	8008eb4 <__libc_init_array+0xc>
 8008ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eda:	4798      	blx	r3
 8008edc:	3601      	adds	r6, #1
 8008ede:	e7f2      	b.n	8008ec6 <__libc_init_array+0x1e>
 8008ee0:	08009824 	.word	0x08009824
 8008ee4:	08009824 	.word	0x08009824
 8008ee8:	08009824 	.word	0x08009824
 8008eec:	08009828 	.word	0x08009828

08008ef0 <__retarget_lock_acquire_recursive>:
 8008ef0:	4770      	bx	lr

08008ef2 <__retarget_lock_release_recursive>:
 8008ef2:	4770      	bx	lr

08008ef4 <_free_r>:
 8008ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ef6:	2900      	cmp	r1, #0
 8008ef8:	d044      	beq.n	8008f84 <_free_r+0x90>
 8008efa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008efe:	9001      	str	r0, [sp, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f1a1 0404 	sub.w	r4, r1, #4
 8008f06:	bfb8      	it	lt
 8008f08:	18e4      	addlt	r4, r4, r3
 8008f0a:	f000 f8df 	bl	80090cc <__malloc_lock>
 8008f0e:	4a1e      	ldr	r2, [pc, #120]	; (8008f88 <_free_r+0x94>)
 8008f10:	9801      	ldr	r0, [sp, #4]
 8008f12:	6813      	ldr	r3, [r2, #0]
 8008f14:	b933      	cbnz	r3, 8008f24 <_free_r+0x30>
 8008f16:	6063      	str	r3, [r4, #4]
 8008f18:	6014      	str	r4, [r2, #0]
 8008f1a:	b003      	add	sp, #12
 8008f1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f20:	f000 b8da 	b.w	80090d8 <__malloc_unlock>
 8008f24:	42a3      	cmp	r3, r4
 8008f26:	d908      	bls.n	8008f3a <_free_r+0x46>
 8008f28:	6825      	ldr	r5, [r4, #0]
 8008f2a:	1961      	adds	r1, r4, r5
 8008f2c:	428b      	cmp	r3, r1
 8008f2e:	bf01      	itttt	eq
 8008f30:	6819      	ldreq	r1, [r3, #0]
 8008f32:	685b      	ldreq	r3, [r3, #4]
 8008f34:	1949      	addeq	r1, r1, r5
 8008f36:	6021      	streq	r1, [r4, #0]
 8008f38:	e7ed      	b.n	8008f16 <_free_r+0x22>
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	b10b      	cbz	r3, 8008f44 <_free_r+0x50>
 8008f40:	42a3      	cmp	r3, r4
 8008f42:	d9fa      	bls.n	8008f3a <_free_r+0x46>
 8008f44:	6811      	ldr	r1, [r2, #0]
 8008f46:	1855      	adds	r5, r2, r1
 8008f48:	42a5      	cmp	r5, r4
 8008f4a:	d10b      	bne.n	8008f64 <_free_r+0x70>
 8008f4c:	6824      	ldr	r4, [r4, #0]
 8008f4e:	4421      	add	r1, r4
 8008f50:	1854      	adds	r4, r2, r1
 8008f52:	42a3      	cmp	r3, r4
 8008f54:	6011      	str	r1, [r2, #0]
 8008f56:	d1e0      	bne.n	8008f1a <_free_r+0x26>
 8008f58:	681c      	ldr	r4, [r3, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	6053      	str	r3, [r2, #4]
 8008f5e:	440c      	add	r4, r1
 8008f60:	6014      	str	r4, [r2, #0]
 8008f62:	e7da      	b.n	8008f1a <_free_r+0x26>
 8008f64:	d902      	bls.n	8008f6c <_free_r+0x78>
 8008f66:	230c      	movs	r3, #12
 8008f68:	6003      	str	r3, [r0, #0]
 8008f6a:	e7d6      	b.n	8008f1a <_free_r+0x26>
 8008f6c:	6825      	ldr	r5, [r4, #0]
 8008f6e:	1961      	adds	r1, r4, r5
 8008f70:	428b      	cmp	r3, r1
 8008f72:	bf04      	itt	eq
 8008f74:	6819      	ldreq	r1, [r3, #0]
 8008f76:	685b      	ldreq	r3, [r3, #4]
 8008f78:	6063      	str	r3, [r4, #4]
 8008f7a:	bf04      	itt	eq
 8008f7c:	1949      	addeq	r1, r1, r5
 8008f7e:	6021      	streq	r1, [r4, #0]
 8008f80:	6054      	str	r4, [r2, #4]
 8008f82:	e7ca      	b.n	8008f1a <_free_r+0x26>
 8008f84:	b003      	add	sp, #12
 8008f86:	bd30      	pop	{r4, r5, pc}
 8008f88:	2400ee5c 	.word	0x2400ee5c

08008f8c <sbrk_aligned>:
 8008f8c:	b570      	push	{r4, r5, r6, lr}
 8008f8e:	4e0e      	ldr	r6, [pc, #56]	; (8008fc8 <sbrk_aligned+0x3c>)
 8008f90:	460c      	mov	r4, r1
 8008f92:	6831      	ldr	r1, [r6, #0]
 8008f94:	4605      	mov	r5, r0
 8008f96:	b911      	cbnz	r1, 8008f9e <sbrk_aligned+0x12>
 8008f98:	f000 fba6 	bl	80096e8 <_sbrk_r>
 8008f9c:	6030      	str	r0, [r6, #0]
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	f000 fba1 	bl	80096e8 <_sbrk_r>
 8008fa6:	1c43      	adds	r3, r0, #1
 8008fa8:	d00a      	beq.n	8008fc0 <sbrk_aligned+0x34>
 8008faa:	1cc4      	adds	r4, r0, #3
 8008fac:	f024 0403 	bic.w	r4, r4, #3
 8008fb0:	42a0      	cmp	r0, r4
 8008fb2:	d007      	beq.n	8008fc4 <sbrk_aligned+0x38>
 8008fb4:	1a21      	subs	r1, r4, r0
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f000 fb96 	bl	80096e8 <_sbrk_r>
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	d101      	bne.n	8008fc4 <sbrk_aligned+0x38>
 8008fc0:	f04f 34ff 	mov.w	r4, #4294967295
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}
 8008fc8:	2400ee60 	.word	0x2400ee60

08008fcc <_malloc_r>:
 8008fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd0:	1ccd      	adds	r5, r1, #3
 8008fd2:	f025 0503 	bic.w	r5, r5, #3
 8008fd6:	3508      	adds	r5, #8
 8008fd8:	2d0c      	cmp	r5, #12
 8008fda:	bf38      	it	cc
 8008fdc:	250c      	movcc	r5, #12
 8008fde:	2d00      	cmp	r5, #0
 8008fe0:	4607      	mov	r7, r0
 8008fe2:	db01      	blt.n	8008fe8 <_malloc_r+0x1c>
 8008fe4:	42a9      	cmp	r1, r5
 8008fe6:	d905      	bls.n	8008ff4 <_malloc_r+0x28>
 8008fe8:	230c      	movs	r3, #12
 8008fea:	603b      	str	r3, [r7, #0]
 8008fec:	2600      	movs	r6, #0
 8008fee:	4630      	mov	r0, r6
 8008ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80090c8 <_malloc_r+0xfc>
 8008ff8:	f000 f868 	bl	80090cc <__malloc_lock>
 8008ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8009000:	461c      	mov	r4, r3
 8009002:	bb5c      	cbnz	r4, 800905c <_malloc_r+0x90>
 8009004:	4629      	mov	r1, r5
 8009006:	4638      	mov	r0, r7
 8009008:	f7ff ffc0 	bl	8008f8c <sbrk_aligned>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	4604      	mov	r4, r0
 8009010:	d155      	bne.n	80090be <_malloc_r+0xf2>
 8009012:	f8d8 4000 	ldr.w	r4, [r8]
 8009016:	4626      	mov	r6, r4
 8009018:	2e00      	cmp	r6, #0
 800901a:	d145      	bne.n	80090a8 <_malloc_r+0xdc>
 800901c:	2c00      	cmp	r4, #0
 800901e:	d048      	beq.n	80090b2 <_malloc_r+0xe6>
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	4631      	mov	r1, r6
 8009024:	4638      	mov	r0, r7
 8009026:	eb04 0903 	add.w	r9, r4, r3
 800902a:	f000 fb5d 	bl	80096e8 <_sbrk_r>
 800902e:	4581      	cmp	r9, r0
 8009030:	d13f      	bne.n	80090b2 <_malloc_r+0xe6>
 8009032:	6821      	ldr	r1, [r4, #0]
 8009034:	1a6d      	subs	r5, r5, r1
 8009036:	4629      	mov	r1, r5
 8009038:	4638      	mov	r0, r7
 800903a:	f7ff ffa7 	bl	8008f8c <sbrk_aligned>
 800903e:	3001      	adds	r0, #1
 8009040:	d037      	beq.n	80090b2 <_malloc_r+0xe6>
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	442b      	add	r3, r5
 8009046:	6023      	str	r3, [r4, #0]
 8009048:	f8d8 3000 	ldr.w	r3, [r8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d038      	beq.n	80090c2 <_malloc_r+0xf6>
 8009050:	685a      	ldr	r2, [r3, #4]
 8009052:	42a2      	cmp	r2, r4
 8009054:	d12b      	bne.n	80090ae <_malloc_r+0xe2>
 8009056:	2200      	movs	r2, #0
 8009058:	605a      	str	r2, [r3, #4]
 800905a:	e00f      	b.n	800907c <_malloc_r+0xb0>
 800905c:	6822      	ldr	r2, [r4, #0]
 800905e:	1b52      	subs	r2, r2, r5
 8009060:	d41f      	bmi.n	80090a2 <_malloc_r+0xd6>
 8009062:	2a0b      	cmp	r2, #11
 8009064:	d917      	bls.n	8009096 <_malloc_r+0xca>
 8009066:	1961      	adds	r1, r4, r5
 8009068:	42a3      	cmp	r3, r4
 800906a:	6025      	str	r5, [r4, #0]
 800906c:	bf18      	it	ne
 800906e:	6059      	strne	r1, [r3, #4]
 8009070:	6863      	ldr	r3, [r4, #4]
 8009072:	bf08      	it	eq
 8009074:	f8c8 1000 	streq.w	r1, [r8]
 8009078:	5162      	str	r2, [r4, r5]
 800907a:	604b      	str	r3, [r1, #4]
 800907c:	4638      	mov	r0, r7
 800907e:	f104 060b 	add.w	r6, r4, #11
 8009082:	f000 f829 	bl	80090d8 <__malloc_unlock>
 8009086:	f026 0607 	bic.w	r6, r6, #7
 800908a:	1d23      	adds	r3, r4, #4
 800908c:	1af2      	subs	r2, r6, r3
 800908e:	d0ae      	beq.n	8008fee <_malloc_r+0x22>
 8009090:	1b9b      	subs	r3, r3, r6
 8009092:	50a3      	str	r3, [r4, r2]
 8009094:	e7ab      	b.n	8008fee <_malloc_r+0x22>
 8009096:	42a3      	cmp	r3, r4
 8009098:	6862      	ldr	r2, [r4, #4]
 800909a:	d1dd      	bne.n	8009058 <_malloc_r+0x8c>
 800909c:	f8c8 2000 	str.w	r2, [r8]
 80090a0:	e7ec      	b.n	800907c <_malloc_r+0xb0>
 80090a2:	4623      	mov	r3, r4
 80090a4:	6864      	ldr	r4, [r4, #4]
 80090a6:	e7ac      	b.n	8009002 <_malloc_r+0x36>
 80090a8:	4634      	mov	r4, r6
 80090aa:	6876      	ldr	r6, [r6, #4]
 80090ac:	e7b4      	b.n	8009018 <_malloc_r+0x4c>
 80090ae:	4613      	mov	r3, r2
 80090b0:	e7cc      	b.n	800904c <_malloc_r+0x80>
 80090b2:	230c      	movs	r3, #12
 80090b4:	603b      	str	r3, [r7, #0]
 80090b6:	4638      	mov	r0, r7
 80090b8:	f000 f80e 	bl	80090d8 <__malloc_unlock>
 80090bc:	e797      	b.n	8008fee <_malloc_r+0x22>
 80090be:	6025      	str	r5, [r4, #0]
 80090c0:	e7dc      	b.n	800907c <_malloc_r+0xb0>
 80090c2:	605b      	str	r3, [r3, #4]
 80090c4:	deff      	udf	#255	; 0xff
 80090c6:	bf00      	nop
 80090c8:	2400ee5c 	.word	0x2400ee5c

080090cc <__malloc_lock>:
 80090cc:	4801      	ldr	r0, [pc, #4]	; (80090d4 <__malloc_lock+0x8>)
 80090ce:	f7ff bf0f 	b.w	8008ef0 <__retarget_lock_acquire_recursive>
 80090d2:	bf00      	nop
 80090d4:	2400ee58 	.word	0x2400ee58

080090d8 <__malloc_unlock>:
 80090d8:	4801      	ldr	r0, [pc, #4]	; (80090e0 <__malloc_unlock+0x8>)
 80090da:	f7ff bf0a 	b.w	8008ef2 <__retarget_lock_release_recursive>
 80090de:	bf00      	nop
 80090e0:	2400ee58 	.word	0x2400ee58

080090e4 <__ssputs_r>:
 80090e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e8:	688e      	ldr	r6, [r1, #8]
 80090ea:	461f      	mov	r7, r3
 80090ec:	42be      	cmp	r6, r7
 80090ee:	680b      	ldr	r3, [r1, #0]
 80090f0:	4682      	mov	sl, r0
 80090f2:	460c      	mov	r4, r1
 80090f4:	4690      	mov	r8, r2
 80090f6:	d82c      	bhi.n	8009152 <__ssputs_r+0x6e>
 80090f8:	898a      	ldrh	r2, [r1, #12]
 80090fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090fe:	d026      	beq.n	800914e <__ssputs_r+0x6a>
 8009100:	6965      	ldr	r5, [r4, #20]
 8009102:	6909      	ldr	r1, [r1, #16]
 8009104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009108:	eba3 0901 	sub.w	r9, r3, r1
 800910c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009110:	1c7b      	adds	r3, r7, #1
 8009112:	444b      	add	r3, r9
 8009114:	106d      	asrs	r5, r5, #1
 8009116:	429d      	cmp	r5, r3
 8009118:	bf38      	it	cc
 800911a:	461d      	movcc	r5, r3
 800911c:	0553      	lsls	r3, r2, #21
 800911e:	d527      	bpl.n	8009170 <__ssputs_r+0x8c>
 8009120:	4629      	mov	r1, r5
 8009122:	f7ff ff53 	bl	8008fcc <_malloc_r>
 8009126:	4606      	mov	r6, r0
 8009128:	b360      	cbz	r0, 8009184 <__ssputs_r+0xa0>
 800912a:	6921      	ldr	r1, [r4, #16]
 800912c:	464a      	mov	r2, r9
 800912e:	f000 faeb 	bl	8009708 <memcpy>
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800913c:	81a3      	strh	r3, [r4, #12]
 800913e:	6126      	str	r6, [r4, #16]
 8009140:	6165      	str	r5, [r4, #20]
 8009142:	444e      	add	r6, r9
 8009144:	eba5 0509 	sub.w	r5, r5, r9
 8009148:	6026      	str	r6, [r4, #0]
 800914a:	60a5      	str	r5, [r4, #8]
 800914c:	463e      	mov	r6, r7
 800914e:	42be      	cmp	r6, r7
 8009150:	d900      	bls.n	8009154 <__ssputs_r+0x70>
 8009152:	463e      	mov	r6, r7
 8009154:	6820      	ldr	r0, [r4, #0]
 8009156:	4632      	mov	r2, r6
 8009158:	4641      	mov	r1, r8
 800915a:	f000 faab 	bl	80096b4 <memmove>
 800915e:	68a3      	ldr	r3, [r4, #8]
 8009160:	1b9b      	subs	r3, r3, r6
 8009162:	60a3      	str	r3, [r4, #8]
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	4433      	add	r3, r6
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	2000      	movs	r0, #0
 800916c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009170:	462a      	mov	r2, r5
 8009172:	f000 fad7 	bl	8009724 <_realloc_r>
 8009176:	4606      	mov	r6, r0
 8009178:	2800      	cmp	r0, #0
 800917a:	d1e0      	bne.n	800913e <__ssputs_r+0x5a>
 800917c:	6921      	ldr	r1, [r4, #16]
 800917e:	4650      	mov	r0, sl
 8009180:	f7ff feb8 	bl	8008ef4 <_free_r>
 8009184:	230c      	movs	r3, #12
 8009186:	f8ca 3000 	str.w	r3, [sl]
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009190:	81a3      	strh	r3, [r4, #12]
 8009192:	f04f 30ff 	mov.w	r0, #4294967295
 8009196:	e7e9      	b.n	800916c <__ssputs_r+0x88>

08009198 <_svfiprintf_r>:
 8009198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800919c:	4698      	mov	r8, r3
 800919e:	898b      	ldrh	r3, [r1, #12]
 80091a0:	061b      	lsls	r3, r3, #24
 80091a2:	b09d      	sub	sp, #116	; 0x74
 80091a4:	4607      	mov	r7, r0
 80091a6:	460d      	mov	r5, r1
 80091a8:	4614      	mov	r4, r2
 80091aa:	d50e      	bpl.n	80091ca <_svfiprintf_r+0x32>
 80091ac:	690b      	ldr	r3, [r1, #16]
 80091ae:	b963      	cbnz	r3, 80091ca <_svfiprintf_r+0x32>
 80091b0:	2140      	movs	r1, #64	; 0x40
 80091b2:	f7ff ff0b 	bl	8008fcc <_malloc_r>
 80091b6:	6028      	str	r0, [r5, #0]
 80091b8:	6128      	str	r0, [r5, #16]
 80091ba:	b920      	cbnz	r0, 80091c6 <_svfiprintf_r+0x2e>
 80091bc:	230c      	movs	r3, #12
 80091be:	603b      	str	r3, [r7, #0]
 80091c0:	f04f 30ff 	mov.w	r0, #4294967295
 80091c4:	e0d0      	b.n	8009368 <_svfiprintf_r+0x1d0>
 80091c6:	2340      	movs	r3, #64	; 0x40
 80091c8:	616b      	str	r3, [r5, #20]
 80091ca:	2300      	movs	r3, #0
 80091cc:	9309      	str	r3, [sp, #36]	; 0x24
 80091ce:	2320      	movs	r3, #32
 80091d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80091d8:	2330      	movs	r3, #48	; 0x30
 80091da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009380 <_svfiprintf_r+0x1e8>
 80091de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091e2:	f04f 0901 	mov.w	r9, #1
 80091e6:	4623      	mov	r3, r4
 80091e8:	469a      	mov	sl, r3
 80091ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091ee:	b10a      	cbz	r2, 80091f4 <_svfiprintf_r+0x5c>
 80091f0:	2a25      	cmp	r2, #37	; 0x25
 80091f2:	d1f9      	bne.n	80091e8 <_svfiprintf_r+0x50>
 80091f4:	ebba 0b04 	subs.w	fp, sl, r4
 80091f8:	d00b      	beq.n	8009212 <_svfiprintf_r+0x7a>
 80091fa:	465b      	mov	r3, fp
 80091fc:	4622      	mov	r2, r4
 80091fe:	4629      	mov	r1, r5
 8009200:	4638      	mov	r0, r7
 8009202:	f7ff ff6f 	bl	80090e4 <__ssputs_r>
 8009206:	3001      	adds	r0, #1
 8009208:	f000 80a9 	beq.w	800935e <_svfiprintf_r+0x1c6>
 800920c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800920e:	445a      	add	r2, fp
 8009210:	9209      	str	r2, [sp, #36]	; 0x24
 8009212:	f89a 3000 	ldrb.w	r3, [sl]
 8009216:	2b00      	cmp	r3, #0
 8009218:	f000 80a1 	beq.w	800935e <_svfiprintf_r+0x1c6>
 800921c:	2300      	movs	r3, #0
 800921e:	f04f 32ff 	mov.w	r2, #4294967295
 8009222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009226:	f10a 0a01 	add.w	sl, sl, #1
 800922a:	9304      	str	r3, [sp, #16]
 800922c:	9307      	str	r3, [sp, #28]
 800922e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009232:	931a      	str	r3, [sp, #104]	; 0x68
 8009234:	4654      	mov	r4, sl
 8009236:	2205      	movs	r2, #5
 8009238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800923c:	4850      	ldr	r0, [pc, #320]	; (8009380 <_svfiprintf_r+0x1e8>)
 800923e:	f7f7 f85f 	bl	8000300 <memchr>
 8009242:	9a04      	ldr	r2, [sp, #16]
 8009244:	b9d8      	cbnz	r0, 800927e <_svfiprintf_r+0xe6>
 8009246:	06d0      	lsls	r0, r2, #27
 8009248:	bf44      	itt	mi
 800924a:	2320      	movmi	r3, #32
 800924c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009250:	0711      	lsls	r1, r2, #28
 8009252:	bf44      	itt	mi
 8009254:	232b      	movmi	r3, #43	; 0x2b
 8009256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800925a:	f89a 3000 	ldrb.w	r3, [sl]
 800925e:	2b2a      	cmp	r3, #42	; 0x2a
 8009260:	d015      	beq.n	800928e <_svfiprintf_r+0xf6>
 8009262:	9a07      	ldr	r2, [sp, #28]
 8009264:	4654      	mov	r4, sl
 8009266:	2000      	movs	r0, #0
 8009268:	f04f 0c0a 	mov.w	ip, #10
 800926c:	4621      	mov	r1, r4
 800926e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009272:	3b30      	subs	r3, #48	; 0x30
 8009274:	2b09      	cmp	r3, #9
 8009276:	d94d      	bls.n	8009314 <_svfiprintf_r+0x17c>
 8009278:	b1b0      	cbz	r0, 80092a8 <_svfiprintf_r+0x110>
 800927a:	9207      	str	r2, [sp, #28]
 800927c:	e014      	b.n	80092a8 <_svfiprintf_r+0x110>
 800927e:	eba0 0308 	sub.w	r3, r0, r8
 8009282:	fa09 f303 	lsl.w	r3, r9, r3
 8009286:	4313      	orrs	r3, r2
 8009288:	9304      	str	r3, [sp, #16]
 800928a:	46a2      	mov	sl, r4
 800928c:	e7d2      	b.n	8009234 <_svfiprintf_r+0x9c>
 800928e:	9b03      	ldr	r3, [sp, #12]
 8009290:	1d19      	adds	r1, r3, #4
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	9103      	str	r1, [sp, #12]
 8009296:	2b00      	cmp	r3, #0
 8009298:	bfbb      	ittet	lt
 800929a:	425b      	neglt	r3, r3
 800929c:	f042 0202 	orrlt.w	r2, r2, #2
 80092a0:	9307      	strge	r3, [sp, #28]
 80092a2:	9307      	strlt	r3, [sp, #28]
 80092a4:	bfb8      	it	lt
 80092a6:	9204      	strlt	r2, [sp, #16]
 80092a8:	7823      	ldrb	r3, [r4, #0]
 80092aa:	2b2e      	cmp	r3, #46	; 0x2e
 80092ac:	d10c      	bne.n	80092c8 <_svfiprintf_r+0x130>
 80092ae:	7863      	ldrb	r3, [r4, #1]
 80092b0:	2b2a      	cmp	r3, #42	; 0x2a
 80092b2:	d134      	bne.n	800931e <_svfiprintf_r+0x186>
 80092b4:	9b03      	ldr	r3, [sp, #12]
 80092b6:	1d1a      	adds	r2, r3, #4
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	9203      	str	r2, [sp, #12]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	bfb8      	it	lt
 80092c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80092c4:	3402      	adds	r4, #2
 80092c6:	9305      	str	r3, [sp, #20]
 80092c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009390 <_svfiprintf_r+0x1f8>
 80092cc:	7821      	ldrb	r1, [r4, #0]
 80092ce:	2203      	movs	r2, #3
 80092d0:	4650      	mov	r0, sl
 80092d2:	f7f7 f815 	bl	8000300 <memchr>
 80092d6:	b138      	cbz	r0, 80092e8 <_svfiprintf_r+0x150>
 80092d8:	9b04      	ldr	r3, [sp, #16]
 80092da:	eba0 000a 	sub.w	r0, r0, sl
 80092de:	2240      	movs	r2, #64	; 0x40
 80092e0:	4082      	lsls	r2, r0
 80092e2:	4313      	orrs	r3, r2
 80092e4:	3401      	adds	r4, #1
 80092e6:	9304      	str	r3, [sp, #16]
 80092e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ec:	4825      	ldr	r0, [pc, #148]	; (8009384 <_svfiprintf_r+0x1ec>)
 80092ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092f2:	2206      	movs	r2, #6
 80092f4:	f7f7 f804 	bl	8000300 <memchr>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d038      	beq.n	800936e <_svfiprintf_r+0x1d6>
 80092fc:	4b22      	ldr	r3, [pc, #136]	; (8009388 <_svfiprintf_r+0x1f0>)
 80092fe:	bb1b      	cbnz	r3, 8009348 <_svfiprintf_r+0x1b0>
 8009300:	9b03      	ldr	r3, [sp, #12]
 8009302:	3307      	adds	r3, #7
 8009304:	f023 0307 	bic.w	r3, r3, #7
 8009308:	3308      	adds	r3, #8
 800930a:	9303      	str	r3, [sp, #12]
 800930c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800930e:	4433      	add	r3, r6
 8009310:	9309      	str	r3, [sp, #36]	; 0x24
 8009312:	e768      	b.n	80091e6 <_svfiprintf_r+0x4e>
 8009314:	fb0c 3202 	mla	r2, ip, r2, r3
 8009318:	460c      	mov	r4, r1
 800931a:	2001      	movs	r0, #1
 800931c:	e7a6      	b.n	800926c <_svfiprintf_r+0xd4>
 800931e:	2300      	movs	r3, #0
 8009320:	3401      	adds	r4, #1
 8009322:	9305      	str	r3, [sp, #20]
 8009324:	4619      	mov	r1, r3
 8009326:	f04f 0c0a 	mov.w	ip, #10
 800932a:	4620      	mov	r0, r4
 800932c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009330:	3a30      	subs	r2, #48	; 0x30
 8009332:	2a09      	cmp	r2, #9
 8009334:	d903      	bls.n	800933e <_svfiprintf_r+0x1a6>
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0c6      	beq.n	80092c8 <_svfiprintf_r+0x130>
 800933a:	9105      	str	r1, [sp, #20]
 800933c:	e7c4      	b.n	80092c8 <_svfiprintf_r+0x130>
 800933e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009342:	4604      	mov	r4, r0
 8009344:	2301      	movs	r3, #1
 8009346:	e7f0      	b.n	800932a <_svfiprintf_r+0x192>
 8009348:	ab03      	add	r3, sp, #12
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	462a      	mov	r2, r5
 800934e:	4b0f      	ldr	r3, [pc, #60]	; (800938c <_svfiprintf_r+0x1f4>)
 8009350:	a904      	add	r1, sp, #16
 8009352:	4638      	mov	r0, r7
 8009354:	f3af 8000 	nop.w
 8009358:	1c42      	adds	r2, r0, #1
 800935a:	4606      	mov	r6, r0
 800935c:	d1d6      	bne.n	800930c <_svfiprintf_r+0x174>
 800935e:	89ab      	ldrh	r3, [r5, #12]
 8009360:	065b      	lsls	r3, r3, #25
 8009362:	f53f af2d 	bmi.w	80091c0 <_svfiprintf_r+0x28>
 8009366:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009368:	b01d      	add	sp, #116	; 0x74
 800936a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936e:	ab03      	add	r3, sp, #12
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	462a      	mov	r2, r5
 8009374:	4b05      	ldr	r3, [pc, #20]	; (800938c <_svfiprintf_r+0x1f4>)
 8009376:	a904      	add	r1, sp, #16
 8009378:	4638      	mov	r0, r7
 800937a:	f000 f879 	bl	8009470 <_printf_i>
 800937e:	e7eb      	b.n	8009358 <_svfiprintf_r+0x1c0>
 8009380:	080097e8 	.word	0x080097e8
 8009384:	080097f2 	.word	0x080097f2
 8009388:	00000000 	.word	0x00000000
 800938c:	080090e5 	.word	0x080090e5
 8009390:	080097ee 	.word	0x080097ee

08009394 <_printf_common>:
 8009394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009398:	4616      	mov	r6, r2
 800939a:	4699      	mov	r9, r3
 800939c:	688a      	ldr	r2, [r1, #8]
 800939e:	690b      	ldr	r3, [r1, #16]
 80093a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093a4:	4293      	cmp	r3, r2
 80093a6:	bfb8      	it	lt
 80093a8:	4613      	movlt	r3, r2
 80093aa:	6033      	str	r3, [r6, #0]
 80093ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093b0:	4607      	mov	r7, r0
 80093b2:	460c      	mov	r4, r1
 80093b4:	b10a      	cbz	r2, 80093ba <_printf_common+0x26>
 80093b6:	3301      	adds	r3, #1
 80093b8:	6033      	str	r3, [r6, #0]
 80093ba:	6823      	ldr	r3, [r4, #0]
 80093bc:	0699      	lsls	r1, r3, #26
 80093be:	bf42      	ittt	mi
 80093c0:	6833      	ldrmi	r3, [r6, #0]
 80093c2:	3302      	addmi	r3, #2
 80093c4:	6033      	strmi	r3, [r6, #0]
 80093c6:	6825      	ldr	r5, [r4, #0]
 80093c8:	f015 0506 	ands.w	r5, r5, #6
 80093cc:	d106      	bne.n	80093dc <_printf_common+0x48>
 80093ce:	f104 0a19 	add.w	sl, r4, #25
 80093d2:	68e3      	ldr	r3, [r4, #12]
 80093d4:	6832      	ldr	r2, [r6, #0]
 80093d6:	1a9b      	subs	r3, r3, r2
 80093d8:	42ab      	cmp	r3, r5
 80093da:	dc26      	bgt.n	800942a <_printf_common+0x96>
 80093dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093e0:	1e13      	subs	r3, r2, #0
 80093e2:	6822      	ldr	r2, [r4, #0]
 80093e4:	bf18      	it	ne
 80093e6:	2301      	movne	r3, #1
 80093e8:	0692      	lsls	r2, r2, #26
 80093ea:	d42b      	bmi.n	8009444 <_printf_common+0xb0>
 80093ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093f0:	4649      	mov	r1, r9
 80093f2:	4638      	mov	r0, r7
 80093f4:	47c0      	blx	r8
 80093f6:	3001      	adds	r0, #1
 80093f8:	d01e      	beq.n	8009438 <_printf_common+0xa4>
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	6922      	ldr	r2, [r4, #16]
 80093fe:	f003 0306 	and.w	r3, r3, #6
 8009402:	2b04      	cmp	r3, #4
 8009404:	bf02      	ittt	eq
 8009406:	68e5      	ldreq	r5, [r4, #12]
 8009408:	6833      	ldreq	r3, [r6, #0]
 800940a:	1aed      	subeq	r5, r5, r3
 800940c:	68a3      	ldr	r3, [r4, #8]
 800940e:	bf0c      	ite	eq
 8009410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009414:	2500      	movne	r5, #0
 8009416:	4293      	cmp	r3, r2
 8009418:	bfc4      	itt	gt
 800941a:	1a9b      	subgt	r3, r3, r2
 800941c:	18ed      	addgt	r5, r5, r3
 800941e:	2600      	movs	r6, #0
 8009420:	341a      	adds	r4, #26
 8009422:	42b5      	cmp	r5, r6
 8009424:	d11a      	bne.n	800945c <_printf_common+0xc8>
 8009426:	2000      	movs	r0, #0
 8009428:	e008      	b.n	800943c <_printf_common+0xa8>
 800942a:	2301      	movs	r3, #1
 800942c:	4652      	mov	r2, sl
 800942e:	4649      	mov	r1, r9
 8009430:	4638      	mov	r0, r7
 8009432:	47c0      	blx	r8
 8009434:	3001      	adds	r0, #1
 8009436:	d103      	bne.n	8009440 <_printf_common+0xac>
 8009438:	f04f 30ff 	mov.w	r0, #4294967295
 800943c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009440:	3501      	adds	r5, #1
 8009442:	e7c6      	b.n	80093d2 <_printf_common+0x3e>
 8009444:	18e1      	adds	r1, r4, r3
 8009446:	1c5a      	adds	r2, r3, #1
 8009448:	2030      	movs	r0, #48	; 0x30
 800944a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800944e:	4422      	add	r2, r4
 8009450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009458:	3302      	adds	r3, #2
 800945a:	e7c7      	b.n	80093ec <_printf_common+0x58>
 800945c:	2301      	movs	r3, #1
 800945e:	4622      	mov	r2, r4
 8009460:	4649      	mov	r1, r9
 8009462:	4638      	mov	r0, r7
 8009464:	47c0      	blx	r8
 8009466:	3001      	adds	r0, #1
 8009468:	d0e6      	beq.n	8009438 <_printf_common+0xa4>
 800946a:	3601      	adds	r6, #1
 800946c:	e7d9      	b.n	8009422 <_printf_common+0x8e>
	...

08009470 <_printf_i>:
 8009470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009474:	7e0f      	ldrb	r7, [r1, #24]
 8009476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009478:	2f78      	cmp	r7, #120	; 0x78
 800947a:	4691      	mov	r9, r2
 800947c:	4680      	mov	r8, r0
 800947e:	460c      	mov	r4, r1
 8009480:	469a      	mov	sl, r3
 8009482:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009486:	d807      	bhi.n	8009498 <_printf_i+0x28>
 8009488:	2f62      	cmp	r7, #98	; 0x62
 800948a:	d80a      	bhi.n	80094a2 <_printf_i+0x32>
 800948c:	2f00      	cmp	r7, #0
 800948e:	f000 80d4 	beq.w	800963a <_printf_i+0x1ca>
 8009492:	2f58      	cmp	r7, #88	; 0x58
 8009494:	f000 80c0 	beq.w	8009618 <_printf_i+0x1a8>
 8009498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800949c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094a0:	e03a      	b.n	8009518 <_printf_i+0xa8>
 80094a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094a6:	2b15      	cmp	r3, #21
 80094a8:	d8f6      	bhi.n	8009498 <_printf_i+0x28>
 80094aa:	a101      	add	r1, pc, #4	; (adr r1, 80094b0 <_printf_i+0x40>)
 80094ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094b0:	08009509 	.word	0x08009509
 80094b4:	0800951d 	.word	0x0800951d
 80094b8:	08009499 	.word	0x08009499
 80094bc:	08009499 	.word	0x08009499
 80094c0:	08009499 	.word	0x08009499
 80094c4:	08009499 	.word	0x08009499
 80094c8:	0800951d 	.word	0x0800951d
 80094cc:	08009499 	.word	0x08009499
 80094d0:	08009499 	.word	0x08009499
 80094d4:	08009499 	.word	0x08009499
 80094d8:	08009499 	.word	0x08009499
 80094dc:	08009621 	.word	0x08009621
 80094e0:	08009549 	.word	0x08009549
 80094e4:	080095db 	.word	0x080095db
 80094e8:	08009499 	.word	0x08009499
 80094ec:	08009499 	.word	0x08009499
 80094f0:	08009643 	.word	0x08009643
 80094f4:	08009499 	.word	0x08009499
 80094f8:	08009549 	.word	0x08009549
 80094fc:	08009499 	.word	0x08009499
 8009500:	08009499 	.word	0x08009499
 8009504:	080095e3 	.word	0x080095e3
 8009508:	682b      	ldr	r3, [r5, #0]
 800950a:	1d1a      	adds	r2, r3, #4
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	602a      	str	r2, [r5, #0]
 8009510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009518:	2301      	movs	r3, #1
 800951a:	e09f      	b.n	800965c <_printf_i+0x1ec>
 800951c:	6820      	ldr	r0, [r4, #0]
 800951e:	682b      	ldr	r3, [r5, #0]
 8009520:	0607      	lsls	r7, r0, #24
 8009522:	f103 0104 	add.w	r1, r3, #4
 8009526:	6029      	str	r1, [r5, #0]
 8009528:	d501      	bpl.n	800952e <_printf_i+0xbe>
 800952a:	681e      	ldr	r6, [r3, #0]
 800952c:	e003      	b.n	8009536 <_printf_i+0xc6>
 800952e:	0646      	lsls	r6, r0, #25
 8009530:	d5fb      	bpl.n	800952a <_printf_i+0xba>
 8009532:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009536:	2e00      	cmp	r6, #0
 8009538:	da03      	bge.n	8009542 <_printf_i+0xd2>
 800953a:	232d      	movs	r3, #45	; 0x2d
 800953c:	4276      	negs	r6, r6
 800953e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009542:	485a      	ldr	r0, [pc, #360]	; (80096ac <_printf_i+0x23c>)
 8009544:	230a      	movs	r3, #10
 8009546:	e012      	b.n	800956e <_printf_i+0xfe>
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	6820      	ldr	r0, [r4, #0]
 800954c:	1d19      	adds	r1, r3, #4
 800954e:	6029      	str	r1, [r5, #0]
 8009550:	0605      	lsls	r5, r0, #24
 8009552:	d501      	bpl.n	8009558 <_printf_i+0xe8>
 8009554:	681e      	ldr	r6, [r3, #0]
 8009556:	e002      	b.n	800955e <_printf_i+0xee>
 8009558:	0641      	lsls	r1, r0, #25
 800955a:	d5fb      	bpl.n	8009554 <_printf_i+0xe4>
 800955c:	881e      	ldrh	r6, [r3, #0]
 800955e:	4853      	ldr	r0, [pc, #332]	; (80096ac <_printf_i+0x23c>)
 8009560:	2f6f      	cmp	r7, #111	; 0x6f
 8009562:	bf0c      	ite	eq
 8009564:	2308      	moveq	r3, #8
 8009566:	230a      	movne	r3, #10
 8009568:	2100      	movs	r1, #0
 800956a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800956e:	6865      	ldr	r5, [r4, #4]
 8009570:	60a5      	str	r5, [r4, #8]
 8009572:	2d00      	cmp	r5, #0
 8009574:	bfa2      	ittt	ge
 8009576:	6821      	ldrge	r1, [r4, #0]
 8009578:	f021 0104 	bicge.w	r1, r1, #4
 800957c:	6021      	strge	r1, [r4, #0]
 800957e:	b90e      	cbnz	r6, 8009584 <_printf_i+0x114>
 8009580:	2d00      	cmp	r5, #0
 8009582:	d04b      	beq.n	800961c <_printf_i+0x1ac>
 8009584:	4615      	mov	r5, r2
 8009586:	fbb6 f1f3 	udiv	r1, r6, r3
 800958a:	fb03 6711 	mls	r7, r3, r1, r6
 800958e:	5dc7      	ldrb	r7, [r0, r7]
 8009590:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009594:	4637      	mov	r7, r6
 8009596:	42bb      	cmp	r3, r7
 8009598:	460e      	mov	r6, r1
 800959a:	d9f4      	bls.n	8009586 <_printf_i+0x116>
 800959c:	2b08      	cmp	r3, #8
 800959e:	d10b      	bne.n	80095b8 <_printf_i+0x148>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	07de      	lsls	r6, r3, #31
 80095a4:	d508      	bpl.n	80095b8 <_printf_i+0x148>
 80095a6:	6923      	ldr	r3, [r4, #16]
 80095a8:	6861      	ldr	r1, [r4, #4]
 80095aa:	4299      	cmp	r1, r3
 80095ac:	bfde      	ittt	le
 80095ae:	2330      	movle	r3, #48	; 0x30
 80095b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095b8:	1b52      	subs	r2, r2, r5
 80095ba:	6122      	str	r2, [r4, #16]
 80095bc:	f8cd a000 	str.w	sl, [sp]
 80095c0:	464b      	mov	r3, r9
 80095c2:	aa03      	add	r2, sp, #12
 80095c4:	4621      	mov	r1, r4
 80095c6:	4640      	mov	r0, r8
 80095c8:	f7ff fee4 	bl	8009394 <_printf_common>
 80095cc:	3001      	adds	r0, #1
 80095ce:	d14a      	bne.n	8009666 <_printf_i+0x1f6>
 80095d0:	f04f 30ff 	mov.w	r0, #4294967295
 80095d4:	b004      	add	sp, #16
 80095d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095da:	6823      	ldr	r3, [r4, #0]
 80095dc:	f043 0320 	orr.w	r3, r3, #32
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	4833      	ldr	r0, [pc, #204]	; (80096b0 <_printf_i+0x240>)
 80095e4:	2778      	movs	r7, #120	; 0x78
 80095e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	6829      	ldr	r1, [r5, #0]
 80095ee:	061f      	lsls	r7, r3, #24
 80095f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80095f4:	d402      	bmi.n	80095fc <_printf_i+0x18c>
 80095f6:	065f      	lsls	r7, r3, #25
 80095f8:	bf48      	it	mi
 80095fa:	b2b6      	uxthmi	r6, r6
 80095fc:	07df      	lsls	r7, r3, #31
 80095fe:	bf48      	it	mi
 8009600:	f043 0320 	orrmi.w	r3, r3, #32
 8009604:	6029      	str	r1, [r5, #0]
 8009606:	bf48      	it	mi
 8009608:	6023      	strmi	r3, [r4, #0]
 800960a:	b91e      	cbnz	r6, 8009614 <_printf_i+0x1a4>
 800960c:	6823      	ldr	r3, [r4, #0]
 800960e:	f023 0320 	bic.w	r3, r3, #32
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	2310      	movs	r3, #16
 8009616:	e7a7      	b.n	8009568 <_printf_i+0xf8>
 8009618:	4824      	ldr	r0, [pc, #144]	; (80096ac <_printf_i+0x23c>)
 800961a:	e7e4      	b.n	80095e6 <_printf_i+0x176>
 800961c:	4615      	mov	r5, r2
 800961e:	e7bd      	b.n	800959c <_printf_i+0x12c>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	6826      	ldr	r6, [r4, #0]
 8009624:	6961      	ldr	r1, [r4, #20]
 8009626:	1d18      	adds	r0, r3, #4
 8009628:	6028      	str	r0, [r5, #0]
 800962a:	0635      	lsls	r5, r6, #24
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	d501      	bpl.n	8009634 <_printf_i+0x1c4>
 8009630:	6019      	str	r1, [r3, #0]
 8009632:	e002      	b.n	800963a <_printf_i+0x1ca>
 8009634:	0670      	lsls	r0, r6, #25
 8009636:	d5fb      	bpl.n	8009630 <_printf_i+0x1c0>
 8009638:	8019      	strh	r1, [r3, #0]
 800963a:	2300      	movs	r3, #0
 800963c:	6123      	str	r3, [r4, #16]
 800963e:	4615      	mov	r5, r2
 8009640:	e7bc      	b.n	80095bc <_printf_i+0x14c>
 8009642:	682b      	ldr	r3, [r5, #0]
 8009644:	1d1a      	adds	r2, r3, #4
 8009646:	602a      	str	r2, [r5, #0]
 8009648:	681d      	ldr	r5, [r3, #0]
 800964a:	6862      	ldr	r2, [r4, #4]
 800964c:	2100      	movs	r1, #0
 800964e:	4628      	mov	r0, r5
 8009650:	f7f6 fe56 	bl	8000300 <memchr>
 8009654:	b108      	cbz	r0, 800965a <_printf_i+0x1ea>
 8009656:	1b40      	subs	r0, r0, r5
 8009658:	6060      	str	r0, [r4, #4]
 800965a:	6863      	ldr	r3, [r4, #4]
 800965c:	6123      	str	r3, [r4, #16]
 800965e:	2300      	movs	r3, #0
 8009660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009664:	e7aa      	b.n	80095bc <_printf_i+0x14c>
 8009666:	6923      	ldr	r3, [r4, #16]
 8009668:	462a      	mov	r2, r5
 800966a:	4649      	mov	r1, r9
 800966c:	4640      	mov	r0, r8
 800966e:	47d0      	blx	sl
 8009670:	3001      	adds	r0, #1
 8009672:	d0ad      	beq.n	80095d0 <_printf_i+0x160>
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	079b      	lsls	r3, r3, #30
 8009678:	d413      	bmi.n	80096a2 <_printf_i+0x232>
 800967a:	68e0      	ldr	r0, [r4, #12]
 800967c:	9b03      	ldr	r3, [sp, #12]
 800967e:	4298      	cmp	r0, r3
 8009680:	bfb8      	it	lt
 8009682:	4618      	movlt	r0, r3
 8009684:	e7a6      	b.n	80095d4 <_printf_i+0x164>
 8009686:	2301      	movs	r3, #1
 8009688:	4632      	mov	r2, r6
 800968a:	4649      	mov	r1, r9
 800968c:	4640      	mov	r0, r8
 800968e:	47d0      	blx	sl
 8009690:	3001      	adds	r0, #1
 8009692:	d09d      	beq.n	80095d0 <_printf_i+0x160>
 8009694:	3501      	adds	r5, #1
 8009696:	68e3      	ldr	r3, [r4, #12]
 8009698:	9903      	ldr	r1, [sp, #12]
 800969a:	1a5b      	subs	r3, r3, r1
 800969c:	42ab      	cmp	r3, r5
 800969e:	dcf2      	bgt.n	8009686 <_printf_i+0x216>
 80096a0:	e7eb      	b.n	800967a <_printf_i+0x20a>
 80096a2:	2500      	movs	r5, #0
 80096a4:	f104 0619 	add.w	r6, r4, #25
 80096a8:	e7f5      	b.n	8009696 <_printf_i+0x226>
 80096aa:	bf00      	nop
 80096ac:	080097f9 	.word	0x080097f9
 80096b0:	0800980a 	.word	0x0800980a

080096b4 <memmove>:
 80096b4:	4288      	cmp	r0, r1
 80096b6:	b510      	push	{r4, lr}
 80096b8:	eb01 0402 	add.w	r4, r1, r2
 80096bc:	d902      	bls.n	80096c4 <memmove+0x10>
 80096be:	4284      	cmp	r4, r0
 80096c0:	4623      	mov	r3, r4
 80096c2:	d807      	bhi.n	80096d4 <memmove+0x20>
 80096c4:	1e43      	subs	r3, r0, #1
 80096c6:	42a1      	cmp	r1, r4
 80096c8:	d008      	beq.n	80096dc <memmove+0x28>
 80096ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096d2:	e7f8      	b.n	80096c6 <memmove+0x12>
 80096d4:	4402      	add	r2, r0
 80096d6:	4601      	mov	r1, r0
 80096d8:	428a      	cmp	r2, r1
 80096da:	d100      	bne.n	80096de <memmove+0x2a>
 80096dc:	bd10      	pop	{r4, pc}
 80096de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096e6:	e7f7      	b.n	80096d8 <memmove+0x24>

080096e8 <_sbrk_r>:
 80096e8:	b538      	push	{r3, r4, r5, lr}
 80096ea:	4d06      	ldr	r5, [pc, #24]	; (8009704 <_sbrk_r+0x1c>)
 80096ec:	2300      	movs	r3, #0
 80096ee:	4604      	mov	r4, r0
 80096f0:	4608      	mov	r0, r1
 80096f2:	602b      	str	r3, [r5, #0]
 80096f4:	f7f8 f98e 	bl	8001a14 <_sbrk>
 80096f8:	1c43      	adds	r3, r0, #1
 80096fa:	d102      	bne.n	8009702 <_sbrk_r+0x1a>
 80096fc:	682b      	ldr	r3, [r5, #0]
 80096fe:	b103      	cbz	r3, 8009702 <_sbrk_r+0x1a>
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	2400ee54 	.word	0x2400ee54

08009708 <memcpy>:
 8009708:	440a      	add	r2, r1
 800970a:	4291      	cmp	r1, r2
 800970c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009710:	d100      	bne.n	8009714 <memcpy+0xc>
 8009712:	4770      	bx	lr
 8009714:	b510      	push	{r4, lr}
 8009716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800971a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800971e:	4291      	cmp	r1, r2
 8009720:	d1f9      	bne.n	8009716 <memcpy+0xe>
 8009722:	bd10      	pop	{r4, pc}

08009724 <_realloc_r>:
 8009724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009728:	4680      	mov	r8, r0
 800972a:	4614      	mov	r4, r2
 800972c:	460e      	mov	r6, r1
 800972e:	b921      	cbnz	r1, 800973a <_realloc_r+0x16>
 8009730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009734:	4611      	mov	r1, r2
 8009736:	f7ff bc49 	b.w	8008fcc <_malloc_r>
 800973a:	b92a      	cbnz	r2, 8009748 <_realloc_r+0x24>
 800973c:	f7ff fbda 	bl	8008ef4 <_free_r>
 8009740:	4625      	mov	r5, r4
 8009742:	4628      	mov	r0, r5
 8009744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009748:	f000 f81b 	bl	8009782 <_malloc_usable_size_r>
 800974c:	4284      	cmp	r4, r0
 800974e:	4607      	mov	r7, r0
 8009750:	d802      	bhi.n	8009758 <_realloc_r+0x34>
 8009752:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009756:	d812      	bhi.n	800977e <_realloc_r+0x5a>
 8009758:	4621      	mov	r1, r4
 800975a:	4640      	mov	r0, r8
 800975c:	f7ff fc36 	bl	8008fcc <_malloc_r>
 8009760:	4605      	mov	r5, r0
 8009762:	2800      	cmp	r0, #0
 8009764:	d0ed      	beq.n	8009742 <_realloc_r+0x1e>
 8009766:	42bc      	cmp	r4, r7
 8009768:	4622      	mov	r2, r4
 800976a:	4631      	mov	r1, r6
 800976c:	bf28      	it	cs
 800976e:	463a      	movcs	r2, r7
 8009770:	f7ff ffca 	bl	8009708 <memcpy>
 8009774:	4631      	mov	r1, r6
 8009776:	4640      	mov	r0, r8
 8009778:	f7ff fbbc 	bl	8008ef4 <_free_r>
 800977c:	e7e1      	b.n	8009742 <_realloc_r+0x1e>
 800977e:	4635      	mov	r5, r6
 8009780:	e7df      	b.n	8009742 <_realloc_r+0x1e>

08009782 <_malloc_usable_size_r>:
 8009782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009786:	1f18      	subs	r0, r3, #4
 8009788:	2b00      	cmp	r3, #0
 800978a:	bfbc      	itt	lt
 800978c:	580b      	ldrlt	r3, [r1, r0]
 800978e:	18c0      	addlt	r0, r0, r3
 8009790:	4770      	bx	lr
	...

08009794 <_init>:
 8009794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009796:	bf00      	nop
 8009798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979a:	bc08      	pop	{r3}
 800979c:	469e      	mov	lr, r3
 800979e:	4770      	bx	lr

080097a0 <_fini>:
 80097a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a2:	bf00      	nop
 80097a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097a6:	bc08      	pop	{r3}
 80097a8:	469e      	mov	lr, r3
 80097aa:	4770      	bx	lr
