
PlungeCooler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acb8  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800af68  0800af68  0001af68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b0b8  0800b0b8  0001b0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b0c0  0800b0c0  0001b0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b0c4  0800b0c4  0001b0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0800b0c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001fc  2400007c  0800b144  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000278  0800b144  00020278  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000178c4  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002694  00000000  00000000  0003796e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001110  00000000  00000000  0003a008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001038  00000000  00000000  0003b118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030a36  00000000  00000000  0003c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016cba  00000000  00000000  0006cb86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014042d  00000000  00000000  00083840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c3c6d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004cc0  00000000  00000000  001c3cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800af50 	.word	0x0800af50

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	0800af50 	.word	0x0800af50

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	db0b      	blt.n	80006ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	f003 021f 	and.w	r2, r3, #31
 80006bc:	4907      	ldr	r1, [pc, #28]	; (80006dc <__NVIC_EnableIRQ+0x38>)
 80006be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c2:	095b      	lsrs	r3, r3, #5
 80006c4:	2001      	movs	r0, #1
 80006c6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	db0a      	blt.n	800070a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	490c      	ldr	r1, [pc, #48]	; (800072c <__NVIC_SetPriority+0x4c>)
 80006fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006fe:	0112      	lsls	r2, r2, #4
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	440b      	add	r3, r1
 8000704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000708:	e00a      	b.n	8000720 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4908      	ldr	r1, [pc, #32]	; (8000730 <__NVIC_SetPriority+0x50>)
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	f003 030f 	and.w	r3, r3, #15
 8000716:	3b04      	subs	r3, #4
 8000718:	0112      	lsls	r2, r2, #4
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	440b      	add	r3, r1
 800071e:	761a      	strb	r2, [r3, #24]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000e100 	.word	0xe000e100
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <move_tilt_steps>:
uint32_t posLog[LOG_SIZE];
uint32_t log_position;
uint8_t rxFlag = 0;

/*** MOTOR CONTROL FUNCTIONS ***/
void move_tilt_steps(uint32_t delay, uint8_t dir, uint32_t num_steps) {
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b08b      	sub	sp, #44	; 0x2c
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	460b      	mov	r3, r1
 800073e:	607a      	str	r2, [r7, #4]
 8000740:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(TILT_EN_GPIO_Port, TILT_EN_Pin, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2140      	movs	r1, #64	; 0x40
 8000746:	4824      	ldr	r0, [pc, #144]	; (80007d8 <move_tilt_steps+0xa4>)
 8000748:	f003 fef8 	bl	800453c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TILT_DIR_GPIO_Port, TILT_DIR_Pin, dir);
 800074c:	7afb      	ldrb	r3, [r7, #11]
 800074e:	461a      	mov	r2, r3
 8000750:	2120      	movs	r1, #32
 8000752:	4821      	ldr	r0, [pc, #132]	; (80007d8 <move_tilt_steps+0xa4>)
 8000754:	f003 fef2 	bl	800453c <HAL_GPIO_WritePin>
	for(int i=0; i<num_steps; i++) {
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
 800075c:	e012      	b.n	8000784 <move_tilt_steps+0x50>
		HAL_GPIO_WritePin(TILT_STP_GPIO_Port, TILT_STP_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	2120      	movs	r1, #32
 8000762:	481e      	ldr	r0, [pc, #120]	; (80007dc <move_tilt_steps+0xa8>)
 8000764:	f003 feea 	bl	800453c <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000768:	68f8      	ldr	r0, [r7, #12]
 800076a:	f001 f951 	bl	8001a10 <HAL_Delay>
		HAL_GPIO_WritePin(TILT_STP_GPIO_Port, TILT_STP_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2120      	movs	r1, #32
 8000772:	481a      	ldr	r0, [pc, #104]	; (80007dc <move_tilt_steps+0xa8>)
 8000774:	f003 fee2 	bl	800453c <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000778:	68f8      	ldr	r0, [r7, #12]
 800077a:	f001 f949 	bl	8001a10 <HAL_Delay>
	for(int i=0; i<num_steps; i++) {
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	3301      	adds	r3, #1
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
 8000784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	429a      	cmp	r2, r3
 800078a:	d8e8      	bhi.n	800075e <move_tilt_steps+0x2a>


	}
	char b[] = "done steps\r\n";
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <move_tilt_steps+0xac>)
 800078e:	f107 0414 	add.w	r4, r7, #20
 8000792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000794:	c407      	stmia	r4!, {r0, r1, r2}
 8000796:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fda7 	bl	80002f0 <strlen>
 80007a2:	4603      	mov	r3, r0
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	f107 0114 	add.w	r1, r7, #20
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <move_tilt_steps+0xb0>)
 80007b0:	f007 fa52 	bl	8007c58 <HAL_UART_Transmit>

	tiltPos += num_steps * (1 - 2 * dir); // + if dir is 0, else -
 80007b4:	7afb      	ldrb	r3, [r7, #11]
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	f1c3 0301 	rsb	r3, r3, #1
 80007bc:	461a      	mov	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	fb02 f303 	mul.w	r3, r2, r3
 80007c4:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <move_tilt_steps+0xb4>)
 80007c6:	6812      	ldr	r2, [r2, #0]
 80007c8:	4413      	add	r3, r2
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <move_tilt_steps+0xb4>)
 80007ce:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(TILT_EN_GPIO_Port, TILT_EN_Pin, 1);

}
 80007d0:	bf00      	nop
 80007d2:	372c      	adds	r7, #44	; 0x2c
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd90      	pop	{r4, r7, pc}
 80007d8:	58020000 	.word	0x58020000
 80007dc:	58020800 	.word	0x58020800
 80007e0:	0800af68 	.word	0x0800af68
 80007e4:	240001a8 	.word	0x240001a8
 80007e8:	24000254 	.word	0x24000254

080007ec <move_tilt_deg>:

void move_tilt_deg(uint32_t degrees, uint8_t dir) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	move_tilt_steps(TILT_DEFAULT_DELAY, dir, degrees*TILT_DEG_TO_STEPS);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	22c8      	movs	r2, #200	; 0xc8
 80007fc:	fb03 f202 	mul.w	r2, r3, r2
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	4619      	mov	r1, r3
 8000804:	200a      	movs	r0, #10
 8000806:	f7ff ff95 	bl	8000734 <move_tilt_steps>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <move_pan_steps>:

void move_pan_steps(uint32_t delay, uint8_t dir, uint32_t num_steps) {
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b08b      	sub	sp, #44	; 0x2c
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	460b      	mov	r3, r1
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(PAN_EN_GPIO_Port, PAN_EN_Pin, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000828:	4824      	ldr	r0, [pc, #144]	; (80008bc <move_pan_steps+0xa8>)
 800082a:	f003 fe87 	bl	800453c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PAN_DIR_GPIO_Port, PAN_DIR_Pin, dir);
 800082e:	7afb      	ldrb	r3, [r7, #11]
 8000830:	461a      	mov	r2, r3
 8000832:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000836:	4821      	ldr	r0, [pc, #132]	; (80008bc <move_pan_steps+0xa8>)
 8000838:	f003 fe80 	bl	800453c <HAL_GPIO_WritePin>
	for(int i=0; i<num_steps; i++) {
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
 8000840:	e012      	b.n	8000868 <move_pan_steps+0x54>
		HAL_GPIO_WritePin(PAN_STP_GPIO_Port, PAN_STP_Pin, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	481e      	ldr	r0, [pc, #120]	; (80008c0 <move_pan_steps+0xac>)
 8000848:	f003 fe78 	bl	800453c <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 800084c:	68f8      	ldr	r0, [r7, #12]
 800084e:	f001 f8df 	bl	8001a10 <HAL_Delay>
		HAL_GPIO_WritePin(PAN_STP_GPIO_Port, PAN_STP_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2140      	movs	r1, #64	; 0x40
 8000856:	481a      	ldr	r0, [pc, #104]	; (80008c0 <move_pan_steps+0xac>)
 8000858:	f003 fe70 	bl	800453c <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	f001 f8d7 	bl	8001a10 <HAL_Delay>
	for(int i=0; i<num_steps; i++) {
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	3301      	adds	r3, #1
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
 8000868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	429a      	cmp	r2, r3
 800086e:	d8e8      	bhi.n	8000842 <move_pan_steps+0x2e>
	}
	char b[] = "done steps\r\n";
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <move_pan_steps+0xb0>)
 8000872:	f107 0414 	add.w	r4, r7, #20
 8000876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000878:	c407      	stmia	r4!, {r0, r1, r2}
 800087a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fd35 	bl	80002f0 <strlen>
 8000886:	4603      	mov	r3, r0
 8000888:	b29a      	uxth	r2, r3
 800088a:	f107 0114 	add.w	r1, r7, #20
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
 8000892:	480d      	ldr	r0, [pc, #52]	; (80008c8 <move_pan_steps+0xb4>)
 8000894:	f007 f9e0 	bl	8007c58 <HAL_UART_Transmit>

	panPos += num_steps * (1 - 2 * dir); // + if dir is 0, else -
 8000898:	7afb      	ldrb	r3, [r7, #11]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	f1c3 0301 	rsb	r3, r3, #1
 80008a0:	461a      	mov	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	fb02 f303 	mul.w	r3, r2, r3
 80008a8:	4a08      	ldr	r2, [pc, #32]	; (80008cc <move_pan_steps+0xb8>)
 80008aa:	6812      	ldr	r2, [r2, #0]
 80008ac:	4413      	add	r3, r2
 80008ae:	461a      	mov	r2, r3
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <move_pan_steps+0xb8>)
 80008b2:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(PAN_EN_GPIO_Port, PAN_EN_Pin, 1);

}
 80008b4:	bf00      	nop
 80008b6:	372c      	adds	r7, #44	; 0x2c
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	58020400 	.word	0x58020400
 80008c0:	58020800 	.word	0x58020800
 80008c4:	0800af68 	.word	0x0800af68
 80008c8:	240001a8 	.word	0x240001a8
 80008cc:	24000250 	.word	0x24000250

080008d0 <move_pan_deg>:

void move_pan_deg(uint32_t degrees, uint8_t dir) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
	move_pan_steps(PAN_DEFAULT_DELAY, dir, degrees*PAN_DEG_TO_STEPS);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	22c8      	movs	r2, #200	; 0xc8
 80008e0:	fb03 f202 	mul.w	r2, r3, r2
 80008e4:	78fb      	ldrb	r3, [r7, #3]
 80008e6:	4619      	mov	r1, r3
 80008e8:	200a      	movs	r0, #10
 80008ea:	f7ff ff93 	bl	8000814 <move_pan_steps>
	char pos[30];
	sprintf(pos, "panPos: %d\r\n", panPos);
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <move_pan_deg+0x54>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	490c      	ldr	r1, [pc, #48]	; (8000928 <move_pan_deg+0x58>)
 80008f8:	4618      	mov	r0, r3
 80008fa:	f009 febb 	bl	800a674 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)pos, strlen(pos), HAL_MAX_DELAY);
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fcf4 	bl	80002f0 <strlen>
 8000908:	4603      	mov	r3, r0
 800090a:	b29a      	uxth	r2, r3
 800090c:	f107 0108 	add.w	r1, r7, #8
 8000910:	f04f 33ff 	mov.w	r3, #4294967295
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <move_pan_deg+0x5c>)
 8000916:	f007 f99f 	bl	8007c58 <HAL_UART_Transmit>

}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	; 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	24000250 	.word	0x24000250
 8000928:	0800af78 	.word	0x0800af78
 800092c:	240001a8 	.word	0x240001a8

08000930 <ack>:

/*** USART Rx HANDLE ***/
void ack(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart3, tx_ack, 3, HAL_MAX_DELAY);
 8000934:	f04f 33ff 	mov.w	r3, #4294967295
 8000938:	2203      	movs	r2, #3
 800093a:	4903      	ldr	r1, [pc, #12]	; (8000948 <ack+0x18>)
 800093c:	4803      	ldr	r0, [pc, #12]	; (800094c <ack+0x1c>)
 800093e:	f007 f98b 	bl	8007c58 <HAL_UART_Transmit>
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	24000000 	.word	0x24000000
 800094c:	240001a8 	.word	0x240001a8

08000950 <bad>:

void bad(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, tx_bad, 3, HAL_MAX_DELAY);
 8000954:	f04f 33ff 	mov.w	r3, #4294967295
 8000958:	2203      	movs	r2, #3
 800095a:	4903      	ldr	r1, [pc, #12]	; (8000968 <bad+0x18>)
 800095c:	4803      	ldr	r0, [pc, #12]	; (800096c <bad+0x1c>)
 800095e:	f007 f97b 	bl	8007c58 <HAL_UART_Transmit>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	24000004 	.word	0x24000004
 800096c:	240001a8 	.word	0x240001a8

08000970 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	char a[] = "received\r\n";
 8000978:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <HAL_UART_RxCpltCallback+0x7c>)
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000980:	c303      	stmia	r3!, {r0, r1}
 8000982:	801a      	strh	r2, [r3, #0]
 8000984:	3302      	adds	r3, #2
 8000986:	0c12      	lsrs	r2, r2, #16
 8000988:	701a      	strb	r2, [r3, #0]
	char endl[] = "\r\n";
 800098a:	4a19      	ldr	r2, [pc, #100]	; (80009f0 <HAL_UART_RxCpltCallback+0x80>)
 800098c:	f107 0308 	add.w	r3, r7, #8
 8000990:	6812      	ldr	r2, [r2, #0]
 8000992:	4611      	mov	r1, r2
 8000994:	8019      	strh	r1, [r3, #0]
 8000996:	3302      	adds	r3, #2
 8000998:	0c12      	lsrs	r2, r2, #16
 800099a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)a, strlen(a), HAL_MAX_DELAY);
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fca5 	bl	80002f0 <strlen>
 80009a6:	4603      	mov	r3, r0
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	f107 010c 	add.w	r1, r7, #12
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
 80009b2:	4810      	ldr	r0, [pc, #64]	; (80009f4 <HAL_UART_RxCpltCallback+0x84>)
 80009b4:	f007 f950 	bl	8007c58 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)rxBuffer, strlen(rxBuffer), HAL_MAX_DELAY);
 80009b8:	480f      	ldr	r0, [pc, #60]	; (80009f8 <HAL_UART_RxCpltCallback+0x88>)
 80009ba:	f7ff fc99 	bl	80002f0 <strlen>
 80009be:	4603      	mov	r3, r0
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	490c      	ldr	r1, [pc, #48]	; (80009f8 <HAL_UART_RxCpltCallback+0x88>)
 80009c8:	480a      	ldr	r0, [pc, #40]	; (80009f4 <HAL_UART_RxCpltCallback+0x84>)
 80009ca:	f007 f945 	bl	8007c58 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*)endl, 2, HAL_MAX_DELAY);
 80009ce:	f107 0108 	add.w	r1, r7, #8
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	2202      	movs	r2, #2
 80009d8:	4806      	ldr	r0, [pc, #24]	; (80009f4 <HAL_UART_RxCpltCallback+0x84>)
 80009da:	f007 f93d 	bl	8007c58 <HAL_UART_Transmit>

	rxFlag = 1;
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <HAL_UART_RxCpltCallback+0x8c>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
}
 80009e4:	bf00      	nop
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	0800af88 	.word	0x0800af88
 80009f0:	0800af94 	.word	0x0800af94
 80009f4:	240001a8 	.word	0x240001a8
 80009f8:	2400023c 	.word	0x2400023c
 80009fc:	2400025c 	.word	0x2400025c

08000a00 <rx_handle>:

void rx_handle(void) {
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b0d1      	sub	sp, #324	; 0x144
 8000a04:	af02      	add	r7, sp, #8
	char a[] = "handling\r\n";
 8000a06:	4ab9      	ldr	r2, [pc, #740]	; (8000cec <rx_handle+0x2ec>)
 8000a08:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000a0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a0e:	c303      	stmia	r3!, {r0, r1}
 8000a10:	801a      	strh	r2, [r3, #0]
 8000a12:	3302      	adds	r3, #2
 8000a14:	0c12      	lsrs	r2, r2, #16
 8000a16:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)a, strlen(a), HAL_MAX_DELAY);
 8000a18:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fc67 	bl	80002f0 <strlen>
 8000a22:	4603      	mov	r3, r0
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	48b0      	ldr	r0, [pc, #704]	; (8000cf0 <rx_handle+0x2f0>)
 8000a30:	f007 f912 	bl	8007c58 <HAL_UART_Transmit>

	uint32_t amount = (rxBuffer[2]-48) << 24 | (rxBuffer[3]-48) << 16 | (rxBuffer[4]-48) << 8 | (rxBuffer[5]-48);
 8000a34:	4baf      	ldr	r3, [pc, #700]	; (8000cf4 <rx_handle+0x2f4>)
 8000a36:	789b      	ldrb	r3, [r3, #2]
 8000a38:	3b30      	subs	r3, #48	; 0x30
 8000a3a:	061a      	lsls	r2, r3, #24
 8000a3c:	4bad      	ldr	r3, [pc, #692]	; (8000cf4 <rx_handle+0x2f4>)
 8000a3e:	78db      	ldrb	r3, [r3, #3]
 8000a40:	3b30      	subs	r3, #48	; 0x30
 8000a42:	041b      	lsls	r3, r3, #16
 8000a44:	431a      	orrs	r2, r3
 8000a46:	4bab      	ldr	r3, [pc, #684]	; (8000cf4 <rx_handle+0x2f4>)
 8000a48:	791b      	ldrb	r3, [r3, #4]
 8000a4a:	3b30      	subs	r3, #48	; 0x30
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	4ba8      	ldr	r3, [pc, #672]	; (8000cf4 <rx_handle+0x2f4>)
 8000a52:	795b      	ldrb	r3, [r3, #5]
 8000a54:	3b30      	subs	r3, #48	; 0x30
 8000a56:	4313      	orrs	r3, r2
 8000a58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	char num[30];
	sprintf(num, "%d, %d, %d, %d\r\n", rxBuffer[2], rxBuffer[3], rxBuffer[4], rxBuffer[5]);
 8000a5c:	4ba5      	ldr	r3, [pc, #660]	; (8000cf4 <rx_handle+0x2f4>)
 8000a5e:	789b      	ldrb	r3, [r3, #2]
 8000a60:	4619      	mov	r1, r3
 8000a62:	4ba4      	ldr	r3, [pc, #656]	; (8000cf4 <rx_handle+0x2f4>)
 8000a64:	78db      	ldrb	r3, [r3, #3]
 8000a66:	461c      	mov	r4, r3
 8000a68:	4ba2      	ldr	r3, [pc, #648]	; (8000cf4 <rx_handle+0x2f4>)
 8000a6a:	791b      	ldrb	r3, [r3, #4]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4ba1      	ldr	r3, [pc, #644]	; (8000cf4 <rx_handle+0x2f4>)
 8000a70:	795b      	ldrb	r3, [r3, #5]
 8000a72:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8000a76:	9301      	str	r3, [sp, #4]
 8000a78:	9200      	str	r2, [sp, #0]
 8000a7a:	4623      	mov	r3, r4
 8000a7c:	460a      	mov	r2, r1
 8000a7e:	499e      	ldr	r1, [pc, #632]	; (8000cf8 <rx_handle+0x2f8>)
 8000a80:	f009 fdf8 	bl	800a674 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);
 8000a84:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fc31 	bl	80002f0 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	4895      	ldr	r0, [pc, #596]	; (8000cf0 <rx_handle+0x2f0>)
 8000a9c:	f007 f8dc 	bl	8007c58 <HAL_UART_Transmit>

	switch(rxBuffer[0]) {
 8000aa0:	4b94      	ldr	r3, [pc, #592]	; (8000cf4 <rx_handle+0x2f4>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	3b31      	subs	r3, #49	; 0x31
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	f200 8156 	bhi.w	8000d58 <rx_handle+0x358>
 8000aac:	a201      	add	r2, pc, #4	; (adr r2, 8000ab4 <rx_handle+0xb4>)
 8000aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab2:	bf00      	nop
 8000ab4:	08000ac5 	.word	0x08000ac5
 8000ab8:	08000c1f 	.word	0x08000c1f
 8000abc:	08000d21 	.word	0x08000d21
 8000ac0:	08000d59 	.word	0x08000d59
    	case MOVE: ;
			char response[100];
			sprintf(response, "%c%c received this amount: %d\r\n", rxBuffer[0], rxBuffer[1], amount);
 8000ac4:	4b8b      	ldr	r3, [pc, #556]	; (8000cf4 <rx_handle+0x2f4>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b8a      	ldr	r3, [pc, #552]	; (8000cf4 <rx_handle+0x2f4>)
 8000acc:	785b      	ldrb	r3, [r3, #1]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	1d38      	adds	r0, r7, #4
 8000ad2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	4988      	ldr	r1, [pc, #544]	; (8000cfc <rx_handle+0x2fc>)
 8000adc:	f009 fdca 	bl	800a674 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fc04 	bl	80002f0 <strlen>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	1d39      	adds	r1, r7, #4
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	487f      	ldr	r0, [pc, #508]	; (8000cf0 <rx_handle+0x2f0>)
 8000af4:	f007 f8b0 	bl	8007c58 <HAL_UART_Transmit>

			switch(rxBuffer[1]) {
 8000af8:	4b7e      	ldr	r3, [pc, #504]	; (8000cf4 <rx_handle+0x2f4>)
 8000afa:	785b      	ldrb	r3, [r3, #1]
 8000afc:	3b31      	subs	r3, #49	; 0x31
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	f200 8089 	bhi.w	8000c16 <rx_handle+0x216>
 8000b04:	a201      	add	r2, pc, #4	; (adr r2, 8000b0c <rx_handle+0x10c>)
 8000b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0a:	bf00      	nop
 8000b0c:	08000b1d 	.word	0x08000b1d
 8000b10:	08000b59 	.word	0x08000b59
 8000b14:	08000b9b 	.word	0x08000b9b
 8000b18:	08000bdd 	.word	0x08000bdd
				case UP: ;
					char c[] = "up\r\n";
 8000b1c:	4a78      	ldr	r2, [pc, #480]	; (8000d00 <rx_handle+0x300>)
 8000b1e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b26:	6018      	str	r0, [r3, #0]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	7019      	strb	r1, [r3, #0]
					HAL_UART_Transmit(&huart3, (uint8_t*)c, strlen(c), HAL_MAX_DELAY);
 8000b2c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fbdd 	bl	80002f0 <strlen>
 8000b36:	4603      	mov	r3, r0
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	486b      	ldr	r0, [pc, #428]	; (8000cf0 <rx_handle+0x2f0>)
 8000b44:	f007 f888 	bl	8007c58 <HAL_UART_Transmit>


					move_tilt_deg(amount, DIR_TILT_UP);
 8000b48:	2101      	movs	r1, #1
 8000b4a:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000b4e:	f7ff fe4d 	bl	80007ec <move_tilt_deg>
					ack();
 8000b52:	f7ff feed 	bl	8000930 <ack>
					break;
 8000b56:	e061      	b.n	8000c1c <rx_handle+0x21c>
				case DOWN: ;
					char d[] = "down\r\n";
 8000b58:	4a6a      	ldr	r2, [pc, #424]	; (8000d04 <rx_handle+0x304>)
 8000b5a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b62:	6018      	str	r0, [r3, #0]
 8000b64:	3304      	adds	r3, #4
 8000b66:	8019      	strh	r1, [r3, #0]
 8000b68:	3302      	adds	r3, #2
 8000b6a:	0c0a      	lsrs	r2, r1, #16
 8000b6c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart3, (uint8_t*)d, strlen(d), HAL_MAX_DELAY);
 8000b6e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fbbc 	bl	80002f0 <strlen>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295
 8000b84:	485a      	ldr	r0, [pc, #360]	; (8000cf0 <rx_handle+0x2f0>)
 8000b86:	f007 f867 	bl	8007c58 <HAL_UART_Transmit>

					move_tilt_deg(amount, DIR_TILT_DOWN);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000b90:	f7ff fe2c 	bl	80007ec <move_tilt_deg>
					ack();
 8000b94:	f7ff fecc 	bl	8000930 <ack>
					break;
 8000b98:	e040      	b.n	8000c1c <rx_handle+0x21c>
				case LEFT: ;
					char e[] = "left\r\n";
 8000b9a:	4a5b      	ldr	r2, [pc, #364]	; (8000d08 <rx_handle+0x308>)
 8000b9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ba0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ba4:	6018      	str	r0, [r3, #0]
 8000ba6:	3304      	adds	r3, #4
 8000ba8:	8019      	strh	r1, [r3, #0]
 8000baa:	3302      	adds	r3, #2
 8000bac:	0c0a      	lsrs	r2, r1, #16
 8000bae:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart3, (uint8_t*)e, strlen(e), HAL_MAX_DELAY);
 8000bb0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fb9b 	bl	80002f0 <strlen>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	484a      	ldr	r0, [pc, #296]	; (8000cf0 <rx_handle+0x2f0>)
 8000bc8:	f007 f846 	bl	8007c58 <HAL_UART_Transmit>

					move_pan_deg(amount, DIR_PAN_LEFT);
 8000bcc:	2101      	movs	r1, #1
 8000bce:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000bd2:	f7ff fe7d 	bl	80008d0 <move_pan_deg>
					ack();
 8000bd6:	f7ff feab 	bl	8000930 <ack>
					break;
 8000bda:	e01f      	b.n	8000c1c <rx_handle+0x21c>
				case RIGHT: ;
					char f[] = "right\r\n";
 8000bdc:	4a4b      	ldr	r2, [pc, #300]	; (8000d0c <rx_handle+0x30c>)
 8000bde:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000be2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000be6:	e883 0003 	stmia.w	r3, {r0, r1}
					HAL_UART_Transmit(&huart3, (uint8_t*)f, strlen(f), HAL_MAX_DELAY);
 8000bea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fb7e 	bl	80002f0 <strlen>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	483b      	ldr	r0, [pc, #236]	; (8000cf0 <rx_handle+0x2f0>)
 8000c02:	f007 f829 	bl	8007c58 <HAL_UART_Transmit>

					move_pan_deg(amount, DIR_PAN_RIGHT);
 8000c06:	2100      	movs	r1, #0
 8000c08:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000c0c:	f7ff fe60 	bl	80008d0 <move_pan_deg>
					ack();
 8000c10:	f7ff fe8e 	bl	8000930 <ack>
					break;
 8000c14:	e002      	b.n	8000c1c <rx_handle+0x21c>
				default: ;
					bad();
 8000c16:	f7ff fe9b 	bl	8000950 <bad>
					break;
 8000c1a:	bf00      	nop
			}
			break;
 8000c1c:	e09c      	b.n	8000d58 <rx_handle+0x358>

		case PLUNGE: ;
			//retrieve info
			uint32_t brake_pos 		= rxBuffer[1] << 24 | rxBuffer[2]  << 16 | rxBuffer[3]  << 8 | rxBuffer[4];
 8000c1e:	4b35      	ldr	r3, [pc, #212]	; (8000cf4 <rx_handle+0x2f4>)
 8000c20:	785b      	ldrb	r3, [r3, #1]
 8000c22:	061a      	lsls	r2, r3, #24
 8000c24:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <rx_handle+0x2f4>)
 8000c26:	789b      	ldrb	r3, [r3, #2]
 8000c28:	041b      	lsls	r3, r3, #16
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <rx_handle+0x2f4>)
 8000c2e:	78db      	ldrb	r3, [r3, #3]
 8000c30:	021b      	lsls	r3, r3, #8
 8000c32:	4313      	orrs	r3, r2
 8000c34:	4a2f      	ldr	r2, [pc, #188]	; (8000cf4 <rx_handle+0x2f4>)
 8000c36:	7912      	ldrb	r2, [r2, #4]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
//			uint32_t disp_pos 		= rxBuffer[5] << 24 | rxBuffer[6]  << 16 | rxBuffer[7]  << 8 | rxBuffer[8];
//			uint32_t target_speed 	= rxBuffer[9] << 24 | rxBuffer[10] << 16 | rxBuffer[11] << 8 | rxBuffer[12];

			log_position = 0;
 8000c3e:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <rx_handle+0x310>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]


			/*reset count, make sure timer is disabled first to prevent conflict/weirdness*/
			TIM2->CR1 &= ~TIM_CR1_CEN;
 8000c44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c4e:	f023 0301 	bic.w	r3, r3, #1
 8000c52:	6013      	str	r3, [r2, #0]
			TIM2->CNT = 0;
 8000c54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c58:	2200      	movs	r2, #0
 8000c5a:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->CR1 |= TIM_CR1_CEN;
 8000c5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = brake_pos-1; // Counter resets at brake_pos which triggers an interrupt handled in TIM2_IRQHandler (stm32h7xx_it.c)
 8000c6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000c74:	3b01      	subs	r3, #1
 8000c76:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM5->CR1 |= TIM_CR1_CEN; // Start TIM5 to commence data collection
 8000c78:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <rx_handle+0x314>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a25      	ldr	r2, [pc, #148]	; (8000d14 <rx_handle+0x314>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6013      	str	r3, [r2, #0]

			uint32_t enc_pos;
			for(int i=0; i<10000; i++) { //temporary to test encoder input
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8000c8a:	e028      	b.n	8000cde <rx_handle+0x2de>
				char response[100] = {0};
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000c90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c94:	2260      	movs	r2, #96	; 0x60
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f009 fce3 	bl	800a664 <memset>

				enc_pos = htim2.Instance->CNT;
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <rx_handle+0x318>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
				sprintf(response, "encoder posn: %d\r\n", (int)enc_pos);
 8000ca8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000cac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000cb0:	491a      	ldr	r1, [pc, #104]	; (8000d1c <rx_handle+0x31c>)
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f009 fcde 	bl	800a674 <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8000cb8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fb17 	bl	80002f0 <strlen>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <rx_handle+0x2f0>)
 8000cd0:	f006 ffc2 	bl	8007c58 <HAL_UART_Transmit>
			for(int i=0; i<10000; i++) { //temporary to test encoder input
 8000cd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000cd8:	3301      	adds	r3, #1
 8000cda:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8000cde:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000ce2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	ddd0      	ble.n	8000c8c <rx_handle+0x28c>

			}
			break;
 8000cea:	e035      	b.n	8000d58 <rx_handle+0x358>
 8000cec:	0800afe8 	.word	0x0800afe8
 8000cf0:	240001a8 	.word	0x240001a8
 8000cf4:	2400023c 	.word	0x2400023c
 8000cf8:	0800af98 	.word	0x0800af98
 8000cfc:	0800afac 	.word	0x0800afac
 8000d00:	0800aff4 	.word	0x0800aff4
 8000d04:	0800affc 	.word	0x0800affc
 8000d08:	0800b004 	.word	0x0800b004
 8000d0c:	0800b00c 	.word	0x0800b00c
 8000d10:	24000258 	.word	0x24000258
 8000d14:	40000c00 	.word	0x40000c00
 8000d18:	24000098 	.word	0x24000098
 8000d1c:	0800afcc 	.word	0x0800afcc
		case STATUS: ;
			char respns[100] = {0};
 8000d20:	2300      	movs	r3, #0
 8000d22:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d28:	2260      	movs	r2, #96	; 0x60
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f009 fc99 	bl	800a664 <memset>
			sprintf(respns, "posn");
 8000d32:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d36:	4919      	ldr	r1, [pc, #100]	; (8000d9c <rx_handle+0x39c>)
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f009 fc9b 	bl	800a674 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fad5 	bl	80002f0 <strlen>
 8000d46:	4603      	mov	r3, r0
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	1d39      	adds	r1, r7, #4
 8000d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d50:	4813      	ldr	r0, [pc, #76]	; (8000da0 <rx_handle+0x3a0>)
 8000d52:	f006 ff81 	bl	8007c58 <HAL_UART_Transmit>

			break;
 8000d56:	bf00      	nop

		case RELEASE: ;
			//stop brake
			break;
    }
	char b[] = "done handling\r\n";
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <rx_handle+0x3a4>)
 8000d5a:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8000d5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 8000d64:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fac1 	bl	80002f0 <strlen>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	4809      	ldr	r0, [pc, #36]	; (8000da0 <rx_handle+0x3a0>)
 8000d7c:	f006 ff6c 	bl	8007c58 <HAL_UART_Transmit>

    rxFlag = 0;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <rx_handle+0x3a8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart3, rxBuffer, 14);
 8000d86:	220e      	movs	r2, #14
 8000d88:	4908      	ldr	r1, [pc, #32]	; (8000dac <rx_handle+0x3ac>)
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <rx_handle+0x3a0>)
 8000d8c:	f006 fff2 	bl	8007d74 <HAL_UART_Receive_IT>
}
 8000d90:	bf00      	nop
 8000d92:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd90      	pop	{r4, r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	0800afe0 	.word	0x0800afe0
 8000da0:	240001a8 	.word	0x240001a8
 8000da4:	0800b014 	.word	0x0800b014
 8000da8:	2400025c 	.word	0x2400025c
 8000dac:	2400023c 	.word	0x2400023c

08000db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db0:	b5b0      	push	{r4, r5, r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db6:	f000 fd99 	bl	80018ec <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dba:	f000 f83b 	bl	8000e34 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dbe:	f000 f9c5 	bl	800114c <MX_GPIO_Init>
  MX_DMA_Init();
 8000dc2:	f000 f9a3 	bl	800110c <MX_DMA_Init>
  MX_TIM2_Init();
 8000dc6:	f000 f8ab 	bl	8000f20 <MX_TIM2_Init>
  MX_USB_OTG_HS_USB_Init();
 8000dca:	f000 f997 	bl	80010fc <MX_USB_OTG_HS_USB_Init>
  MX_USART3_UART_Init();
 8000dce:	f000 f949 	bl	8001064 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000dd2:	f000 f8f9 	bl	8000fc8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, rxBuffer, 14); // initialize interrupts
 8000dd6:	220e      	movs	r2, #14
 8000dd8:	4912      	ldr	r1, [pc, #72]	; (8000e24 <main+0x74>)
 8000dda:	4813      	ldr	r0, [pc, #76]	; (8000e28 <main+0x78>)
 8000ddc:	f006 ffca 	bl	8007d74 <HAL_UART_Receive_IT>

  char msg[] = "program start \r\n";
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <main+0x7c>)
 8000de2:	1d3c      	adds	r4, r7, #4
 8000de4:	461d      	mov	r5, r3
 8000de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dea:	682b      	ldr	r3, [r5, #0]
 8000dec:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fa7d 	bl	80002f0 <strlen>
 8000df6:	4603      	mov	r3, r0
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	1d39      	adds	r1, r7, #4
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000e00:	4809      	ldr	r0, [pc, #36]	; (8000e28 <main+0x78>)
 8000e02:	f006 ff29 	bl	8007c58 <HAL_UART_Transmit>

  // Enable the TIM2 global interrupt
  NVIC_SetPriority(TIM2_IRQn, 0); // Adjust priority as needed
 8000e06:	2100      	movs	r1, #0
 8000e08:	201c      	movs	r0, #28
 8000e0a:	f7ff fc69 	bl	80006e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000e0e:	201c      	movs	r0, #28
 8000e10:	f7ff fc48 	bl	80006a4 <__NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  if(rxFlag) rx_handle();
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <main+0x80>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0fb      	beq.n	8000e14 <main+0x64>
 8000e1c:	f7ff fdf0 	bl	8000a00 <rx_handle>
 8000e20:	e7f8      	b.n	8000e14 <main+0x64>
 8000e22:	bf00      	nop
 8000e24:	2400023c 	.word	0x2400023c
 8000e28:	240001a8 	.word	0x240001a8
 8000e2c:	0800b024 	.word	0x0800b024
 8000e30:	2400025c 	.word	0x2400025c

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b09c      	sub	sp, #112	; 0x70
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	224c      	movs	r2, #76	; 0x4c
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f009 fc0e 	bl	800a664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f009 fc08 	bl	800a664 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000e54:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <SystemClock_Config+0xe4>)
 8000e56:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e5e:	2004      	movs	r0, #4
 8000e60:	f003 fb86 	bl	8004570 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e64:	2300      	movs	r3, #0
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <SystemClock_Config+0xe8>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a2b      	ldr	r2, [pc, #172]	; (8000f1c <SystemClock_Config+0xe8>)
 8000e6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <SystemClock_Config+0xe8>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e80:	bf00      	nop
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <SystemClock_Config+0xe8>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e8e:	d1f8      	bne.n	8000e82 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e90:	2321      	movs	r3, #33	; 0x21
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e94:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000eaa:	2318      	movs	r3, #24
 8000eac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000eba:	230c      	movs	r3, #12
 8000ebc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 fbaa 	bl	8004624 <HAL_RCC_OscConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ed6:	f000 fa79 	bl	80013cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eda:	233f      	movs	r3, #63	; 0x3f
 8000edc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2102      	movs	r1, #2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 ffc2 	bl	8004e88 <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000f0a:	f000 fa5f 	bl	80013cc <Error_Handler>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3770      	adds	r7, #112	; 0x70
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	58024800 	.word	0x58024800

08000f20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	2224      	movs	r2, #36	; 0x24
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f009 fb98 	bl	800a664 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f34:	463b      	mov	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <MX_TIM2_Init+0xa4>)
 8000f40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f46:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <MX_TIM2_Init+0xa4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_TIM2_Init+0xa4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <MX_TIM2_Init+0xa4>)
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_TIM2_Init+0xa4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_TIM2_Init+0xa4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <MX_TIM2_Init+0xa4>)
 8000f92:	f006 f93d 	bl	8007210 <HAL_TIM_Encoder_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000f9c:	f000 fa16 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_TIM2_Init+0xa4>)
 8000fae:	f006 fd57 	bl	8007a60 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000fb8:	f000 fa08 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	3730      	adds	r7, #48	; 0x30
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	24000098 	.word	0x24000098

08000fc8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	; (800105c <MX_TIM5_Init+0x94>)
 8000fe8:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <MX_TIM5_Init+0x98>)
 8000fea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_TIM5_Init+0x94>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <MX_TIM5_Init+0x94>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_TIM5_Init+0x94>)
 8000ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_TIM5_Init+0x94>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_TIM5_Init+0x94>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800100c:	4813      	ldr	r0, [pc, #76]	; (800105c <MX_TIM5_Init+0x94>)
 800100e:	f006 f8a7 	bl	8007160 <HAL_TIM_Base_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001018:	f000 f9d8 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001020:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001022:	f107 0310 	add.w	r3, r7, #16
 8001026:	4619      	mov	r1, r3
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <MX_TIM5_Init+0x94>)
 800102a:	f006 fab7 	bl	800759c <HAL_TIM_ConfigClockSource>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001034:	f000 f9ca 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_TIM5_Init+0x94>)
 8001046:	f006 fd0b 	bl	8007a60 <HAL_TIMEx_MasterConfigSynchronization>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001050:	f000 f9bc 	bl	80013cc <Error_Handler>
//  TIM5->DIER |= TIM_DIER_UIE; // Enable update interrupt
//  TIM5->ARR = ENC_DMA_POLL_FREQ; // Timebase

  /* USER CODE END TIM5_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	3720      	adds	r7, #32
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	240000e4 	.word	0x240000e4
 8001060:	40000c00 	.word	0x40000c00

08001064 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 800106a:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <MX_USART3_UART_Init+0x94>)
 800106c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ac:	4811      	ldr	r0, [pc, #68]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 80010ae:	f006 fd83 	bl	8007bb8 <HAL_UART_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010b8:	f000 f988 	bl	80013cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010bc:	2100      	movs	r1, #0
 80010be:	480d      	ldr	r0, [pc, #52]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 80010c0:	f009 f9db 	bl	800a47a <HAL_UARTEx_SetTxFifoThreshold>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010ca:	f000 f97f 	bl	80013cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ce:	2100      	movs	r1, #0
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 80010d2:	f009 fa10 	bl	800a4f6 <HAL_UARTEx_SetRxFifoThreshold>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010dc:	f000 f976 	bl	80013cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_USART3_UART_Init+0x90>)
 80010e2:	f009 f991 	bl	800a408 <HAL_UARTEx_DisableFifoMode>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010ec:	f000 f96e 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	240001a8 	.word	0x240001a8
 80010f8:	40004800 	.word	0x40004800

080010fc <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_DMA_Init+0x3c>)
 8001114:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <MX_DMA_Init+0x3c>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_DMA_Init+0x3c>)
 8001124:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	200b      	movs	r0, #11
 8001136:	f000 fd8a 	bl	8001c4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800113a:	200b      	movs	r0, #11
 800113c:	f000 fda1 	bl	8001c82 <HAL_NVIC_EnableIRQ>

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	58024400 	.word	0x58024400

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08e      	sub	sp, #56	; 0x38
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	4b93      	ldr	r3, [pc, #588]	; (80013b0 <MX_GPIO_Init+0x264>)
 8001164:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001168:	4a91      	ldr	r2, [pc, #580]	; (80013b0 <MX_GPIO_Init+0x264>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001172:	4b8f      	ldr	r3, [pc, #572]	; (80013b0 <MX_GPIO_Init+0x264>)
 8001174:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	623b      	str	r3, [r7, #32]
 800117e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001180:	4b8b      	ldr	r3, [pc, #556]	; (80013b0 <MX_GPIO_Init+0x264>)
 8001182:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001186:	4a8a      	ldr	r2, [pc, #552]	; (80013b0 <MX_GPIO_Init+0x264>)
 8001188:	f043 0320 	orr.w	r3, r3, #32
 800118c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001190:	4b87      	ldr	r3, [pc, #540]	; (80013b0 <MX_GPIO_Init+0x264>)
 8001192:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119e:	4b84      	ldr	r3, [pc, #528]	; (80013b0 <MX_GPIO_Init+0x264>)
 80011a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011a4:	4a82      	ldr	r2, [pc, #520]	; (80013b0 <MX_GPIO_Init+0x264>)
 80011a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011ae:	4b80      	ldr	r3, [pc, #512]	; (80013b0 <MX_GPIO_Init+0x264>)
 80011b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b7c      	ldr	r3, [pc, #496]	; (80013b0 <MX_GPIO_Init+0x264>)
 80011be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011c2:	4a7b      	ldr	r2, [pc, #492]	; (80013b0 <MX_GPIO_Init+0x264>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011cc:	4b78      	ldr	r3, [pc, #480]	; (80013b0 <MX_GPIO_Init+0x264>)
 80011ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b75      	ldr	r3, [pc, #468]	; (80013b0 <MX_GPIO_Init+0x264>)
 80011dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011e0:	4a73      	ldr	r2, [pc, #460]	; (80013b0 <MX_GPIO_Init+0x264>)
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011ea:	4b71      	ldr	r3, [pc, #452]	; (80013b0 <MX_GPIO_Init+0x264>)
 80011ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f8:	4b6d      	ldr	r3, [pc, #436]	; (80013b0 <MX_GPIO_Init+0x264>)
 80011fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011fe:	4a6c      	ldr	r2, [pc, #432]	; (80013b0 <MX_GPIO_Init+0x264>)
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001208:	4b69      	ldr	r3, [pc, #420]	; (80013b0 <MX_GPIO_Init+0x264>)
 800120a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001216:	4b66      	ldr	r3, [pc, #408]	; (80013b0 <MX_GPIO_Init+0x264>)
 8001218:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800121c:	4a64      	ldr	r2, [pc, #400]	; (80013b0 <MX_GPIO_Init+0x264>)
 800121e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001222:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001226:	4b62      	ldr	r3, [pc, #392]	; (80013b0 <MX_GPIO_Init+0x264>)
 8001228:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800122c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001234:	4b5e      	ldr	r3, [pc, #376]	; (80013b0 <MX_GPIO_Init+0x264>)
 8001236:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800123a:	4a5d      	ldr	r2, [pc, #372]	; (80013b0 <MX_GPIO_Init+0x264>)
 800123c:	f043 0310 	orr.w	r3, r3, #16
 8001240:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001244:	4b5a      	ldr	r3, [pc, #360]	; (80013b0 <MX_GPIO_Init+0x264>)
 8001246:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001258:	4856      	ldr	r0, [pc, #344]	; (80013b4 <MX_GPIO_Init+0x268>)
 800125a:	f003 f96f 	bl	800453c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BRAKE_Pin|TILT_DIR_Pin|TILT_EN_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2170      	movs	r1, #112	; 0x70
 8001262:	4855      	ldr	r0, [pc, #340]	; (80013b8 <MX_GPIO_Init+0x26c>)
 8001264:	f003 f96a 	bl	800453c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TILT_STP_Pin|PAN_STP_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	2160      	movs	r1, #96	; 0x60
 800126c:	4853      	ldr	r0, [pc, #332]	; (80013bc <MX_GPIO_Init+0x270>)
 800126e:	f003 f965 	bl	800453c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|PAN_DIR_Pin|PAN_EN_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 4186 	mov.w	r1, #17152	; 0x4300
 8001278:	4851      	ldr	r0, [pc, #324]	; (80013c0 <MX_GPIO_Init+0x274>)
 800127a:	f003 f95f 	bl	800453c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2102      	movs	r1, #2
 8001282:	4850      	ldr	r0, [pc, #320]	; (80013c4 <MX_GPIO_Init+0x278>)
 8001284:	f003 f95a 	bl	800453c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129a:	4619      	mov	r1, r3
 800129c:	4847      	ldr	r0, [pc, #284]	; (80013bc <MX_GPIO_Init+0x270>)
 800129e:	f002 ff9d 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80012a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b8:	4619      	mov	r1, r3
 80012ba:	483e      	ldr	r0, [pc, #248]	; (80013b4 <MX_GPIO_Init+0x268>)
 80012bc:	f002 ff8e 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BRAKE_Pin TILT_DIR_Pin TILT_EN_Pin */
  GPIO_InitStruct.Pin = BRAKE_Pin|TILT_DIR_Pin|TILT_EN_Pin;
 80012c0:	2370      	movs	r3, #112	; 0x70
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d4:	4619      	mov	r1, r3
 80012d6:	4838      	ldr	r0, [pc, #224]	; (80013b8 <MX_GPIO_Init+0x26c>)
 80012d8:	f002 ff80 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pins : TILT_STP_Pin PAN_STP_Pin */
  GPIO_InitStruct.Pin = TILT_STP_Pin|PAN_STP_Pin;
 80012dc:	2360      	movs	r3, #96	; 0x60
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f0:	4619      	mov	r1, r3
 80012f2:	4832      	ldr	r0, [pc, #200]	; (80013bc <MX_GPIO_Init+0x270>)
 80012f4:	f002 ff72 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin PAN_DIR_Pin PAN_EN_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|PAN_DIR_Pin|PAN_EN_Pin;
 80012f8:	f44f 4386 	mov.w	r3, #17152	; 0x4300
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	4619      	mov	r1, r3
 8001310:	482b      	ldr	r0, [pc, #172]	; (80013c0 <MX_GPIO_Init+0x274>)
 8001312:	f002 ff63 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800131a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001328:	4619      	mov	r1, r3
 800132a:	4827      	ldr	r0, [pc, #156]	; (80013c8 <MX_GPIO_Init+0x27c>)
 800132c:	f002 ff56 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001336:	2300      	movs	r3, #0
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001342:	4619      	mov	r1, r3
 8001344:	481c      	ldr	r0, [pc, #112]	; (80013b8 <MX_GPIO_Init+0x26c>)
 8001346:	f002 ff49 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800134a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800135c:	230a      	movs	r3, #10
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001364:	4619      	mov	r1, r3
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <MX_GPIO_Init+0x26c>)
 8001368:	f002 ff38 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800136c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_GPIO_Init+0x26c>)
 8001386:	f002 ff29 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800138a:	2302      	movs	r3, #2
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	4619      	mov	r1, r3
 80013a0:	4808      	ldr	r0, [pc, #32]	; (80013c4 <MX_GPIO_Init+0x278>)
 80013a2:	f002 ff1b 	bl	80041dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013a6:	bf00      	nop
 80013a8:	3738      	adds	r7, #56	; 0x38
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	58024400 	.word	0x58024400
 80013b4:	58021400 	.word	0x58021400
 80013b8:	58020000 	.word	0x58020000
 80013bc:	58020800 	.word	0x58020800
 80013c0:	58020400 	.word	0x58020400
 80013c4:	58021000 	.word	0x58021000
 80013c8:	58021800 	.word	0x58021800

080013cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
}
 80013d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <Error_Handler+0x8>
	...

080013d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_MspInit+0x30>)
 80013e0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80013e4:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_MspInit+0x30>)
 80013e6:	f043 0302 	orr.w	r3, r3, #2
 80013ea:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_MspInit+0x30>)
 80013f0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	58024400 	.word	0x58024400

0800140c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142c:	d164      	bne.n	80014f8 <HAL_TIM_Encoder_MspInit+0xec>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800142e:	4b34      	ldr	r3, [pc, #208]	; (8001500 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001430:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001434:	4a32      	ldr	r2, [pc, #200]	; (8001500 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800143e:	4b30      	ldr	r3, [pc, #192]	; (8001500 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001440:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <HAL_TIM_Encoder_MspInit+0xf4>)
 800144e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001452:	4a2b      	ldr	r2, [pc, #172]	; (8001500 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800145c:	4b28      	ldr	r3, [pc, #160]	; (8001500 <HAL_TIM_Encoder_MspInit+0xf4>)
 800145e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PLUNGE_ENC_A_Pin|PLUNGE_ENC_B_Pin;
 800146a:	2303      	movs	r3, #3
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800147a:	2301      	movs	r3, #1
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	481f      	ldr	r0, [pc, #124]	; (8001504 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001486:	f002 fea9 	bl	80041dc <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Stream0;
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <HAL_TIM_Encoder_MspInit+0xfc>)
 800148c:	4a1f      	ldr	r2, [pc, #124]	; (800150c <HAL_TIM_Encoder_MspInit+0x100>)
 800148e:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_TIM2_UP;
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001492:	2216      	movs	r2, #22
 8001494:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_TIM_Encoder_MspInit+0xfc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_TIM_Encoder_MspInit+0xfc>)
 80014a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a8:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <HAL_TIM_Encoder_MspInit+0xfc>)
 80014ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014b0:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_TIM_Encoder_MspInit+0xfc>)
 80014b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014b8:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_TIM_Encoder_MspInit+0xfc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	61da      	str	r2, [r3, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <HAL_TIM_Encoder_MspInit+0xfc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	621a      	str	r2, [r3, #32]
    hdma_tim2_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_TIM_Encoder_MspInit+0xfc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 80014cc:	480e      	ldr	r0, [pc, #56]	; (8001508 <HAL_TIM_Encoder_MspInit+0xfc>)
 80014ce:	f000 fbf3 	bl	8001cb8 <HAL_DMA_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_TIM_Encoder_MspInit+0xd0>
    {
      Error_Handler();
 80014d8:	f7ff ff78 	bl	80013cc <Error_Handler>
    }

    __HAL_LINKDMA(htim_encoder,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <HAL_TIM_Encoder_MspInit+0xfc>)
 80014e0:	621a      	str	r2, [r3, #32]
 80014e2:	4a09      	ldr	r2, [pc, #36]	; (8001508 <HAL_TIM_Encoder_MspInit+0xfc>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2100      	movs	r1, #0
 80014ec:	201c      	movs	r0, #28
 80014ee:	f000 fbae 	bl	8001c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014f2:	201c      	movs	r0, #28
 80014f4:	f000 fbc5 	bl	8001c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	58024400 	.word	0x58024400
 8001504:	58020000 	.word	0x58020000
 8001508:	24000130 	.word	0x24000130
 800150c:	40020010 	.word	0x40020010

08001510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <HAL_TIM_Base_MspInit+0x48>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d116      	bne.n	8001550 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_TIM_Base_MspInit+0x4c>)
 8001524:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001528:	4a0c      	ldr	r2, [pc, #48]	; (800155c <HAL_TIM_Base_MspInit+0x4c>)
 800152a:	f043 0308 	orr.w	r3, r3, #8
 800152e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_TIM_Base_MspInit+0x4c>)
 8001534:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2100      	movs	r1, #0
 8001544:	2032      	movs	r0, #50	; 0x32
 8001546:	f000 fb82 	bl	8001c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800154a:	2032      	movs	r0, #50	; 0x32
 800154c:	f000 fb99 	bl	8001c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40000c00 	.word	0x40000c00
 800155c:	58024400 	.word	0x58024400

08001560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b0ba      	sub	sp, #232	; 0xe8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	22c0      	movs	r2, #192	; 0xc0
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f009 f86f 	bl	800a664 <memset>
  if(huart->Instance==USART3)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a2b      	ldr	r2, [pc, #172]	; (8001638 <HAL_UART_MspInit+0xd8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d14e      	bne.n	800162e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001590:	f04f 0202 	mov.w	r2, #2
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 fffa 	bl	80055a0 <HAL_RCCEx_PeriphCLKConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80015b2:	f7ff ff0b 	bl	80013cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <HAL_UART_MspInit+0xdc>)
 80015b8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015bc:	4a1f      	ldr	r2, [pc, #124]	; (800163c <HAL_UART_MspInit+0xdc>)
 80015be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <HAL_UART_MspInit+0xdc>)
 80015c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_UART_MspInit+0xdc>)
 80015d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015da:	4a18      	ldr	r2, [pc, #96]	; (800163c <HAL_UART_MspInit+0xdc>)
 80015dc:	f043 0308 	orr.w	r3, r3, #8
 80015e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_UART_MspInit+0xdc>)
 80015e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80015f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800160c:	2307      	movs	r3, #7
 800160e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001612:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001616:	4619      	mov	r1, r3
 8001618:	4809      	ldr	r0, [pc, #36]	; (8001640 <HAL_UART_MspInit+0xe0>)
 800161a:	f002 fddf 	bl	80041dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	2027      	movs	r0, #39	; 0x27
 8001624:	f000 fb13 	bl	8001c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001628:	2027      	movs	r0, #39	; 0x27
 800162a:	f000 fb2a 	bl	8001c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800162e:	bf00      	nop
 8001630:	37e8      	adds	r7, #232	; 0xe8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40004800 	.word	0x40004800
 800163c:	58024400 	.word	0x58024400
 8001640:	58020c00 	.word	0x58020c00

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <NMI_Handler+0x4>

0800164a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <MemManage_Handler+0x4>

08001656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <BusFault_Handler+0x4>

0800165c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <UsageFault_Handler+0x4>

08001662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001690:	f000 f99e 	bl	80019d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <DMA1_Stream0_IRQHandler+0x10>)
 800169e:	f001 fbff 	bl	8002ea0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	24000130 	.word	0x24000130

080016ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if ((TIM2->SR & TIM_SR_UIF) != 0) { // check if update interrupt occured
 80016b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d007      	beq.n	80016ce <TIM2_IRQHandler+0x22>
//		HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 0); //engage brake


		//HAL_UART_Transmit(&huart3, (uint8_t*)"test", strlen(response), HAL_MAX_DELAY);

		TIM2->SR &= ~TIM_SR_UIF; // Clear the interrupt flag
 80016be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	6113      	str	r3, [r2, #16]

    }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016ce:	4802      	ldr	r0, [pc, #8]	; (80016d8 <TIM2_IRQHandler+0x2c>)
 80016d0:	f005 fe44 	bl	800735c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	24000098 	.word	0x24000098

080016dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <USART3_IRQHandler+0x10>)
 80016e2:	f006 fb93 	bl	8007e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	240001a8 	.word	0x240001a8

080016f0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	if (TIM5->SR & TIM_SR_UIF) { //update event occurred
 80016f4:	4b0d      	ldr	r3, [pc, #52]	; (800172c <TIM5_IRQHandler+0x3c>)
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d010      	beq.n	8001722 <TIM5_IRQHandler+0x32>
		DMA1_Stream0->CR |= DMA_SxCR_EN; // Start the DMA transfer
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <TIM5_IRQHandler+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <TIM5_IRQHandler+0x40>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6013      	str	r3, [r2, #0]
		log_position += 1; // increment number of data points taken
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <TIM5_IRQHandler+0x44>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <TIM5_IRQHandler+0x44>)
 8001714:	6013      	str	r3, [r2, #0]

		/*insert rollign linear regression that updates drop deposit point*/

		TIM5->SR &= ~TIM_SR_UIF; // Clear the TIM5 update flag
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <TIM5_IRQHandler+0x3c>)
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	4a04      	ldr	r2, [pc, #16]	; (800172c <TIM5_IRQHandler+0x3c>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <TIM5_IRQHandler+0x48>)
 8001724:	f005 fe1a 	bl	800735c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40000c00 	.word	0x40000c00
 8001730:	40020010 	.word	0x40020010
 8001734:	24000258 	.word	0x24000258
 8001738:	240000e4 	.word	0x240000e4

0800173c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <_sbrk+0x5c>)
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <_sbrk+0x60>)
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_sbrk+0x64>)
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <_sbrk+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d207      	bcs.n	800177c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800176c:	f008 ff50 	bl	800a610 <__errno>
 8001770:	4603      	mov	r3, r0
 8001772:	220c      	movs	r2, #12
 8001774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	e009      	b.n	8001790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <_sbrk+0x64>)
 800178c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	24100000 	.word	0x24100000
 800179c:	00000400 	.word	0x00000400
 80017a0:	24000260 	.word	0x24000260
 80017a4:	24000278 	.word	0x24000278

080017a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017ac:	4b32      	ldr	r3, [pc, #200]	; (8001878 <SystemInit+0xd0>)
 80017ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017b2:	4a31      	ldr	r2, [pc, #196]	; (8001878 <SystemInit+0xd0>)
 80017b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017bc:	4b2f      	ldr	r3, [pc, #188]	; (800187c <SystemInit+0xd4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d807      	bhi.n	80017d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017c8:	4b2c      	ldr	r3, [pc, #176]	; (800187c <SystemInit+0xd4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 030f 	bic.w	r3, r3, #15
 80017d0:	4a2a      	ldr	r2, [pc, #168]	; (800187c <SystemInit+0xd4>)
 80017d2:	f043 0303 	orr.w	r3, r3, #3
 80017d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <SystemInit+0xd8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a28      	ldr	r2, [pc, #160]	; (8001880 <SystemInit+0xd8>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017e4:	4b26      	ldr	r3, [pc, #152]	; (8001880 <SystemInit+0xd8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017ea:	4b25      	ldr	r3, [pc, #148]	; (8001880 <SystemInit+0xd8>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4924      	ldr	r1, [pc, #144]	; (8001880 <SystemInit+0xd8>)
 80017f0:	4b24      	ldr	r3, [pc, #144]	; (8001884 <SystemInit+0xdc>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <SystemInit+0xd4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001802:	4b1e      	ldr	r3, [pc, #120]	; (800187c <SystemInit+0xd4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 030f 	bic.w	r3, r3, #15
 800180a:	4a1c      	ldr	r2, [pc, #112]	; (800187c <SystemInit+0xd4>)
 800180c:	f043 0303 	orr.w	r3, r3, #3
 8001810:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <SystemInit+0xd8>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <SystemInit+0xd8>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <SystemInit+0xd8>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <SystemInit+0xd8>)
 8001826:	4a18      	ldr	r2, [pc, #96]	; (8001888 <SystemInit+0xe0>)
 8001828:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <SystemInit+0xd8>)
 800182c:	4a17      	ldr	r2, [pc, #92]	; (800188c <SystemInit+0xe4>)
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <SystemInit+0xd8>)
 8001832:	4a17      	ldr	r2, [pc, #92]	; (8001890 <SystemInit+0xe8>)
 8001834:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <SystemInit+0xd8>)
 8001838:	2200      	movs	r2, #0
 800183a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <SystemInit+0xd8>)
 800183e:	4a14      	ldr	r2, [pc, #80]	; (8001890 <SystemInit+0xe8>)
 8001840:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <SystemInit+0xd8>)
 8001844:	2200      	movs	r2, #0
 8001846:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <SystemInit+0xd8>)
 800184a:	4a11      	ldr	r2, [pc, #68]	; (8001890 <SystemInit+0xe8>)
 800184c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <SystemInit+0xd8>)
 8001850:	2200      	movs	r2, #0
 8001852:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <SystemInit+0xd8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a09      	ldr	r2, [pc, #36]	; (8001880 <SystemInit+0xd8>)
 800185a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <SystemInit+0xd8>)
 8001862:	2200      	movs	r2, #0
 8001864:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <SystemInit+0xec>)
 8001868:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800186c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00
 800187c:	52002000 	.word	0x52002000
 8001880:	58024400 	.word	0x58024400
 8001884:	eaf6ed7f 	.word	0xeaf6ed7f
 8001888:	02020200 	.word	0x02020200
 800188c:	01ff0000 	.word	0x01ff0000
 8001890:	01010280 	.word	0x01010280
 8001894:	52004000 	.word	0x52004000

08001898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800189c:	f7ff ff84 	bl	80017a8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a0:	480c      	ldr	r0, [pc, #48]	; (80018d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018a2:	490d      	ldr	r1, [pc, #52]	; (80018d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018a4:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a8:	e002      	b.n	80018b0 <LoopCopyDataInit>

080018aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ae:	3304      	adds	r3, #4

080018b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80018b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b4:	d3f9      	bcc.n	80018aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018b8:	4c0a      	ldr	r4, [pc, #40]	; (80018e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018bc:	e001      	b.n	80018c2 <LoopFillZerobss>

080018be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c0:	3204      	adds	r2, #4

080018c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c4:	d3fb      	bcc.n	80018be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018c6:	f008 fea9 	bl	800a61c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ca:	f7ff fa71 	bl	8000db0 <main>
  bx  lr
 80018ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018d0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80018d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018d8:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80018dc:	0800b0c8 	.word	0x0800b0c8
  ldr r2, =_sbss
 80018e0:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 80018e4:	24000278 	.word	0x24000278

080018e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e8:	e7fe      	b.n	80018e8 <ADC_IRQHandler>
	...

080018ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f2:	2003      	movs	r0, #3
 80018f4:	f000 f9a0 	bl	8001c38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80018f8:	f003 fc7c 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_Init+0x68>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	f003 030f 	and.w	r3, r3, #15
 8001908:	4913      	ldr	r1, [pc, #76]	; (8001958 <HAL_Init+0x6c>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
 8001914:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_Init+0x68>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_Init+0x6c>)
 8001920:	5cd3      	ldrb	r3, [r2, r3]
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
 800192c:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_Init+0x70>)
 800192e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001930:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <HAL_Init+0x74>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001936:	2000      	movs	r0, #0
 8001938:	f000 f814 	bl	8001964 <HAL_InitTick>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e002      	b.n	800194c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001946:	f7ff fd47 	bl	80013d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	58024400 	.word	0x58024400
 8001958:	0800b044 	.word	0x0800b044
 800195c:	2400000c 	.word	0x2400000c
 8001960:	24000008 	.word	0x24000008

08001964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_InitTick+0x60>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e021      	b.n	80019bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_InitTick+0x64>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_InitTick+0x60>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001986:	fbb3 f3f1 	udiv	r3, r3, r1
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f985 	bl	8001c9e <HAL_SYSTICK_Config>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e00e      	b.n	80019bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d80a      	bhi.n	80019ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f000 f94f 	bl	8001c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <HAL_InitTick+0x68>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	24000014 	.word	0x24000014
 80019c8:	24000008 	.word	0x24000008
 80019cc:	24000010 	.word	0x24000010

080019d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_IncTick+0x20>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_IncTick+0x24>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_IncTick+0x24>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	24000014 	.word	0x24000014
 80019f4:	24000264 	.word	0x24000264

080019f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_GetTick+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	24000264 	.word	0x24000264

08001a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b0ac      	sub	sp, #176	; 0xb0
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff ffee 	bl	80019f8 <HAL_GetTick>
 8001a1c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  uint32_t wait = Delay;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2e:	d007      	beq.n	8001a40 <HAL_Delay+0x30>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <HAL_Delay+0x7c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  }

 8001a40:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <HAL_Delay+0x80>)
 8001a42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a46:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a48:	c303      	stmia	r3!, {r0, r1}
 8001a4a:	801a      	strh	r2, [r3, #0]
  while ((HAL_GetTick() - tickstart) < wait)
  {
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_Delay+0x84>)
 8001a4e:	60bb      	str	r3, [r7, #8]
  }
 8001a50:	e00d      	b.n	8001a6e <HAL_Delay+0x5e>
}

 8001a52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fc4a 	bl	80002f0 <strlen>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001a64:	f107 0008 	add.w	r0, r7, #8
 8001a68:	2364      	movs	r3, #100	; 0x64
 8001a6a:	f006 f8f5 	bl	8007c58 <HAL_UART_Transmit>
  }
 8001a6e:	f7ff ffc3 	bl	80019f8 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d8e7      	bhi.n	8001a52 <HAL_Delay+0x42>
/**
  * @brief Suspend Tick increment.
  * @note In the default implementation , SysTick timer is the source of time base. It is
 8001a82:	bf00      	nop
 8001a84:	bf00      	nop
 8001a86:	37b0      	adds	r7, #176	; 0xb0
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	24000014 	.word	0x24000014
 8001a90:	0800b038 	.word	0x0800b038
 8001a94:	40004800 	.word	0x40004800

08001a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac6:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x40>)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	60d3      	str	r3, [r2, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00
 8001adc:	05fa0000 	.word	0x05fa0000

08001ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	f003 0307 	and.w	r3, r3, #7
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	db0b      	blt.n	8001b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	f003 021f 	and.w	r2, r3, #31
 8001b14:	4907      	ldr	r1, [pc, #28]	; (8001b34 <__NVIC_EnableIRQ+0x38>)
 8001b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000e100 	.word	0xe000e100

08001b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db0a      	blt.n	8001b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	490c      	ldr	r1, [pc, #48]	; (8001b84 <__NVIC_SetPriority+0x4c>)
 8001b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b60:	e00a      	b.n	8001b78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4908      	ldr	r1, [pc, #32]	; (8001b88 <__NVIC_SetPriority+0x50>)
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	3b04      	subs	r3, #4
 8001b70:	0112      	lsls	r2, r2, #4
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	761a      	strb	r2, [r3, #24]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000e100 	.word	0xe000e100
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f1c3 0307 	rsb	r3, r3, #7
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	bf28      	it	cs
 8001baa:	2304      	movcs	r3, #4
 8001bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d902      	bls.n	8001bbc <NVIC_EncodePriority+0x30>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3b03      	subs	r3, #3
 8001bba:	e000      	b.n	8001bbe <NVIC_EncodePriority+0x32>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	401a      	ands	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43d9      	mvns	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	4313      	orrs	r3, r2
         );
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c04:	d301      	bcc.n	8001c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00f      	b.n	8001c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <SysTick_Config+0x40>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c12:	210f      	movs	r1, #15
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f7ff ff8e 	bl	8001b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <SysTick_Config+0x40>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c22:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <SysTick_Config+0x40>)
 8001c24:	2207      	movs	r2, #7
 8001c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	e000e010 	.word	0xe000e010

08001c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ff29 	bl	8001a98 <__NVIC_SetPriorityGrouping>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c5c:	f7ff ff40 	bl	8001ae0 <__NVIC_GetPriorityGrouping>
 8001c60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	6978      	ldr	r0, [r7, #20]
 8001c68:	f7ff ff90 	bl	8001b8c <NVIC_EncodePriority>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff5f 	bl	8001b38 <__NVIC_SetPriority>
}
 8001c7a:	bf00      	nop
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff33 	bl	8001afc <__NVIC_EnableIRQ>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ffa4 	bl	8001bf4 <SysTick_Config>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff fe9a 	bl	80019f8 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e37f      	b.n	80023d0 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a66      	ldr	r2, [pc, #408]	; (8001e70 <HAL_DMA_Init+0x1b8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d04a      	beq.n	8001d70 <HAL_DMA_Init+0xb8>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a65      	ldr	r2, [pc, #404]	; (8001e74 <HAL_DMA_Init+0x1bc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d045      	beq.n	8001d70 <HAL_DMA_Init+0xb8>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a63      	ldr	r2, [pc, #396]	; (8001e78 <HAL_DMA_Init+0x1c0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d040      	beq.n	8001d70 <HAL_DMA_Init+0xb8>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a62      	ldr	r2, [pc, #392]	; (8001e7c <HAL_DMA_Init+0x1c4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d03b      	beq.n	8001d70 <HAL_DMA_Init+0xb8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a60      	ldr	r2, [pc, #384]	; (8001e80 <HAL_DMA_Init+0x1c8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d036      	beq.n	8001d70 <HAL_DMA_Init+0xb8>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a5f      	ldr	r2, [pc, #380]	; (8001e84 <HAL_DMA_Init+0x1cc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d031      	beq.n	8001d70 <HAL_DMA_Init+0xb8>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a5d      	ldr	r2, [pc, #372]	; (8001e88 <HAL_DMA_Init+0x1d0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d02c      	beq.n	8001d70 <HAL_DMA_Init+0xb8>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a5c      	ldr	r2, [pc, #368]	; (8001e8c <HAL_DMA_Init+0x1d4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d027      	beq.n	8001d70 <HAL_DMA_Init+0xb8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a5a      	ldr	r2, [pc, #360]	; (8001e90 <HAL_DMA_Init+0x1d8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d022      	beq.n	8001d70 <HAL_DMA_Init+0xb8>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a59      	ldr	r2, [pc, #356]	; (8001e94 <HAL_DMA_Init+0x1dc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d01d      	beq.n	8001d70 <HAL_DMA_Init+0xb8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a57      	ldr	r2, [pc, #348]	; (8001e98 <HAL_DMA_Init+0x1e0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d018      	beq.n	8001d70 <HAL_DMA_Init+0xb8>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a56      	ldr	r2, [pc, #344]	; (8001e9c <HAL_DMA_Init+0x1e4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <HAL_DMA_Init+0xb8>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a54      	ldr	r2, [pc, #336]	; (8001ea0 <HAL_DMA_Init+0x1e8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00e      	beq.n	8001d70 <HAL_DMA_Init+0xb8>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a53      	ldr	r2, [pc, #332]	; (8001ea4 <HAL_DMA_Init+0x1ec>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d009      	beq.n	8001d70 <HAL_DMA_Init+0xb8>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a51      	ldr	r2, [pc, #324]	; (8001ea8 <HAL_DMA_Init+0x1f0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d004      	beq.n	8001d70 <HAL_DMA_Init+0xb8>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a50      	ldr	r2, [pc, #320]	; (8001eac <HAL_DMA_Init+0x1f4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d101      	bne.n	8001d74 <HAL_DMA_Init+0xbc>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_DMA_Init+0xbe>
 8001d74:	2300      	movs	r3, #0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 813c 	beq.w	8001ff4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a37      	ldr	r2, [pc, #220]	; (8001e70 <HAL_DMA_Init+0x1b8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d04a      	beq.n	8001e2c <HAL_DMA_Init+0x174>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a36      	ldr	r2, [pc, #216]	; (8001e74 <HAL_DMA_Init+0x1bc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d045      	beq.n	8001e2c <HAL_DMA_Init+0x174>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a34      	ldr	r2, [pc, #208]	; (8001e78 <HAL_DMA_Init+0x1c0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d040      	beq.n	8001e2c <HAL_DMA_Init+0x174>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a33      	ldr	r2, [pc, #204]	; (8001e7c <HAL_DMA_Init+0x1c4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d03b      	beq.n	8001e2c <HAL_DMA_Init+0x174>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a31      	ldr	r2, [pc, #196]	; (8001e80 <HAL_DMA_Init+0x1c8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d036      	beq.n	8001e2c <HAL_DMA_Init+0x174>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a30      	ldr	r2, [pc, #192]	; (8001e84 <HAL_DMA_Init+0x1cc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d031      	beq.n	8001e2c <HAL_DMA_Init+0x174>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a2e      	ldr	r2, [pc, #184]	; (8001e88 <HAL_DMA_Init+0x1d0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d02c      	beq.n	8001e2c <HAL_DMA_Init+0x174>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a2d      	ldr	r2, [pc, #180]	; (8001e8c <HAL_DMA_Init+0x1d4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d027      	beq.n	8001e2c <HAL_DMA_Init+0x174>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a2b      	ldr	r2, [pc, #172]	; (8001e90 <HAL_DMA_Init+0x1d8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d022      	beq.n	8001e2c <HAL_DMA_Init+0x174>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a2a      	ldr	r2, [pc, #168]	; (8001e94 <HAL_DMA_Init+0x1dc>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d01d      	beq.n	8001e2c <HAL_DMA_Init+0x174>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a28      	ldr	r2, [pc, #160]	; (8001e98 <HAL_DMA_Init+0x1e0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d018      	beq.n	8001e2c <HAL_DMA_Init+0x174>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a27      	ldr	r2, [pc, #156]	; (8001e9c <HAL_DMA_Init+0x1e4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d013      	beq.n	8001e2c <HAL_DMA_Init+0x174>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a25      	ldr	r2, [pc, #148]	; (8001ea0 <HAL_DMA_Init+0x1e8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00e      	beq.n	8001e2c <HAL_DMA_Init+0x174>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a24      	ldr	r2, [pc, #144]	; (8001ea4 <HAL_DMA_Init+0x1ec>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d009      	beq.n	8001e2c <HAL_DMA_Init+0x174>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a22      	ldr	r2, [pc, #136]	; (8001ea8 <HAL_DMA_Init+0x1f0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d004      	beq.n	8001e2c <HAL_DMA_Init+0x174>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a21      	ldr	r2, [pc, #132]	; (8001eac <HAL_DMA_Init+0x1f4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d108      	bne.n	8001e3e <HAL_DMA_Init+0x186>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	e007      	b.n	8001e4e <HAL_DMA_Init+0x196>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0201 	bic.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e4e:	e02f      	b.n	8001eb0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e50:	f7ff fdd2 	bl	80019f8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b05      	cmp	r3, #5
 8001e5c:	d928      	bls.n	8001eb0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2220      	movs	r2, #32
 8001e62:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2203      	movs	r2, #3
 8001e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e2af      	b.n	80023d0 <HAL_DMA_Init+0x718>
 8001e70:	40020010 	.word	0x40020010
 8001e74:	40020028 	.word	0x40020028
 8001e78:	40020040 	.word	0x40020040
 8001e7c:	40020058 	.word	0x40020058
 8001e80:	40020070 	.word	0x40020070
 8001e84:	40020088 	.word	0x40020088
 8001e88:	400200a0 	.word	0x400200a0
 8001e8c:	400200b8 	.word	0x400200b8
 8001e90:	40020410 	.word	0x40020410
 8001e94:	40020428 	.word	0x40020428
 8001e98:	40020440 	.word	0x40020440
 8001e9c:	40020458 	.word	0x40020458
 8001ea0:	40020470 	.word	0x40020470
 8001ea4:	40020488 	.word	0x40020488
 8001ea8:	400204a0 	.word	0x400204a0
 8001eac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1c8      	bne.n	8001e50 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4b73      	ldr	r3, [pc, #460]	; (8002098 <HAL_DMA_Init+0x3e0>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001ed6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d107      	bne.n	8001f14 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b28      	cmp	r3, #40	; 0x28
 8001f1a:	d903      	bls.n	8001f24 <HAL_DMA_Init+0x26c>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b2e      	cmp	r3, #46	; 0x2e
 8001f22:	d91f      	bls.n	8001f64 <HAL_DMA_Init+0x2ac>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b3e      	cmp	r3, #62	; 0x3e
 8001f2a:	d903      	bls.n	8001f34 <HAL_DMA_Init+0x27c>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b42      	cmp	r3, #66	; 0x42
 8001f32:	d917      	bls.n	8001f64 <HAL_DMA_Init+0x2ac>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b46      	cmp	r3, #70	; 0x46
 8001f3a:	d903      	bls.n	8001f44 <HAL_DMA_Init+0x28c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b48      	cmp	r3, #72	; 0x48
 8001f42:	d90f      	bls.n	8001f64 <HAL_DMA_Init+0x2ac>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b4e      	cmp	r3, #78	; 0x4e
 8001f4a:	d903      	bls.n	8001f54 <HAL_DMA_Init+0x29c>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b52      	cmp	r3, #82	; 0x52
 8001f52:	d907      	bls.n	8001f64 <HAL_DMA_Init+0x2ac>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b73      	cmp	r3, #115	; 0x73
 8001f5a:	d905      	bls.n	8001f68 <HAL_DMA_Init+0x2b0>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b77      	cmp	r3, #119	; 0x77
 8001f62:	d801      	bhi.n	8001f68 <HAL_DMA_Init+0x2b0>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <HAL_DMA_Init+0x2b2>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f74:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f023 0307 	bic.w	r3, r3, #7
 8001f8c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d117      	bne.n	8001fd0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00e      	beq.n	8001fd0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f001 ff88 	bl	8003ec8 <DMA_CheckFifoParam>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d008      	beq.n	8001fd0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2240      	movs	r2, #64	; 0x40
 8001fc2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e1ff      	b.n	80023d0 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f001 fec3 	bl	8003d64 <DMA_CalcBaseAndBitshift>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	f003 031f 	and.w	r3, r3, #31
 8001fea:	223f      	movs	r2, #63	; 0x3f
 8001fec:	409a      	lsls	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	e0fe      	b.n	80021f2 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a28      	ldr	r2, [pc, #160]	; (800209c <HAL_DMA_Init+0x3e4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d04a      	beq.n	8002094 <HAL_DMA_Init+0x3dc>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a27      	ldr	r2, [pc, #156]	; (80020a0 <HAL_DMA_Init+0x3e8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d045      	beq.n	8002094 <HAL_DMA_Init+0x3dc>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a25      	ldr	r2, [pc, #148]	; (80020a4 <HAL_DMA_Init+0x3ec>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d040      	beq.n	8002094 <HAL_DMA_Init+0x3dc>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a24      	ldr	r2, [pc, #144]	; (80020a8 <HAL_DMA_Init+0x3f0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d03b      	beq.n	8002094 <HAL_DMA_Init+0x3dc>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a22      	ldr	r2, [pc, #136]	; (80020ac <HAL_DMA_Init+0x3f4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d036      	beq.n	8002094 <HAL_DMA_Init+0x3dc>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a21      	ldr	r2, [pc, #132]	; (80020b0 <HAL_DMA_Init+0x3f8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d031      	beq.n	8002094 <HAL_DMA_Init+0x3dc>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <HAL_DMA_Init+0x3fc>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d02c      	beq.n	8002094 <HAL_DMA_Init+0x3dc>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1e      	ldr	r2, [pc, #120]	; (80020b8 <HAL_DMA_Init+0x400>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d027      	beq.n	8002094 <HAL_DMA_Init+0x3dc>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <HAL_DMA_Init+0x404>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d022      	beq.n	8002094 <HAL_DMA_Init+0x3dc>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <HAL_DMA_Init+0x408>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d01d      	beq.n	8002094 <HAL_DMA_Init+0x3dc>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a19      	ldr	r2, [pc, #100]	; (80020c4 <HAL_DMA_Init+0x40c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d018      	beq.n	8002094 <HAL_DMA_Init+0x3dc>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <HAL_DMA_Init+0x410>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d013      	beq.n	8002094 <HAL_DMA_Init+0x3dc>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a16      	ldr	r2, [pc, #88]	; (80020cc <HAL_DMA_Init+0x414>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00e      	beq.n	8002094 <HAL_DMA_Init+0x3dc>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a15      	ldr	r2, [pc, #84]	; (80020d0 <HAL_DMA_Init+0x418>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d009      	beq.n	8002094 <HAL_DMA_Init+0x3dc>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a13      	ldr	r2, [pc, #76]	; (80020d4 <HAL_DMA_Init+0x41c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d004      	beq.n	8002094 <HAL_DMA_Init+0x3dc>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <HAL_DMA_Init+0x420>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d123      	bne.n	80020dc <HAL_DMA_Init+0x424>
 8002094:	2301      	movs	r3, #1
 8002096:	e022      	b.n	80020de <HAL_DMA_Init+0x426>
 8002098:	fe10803f 	.word	0xfe10803f
 800209c:	48022c08 	.word	0x48022c08
 80020a0:	48022c1c 	.word	0x48022c1c
 80020a4:	48022c30 	.word	0x48022c30
 80020a8:	48022c44 	.word	0x48022c44
 80020ac:	48022c58 	.word	0x48022c58
 80020b0:	48022c6c 	.word	0x48022c6c
 80020b4:	48022c80 	.word	0x48022c80
 80020b8:	48022c94 	.word	0x48022c94
 80020bc:	58025408 	.word	0x58025408
 80020c0:	5802541c 	.word	0x5802541c
 80020c4:	58025430 	.word	0x58025430
 80020c8:	58025444 	.word	0x58025444
 80020cc:	58025458 	.word	0x58025458
 80020d0:	5802546c 	.word	0x5802546c
 80020d4:	58025480 	.word	0x58025480
 80020d8:	58025494 	.word	0x58025494
 80020dc:	2300      	movs	r3, #0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d07e      	beq.n	80021e0 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a80      	ldr	r2, [pc, #512]	; (80022e8 <HAL_DMA_Init+0x630>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d021      	beq.n	8002130 <HAL_DMA_Init+0x478>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a7e      	ldr	r2, [pc, #504]	; (80022ec <HAL_DMA_Init+0x634>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d01c      	beq.n	8002130 <HAL_DMA_Init+0x478>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a7d      	ldr	r2, [pc, #500]	; (80022f0 <HAL_DMA_Init+0x638>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d017      	beq.n	8002130 <HAL_DMA_Init+0x478>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a7b      	ldr	r2, [pc, #492]	; (80022f4 <HAL_DMA_Init+0x63c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d012      	beq.n	8002130 <HAL_DMA_Init+0x478>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a7a      	ldr	r2, [pc, #488]	; (80022f8 <HAL_DMA_Init+0x640>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00d      	beq.n	8002130 <HAL_DMA_Init+0x478>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a78      	ldr	r2, [pc, #480]	; (80022fc <HAL_DMA_Init+0x644>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d008      	beq.n	8002130 <HAL_DMA_Init+0x478>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a77      	ldr	r2, [pc, #476]	; (8002300 <HAL_DMA_Init+0x648>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d003      	beq.n	8002130 <HAL_DMA_Init+0x478>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a75      	ldr	r2, [pc, #468]	; (8002304 <HAL_DMA_Init+0x64c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4b6e      	ldr	r3, [pc, #440]	; (8002308 <HAL_DMA_Init+0x650>)
 800214e:	4013      	ands	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d008      	beq.n	800216c <HAL_DMA_Init+0x4b4>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b80      	cmp	r3, #128	; 0x80
 8002160:	d102      	bne.n	8002168 <HAL_DMA_Init+0x4b0>
 8002162:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002166:	e002      	b.n	800216e <HAL_DMA_Init+0x4b6>
 8002168:	2300      	movs	r3, #0
 800216a:	e000      	b.n	800216e <HAL_DMA_Init+0x4b6>
 800216c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68d2      	ldr	r2, [r2, #12]
 8002172:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002174:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800217c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002184:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800218c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002194:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800219c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b56      	ldr	r3, [pc, #344]	; (800230c <HAL_DMA_Init+0x654>)
 80021b4:	4413      	add	r3, r2
 80021b6:	4a56      	ldr	r2, [pc, #344]	; (8002310 <HAL_DMA_Init+0x658>)
 80021b8:	fba2 2303 	umull	r2, r3, r2, r3
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	009a      	lsls	r2, r3, #2
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f001 fdcd 	bl	8003d64 <DMA_CalcBaseAndBitshift>
 80021ca:	4603      	mov	r3, r0
 80021cc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	2201      	movs	r2, #1
 80021d8:	409a      	lsls	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	e008      	b.n	80021f2 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2240      	movs	r2, #64	; 0x40
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2203      	movs	r2, #3
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e0ee      	b.n	80023d0 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a47      	ldr	r2, [pc, #284]	; (8002314 <HAL_DMA_Init+0x65c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d072      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a45      	ldr	r2, [pc, #276]	; (8002318 <HAL_DMA_Init+0x660>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d06d      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a44      	ldr	r2, [pc, #272]	; (800231c <HAL_DMA_Init+0x664>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d068      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a42      	ldr	r2, [pc, #264]	; (8002320 <HAL_DMA_Init+0x668>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d063      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a41      	ldr	r2, [pc, #260]	; (8002324 <HAL_DMA_Init+0x66c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d05e      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a3f      	ldr	r2, [pc, #252]	; (8002328 <HAL_DMA_Init+0x670>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d059      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a3e      	ldr	r2, [pc, #248]	; (800232c <HAL_DMA_Init+0x674>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d054      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a3c      	ldr	r2, [pc, #240]	; (8002330 <HAL_DMA_Init+0x678>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d04f      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a3b      	ldr	r2, [pc, #236]	; (8002334 <HAL_DMA_Init+0x67c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d04a      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a39      	ldr	r2, [pc, #228]	; (8002338 <HAL_DMA_Init+0x680>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d045      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a38      	ldr	r2, [pc, #224]	; (800233c <HAL_DMA_Init+0x684>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d040      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a36      	ldr	r2, [pc, #216]	; (8002340 <HAL_DMA_Init+0x688>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d03b      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a35      	ldr	r2, [pc, #212]	; (8002344 <HAL_DMA_Init+0x68c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d036      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a33      	ldr	r2, [pc, #204]	; (8002348 <HAL_DMA_Init+0x690>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d031      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a32      	ldr	r2, [pc, #200]	; (800234c <HAL_DMA_Init+0x694>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d02c      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a30      	ldr	r2, [pc, #192]	; (8002350 <HAL_DMA_Init+0x698>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d027      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <HAL_DMA_Init+0x630>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d022      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a12      	ldr	r2, [pc, #72]	; (80022ec <HAL_DMA_Init+0x634>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d01d      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a11      	ldr	r2, [pc, #68]	; (80022f0 <HAL_DMA_Init+0x638>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d018      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0f      	ldr	r2, [pc, #60]	; (80022f4 <HAL_DMA_Init+0x63c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a0e      	ldr	r2, [pc, #56]	; (80022f8 <HAL_DMA_Init+0x640>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d00e      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_DMA_Init+0x644>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d009      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a0b      	ldr	r2, [pc, #44]	; (8002300 <HAL_DMA_Init+0x648>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d004      	beq.n	80022e2 <HAL_DMA_Init+0x62a>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a09      	ldr	r2, [pc, #36]	; (8002304 <HAL_DMA_Init+0x64c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d138      	bne.n	8002354 <HAL_DMA_Init+0x69c>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e037      	b.n	8002356 <HAL_DMA_Init+0x69e>
 80022e6:	bf00      	nop
 80022e8:	58025408 	.word	0x58025408
 80022ec:	5802541c 	.word	0x5802541c
 80022f0:	58025430 	.word	0x58025430
 80022f4:	58025444 	.word	0x58025444
 80022f8:	58025458 	.word	0x58025458
 80022fc:	5802546c 	.word	0x5802546c
 8002300:	58025480 	.word	0x58025480
 8002304:	58025494 	.word	0x58025494
 8002308:	fffe000f 	.word	0xfffe000f
 800230c:	a7fdabf8 	.word	0xa7fdabf8
 8002310:	cccccccd 	.word	0xcccccccd
 8002314:	40020010 	.word	0x40020010
 8002318:	40020028 	.word	0x40020028
 800231c:	40020040 	.word	0x40020040
 8002320:	40020058 	.word	0x40020058
 8002324:	40020070 	.word	0x40020070
 8002328:	40020088 	.word	0x40020088
 800232c:	400200a0 	.word	0x400200a0
 8002330:	400200b8 	.word	0x400200b8
 8002334:	40020410 	.word	0x40020410
 8002338:	40020428 	.word	0x40020428
 800233c:	40020440 	.word	0x40020440
 8002340:	40020458 	.word	0x40020458
 8002344:	40020470 	.word	0x40020470
 8002348:	40020488 	.word	0x40020488
 800234c:	400204a0 	.word	0x400204a0
 8002350:	400204b8 	.word	0x400204b8
 8002354:	2300      	movs	r3, #0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d032      	beq.n	80023c0 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f001 fe30 	bl	8003fc0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b80      	cmp	r3, #128	; 0x80
 8002366:	d102      	bne.n	800236e <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002382:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d010      	beq.n	80023ae <HAL_DMA_Init+0x6f6>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b08      	cmp	r3, #8
 8002392:	d80c      	bhi.n	80023ae <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f001 fead 	bl	80040f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	e008      	b.n	80023c0 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80023e0:	f7ff fb0a 	bl	80019f8 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e2dc      	b.n	80029aa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d008      	beq.n	800240e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2280      	movs	r2, #128	; 0x80
 8002400:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e2cd      	b.n	80029aa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a76      	ldr	r2, [pc, #472]	; (80025ec <HAL_DMA_Abort+0x214>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d04a      	beq.n	80024ae <HAL_DMA_Abort+0xd6>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a74      	ldr	r2, [pc, #464]	; (80025f0 <HAL_DMA_Abort+0x218>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d045      	beq.n	80024ae <HAL_DMA_Abort+0xd6>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a73      	ldr	r2, [pc, #460]	; (80025f4 <HAL_DMA_Abort+0x21c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d040      	beq.n	80024ae <HAL_DMA_Abort+0xd6>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a71      	ldr	r2, [pc, #452]	; (80025f8 <HAL_DMA_Abort+0x220>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d03b      	beq.n	80024ae <HAL_DMA_Abort+0xd6>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a70      	ldr	r2, [pc, #448]	; (80025fc <HAL_DMA_Abort+0x224>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d036      	beq.n	80024ae <HAL_DMA_Abort+0xd6>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a6e      	ldr	r2, [pc, #440]	; (8002600 <HAL_DMA_Abort+0x228>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d031      	beq.n	80024ae <HAL_DMA_Abort+0xd6>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a6d      	ldr	r2, [pc, #436]	; (8002604 <HAL_DMA_Abort+0x22c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d02c      	beq.n	80024ae <HAL_DMA_Abort+0xd6>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a6b      	ldr	r2, [pc, #428]	; (8002608 <HAL_DMA_Abort+0x230>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d027      	beq.n	80024ae <HAL_DMA_Abort+0xd6>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a6a      	ldr	r2, [pc, #424]	; (800260c <HAL_DMA_Abort+0x234>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d022      	beq.n	80024ae <HAL_DMA_Abort+0xd6>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a68      	ldr	r2, [pc, #416]	; (8002610 <HAL_DMA_Abort+0x238>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01d      	beq.n	80024ae <HAL_DMA_Abort+0xd6>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a67      	ldr	r2, [pc, #412]	; (8002614 <HAL_DMA_Abort+0x23c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d018      	beq.n	80024ae <HAL_DMA_Abort+0xd6>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a65      	ldr	r2, [pc, #404]	; (8002618 <HAL_DMA_Abort+0x240>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d013      	beq.n	80024ae <HAL_DMA_Abort+0xd6>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a64      	ldr	r2, [pc, #400]	; (800261c <HAL_DMA_Abort+0x244>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00e      	beq.n	80024ae <HAL_DMA_Abort+0xd6>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a62      	ldr	r2, [pc, #392]	; (8002620 <HAL_DMA_Abort+0x248>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d009      	beq.n	80024ae <HAL_DMA_Abort+0xd6>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a61      	ldr	r2, [pc, #388]	; (8002624 <HAL_DMA_Abort+0x24c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d004      	beq.n	80024ae <HAL_DMA_Abort+0xd6>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a5f      	ldr	r2, [pc, #380]	; (8002628 <HAL_DMA_Abort+0x250>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_DMA_Abort+0xda>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_DMA_Abort+0xdc>
 80024b2:	2300      	movs	r3, #0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d013      	beq.n	80024e0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 021e 	bic.w	r2, r2, #30
 80024c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024d6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	e00a      	b.n	80024f6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 020e 	bic.w	r2, r2, #14
 80024ee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a3c      	ldr	r2, [pc, #240]	; (80025ec <HAL_DMA_Abort+0x214>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d072      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a3a      	ldr	r2, [pc, #232]	; (80025f0 <HAL_DMA_Abort+0x218>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d06d      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a39      	ldr	r2, [pc, #228]	; (80025f4 <HAL_DMA_Abort+0x21c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d068      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a37      	ldr	r2, [pc, #220]	; (80025f8 <HAL_DMA_Abort+0x220>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d063      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a36      	ldr	r2, [pc, #216]	; (80025fc <HAL_DMA_Abort+0x224>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d05e      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a34      	ldr	r2, [pc, #208]	; (8002600 <HAL_DMA_Abort+0x228>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d059      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a33      	ldr	r2, [pc, #204]	; (8002604 <HAL_DMA_Abort+0x22c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d054      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a31      	ldr	r2, [pc, #196]	; (8002608 <HAL_DMA_Abort+0x230>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d04f      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a30      	ldr	r2, [pc, #192]	; (800260c <HAL_DMA_Abort+0x234>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d04a      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a2e      	ldr	r2, [pc, #184]	; (8002610 <HAL_DMA_Abort+0x238>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d045      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a2d      	ldr	r2, [pc, #180]	; (8002614 <HAL_DMA_Abort+0x23c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d040      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a2b      	ldr	r2, [pc, #172]	; (8002618 <HAL_DMA_Abort+0x240>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d03b      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a2a      	ldr	r2, [pc, #168]	; (800261c <HAL_DMA_Abort+0x244>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d036      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a28      	ldr	r2, [pc, #160]	; (8002620 <HAL_DMA_Abort+0x248>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d031      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a27      	ldr	r2, [pc, #156]	; (8002624 <HAL_DMA_Abort+0x24c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d02c      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a25      	ldr	r2, [pc, #148]	; (8002628 <HAL_DMA_Abort+0x250>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d027      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a24      	ldr	r2, [pc, #144]	; (800262c <HAL_DMA_Abort+0x254>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d022      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a22      	ldr	r2, [pc, #136]	; (8002630 <HAL_DMA_Abort+0x258>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d01d      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a21      	ldr	r2, [pc, #132]	; (8002634 <HAL_DMA_Abort+0x25c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d018      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a1f      	ldr	r2, [pc, #124]	; (8002638 <HAL_DMA_Abort+0x260>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1e      	ldr	r2, [pc, #120]	; (800263c <HAL_DMA_Abort+0x264>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d00e      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1c      	ldr	r2, [pc, #112]	; (8002640 <HAL_DMA_Abort+0x268>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d009      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1b      	ldr	r2, [pc, #108]	; (8002644 <HAL_DMA_Abort+0x26c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d004      	beq.n	80025e6 <HAL_DMA_Abort+0x20e>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a19      	ldr	r2, [pc, #100]	; (8002648 <HAL_DMA_Abort+0x270>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d132      	bne.n	800264c <HAL_DMA_Abort+0x274>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e031      	b.n	800264e <HAL_DMA_Abort+0x276>
 80025ea:	bf00      	nop
 80025ec:	40020010 	.word	0x40020010
 80025f0:	40020028 	.word	0x40020028
 80025f4:	40020040 	.word	0x40020040
 80025f8:	40020058 	.word	0x40020058
 80025fc:	40020070 	.word	0x40020070
 8002600:	40020088 	.word	0x40020088
 8002604:	400200a0 	.word	0x400200a0
 8002608:	400200b8 	.word	0x400200b8
 800260c:	40020410 	.word	0x40020410
 8002610:	40020428 	.word	0x40020428
 8002614:	40020440 	.word	0x40020440
 8002618:	40020458 	.word	0x40020458
 800261c:	40020470 	.word	0x40020470
 8002620:	40020488 	.word	0x40020488
 8002624:	400204a0 	.word	0x400204a0
 8002628:	400204b8 	.word	0x400204b8
 800262c:	58025408 	.word	0x58025408
 8002630:	5802541c 	.word	0x5802541c
 8002634:	58025430 	.word	0x58025430
 8002638:	58025444 	.word	0x58025444
 800263c:	58025458 	.word	0x58025458
 8002640:	5802546c 	.word	0x5802546c
 8002644:	58025480 	.word	0x58025480
 8002648:	58025494 	.word	0x58025494
 800264c:	2300      	movs	r3, #0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002660:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a6d      	ldr	r2, [pc, #436]	; (800281c <HAL_DMA_Abort+0x444>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d04a      	beq.n	8002702 <HAL_DMA_Abort+0x32a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a6b      	ldr	r2, [pc, #428]	; (8002820 <HAL_DMA_Abort+0x448>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d045      	beq.n	8002702 <HAL_DMA_Abort+0x32a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6a      	ldr	r2, [pc, #424]	; (8002824 <HAL_DMA_Abort+0x44c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d040      	beq.n	8002702 <HAL_DMA_Abort+0x32a>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a68      	ldr	r2, [pc, #416]	; (8002828 <HAL_DMA_Abort+0x450>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d03b      	beq.n	8002702 <HAL_DMA_Abort+0x32a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a67      	ldr	r2, [pc, #412]	; (800282c <HAL_DMA_Abort+0x454>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d036      	beq.n	8002702 <HAL_DMA_Abort+0x32a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a65      	ldr	r2, [pc, #404]	; (8002830 <HAL_DMA_Abort+0x458>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d031      	beq.n	8002702 <HAL_DMA_Abort+0x32a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a64      	ldr	r2, [pc, #400]	; (8002834 <HAL_DMA_Abort+0x45c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d02c      	beq.n	8002702 <HAL_DMA_Abort+0x32a>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a62      	ldr	r2, [pc, #392]	; (8002838 <HAL_DMA_Abort+0x460>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d027      	beq.n	8002702 <HAL_DMA_Abort+0x32a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a61      	ldr	r2, [pc, #388]	; (800283c <HAL_DMA_Abort+0x464>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d022      	beq.n	8002702 <HAL_DMA_Abort+0x32a>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a5f      	ldr	r2, [pc, #380]	; (8002840 <HAL_DMA_Abort+0x468>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d01d      	beq.n	8002702 <HAL_DMA_Abort+0x32a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5e      	ldr	r2, [pc, #376]	; (8002844 <HAL_DMA_Abort+0x46c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d018      	beq.n	8002702 <HAL_DMA_Abort+0x32a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a5c      	ldr	r2, [pc, #368]	; (8002848 <HAL_DMA_Abort+0x470>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d013      	beq.n	8002702 <HAL_DMA_Abort+0x32a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a5b      	ldr	r2, [pc, #364]	; (800284c <HAL_DMA_Abort+0x474>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d00e      	beq.n	8002702 <HAL_DMA_Abort+0x32a>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a59      	ldr	r2, [pc, #356]	; (8002850 <HAL_DMA_Abort+0x478>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d009      	beq.n	8002702 <HAL_DMA_Abort+0x32a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a58      	ldr	r2, [pc, #352]	; (8002854 <HAL_DMA_Abort+0x47c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d004      	beq.n	8002702 <HAL_DMA_Abort+0x32a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a56      	ldr	r2, [pc, #344]	; (8002858 <HAL_DMA_Abort+0x480>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d108      	bne.n	8002714 <HAL_DMA_Abort+0x33c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0201 	bic.w	r2, r2, #1
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	e007      	b.n	8002724 <HAL_DMA_Abort+0x34c>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0201 	bic.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002724:	e013      	b.n	800274e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002726:	f7ff f967 	bl	80019f8 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b05      	cmp	r3, #5
 8002732:	d90c      	bls.n	800274e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2220      	movs	r2, #32
 8002738:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2203      	movs	r2, #3
 800273e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e12d      	b.n	80029aa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1e5      	bne.n	8002726 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a2f      	ldr	r2, [pc, #188]	; (800281c <HAL_DMA_Abort+0x444>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d04a      	beq.n	80027fa <HAL_DMA_Abort+0x422>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a2d      	ldr	r2, [pc, #180]	; (8002820 <HAL_DMA_Abort+0x448>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d045      	beq.n	80027fa <HAL_DMA_Abort+0x422>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a2c      	ldr	r2, [pc, #176]	; (8002824 <HAL_DMA_Abort+0x44c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d040      	beq.n	80027fa <HAL_DMA_Abort+0x422>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a2a      	ldr	r2, [pc, #168]	; (8002828 <HAL_DMA_Abort+0x450>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d03b      	beq.n	80027fa <HAL_DMA_Abort+0x422>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a29      	ldr	r2, [pc, #164]	; (800282c <HAL_DMA_Abort+0x454>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d036      	beq.n	80027fa <HAL_DMA_Abort+0x422>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a27      	ldr	r2, [pc, #156]	; (8002830 <HAL_DMA_Abort+0x458>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d031      	beq.n	80027fa <HAL_DMA_Abort+0x422>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a26      	ldr	r2, [pc, #152]	; (8002834 <HAL_DMA_Abort+0x45c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d02c      	beq.n	80027fa <HAL_DMA_Abort+0x422>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a24      	ldr	r2, [pc, #144]	; (8002838 <HAL_DMA_Abort+0x460>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d027      	beq.n	80027fa <HAL_DMA_Abort+0x422>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a23      	ldr	r2, [pc, #140]	; (800283c <HAL_DMA_Abort+0x464>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d022      	beq.n	80027fa <HAL_DMA_Abort+0x422>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a21      	ldr	r2, [pc, #132]	; (8002840 <HAL_DMA_Abort+0x468>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d01d      	beq.n	80027fa <HAL_DMA_Abort+0x422>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a20      	ldr	r2, [pc, #128]	; (8002844 <HAL_DMA_Abort+0x46c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d018      	beq.n	80027fa <HAL_DMA_Abort+0x422>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1e      	ldr	r2, [pc, #120]	; (8002848 <HAL_DMA_Abort+0x470>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d013      	beq.n	80027fa <HAL_DMA_Abort+0x422>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1d      	ldr	r2, [pc, #116]	; (800284c <HAL_DMA_Abort+0x474>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00e      	beq.n	80027fa <HAL_DMA_Abort+0x422>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <HAL_DMA_Abort+0x478>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d009      	beq.n	80027fa <HAL_DMA_Abort+0x422>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1a      	ldr	r2, [pc, #104]	; (8002854 <HAL_DMA_Abort+0x47c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d004      	beq.n	80027fa <HAL_DMA_Abort+0x422>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a18      	ldr	r2, [pc, #96]	; (8002858 <HAL_DMA_Abort+0x480>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d101      	bne.n	80027fe <HAL_DMA_Abort+0x426>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_DMA_Abort+0x428>
 80027fe:	2300      	movs	r3, #0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d02b      	beq.n	800285c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	223f      	movs	r2, #63	; 0x3f
 8002814:	409a      	lsls	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	e02a      	b.n	8002872 <HAL_DMA_Abort+0x49a>
 800281c:	40020010 	.word	0x40020010
 8002820:	40020028 	.word	0x40020028
 8002824:	40020040 	.word	0x40020040
 8002828:	40020058 	.word	0x40020058
 800282c:	40020070 	.word	0x40020070
 8002830:	40020088 	.word	0x40020088
 8002834:	400200a0 	.word	0x400200a0
 8002838:	400200b8 	.word	0x400200b8
 800283c:	40020410 	.word	0x40020410
 8002840:	40020428 	.word	0x40020428
 8002844:	40020440 	.word	0x40020440
 8002848:	40020458 	.word	0x40020458
 800284c:	40020470 	.word	0x40020470
 8002850:	40020488 	.word	0x40020488
 8002854:	400204a0 	.word	0x400204a0
 8002858:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	2201      	movs	r2, #1
 800286c:	409a      	lsls	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a4f      	ldr	r2, [pc, #316]	; (80029b4 <HAL_DMA_Abort+0x5dc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d072      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a4d      	ldr	r2, [pc, #308]	; (80029b8 <HAL_DMA_Abort+0x5e0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d06d      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a4c      	ldr	r2, [pc, #304]	; (80029bc <HAL_DMA_Abort+0x5e4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d068      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a4a      	ldr	r2, [pc, #296]	; (80029c0 <HAL_DMA_Abort+0x5e8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d063      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a49      	ldr	r2, [pc, #292]	; (80029c4 <HAL_DMA_Abort+0x5ec>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d05e      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a47      	ldr	r2, [pc, #284]	; (80029c8 <HAL_DMA_Abort+0x5f0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d059      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a46      	ldr	r2, [pc, #280]	; (80029cc <HAL_DMA_Abort+0x5f4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d054      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a44      	ldr	r2, [pc, #272]	; (80029d0 <HAL_DMA_Abort+0x5f8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d04f      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a43      	ldr	r2, [pc, #268]	; (80029d4 <HAL_DMA_Abort+0x5fc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d04a      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a41      	ldr	r2, [pc, #260]	; (80029d8 <HAL_DMA_Abort+0x600>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d045      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a40      	ldr	r2, [pc, #256]	; (80029dc <HAL_DMA_Abort+0x604>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d040      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a3e      	ldr	r2, [pc, #248]	; (80029e0 <HAL_DMA_Abort+0x608>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d03b      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a3d      	ldr	r2, [pc, #244]	; (80029e4 <HAL_DMA_Abort+0x60c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d036      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a3b      	ldr	r2, [pc, #236]	; (80029e8 <HAL_DMA_Abort+0x610>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d031      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a3a      	ldr	r2, [pc, #232]	; (80029ec <HAL_DMA_Abort+0x614>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d02c      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a38      	ldr	r2, [pc, #224]	; (80029f0 <HAL_DMA_Abort+0x618>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d027      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a37      	ldr	r2, [pc, #220]	; (80029f4 <HAL_DMA_Abort+0x61c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d022      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a35      	ldr	r2, [pc, #212]	; (80029f8 <HAL_DMA_Abort+0x620>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01d      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a34      	ldr	r2, [pc, #208]	; (80029fc <HAL_DMA_Abort+0x624>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d018      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a32      	ldr	r2, [pc, #200]	; (8002a00 <HAL_DMA_Abort+0x628>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d013      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a31      	ldr	r2, [pc, #196]	; (8002a04 <HAL_DMA_Abort+0x62c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00e      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a2f      	ldr	r2, [pc, #188]	; (8002a08 <HAL_DMA_Abort+0x630>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d009      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a2e      	ldr	r2, [pc, #184]	; (8002a0c <HAL_DMA_Abort+0x634>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d004      	beq.n	8002962 <HAL_DMA_Abort+0x58a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a2c      	ldr	r2, [pc, #176]	; (8002a10 <HAL_DMA_Abort+0x638>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <HAL_DMA_Abort+0x58e>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_DMA_Abort+0x590>
 8002966:	2300      	movs	r3, #0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d015      	beq.n	8002998 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002974:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00c      	beq.n	8002998 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002988:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800298c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002996:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40020010 	.word	0x40020010
 80029b8:	40020028 	.word	0x40020028
 80029bc:	40020040 	.word	0x40020040
 80029c0:	40020058 	.word	0x40020058
 80029c4:	40020070 	.word	0x40020070
 80029c8:	40020088 	.word	0x40020088
 80029cc:	400200a0 	.word	0x400200a0
 80029d0:	400200b8 	.word	0x400200b8
 80029d4:	40020410 	.word	0x40020410
 80029d8:	40020428 	.word	0x40020428
 80029dc:	40020440 	.word	0x40020440
 80029e0:	40020458 	.word	0x40020458
 80029e4:	40020470 	.word	0x40020470
 80029e8:	40020488 	.word	0x40020488
 80029ec:	400204a0 	.word	0x400204a0
 80029f0:	400204b8 	.word	0x400204b8
 80029f4:	58025408 	.word	0x58025408
 80029f8:	5802541c 	.word	0x5802541c
 80029fc:	58025430 	.word	0x58025430
 8002a00:	58025444 	.word	0x58025444
 8002a04:	58025458 	.word	0x58025458
 8002a08:	5802546c 	.word	0x5802546c
 8002a0c:	58025480 	.word	0x58025480
 8002a10:	58025494 	.word	0x58025494

08002a14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e237      	b.n	8002e96 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d004      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2280      	movs	r2, #128	; 0x80
 8002a36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e22c      	b.n	8002e96 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a5c      	ldr	r2, [pc, #368]	; (8002bb4 <HAL_DMA_Abort_IT+0x1a0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d04a      	beq.n	8002adc <HAL_DMA_Abort_IT+0xc8>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a5b      	ldr	r2, [pc, #364]	; (8002bb8 <HAL_DMA_Abort_IT+0x1a4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d045      	beq.n	8002adc <HAL_DMA_Abort_IT+0xc8>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a59      	ldr	r2, [pc, #356]	; (8002bbc <HAL_DMA_Abort_IT+0x1a8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d040      	beq.n	8002adc <HAL_DMA_Abort_IT+0xc8>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a58      	ldr	r2, [pc, #352]	; (8002bc0 <HAL_DMA_Abort_IT+0x1ac>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d03b      	beq.n	8002adc <HAL_DMA_Abort_IT+0xc8>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a56      	ldr	r2, [pc, #344]	; (8002bc4 <HAL_DMA_Abort_IT+0x1b0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d036      	beq.n	8002adc <HAL_DMA_Abort_IT+0xc8>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a55      	ldr	r2, [pc, #340]	; (8002bc8 <HAL_DMA_Abort_IT+0x1b4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d031      	beq.n	8002adc <HAL_DMA_Abort_IT+0xc8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a53      	ldr	r2, [pc, #332]	; (8002bcc <HAL_DMA_Abort_IT+0x1b8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d02c      	beq.n	8002adc <HAL_DMA_Abort_IT+0xc8>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a52      	ldr	r2, [pc, #328]	; (8002bd0 <HAL_DMA_Abort_IT+0x1bc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d027      	beq.n	8002adc <HAL_DMA_Abort_IT+0xc8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a50      	ldr	r2, [pc, #320]	; (8002bd4 <HAL_DMA_Abort_IT+0x1c0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d022      	beq.n	8002adc <HAL_DMA_Abort_IT+0xc8>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a4f      	ldr	r2, [pc, #316]	; (8002bd8 <HAL_DMA_Abort_IT+0x1c4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d01d      	beq.n	8002adc <HAL_DMA_Abort_IT+0xc8>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a4d      	ldr	r2, [pc, #308]	; (8002bdc <HAL_DMA_Abort_IT+0x1c8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d018      	beq.n	8002adc <HAL_DMA_Abort_IT+0xc8>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a4c      	ldr	r2, [pc, #304]	; (8002be0 <HAL_DMA_Abort_IT+0x1cc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d013      	beq.n	8002adc <HAL_DMA_Abort_IT+0xc8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a4a      	ldr	r2, [pc, #296]	; (8002be4 <HAL_DMA_Abort_IT+0x1d0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00e      	beq.n	8002adc <HAL_DMA_Abort_IT+0xc8>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a49      	ldr	r2, [pc, #292]	; (8002be8 <HAL_DMA_Abort_IT+0x1d4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d009      	beq.n	8002adc <HAL_DMA_Abort_IT+0xc8>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a47      	ldr	r2, [pc, #284]	; (8002bec <HAL_DMA_Abort_IT+0x1d8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d004      	beq.n	8002adc <HAL_DMA_Abort_IT+0xc8>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a46      	ldr	r2, [pc, #280]	; (8002bf0 <HAL_DMA_Abort_IT+0x1dc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d101      	bne.n	8002ae0 <HAL_DMA_Abort_IT+0xcc>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <HAL_DMA_Abort_IT+0xce>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 8086 	beq.w	8002bf4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2204      	movs	r2, #4
 8002aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2f      	ldr	r2, [pc, #188]	; (8002bb4 <HAL_DMA_Abort_IT+0x1a0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d04a      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x17c>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2e      	ldr	r2, [pc, #184]	; (8002bb8 <HAL_DMA_Abort_IT+0x1a4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d045      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x17c>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a2c      	ldr	r2, [pc, #176]	; (8002bbc <HAL_DMA_Abort_IT+0x1a8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d040      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x17c>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a2b      	ldr	r2, [pc, #172]	; (8002bc0 <HAL_DMA_Abort_IT+0x1ac>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d03b      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x17c>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a29      	ldr	r2, [pc, #164]	; (8002bc4 <HAL_DMA_Abort_IT+0x1b0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d036      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x17c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a28      	ldr	r2, [pc, #160]	; (8002bc8 <HAL_DMA_Abort_IT+0x1b4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d031      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x17c>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a26      	ldr	r2, [pc, #152]	; (8002bcc <HAL_DMA_Abort_IT+0x1b8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d02c      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x17c>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a25      	ldr	r2, [pc, #148]	; (8002bd0 <HAL_DMA_Abort_IT+0x1bc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d027      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x17c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a23      	ldr	r2, [pc, #140]	; (8002bd4 <HAL_DMA_Abort_IT+0x1c0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d022      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x17c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a22      	ldr	r2, [pc, #136]	; (8002bd8 <HAL_DMA_Abort_IT+0x1c4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d01d      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x17c>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a20      	ldr	r2, [pc, #128]	; (8002bdc <HAL_DMA_Abort_IT+0x1c8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d018      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x17c>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1f      	ldr	r2, [pc, #124]	; (8002be0 <HAL_DMA_Abort_IT+0x1cc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d013      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x17c>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <HAL_DMA_Abort_IT+0x1d0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00e      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x17c>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <HAL_DMA_Abort_IT+0x1d4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d009      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x17c>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1a      	ldr	r2, [pc, #104]	; (8002bec <HAL_DMA_Abort_IT+0x1d8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d004      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x17c>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <HAL_DMA_Abort_IT+0x1dc>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d108      	bne.n	8002ba2 <HAL_DMA_Abort_IT+0x18e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0201 	bic.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	e178      	b.n	8002e94 <HAL_DMA_Abort_IT+0x480>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e16f      	b.n	8002e94 <HAL_DMA_Abort_IT+0x480>
 8002bb4:	40020010 	.word	0x40020010
 8002bb8:	40020028 	.word	0x40020028
 8002bbc:	40020040 	.word	0x40020040
 8002bc0:	40020058 	.word	0x40020058
 8002bc4:	40020070 	.word	0x40020070
 8002bc8:	40020088 	.word	0x40020088
 8002bcc:	400200a0 	.word	0x400200a0
 8002bd0:	400200b8 	.word	0x400200b8
 8002bd4:	40020410 	.word	0x40020410
 8002bd8:	40020428 	.word	0x40020428
 8002bdc:	40020440 	.word	0x40020440
 8002be0:	40020458 	.word	0x40020458
 8002be4:	40020470 	.word	0x40020470
 8002be8:	40020488 	.word	0x40020488
 8002bec:	400204a0 	.word	0x400204a0
 8002bf0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 020e 	bic.w	r2, r2, #14
 8002c02:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a6c      	ldr	r2, [pc, #432]	; (8002dbc <HAL_DMA_Abort_IT+0x3a8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d04a      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x290>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a6b      	ldr	r2, [pc, #428]	; (8002dc0 <HAL_DMA_Abort_IT+0x3ac>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d045      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x290>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a69      	ldr	r2, [pc, #420]	; (8002dc4 <HAL_DMA_Abort_IT+0x3b0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d040      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x290>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a68      	ldr	r2, [pc, #416]	; (8002dc8 <HAL_DMA_Abort_IT+0x3b4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d03b      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x290>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a66      	ldr	r2, [pc, #408]	; (8002dcc <HAL_DMA_Abort_IT+0x3b8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d036      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x290>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a65      	ldr	r2, [pc, #404]	; (8002dd0 <HAL_DMA_Abort_IT+0x3bc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d031      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x290>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a63      	ldr	r2, [pc, #396]	; (8002dd4 <HAL_DMA_Abort_IT+0x3c0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d02c      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x290>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a62      	ldr	r2, [pc, #392]	; (8002dd8 <HAL_DMA_Abort_IT+0x3c4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d027      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x290>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a60      	ldr	r2, [pc, #384]	; (8002ddc <HAL_DMA_Abort_IT+0x3c8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d022      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x290>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a5f      	ldr	r2, [pc, #380]	; (8002de0 <HAL_DMA_Abort_IT+0x3cc>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d01d      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x290>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a5d      	ldr	r2, [pc, #372]	; (8002de4 <HAL_DMA_Abort_IT+0x3d0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d018      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x290>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a5c      	ldr	r2, [pc, #368]	; (8002de8 <HAL_DMA_Abort_IT+0x3d4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d013      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x290>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a5a      	ldr	r2, [pc, #360]	; (8002dec <HAL_DMA_Abort_IT+0x3d8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00e      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x290>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a59      	ldr	r2, [pc, #356]	; (8002df0 <HAL_DMA_Abort_IT+0x3dc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d009      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x290>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a57      	ldr	r2, [pc, #348]	; (8002df4 <HAL_DMA_Abort_IT+0x3e0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d004      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x290>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a56      	ldr	r2, [pc, #344]	; (8002df8 <HAL_DMA_Abort_IT+0x3e4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d108      	bne.n	8002cb6 <HAL_DMA_Abort_IT+0x2a2>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	e007      	b.n	8002cc6 <HAL_DMA_Abort_IT+0x2b2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0201 	bic.w	r2, r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a3c      	ldr	r2, [pc, #240]	; (8002dbc <HAL_DMA_Abort_IT+0x3a8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d072      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a3a      	ldr	r2, [pc, #232]	; (8002dc0 <HAL_DMA_Abort_IT+0x3ac>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d06d      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a39      	ldr	r2, [pc, #228]	; (8002dc4 <HAL_DMA_Abort_IT+0x3b0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d068      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a37      	ldr	r2, [pc, #220]	; (8002dc8 <HAL_DMA_Abort_IT+0x3b4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d063      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a36      	ldr	r2, [pc, #216]	; (8002dcc <HAL_DMA_Abort_IT+0x3b8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d05e      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a34      	ldr	r2, [pc, #208]	; (8002dd0 <HAL_DMA_Abort_IT+0x3bc>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d059      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a33      	ldr	r2, [pc, #204]	; (8002dd4 <HAL_DMA_Abort_IT+0x3c0>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d054      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a31      	ldr	r2, [pc, #196]	; (8002dd8 <HAL_DMA_Abort_IT+0x3c4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d04f      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a30      	ldr	r2, [pc, #192]	; (8002ddc <HAL_DMA_Abort_IT+0x3c8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d04a      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2e      	ldr	r2, [pc, #184]	; (8002de0 <HAL_DMA_Abort_IT+0x3cc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d045      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2d      	ldr	r2, [pc, #180]	; (8002de4 <HAL_DMA_Abort_IT+0x3d0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d040      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a2b      	ldr	r2, [pc, #172]	; (8002de8 <HAL_DMA_Abort_IT+0x3d4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d03b      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a2a      	ldr	r2, [pc, #168]	; (8002dec <HAL_DMA_Abort_IT+0x3d8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d036      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a28      	ldr	r2, [pc, #160]	; (8002df0 <HAL_DMA_Abort_IT+0x3dc>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d031      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a27      	ldr	r2, [pc, #156]	; (8002df4 <HAL_DMA_Abort_IT+0x3e0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d02c      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <HAL_DMA_Abort_IT+0x3e4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d027      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a24      	ldr	r2, [pc, #144]	; (8002dfc <HAL_DMA_Abort_IT+0x3e8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d022      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a22      	ldr	r2, [pc, #136]	; (8002e00 <HAL_DMA_Abort_IT+0x3ec>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d01d      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a21      	ldr	r2, [pc, #132]	; (8002e04 <HAL_DMA_Abort_IT+0x3f0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d018      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1f      	ldr	r2, [pc, #124]	; (8002e08 <HAL_DMA_Abort_IT+0x3f4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1e      	ldr	r2, [pc, #120]	; (8002e0c <HAL_DMA_Abort_IT+0x3f8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00e      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <HAL_DMA_Abort_IT+0x3fc>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d009      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a1b      	ldr	r2, [pc, #108]	; (8002e14 <HAL_DMA_Abort_IT+0x400>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d004      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x3a2>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a19      	ldr	r2, [pc, #100]	; (8002e18 <HAL_DMA_Abort_IT+0x404>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d132      	bne.n	8002e1c <HAL_DMA_Abort_IT+0x408>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e031      	b.n	8002e1e <HAL_DMA_Abort_IT+0x40a>
 8002dba:	bf00      	nop
 8002dbc:	40020010 	.word	0x40020010
 8002dc0:	40020028 	.word	0x40020028
 8002dc4:	40020040 	.word	0x40020040
 8002dc8:	40020058 	.word	0x40020058
 8002dcc:	40020070 	.word	0x40020070
 8002dd0:	40020088 	.word	0x40020088
 8002dd4:	400200a0 	.word	0x400200a0
 8002dd8:	400200b8 	.word	0x400200b8
 8002ddc:	40020410 	.word	0x40020410
 8002de0:	40020428 	.word	0x40020428
 8002de4:	40020440 	.word	0x40020440
 8002de8:	40020458 	.word	0x40020458
 8002dec:	40020470 	.word	0x40020470
 8002df0:	40020488 	.word	0x40020488
 8002df4:	400204a0 	.word	0x400204a0
 8002df8:	400204b8 	.word	0x400204b8
 8002dfc:	58025408 	.word	0x58025408
 8002e00:	5802541c 	.word	0x5802541c
 8002e04:	58025430 	.word	0x58025430
 8002e08:	58025444 	.word	0x58025444
 8002e0c:	58025458 	.word	0x58025458
 8002e10:	5802546c 	.word	0x5802546c
 8002e14:	58025480 	.word	0x58025480
 8002e18:	58025494 	.word	0x58025494
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d028      	beq.n	8002e74 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e30:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e36:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	2201      	movs	r2, #1
 8002e42:	409a      	lsls	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e50:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00c      	beq.n	8002e74 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e68:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e72:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop

08002ea0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08a      	sub	sp, #40	; 0x28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002eac:	4b67      	ldr	r3, [pc, #412]	; (800304c <HAL_DMA_IRQHandler+0x1ac>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a67      	ldr	r2, [pc, #412]	; (8003050 <HAL_DMA_IRQHandler+0x1b0>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	0a9b      	lsrs	r3, r3, #10
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a5f      	ldr	r2, [pc, #380]	; (8003054 <HAL_DMA_IRQHandler+0x1b4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d04a      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xd2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a5d      	ldr	r2, [pc, #372]	; (8003058 <HAL_DMA_IRQHandler+0x1b8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d045      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xd2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a5c      	ldr	r2, [pc, #368]	; (800305c <HAL_DMA_IRQHandler+0x1bc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d040      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xd2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a5a      	ldr	r2, [pc, #360]	; (8003060 <HAL_DMA_IRQHandler+0x1c0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d03b      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xd2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a59      	ldr	r2, [pc, #356]	; (8003064 <HAL_DMA_IRQHandler+0x1c4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d036      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xd2>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a57      	ldr	r2, [pc, #348]	; (8003068 <HAL_DMA_IRQHandler+0x1c8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d031      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xd2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a56      	ldr	r2, [pc, #344]	; (800306c <HAL_DMA_IRQHandler+0x1cc>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d02c      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xd2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a54      	ldr	r2, [pc, #336]	; (8003070 <HAL_DMA_IRQHandler+0x1d0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d027      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xd2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a53      	ldr	r2, [pc, #332]	; (8003074 <HAL_DMA_IRQHandler+0x1d4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d022      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xd2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a51      	ldr	r2, [pc, #324]	; (8003078 <HAL_DMA_IRQHandler+0x1d8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01d      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xd2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a50      	ldr	r2, [pc, #320]	; (800307c <HAL_DMA_IRQHandler+0x1dc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d018      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xd2>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a4e      	ldr	r2, [pc, #312]	; (8003080 <HAL_DMA_IRQHandler+0x1e0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xd2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a4d      	ldr	r2, [pc, #308]	; (8003084 <HAL_DMA_IRQHandler+0x1e4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00e      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xd2>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a4b      	ldr	r2, [pc, #300]	; (8003088 <HAL_DMA_IRQHandler+0x1e8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d009      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xd2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a4a      	ldr	r2, [pc, #296]	; (800308c <HAL_DMA_IRQHandler+0x1ec>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d004      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xd2>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a48      	ldr	r2, [pc, #288]	; (8003090 <HAL_DMA_IRQHandler+0x1f0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <HAL_DMA_IRQHandler+0xd6>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <HAL_DMA_IRQHandler+0xd8>
 8002f76:	2300      	movs	r3, #0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 842b 	beq.w	80037d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	2208      	movs	r2, #8
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 80a2 	beq.w	80030d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a2e      	ldr	r2, [pc, #184]	; (8003054 <HAL_DMA_IRQHandler+0x1b4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d04a      	beq.n	8003034 <HAL_DMA_IRQHandler+0x194>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a2d      	ldr	r2, [pc, #180]	; (8003058 <HAL_DMA_IRQHandler+0x1b8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d045      	beq.n	8003034 <HAL_DMA_IRQHandler+0x194>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a2b      	ldr	r2, [pc, #172]	; (800305c <HAL_DMA_IRQHandler+0x1bc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d040      	beq.n	8003034 <HAL_DMA_IRQHandler+0x194>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a2a      	ldr	r2, [pc, #168]	; (8003060 <HAL_DMA_IRQHandler+0x1c0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d03b      	beq.n	8003034 <HAL_DMA_IRQHandler+0x194>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a28      	ldr	r2, [pc, #160]	; (8003064 <HAL_DMA_IRQHandler+0x1c4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d036      	beq.n	8003034 <HAL_DMA_IRQHandler+0x194>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a27      	ldr	r2, [pc, #156]	; (8003068 <HAL_DMA_IRQHandler+0x1c8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d031      	beq.n	8003034 <HAL_DMA_IRQHandler+0x194>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a25      	ldr	r2, [pc, #148]	; (800306c <HAL_DMA_IRQHandler+0x1cc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d02c      	beq.n	8003034 <HAL_DMA_IRQHandler+0x194>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a24      	ldr	r2, [pc, #144]	; (8003070 <HAL_DMA_IRQHandler+0x1d0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d027      	beq.n	8003034 <HAL_DMA_IRQHandler+0x194>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a22      	ldr	r2, [pc, #136]	; (8003074 <HAL_DMA_IRQHandler+0x1d4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d022      	beq.n	8003034 <HAL_DMA_IRQHandler+0x194>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a21      	ldr	r2, [pc, #132]	; (8003078 <HAL_DMA_IRQHandler+0x1d8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d01d      	beq.n	8003034 <HAL_DMA_IRQHandler+0x194>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a1f      	ldr	r2, [pc, #124]	; (800307c <HAL_DMA_IRQHandler+0x1dc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d018      	beq.n	8003034 <HAL_DMA_IRQHandler+0x194>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a1e      	ldr	r2, [pc, #120]	; (8003080 <HAL_DMA_IRQHandler+0x1e0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d013      	beq.n	8003034 <HAL_DMA_IRQHandler+0x194>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <HAL_DMA_IRQHandler+0x1e4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00e      	beq.n	8003034 <HAL_DMA_IRQHandler+0x194>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1b      	ldr	r2, [pc, #108]	; (8003088 <HAL_DMA_IRQHandler+0x1e8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d009      	beq.n	8003034 <HAL_DMA_IRQHandler+0x194>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a19      	ldr	r2, [pc, #100]	; (800308c <HAL_DMA_IRQHandler+0x1ec>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d004      	beq.n	8003034 <HAL_DMA_IRQHandler+0x194>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a18      	ldr	r2, [pc, #96]	; (8003090 <HAL_DMA_IRQHandler+0x1f0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d12f      	bne.n	8003094 <HAL_DMA_IRQHandler+0x1f4>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b00      	cmp	r3, #0
 8003040:	bf14      	ite	ne
 8003042:	2301      	movne	r3, #1
 8003044:	2300      	moveq	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	e02e      	b.n	80030a8 <HAL_DMA_IRQHandler+0x208>
 800304a:	bf00      	nop
 800304c:	24000008 	.word	0x24000008
 8003050:	1b4e81b5 	.word	0x1b4e81b5
 8003054:	40020010 	.word	0x40020010
 8003058:	40020028 	.word	0x40020028
 800305c:	40020040 	.word	0x40020040
 8003060:	40020058 	.word	0x40020058
 8003064:	40020070 	.word	0x40020070
 8003068:	40020088 	.word	0x40020088
 800306c:	400200a0 	.word	0x400200a0
 8003070:	400200b8 	.word	0x400200b8
 8003074:	40020410 	.word	0x40020410
 8003078:	40020428 	.word	0x40020428
 800307c:	40020440 	.word	0x40020440
 8003080:	40020458 	.word	0x40020458
 8003084:	40020470 	.word	0x40020470
 8003088:	40020488 	.word	0x40020488
 800308c:	400204a0 	.word	0x400204a0
 8003090:	400204b8 	.word	0x400204b8
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf14      	ite	ne
 80030a2:	2301      	movne	r3, #1
 80030a4:	2300      	moveq	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d015      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0204 	bic.w	r2, r2, #4
 80030ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	2208      	movs	r2, #8
 80030c6:	409a      	lsls	r2, r3
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d0:	f043 0201 	orr.w	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	fa22 f303 	lsr.w	r3, r2, r3
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d06e      	beq.n	80031cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a69      	ldr	r2, [pc, #420]	; (8003298 <HAL_DMA_IRQHandler+0x3f8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d04a      	beq.n	800318e <HAL_DMA_IRQHandler+0x2ee>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a67      	ldr	r2, [pc, #412]	; (800329c <HAL_DMA_IRQHandler+0x3fc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d045      	beq.n	800318e <HAL_DMA_IRQHandler+0x2ee>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a66      	ldr	r2, [pc, #408]	; (80032a0 <HAL_DMA_IRQHandler+0x400>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d040      	beq.n	800318e <HAL_DMA_IRQHandler+0x2ee>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a64      	ldr	r2, [pc, #400]	; (80032a4 <HAL_DMA_IRQHandler+0x404>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d03b      	beq.n	800318e <HAL_DMA_IRQHandler+0x2ee>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a63      	ldr	r2, [pc, #396]	; (80032a8 <HAL_DMA_IRQHandler+0x408>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d036      	beq.n	800318e <HAL_DMA_IRQHandler+0x2ee>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a61      	ldr	r2, [pc, #388]	; (80032ac <HAL_DMA_IRQHandler+0x40c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d031      	beq.n	800318e <HAL_DMA_IRQHandler+0x2ee>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a60      	ldr	r2, [pc, #384]	; (80032b0 <HAL_DMA_IRQHandler+0x410>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d02c      	beq.n	800318e <HAL_DMA_IRQHandler+0x2ee>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a5e      	ldr	r2, [pc, #376]	; (80032b4 <HAL_DMA_IRQHandler+0x414>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d027      	beq.n	800318e <HAL_DMA_IRQHandler+0x2ee>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5d      	ldr	r2, [pc, #372]	; (80032b8 <HAL_DMA_IRQHandler+0x418>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d022      	beq.n	800318e <HAL_DMA_IRQHandler+0x2ee>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a5b      	ldr	r2, [pc, #364]	; (80032bc <HAL_DMA_IRQHandler+0x41c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01d      	beq.n	800318e <HAL_DMA_IRQHandler+0x2ee>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a5a      	ldr	r2, [pc, #360]	; (80032c0 <HAL_DMA_IRQHandler+0x420>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d018      	beq.n	800318e <HAL_DMA_IRQHandler+0x2ee>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a58      	ldr	r2, [pc, #352]	; (80032c4 <HAL_DMA_IRQHandler+0x424>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <HAL_DMA_IRQHandler+0x2ee>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a57      	ldr	r2, [pc, #348]	; (80032c8 <HAL_DMA_IRQHandler+0x428>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00e      	beq.n	800318e <HAL_DMA_IRQHandler+0x2ee>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a55      	ldr	r2, [pc, #340]	; (80032cc <HAL_DMA_IRQHandler+0x42c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_DMA_IRQHandler+0x2ee>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a54      	ldr	r2, [pc, #336]	; (80032d0 <HAL_DMA_IRQHandler+0x430>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d004      	beq.n	800318e <HAL_DMA_IRQHandler+0x2ee>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a52      	ldr	r2, [pc, #328]	; (80032d4 <HAL_DMA_IRQHandler+0x434>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d10a      	bne.n	80031a4 <HAL_DMA_IRQHandler+0x304>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf14      	ite	ne
 800319c:	2301      	movne	r3, #1
 800319e:	2300      	moveq	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	e003      	b.n	80031ac <HAL_DMA_IRQHandler+0x30c>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2300      	movs	r3, #0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00d      	beq.n	80031cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2201      	movs	r2, #1
 80031ba:	409a      	lsls	r2, r3
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	f043 0202 	orr.w	r2, r3, #2
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	2204      	movs	r2, #4
 80031d6:	409a      	lsls	r2, r3
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 808f 	beq.w	8003300 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a2c      	ldr	r2, [pc, #176]	; (8003298 <HAL_DMA_IRQHandler+0x3f8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d04a      	beq.n	8003282 <HAL_DMA_IRQHandler+0x3e2>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a2a      	ldr	r2, [pc, #168]	; (800329c <HAL_DMA_IRQHandler+0x3fc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d045      	beq.n	8003282 <HAL_DMA_IRQHandler+0x3e2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a29      	ldr	r2, [pc, #164]	; (80032a0 <HAL_DMA_IRQHandler+0x400>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d040      	beq.n	8003282 <HAL_DMA_IRQHandler+0x3e2>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a27      	ldr	r2, [pc, #156]	; (80032a4 <HAL_DMA_IRQHandler+0x404>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d03b      	beq.n	8003282 <HAL_DMA_IRQHandler+0x3e2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a26      	ldr	r2, [pc, #152]	; (80032a8 <HAL_DMA_IRQHandler+0x408>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d036      	beq.n	8003282 <HAL_DMA_IRQHandler+0x3e2>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a24      	ldr	r2, [pc, #144]	; (80032ac <HAL_DMA_IRQHandler+0x40c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d031      	beq.n	8003282 <HAL_DMA_IRQHandler+0x3e2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a23      	ldr	r2, [pc, #140]	; (80032b0 <HAL_DMA_IRQHandler+0x410>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d02c      	beq.n	8003282 <HAL_DMA_IRQHandler+0x3e2>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a21      	ldr	r2, [pc, #132]	; (80032b4 <HAL_DMA_IRQHandler+0x414>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d027      	beq.n	8003282 <HAL_DMA_IRQHandler+0x3e2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a20      	ldr	r2, [pc, #128]	; (80032b8 <HAL_DMA_IRQHandler+0x418>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d022      	beq.n	8003282 <HAL_DMA_IRQHandler+0x3e2>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1e      	ldr	r2, [pc, #120]	; (80032bc <HAL_DMA_IRQHandler+0x41c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d01d      	beq.n	8003282 <HAL_DMA_IRQHandler+0x3e2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a1d      	ldr	r2, [pc, #116]	; (80032c0 <HAL_DMA_IRQHandler+0x420>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d018      	beq.n	8003282 <HAL_DMA_IRQHandler+0x3e2>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a1b      	ldr	r2, [pc, #108]	; (80032c4 <HAL_DMA_IRQHandler+0x424>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d013      	beq.n	8003282 <HAL_DMA_IRQHandler+0x3e2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1a      	ldr	r2, [pc, #104]	; (80032c8 <HAL_DMA_IRQHandler+0x428>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d00e      	beq.n	8003282 <HAL_DMA_IRQHandler+0x3e2>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a18      	ldr	r2, [pc, #96]	; (80032cc <HAL_DMA_IRQHandler+0x42c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d009      	beq.n	8003282 <HAL_DMA_IRQHandler+0x3e2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a17      	ldr	r2, [pc, #92]	; (80032d0 <HAL_DMA_IRQHandler+0x430>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d004      	beq.n	8003282 <HAL_DMA_IRQHandler+0x3e2>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <HAL_DMA_IRQHandler+0x434>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d12a      	bne.n	80032d8 <HAL_DMA_IRQHandler+0x438>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf14      	ite	ne
 8003290:	2301      	movne	r3, #1
 8003292:	2300      	moveq	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	e023      	b.n	80032e0 <HAL_DMA_IRQHandler+0x440>
 8003298:	40020010 	.word	0x40020010
 800329c:	40020028 	.word	0x40020028
 80032a0:	40020040 	.word	0x40020040
 80032a4:	40020058 	.word	0x40020058
 80032a8:	40020070 	.word	0x40020070
 80032ac:	40020088 	.word	0x40020088
 80032b0:	400200a0 	.word	0x400200a0
 80032b4:	400200b8 	.word	0x400200b8
 80032b8:	40020410 	.word	0x40020410
 80032bc:	40020428 	.word	0x40020428
 80032c0:	40020440 	.word	0x40020440
 80032c4:	40020458 	.word	0x40020458
 80032c8:	40020470 	.word	0x40020470
 80032cc:	40020488 	.word	0x40020488
 80032d0:	400204a0 	.word	0x400204a0
 80032d4:	400204b8 	.word	0x400204b8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2300      	movs	r3, #0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00d      	beq.n	8003300 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	2204      	movs	r2, #4
 80032ee:	409a      	lsls	r2, r3
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	f043 0204 	orr.w	r2, r3, #4
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	2210      	movs	r2, #16
 800330a:	409a      	lsls	r2, r3
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 80a6 	beq.w	8003462 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a85      	ldr	r2, [pc, #532]	; (8003530 <HAL_DMA_IRQHandler+0x690>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d04a      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x516>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a83      	ldr	r2, [pc, #524]	; (8003534 <HAL_DMA_IRQHandler+0x694>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d045      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x516>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a82      	ldr	r2, [pc, #520]	; (8003538 <HAL_DMA_IRQHandler+0x698>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d040      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x516>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a80      	ldr	r2, [pc, #512]	; (800353c <HAL_DMA_IRQHandler+0x69c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d03b      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x516>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7f      	ldr	r2, [pc, #508]	; (8003540 <HAL_DMA_IRQHandler+0x6a0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d036      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x516>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a7d      	ldr	r2, [pc, #500]	; (8003544 <HAL_DMA_IRQHandler+0x6a4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d031      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x516>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a7c      	ldr	r2, [pc, #496]	; (8003548 <HAL_DMA_IRQHandler+0x6a8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d02c      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x516>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a7a      	ldr	r2, [pc, #488]	; (800354c <HAL_DMA_IRQHandler+0x6ac>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d027      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x516>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a79      	ldr	r2, [pc, #484]	; (8003550 <HAL_DMA_IRQHandler+0x6b0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d022      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x516>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a77      	ldr	r2, [pc, #476]	; (8003554 <HAL_DMA_IRQHandler+0x6b4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01d      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x516>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a76      	ldr	r2, [pc, #472]	; (8003558 <HAL_DMA_IRQHandler+0x6b8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d018      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x516>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a74      	ldr	r2, [pc, #464]	; (800355c <HAL_DMA_IRQHandler+0x6bc>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d013      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x516>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a73      	ldr	r2, [pc, #460]	; (8003560 <HAL_DMA_IRQHandler+0x6c0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00e      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x516>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a71      	ldr	r2, [pc, #452]	; (8003564 <HAL_DMA_IRQHandler+0x6c4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d009      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x516>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a70      	ldr	r2, [pc, #448]	; (8003568 <HAL_DMA_IRQHandler+0x6c8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d004      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x516>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a6e      	ldr	r2, [pc, #440]	; (800356c <HAL_DMA_IRQHandler+0x6cc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d10a      	bne.n	80033cc <HAL_DMA_IRQHandler+0x52c>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf14      	ite	ne
 80033c4:	2301      	movne	r3, #1
 80033c6:	2300      	moveq	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	e009      	b.n	80033e0 <HAL_DMA_IRQHandler+0x540>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bf14      	ite	ne
 80033da:	2301      	movne	r3, #1
 80033dc:	2300      	moveq	r3, #0
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d03e      	beq.n	8003462 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	2210      	movs	r2, #16
 80033ee:	409a      	lsls	r2, r3
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d018      	beq.n	8003434 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d108      	bne.n	8003422 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	2b00      	cmp	r3, #0
 8003416:	d024      	beq.n	8003462 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	4798      	blx	r3
 8003420:	e01f      	b.n	8003462 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003426:	2b00      	cmp	r3, #0
 8003428:	d01b      	beq.n	8003462 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
 8003432:	e016      	b.n	8003462 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d107      	bne.n	8003452 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0208 	bic.w	r2, r2, #8
 8003450:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	2220      	movs	r2, #32
 800346c:	409a      	lsls	r2, r3
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8110 	beq.w	8003698 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a2c      	ldr	r2, [pc, #176]	; (8003530 <HAL_DMA_IRQHandler+0x690>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d04a      	beq.n	8003518 <HAL_DMA_IRQHandler+0x678>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a2b      	ldr	r2, [pc, #172]	; (8003534 <HAL_DMA_IRQHandler+0x694>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d045      	beq.n	8003518 <HAL_DMA_IRQHandler+0x678>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a29      	ldr	r2, [pc, #164]	; (8003538 <HAL_DMA_IRQHandler+0x698>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d040      	beq.n	8003518 <HAL_DMA_IRQHandler+0x678>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a28      	ldr	r2, [pc, #160]	; (800353c <HAL_DMA_IRQHandler+0x69c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d03b      	beq.n	8003518 <HAL_DMA_IRQHandler+0x678>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a26      	ldr	r2, [pc, #152]	; (8003540 <HAL_DMA_IRQHandler+0x6a0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d036      	beq.n	8003518 <HAL_DMA_IRQHandler+0x678>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a25      	ldr	r2, [pc, #148]	; (8003544 <HAL_DMA_IRQHandler+0x6a4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d031      	beq.n	8003518 <HAL_DMA_IRQHandler+0x678>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a23      	ldr	r2, [pc, #140]	; (8003548 <HAL_DMA_IRQHandler+0x6a8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d02c      	beq.n	8003518 <HAL_DMA_IRQHandler+0x678>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a22      	ldr	r2, [pc, #136]	; (800354c <HAL_DMA_IRQHandler+0x6ac>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d027      	beq.n	8003518 <HAL_DMA_IRQHandler+0x678>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a20      	ldr	r2, [pc, #128]	; (8003550 <HAL_DMA_IRQHandler+0x6b0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d022      	beq.n	8003518 <HAL_DMA_IRQHandler+0x678>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1f      	ldr	r2, [pc, #124]	; (8003554 <HAL_DMA_IRQHandler+0x6b4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d01d      	beq.n	8003518 <HAL_DMA_IRQHandler+0x678>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <HAL_DMA_IRQHandler+0x6b8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d018      	beq.n	8003518 <HAL_DMA_IRQHandler+0x678>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a1c      	ldr	r2, [pc, #112]	; (800355c <HAL_DMA_IRQHandler+0x6bc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d013      	beq.n	8003518 <HAL_DMA_IRQHandler+0x678>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1a      	ldr	r2, [pc, #104]	; (8003560 <HAL_DMA_IRQHandler+0x6c0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00e      	beq.n	8003518 <HAL_DMA_IRQHandler+0x678>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a19      	ldr	r2, [pc, #100]	; (8003564 <HAL_DMA_IRQHandler+0x6c4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d009      	beq.n	8003518 <HAL_DMA_IRQHandler+0x678>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a17      	ldr	r2, [pc, #92]	; (8003568 <HAL_DMA_IRQHandler+0x6c8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d004      	beq.n	8003518 <HAL_DMA_IRQHandler+0x678>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a16      	ldr	r2, [pc, #88]	; (800356c <HAL_DMA_IRQHandler+0x6cc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d12b      	bne.n	8003570 <HAL_DMA_IRQHandler+0x6d0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0310 	and.w	r3, r3, #16
 8003522:	2b00      	cmp	r3, #0
 8003524:	bf14      	ite	ne
 8003526:	2301      	movne	r3, #1
 8003528:	2300      	moveq	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	e02a      	b.n	8003584 <HAL_DMA_IRQHandler+0x6e4>
 800352e:	bf00      	nop
 8003530:	40020010 	.word	0x40020010
 8003534:	40020028 	.word	0x40020028
 8003538:	40020040 	.word	0x40020040
 800353c:	40020058 	.word	0x40020058
 8003540:	40020070 	.word	0x40020070
 8003544:	40020088 	.word	0x40020088
 8003548:	400200a0 	.word	0x400200a0
 800354c:	400200b8 	.word	0x400200b8
 8003550:	40020410 	.word	0x40020410
 8003554:	40020428 	.word	0x40020428
 8003558:	40020440 	.word	0x40020440
 800355c:	40020458 	.word	0x40020458
 8003560:	40020470 	.word	0x40020470
 8003564:	40020488 	.word	0x40020488
 8003568:	400204a0 	.word	0x400204a0
 800356c:	400204b8 	.word	0x400204b8
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	bf14      	ite	ne
 800357e:	2301      	movne	r3, #1
 8003580:	2300      	moveq	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8087 	beq.w	8003698 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	2220      	movs	r2, #32
 8003594:	409a      	lsls	r2, r3
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d139      	bne.n	800361a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0216 	bic.w	r2, r2, #22
 80035b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d103      	bne.n	80035d6 <HAL_DMA_IRQHandler+0x736>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0208 	bic.w	r2, r2, #8
 80035e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	223f      	movs	r2, #63	; 0x3f
 80035f0:	409a      	lsls	r2, r3
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8382 	beq.w	8003d14 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4798      	blx	r3
          }
          return;
 8003618:	e37c      	b.n	8003d14 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d018      	beq.n	800365a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d108      	bne.n	8003648 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	2b00      	cmp	r3, #0
 800363c:	d02c      	beq.n	8003698 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4798      	blx	r3
 8003646:	e027      	b.n	8003698 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d023      	beq.n	8003698 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	4798      	blx	r3
 8003658:	e01e      	b.n	8003698 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10f      	bne.n	8003688 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0210 	bic.w	r2, r2, #16
 8003676:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 833e 	beq.w	8003d1e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 8088 	beq.w	80037c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2204      	movs	r2, #4
 80036b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a89      	ldr	r2, [pc, #548]	; (80038e4 <HAL_DMA_IRQHandler+0xa44>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d04a      	beq.n	8003758 <HAL_DMA_IRQHandler+0x8b8>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a88      	ldr	r2, [pc, #544]	; (80038e8 <HAL_DMA_IRQHandler+0xa48>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d045      	beq.n	8003758 <HAL_DMA_IRQHandler+0x8b8>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a86      	ldr	r2, [pc, #536]	; (80038ec <HAL_DMA_IRQHandler+0xa4c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d040      	beq.n	8003758 <HAL_DMA_IRQHandler+0x8b8>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a85      	ldr	r2, [pc, #532]	; (80038f0 <HAL_DMA_IRQHandler+0xa50>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d03b      	beq.n	8003758 <HAL_DMA_IRQHandler+0x8b8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a83      	ldr	r2, [pc, #524]	; (80038f4 <HAL_DMA_IRQHandler+0xa54>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d036      	beq.n	8003758 <HAL_DMA_IRQHandler+0x8b8>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a82      	ldr	r2, [pc, #520]	; (80038f8 <HAL_DMA_IRQHandler+0xa58>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d031      	beq.n	8003758 <HAL_DMA_IRQHandler+0x8b8>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a80      	ldr	r2, [pc, #512]	; (80038fc <HAL_DMA_IRQHandler+0xa5c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d02c      	beq.n	8003758 <HAL_DMA_IRQHandler+0x8b8>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a7f      	ldr	r2, [pc, #508]	; (8003900 <HAL_DMA_IRQHandler+0xa60>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d027      	beq.n	8003758 <HAL_DMA_IRQHandler+0x8b8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a7d      	ldr	r2, [pc, #500]	; (8003904 <HAL_DMA_IRQHandler+0xa64>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d022      	beq.n	8003758 <HAL_DMA_IRQHandler+0x8b8>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a7c      	ldr	r2, [pc, #496]	; (8003908 <HAL_DMA_IRQHandler+0xa68>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d01d      	beq.n	8003758 <HAL_DMA_IRQHandler+0x8b8>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a7a      	ldr	r2, [pc, #488]	; (800390c <HAL_DMA_IRQHandler+0xa6c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d018      	beq.n	8003758 <HAL_DMA_IRQHandler+0x8b8>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a79      	ldr	r2, [pc, #484]	; (8003910 <HAL_DMA_IRQHandler+0xa70>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d013      	beq.n	8003758 <HAL_DMA_IRQHandler+0x8b8>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a77      	ldr	r2, [pc, #476]	; (8003914 <HAL_DMA_IRQHandler+0xa74>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00e      	beq.n	8003758 <HAL_DMA_IRQHandler+0x8b8>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a76      	ldr	r2, [pc, #472]	; (8003918 <HAL_DMA_IRQHandler+0xa78>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d009      	beq.n	8003758 <HAL_DMA_IRQHandler+0x8b8>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a74      	ldr	r2, [pc, #464]	; (800391c <HAL_DMA_IRQHandler+0xa7c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d004      	beq.n	8003758 <HAL_DMA_IRQHandler+0x8b8>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a73      	ldr	r2, [pc, #460]	; (8003920 <HAL_DMA_IRQHandler+0xa80>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d108      	bne.n	800376a <HAL_DMA_IRQHandler+0x8ca>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0201 	bic.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	e007      	b.n	800377a <HAL_DMA_IRQHandler+0x8da>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0201 	bic.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	3301      	adds	r3, #1
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003782:	429a      	cmp	r2, r3
 8003784:	d307      	bcc.n	8003796 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f2      	bne.n	800377a <HAL_DMA_IRQHandler+0x8da>
 8003794:	e000      	b.n	8003798 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003796:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d004      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2203      	movs	r2, #3
 80037aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80037ae:	e003      	b.n	80037b8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 82aa 	beq.w	8003d1e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
 80037d2:	e2a4      	b.n	8003d1e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a52      	ldr	r2, [pc, #328]	; (8003924 <HAL_DMA_IRQHandler+0xa84>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d04a      	beq.n	8003874 <HAL_DMA_IRQHandler+0x9d4>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a51      	ldr	r2, [pc, #324]	; (8003928 <HAL_DMA_IRQHandler+0xa88>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d045      	beq.n	8003874 <HAL_DMA_IRQHandler+0x9d4>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a4f      	ldr	r2, [pc, #316]	; (800392c <HAL_DMA_IRQHandler+0xa8c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d040      	beq.n	8003874 <HAL_DMA_IRQHandler+0x9d4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a4e      	ldr	r2, [pc, #312]	; (8003930 <HAL_DMA_IRQHandler+0xa90>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d03b      	beq.n	8003874 <HAL_DMA_IRQHandler+0x9d4>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a4c      	ldr	r2, [pc, #304]	; (8003934 <HAL_DMA_IRQHandler+0xa94>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d036      	beq.n	8003874 <HAL_DMA_IRQHandler+0x9d4>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a4b      	ldr	r2, [pc, #300]	; (8003938 <HAL_DMA_IRQHandler+0xa98>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d031      	beq.n	8003874 <HAL_DMA_IRQHandler+0x9d4>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a49      	ldr	r2, [pc, #292]	; (800393c <HAL_DMA_IRQHandler+0xa9c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d02c      	beq.n	8003874 <HAL_DMA_IRQHandler+0x9d4>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a48      	ldr	r2, [pc, #288]	; (8003940 <HAL_DMA_IRQHandler+0xaa0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d027      	beq.n	8003874 <HAL_DMA_IRQHandler+0x9d4>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a46      	ldr	r2, [pc, #280]	; (8003944 <HAL_DMA_IRQHandler+0xaa4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d022      	beq.n	8003874 <HAL_DMA_IRQHandler+0x9d4>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a45      	ldr	r2, [pc, #276]	; (8003948 <HAL_DMA_IRQHandler+0xaa8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d01d      	beq.n	8003874 <HAL_DMA_IRQHandler+0x9d4>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a43      	ldr	r2, [pc, #268]	; (800394c <HAL_DMA_IRQHandler+0xaac>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d018      	beq.n	8003874 <HAL_DMA_IRQHandler+0x9d4>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a42      	ldr	r2, [pc, #264]	; (8003950 <HAL_DMA_IRQHandler+0xab0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d013      	beq.n	8003874 <HAL_DMA_IRQHandler+0x9d4>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a40      	ldr	r2, [pc, #256]	; (8003954 <HAL_DMA_IRQHandler+0xab4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00e      	beq.n	8003874 <HAL_DMA_IRQHandler+0x9d4>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a3f      	ldr	r2, [pc, #252]	; (8003958 <HAL_DMA_IRQHandler+0xab8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d009      	beq.n	8003874 <HAL_DMA_IRQHandler+0x9d4>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a3d      	ldr	r2, [pc, #244]	; (800395c <HAL_DMA_IRQHandler+0xabc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <HAL_DMA_IRQHandler+0x9d4>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a3c      	ldr	r2, [pc, #240]	; (8003960 <HAL_DMA_IRQHandler+0xac0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d101      	bne.n	8003878 <HAL_DMA_IRQHandler+0x9d8>
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <HAL_DMA_IRQHandler+0x9da>
 8003878:	2300      	movs	r3, #0
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 824f 	beq.w	8003d1e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	2204      	movs	r2, #4
 8003892:	409a      	lsls	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80dd 	beq.w	8003a58 <HAL_DMA_IRQHandler+0xbb8>
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80d7 	beq.w	8003a58 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	2204      	movs	r2, #4
 80038b4:	409a      	lsls	r2, r3
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d059      	beq.n	8003978 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d14a      	bne.n	8003964 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8220 	beq.w	8003d18 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038e0:	e21a      	b.n	8003d18 <HAL_DMA_IRQHandler+0xe78>
 80038e2:	bf00      	nop
 80038e4:	40020010 	.word	0x40020010
 80038e8:	40020028 	.word	0x40020028
 80038ec:	40020040 	.word	0x40020040
 80038f0:	40020058 	.word	0x40020058
 80038f4:	40020070 	.word	0x40020070
 80038f8:	40020088 	.word	0x40020088
 80038fc:	400200a0 	.word	0x400200a0
 8003900:	400200b8 	.word	0x400200b8
 8003904:	40020410 	.word	0x40020410
 8003908:	40020428 	.word	0x40020428
 800390c:	40020440 	.word	0x40020440
 8003910:	40020458 	.word	0x40020458
 8003914:	40020470 	.word	0x40020470
 8003918:	40020488 	.word	0x40020488
 800391c:	400204a0 	.word	0x400204a0
 8003920:	400204b8 	.word	0x400204b8
 8003924:	48022c08 	.word	0x48022c08
 8003928:	48022c1c 	.word	0x48022c1c
 800392c:	48022c30 	.word	0x48022c30
 8003930:	48022c44 	.word	0x48022c44
 8003934:	48022c58 	.word	0x48022c58
 8003938:	48022c6c 	.word	0x48022c6c
 800393c:	48022c80 	.word	0x48022c80
 8003940:	48022c94 	.word	0x48022c94
 8003944:	58025408 	.word	0x58025408
 8003948:	5802541c 	.word	0x5802541c
 800394c:	58025430 	.word	0x58025430
 8003950:	58025444 	.word	0x58025444
 8003954:	58025458 	.word	0x58025458
 8003958:	5802546c 	.word	0x5802546c
 800395c:	58025480 	.word	0x58025480
 8003960:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 81d5 	beq.w	8003d18 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003976:	e1cf      	b.n	8003d18 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b00      	cmp	r3, #0
 8003980:	d160      	bne.n	8003a44 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a7f      	ldr	r2, [pc, #508]	; (8003b84 <HAL_DMA_IRQHandler+0xce4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d04a      	beq.n	8003a22 <HAL_DMA_IRQHandler+0xb82>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a7d      	ldr	r2, [pc, #500]	; (8003b88 <HAL_DMA_IRQHandler+0xce8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d045      	beq.n	8003a22 <HAL_DMA_IRQHandler+0xb82>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a7c      	ldr	r2, [pc, #496]	; (8003b8c <HAL_DMA_IRQHandler+0xcec>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d040      	beq.n	8003a22 <HAL_DMA_IRQHandler+0xb82>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a7a      	ldr	r2, [pc, #488]	; (8003b90 <HAL_DMA_IRQHandler+0xcf0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d03b      	beq.n	8003a22 <HAL_DMA_IRQHandler+0xb82>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a79      	ldr	r2, [pc, #484]	; (8003b94 <HAL_DMA_IRQHandler+0xcf4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d036      	beq.n	8003a22 <HAL_DMA_IRQHandler+0xb82>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a77      	ldr	r2, [pc, #476]	; (8003b98 <HAL_DMA_IRQHandler+0xcf8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d031      	beq.n	8003a22 <HAL_DMA_IRQHandler+0xb82>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a76      	ldr	r2, [pc, #472]	; (8003b9c <HAL_DMA_IRQHandler+0xcfc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d02c      	beq.n	8003a22 <HAL_DMA_IRQHandler+0xb82>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a74      	ldr	r2, [pc, #464]	; (8003ba0 <HAL_DMA_IRQHandler+0xd00>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d027      	beq.n	8003a22 <HAL_DMA_IRQHandler+0xb82>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a73      	ldr	r2, [pc, #460]	; (8003ba4 <HAL_DMA_IRQHandler+0xd04>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d022      	beq.n	8003a22 <HAL_DMA_IRQHandler+0xb82>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a71      	ldr	r2, [pc, #452]	; (8003ba8 <HAL_DMA_IRQHandler+0xd08>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d01d      	beq.n	8003a22 <HAL_DMA_IRQHandler+0xb82>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a70      	ldr	r2, [pc, #448]	; (8003bac <HAL_DMA_IRQHandler+0xd0c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d018      	beq.n	8003a22 <HAL_DMA_IRQHandler+0xb82>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a6e      	ldr	r2, [pc, #440]	; (8003bb0 <HAL_DMA_IRQHandler+0xd10>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d013      	beq.n	8003a22 <HAL_DMA_IRQHandler+0xb82>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a6d      	ldr	r2, [pc, #436]	; (8003bb4 <HAL_DMA_IRQHandler+0xd14>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00e      	beq.n	8003a22 <HAL_DMA_IRQHandler+0xb82>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a6b      	ldr	r2, [pc, #428]	; (8003bb8 <HAL_DMA_IRQHandler+0xd18>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d009      	beq.n	8003a22 <HAL_DMA_IRQHandler+0xb82>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a6a      	ldr	r2, [pc, #424]	; (8003bbc <HAL_DMA_IRQHandler+0xd1c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d004      	beq.n	8003a22 <HAL_DMA_IRQHandler+0xb82>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a68      	ldr	r2, [pc, #416]	; (8003bc0 <HAL_DMA_IRQHandler+0xd20>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d108      	bne.n	8003a34 <HAL_DMA_IRQHandler+0xb94>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0208 	bic.w	r2, r2, #8
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	e007      	b.n	8003a44 <HAL_DMA_IRQHandler+0xba4>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0204 	bic.w	r2, r2, #4
 8003a42:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8165 	beq.w	8003d18 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a56:	e15f      	b.n	8003d18 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	2202      	movs	r2, #2
 8003a62:	409a      	lsls	r2, r3
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80c5 	beq.w	8003bf8 <HAL_DMA_IRQHandler+0xd58>
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80bf 	beq.w	8003bf8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7e:	f003 031f 	and.w	r3, r3, #31
 8003a82:	2202      	movs	r2, #2
 8003a84:	409a      	lsls	r2, r3
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d018      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 813a 	beq.w	8003d1c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ab0:	e134      	b.n	8003d1c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 8130 	beq.w	8003d1c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ac4:	e12a      	b.n	8003d1c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f040 8089 	bne.w	8003be4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2b      	ldr	r2, [pc, #172]	; (8003b84 <HAL_DMA_IRQHandler+0xce4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d04a      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xcd2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a29      	ldr	r2, [pc, #164]	; (8003b88 <HAL_DMA_IRQHandler+0xce8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d045      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xcd2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a28      	ldr	r2, [pc, #160]	; (8003b8c <HAL_DMA_IRQHandler+0xcec>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d040      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xcd2>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a26      	ldr	r2, [pc, #152]	; (8003b90 <HAL_DMA_IRQHandler+0xcf0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d03b      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xcd2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a25      	ldr	r2, [pc, #148]	; (8003b94 <HAL_DMA_IRQHandler+0xcf4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d036      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xcd2>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a23      	ldr	r2, [pc, #140]	; (8003b98 <HAL_DMA_IRQHandler+0xcf8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d031      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xcd2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a22      	ldr	r2, [pc, #136]	; (8003b9c <HAL_DMA_IRQHandler+0xcfc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d02c      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xcd2>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a20      	ldr	r2, [pc, #128]	; (8003ba0 <HAL_DMA_IRQHandler+0xd00>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d027      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xcd2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1f      	ldr	r2, [pc, #124]	; (8003ba4 <HAL_DMA_IRQHandler+0xd04>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d022      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xcd2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <HAL_DMA_IRQHandler+0xd08>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d01d      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xcd2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1c      	ldr	r2, [pc, #112]	; (8003bac <HAL_DMA_IRQHandler+0xd0c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d018      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xcd2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1a      	ldr	r2, [pc, #104]	; (8003bb0 <HAL_DMA_IRQHandler+0xd10>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xcd2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a19      	ldr	r2, [pc, #100]	; (8003bb4 <HAL_DMA_IRQHandler+0xd14>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00e      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xcd2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a17      	ldr	r2, [pc, #92]	; (8003bb8 <HAL_DMA_IRQHandler+0xd18>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d009      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xcd2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a16      	ldr	r2, [pc, #88]	; (8003bbc <HAL_DMA_IRQHandler+0xd1c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d004      	beq.n	8003b72 <HAL_DMA_IRQHandler+0xcd2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a14      	ldr	r2, [pc, #80]	; (8003bc0 <HAL_DMA_IRQHandler+0xd20>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d128      	bne.n	8003bc4 <HAL_DMA_IRQHandler+0xd24>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0214 	bic.w	r2, r2, #20
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	e027      	b.n	8003bd4 <HAL_DMA_IRQHandler+0xd34>
 8003b84:	40020010 	.word	0x40020010
 8003b88:	40020028 	.word	0x40020028
 8003b8c:	40020040 	.word	0x40020040
 8003b90:	40020058 	.word	0x40020058
 8003b94:	40020070 	.word	0x40020070
 8003b98:	40020088 	.word	0x40020088
 8003b9c:	400200a0 	.word	0x400200a0
 8003ba0:	400200b8 	.word	0x400200b8
 8003ba4:	40020410 	.word	0x40020410
 8003ba8:	40020428 	.word	0x40020428
 8003bac:	40020440 	.word	0x40020440
 8003bb0:	40020458 	.word	0x40020458
 8003bb4:	40020470 	.word	0x40020470
 8003bb8:	40020488 	.word	0x40020488
 8003bbc:	400204a0 	.word	0x400204a0
 8003bc0:	400204b8 	.word	0x400204b8
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 020a 	bic.w	r2, r2, #10
 8003bd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8097 	beq.w	8003d1c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bf6:	e091      	b.n	8003d1c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	2208      	movs	r2, #8
 8003c02:	409a      	lsls	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8088 	beq.w	8003d1e <HAL_DMA_IRQHandler+0xe7e>
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8082 	beq.w	8003d1e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a41      	ldr	r2, [pc, #260]	; (8003d24 <HAL_DMA_IRQHandler+0xe84>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d04a      	beq.n	8003cba <HAL_DMA_IRQHandler+0xe1a>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a3f      	ldr	r2, [pc, #252]	; (8003d28 <HAL_DMA_IRQHandler+0xe88>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d045      	beq.n	8003cba <HAL_DMA_IRQHandler+0xe1a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a3e      	ldr	r2, [pc, #248]	; (8003d2c <HAL_DMA_IRQHandler+0xe8c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d040      	beq.n	8003cba <HAL_DMA_IRQHandler+0xe1a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a3c      	ldr	r2, [pc, #240]	; (8003d30 <HAL_DMA_IRQHandler+0xe90>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d03b      	beq.n	8003cba <HAL_DMA_IRQHandler+0xe1a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a3b      	ldr	r2, [pc, #236]	; (8003d34 <HAL_DMA_IRQHandler+0xe94>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d036      	beq.n	8003cba <HAL_DMA_IRQHandler+0xe1a>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a39      	ldr	r2, [pc, #228]	; (8003d38 <HAL_DMA_IRQHandler+0xe98>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d031      	beq.n	8003cba <HAL_DMA_IRQHandler+0xe1a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a38      	ldr	r2, [pc, #224]	; (8003d3c <HAL_DMA_IRQHandler+0xe9c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d02c      	beq.n	8003cba <HAL_DMA_IRQHandler+0xe1a>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a36      	ldr	r2, [pc, #216]	; (8003d40 <HAL_DMA_IRQHandler+0xea0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d027      	beq.n	8003cba <HAL_DMA_IRQHandler+0xe1a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a35      	ldr	r2, [pc, #212]	; (8003d44 <HAL_DMA_IRQHandler+0xea4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d022      	beq.n	8003cba <HAL_DMA_IRQHandler+0xe1a>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a33      	ldr	r2, [pc, #204]	; (8003d48 <HAL_DMA_IRQHandler+0xea8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d01d      	beq.n	8003cba <HAL_DMA_IRQHandler+0xe1a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a32      	ldr	r2, [pc, #200]	; (8003d4c <HAL_DMA_IRQHandler+0xeac>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d018      	beq.n	8003cba <HAL_DMA_IRQHandler+0xe1a>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a30      	ldr	r2, [pc, #192]	; (8003d50 <HAL_DMA_IRQHandler+0xeb0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_DMA_IRQHandler+0xe1a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2f      	ldr	r2, [pc, #188]	; (8003d54 <HAL_DMA_IRQHandler+0xeb4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00e      	beq.n	8003cba <HAL_DMA_IRQHandler+0xe1a>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2d      	ldr	r2, [pc, #180]	; (8003d58 <HAL_DMA_IRQHandler+0xeb8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d009      	beq.n	8003cba <HAL_DMA_IRQHandler+0xe1a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2c      	ldr	r2, [pc, #176]	; (8003d5c <HAL_DMA_IRQHandler+0xebc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d004      	beq.n	8003cba <HAL_DMA_IRQHandler+0xe1a>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a2a      	ldr	r2, [pc, #168]	; (8003d60 <HAL_DMA_IRQHandler+0xec0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d108      	bne.n	8003ccc <HAL_DMA_IRQHandler+0xe2c>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 021c 	bic.w	r2, r2, #28
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	e007      	b.n	8003cdc <HAL_DMA_IRQHandler+0xe3c>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 020e 	bic.w	r2, r2, #14
 8003cda:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce0:	f003 031f 	and.w	r3, r3, #31
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	4798      	blx	r3
 8003d12:	e004      	b.n	8003d1e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003d14:	bf00      	nop
 8003d16:	e002      	b.n	8003d1e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d18:	bf00      	nop
 8003d1a:	e000      	b.n	8003d1e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d1c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d1e:	3728      	adds	r7, #40	; 0x28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40020010 	.word	0x40020010
 8003d28:	40020028 	.word	0x40020028
 8003d2c:	40020040 	.word	0x40020040
 8003d30:	40020058 	.word	0x40020058
 8003d34:	40020070 	.word	0x40020070
 8003d38:	40020088 	.word	0x40020088
 8003d3c:	400200a0 	.word	0x400200a0
 8003d40:	400200b8 	.word	0x400200b8
 8003d44:	40020410 	.word	0x40020410
 8003d48:	40020428 	.word	0x40020428
 8003d4c:	40020440 	.word	0x40020440
 8003d50:	40020458 	.word	0x40020458
 8003d54:	40020470 	.word	0x40020470
 8003d58:	40020488 	.word	0x40020488
 8003d5c:	400204a0 	.word	0x400204a0
 8003d60:	400204b8 	.word	0x400204b8

08003d64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a42      	ldr	r2, [pc, #264]	; (8003e7c <DMA_CalcBaseAndBitshift+0x118>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d04a      	beq.n	8003e0c <DMA_CalcBaseAndBitshift+0xa8>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a41      	ldr	r2, [pc, #260]	; (8003e80 <DMA_CalcBaseAndBitshift+0x11c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d045      	beq.n	8003e0c <DMA_CalcBaseAndBitshift+0xa8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a3f      	ldr	r2, [pc, #252]	; (8003e84 <DMA_CalcBaseAndBitshift+0x120>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d040      	beq.n	8003e0c <DMA_CalcBaseAndBitshift+0xa8>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a3e      	ldr	r2, [pc, #248]	; (8003e88 <DMA_CalcBaseAndBitshift+0x124>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d03b      	beq.n	8003e0c <DMA_CalcBaseAndBitshift+0xa8>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a3c      	ldr	r2, [pc, #240]	; (8003e8c <DMA_CalcBaseAndBitshift+0x128>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d036      	beq.n	8003e0c <DMA_CalcBaseAndBitshift+0xa8>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a3b      	ldr	r2, [pc, #236]	; (8003e90 <DMA_CalcBaseAndBitshift+0x12c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d031      	beq.n	8003e0c <DMA_CalcBaseAndBitshift+0xa8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a39      	ldr	r2, [pc, #228]	; (8003e94 <DMA_CalcBaseAndBitshift+0x130>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d02c      	beq.n	8003e0c <DMA_CalcBaseAndBitshift+0xa8>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a38      	ldr	r2, [pc, #224]	; (8003e98 <DMA_CalcBaseAndBitshift+0x134>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d027      	beq.n	8003e0c <DMA_CalcBaseAndBitshift+0xa8>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a36      	ldr	r2, [pc, #216]	; (8003e9c <DMA_CalcBaseAndBitshift+0x138>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d022      	beq.n	8003e0c <DMA_CalcBaseAndBitshift+0xa8>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a35      	ldr	r2, [pc, #212]	; (8003ea0 <DMA_CalcBaseAndBitshift+0x13c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d01d      	beq.n	8003e0c <DMA_CalcBaseAndBitshift+0xa8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a33      	ldr	r2, [pc, #204]	; (8003ea4 <DMA_CalcBaseAndBitshift+0x140>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d018      	beq.n	8003e0c <DMA_CalcBaseAndBitshift+0xa8>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a32      	ldr	r2, [pc, #200]	; (8003ea8 <DMA_CalcBaseAndBitshift+0x144>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d013      	beq.n	8003e0c <DMA_CalcBaseAndBitshift+0xa8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a30      	ldr	r2, [pc, #192]	; (8003eac <DMA_CalcBaseAndBitshift+0x148>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00e      	beq.n	8003e0c <DMA_CalcBaseAndBitshift+0xa8>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a2f      	ldr	r2, [pc, #188]	; (8003eb0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d009      	beq.n	8003e0c <DMA_CalcBaseAndBitshift+0xa8>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a2d      	ldr	r2, [pc, #180]	; (8003eb4 <DMA_CalcBaseAndBitshift+0x150>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d004      	beq.n	8003e0c <DMA_CalcBaseAndBitshift+0xa8>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a2c      	ldr	r2, [pc, #176]	; (8003eb8 <DMA_CalcBaseAndBitshift+0x154>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d101      	bne.n	8003e10 <DMA_CalcBaseAndBitshift+0xac>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <DMA_CalcBaseAndBitshift+0xae>
 8003e10:	2300      	movs	r3, #0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d024      	beq.n	8003e60 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	3b10      	subs	r3, #16
 8003e1e:	4a27      	ldr	r2, [pc, #156]	; (8003ebc <DMA_CalcBaseAndBitshift+0x158>)
 8003e20:	fba2 2303 	umull	r2, r3, r2, r3
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	4a24      	ldr	r2, [pc, #144]	; (8003ec0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003e30:	5cd3      	ldrb	r3, [r2, r3]
 8003e32:	461a      	mov	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d908      	bls.n	8003e50 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	4b1f      	ldr	r3, [pc, #124]	; (8003ec4 <DMA_CalcBaseAndBitshift+0x160>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	1d1a      	adds	r2, r3, #4
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	659a      	str	r2, [r3, #88]	; 0x58
 8003e4e:	e00d      	b.n	8003e6c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <DMA_CalcBaseAndBitshift+0x160>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e5e:	e005      	b.n	8003e6c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	40020010 	.word	0x40020010
 8003e80:	40020028 	.word	0x40020028
 8003e84:	40020040 	.word	0x40020040
 8003e88:	40020058 	.word	0x40020058
 8003e8c:	40020070 	.word	0x40020070
 8003e90:	40020088 	.word	0x40020088
 8003e94:	400200a0 	.word	0x400200a0
 8003e98:	400200b8 	.word	0x400200b8
 8003e9c:	40020410 	.word	0x40020410
 8003ea0:	40020428 	.word	0x40020428
 8003ea4:	40020440 	.word	0x40020440
 8003ea8:	40020458 	.word	0x40020458
 8003eac:	40020470 	.word	0x40020470
 8003eb0:	40020488 	.word	0x40020488
 8003eb4:	400204a0 	.word	0x400204a0
 8003eb8:	400204b8 	.word	0x400204b8
 8003ebc:	aaaaaaab 	.word	0xaaaaaaab
 8003ec0:	0800b054 	.word	0x0800b054
 8003ec4:	fffffc00 	.word	0xfffffc00

08003ec8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d120      	bne.n	8003f1e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d858      	bhi.n	8003f96 <DMA_CheckFifoParam+0xce>
 8003ee4:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <DMA_CheckFifoParam+0x24>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003efd 	.word	0x08003efd
 8003ef0:	08003f0f 	.word	0x08003f0f
 8003ef4:	08003efd 	.word	0x08003efd
 8003ef8:	08003f97 	.word	0x08003f97
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d048      	beq.n	8003f9a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f0c:	e045      	b.n	8003f9a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f16:	d142      	bne.n	8003f9e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f1c:	e03f      	b.n	8003f9e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f26:	d123      	bne.n	8003f70 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	d838      	bhi.n	8003fa2 <DMA_CheckFifoParam+0xda>
 8003f30:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <DMA_CheckFifoParam+0x70>)
 8003f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f36:	bf00      	nop
 8003f38:	08003f49 	.word	0x08003f49
 8003f3c:	08003f4f 	.word	0x08003f4f
 8003f40:	08003f49 	.word	0x08003f49
 8003f44:	08003f61 	.word	0x08003f61
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
        break;
 8003f4c:	e030      	b.n	8003fb0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d025      	beq.n	8003fa6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f5e:	e022      	b.n	8003fa6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f68:	d11f      	bne.n	8003faa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f6e:	e01c      	b.n	8003faa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d902      	bls.n	8003f7e <DMA_CheckFifoParam+0xb6>
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d003      	beq.n	8003f84 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003f7c:	e018      	b.n	8003fb0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	73fb      	strb	r3, [r7, #15]
        break;
 8003f82:	e015      	b.n	8003fb0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00e      	beq.n	8003fae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
    break;
 8003f94:	e00b      	b.n	8003fae <DMA_CheckFifoParam+0xe6>
        break;
 8003f96:	bf00      	nop
 8003f98:	e00a      	b.n	8003fb0 <DMA_CheckFifoParam+0xe8>
        break;
 8003f9a:	bf00      	nop
 8003f9c:	e008      	b.n	8003fb0 <DMA_CheckFifoParam+0xe8>
        break;
 8003f9e:	bf00      	nop
 8003fa0:	e006      	b.n	8003fb0 <DMA_CheckFifoParam+0xe8>
        break;
 8003fa2:	bf00      	nop
 8003fa4:	e004      	b.n	8003fb0 <DMA_CheckFifoParam+0xe8>
        break;
 8003fa6:	bf00      	nop
 8003fa8:	e002      	b.n	8003fb0 <DMA_CheckFifoParam+0xe8>
        break;
 8003faa:	bf00      	nop
 8003fac:	e000      	b.n	8003fb0 <DMA_CheckFifoParam+0xe8>
    break;
 8003fae:	bf00      	nop
    }
  }

  return status;
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop

08003fc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a38      	ldr	r2, [pc, #224]	; (80040b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d022      	beq.n	800401e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a36      	ldr	r2, [pc, #216]	; (80040b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d01d      	beq.n	800401e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a35      	ldr	r2, [pc, #212]	; (80040bc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d018      	beq.n	800401e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a33      	ldr	r2, [pc, #204]	; (80040c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a32      	ldr	r2, [pc, #200]	; (80040c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00e      	beq.n	800401e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a30      	ldr	r2, [pc, #192]	; (80040c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d009      	beq.n	800401e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a2f      	ldr	r2, [pc, #188]	; (80040cc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d004      	beq.n	800401e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2d      	ldr	r2, [pc, #180]	; (80040d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d101      	bne.n	8004022 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004022:	2300      	movs	r3, #0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01a      	beq.n	800405e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	3b08      	subs	r3, #8
 8004030:	4a28      	ldr	r2, [pc, #160]	; (80040d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	091b      	lsrs	r3, r3, #4
 8004038:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4b26      	ldr	r3, [pc, #152]	; (80040d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800403e:	4413      	add	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	461a      	mov	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a24      	ldr	r2, [pc, #144]	; (80040dc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800404c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	2201      	movs	r2, #1
 8004056:	409a      	lsls	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800405c:	e024      	b.n	80040a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	b2db      	uxtb	r3, r3
 8004064:	3b10      	subs	r3, #16
 8004066:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004068:	fba2 2303 	umull	r2, r3, r2, r3
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4a1c      	ldr	r2, [pc, #112]	; (80040e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d806      	bhi.n	8004086 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4a1b      	ldr	r2, [pc, #108]	; (80040e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d902      	bls.n	8004086 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3308      	adds	r3, #8
 8004084:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4b18      	ldr	r3, [pc, #96]	; (80040ec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	461a      	mov	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004098:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 031f 	and.w	r3, r3, #31
 80040a0:	2201      	movs	r2, #1
 80040a2:	409a      	lsls	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	58025408 	.word	0x58025408
 80040b8:	5802541c 	.word	0x5802541c
 80040bc:	58025430 	.word	0x58025430
 80040c0:	58025444 	.word	0x58025444
 80040c4:	58025458 	.word	0x58025458
 80040c8:	5802546c 	.word	0x5802546c
 80040cc:	58025480 	.word	0x58025480
 80040d0:	58025494 	.word	0x58025494
 80040d4:	cccccccd 	.word	0xcccccccd
 80040d8:	16009600 	.word	0x16009600
 80040dc:	58025880 	.word	0x58025880
 80040e0:	aaaaaaab 	.word	0xaaaaaaab
 80040e4:	400204b8 	.word	0x400204b8
 80040e8:	4002040f 	.word	0x4002040f
 80040ec:	10008200 	.word	0x10008200
 80040f0:	40020880 	.word	0x40020880

080040f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d04a      	beq.n	80041a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d847      	bhi.n	80041a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a25      	ldr	r2, [pc, #148]	; (80041ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d022      	beq.n	8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a24      	ldr	r2, [pc, #144]	; (80041b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d01d      	beq.n	8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a22      	ldr	r2, [pc, #136]	; (80041b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d018      	beq.n	8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a21      	ldr	r2, [pc, #132]	; (80041b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d013      	beq.n	8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1f      	ldr	r2, [pc, #124]	; (80041bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00e      	beq.n	8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d009      	beq.n	8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d101      	bne.n	8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004164:	2300      	movs	r3, #0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4b17      	ldr	r3, [pc, #92]	; (80041cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	461a      	mov	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a15      	ldr	r2, [pc, #84]	; (80041d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800417c:	671a      	str	r2, [r3, #112]	; 0x70
 800417e:	e009      	b.n	8004194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4b14      	ldr	r3, [pc, #80]	; (80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	461a      	mov	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a11      	ldr	r2, [pc, #68]	; (80041d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004192:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3b01      	subs	r3, #1
 8004198:	2201      	movs	r2, #1
 800419a:	409a      	lsls	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	58025408 	.word	0x58025408
 80041b0:	5802541c 	.word	0x5802541c
 80041b4:	58025430 	.word	0x58025430
 80041b8:	58025444 	.word	0x58025444
 80041bc:	58025458 	.word	0x58025458
 80041c0:	5802546c 	.word	0x5802546c
 80041c4:	58025480 	.word	0x58025480
 80041c8:	58025494 	.word	0x58025494
 80041cc:	1600963f 	.word	0x1600963f
 80041d0:	58025940 	.word	0x58025940
 80041d4:	1000823f 	.word	0x1000823f
 80041d8:	40020940 	.word	0x40020940

080041dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041dc:	b480      	push	{r7}
 80041de:	b089      	sub	sp, #36	; 0x24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80041ea:	4b89      	ldr	r3, [pc, #548]	; (8004410 <HAL_GPIO_Init+0x234>)
 80041ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041ee:	e194      	b.n	800451a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	2101      	movs	r1, #1
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	fa01 f303 	lsl.w	r3, r1, r3
 80041fc:	4013      	ands	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 8186 	beq.w	8004514 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	2b01      	cmp	r3, #1
 8004212:	d005      	beq.n	8004220 <HAL_GPIO_Init+0x44>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f003 0303 	and.w	r3, r3, #3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d130      	bne.n	8004282 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	2203      	movs	r2, #3
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4013      	ands	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4313      	orrs	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004256:	2201      	movs	r2, #1
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	43db      	mvns	r3, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4013      	ands	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	091b      	lsrs	r3, r3, #4
 800426c:	f003 0201 	and.w	r2, r3, #1
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4313      	orrs	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	2b03      	cmp	r3, #3
 800428c:	d017      	beq.n	80042be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	2203      	movs	r2, #3
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43db      	mvns	r3, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4013      	ands	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d123      	bne.n	8004312 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	08da      	lsrs	r2, r3, #3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3208      	adds	r2, #8
 80042d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	220f      	movs	r2, #15
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	43db      	mvns	r3, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4013      	ands	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4313      	orrs	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	08da      	lsrs	r2, r3, #3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3208      	adds	r2, #8
 800430c:	69b9      	ldr	r1, [r7, #24]
 800430e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	2203      	movs	r2, #3
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	43db      	mvns	r3, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4013      	ands	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 0203 	and.w	r2, r3, #3
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4313      	orrs	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 80e0 	beq.w	8004514 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004354:	4b2f      	ldr	r3, [pc, #188]	; (8004414 <HAL_GPIO_Init+0x238>)
 8004356:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800435a:	4a2e      	ldr	r2, [pc, #184]	; (8004414 <HAL_GPIO_Init+0x238>)
 800435c:	f043 0302 	orr.w	r3, r3, #2
 8004360:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004364:	4b2b      	ldr	r3, [pc, #172]	; (8004414 <HAL_GPIO_Init+0x238>)
 8004366:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004372:	4a29      	ldr	r2, [pc, #164]	; (8004418 <HAL_GPIO_Init+0x23c>)
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	089b      	lsrs	r3, r3, #2
 8004378:	3302      	adds	r3, #2
 800437a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	220f      	movs	r2, #15
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	43db      	mvns	r3, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4013      	ands	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a20      	ldr	r2, [pc, #128]	; (800441c <HAL_GPIO_Init+0x240>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d052      	beq.n	8004444 <HAL_GPIO_Init+0x268>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <HAL_GPIO_Init+0x244>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d031      	beq.n	800440a <HAL_GPIO_Init+0x22e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a1e      	ldr	r2, [pc, #120]	; (8004424 <HAL_GPIO_Init+0x248>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d02b      	beq.n	8004406 <HAL_GPIO_Init+0x22a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1d      	ldr	r2, [pc, #116]	; (8004428 <HAL_GPIO_Init+0x24c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d025      	beq.n	8004402 <HAL_GPIO_Init+0x226>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a1c      	ldr	r2, [pc, #112]	; (800442c <HAL_GPIO_Init+0x250>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01f      	beq.n	80043fe <HAL_GPIO_Init+0x222>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a1b      	ldr	r2, [pc, #108]	; (8004430 <HAL_GPIO_Init+0x254>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d019      	beq.n	80043fa <HAL_GPIO_Init+0x21e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a1a      	ldr	r2, [pc, #104]	; (8004434 <HAL_GPIO_Init+0x258>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d013      	beq.n	80043f6 <HAL_GPIO_Init+0x21a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a19      	ldr	r2, [pc, #100]	; (8004438 <HAL_GPIO_Init+0x25c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00d      	beq.n	80043f2 <HAL_GPIO_Init+0x216>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a18      	ldr	r2, [pc, #96]	; (800443c <HAL_GPIO_Init+0x260>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d007      	beq.n	80043ee <HAL_GPIO_Init+0x212>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a17      	ldr	r2, [pc, #92]	; (8004440 <HAL_GPIO_Init+0x264>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d101      	bne.n	80043ea <HAL_GPIO_Init+0x20e>
 80043e6:	2309      	movs	r3, #9
 80043e8:	e02d      	b.n	8004446 <HAL_GPIO_Init+0x26a>
 80043ea:	230a      	movs	r3, #10
 80043ec:	e02b      	b.n	8004446 <HAL_GPIO_Init+0x26a>
 80043ee:	2308      	movs	r3, #8
 80043f0:	e029      	b.n	8004446 <HAL_GPIO_Init+0x26a>
 80043f2:	2307      	movs	r3, #7
 80043f4:	e027      	b.n	8004446 <HAL_GPIO_Init+0x26a>
 80043f6:	2306      	movs	r3, #6
 80043f8:	e025      	b.n	8004446 <HAL_GPIO_Init+0x26a>
 80043fa:	2305      	movs	r3, #5
 80043fc:	e023      	b.n	8004446 <HAL_GPIO_Init+0x26a>
 80043fe:	2304      	movs	r3, #4
 8004400:	e021      	b.n	8004446 <HAL_GPIO_Init+0x26a>
 8004402:	2303      	movs	r3, #3
 8004404:	e01f      	b.n	8004446 <HAL_GPIO_Init+0x26a>
 8004406:	2302      	movs	r3, #2
 8004408:	e01d      	b.n	8004446 <HAL_GPIO_Init+0x26a>
 800440a:	2301      	movs	r3, #1
 800440c:	e01b      	b.n	8004446 <HAL_GPIO_Init+0x26a>
 800440e:	bf00      	nop
 8004410:	58000080 	.word	0x58000080
 8004414:	58024400 	.word	0x58024400
 8004418:	58000400 	.word	0x58000400
 800441c:	58020000 	.word	0x58020000
 8004420:	58020400 	.word	0x58020400
 8004424:	58020800 	.word	0x58020800
 8004428:	58020c00 	.word	0x58020c00
 800442c:	58021000 	.word	0x58021000
 8004430:	58021400 	.word	0x58021400
 8004434:	58021800 	.word	0x58021800
 8004438:	58021c00 	.word	0x58021c00
 800443c:	58022000 	.word	0x58022000
 8004440:	58022400 	.word	0x58022400
 8004444:	2300      	movs	r3, #0
 8004446:	69fa      	ldr	r2, [r7, #28]
 8004448:	f002 0203 	and.w	r2, r2, #3
 800444c:	0092      	lsls	r2, r2, #2
 800444e:	4093      	lsls	r3, r2
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4313      	orrs	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004456:	4938      	ldr	r1, [pc, #224]	; (8004538 <HAL_GPIO_Init+0x35c>)
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	089b      	lsrs	r3, r3, #2
 800445c:	3302      	adds	r3, #2
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800448a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	43db      	mvns	r3, r3
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4013      	ands	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80044b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	43db      	mvns	r3, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4013      	ands	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	43db      	mvns	r3, r3
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	4013      	ands	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	3301      	adds	r3, #1
 8004518:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	f47f ae63 	bne.w	80041f0 <HAL_GPIO_Init+0x14>
  }
}
 800452a:	bf00      	nop
 800452c:	bf00      	nop
 800452e:	3724      	adds	r7, #36	; 0x24
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	58000400 	.word	0x58000400

0800453c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	807b      	strh	r3, [r7, #2]
 8004548:	4613      	mov	r3, r2
 800454a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800454c:	787b      	ldrb	r3, [r7, #1]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004552:	887a      	ldrh	r2, [r7, #2]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004558:	e003      	b.n	8004562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800455a:	887b      	ldrh	r3, [r7, #2]
 800455c:	041a      	lsls	r2, r3, #16
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	619a      	str	r2, [r3, #24]
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
	...

08004570 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004578:	4b29      	ldr	r3, [pc, #164]	; (8004620 <HAL_PWREx_ConfigSupply+0xb0>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	2b06      	cmp	r3, #6
 8004582:	d00a      	beq.n	800459a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004584:	4b26      	ldr	r3, [pc, #152]	; (8004620 <HAL_PWREx_ConfigSupply+0xb0>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	429a      	cmp	r2, r3
 8004590:	d001      	beq.n	8004596 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e040      	b.n	8004618 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	e03e      	b.n	8004618 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800459a:	4b21      	ldr	r3, [pc, #132]	; (8004620 <HAL_PWREx_ConfigSupply+0xb0>)
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80045a2:	491f      	ldr	r1, [pc, #124]	; (8004620 <HAL_PWREx_ConfigSupply+0xb0>)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80045aa:	f7fd fa25 	bl	80019f8 <HAL_GetTick>
 80045ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045b0:	e009      	b.n	80045c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045b2:	f7fd fa21 	bl	80019f8 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045c0:	d901      	bls.n	80045c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e028      	b.n	8004618 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045c6:	4b16      	ldr	r3, [pc, #88]	; (8004620 <HAL_PWREx_ConfigSupply+0xb0>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d2:	d1ee      	bne.n	80045b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b1e      	cmp	r3, #30
 80045d8:	d008      	beq.n	80045ec <HAL_PWREx_ConfigSupply+0x7c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b2e      	cmp	r3, #46	; 0x2e
 80045de:	d005      	beq.n	80045ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b1d      	cmp	r3, #29
 80045e4:	d002      	beq.n	80045ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b2d      	cmp	r3, #45	; 0x2d
 80045ea:	d114      	bne.n	8004616 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80045ec:	f7fd fa04 	bl	80019f8 <HAL_GetTick>
 80045f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80045f2:	e009      	b.n	8004608 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045f4:	f7fd fa00 	bl	80019f8 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004602:	d901      	bls.n	8004608 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e007      	b.n	8004618 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_PWREx_ConfigSupply+0xb0>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004614:	d1ee      	bne.n	80045f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	58024800 	.word	0x58024800

08004624 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08c      	sub	sp, #48	; 0x30
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f000 bc1f 	b.w	8004e76 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80b3 	beq.w	80047ac <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004646:	4b95      	ldr	r3, [pc, #596]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800464e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004650:	4b92      	ldr	r3, [pc, #584]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004658:	2b10      	cmp	r3, #16
 800465a:	d007      	beq.n	800466c <HAL_RCC_OscConfig+0x48>
 800465c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465e:	2b18      	cmp	r3, #24
 8004660:	d112      	bne.n	8004688 <HAL_RCC_OscConfig+0x64>
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	f003 0303 	and.w	r3, r3, #3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d10d      	bne.n	8004688 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466c:	4b8b      	ldr	r3, [pc, #556]	; (800489c <HAL_RCC_OscConfig+0x278>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8098 	beq.w	80047aa <HAL_RCC_OscConfig+0x186>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	f040 8093 	bne.w	80047aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e3f6      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004690:	d106      	bne.n	80046a0 <HAL_RCC_OscConfig+0x7c>
 8004692:	4b82      	ldr	r3, [pc, #520]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a81      	ldr	r2, [pc, #516]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	e058      	b.n	8004752 <HAL_RCC_OscConfig+0x12e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d112      	bne.n	80046ce <HAL_RCC_OscConfig+0xaa>
 80046a8:	4b7c      	ldr	r3, [pc, #496]	; (800489c <HAL_RCC_OscConfig+0x278>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a7b      	ldr	r2, [pc, #492]	; (800489c <HAL_RCC_OscConfig+0x278>)
 80046ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	4b79      	ldr	r3, [pc, #484]	; (800489c <HAL_RCC_OscConfig+0x278>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a78      	ldr	r2, [pc, #480]	; (800489c <HAL_RCC_OscConfig+0x278>)
 80046ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	4b76      	ldr	r3, [pc, #472]	; (800489c <HAL_RCC_OscConfig+0x278>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a75      	ldr	r2, [pc, #468]	; (800489c <HAL_RCC_OscConfig+0x278>)
 80046c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	e041      	b.n	8004752 <HAL_RCC_OscConfig+0x12e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046d6:	d112      	bne.n	80046fe <HAL_RCC_OscConfig+0xda>
 80046d8:	4b70      	ldr	r3, [pc, #448]	; (800489c <HAL_RCC_OscConfig+0x278>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a6f      	ldr	r2, [pc, #444]	; (800489c <HAL_RCC_OscConfig+0x278>)
 80046de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	4b6d      	ldr	r3, [pc, #436]	; (800489c <HAL_RCC_OscConfig+0x278>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a6c      	ldr	r2, [pc, #432]	; (800489c <HAL_RCC_OscConfig+0x278>)
 80046ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	4b6a      	ldr	r3, [pc, #424]	; (800489c <HAL_RCC_OscConfig+0x278>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a69      	ldr	r2, [pc, #420]	; (800489c <HAL_RCC_OscConfig+0x278>)
 80046f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	e029      	b.n	8004752 <HAL_RCC_OscConfig+0x12e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004706:	d112      	bne.n	800472e <HAL_RCC_OscConfig+0x10a>
 8004708:	4b64      	ldr	r3, [pc, #400]	; (800489c <HAL_RCC_OscConfig+0x278>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a63      	ldr	r2, [pc, #396]	; (800489c <HAL_RCC_OscConfig+0x278>)
 800470e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	4b61      	ldr	r3, [pc, #388]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a60      	ldr	r2, [pc, #384]	; (800489c <HAL_RCC_OscConfig+0x278>)
 800471a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	4b5e      	ldr	r3, [pc, #376]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a5d      	ldr	r2, [pc, #372]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	e011      	b.n	8004752 <HAL_RCC_OscConfig+0x12e>
 800472e:	4b5b      	ldr	r3, [pc, #364]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a5a      	ldr	r2, [pc, #360]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	4b58      	ldr	r3, [pc, #352]	; (800489c <HAL_RCC_OscConfig+0x278>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a57      	ldr	r2, [pc, #348]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	4b55      	ldr	r3, [pc, #340]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a54      	ldr	r2, [pc, #336]	; (800489c <HAL_RCC_OscConfig+0x278>)
 800474c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004750:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d013      	beq.n	8004782 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475a:	f7fd f94d 	bl	80019f8 <HAL_GetTick>
 800475e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004762:	f7fd f949 	bl	80019f8 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b64      	cmp	r3, #100	; 0x64
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e380      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004774:	4b49      	ldr	r3, [pc, #292]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0f0      	beq.n	8004762 <HAL_RCC_OscConfig+0x13e>
 8004780:	e014      	b.n	80047ac <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004782:	f7fd f939 	bl	80019f8 <HAL_GetTick>
 8004786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478a:	f7fd f935 	bl	80019f8 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b64      	cmp	r3, #100	; 0x64
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e36c      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800479c:	4b3f      	ldr	r3, [pc, #252]	; (800489c <HAL_RCC_OscConfig+0x278>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f0      	bne.n	800478a <HAL_RCC_OscConfig+0x166>
 80047a8:	e000      	b.n	80047ac <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 808c 	beq.w	80048d2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ba:	4b38      	ldr	r3, [pc, #224]	; (800489c <HAL_RCC_OscConfig+0x278>)
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047c2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047c4:	4b35      	ldr	r3, [pc, #212]	; (800489c <HAL_RCC_OscConfig+0x278>)
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d007      	beq.n	80047e0 <HAL_RCC_OscConfig+0x1bc>
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	2b18      	cmp	r3, #24
 80047d4:	d137      	bne.n	8004846 <HAL_RCC_OscConfig+0x222>
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d132      	bne.n	8004846 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047e0:	4b2e      	ldr	r3, [pc, #184]	; (800489c <HAL_RCC_OscConfig+0x278>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_OscConfig+0x1d4>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e33e      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047f8:	4b28      	ldr	r3, [pc, #160]	; (800489c <HAL_RCC_OscConfig+0x278>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f023 0219 	bic.w	r2, r3, #25
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4925      	ldr	r1, [pc, #148]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004806:	4313      	orrs	r3, r2
 8004808:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480a:	f7fd f8f5 	bl	80019f8 <HAL_GetTick>
 800480e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004812:	f7fd f8f1 	bl	80019f8 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e328      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004824:	4b1d      	ldr	r3, [pc, #116]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0f0      	beq.n	8004812 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004830:	4b1a      	ldr	r3, [pc, #104]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	061b      	lsls	r3, r3, #24
 800483e:	4917      	ldr	r1, [pc, #92]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004844:	e045      	b.n	80048d2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d028      	beq.n	80048a0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800484e:	4b13      	ldr	r3, [pc, #76]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 0219 	bic.w	r2, r3, #25
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	4910      	ldr	r1, [pc, #64]	; (800489c <HAL_RCC_OscConfig+0x278>)
 800485c:	4313      	orrs	r3, r2
 800485e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fd f8ca 	bl	80019f8 <HAL_GetTick>
 8004864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004868:	f7fd f8c6 	bl	80019f8 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e2fd      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800487a:	4b08      	ldr	r3, [pc, #32]	; (800489c <HAL_RCC_OscConfig+0x278>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004886:	4b05      	ldr	r3, [pc, #20]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	061b      	lsls	r3, r3, #24
 8004894:	4901      	ldr	r1, [pc, #4]	; (800489c <HAL_RCC_OscConfig+0x278>)
 8004896:	4313      	orrs	r3, r2
 8004898:	604b      	str	r3, [r1, #4]
 800489a:	e01a      	b.n	80048d2 <HAL_RCC_OscConfig+0x2ae>
 800489c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a0:	4b97      	ldr	r3, [pc, #604]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a96      	ldr	r2, [pc, #600]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 80048a6:	f023 0301 	bic.w	r3, r3, #1
 80048aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7fd f8a4 	bl	80019f8 <HAL_GetTick>
 80048b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b4:	f7fd f8a0 	bl	80019f8 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e2d7      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048c6:	4b8e      	ldr	r3, [pc, #568]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d06a      	beq.n	80049b4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048de:	4b88      	ldr	r3, [pc, #544]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048e8:	4b85      	ldr	r3, [pc, #532]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d007      	beq.n	8004904 <HAL_RCC_OscConfig+0x2e0>
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	2b18      	cmp	r3, #24
 80048f8:	d11b      	bne.n	8004932 <HAL_RCC_OscConfig+0x30e>
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d116      	bne.n	8004932 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004904:	4b7e      	ldr	r3, [pc, #504]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_RCC_OscConfig+0x2f8>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	2b80      	cmp	r3, #128	; 0x80
 8004916:	d001      	beq.n	800491c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e2ac      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800491c:	4b78      	ldr	r3, [pc, #480]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	061b      	lsls	r3, r3, #24
 800492a:	4975      	ldr	r1, [pc, #468]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 800492c:	4313      	orrs	r3, r2
 800492e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004930:	e040      	b.n	80049b4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d023      	beq.n	8004982 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800493a:	4b71      	ldr	r3, [pc, #452]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a70      	ldr	r2, [pc, #448]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 8004940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fd f857 	bl	80019f8 <HAL_GetTick>
 800494a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800494e:	f7fd f853 	bl	80019f8 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e28a      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004960:	4b67      	ldr	r3, [pc, #412]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800496c:	4b64      	ldr	r3, [pc, #400]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	061b      	lsls	r3, r3, #24
 800497a:	4961      	ldr	r1, [pc, #388]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 800497c:	4313      	orrs	r3, r2
 800497e:	60cb      	str	r3, [r1, #12]
 8004980:	e018      	b.n	80049b4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004982:	4b5f      	ldr	r3, [pc, #380]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a5e      	ldr	r2, [pc, #376]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 8004988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800498c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498e:	f7fd f833 	bl	80019f8 <HAL_GetTick>
 8004992:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004996:	f7fd f82f 	bl	80019f8 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e266      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049a8:	4b55      	ldr	r3, [pc, #340]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f0      	bne.n	8004996 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d036      	beq.n	8004a2e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d019      	beq.n	80049fc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049c8:	4b4d      	ldr	r3, [pc, #308]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 80049ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049cc:	4a4c      	ldr	r2, [pc, #304]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d4:	f7fd f810 	bl	80019f8 <HAL_GetTick>
 80049d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049dc:	f7fd f80c 	bl	80019f8 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e243      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049ee:	4b44      	ldr	r3, [pc, #272]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 80049f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0f0      	beq.n	80049dc <HAL_RCC_OscConfig+0x3b8>
 80049fa:	e018      	b.n	8004a2e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049fc:	4b40      	ldr	r3, [pc, #256]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 80049fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a00:	4a3f      	ldr	r2, [pc, #252]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a08:	f7fc fff6 	bl	80019f8 <HAL_GetTick>
 8004a0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a10:	f7fc fff2 	bl	80019f8 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e229      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a22:	4b37      	ldr	r3, [pc, #220]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 8004a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d036      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d019      	beq.n	8004a76 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a42:	4b2f      	ldr	r3, [pc, #188]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a2e      	ldr	r2, [pc, #184]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 8004a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a4e:	f7fc ffd3 	bl	80019f8 <HAL_GetTick>
 8004a52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a56:	f7fc ffcf 	bl	80019f8 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e206      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a68:	4b25      	ldr	r3, [pc, #148]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f0      	beq.n	8004a56 <HAL_RCC_OscConfig+0x432>
 8004a74:	e018      	b.n	8004aa8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a76:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a21      	ldr	r2, [pc, #132]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 8004a7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a82:	f7fc ffb9 	bl	80019f8 <HAL_GetTick>
 8004a86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a8a:	f7fc ffb5 	bl	80019f8 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e1ec      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a9c:	4b18      	ldr	r3, [pc, #96]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f0      	bne.n	8004a8a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80af 	beq.w	8004c14 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ab6:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <HAL_RCC_OscConfig+0x4e0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a12      	ldr	r2, [pc, #72]	; (8004b04 <HAL_RCC_OscConfig+0x4e0>)
 8004abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ac2:	f7fc ff99 	bl	80019f8 <HAL_GetTick>
 8004ac6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aca:	f7fc ff95 	bl	80019f8 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b64      	cmp	r3, #100	; 0x64
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e1cc      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004adc:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <HAL_RCC_OscConfig+0x4e0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f0      	beq.n	8004aca <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d10b      	bne.n	8004b08 <HAL_RCC_OscConfig+0x4e4>
 8004af0:	4b03      	ldr	r3, [pc, #12]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	4a02      	ldr	r2, [pc, #8]	; (8004b00 <HAL_RCC_OscConfig+0x4dc>)
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	6713      	str	r3, [r2, #112]	; 0x70
 8004afc:	e05b      	b.n	8004bb6 <HAL_RCC_OscConfig+0x592>
 8004afe:	bf00      	nop
 8004b00:	58024400 	.word	0x58024400
 8004b04:	58024800 	.word	0x58024800
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d112      	bne.n	8004b36 <HAL_RCC_OscConfig+0x512>
 8004b10:	4b9d      	ldr	r3, [pc, #628]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b14:	4a9c      	ldr	r2, [pc, #624]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b16:	f023 0301 	bic.w	r3, r3, #1
 8004b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1c:	4b9a      	ldr	r3, [pc, #616]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b20:	4a99      	ldr	r2, [pc, #612]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b26:	6713      	str	r3, [r2, #112]	; 0x70
 8004b28:	4b97      	ldr	r3, [pc, #604]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	4a96      	ldr	r2, [pc, #600]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b2e:	f023 0304 	bic.w	r3, r3, #4
 8004b32:	6713      	str	r3, [r2, #112]	; 0x70
 8004b34:	e03f      	b.n	8004bb6 <HAL_RCC_OscConfig+0x592>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b05      	cmp	r3, #5
 8004b3c:	d112      	bne.n	8004b64 <HAL_RCC_OscConfig+0x540>
 8004b3e:	4b92      	ldr	r3, [pc, #584]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b42:	4a91      	ldr	r2, [pc, #580]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b44:	f043 0304 	orr.w	r3, r3, #4
 8004b48:	6713      	str	r3, [r2, #112]	; 0x70
 8004b4a:	4b8f      	ldr	r3, [pc, #572]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	4a8e      	ldr	r2, [pc, #568]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b54:	6713      	str	r3, [r2, #112]	; 0x70
 8004b56:	4b8c      	ldr	r3, [pc, #560]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	4a8b      	ldr	r2, [pc, #556]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b5c:	f043 0301 	orr.w	r3, r3, #1
 8004b60:	6713      	str	r3, [r2, #112]	; 0x70
 8004b62:	e028      	b.n	8004bb6 <HAL_RCC_OscConfig+0x592>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2b85      	cmp	r3, #133	; 0x85
 8004b6a:	d112      	bne.n	8004b92 <HAL_RCC_OscConfig+0x56e>
 8004b6c:	4b86      	ldr	r3, [pc, #536]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b70:	4a85      	ldr	r2, [pc, #532]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b72:	f043 0304 	orr.w	r3, r3, #4
 8004b76:	6713      	str	r3, [r2, #112]	; 0x70
 8004b78:	4b83      	ldr	r3, [pc, #524]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7c:	4a82      	ldr	r2, [pc, #520]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b82:	6713      	str	r3, [r2, #112]	; 0x70
 8004b84:	4b80      	ldr	r3, [pc, #512]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b88:	4a7f      	ldr	r2, [pc, #508]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b90:	e011      	b.n	8004bb6 <HAL_RCC_OscConfig+0x592>
 8004b92:	4b7d      	ldr	r3, [pc, #500]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	4a7c      	ldr	r2, [pc, #496]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9e:	4b7a      	ldr	r3, [pc, #488]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba2:	4a79      	ldr	r2, [pc, #484]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004ba4:	f023 0304 	bic.w	r3, r3, #4
 8004ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8004baa:	4b77      	ldr	r3, [pc, #476]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bae:	4a76      	ldr	r2, [pc, #472]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d015      	beq.n	8004bea <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bbe:	f7fc ff1b 	bl	80019f8 <HAL_GetTick>
 8004bc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bc4:	e00a      	b.n	8004bdc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc6:	f7fc ff17 	bl	80019f8 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e14c      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bdc:	4b6a      	ldr	r3, [pc, #424]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0ee      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x5a2>
 8004be8:	e014      	b.n	8004c14 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bea:	f7fc ff05 	bl	80019f8 <HAL_GetTick>
 8004bee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bf0:	e00a      	b.n	8004c08 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf2:	f7fc ff01 	bl	80019f8 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e136      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c08:	4b5f      	ldr	r3, [pc, #380]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1ee      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 812b 	beq.w	8004e74 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c1e:	4b5a      	ldr	r3, [pc, #360]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c26:	2b18      	cmp	r3, #24
 8004c28:	f000 80bb 	beq.w	8004da2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	f040 8095 	bne.w	8004d60 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c36:	4b54      	ldr	r3, [pc, #336]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a53      	ldr	r2, [pc, #332]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004c3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c42:	f7fc fed9 	bl	80019f8 <HAL_GetTick>
 8004c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4a:	f7fc fed5 	bl	80019f8 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e10c      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c5c:	4b4a      	ldr	r3, [pc, #296]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1f0      	bne.n	8004c4a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c68:	4b47      	ldr	r3, [pc, #284]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004c6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c6c:	4b47      	ldr	r3, [pc, #284]	; (8004d8c <HAL_RCC_OscConfig+0x768>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c78:	0112      	lsls	r2, r2, #4
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	4942      	ldr	r1, [pc, #264]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	628b      	str	r3, [r1, #40]	; 0x28
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	3b01      	subs	r3, #1
 8004c88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c90:	3b01      	subs	r3, #1
 8004c92:	025b      	lsls	r3, r3, #9
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	041b      	lsls	r3, r3, #16
 8004ca0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004caa:	3b01      	subs	r3, #1
 8004cac:	061b      	lsls	r3, r3, #24
 8004cae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004cb2:	4935      	ldr	r1, [pc, #212]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004cb8:	4b33      	ldr	r3, [pc, #204]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	4a32      	ldr	r2, [pc, #200]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004cc4:	4b30      	ldr	r3, [pc, #192]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc8:	4b31      	ldr	r3, [pc, #196]	; (8004d90 <HAL_RCC_OscConfig+0x76c>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004cd0:	00d2      	lsls	r2, r2, #3
 8004cd2:	492d      	ldr	r1, [pc, #180]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004cd8:	4b2b      	ldr	r3, [pc, #172]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	f023 020c 	bic.w	r2, r3, #12
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	4928      	ldr	r1, [pc, #160]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004cea:	4b27      	ldr	r3, [pc, #156]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	f023 0202 	bic.w	r2, r3, #2
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	4924      	ldr	r1, [pc, #144]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004cfc:	4b22      	ldr	r3, [pc, #136]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	4a21      	ldr	r2, [pc, #132]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d08:	4b1f      	ldr	r3, [pc, #124]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	4a1e      	ldr	r2, [pc, #120]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d14:	4b1c      	ldr	r3, [pc, #112]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	4a1b      	ldr	r2, [pc, #108]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004d1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d20:	4b19      	ldr	r3, [pc, #100]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d2c:	4b16      	ldr	r3, [pc, #88]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fc fe5e 	bl	80019f8 <HAL_GetTick>
 8004d3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fc fe5a 	bl	80019f8 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e091      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d52:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f0      	beq.n	8004d40 <HAL_RCC_OscConfig+0x71c>
 8004d5e:	e089      	b.n	8004e74 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d60:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a08      	ldr	r2, [pc, #32]	; (8004d88 <HAL_RCC_OscConfig+0x764>)
 8004d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fc fe44 	bl	80019f8 <HAL_GetTick>
 8004d70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d72:	e00f      	b.n	8004d94 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d74:	f7fc fe40 	bl	80019f8 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d908      	bls.n	8004d94 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e077      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
 8004d86:	bf00      	nop
 8004d88:	58024400 	.word	0x58024400
 8004d8c:	fffffc0c 	.word	0xfffffc0c
 8004d90:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d94:	4b3a      	ldr	r3, [pc, #232]	; (8004e80 <HAL_RCC_OscConfig+0x85c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e9      	bne.n	8004d74 <HAL_RCC_OscConfig+0x750>
 8004da0:	e068      	b.n	8004e74 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004da2:	4b37      	ldr	r3, [pc, #220]	; (8004e80 <HAL_RCC_OscConfig+0x85c>)
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004da8:	4b35      	ldr	r3, [pc, #212]	; (8004e80 <HAL_RCC_OscConfig+0x85c>)
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d031      	beq.n	8004e1a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f003 0203 	and.w	r2, r3, #3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d12a      	bne.n	8004e1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	091b      	lsrs	r3, r3, #4
 8004dc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d122      	bne.n	8004e1a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d11a      	bne.n	8004e1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	0a5b      	lsrs	r3, r3, #9
 8004de8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d111      	bne.n	8004e1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	0c1b      	lsrs	r3, r3, #16
 8004dfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d108      	bne.n	8004e1a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	0e1b      	lsrs	r3, r3, #24
 8004e0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e14:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d001      	beq.n	8004e1e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e02b      	b.n	8004e76 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e1e:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <HAL_RCC_OscConfig+0x85c>)
 8004e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e22:	08db      	lsrs	r3, r3, #3
 8004e24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e28:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d01f      	beq.n	8004e74 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004e34:	4b12      	ldr	r3, [pc, #72]	; (8004e80 <HAL_RCC_OscConfig+0x85c>)
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	4a11      	ldr	r2, [pc, #68]	; (8004e80 <HAL_RCC_OscConfig+0x85c>)
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e40:	f7fc fdda 	bl	80019f8 <HAL_GetTick>
 8004e44:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004e46:	bf00      	nop
 8004e48:	f7fc fdd6 	bl	80019f8 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d0f9      	beq.n	8004e48 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <HAL_RCC_OscConfig+0x85c>)
 8004e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e58:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <HAL_RCC_OscConfig+0x860>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e60:	00d2      	lsls	r2, r2, #3
 8004e62:	4907      	ldr	r1, [pc, #28]	; (8004e80 <HAL_RCC_OscConfig+0x85c>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004e68:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <HAL_RCC_OscConfig+0x85c>)
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	4a04      	ldr	r2, [pc, #16]	; (8004e80 <HAL_RCC_OscConfig+0x85c>)
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3730      	adds	r7, #48	; 0x30
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	58024400 	.word	0x58024400
 8004e84:	ffff0007 	.word	0xffff0007

08004e88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e19c      	b.n	80051d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e9c:	4b8a      	ldr	r3, [pc, #552]	; (80050c8 <HAL_RCC_ClockConfig+0x240>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d910      	bls.n	8004ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eaa:	4b87      	ldr	r3, [pc, #540]	; (80050c8 <HAL_RCC_ClockConfig+0x240>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f023 020f 	bic.w	r2, r3, #15
 8004eb2:	4985      	ldr	r1, [pc, #532]	; (80050c8 <HAL_RCC_ClockConfig+0x240>)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eba:	4b83      	ldr	r3, [pc, #524]	; (80050c8 <HAL_RCC_ClockConfig+0x240>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d001      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e184      	b.n	80051d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d010      	beq.n	8004efa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	4b7b      	ldr	r3, [pc, #492]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d908      	bls.n	8004efa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ee8:	4b78      	ldr	r3, [pc, #480]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	4975      	ldr	r1, [pc, #468]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d010      	beq.n	8004f28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695a      	ldr	r2, [r3, #20]
 8004f0a:	4b70      	ldr	r3, [pc, #448]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d908      	bls.n	8004f28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f16:	4b6d      	ldr	r3, [pc, #436]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	496a      	ldr	r1, [pc, #424]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d010      	beq.n	8004f56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699a      	ldr	r2, [r3, #24]
 8004f38:	4b64      	ldr	r3, [pc, #400]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d908      	bls.n	8004f56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f44:	4b61      	ldr	r3, [pc, #388]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	495e      	ldr	r1, [pc, #376]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d010      	beq.n	8004f84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	4b59      	ldr	r3, [pc, #356]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d908      	bls.n	8004f84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f72:	4b56      	ldr	r3, [pc, #344]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	4953      	ldr	r1, [pc, #332]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d010      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	4b4d      	ldr	r3, [pc, #308]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d908      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa0:	4b4a      	ldr	r3, [pc, #296]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	f023 020f 	bic.w	r2, r3, #15
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	4947      	ldr	r1, [pc, #284]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d055      	beq.n	800506a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004fbe:	4b43      	ldr	r3, [pc, #268]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	4940      	ldr	r1, [pc, #256]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d107      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fd8:	4b3c      	ldr	r3, [pc, #240]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d121      	bne.n	8005028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0f6      	b.n	80051d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d107      	bne.n	8005000 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ff0:	4b36      	ldr	r3, [pc, #216]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d115      	bne.n	8005028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0ea      	b.n	80051d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d107      	bne.n	8005018 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005008:	4b30      	ldr	r3, [pc, #192]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d109      	bne.n	8005028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0de      	b.n	80051d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005018:	4b2c      	ldr	r3, [pc, #176]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0d6      	b.n	80051d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005028:	4b28      	ldr	r3, [pc, #160]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f023 0207 	bic.w	r2, r3, #7
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	4925      	ldr	r1, [pc, #148]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8005036:	4313      	orrs	r3, r2
 8005038:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503a:	f7fc fcdd 	bl	80019f8 <HAL_GetTick>
 800503e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005040:	e00a      	b.n	8005058 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005042:	f7fc fcd9 	bl	80019f8 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005050:	4293      	cmp	r3, r2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e0be      	b.n	80051d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005058:	4b1c      	ldr	r3, [pc, #112]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	429a      	cmp	r2, r3
 8005068:	d1eb      	bne.n	8005042 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d010      	beq.n	8005098 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	4b14      	ldr	r3, [pc, #80]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	429a      	cmp	r2, r3
 8005084:	d208      	bcs.n	8005098 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005086:	4b11      	ldr	r3, [pc, #68]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	f023 020f 	bic.w	r2, r3, #15
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	490e      	ldr	r1, [pc, #56]	; (80050cc <HAL_RCC_ClockConfig+0x244>)
 8005094:	4313      	orrs	r3, r2
 8005096:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005098:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <HAL_RCC_ClockConfig+0x240>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 030f 	and.w	r3, r3, #15
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d214      	bcs.n	80050d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a6:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <HAL_RCC_ClockConfig+0x240>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 020f 	bic.w	r2, r3, #15
 80050ae:	4906      	ldr	r1, [pc, #24]	; (80050c8 <HAL_RCC_ClockConfig+0x240>)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b6:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <HAL_RCC_ClockConfig+0x240>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d005      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e086      	b.n	80051d6 <HAL_RCC_ClockConfig+0x34e>
 80050c8:	52002000 	.word	0x52002000
 80050cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d010      	beq.n	80050fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	4b3f      	ldr	r3, [pc, #252]	; (80051e0 <HAL_RCC_ClockConfig+0x358>)
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d208      	bcs.n	80050fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050ec:	4b3c      	ldr	r3, [pc, #240]	; (80051e0 <HAL_RCC_ClockConfig+0x358>)
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	4939      	ldr	r1, [pc, #228]	; (80051e0 <HAL_RCC_ClockConfig+0x358>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d010      	beq.n	800512c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695a      	ldr	r2, [r3, #20]
 800510e:	4b34      	ldr	r3, [pc, #208]	; (80051e0 <HAL_RCC_ClockConfig+0x358>)
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005116:	429a      	cmp	r2, r3
 8005118:	d208      	bcs.n	800512c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800511a:	4b31      	ldr	r3, [pc, #196]	; (80051e0 <HAL_RCC_ClockConfig+0x358>)
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	492e      	ldr	r1, [pc, #184]	; (80051e0 <HAL_RCC_ClockConfig+0x358>)
 8005128:	4313      	orrs	r3, r2
 800512a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b00      	cmp	r3, #0
 8005136:	d010      	beq.n	800515a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699a      	ldr	r2, [r3, #24]
 800513c:	4b28      	ldr	r3, [pc, #160]	; (80051e0 <HAL_RCC_ClockConfig+0x358>)
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005144:	429a      	cmp	r2, r3
 8005146:	d208      	bcs.n	800515a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005148:	4b25      	ldr	r3, [pc, #148]	; (80051e0 <HAL_RCC_ClockConfig+0x358>)
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	4922      	ldr	r1, [pc, #136]	; (80051e0 <HAL_RCC_ClockConfig+0x358>)
 8005156:	4313      	orrs	r3, r2
 8005158:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d010      	beq.n	8005188 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69da      	ldr	r2, [r3, #28]
 800516a:	4b1d      	ldr	r3, [pc, #116]	; (80051e0 <HAL_RCC_ClockConfig+0x358>)
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005172:	429a      	cmp	r2, r3
 8005174:	d208      	bcs.n	8005188 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005176:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <HAL_RCC_ClockConfig+0x358>)
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	4917      	ldr	r1, [pc, #92]	; (80051e0 <HAL_RCC_ClockConfig+0x358>)
 8005184:	4313      	orrs	r3, r2
 8005186:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005188:	f000 f834 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
 800518c:	4602      	mov	r2, r0
 800518e:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <HAL_RCC_ClockConfig+0x358>)
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	0a1b      	lsrs	r3, r3, #8
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	4912      	ldr	r1, [pc, #72]	; (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 800519a:	5ccb      	ldrb	r3, [r1, r3]
 800519c:	f003 031f 	and.w	r3, r3, #31
 80051a0:	fa22 f303 	lsr.w	r3, r2, r3
 80051a4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80051a6:	4b0e      	ldr	r3, [pc, #56]	; (80051e0 <HAL_RCC_ClockConfig+0x358>)
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	4a0d      	ldr	r2, [pc, #52]	; (80051e4 <HAL_RCC_ClockConfig+0x35c>)
 80051b0:	5cd3      	ldrb	r3, [r2, r3]
 80051b2:	f003 031f 	and.w	r3, r3, #31
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
 80051bc:	4a0a      	ldr	r2, [pc, #40]	; (80051e8 <HAL_RCC_ClockConfig+0x360>)
 80051be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051c0:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <HAL_RCC_ClockConfig+0x364>)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80051c6:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <HAL_RCC_ClockConfig+0x368>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fc fbca 	bl	8001964 <HAL_InitTick>
 80051d0:	4603      	mov	r3, r0
 80051d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	58024400 	.word	0x58024400
 80051e4:	0800b044 	.word	0x0800b044
 80051e8:	2400000c 	.word	0x2400000c
 80051ec:	24000008 	.word	0x24000008
 80051f0:	24000010 	.word	0x24000010

080051f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b089      	sub	sp, #36	; 0x24
 80051f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051fa:	4bb3      	ldr	r3, [pc, #716]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005202:	2b18      	cmp	r3, #24
 8005204:	f200 8155 	bhi.w	80054b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005208:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <HAL_RCC_GetSysClockFreq+0x1c>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	08005275 	.word	0x08005275
 8005214:	080054b3 	.word	0x080054b3
 8005218:	080054b3 	.word	0x080054b3
 800521c:	080054b3 	.word	0x080054b3
 8005220:	080054b3 	.word	0x080054b3
 8005224:	080054b3 	.word	0x080054b3
 8005228:	080054b3 	.word	0x080054b3
 800522c:	080054b3 	.word	0x080054b3
 8005230:	0800529b 	.word	0x0800529b
 8005234:	080054b3 	.word	0x080054b3
 8005238:	080054b3 	.word	0x080054b3
 800523c:	080054b3 	.word	0x080054b3
 8005240:	080054b3 	.word	0x080054b3
 8005244:	080054b3 	.word	0x080054b3
 8005248:	080054b3 	.word	0x080054b3
 800524c:	080054b3 	.word	0x080054b3
 8005250:	080052a1 	.word	0x080052a1
 8005254:	080054b3 	.word	0x080054b3
 8005258:	080054b3 	.word	0x080054b3
 800525c:	080054b3 	.word	0x080054b3
 8005260:	080054b3 	.word	0x080054b3
 8005264:	080054b3 	.word	0x080054b3
 8005268:	080054b3 	.word	0x080054b3
 800526c:	080054b3 	.word	0x080054b3
 8005270:	080052a7 	.word	0x080052a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005274:	4b94      	ldr	r3, [pc, #592]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0320 	and.w	r3, r3, #32
 800527c:	2b00      	cmp	r3, #0
 800527e:	d009      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005280:	4b91      	ldr	r3, [pc, #580]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	08db      	lsrs	r3, r3, #3
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	4a90      	ldr	r2, [pc, #576]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
 8005290:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005292:	e111      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005294:	4b8d      	ldr	r3, [pc, #564]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005296:	61bb      	str	r3, [r7, #24]
      break;
 8005298:	e10e      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800529a:	4b8d      	ldr	r3, [pc, #564]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800529c:	61bb      	str	r3, [r7, #24]
      break;
 800529e:	e10b      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80052a0:	4b8c      	ldr	r3, [pc, #560]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80052a2:	61bb      	str	r3, [r7, #24]
      break;
 80052a4:	e108      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052a6:	4b88      	ldr	r3, [pc, #544]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80052b0:	4b85      	ldr	r3, [pc, #532]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052bc:	4b82      	ldr	r3, [pc, #520]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80052c6:	4b80      	ldr	r3, [pc, #512]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ca:	08db      	lsrs	r3, r3, #3
 80052cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	fb02 f303 	mul.w	r3, r2, r3
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 80e1 	beq.w	80054ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	f000 8083 	beq.w	80053f8 <HAL_RCC_GetSysClockFreq+0x204>
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	f200 80a1 	bhi.w	800543c <HAL_RCC_GetSysClockFreq+0x248>
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <HAL_RCC_GetSysClockFreq+0x114>
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d056      	beq.n	80053b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005306:	e099      	b.n	800543c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005308:	4b6f      	ldr	r3, [pc, #444]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b00      	cmp	r3, #0
 8005312:	d02d      	beq.n	8005370 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005314:	4b6c      	ldr	r3, [pc, #432]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	08db      	lsrs	r3, r3, #3
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	4a6b      	ldr	r2, [pc, #428]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
 8005324:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	ee07 3a90 	vmov	s15, r3
 800532c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533e:	4b62      	ldr	r3, [pc, #392]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800534e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005352:	eddf 5a61 	vldr	s11, [pc, #388]	; 80054d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800535e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800536e:	e087      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80054dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800537e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005382:	4b51      	ldr	r3, [pc, #324]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005392:	ed97 6a02 	vldr	s12, [r7, #8]
 8005396:	eddf 5a50 	vldr	s11, [pc, #320]	; 80054d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800539a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053b2:	e065      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80054e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c6:	4b40      	ldr	r3, [pc, #256]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80053da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80054d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053f6:	e043      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005402:	eddf 6a38 	vldr	s13, [pc, #224]	; 80054e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540a:	4b2f      	ldr	r3, [pc, #188]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800541a:	ed97 6a02 	vldr	s12, [r7, #8]
 800541e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80054d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800542a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800542e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800543a:	e021      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005446:	eddf 6a26 	vldr	s13, [pc, #152]	; 80054e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800544a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544e:	4b1e      	ldr	r3, [pc, #120]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005462:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80054d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800546a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800547a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800547e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005480:	4b11      	ldr	r3, [pc, #68]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005484:	0a5b      	lsrs	r3, r3, #9
 8005486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800548a:	3301      	adds	r3, #1
 800548c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	ee07 3a90 	vmov	s15, r3
 8005494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005498:	edd7 6a07 	vldr	s13, [r7, #28]
 800549c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054a4:	ee17 3a90 	vmov	r3, s15
 80054a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80054aa:	e005      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	61bb      	str	r3, [r7, #24]
      break;
 80054b0:	e002      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80054b2:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054b4:	61bb      	str	r3, [r7, #24]
      break;
 80054b6:	bf00      	nop
  }

  return sysclockfreq;
 80054b8:	69bb      	ldr	r3, [r7, #24]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3724      	adds	r7, #36	; 0x24
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	58024400 	.word	0x58024400
 80054cc:	03d09000 	.word	0x03d09000
 80054d0:	003d0900 	.word	0x003d0900
 80054d4:	007a1200 	.word	0x007a1200
 80054d8:	46000000 	.word	0x46000000
 80054dc:	4c742400 	.word	0x4c742400
 80054e0:	4a742400 	.word	0x4a742400
 80054e4:	4af42400 	.word	0x4af42400

080054e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80054ee:	f7ff fe81 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
 80054f2:	4602      	mov	r2, r0
 80054f4:	4b10      	ldr	r3, [pc, #64]	; (8005538 <HAL_RCC_GetHCLKFreq+0x50>)
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	0a1b      	lsrs	r3, r3, #8
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	490f      	ldr	r1, [pc, #60]	; (800553c <HAL_RCC_GetHCLKFreq+0x54>)
 8005500:	5ccb      	ldrb	r3, [r1, r3]
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	fa22 f303 	lsr.w	r3, r2, r3
 800550a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800550c:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <HAL_RCC_GetHCLKFreq+0x50>)
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f003 030f 	and.w	r3, r3, #15
 8005514:	4a09      	ldr	r2, [pc, #36]	; (800553c <HAL_RCC_GetHCLKFreq+0x54>)
 8005516:	5cd3      	ldrb	r3, [r2, r3]
 8005518:	f003 031f 	and.w	r3, r3, #31
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	fa22 f303 	lsr.w	r3, r2, r3
 8005522:	4a07      	ldr	r2, [pc, #28]	; (8005540 <HAL_RCC_GetHCLKFreq+0x58>)
 8005524:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005526:	4a07      	ldr	r2, [pc, #28]	; (8005544 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800552c:	4b04      	ldr	r3, [pc, #16]	; (8005540 <HAL_RCC_GetHCLKFreq+0x58>)
 800552e:	681b      	ldr	r3, [r3, #0]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	58024400 	.word	0x58024400
 800553c:	0800b044 	.word	0x0800b044
 8005540:	2400000c 	.word	0x2400000c
 8005544:	24000008 	.word	0x24000008

08005548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800554c:	f7ff ffcc 	bl	80054e8 <HAL_RCC_GetHCLKFreq>
 8005550:	4602      	mov	r2, r0
 8005552:	4b06      	ldr	r3, [pc, #24]	; (800556c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	091b      	lsrs	r3, r3, #4
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	4904      	ldr	r1, [pc, #16]	; (8005570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800555e:	5ccb      	ldrb	r3, [r1, r3]
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005568:	4618      	mov	r0, r3
 800556a:	bd80      	pop	{r7, pc}
 800556c:	58024400 	.word	0x58024400
 8005570:	0800b044 	.word	0x0800b044

08005574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005578:	f7ff ffb6 	bl	80054e8 <HAL_RCC_GetHCLKFreq>
 800557c:	4602      	mov	r2, r0
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	0a1b      	lsrs	r3, r3, #8
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	4904      	ldr	r1, [pc, #16]	; (800559c <HAL_RCC_GetPCLK2Freq+0x28>)
 800558a:	5ccb      	ldrb	r3, [r1, r3]
 800558c:	f003 031f 	and.w	r3, r3, #31
 8005590:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005594:	4618      	mov	r0, r3
 8005596:	bd80      	pop	{r7, pc}
 8005598:	58024400 	.word	0x58024400
 800559c:	0800b044 	.word	0x0800b044

080055a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055a4:	b0c8      	sub	sp, #288	; 0x120
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055b2:	2300      	movs	r3, #0
 80055b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80055c4:	2500      	movs	r5, #0
 80055c6:	ea54 0305 	orrs.w	r3, r4, r5
 80055ca:	d049      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80055cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055d6:	d02f      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80055d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055dc:	d828      	bhi.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055e2:	d01a      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80055e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055e8:	d822      	bhi.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80055ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055f2:	d007      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055f4:	e01c      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055f6:	4ba7      	ldr	r3, [pc, #668]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	4aa6      	ldr	r2, [pc, #664]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005600:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005602:	e01a      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005608:	3308      	adds	r3, #8
 800560a:	2102      	movs	r1, #2
 800560c:	4618      	mov	r0, r3
 800560e:	f001 fc43 	bl	8006e98 <RCCEx_PLL2_Config>
 8005612:	4603      	mov	r3, r0
 8005614:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005618:	e00f      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800561a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800561e:	3328      	adds	r3, #40	; 0x28
 8005620:	2102      	movs	r1, #2
 8005622:	4618      	mov	r0, r3
 8005624:	f001 fcea 	bl	8006ffc <RCCEx_PLL3_Config>
 8005628:	4603      	mov	r3, r0
 800562a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800562e:	e004      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005636:	e000      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800563a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005642:	4b94      	ldr	r3, [pc, #592]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005646:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800564a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800564e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005650:	4a90      	ldr	r2, [pc, #576]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005652:	430b      	orrs	r3, r1
 8005654:	6513      	str	r3, [r2, #80]	; 0x50
 8005656:	e003      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005658:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800565c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005668:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800566c:	f04f 0900 	mov.w	r9, #0
 8005670:	ea58 0309 	orrs.w	r3, r8, r9
 8005674:	d047      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567c:	2b04      	cmp	r3, #4
 800567e:	d82a      	bhi.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005680:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	0800569d 	.word	0x0800569d
 800568c:	080056ab 	.word	0x080056ab
 8005690:	080056c1 	.word	0x080056c1
 8005694:	080056df 	.word	0x080056df
 8005698:	080056df 	.word	0x080056df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800569c:	4b7d      	ldr	r3, [pc, #500]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	4a7c      	ldr	r2, [pc, #496]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056a8:	e01a      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ae:	3308      	adds	r3, #8
 80056b0:	2100      	movs	r1, #0
 80056b2:	4618      	mov	r0, r3
 80056b4:	f001 fbf0 	bl	8006e98 <RCCEx_PLL2_Config>
 80056b8:	4603      	mov	r3, r0
 80056ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056be:	e00f      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056c4:	3328      	adds	r3, #40	; 0x28
 80056c6:	2100      	movs	r1, #0
 80056c8:	4618      	mov	r0, r3
 80056ca:	f001 fc97 	bl	8006ffc <RCCEx_PLL3_Config>
 80056ce:	4603      	mov	r3, r0
 80056d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056d4:	e004      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80056dc:	e000      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80056de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056e8:	4b6a      	ldr	r3, [pc, #424]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ec:	f023 0107 	bic.w	r1, r3, #7
 80056f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f6:	4a67      	ldr	r2, [pc, #412]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056f8:	430b      	orrs	r3, r1
 80056fa:	6513      	str	r3, [r2, #80]	; 0x50
 80056fc:	e003      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005702:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005712:	f04f 0b00 	mov.w	fp, #0
 8005716:	ea5a 030b 	orrs.w	r3, sl, fp
 800571a:	d054      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800571c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005722:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005726:	d036      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005728:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800572c:	d82f      	bhi.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800572e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005732:	d032      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005738:	d829      	bhi.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800573a:	2bc0      	cmp	r3, #192	; 0xc0
 800573c:	d02f      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800573e:	2bc0      	cmp	r3, #192	; 0xc0
 8005740:	d825      	bhi.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d018      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005746:	2b80      	cmp	r3, #128	; 0x80
 8005748:	d821      	bhi.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800574e:	2b40      	cmp	r3, #64	; 0x40
 8005750:	d007      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005752:	e01c      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005754:	4b4f      	ldr	r3, [pc, #316]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005758:	4a4e      	ldr	r2, [pc, #312]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800575a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800575e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005760:	e01e      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005766:	3308      	adds	r3, #8
 8005768:	2100      	movs	r1, #0
 800576a:	4618      	mov	r0, r3
 800576c:	f001 fb94 	bl	8006e98 <RCCEx_PLL2_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005776:	e013      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800577c:	3328      	adds	r3, #40	; 0x28
 800577e:	2100      	movs	r1, #0
 8005780:	4618      	mov	r0, r3
 8005782:	f001 fc3b 	bl	8006ffc <RCCEx_PLL3_Config>
 8005786:	4603      	mov	r3, r0
 8005788:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800578c:	e008      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005794:	e004      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005796:	bf00      	nop
 8005798:	e002      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800579a:	bf00      	nop
 800579c:	e000      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800579e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10a      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80057a8:	4b3a      	ldr	r3, [pc, #232]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ac:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80057b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b6:	4a37      	ldr	r2, [pc, #220]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057b8:	430b      	orrs	r3, r1
 80057ba:	6513      	str	r3, [r2, #80]	; 0x50
 80057bc:	e003      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80057c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80057c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80057d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057d6:	2300      	movs	r3, #0
 80057d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057dc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80057e0:	460b      	mov	r3, r1
 80057e2:	4313      	orrs	r3, r2
 80057e4:	d05c      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80057e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ec:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80057f0:	d03b      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80057f2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80057f6:	d834      	bhi.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80057f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fc:	d037      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80057fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005802:	d82e      	bhi.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005804:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005808:	d033      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800580a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800580e:	d828      	bhi.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005814:	d01a      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800581a:	d822      	bhi.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005824:	d007      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005826:	e01c      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005828:	4b1a      	ldr	r3, [pc, #104]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	4a19      	ldr	r2, [pc, #100]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800582e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005834:	e01e      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800583a:	3308      	adds	r3, #8
 800583c:	2100      	movs	r1, #0
 800583e:	4618      	mov	r0, r3
 8005840:	f001 fb2a 	bl	8006e98 <RCCEx_PLL2_Config>
 8005844:	4603      	mov	r3, r0
 8005846:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800584a:	e013      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800584c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005850:	3328      	adds	r3, #40	; 0x28
 8005852:	2100      	movs	r1, #0
 8005854:	4618      	mov	r0, r3
 8005856:	f001 fbd1 	bl	8006ffc <RCCEx_PLL3_Config>
 800585a:	4603      	mov	r3, r0
 800585c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005860:	e008      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005868:	e004      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800586a:	bf00      	nop
 800586c:	e002      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800586e:	bf00      	nop
 8005870:	e000      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005874:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10d      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800587c:	4b05      	ldr	r3, [pc, #20]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800587e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005880:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588a:	4a02      	ldr	r2, [pc, #8]	; (8005894 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800588c:	430b      	orrs	r3, r1
 800588e:	6513      	str	r3, [r2, #80]	; 0x50
 8005890:	e006      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005892:	bf00      	nop
 8005894:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005898:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800589c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80058a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80058ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80058b0:	2300      	movs	r3, #0
 80058b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80058ba:	460b      	mov	r3, r1
 80058bc:	4313      	orrs	r3, r2
 80058be:	d03a      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80058c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c6:	2b30      	cmp	r3, #48	; 0x30
 80058c8:	d01f      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80058ca:	2b30      	cmp	r3, #48	; 0x30
 80058cc:	d819      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80058ce:	2b20      	cmp	r3, #32
 80058d0:	d00c      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80058d2:	2b20      	cmp	r3, #32
 80058d4:	d815      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d019      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80058da:	2b10      	cmp	r3, #16
 80058dc:	d111      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058de:	4bae      	ldr	r3, [pc, #696]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	4aad      	ldr	r2, [pc, #692]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80058ea:	e011      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058f0:	3308      	adds	r3, #8
 80058f2:	2102      	movs	r1, #2
 80058f4:	4618      	mov	r0, r3
 80058f6:	f001 facf 	bl	8006e98 <RCCEx_PLL2_Config>
 80058fa:	4603      	mov	r3, r0
 80058fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005900:	e006      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005908:	e002      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800590a:	bf00      	nop
 800590c:	e000      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800590e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005910:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005918:	4b9f      	ldr	r3, [pc, #636]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800591a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005926:	4a9c      	ldr	r2, [pc, #624]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005928:	430b      	orrs	r3, r1
 800592a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800592c:	e003      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005932:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005942:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005946:	2300      	movs	r3, #0
 8005948:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800594c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005950:	460b      	mov	r3, r1
 8005952:	4313      	orrs	r3, r2
 8005954:	d051      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005956:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800595a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800595c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005960:	d035      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005962:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005966:	d82e      	bhi.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005968:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800596c:	d031      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800596e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005972:	d828      	bhi.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005978:	d01a      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800597a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800597e:	d822      	bhi.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005988:	d007      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800598a:	e01c      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800598c:	4b82      	ldr	r3, [pc, #520]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	4a81      	ldr	r2, [pc, #516]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005996:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005998:	e01c      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800599a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800599e:	3308      	adds	r3, #8
 80059a0:	2100      	movs	r1, #0
 80059a2:	4618      	mov	r0, r3
 80059a4:	f001 fa78 	bl	8006e98 <RCCEx_PLL2_Config>
 80059a8:	4603      	mov	r3, r0
 80059aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059ae:	e011      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b4:	3328      	adds	r3, #40	; 0x28
 80059b6:	2100      	movs	r1, #0
 80059b8:	4618      	mov	r0, r3
 80059ba:	f001 fb1f 	bl	8006ffc <RCCEx_PLL3_Config>
 80059be:	4603      	mov	r3, r0
 80059c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059c4:	e006      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80059cc:	e002      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80059ce:	bf00      	nop
 80059d0:	e000      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80059d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80059dc:	4b6e      	ldr	r3, [pc, #440]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80059e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ea:	4a6b      	ldr	r2, [pc, #428]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059ec:	430b      	orrs	r3, r1
 80059ee:	6513      	str	r3, [r2, #80]	; 0x50
 80059f0:	e003      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059f6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a02:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005a06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005a14:	460b      	mov	r3, r1
 8005a16:	4313      	orrs	r3, r2
 8005a18:	d053      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a24:	d033      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005a26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a2a:	d82c      	bhi.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005a2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a30:	d02f      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005a32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a36:	d826      	bhi.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005a38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a3c:	d02b      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005a3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a42:	d820      	bhi.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a48:	d012      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005a4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a4e:	d81a      	bhi.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d022      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a58:	d115      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a5e:	3308      	adds	r3, #8
 8005a60:	2101      	movs	r1, #1
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 fa18 	bl	8006e98 <RCCEx_PLL2_Config>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a6e:	e015      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a74:	3328      	adds	r3, #40	; 0x28
 8005a76:	2101      	movs	r1, #1
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f001 fabf 	bl	8006ffc <RCCEx_PLL3_Config>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a84:	e00a      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005a8c:	e006      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a8e:	bf00      	nop
 8005a90:	e004      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a92:	bf00      	nop
 8005a94:	e002      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a96:	bf00      	nop
 8005a98:	e000      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10a      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005aa4:	4b3c      	ldr	r3, [pc, #240]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ab2:	4a39      	ldr	r2, [pc, #228]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	6513      	str	r3, [r2, #80]	; 0x50
 8005ab8:	e003      	b.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005abe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005ace:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ad8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	d060      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ae6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005aea:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005aee:	d039      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005af0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005af4:	d832      	bhi.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005afa:	d035      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b00:	d82c      	bhi.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b06:	d031      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0c:	d826      	bhi.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005b0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b12:	d02d      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005b14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b18:	d820      	bhi.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b1e:	d012      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b24:	d81a      	bhi.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d024      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005b2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b2e:	d115      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b34:	3308      	adds	r3, #8
 8005b36:	2101      	movs	r1, #1
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f001 f9ad 	bl	8006e98 <RCCEx_PLL2_Config>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b44:	e017      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b4a:	3328      	adds	r3, #40	; 0x28
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f001 fa54 	bl	8006ffc <RCCEx_PLL3_Config>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b5a:	e00c      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005b62:	e008      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b64:	bf00      	nop
 8005b66:	e006      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b68:	bf00      	nop
 8005b6a:	e004      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b6c:	bf00      	nop
 8005b6e:	e002      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b70:	bf00      	nop
 8005b72:	e000      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10e      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b7e:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b82:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b8e:	4a02      	ldr	r2, [pc, #8]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b90:	430b      	orrs	r3, r1
 8005b92:	6593      	str	r3, [r2, #88]	; 0x58
 8005b94:	e006      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005b96:	bf00      	nop
 8005b98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ba0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bac:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005bb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005bba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	d037      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bce:	d00e      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bd4:	d816      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d018      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bde:	d111      	bne.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be0:	4bc4      	ldr	r3, [pc, #784]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	4ac3      	ldr	r2, [pc, #780]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005bec:	e00f      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 f94e 	bl	8006e98 <RCCEx_PLL2_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c02:	e004      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005c0a:	e000      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10a      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c16:	4bb7      	ldr	r3, [pc, #732]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c1a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c24:	4ab3      	ldr	r2, [pc, #716]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c26:	430b      	orrs	r3, r1
 8005c28:	6513      	str	r3, [r2, #80]	; 0x50
 8005c2a:	e003      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c30:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005c40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c44:	2300      	movs	r3, #0
 8005c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4313      	orrs	r3, r2
 8005c52:	d039      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d81c      	bhi.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005c5e:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c64:	08005ca1 	.word	0x08005ca1
 8005c68:	08005c75 	.word	0x08005c75
 8005c6c:	08005c83 	.word	0x08005c83
 8005c70:	08005ca1 	.word	0x08005ca1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c74:	4b9f      	ldr	r3, [pc, #636]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	4a9e      	ldr	r2, [pc, #632]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c80:	e00f      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c86:	3308      	adds	r3, #8
 8005c88:	2102      	movs	r1, #2
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f001 f904 	bl	8006e98 <RCCEx_PLL2_Config>
 8005c90:	4603      	mov	r3, r0
 8005c92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c96:	e004      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005c9e:	e000      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ca2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10a      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005caa:	4b92      	ldr	r3, [pc, #584]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cae:	f023 0103 	bic.w	r1, r3, #3
 8005cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb8:	4a8e      	ldr	r2, [pc, #568]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cba:	430b      	orrs	r3, r1
 8005cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cbe:	e003      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cc4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cde:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	f000 8099 	beq.w	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cea:	4b83      	ldr	r3, [pc, #524]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a82      	ldr	r2, [pc, #520]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cf6:	f7fb fe7f 	bl	80019f8 <HAL_GetTick>
 8005cfa:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cfe:	e00b      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d00:	f7fb fe7a 	bl	80019f8 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b64      	cmp	r3, #100	; 0x64
 8005d0e:	d903      	bls.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d16:	e005      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d18:	4b77      	ldr	r3, [pc, #476]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0ed      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005d24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d173      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d2c:	4b71      	ldr	r3, [pc, #452]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d38:	4053      	eors	r3, r2
 8005d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d015      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d42:	4b6c      	ldr	r3, [pc, #432]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d4e:	4b69      	ldr	r3, [pc, #420]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d52:	4a68      	ldr	r2, [pc, #416]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d58:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d5a:	4b66      	ldr	r3, [pc, #408]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5e:	4a65      	ldr	r2, [pc, #404]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d64:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d66:	4a63      	ldr	r2, [pc, #396]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d6c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7a:	d118      	bne.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7c:	f7fb fe3c 	bl	80019f8 <HAL_GetTick>
 8005d80:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d84:	e00d      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d86:	f7fb fe37 	bl	80019f8 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d90:	1ad2      	subs	r2, r2, r3
 8005d92:	f241 3388 	movw	r3, #5000	; 0x1388
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d903      	bls.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8005da0:	e005      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005da2:	4b54      	ldr	r3, [pc, #336]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0eb      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005dae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d129      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc6:	d10e      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005dc8:	4b4a      	ldr	r3, [pc, #296]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005dd8:	091a      	lsrs	r2, r3, #4
 8005dda:	4b48      	ldr	r3, [pc, #288]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	4a45      	ldr	r2, [pc, #276]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005de0:	430b      	orrs	r3, r1
 8005de2:	6113      	str	r3, [r2, #16]
 8005de4:	e005      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005de6:	4b43      	ldr	r3, [pc, #268]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	4a42      	ldr	r2, [pc, #264]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005df0:	6113      	str	r3, [r2, #16]
 8005df2:	4b40      	ldr	r3, [pc, #256]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005df4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e02:	4a3c      	ldr	r2, [pc, #240]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e04:	430b      	orrs	r3, r1
 8005e06:	6713      	str	r3, [r2, #112]	; 0x70
 8005e08:	e008      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e0e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005e12:	e003      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e24:	f002 0301 	and.w	r3, r2, #1
 8005e28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e32:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	f000 8090 	beq.w	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e46:	2b28      	cmp	r3, #40	; 0x28
 8005e48:	d870      	bhi.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005e4a:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e50:	08005f35 	.word	0x08005f35
 8005e54:	08005f2d 	.word	0x08005f2d
 8005e58:	08005f2d 	.word	0x08005f2d
 8005e5c:	08005f2d 	.word	0x08005f2d
 8005e60:	08005f2d 	.word	0x08005f2d
 8005e64:	08005f2d 	.word	0x08005f2d
 8005e68:	08005f2d 	.word	0x08005f2d
 8005e6c:	08005f2d 	.word	0x08005f2d
 8005e70:	08005f01 	.word	0x08005f01
 8005e74:	08005f2d 	.word	0x08005f2d
 8005e78:	08005f2d 	.word	0x08005f2d
 8005e7c:	08005f2d 	.word	0x08005f2d
 8005e80:	08005f2d 	.word	0x08005f2d
 8005e84:	08005f2d 	.word	0x08005f2d
 8005e88:	08005f2d 	.word	0x08005f2d
 8005e8c:	08005f2d 	.word	0x08005f2d
 8005e90:	08005f17 	.word	0x08005f17
 8005e94:	08005f2d 	.word	0x08005f2d
 8005e98:	08005f2d 	.word	0x08005f2d
 8005e9c:	08005f2d 	.word	0x08005f2d
 8005ea0:	08005f2d 	.word	0x08005f2d
 8005ea4:	08005f2d 	.word	0x08005f2d
 8005ea8:	08005f2d 	.word	0x08005f2d
 8005eac:	08005f2d 	.word	0x08005f2d
 8005eb0:	08005f35 	.word	0x08005f35
 8005eb4:	08005f2d 	.word	0x08005f2d
 8005eb8:	08005f2d 	.word	0x08005f2d
 8005ebc:	08005f2d 	.word	0x08005f2d
 8005ec0:	08005f2d 	.word	0x08005f2d
 8005ec4:	08005f2d 	.word	0x08005f2d
 8005ec8:	08005f2d 	.word	0x08005f2d
 8005ecc:	08005f2d 	.word	0x08005f2d
 8005ed0:	08005f35 	.word	0x08005f35
 8005ed4:	08005f2d 	.word	0x08005f2d
 8005ed8:	08005f2d 	.word	0x08005f2d
 8005edc:	08005f2d 	.word	0x08005f2d
 8005ee0:	08005f2d 	.word	0x08005f2d
 8005ee4:	08005f2d 	.word	0x08005f2d
 8005ee8:	08005f2d 	.word	0x08005f2d
 8005eec:	08005f2d 	.word	0x08005f2d
 8005ef0:	08005f35 	.word	0x08005f35
 8005ef4:	58024400 	.word	0x58024400
 8005ef8:	58024800 	.word	0x58024800
 8005efc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f04:	3308      	adds	r3, #8
 8005f06:	2101      	movs	r1, #1
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 ffc5 	bl	8006e98 <RCCEx_PLL2_Config>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f14:	e00f      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f1a:	3328      	adds	r3, #40	; 0x28
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f001 f86c 	bl	8006ffc <RCCEx_PLL3_Config>
 8005f24:	4603      	mov	r3, r0
 8005f26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f2a:	e004      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005f32:	e000      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10b      	bne.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f3e:	4bc0      	ldr	r3, [pc, #768]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f42:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f4e:	4abc      	ldr	r2, [pc, #752]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005f50:	430b      	orrs	r3, r1
 8005f52:	6553      	str	r3, [r2, #84]	; 0x54
 8005f54:	e003      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f5a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	f002 0302 	and.w	r3, r2, #2
 8005f6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f74:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	d043      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f86:	2b05      	cmp	r3, #5
 8005f88:	d824      	bhi.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005f8a:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fdd 	.word	0x08005fdd
 8005f94:	08005fa9 	.word	0x08005fa9
 8005f98:	08005fbf 	.word	0x08005fbf
 8005f9c:	08005fdd 	.word	0x08005fdd
 8005fa0:	08005fdd 	.word	0x08005fdd
 8005fa4:	08005fdd 	.word	0x08005fdd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fac:	3308      	adds	r3, #8
 8005fae:	2101      	movs	r1, #1
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 ff71 	bl	8006e98 <RCCEx_PLL2_Config>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005fbc:	e00f      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fc2:	3328      	adds	r3, #40	; 0x28
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f001 f818 	bl	8006ffc <RCCEx_PLL3_Config>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005fd2:	e004      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005fda:	e000      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10b      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005fe6:	4b96      	ldr	r3, [pc, #600]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fea:	f023 0107 	bic.w	r1, r3, #7
 8005fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ff6:	4a92      	ldr	r2, [pc, #584]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005ff8:	430b      	orrs	r3, r1
 8005ffa:	6553      	str	r3, [r2, #84]	; 0x54
 8005ffc:	e003      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ffe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006002:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600e:	f002 0304 	and.w	r3, r2, #4
 8006012:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006016:	2300      	movs	r3, #0
 8006018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800601c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006020:	460b      	mov	r3, r1
 8006022:	4313      	orrs	r3, r2
 8006024:	d043      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800602a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800602e:	2b05      	cmp	r3, #5
 8006030:	d824      	bhi.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006032:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006038:	08006085 	.word	0x08006085
 800603c:	08006051 	.word	0x08006051
 8006040:	08006067 	.word	0x08006067
 8006044:	08006085 	.word	0x08006085
 8006048:	08006085 	.word	0x08006085
 800604c:	08006085 	.word	0x08006085
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006054:	3308      	adds	r3, #8
 8006056:	2101      	movs	r1, #1
 8006058:	4618      	mov	r0, r3
 800605a:	f000 ff1d 	bl	8006e98 <RCCEx_PLL2_Config>
 800605e:	4603      	mov	r3, r0
 8006060:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006064:	e00f      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800606a:	3328      	adds	r3, #40	; 0x28
 800606c:	2101      	movs	r1, #1
 800606e:	4618      	mov	r0, r3
 8006070:	f000 ffc4 	bl	8006ffc <RCCEx_PLL3_Config>
 8006074:	4603      	mov	r3, r0
 8006076:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800607a:	e004      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006082:	e000      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006086:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10b      	bne.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800608e:	4b6c      	ldr	r3, [pc, #432]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006092:	f023 0107 	bic.w	r1, r3, #7
 8006096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800609a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800609e:	4a68      	ldr	r2, [pc, #416]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80060a0:	430b      	orrs	r3, r1
 80060a2:	6593      	str	r3, [r2, #88]	; 0x58
 80060a4:	e003      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80060aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	f002 0320 	and.w	r3, r2, #32
 80060ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060be:	2300      	movs	r3, #0
 80060c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80060c8:	460b      	mov	r3, r1
 80060ca:	4313      	orrs	r3, r2
 80060cc:	d055      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80060ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060da:	d033      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80060dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060e0:	d82c      	bhi.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80060e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e6:	d02f      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80060e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ec:	d826      	bhi.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80060ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060f2:	d02b      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80060f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060f8:	d820      	bhi.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80060fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060fe:	d012      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006104:	d81a      	bhi.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d022      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800610a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800610e:	d115      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006110:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006114:	3308      	adds	r3, #8
 8006116:	2100      	movs	r1, #0
 8006118:	4618      	mov	r0, r3
 800611a:	f000 febd 	bl	8006e98 <RCCEx_PLL2_Config>
 800611e:	4603      	mov	r3, r0
 8006120:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006124:	e015      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800612a:	3328      	adds	r3, #40	; 0x28
 800612c:	2102      	movs	r1, #2
 800612e:	4618      	mov	r0, r3
 8006130:	f000 ff64 	bl	8006ffc <RCCEx_PLL3_Config>
 8006134:	4603      	mov	r3, r0
 8006136:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800613a:	e00a      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006142:	e006      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006144:	bf00      	nop
 8006146:	e004      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006148:	bf00      	nop
 800614a:	e002      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800614c:	bf00      	nop
 800614e:	e000      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006152:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10b      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800615a:	4b39      	ldr	r3, [pc, #228]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800615c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006162:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006166:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800616a:	4a35      	ldr	r2, [pc, #212]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800616c:	430b      	orrs	r3, r1
 800616e:	6553      	str	r3, [r2, #84]	; 0x54
 8006170:	e003      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006172:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006176:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800617a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800618a:	2300      	movs	r3, #0
 800618c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006190:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006194:	460b      	mov	r3, r1
 8006196:	4313      	orrs	r3, r2
 8006198:	d058      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800619a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800619e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061a6:	d033      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80061a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061ac:	d82c      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80061ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b2:	d02f      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80061b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b8:	d826      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80061ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061be:	d02b      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80061c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061c4:	d820      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80061c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ca:	d012      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80061cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d0:	d81a      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d022      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80061d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061da:	d115      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e0:	3308      	adds	r3, #8
 80061e2:	2100      	movs	r1, #0
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 fe57 	bl	8006e98 <RCCEx_PLL2_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80061f0:	e015      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061f6:	3328      	adds	r3, #40	; 0x28
 80061f8:	2102      	movs	r1, #2
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fefe 	bl	8006ffc <RCCEx_PLL3_Config>
 8006200:	4603      	mov	r3, r0
 8006202:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006206:	e00a      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800620e:	e006      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006210:	bf00      	nop
 8006212:	e004      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006214:	bf00      	nop
 8006216:	e002      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006218:	bf00      	nop
 800621a:	e000      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800621c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800621e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10e      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006226:	4b06      	ldr	r3, [pc, #24]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800622e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006232:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006236:	4a02      	ldr	r2, [pc, #8]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006238:	430b      	orrs	r3, r1
 800623a:	6593      	str	r3, [r2, #88]	; 0x58
 800623c:	e006      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800623e:	bf00      	nop
 8006240:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006244:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006248:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800624c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800625c:	2300      	movs	r3, #0
 800625e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006262:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006266:	460b      	mov	r3, r1
 8006268:	4313      	orrs	r3, r2
 800626a:	d055      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800626c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006270:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006274:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006278:	d033      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800627a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800627e:	d82c      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006284:	d02f      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800628a:	d826      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800628c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006290:	d02b      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006292:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006296:	d820      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800629c:	d012      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800629e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062a2:	d81a      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d022      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80062a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ac:	d115      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062b2:	3308      	adds	r3, #8
 80062b4:	2100      	movs	r1, #0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 fdee 	bl	8006e98 <RCCEx_PLL2_Config>
 80062bc:	4603      	mov	r3, r0
 80062be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062c2:	e015      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062c8:	3328      	adds	r3, #40	; 0x28
 80062ca:	2102      	movs	r1, #2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fe95 	bl	8006ffc <RCCEx_PLL3_Config>
 80062d2:	4603      	mov	r3, r0
 80062d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062d8:	e00a      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80062e0:	e006      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80062e2:	bf00      	nop
 80062e4:	e004      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80062e6:	bf00      	nop
 80062e8:	e002      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80062ea:	bf00      	nop
 80062ec:	e000      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80062ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10b      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062f8:	4ba1      	ldr	r3, [pc, #644]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006304:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006308:	4a9d      	ldr	r2, [pc, #628]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800630a:	430b      	orrs	r3, r1
 800630c:	6593      	str	r3, [r2, #88]	; 0x58
 800630e:	e003      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006310:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006314:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f002 0308 	and.w	r3, r2, #8
 8006324:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006328:	2300      	movs	r3, #0
 800632a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800632e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006332:	460b      	mov	r3, r1
 8006334:	4313      	orrs	r3, r2
 8006336:	d01e      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800633c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006344:	d10c      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800634a:	3328      	adds	r3, #40	; 0x28
 800634c:	2102      	movs	r1, #2
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fe54 	bl	8006ffc <RCCEx_PLL3_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006360:	4b87      	ldr	r3, [pc, #540]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006364:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800636c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006370:	4a83      	ldr	r2, [pc, #524]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006372:	430b      	orrs	r3, r1
 8006374:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	f002 0310 	and.w	r3, r2, #16
 8006382:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006386:	2300      	movs	r3, #0
 8006388:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800638c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006390:	460b      	mov	r3, r1
 8006392:	4313      	orrs	r3, r2
 8006394:	d01e      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006396:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800639a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800639e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a2:	d10c      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063a8:	3328      	adds	r3, #40	; 0x28
 80063aa:	2102      	movs	r1, #2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 fe25 	bl	8006ffc <RCCEx_PLL3_Config>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063be:	4b70      	ldr	r3, [pc, #448]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063ce:	4a6c      	ldr	r2, [pc, #432]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80063d0:	430b      	orrs	r3, r1
 80063d2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80063e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063e4:	2300      	movs	r3, #0
 80063e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80063ee:	460b      	mov	r3, r1
 80063f0:	4313      	orrs	r3, r2
 80063f2:	d03e      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80063f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80063fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006400:	d022      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006402:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006406:	d81b      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800640c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006410:	d00b      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006412:	e015      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006418:	3308      	adds	r3, #8
 800641a:	2100      	movs	r1, #0
 800641c:	4618      	mov	r0, r3
 800641e:	f000 fd3b 	bl	8006e98 <RCCEx_PLL2_Config>
 8006422:	4603      	mov	r3, r0
 8006424:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006428:	e00f      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800642a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800642e:	3328      	adds	r3, #40	; 0x28
 8006430:	2102      	movs	r1, #2
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fde2 	bl	8006ffc <RCCEx_PLL3_Config>
 8006438:	4603      	mov	r3, r0
 800643a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800643e:	e004      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006446:	e000      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800644a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10b      	bne.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006452:	4b4b      	ldr	r3, [pc, #300]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006456:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800645a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800645e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006462:	4a47      	ldr	r2, [pc, #284]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006464:	430b      	orrs	r3, r1
 8006466:	6593      	str	r3, [r2, #88]	; 0x58
 8006468:	e003      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800646a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800646e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800647e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006480:	2300      	movs	r3, #0
 8006482:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006484:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006488:	460b      	mov	r3, r1
 800648a:	4313      	orrs	r3, r2
 800648c:	d03b      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800648e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006496:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800649a:	d01f      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800649c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80064a0:	d818      	bhi.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80064a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064a6:	d003      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80064a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064ac:	d007      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80064ae:	e011      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064b0:	4b33      	ldr	r3, [pc, #204]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	4a32      	ldr	r2, [pc, #200]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80064bc:	e00f      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064c2:	3328      	adds	r3, #40	; 0x28
 80064c4:	2101      	movs	r1, #1
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fd98 	bl	8006ffc <RCCEx_PLL3_Config>
 80064cc:	4603      	mov	r3, r0
 80064ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80064d2:	e004      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80064da:	e000      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80064dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10b      	bne.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064e6:	4b26      	ldr	r3, [pc, #152]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80064ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f6:	4a22      	ldr	r2, [pc, #136]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064f8:	430b      	orrs	r3, r1
 80064fa:	6553      	str	r3, [r2, #84]	; 0x54
 80064fc:	e003      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006502:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006512:	673b      	str	r3, [r7, #112]	; 0x70
 8006514:	2300      	movs	r3, #0
 8006516:	677b      	str	r3, [r7, #116]	; 0x74
 8006518:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800651c:	460b      	mov	r3, r1
 800651e:	4313      	orrs	r3, r2
 8006520:	d034      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006522:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800652c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006530:	d007      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006532:	e011      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006534:	4b12      	ldr	r3, [pc, #72]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	4a11      	ldr	r2, [pc, #68]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800653a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800653e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006540:	e00e      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006546:	3308      	adds	r3, #8
 8006548:	2102      	movs	r1, #2
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fca4 	bl	8006e98 <RCCEx_PLL2_Config>
 8006550:	4603      	mov	r3, r0
 8006552:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006556:	e003      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800655e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006560:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10d      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006568:	4b05      	ldr	r3, [pc, #20]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800656a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006576:	4a02      	ldr	r2, [pc, #8]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006578:	430b      	orrs	r3, r1
 800657a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800657c:	e006      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800657e:	bf00      	nop
 8006580:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006584:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006588:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800658c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006598:	66bb      	str	r3, [r7, #104]	; 0x68
 800659a:	2300      	movs	r3, #0
 800659c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800659e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80065a2:	460b      	mov	r3, r1
 80065a4:	4313      	orrs	r3, r2
 80065a6:	d00c      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ac:	3328      	adds	r3, #40	; 0x28
 80065ae:	2102      	movs	r1, #2
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fd23 	bl	8006ffc <RCCEx_PLL3_Config>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80065ce:	663b      	str	r3, [r7, #96]	; 0x60
 80065d0:	2300      	movs	r3, #0
 80065d2:	667b      	str	r3, [r7, #100]	; 0x64
 80065d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80065d8:	460b      	mov	r3, r1
 80065da:	4313      	orrs	r3, r2
 80065dc:	d038      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80065de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ea:	d018      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80065ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065f0:	d811      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80065f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f6:	d014      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80065f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065fc:	d80b      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d011      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006606:	d106      	bne.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006608:	4bc3      	ldr	r3, [pc, #780]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	4ac2      	ldr	r2, [pc, #776]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800660e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006612:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006614:	e008      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800661c:	e004      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800661e:	bf00      	nop
 8006620:	e002      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006622:	bf00      	nop
 8006624:	e000      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006626:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006628:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10b      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006630:	4bb9      	ldr	r3, [pc, #740]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006634:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800663c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006640:	4ab5      	ldr	r2, [pc, #724]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006642:	430b      	orrs	r3, r1
 8006644:	6553      	str	r3, [r2, #84]	; 0x54
 8006646:	e003      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006648:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800664c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800665c:	65bb      	str	r3, [r7, #88]	; 0x58
 800665e:	2300      	movs	r3, #0
 8006660:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006662:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006666:	460b      	mov	r3, r1
 8006668:	4313      	orrs	r3, r2
 800666a:	d009      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800666c:	4baa      	ldr	r3, [pc, #680]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800666e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006670:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800667a:	4aa7      	ldr	r2, [pc, #668]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800667c:	430b      	orrs	r3, r1
 800667e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006688:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800668c:	653b      	str	r3, [r7, #80]	; 0x50
 800668e:	2300      	movs	r3, #0
 8006690:	657b      	str	r3, [r7, #84]	; 0x54
 8006692:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006696:	460b      	mov	r3, r1
 8006698:	4313      	orrs	r3, r2
 800669a:	d009      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800669c:	4b9e      	ldr	r3, [pc, #632]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800669e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80066a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066aa:	4a9b      	ldr	r2, [pc, #620]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066ac:	430b      	orrs	r3, r1
 80066ae:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80066b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80066bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80066be:	2300      	movs	r3, #0
 80066c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80066c6:	460b      	mov	r3, r1
 80066c8:	4313      	orrs	r3, r2
 80066ca:	d009      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80066cc:	4b92      	ldr	r3, [pc, #584]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d0:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80066d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066da:	4a8f      	ldr	r2, [pc, #572]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066dc:	430b      	orrs	r3, r1
 80066de:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80066e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80066ec:	643b      	str	r3, [r7, #64]	; 0x40
 80066ee:	2300      	movs	r3, #0
 80066f0:	647b      	str	r3, [r7, #68]	; 0x44
 80066f2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80066f6:	460b      	mov	r3, r1
 80066f8:	4313      	orrs	r3, r2
 80066fa:	d00e      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066fc:	4b86      	ldr	r3, [pc, #536]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	4a85      	ldr	r2, [pc, #532]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006702:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006706:	6113      	str	r3, [r2, #16]
 8006708:	4b83      	ldr	r3, [pc, #524]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800670a:	6919      	ldr	r1, [r3, #16]
 800670c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006710:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006714:	4a80      	ldr	r2, [pc, #512]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006716:	430b      	orrs	r3, r1
 8006718:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800671a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006726:	63bb      	str	r3, [r7, #56]	; 0x38
 8006728:	2300      	movs	r3, #0
 800672a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800672c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006730:	460b      	mov	r3, r1
 8006732:	4313      	orrs	r3, r2
 8006734:	d009      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006736:	4b78      	ldr	r3, [pc, #480]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800673a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800673e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006744:	4a74      	ldr	r2, [pc, #464]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006746:	430b      	orrs	r3, r1
 8006748:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800674a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006756:	633b      	str	r3, [r7, #48]	; 0x30
 8006758:	2300      	movs	r3, #0
 800675a:	637b      	str	r3, [r7, #52]	; 0x34
 800675c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006760:	460b      	mov	r3, r1
 8006762:	4313      	orrs	r3, r2
 8006764:	d00a      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006766:	4b6c      	ldr	r3, [pc, #432]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800676e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006776:	4a68      	ldr	r2, [pc, #416]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006778:	430b      	orrs	r3, r1
 800677a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800677c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	2100      	movs	r1, #0
 8006786:	62b9      	str	r1, [r7, #40]	; 0x28
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800678e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006792:	460b      	mov	r3, r1
 8006794:	4313      	orrs	r3, r2
 8006796:	d011      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800679c:	3308      	adds	r3, #8
 800679e:	2100      	movs	r1, #0
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fb79 	bl	8006e98 <RCCEx_PLL2_Config>
 80067a6:	4603      	mov	r3, r0
 80067a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80067ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80067bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c4:	2100      	movs	r1, #0
 80067c6:	6239      	str	r1, [r7, #32]
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	627b      	str	r3, [r7, #36]	; 0x24
 80067ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80067d2:	460b      	mov	r3, r1
 80067d4:	4313      	orrs	r3, r2
 80067d6:	d011      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067dc:	3308      	adds	r3, #8
 80067de:	2101      	movs	r1, #1
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 fb59 	bl	8006e98 <RCCEx_PLL2_Config>
 80067e6:	4603      	mov	r3, r0
 80067e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80067ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80067fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006804:	2100      	movs	r1, #0
 8006806:	61b9      	str	r1, [r7, #24]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	61fb      	str	r3, [r7, #28]
 800680e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006812:	460b      	mov	r3, r1
 8006814:	4313      	orrs	r3, r2
 8006816:	d011      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800681c:	3308      	adds	r3, #8
 800681e:	2102      	movs	r1, #2
 8006820:	4618      	mov	r0, r3
 8006822:	f000 fb39 	bl	8006e98 <RCCEx_PLL2_Config>
 8006826:	4603      	mov	r3, r0
 8006828:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800682c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006834:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006838:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800683c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006844:	2100      	movs	r1, #0
 8006846:	6139      	str	r1, [r7, #16]
 8006848:	f003 0308 	and.w	r3, r3, #8
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006852:	460b      	mov	r3, r1
 8006854:	4313      	orrs	r3, r2
 8006856:	d011      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800685c:	3328      	adds	r3, #40	; 0x28
 800685e:	2100      	movs	r1, #0
 8006860:	4618      	mov	r0, r3
 8006862:	f000 fbcb 	bl	8006ffc <RCCEx_PLL3_Config>
 8006866:	4603      	mov	r3, r0
 8006868:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800686c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006874:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006878:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800687c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	2100      	movs	r1, #0
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	f003 0310 	and.w	r3, r3, #16
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006892:	460b      	mov	r3, r1
 8006894:	4313      	orrs	r3, r2
 8006896:	d011      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800689c:	3328      	adds	r3, #40	; 0x28
 800689e:	2101      	movs	r1, #1
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fbab 	bl	8006ffc <RCCEx_PLL3_Config>
 80068a6:	4603      	mov	r3, r0
 80068a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80068ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80068bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c4:	2100      	movs	r1, #0
 80068c6:	6039      	str	r1, [r7, #0]
 80068c8:	f003 0320 	and.w	r3, r3, #32
 80068cc:	607b      	str	r3, [r7, #4]
 80068ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80068d2:	460b      	mov	r3, r1
 80068d4:	4313      	orrs	r3, r2
 80068d6:	d011      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068dc:	3328      	adds	r3, #40	; 0x28
 80068de:	2102      	movs	r1, #2
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 fb8b 	bl	8006ffc <RCCEx_PLL3_Config>
 80068e6:	4603      	mov	r3, r0
 80068e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80068ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80068fc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	e000      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
}
 800690a:	4618      	mov	r0, r3
 800690c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006910:	46bd      	mov	sp, r7
 8006912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006916:	bf00      	nop
 8006918:	58024400 	.word	0x58024400

0800691c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006920:	f7fe fde2 	bl	80054e8 <HAL_RCC_GetHCLKFreq>
 8006924:	4602      	mov	r2, r0
 8006926:	4b06      	ldr	r3, [pc, #24]	; (8006940 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	091b      	lsrs	r3, r3, #4
 800692c:	f003 0307 	and.w	r3, r3, #7
 8006930:	4904      	ldr	r1, [pc, #16]	; (8006944 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006932:	5ccb      	ldrb	r3, [r1, r3]
 8006934:	f003 031f 	and.w	r3, r3, #31
 8006938:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800693c:	4618      	mov	r0, r3
 800693e:	bd80      	pop	{r7, pc}
 8006940:	58024400 	.word	0x58024400
 8006944:	0800b044 	.word	0x0800b044

08006948 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006948:	b480      	push	{r7}
 800694a:	b089      	sub	sp, #36	; 0x24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006950:	4ba1      	ldr	r3, [pc, #644]	; (8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006954:	f003 0303 	and.w	r3, r3, #3
 8006958:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800695a:	4b9f      	ldr	r3, [pc, #636]	; (8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	0b1b      	lsrs	r3, r3, #12
 8006960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006964:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006966:	4b9c      	ldr	r3, [pc, #624]	; (8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696a:	091b      	lsrs	r3, r3, #4
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006972:	4b99      	ldr	r3, [pc, #612]	; (8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006976:	08db      	lsrs	r3, r3, #3
 8006978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	fb02 f303 	mul.w	r3, r2, r3
 8006982:	ee07 3a90 	vmov	s15, r3
 8006986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 8111 	beq.w	8006bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	2b02      	cmp	r3, #2
 800699a:	f000 8083 	beq.w	8006aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	f200 80a1 	bhi.w	8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d056      	beq.n	8006a60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80069b2:	e099      	b.n	8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069b4:	4b88      	ldr	r3, [pc, #544]	; (8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d02d      	beq.n	8006a1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069c0:	4b85      	ldr	r3, [pc, #532]	; (8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	08db      	lsrs	r3, r3, #3
 80069c6:	f003 0303 	and.w	r3, r3, #3
 80069ca:	4a84      	ldr	r2, [pc, #528]	; (8006bdc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80069cc:	fa22 f303 	lsr.w	r3, r2, r3
 80069d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	ee07 3a90 	vmov	s15, r3
 80069d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	ee07 3a90 	vmov	s15, r3
 80069e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ea:	4b7b      	ldr	r3, [pc, #492]	; (8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80069fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006be0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006a1a:	e087      	b.n	8006b2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	ee07 3a90 	vmov	s15, r3
 8006a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006be4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a2e:	4b6a      	ldr	r3, [pc, #424]	; (8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a36:	ee07 3a90 	vmov	s15, r3
 8006a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006be0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a5e:	e065      	b.n	8006b2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006be8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a72:	4b59      	ldr	r3, [pc, #356]	; (8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006be0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aa2:	e043      	b.n	8006b2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	ee07 3a90 	vmov	s15, r3
 8006aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006bec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab6:	4b48      	ldr	r3, [pc, #288]	; (8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006be0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ae6:	e021      	b.n	8006b2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006be8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006afa:	4b37      	ldr	r3, [pc, #220]	; (8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006be0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006b2c:	4b2a      	ldr	r3, [pc, #168]	; (8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b30:	0a5b      	lsrs	r3, r3, #9
 8006b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b46:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b52:	ee17 2a90 	vmov	r2, s15
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006b5a:	4b1f      	ldr	r3, [pc, #124]	; (8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5e:	0c1b      	lsrs	r3, r3, #16
 8006b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b64:	ee07 3a90 	vmov	s15, r3
 8006b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b74:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b80:	ee17 2a90 	vmov	r2, s15
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006b88:	4b13      	ldr	r3, [pc, #76]	; (8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8c:	0e1b      	lsrs	r3, r3, #24
 8006b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ba2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bae:	ee17 2a90 	vmov	r2, s15
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006bb6:	e008      	b.n	8006bca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	609a      	str	r2, [r3, #8]
}
 8006bca:	bf00      	nop
 8006bcc:	3724      	adds	r7, #36	; 0x24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	58024400 	.word	0x58024400
 8006bdc:	03d09000 	.word	0x03d09000
 8006be0:	46000000 	.word	0x46000000
 8006be4:	4c742400 	.word	0x4c742400
 8006be8:	4a742400 	.word	0x4a742400
 8006bec:	4af42400 	.word	0x4af42400

08006bf0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b089      	sub	sp, #36	; 0x24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bf8:	4ba1      	ldr	r3, [pc, #644]	; (8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfc:	f003 0303 	and.w	r3, r3, #3
 8006c00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006c02:	4b9f      	ldr	r3, [pc, #636]	; (8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c06:	0d1b      	lsrs	r3, r3, #20
 8006c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006c0e:	4b9c      	ldr	r3, [pc, #624]	; (8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	0a1b      	lsrs	r3, r3, #8
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006c1a:	4b99      	ldr	r3, [pc, #612]	; (8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1e:	08db      	lsrs	r3, r3, #3
 8006c20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	fb02 f303 	mul.w	r3, r2, r3
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 8111 	beq.w	8006e60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	f000 8083 	beq.w	8006d4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	f200 80a1 	bhi.w	8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d056      	beq.n	8006d08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006c5a:	e099      	b.n	8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c5c:	4b88      	ldr	r3, [pc, #544]	; (8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0320 	and.w	r3, r3, #32
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d02d      	beq.n	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c68:	4b85      	ldr	r3, [pc, #532]	; (8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	08db      	lsrs	r3, r3, #3
 8006c6e:	f003 0303 	and.w	r3, r3, #3
 8006c72:	4a84      	ldr	r2, [pc, #528]	; (8006e84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006c74:	fa22 f303 	lsr.w	r3, r2, r3
 8006c78:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	ee07 3a90 	vmov	s15, r3
 8006c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c92:	4b7b      	ldr	r3, [pc, #492]	; (8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ca6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006cc2:	e087      	b.n	8006dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd6:	4b6a      	ldr	r3, [pc, #424]	; (8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006e88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d06:	e065      	b.n	8006dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d1a:	4b59      	ldr	r3, [pc, #356]	; (8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d22:	ee07 3a90 	vmov	s15, r3
 8006d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006e88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d4a:	e043      	b.n	8006dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	ee07 3a90 	vmov	s15, r3
 8006d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006e94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d5e:	4b48      	ldr	r3, [pc, #288]	; (8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d72:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006e88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d8e:	e021      	b.n	8006dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da2:	4b37      	ldr	r3, [pc, #220]	; (8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006db6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006e88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dd2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006dd4:	4b2a      	ldr	r3, [pc, #168]	; (8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	0a5b      	lsrs	r3, r3, #9
 8006dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dde:	ee07 3a90 	vmov	s15, r3
 8006de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dee:	edd7 6a07 	vldr	s13, [r7, #28]
 8006df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dfa:	ee17 2a90 	vmov	r2, s15
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006e02:	4b1f      	ldr	r3, [pc, #124]	; (8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	0c1b      	lsrs	r3, r3, #16
 8006e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e0c:	ee07 3a90 	vmov	s15, r3
 8006e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e28:	ee17 2a90 	vmov	r2, s15
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006e30:	4b13      	ldr	r3, [pc, #76]	; (8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	0e1b      	lsrs	r3, r3, #24
 8006e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e3a:	ee07 3a90 	vmov	s15, r3
 8006e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e56:	ee17 2a90 	vmov	r2, s15
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006e5e:	e008      	b.n	8006e72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	609a      	str	r2, [r3, #8]
}
 8006e72:	bf00      	nop
 8006e74:	3724      	adds	r7, #36	; 0x24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	58024400 	.word	0x58024400
 8006e84:	03d09000 	.word	0x03d09000
 8006e88:	46000000 	.word	0x46000000
 8006e8c:	4c742400 	.word	0x4c742400
 8006e90:	4a742400 	.word	0x4a742400
 8006e94:	4af42400 	.word	0x4af42400

08006e98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ea6:	4b53      	ldr	r3, [pc, #332]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d101      	bne.n	8006eb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e099      	b.n	8006fea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006eb6:	4b4f      	ldr	r3, [pc, #316]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a4e      	ldr	r2, [pc, #312]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006ebc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ec2:	f7fa fd99 	bl	80019f8 <HAL_GetTick>
 8006ec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ec8:	e008      	b.n	8006edc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006eca:	f7fa fd95 	bl	80019f8 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d901      	bls.n	8006edc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e086      	b.n	8006fea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006edc:	4b45      	ldr	r3, [pc, #276]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1f0      	bne.n	8006eca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ee8:	4b42      	ldr	r3, [pc, #264]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	031b      	lsls	r3, r3, #12
 8006ef6:	493f      	ldr	r1, [pc, #252]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	628b      	str	r3, [r1, #40]	; 0x28
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	025b      	lsls	r3, r3, #9
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	431a      	orrs	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	041b      	lsls	r3, r3, #16
 8006f1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	061b      	lsls	r3, r3, #24
 8006f28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f2c:	4931      	ldr	r1, [pc, #196]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006f32:	4b30      	ldr	r3, [pc, #192]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	492d      	ldr	r1, [pc, #180]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006f44:	4b2b      	ldr	r3, [pc, #172]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	f023 0220 	bic.w	r2, r3, #32
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	4928      	ldr	r1, [pc, #160]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006f56:	4b27      	ldr	r3, [pc, #156]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5a:	4a26      	ldr	r2, [pc, #152]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006f5c:	f023 0310 	bic.w	r3, r3, #16
 8006f60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f62:	4b24      	ldr	r3, [pc, #144]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006f64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f66:	4b24      	ldr	r3, [pc, #144]	; (8006ff8 <RCCEx_PLL2_Config+0x160>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	69d2      	ldr	r2, [r2, #28]
 8006f6e:	00d2      	lsls	r2, r2, #3
 8006f70:	4920      	ldr	r1, [pc, #128]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f76:	4b1f      	ldr	r3, [pc, #124]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	4a1e      	ldr	r2, [pc, #120]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006f7c:	f043 0310 	orr.w	r3, r3, #16
 8006f80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d106      	bne.n	8006f96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f88:	4b1a      	ldr	r3, [pc, #104]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8c:	4a19      	ldr	r2, [pc, #100]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006f8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f94:	e00f      	b.n	8006fb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d106      	bne.n	8006faa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f9c:	4b15      	ldr	r3, [pc, #84]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	4a14      	ldr	r2, [pc, #80]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006fa8:	e005      	b.n	8006fb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006faa:	4b12      	ldr	r3, [pc, #72]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fae:	4a11      	ldr	r2, [pc, #68]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006fb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006fb6:	4b0f      	ldr	r3, [pc, #60]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a0e      	ldr	r2, [pc, #56]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006fbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fc2:	f7fa fd19 	bl	80019f8 <HAL_GetTick>
 8006fc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006fc8:	e008      	b.n	8006fdc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006fca:	f7fa fd15 	bl	80019f8 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d901      	bls.n	8006fdc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e006      	b.n	8006fea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006fdc:	4b05      	ldr	r3, [pc, #20]	; (8006ff4 <RCCEx_PLL2_Config+0x15c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0f0      	beq.n	8006fca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	58024400 	.word	0x58024400
 8006ff8:	ffff0007 	.word	0xffff0007

08006ffc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800700a:	4b53      	ldr	r3, [pc, #332]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	f003 0303 	and.w	r3, r3, #3
 8007012:	2b03      	cmp	r3, #3
 8007014:	d101      	bne.n	800701a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e099      	b.n	800714e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800701a:	4b4f      	ldr	r3, [pc, #316]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a4e      	ldr	r2, [pc, #312]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 8007020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007026:	f7fa fce7 	bl	80019f8 <HAL_GetTick>
 800702a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800702c:	e008      	b.n	8007040 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800702e:	f7fa fce3 	bl	80019f8 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b02      	cmp	r3, #2
 800703a:	d901      	bls.n	8007040 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e086      	b.n	800714e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007040:	4b45      	ldr	r3, [pc, #276]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1f0      	bne.n	800702e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800704c:	4b42      	ldr	r3, [pc, #264]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 800704e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007050:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	051b      	lsls	r3, r3, #20
 800705a:	493f      	ldr	r1, [pc, #252]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 800705c:	4313      	orrs	r3, r2
 800705e:	628b      	str	r3, [r1, #40]	; 0x28
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	3b01      	subs	r3, #1
 8007066:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	3b01      	subs	r3, #1
 8007070:	025b      	lsls	r3, r3, #9
 8007072:	b29b      	uxth	r3, r3
 8007074:	431a      	orrs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	3b01      	subs	r3, #1
 800707c:	041b      	lsls	r3, r3, #16
 800707e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007082:	431a      	orrs	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	3b01      	subs	r3, #1
 800708a:	061b      	lsls	r3, r3, #24
 800708c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007090:	4931      	ldr	r1, [pc, #196]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 8007092:	4313      	orrs	r3, r2
 8007094:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007096:	4b30      	ldr	r3, [pc, #192]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 8007098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	492d      	ldr	r1, [pc, #180]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80070a8:	4b2b      	ldr	r3, [pc, #172]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 80070aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	4928      	ldr	r1, [pc, #160]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80070ba:	4b27      	ldr	r3, [pc, #156]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	4a26      	ldr	r2, [pc, #152]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 80070c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80070c6:	4b24      	ldr	r3, [pc, #144]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 80070c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ca:	4b24      	ldr	r3, [pc, #144]	; (800715c <RCCEx_PLL3_Config+0x160>)
 80070cc:	4013      	ands	r3, r2
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	69d2      	ldr	r2, [r2, #28]
 80070d2:	00d2      	lsls	r2, r2, #3
 80070d4:	4920      	ldr	r1, [pc, #128]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80070da:	4b1f      	ldr	r3, [pc, #124]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	4a1e      	ldr	r2, [pc, #120]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 80070e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d106      	bne.n	80070fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80070ec:	4b1a      	ldr	r3, [pc, #104]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	4a19      	ldr	r2, [pc, #100]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 80070f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80070f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070f8:	e00f      	b.n	800711a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d106      	bne.n	800710e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007100:	4b15      	ldr	r3, [pc, #84]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	4a14      	ldr	r2, [pc, #80]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 8007106:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800710a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800710c:	e005      	b.n	800711a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800710e:	4b12      	ldr	r3, [pc, #72]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 8007110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007112:	4a11      	ldr	r2, [pc, #68]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 8007114:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007118:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800711a:	4b0f      	ldr	r3, [pc, #60]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a0e      	ldr	r2, [pc, #56]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 8007120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007126:	f7fa fc67 	bl	80019f8 <HAL_GetTick>
 800712a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800712c:	e008      	b.n	8007140 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800712e:	f7fa fc63 	bl	80019f8 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b02      	cmp	r3, #2
 800713a:	d901      	bls.n	8007140 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e006      	b.n	800714e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007140:	4b05      	ldr	r3, [pc, #20]	; (8007158 <RCCEx_PLL3_Config+0x15c>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d0f0      	beq.n	800712e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800714c:	7bfb      	ldrb	r3, [r7, #15]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	58024400 	.word	0x58024400
 800715c:	ffff0007 	.word	0xffff0007

08007160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e049      	b.n	8007206 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d106      	bne.n	800718c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7fa f9c2 	bl	8001510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3304      	adds	r3, #4
 800719c:	4619      	mov	r1, r3
 800719e:	4610      	mov	r0, r2
 80071a0:	f000 fb26 	bl	80077f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e08f      	b.n	8007344 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	d106      	bne.n	800723e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7fa f8e7 	bl	800140c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2202      	movs	r2, #2
 8007242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6899      	ldr	r1, [r3, #8]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	4b3e      	ldr	r3, [pc, #248]	; (800734c <HAL_TIM_Encoder_Init+0x13c>)
 8007252:	400b      	ands	r3, r1
 8007254:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	3304      	adds	r3, #4
 800725e:	4619      	mov	r1, r3
 8007260:	4610      	mov	r0, r2
 8007262:	f000 fac5 	bl	80077f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4b31      	ldr	r3, [pc, #196]	; (8007350 <HAL_TIM_Encoder_Init+0x140>)
 800728c:	4013      	ands	r3, r2
 800728e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	021b      	lsls	r3, r3, #8
 800729a:	4313      	orrs	r3, r2
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	4313      	orrs	r3, r2
 80072a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	4b2b      	ldr	r3, [pc, #172]	; (8007354 <HAL_TIM_Encoder_Init+0x144>)
 80072a6:	4013      	ands	r3, r2
 80072a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	4b2a      	ldr	r3, [pc, #168]	; (8007358 <HAL_TIM_Encoder_Init+0x148>)
 80072ae:	4013      	ands	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	021b      	lsls	r3, r3, #8
 80072bc:	4313      	orrs	r3, r2
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	011a      	lsls	r2, r3, #4
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	031b      	lsls	r3, r3, #12
 80072d0:	4313      	orrs	r3, r2
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80072de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80072e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	011b      	lsls	r3, r3, #4
 80072f2:	4313      	orrs	r3, r2
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	fffebff8 	.word	0xfffebff8
 8007350:	fffffcfc 	.word	0xfffffcfc
 8007354:	fffff3f3 	.word	0xfffff3f3
 8007358:	ffff0f0f 	.word	0xffff0f0f

0800735c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b02      	cmp	r3, #2
 8007370:	d122      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b02      	cmp	r3, #2
 800737e:	d11b      	bne.n	80073b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f06f 0202 	mvn.w	r2, #2
 8007388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fa08 	bl	80077b4 <HAL_TIM_IC_CaptureCallback>
 80073a4:	e005      	b.n	80073b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f9fa 	bl	80077a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fa0b 	bl	80077c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f003 0304 	and.w	r3, r3, #4
 80073c2:	2b04      	cmp	r3, #4
 80073c4:	d122      	bne.n	800740c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b04      	cmp	r3, #4
 80073d2:	d11b      	bne.n	800740c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f06f 0204 	mvn.w	r2, #4
 80073dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2202      	movs	r2, #2
 80073e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f9de 	bl	80077b4 <HAL_TIM_IC_CaptureCallback>
 80073f8:	e005      	b.n	8007406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f9d0 	bl	80077a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f9e1 	bl	80077c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	f003 0308 	and.w	r3, r3, #8
 8007416:	2b08      	cmp	r3, #8
 8007418:	d122      	bne.n	8007460 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f003 0308 	and.w	r3, r3, #8
 8007424:	2b08      	cmp	r3, #8
 8007426:	d11b      	bne.n	8007460 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f06f 0208 	mvn.w	r2, #8
 8007430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2204      	movs	r2, #4
 8007436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	f003 0303 	and.w	r3, r3, #3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f9b4 	bl	80077b4 <HAL_TIM_IC_CaptureCallback>
 800744c:	e005      	b.n	800745a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f9a6 	bl	80077a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f9b7 	bl	80077c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f003 0310 	and.w	r3, r3, #16
 800746a:	2b10      	cmp	r3, #16
 800746c:	d122      	bne.n	80074b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f003 0310 	and.w	r3, r3, #16
 8007478:	2b10      	cmp	r3, #16
 800747a:	d11b      	bne.n	80074b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f06f 0210 	mvn.w	r2, #16
 8007484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2208      	movs	r2, #8
 800748a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f98a 	bl	80077b4 <HAL_TIM_IC_CaptureCallback>
 80074a0:	e005      	b.n	80074ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f97c 	bl	80077a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f98d 	bl	80077c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d10e      	bne.n	80074e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d107      	bne.n	80074e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f06f 0201 	mvn.w	r2, #1
 80074d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f956 	bl	800778c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ea:	2b80      	cmp	r3, #128	; 0x80
 80074ec:	d10e      	bne.n	800750c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f8:	2b80      	cmp	r3, #128	; 0x80
 80074fa:	d107      	bne.n	800750c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fb42 	bl	8007b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800751a:	d10e      	bne.n	800753a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007526:	2b80      	cmp	r3, #128	; 0x80
 8007528:	d107      	bne.n	800753a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fb35 	bl	8007ba4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007544:	2b40      	cmp	r3, #64	; 0x40
 8007546:	d10e      	bne.n	8007566 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007552:	2b40      	cmp	r3, #64	; 0x40
 8007554:	d107      	bne.n	8007566 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800755e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f93b 	bl	80077dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	f003 0320 	and.w	r3, r3, #32
 8007570:	2b20      	cmp	r3, #32
 8007572:	d10e      	bne.n	8007592 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f003 0320 	and.w	r3, r3, #32
 800757e:	2b20      	cmp	r3, #32
 8007580:	d107      	bne.n	8007592 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f06f 0220 	mvn.w	r2, #32
 800758a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 faf5 	bl	8007b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007592:	bf00      	nop
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
	...

0800759c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d101      	bne.n	80075b8 <HAL_TIM_ConfigClockSource+0x1c>
 80075b4:	2302      	movs	r3, #2
 80075b6:	e0dc      	b.n	8007772 <HAL_TIM_ConfigClockSource+0x1d6>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	4b6a      	ldr	r3, [pc, #424]	; (800777c <HAL_TIM_ConfigClockSource+0x1e0>)
 80075d4:	4013      	ands	r3, r2
 80075d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a64      	ldr	r2, [pc, #400]	; (8007780 <HAL_TIM_ConfigClockSource+0x1e4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	f000 80a9 	beq.w	8007746 <HAL_TIM_ConfigClockSource+0x1aa>
 80075f4:	4a62      	ldr	r2, [pc, #392]	; (8007780 <HAL_TIM_ConfigClockSource+0x1e4>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	f200 80ae 	bhi.w	8007758 <HAL_TIM_ConfigClockSource+0x1bc>
 80075fc:	4a61      	ldr	r2, [pc, #388]	; (8007784 <HAL_TIM_ConfigClockSource+0x1e8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	f000 80a1 	beq.w	8007746 <HAL_TIM_ConfigClockSource+0x1aa>
 8007604:	4a5f      	ldr	r2, [pc, #380]	; (8007784 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007606:	4293      	cmp	r3, r2
 8007608:	f200 80a6 	bhi.w	8007758 <HAL_TIM_ConfigClockSource+0x1bc>
 800760c:	4a5e      	ldr	r2, [pc, #376]	; (8007788 <HAL_TIM_ConfigClockSource+0x1ec>)
 800760e:	4293      	cmp	r3, r2
 8007610:	f000 8099 	beq.w	8007746 <HAL_TIM_ConfigClockSource+0x1aa>
 8007614:	4a5c      	ldr	r2, [pc, #368]	; (8007788 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007616:	4293      	cmp	r3, r2
 8007618:	f200 809e 	bhi.w	8007758 <HAL_TIM_ConfigClockSource+0x1bc>
 800761c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007620:	f000 8091 	beq.w	8007746 <HAL_TIM_ConfigClockSource+0x1aa>
 8007624:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007628:	f200 8096 	bhi.w	8007758 <HAL_TIM_ConfigClockSource+0x1bc>
 800762c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007630:	f000 8089 	beq.w	8007746 <HAL_TIM_ConfigClockSource+0x1aa>
 8007634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007638:	f200 808e 	bhi.w	8007758 <HAL_TIM_ConfigClockSource+0x1bc>
 800763c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007640:	d03e      	beq.n	80076c0 <HAL_TIM_ConfigClockSource+0x124>
 8007642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007646:	f200 8087 	bhi.w	8007758 <HAL_TIM_ConfigClockSource+0x1bc>
 800764a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764e:	f000 8086 	beq.w	800775e <HAL_TIM_ConfigClockSource+0x1c2>
 8007652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007656:	d87f      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x1bc>
 8007658:	2b70      	cmp	r3, #112	; 0x70
 800765a:	d01a      	beq.n	8007692 <HAL_TIM_ConfigClockSource+0xf6>
 800765c:	2b70      	cmp	r3, #112	; 0x70
 800765e:	d87b      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x1bc>
 8007660:	2b60      	cmp	r3, #96	; 0x60
 8007662:	d050      	beq.n	8007706 <HAL_TIM_ConfigClockSource+0x16a>
 8007664:	2b60      	cmp	r3, #96	; 0x60
 8007666:	d877      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x1bc>
 8007668:	2b50      	cmp	r3, #80	; 0x50
 800766a:	d03c      	beq.n	80076e6 <HAL_TIM_ConfigClockSource+0x14a>
 800766c:	2b50      	cmp	r3, #80	; 0x50
 800766e:	d873      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x1bc>
 8007670:	2b40      	cmp	r3, #64	; 0x40
 8007672:	d058      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x18a>
 8007674:	2b40      	cmp	r3, #64	; 0x40
 8007676:	d86f      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x1bc>
 8007678:	2b30      	cmp	r3, #48	; 0x30
 800767a:	d064      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x1aa>
 800767c:	2b30      	cmp	r3, #48	; 0x30
 800767e:	d86b      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x1bc>
 8007680:	2b20      	cmp	r3, #32
 8007682:	d060      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x1aa>
 8007684:	2b20      	cmp	r3, #32
 8007686:	d867      	bhi.n	8007758 <HAL_TIM_ConfigClockSource+0x1bc>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d05c      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x1aa>
 800768c:	2b10      	cmp	r3, #16
 800768e:	d05a      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x1aa>
 8007690:	e062      	b.n	8007758 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6818      	ldr	r0, [r3, #0]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	6899      	ldr	r1, [r3, #8]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f000 f9bd 	bl	8007a20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	609a      	str	r2, [r3, #8]
      break;
 80076be:	e04f      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	6899      	ldr	r1, [r3, #8]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f000 f9a6 	bl	8007a20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076e2:	609a      	str	r2, [r3, #8]
      break;
 80076e4:	e03c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	6859      	ldr	r1, [r3, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	461a      	mov	r2, r3
 80076f4:	f000 f916 	bl	8007924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2150      	movs	r1, #80	; 0x50
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 f970 	bl	80079e4 <TIM_ITRx_SetConfig>
      break;
 8007704:	e02c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6818      	ldr	r0, [r3, #0]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	6859      	ldr	r1, [r3, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	461a      	mov	r2, r3
 8007714:	f000 f935 	bl	8007982 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2160      	movs	r1, #96	; 0x60
 800771e:	4618      	mov	r0, r3
 8007720:	f000 f960 	bl	80079e4 <TIM_ITRx_SetConfig>
      break;
 8007724:	e01c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	6859      	ldr	r1, [r3, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	461a      	mov	r2, r3
 8007734:	f000 f8f6 	bl	8007924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2140      	movs	r1, #64	; 0x40
 800773e:	4618      	mov	r0, r3
 8007740:	f000 f950 	bl	80079e4 <TIM_ITRx_SetConfig>
      break;
 8007744:	e00c      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4619      	mov	r1, r3
 8007750:	4610      	mov	r0, r2
 8007752:	f000 f947 	bl	80079e4 <TIM_ITRx_SetConfig>
      break;
 8007756:	e003      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]
      break;
 800775c:	e000      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800775e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007770:	7bfb      	ldrb	r3, [r7, #15]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	ffceff88 	.word	0xffceff88
 8007780:	00100040 	.word	0x00100040
 8007784:	00100030 	.word	0x00100030
 8007788:	00100020 	.word	0x00100020

0800778c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a40      	ldr	r2, [pc, #256]	; (8007904 <TIM_Base_SetConfig+0x114>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d013      	beq.n	8007830 <TIM_Base_SetConfig+0x40>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800780e:	d00f      	beq.n	8007830 <TIM_Base_SetConfig+0x40>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a3d      	ldr	r2, [pc, #244]	; (8007908 <TIM_Base_SetConfig+0x118>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00b      	beq.n	8007830 <TIM_Base_SetConfig+0x40>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a3c      	ldr	r2, [pc, #240]	; (800790c <TIM_Base_SetConfig+0x11c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d007      	beq.n	8007830 <TIM_Base_SetConfig+0x40>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a3b      	ldr	r2, [pc, #236]	; (8007910 <TIM_Base_SetConfig+0x120>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d003      	beq.n	8007830 <TIM_Base_SetConfig+0x40>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a3a      	ldr	r2, [pc, #232]	; (8007914 <TIM_Base_SetConfig+0x124>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d108      	bne.n	8007842 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	4313      	orrs	r3, r2
 8007840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a2f      	ldr	r2, [pc, #188]	; (8007904 <TIM_Base_SetConfig+0x114>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d01f      	beq.n	800788a <TIM_Base_SetConfig+0x9a>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007850:	d01b      	beq.n	800788a <TIM_Base_SetConfig+0x9a>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a2c      	ldr	r2, [pc, #176]	; (8007908 <TIM_Base_SetConfig+0x118>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d017      	beq.n	800788a <TIM_Base_SetConfig+0x9a>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a2b      	ldr	r2, [pc, #172]	; (800790c <TIM_Base_SetConfig+0x11c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d013      	beq.n	800788a <TIM_Base_SetConfig+0x9a>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a2a      	ldr	r2, [pc, #168]	; (8007910 <TIM_Base_SetConfig+0x120>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d00f      	beq.n	800788a <TIM_Base_SetConfig+0x9a>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a29      	ldr	r2, [pc, #164]	; (8007914 <TIM_Base_SetConfig+0x124>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d00b      	beq.n	800788a <TIM_Base_SetConfig+0x9a>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a28      	ldr	r2, [pc, #160]	; (8007918 <TIM_Base_SetConfig+0x128>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d007      	beq.n	800788a <TIM_Base_SetConfig+0x9a>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a27      	ldr	r2, [pc, #156]	; (800791c <TIM_Base_SetConfig+0x12c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d003      	beq.n	800788a <TIM_Base_SetConfig+0x9a>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a26      	ldr	r2, [pc, #152]	; (8007920 <TIM_Base_SetConfig+0x130>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d108      	bne.n	800789c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4313      	orrs	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a10      	ldr	r2, [pc, #64]	; (8007904 <TIM_Base_SetConfig+0x114>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d00f      	beq.n	80078e8 <TIM_Base_SetConfig+0xf8>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a12      	ldr	r2, [pc, #72]	; (8007914 <TIM_Base_SetConfig+0x124>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d00b      	beq.n	80078e8 <TIM_Base_SetConfig+0xf8>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a11      	ldr	r2, [pc, #68]	; (8007918 <TIM_Base_SetConfig+0x128>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d007      	beq.n	80078e8 <TIM_Base_SetConfig+0xf8>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a10      	ldr	r2, [pc, #64]	; (800791c <TIM_Base_SetConfig+0x12c>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d003      	beq.n	80078e8 <TIM_Base_SetConfig+0xf8>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a0f      	ldr	r2, [pc, #60]	; (8007920 <TIM_Base_SetConfig+0x130>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d103      	bne.n	80078f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	691a      	ldr	r2, [r3, #16]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	615a      	str	r2, [r3, #20]
}
 80078f6:	bf00      	nop
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	40010000 	.word	0x40010000
 8007908:	40000400 	.word	0x40000400
 800790c:	40000800 	.word	0x40000800
 8007910:	40000c00 	.word	0x40000c00
 8007914:	40010400 	.word	0x40010400
 8007918:	40014000 	.word	0x40014000
 800791c:	40014400 	.word	0x40014400
 8007920:	40014800 	.word	0x40014800

08007924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	f023 0201 	bic.w	r2, r3, #1
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800794e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	4313      	orrs	r3, r2
 8007958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f023 030a 	bic.w	r3, r3, #10
 8007960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	4313      	orrs	r3, r2
 8007968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	621a      	str	r2, [r3, #32]
}
 8007976:	bf00      	nop
 8007978:	371c      	adds	r7, #28
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007982:	b480      	push	{r7}
 8007984:	b087      	sub	sp, #28
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	f023 0210 	bic.w	r2, r3, #16
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	031b      	lsls	r3, r3, #12
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	011b      	lsls	r3, r3, #4
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	621a      	str	r2, [r3, #32]
}
 80079d6:	bf00      	nop
 80079d8:	371c      	adds	r7, #28
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
	...

080079e4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	4b09      	ldr	r3, [pc, #36]	; (8007a1c <TIM_ITRx_SetConfig+0x38>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079fc:	683a      	ldr	r2, [r7, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	f043 0307 	orr.w	r3, r3, #7
 8007a06:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	609a      	str	r2, [r3, #8]
}
 8007a0e:	bf00      	nop
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	ffcfff8f 	.word	0xffcfff8f

08007a20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	021a      	lsls	r2, r3, #8
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	431a      	orrs	r2, r3
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	609a      	str	r2, [r3, #8]
}
 8007a54:	bf00      	nop
 8007a56:	371c      	adds	r7, #28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d101      	bne.n	8007a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a74:	2302      	movs	r3, #2
 8007a76:	e06d      	b.n	8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a30      	ldr	r2, [pc, #192]	; (8007b60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d004      	beq.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a2f      	ldr	r2, [pc, #188]	; (8007b64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d108      	bne.n	8007abe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ab2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a20      	ldr	r2, [pc, #128]	; (8007b60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d022      	beq.n	8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aea:	d01d      	beq.n	8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a1d      	ldr	r2, [pc, #116]	; (8007b68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d018      	beq.n	8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a1c      	ldr	r2, [pc, #112]	; (8007b6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d013      	beq.n	8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a1a      	ldr	r2, [pc, #104]	; (8007b70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00e      	beq.n	8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a15      	ldr	r2, [pc, #84]	; (8007b64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d009      	beq.n	8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a16      	ldr	r2, [pc, #88]	; (8007b74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d004      	beq.n	8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a15      	ldr	r2, [pc, #84]	; (8007b78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d10c      	bne.n	8007b42 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	40010000 	.word	0x40010000
 8007b64:	40010400 	.word	0x40010400
 8007b68:	40000400 	.word	0x40000400
 8007b6c:	40000800 	.word	0x40000800
 8007b70:	40000c00 	.word	0x40000c00
 8007b74:	40001800 	.word	0x40001800
 8007b78:	40014000 	.word	0x40014000

08007b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e042      	b.n	8007c50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d106      	bne.n	8007be2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7f9 fcbf 	bl	8001560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2224      	movs	r2, #36	; 0x24
 8007be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 0201 	bic.w	r2, r2, #1
 8007bf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fce0 	bl	80085c0 <UART_SetConfig>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d101      	bne.n	8007c0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e022      	b.n	8007c50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d002      	beq.n	8007c18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 fb40 	bl	8009298 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689a      	ldr	r2, [r3, #8]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0201 	orr.w	r2, r2, #1
 8007c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 fbc7 	bl	80093dc <UART_CheckIdleState>
 8007c4e:	4603      	mov	r3, r0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08a      	sub	sp, #40	; 0x28
 8007c5c:	af02      	add	r7, sp, #8
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	603b      	str	r3, [r7, #0]
 8007c64:	4613      	mov	r3, r2
 8007c66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c6e:	2b20      	cmp	r3, #32
 8007c70:	d17b      	bne.n	8007d6a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <HAL_UART_Transmit+0x26>
 8007c78:	88fb      	ldrh	r3, [r7, #6]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e074      	b.n	8007d6c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2221      	movs	r2, #33	; 0x21
 8007c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c92:	f7f9 feb1 	bl	80019f8 <HAL_GetTick>
 8007c96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	88fa      	ldrh	r2, [r7, #6]
 8007c9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	88fa      	ldrh	r2, [r7, #6]
 8007ca4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cb0:	d108      	bne.n	8007cc4 <HAL_UART_Transmit+0x6c>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d104      	bne.n	8007cc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	61bb      	str	r3, [r7, #24]
 8007cc2:	e003      	b.n	8007ccc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ccc:	e030      	b.n	8007d30 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2180      	movs	r1, #128	; 0x80
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f001 fc29 	bl	8009530 <UART_WaitOnFlagUntilTimeout>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d005      	beq.n	8007cf0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e03d      	b.n	8007d6c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10b      	bne.n	8007d0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	3302      	adds	r3, #2
 8007d0a:	61bb      	str	r3, [r7, #24]
 8007d0c:	e007      	b.n	8007d1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	781a      	ldrb	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	3b01      	subs	r3, #1
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1c8      	bne.n	8007cce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	2200      	movs	r2, #0
 8007d44:	2140      	movs	r1, #64	; 0x40
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f001 fbf2 	bl	8009530 <UART_WaitOnFlagUntilTimeout>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d005      	beq.n	8007d5e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2220      	movs	r2, #32
 8007d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e006      	b.n	8007d6c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2220      	movs	r2, #32
 8007d62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	e000      	b.n	8007d6c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007d6a:	2302      	movs	r3, #2
  }
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3720      	adds	r7, #32
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08a      	sub	sp, #40	; 0x28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d88:	2b20      	cmp	r3, #32
 8007d8a:	d137      	bne.n	8007dfc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <HAL_UART_Receive_IT+0x24>
 8007d92:	88fb      	ldrh	r3, [r7, #6]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e030      	b.n	8007dfe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a18      	ldr	r2, [pc, #96]	; (8007e08 <HAL_UART_Receive_IT+0x94>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d01f      	beq.n	8007dec <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d018      	beq.n	8007dec <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	e853 3f00 	ldrex	r3, [r3]
 8007dc6:	613b      	str	r3, [r7, #16]
   return(result);
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd8:	623b      	str	r3, [r7, #32]
 8007dda:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ddc:	69f9      	ldr	r1, [r7, #28]
 8007dde:	6a3a      	ldr	r2, [r7, #32]
 8007de0:	e841 2300 	strex	r3, r2, [r1]
 8007de4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e6      	bne.n	8007dba <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007dec:	88fb      	ldrh	r3, [r7, #6]
 8007dee:	461a      	mov	r2, r3
 8007df0:	68b9      	ldr	r1, [r7, #8]
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f001 fc04 	bl	8009600 <UART_Start_Receive_IT>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	e000      	b.n	8007dfe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007dfc:	2302      	movs	r3, #2
  }
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3728      	adds	r7, #40	; 0x28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	58000c00 	.word	0x58000c00

08007e0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b0ba      	sub	sp, #232	; 0xe8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007e36:	f640 030f 	movw	r3, #2063	; 0x80f
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007e40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d11b      	bne.n	8007e80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e4c:	f003 0320 	and.w	r3, r3, #32
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d015      	beq.n	8007e80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e58:	f003 0320 	and.w	r3, r3, #32
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d105      	bne.n	8007e6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d009      	beq.n	8007e80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 8377 	beq.w	8008564 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	4798      	blx	r3
      }
      return;
 8007e7e:	e371      	b.n	8008564 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 8123 	beq.w	80080d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007e8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007e8e:	4b8d      	ldr	r3, [pc, #564]	; (80080c4 <HAL_UART_IRQHandler+0x2b8>)
 8007e90:	4013      	ands	r3, r2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d106      	bne.n	8007ea4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007e96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007e9a:	4b8b      	ldr	r3, [pc, #556]	; (80080c8 <HAL_UART_IRQHandler+0x2bc>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 8116 	beq.w	80080d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d011      	beq.n	8007ed4 <HAL_UART_IRQHandler+0xc8>
 8007eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00b      	beq.n	8007ed4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eca:	f043 0201 	orr.w	r2, r3, #1
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d011      	beq.n	8007f04 <HAL_UART_IRQHandler+0xf8>
 8007ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ee4:	f003 0301 	and.w	r3, r3, #1
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00b      	beq.n	8007f04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efa:	f043 0204 	orr.w	r2, r3, #4
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d011      	beq.n	8007f34 <HAL_UART_IRQHandler+0x128>
 8007f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f14:	f003 0301 	and.w	r3, r3, #1
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00b      	beq.n	8007f34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2204      	movs	r2, #4
 8007f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f2a:	f043 0202 	orr.w	r2, r3, #2
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f38:	f003 0308 	and.w	r3, r3, #8
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d017      	beq.n	8007f70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f44:	f003 0320 	and.w	r3, r3, #32
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d105      	bne.n	8007f58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007f4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007f50:	4b5c      	ldr	r3, [pc, #368]	; (80080c4 <HAL_UART_IRQHandler+0x2b8>)
 8007f52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00b      	beq.n	8007f70 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2208      	movs	r2, #8
 8007f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f66:	f043 0208 	orr.w	r2, r3, #8
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d012      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x196>
 8007f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00c      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f98:	f043 0220 	orr.w	r2, r3, #32
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f000 82dd 	beq.w	8008568 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb2:	f003 0320 	and.w	r3, r3, #32
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d013      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fbe:	f003 0320 	and.w	r3, r3, #32
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d105      	bne.n	8007fd2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d007      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff6:	2b40      	cmp	r3, #64	; 0x40
 8007ff8:	d005      	beq.n	8008006 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ffe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008002:	2b00      	cmp	r3, #0
 8008004:	d054      	beq.n	80080b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f001 fc1c 	bl	8009844 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008016:	2b40      	cmp	r3, #64	; 0x40
 8008018:	d146      	bne.n	80080a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3308      	adds	r3, #8
 8008020:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008028:	e853 3f00 	ldrex	r3, [r3]
 800802c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3308      	adds	r3, #8
 8008042:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008046:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800804a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008052:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800805e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1d9      	bne.n	800801a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800806c:	2b00      	cmp	r3, #0
 800806e:	d017      	beq.n	80080a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008076:	4a15      	ldr	r2, [pc, #84]	; (80080cc <HAL_UART_IRQHandler+0x2c0>)
 8008078:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008080:	4618      	mov	r0, r3
 8008082:	f7fa fcc7 	bl	8002a14 <HAL_DMA_Abort_IT>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d019      	beq.n	80080c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800809a:	4610      	mov	r0, r2
 800809c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800809e:	e00f      	b.n	80080c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fa77 	bl	8008594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a6:	e00b      	b.n	80080c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fa73 	bl	8008594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ae:	e007      	b.n	80080c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fa6f 	bl	8008594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80080be:	e253      	b.n	8008568 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080c0:	bf00      	nop
    return;
 80080c2:	e251      	b.n	8008568 <HAL_UART_IRQHandler+0x75c>
 80080c4:	10000001 	.word	0x10000001
 80080c8:	04000120 	.word	0x04000120
 80080cc:	08009911 	.word	0x08009911

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	f040 81e7 	bne.w	80084a8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80080da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080de:	f003 0310 	and.w	r3, r3, #16
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 81e0 	beq.w	80084a8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80080e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ec:	f003 0310 	and.w	r3, r3, #16
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 81d9 	beq.w	80084a8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2210      	movs	r2, #16
 80080fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008108:	2b40      	cmp	r3, #64	; 0x40
 800810a:	f040 8151 	bne.w	80083b0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a96      	ldr	r2, [pc, #600]	; (8008370 <HAL_UART_IRQHandler+0x564>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d068      	beq.n	80081ee <HAL_UART_IRQHandler+0x3e2>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a93      	ldr	r2, [pc, #588]	; (8008374 <HAL_UART_IRQHandler+0x568>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d061      	beq.n	80081ee <HAL_UART_IRQHandler+0x3e2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a91      	ldr	r2, [pc, #580]	; (8008378 <HAL_UART_IRQHandler+0x56c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d05a      	beq.n	80081ee <HAL_UART_IRQHandler+0x3e2>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a8e      	ldr	r2, [pc, #568]	; (800837c <HAL_UART_IRQHandler+0x570>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d053      	beq.n	80081ee <HAL_UART_IRQHandler+0x3e2>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a8c      	ldr	r2, [pc, #560]	; (8008380 <HAL_UART_IRQHandler+0x574>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d04c      	beq.n	80081ee <HAL_UART_IRQHandler+0x3e2>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a89      	ldr	r2, [pc, #548]	; (8008384 <HAL_UART_IRQHandler+0x578>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d045      	beq.n	80081ee <HAL_UART_IRQHandler+0x3e2>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a87      	ldr	r2, [pc, #540]	; (8008388 <HAL_UART_IRQHandler+0x57c>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d03e      	beq.n	80081ee <HAL_UART_IRQHandler+0x3e2>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a84      	ldr	r2, [pc, #528]	; (800838c <HAL_UART_IRQHandler+0x580>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d037      	beq.n	80081ee <HAL_UART_IRQHandler+0x3e2>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a82      	ldr	r2, [pc, #520]	; (8008390 <HAL_UART_IRQHandler+0x584>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d030      	beq.n	80081ee <HAL_UART_IRQHandler+0x3e2>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a7f      	ldr	r2, [pc, #508]	; (8008394 <HAL_UART_IRQHandler+0x588>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d029      	beq.n	80081ee <HAL_UART_IRQHandler+0x3e2>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a7d      	ldr	r2, [pc, #500]	; (8008398 <HAL_UART_IRQHandler+0x58c>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d022      	beq.n	80081ee <HAL_UART_IRQHandler+0x3e2>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a7a      	ldr	r2, [pc, #488]	; (800839c <HAL_UART_IRQHandler+0x590>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d01b      	beq.n	80081ee <HAL_UART_IRQHandler+0x3e2>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a78      	ldr	r2, [pc, #480]	; (80083a0 <HAL_UART_IRQHandler+0x594>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d014      	beq.n	80081ee <HAL_UART_IRQHandler+0x3e2>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a75      	ldr	r2, [pc, #468]	; (80083a4 <HAL_UART_IRQHandler+0x598>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d00d      	beq.n	80081ee <HAL_UART_IRQHandler+0x3e2>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a73      	ldr	r2, [pc, #460]	; (80083a8 <HAL_UART_IRQHandler+0x59c>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d006      	beq.n	80081ee <HAL_UART_IRQHandler+0x3e2>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a70      	ldr	r2, [pc, #448]	; (80083ac <HAL_UART_IRQHandler+0x5a0>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d106      	bne.n	80081fc <HAL_UART_IRQHandler+0x3f0>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	e005      	b.n	8008208 <HAL_UART_IRQHandler+0x3fc>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	b29b      	uxth	r3, r3
 8008208:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800820c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 81ab 	beq.w	800856c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800821c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008220:	429a      	cmp	r2, r3
 8008222:	f080 81a3 	bcs.w	800856c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800822c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008236:	69db      	ldr	r3, [r3, #28]
 8008238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800823c:	f000 8087 	beq.w	800834e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008248:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800825c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	461a      	mov	r2, r3
 8008266:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800826a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800826e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008272:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008276:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800827a:	e841 2300 	strex	r3, r2, [r1]
 800827e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1da      	bne.n	8008240 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3308      	adds	r3, #8
 8008290:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008294:	e853 3f00 	ldrex	r3, [r3]
 8008298:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800829a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800829c:	f023 0301 	bic.w	r3, r3, #1
 80082a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3308      	adds	r3, #8
 80082aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80082ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80082b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80082b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80082c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e1      	bne.n	800828a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3308      	adds	r3, #8
 80082cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3308      	adds	r3, #8
 80082e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082f2:	e841 2300 	strex	r3, r2, [r1]
 80082f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1e3      	bne.n	80082c6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2220      	movs	r2, #32
 8008302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008314:	e853 3f00 	ldrex	r3, [r3]
 8008318:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800831a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800831c:	f023 0310 	bic.w	r3, r3, #16
 8008320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	461a      	mov	r2, r3
 800832a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800832e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008330:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008334:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800833c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e4      	bne.n	800830c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008348:	4618      	mov	r0, r3
 800834a:	f7fa f845 	bl	80023d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2202      	movs	r2, #2
 8008352:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008360:	b29b      	uxth	r3, r3
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	b29b      	uxth	r3, r3
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f91d 	bl	80085a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800836e:	e0fd      	b.n	800856c <HAL_UART_IRQHandler+0x760>
 8008370:	40020010 	.word	0x40020010
 8008374:	40020028 	.word	0x40020028
 8008378:	40020040 	.word	0x40020040
 800837c:	40020058 	.word	0x40020058
 8008380:	40020070 	.word	0x40020070
 8008384:	40020088 	.word	0x40020088
 8008388:	400200a0 	.word	0x400200a0
 800838c:	400200b8 	.word	0x400200b8
 8008390:	40020410 	.word	0x40020410
 8008394:	40020428 	.word	0x40020428
 8008398:	40020440 	.word	0x40020440
 800839c:	40020458 	.word	0x40020458
 80083a0:	40020470 	.word	0x40020470
 80083a4:	40020488 	.word	0x40020488
 80083a8:	400204a0 	.word	0x400204a0
 80083ac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083bc:	b29b      	uxth	r3, r3
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 80cf 	beq.w	8008570 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80083d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f000 80ca 	beq.w	8008570 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e4:	e853 3f00 	ldrex	r3, [r3]
 80083e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008400:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800840c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e4      	bne.n	80083dc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3308      	adds	r3, #8
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	623b      	str	r3, [r7, #32]
   return(result);
 8008422:	6a3a      	ldr	r2, [r7, #32]
 8008424:	4b55      	ldr	r3, [pc, #340]	; (800857c <HAL_UART_IRQHandler+0x770>)
 8008426:	4013      	ands	r3, r2
 8008428:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3308      	adds	r3, #8
 8008432:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008436:	633a      	str	r2, [r7, #48]	; 0x30
 8008438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800843c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800843e:	e841 2300 	strex	r3, r2, [r1]
 8008442:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1e3      	bne.n	8008412 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2220      	movs	r2, #32
 800844e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	60fb      	str	r3, [r7, #12]
   return(result);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f023 0310 	bic.w	r3, r3, #16
 8008472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008480:	61fb      	str	r3, [r7, #28]
 8008482:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008484:	69b9      	ldr	r1, [r7, #24]
 8008486:	69fa      	ldr	r2, [r7, #28]
 8008488:	e841 2300 	strex	r3, r2, [r1]
 800848c:	617b      	str	r3, [r7, #20]
   return(result);
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e4      	bne.n	800845e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2202      	movs	r2, #2
 8008498:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800849a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800849e:	4619      	mov	r1, r3
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f881 	bl	80085a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084a6:	e063      	b.n	8008570 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80084a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00e      	beq.n	80084d2 <HAL_UART_IRQHandler+0x6c6>
 80084b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d008      	beq.n	80084d2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80084c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f001 ff7e 	bl	800a3cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084d0:	e051      	b.n	8008576 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80084d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d014      	beq.n	8008508 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80084de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d105      	bne.n	80084f6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80084ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d008      	beq.n	8008508 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d03a      	beq.n	8008574 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	4798      	blx	r3
    }
    return;
 8008506:	e035      	b.n	8008574 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800850c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008510:	2b00      	cmp	r3, #0
 8008512:	d009      	beq.n	8008528 <HAL_UART_IRQHandler+0x71c>
 8008514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851c:	2b00      	cmp	r3, #0
 800851e:	d003      	beq.n	8008528 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f001 fa0b 	bl	800993c <UART_EndTransmit_IT>
    return;
 8008526:	e026      	b.n	8008576 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800852c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d009      	beq.n	8008548 <HAL_UART_IRQHandler+0x73c>
 8008534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008538:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d003      	beq.n	8008548 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 ff57 	bl	800a3f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008546:	e016      	b.n	8008576 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800854c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d010      	beq.n	8008576 <HAL_UART_IRQHandler+0x76a>
 8008554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008558:	2b00      	cmp	r3, #0
 800855a:	da0c      	bge.n	8008576 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f001 ff3f 	bl	800a3e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008562:	e008      	b.n	8008576 <HAL_UART_IRQHandler+0x76a>
      return;
 8008564:	bf00      	nop
 8008566:	e006      	b.n	8008576 <HAL_UART_IRQHandler+0x76a>
    return;
 8008568:	bf00      	nop
 800856a:	e004      	b.n	8008576 <HAL_UART_IRQHandler+0x76a>
      return;
 800856c:	bf00      	nop
 800856e:	e002      	b.n	8008576 <HAL_UART_IRQHandler+0x76a>
      return;
 8008570:	bf00      	nop
 8008572:	e000      	b.n	8008576 <HAL_UART_IRQHandler+0x76a>
    return;
 8008574:	bf00      	nop
  }
}
 8008576:	37e8      	adds	r7, #232	; 0xe8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	effffffe 	.word	0xeffffffe

08008580 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085c4:	b092      	sub	sp, #72	; 0x48
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	689a      	ldr	r2, [r3, #8]
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	431a      	orrs	r2, r3
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	431a      	orrs	r2, r3
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	69db      	ldr	r3, [r3, #28]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	4bbe      	ldr	r3, [pc, #760]	; (80088e8 <UART_SetConfig+0x328>)
 80085f0:	4013      	ands	r3, r2
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	6812      	ldr	r2, [r2, #0]
 80085f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085f8:	430b      	orrs	r3, r1
 80085fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	68da      	ldr	r2, [r3, #12]
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	430a      	orrs	r2, r1
 8008610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4ab3      	ldr	r2, [pc, #716]	; (80088ec <UART_SetConfig+0x32c>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d004      	beq.n	800862c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008628:	4313      	orrs	r3, r2
 800862a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689a      	ldr	r2, [r3, #8]
 8008632:	4baf      	ldr	r3, [pc, #700]	; (80088f0 <UART_SetConfig+0x330>)
 8008634:	4013      	ands	r3, r2
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	6812      	ldr	r2, [r2, #0]
 800863a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800863c:	430b      	orrs	r3, r1
 800863e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008646:	f023 010f 	bic.w	r1, r3, #15
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	430a      	orrs	r2, r1
 8008654:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4aa6      	ldr	r2, [pc, #664]	; (80088f4 <UART_SetConfig+0x334>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d177      	bne.n	8008750 <UART_SetConfig+0x190>
 8008660:	4ba5      	ldr	r3, [pc, #660]	; (80088f8 <UART_SetConfig+0x338>)
 8008662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008664:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008668:	2b28      	cmp	r3, #40	; 0x28
 800866a:	d86d      	bhi.n	8008748 <UART_SetConfig+0x188>
 800866c:	a201      	add	r2, pc, #4	; (adr r2, 8008674 <UART_SetConfig+0xb4>)
 800866e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008672:	bf00      	nop
 8008674:	08008719 	.word	0x08008719
 8008678:	08008749 	.word	0x08008749
 800867c:	08008749 	.word	0x08008749
 8008680:	08008749 	.word	0x08008749
 8008684:	08008749 	.word	0x08008749
 8008688:	08008749 	.word	0x08008749
 800868c:	08008749 	.word	0x08008749
 8008690:	08008749 	.word	0x08008749
 8008694:	08008721 	.word	0x08008721
 8008698:	08008749 	.word	0x08008749
 800869c:	08008749 	.word	0x08008749
 80086a0:	08008749 	.word	0x08008749
 80086a4:	08008749 	.word	0x08008749
 80086a8:	08008749 	.word	0x08008749
 80086ac:	08008749 	.word	0x08008749
 80086b0:	08008749 	.word	0x08008749
 80086b4:	08008729 	.word	0x08008729
 80086b8:	08008749 	.word	0x08008749
 80086bc:	08008749 	.word	0x08008749
 80086c0:	08008749 	.word	0x08008749
 80086c4:	08008749 	.word	0x08008749
 80086c8:	08008749 	.word	0x08008749
 80086cc:	08008749 	.word	0x08008749
 80086d0:	08008749 	.word	0x08008749
 80086d4:	08008731 	.word	0x08008731
 80086d8:	08008749 	.word	0x08008749
 80086dc:	08008749 	.word	0x08008749
 80086e0:	08008749 	.word	0x08008749
 80086e4:	08008749 	.word	0x08008749
 80086e8:	08008749 	.word	0x08008749
 80086ec:	08008749 	.word	0x08008749
 80086f0:	08008749 	.word	0x08008749
 80086f4:	08008739 	.word	0x08008739
 80086f8:	08008749 	.word	0x08008749
 80086fc:	08008749 	.word	0x08008749
 8008700:	08008749 	.word	0x08008749
 8008704:	08008749 	.word	0x08008749
 8008708:	08008749 	.word	0x08008749
 800870c:	08008749 	.word	0x08008749
 8008710:	08008749 	.word	0x08008749
 8008714:	08008741 	.word	0x08008741
 8008718:	2301      	movs	r3, #1
 800871a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800871e:	e326      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008720:	2304      	movs	r3, #4
 8008722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008726:	e322      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008728:	2308      	movs	r3, #8
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872e:	e31e      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008730:	2310      	movs	r3, #16
 8008732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008736:	e31a      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008738:	2320      	movs	r3, #32
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800873e:	e316      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008740:	2340      	movs	r3, #64	; 0x40
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008746:	e312      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008748:	2380      	movs	r3, #128	; 0x80
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800874e:	e30e      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a69      	ldr	r2, [pc, #420]	; (80088fc <UART_SetConfig+0x33c>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d130      	bne.n	80087bc <UART_SetConfig+0x1fc>
 800875a:	4b67      	ldr	r3, [pc, #412]	; (80088f8 <UART_SetConfig+0x338>)
 800875c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800875e:	f003 0307 	and.w	r3, r3, #7
 8008762:	2b05      	cmp	r3, #5
 8008764:	d826      	bhi.n	80087b4 <UART_SetConfig+0x1f4>
 8008766:	a201      	add	r2, pc, #4	; (adr r2, 800876c <UART_SetConfig+0x1ac>)
 8008768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876c:	08008785 	.word	0x08008785
 8008770:	0800878d 	.word	0x0800878d
 8008774:	08008795 	.word	0x08008795
 8008778:	0800879d 	.word	0x0800879d
 800877c:	080087a5 	.word	0x080087a5
 8008780:	080087ad 	.word	0x080087ad
 8008784:	2300      	movs	r3, #0
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878a:	e2f0      	b.n	8008d6e <UART_SetConfig+0x7ae>
 800878c:	2304      	movs	r3, #4
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008792:	e2ec      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008794:	2308      	movs	r3, #8
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800879a:	e2e8      	b.n	8008d6e <UART_SetConfig+0x7ae>
 800879c:	2310      	movs	r3, #16
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087a2:	e2e4      	b.n	8008d6e <UART_SetConfig+0x7ae>
 80087a4:	2320      	movs	r3, #32
 80087a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087aa:	e2e0      	b.n	8008d6e <UART_SetConfig+0x7ae>
 80087ac:	2340      	movs	r3, #64	; 0x40
 80087ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087b2:	e2dc      	b.n	8008d6e <UART_SetConfig+0x7ae>
 80087b4:	2380      	movs	r3, #128	; 0x80
 80087b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ba:	e2d8      	b.n	8008d6e <UART_SetConfig+0x7ae>
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a4f      	ldr	r2, [pc, #316]	; (8008900 <UART_SetConfig+0x340>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d130      	bne.n	8008828 <UART_SetConfig+0x268>
 80087c6:	4b4c      	ldr	r3, [pc, #304]	; (80088f8 <UART_SetConfig+0x338>)
 80087c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ca:	f003 0307 	and.w	r3, r3, #7
 80087ce:	2b05      	cmp	r3, #5
 80087d0:	d826      	bhi.n	8008820 <UART_SetConfig+0x260>
 80087d2:	a201      	add	r2, pc, #4	; (adr r2, 80087d8 <UART_SetConfig+0x218>)
 80087d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d8:	080087f1 	.word	0x080087f1
 80087dc:	080087f9 	.word	0x080087f9
 80087e0:	08008801 	.word	0x08008801
 80087e4:	08008809 	.word	0x08008809
 80087e8:	08008811 	.word	0x08008811
 80087ec:	08008819 	.word	0x08008819
 80087f0:	2300      	movs	r3, #0
 80087f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f6:	e2ba      	b.n	8008d6e <UART_SetConfig+0x7ae>
 80087f8:	2304      	movs	r3, #4
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fe:	e2b6      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008800:	2308      	movs	r3, #8
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008806:	e2b2      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008808:	2310      	movs	r3, #16
 800880a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800880e:	e2ae      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008810:	2320      	movs	r3, #32
 8008812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008816:	e2aa      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008818:	2340      	movs	r3, #64	; 0x40
 800881a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800881e:	e2a6      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008820:	2380      	movs	r3, #128	; 0x80
 8008822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008826:	e2a2      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a35      	ldr	r2, [pc, #212]	; (8008904 <UART_SetConfig+0x344>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d130      	bne.n	8008894 <UART_SetConfig+0x2d4>
 8008832:	4b31      	ldr	r3, [pc, #196]	; (80088f8 <UART_SetConfig+0x338>)
 8008834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008836:	f003 0307 	and.w	r3, r3, #7
 800883a:	2b05      	cmp	r3, #5
 800883c:	d826      	bhi.n	800888c <UART_SetConfig+0x2cc>
 800883e:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <UART_SetConfig+0x284>)
 8008840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008844:	0800885d 	.word	0x0800885d
 8008848:	08008865 	.word	0x08008865
 800884c:	0800886d 	.word	0x0800886d
 8008850:	08008875 	.word	0x08008875
 8008854:	0800887d 	.word	0x0800887d
 8008858:	08008885 	.word	0x08008885
 800885c:	2300      	movs	r3, #0
 800885e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008862:	e284      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008864:	2304      	movs	r3, #4
 8008866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800886a:	e280      	b.n	8008d6e <UART_SetConfig+0x7ae>
 800886c:	2308      	movs	r3, #8
 800886e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008872:	e27c      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008874:	2310      	movs	r3, #16
 8008876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800887a:	e278      	b.n	8008d6e <UART_SetConfig+0x7ae>
 800887c:	2320      	movs	r3, #32
 800887e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008882:	e274      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008884:	2340      	movs	r3, #64	; 0x40
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888a:	e270      	b.n	8008d6e <UART_SetConfig+0x7ae>
 800888c:	2380      	movs	r3, #128	; 0x80
 800888e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008892:	e26c      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a1b      	ldr	r2, [pc, #108]	; (8008908 <UART_SetConfig+0x348>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d142      	bne.n	8008924 <UART_SetConfig+0x364>
 800889e:	4b16      	ldr	r3, [pc, #88]	; (80088f8 <UART_SetConfig+0x338>)
 80088a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a2:	f003 0307 	and.w	r3, r3, #7
 80088a6:	2b05      	cmp	r3, #5
 80088a8:	d838      	bhi.n	800891c <UART_SetConfig+0x35c>
 80088aa:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <UART_SetConfig+0x2f0>)
 80088ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b0:	080088c9 	.word	0x080088c9
 80088b4:	080088d1 	.word	0x080088d1
 80088b8:	080088d9 	.word	0x080088d9
 80088bc:	080088e1 	.word	0x080088e1
 80088c0:	0800890d 	.word	0x0800890d
 80088c4:	08008915 	.word	0x08008915
 80088c8:	2300      	movs	r3, #0
 80088ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ce:	e24e      	b.n	8008d6e <UART_SetConfig+0x7ae>
 80088d0:	2304      	movs	r3, #4
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088d6:	e24a      	b.n	8008d6e <UART_SetConfig+0x7ae>
 80088d8:	2308      	movs	r3, #8
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088de:	e246      	b.n	8008d6e <UART_SetConfig+0x7ae>
 80088e0:	2310      	movs	r3, #16
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088e6:	e242      	b.n	8008d6e <UART_SetConfig+0x7ae>
 80088e8:	cfff69f3 	.word	0xcfff69f3
 80088ec:	58000c00 	.word	0x58000c00
 80088f0:	11fff4ff 	.word	0x11fff4ff
 80088f4:	40011000 	.word	0x40011000
 80088f8:	58024400 	.word	0x58024400
 80088fc:	40004400 	.word	0x40004400
 8008900:	40004800 	.word	0x40004800
 8008904:	40004c00 	.word	0x40004c00
 8008908:	40005000 	.word	0x40005000
 800890c:	2320      	movs	r3, #32
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008912:	e22c      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008914:	2340      	movs	r3, #64	; 0x40
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891a:	e228      	b.n	8008d6e <UART_SetConfig+0x7ae>
 800891c:	2380      	movs	r3, #128	; 0x80
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008922:	e224      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4ab1      	ldr	r2, [pc, #708]	; (8008bf0 <UART_SetConfig+0x630>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d176      	bne.n	8008a1c <UART_SetConfig+0x45c>
 800892e:	4bb1      	ldr	r3, [pc, #708]	; (8008bf4 <UART_SetConfig+0x634>)
 8008930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008936:	2b28      	cmp	r3, #40	; 0x28
 8008938:	d86c      	bhi.n	8008a14 <UART_SetConfig+0x454>
 800893a:	a201      	add	r2, pc, #4	; (adr r2, 8008940 <UART_SetConfig+0x380>)
 800893c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008940:	080089e5 	.word	0x080089e5
 8008944:	08008a15 	.word	0x08008a15
 8008948:	08008a15 	.word	0x08008a15
 800894c:	08008a15 	.word	0x08008a15
 8008950:	08008a15 	.word	0x08008a15
 8008954:	08008a15 	.word	0x08008a15
 8008958:	08008a15 	.word	0x08008a15
 800895c:	08008a15 	.word	0x08008a15
 8008960:	080089ed 	.word	0x080089ed
 8008964:	08008a15 	.word	0x08008a15
 8008968:	08008a15 	.word	0x08008a15
 800896c:	08008a15 	.word	0x08008a15
 8008970:	08008a15 	.word	0x08008a15
 8008974:	08008a15 	.word	0x08008a15
 8008978:	08008a15 	.word	0x08008a15
 800897c:	08008a15 	.word	0x08008a15
 8008980:	080089f5 	.word	0x080089f5
 8008984:	08008a15 	.word	0x08008a15
 8008988:	08008a15 	.word	0x08008a15
 800898c:	08008a15 	.word	0x08008a15
 8008990:	08008a15 	.word	0x08008a15
 8008994:	08008a15 	.word	0x08008a15
 8008998:	08008a15 	.word	0x08008a15
 800899c:	08008a15 	.word	0x08008a15
 80089a0:	080089fd 	.word	0x080089fd
 80089a4:	08008a15 	.word	0x08008a15
 80089a8:	08008a15 	.word	0x08008a15
 80089ac:	08008a15 	.word	0x08008a15
 80089b0:	08008a15 	.word	0x08008a15
 80089b4:	08008a15 	.word	0x08008a15
 80089b8:	08008a15 	.word	0x08008a15
 80089bc:	08008a15 	.word	0x08008a15
 80089c0:	08008a05 	.word	0x08008a05
 80089c4:	08008a15 	.word	0x08008a15
 80089c8:	08008a15 	.word	0x08008a15
 80089cc:	08008a15 	.word	0x08008a15
 80089d0:	08008a15 	.word	0x08008a15
 80089d4:	08008a15 	.word	0x08008a15
 80089d8:	08008a15 	.word	0x08008a15
 80089dc:	08008a15 	.word	0x08008a15
 80089e0:	08008a0d 	.word	0x08008a0d
 80089e4:	2301      	movs	r3, #1
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ea:	e1c0      	b.n	8008d6e <UART_SetConfig+0x7ae>
 80089ec:	2304      	movs	r3, #4
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089f2:	e1bc      	b.n	8008d6e <UART_SetConfig+0x7ae>
 80089f4:	2308      	movs	r3, #8
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089fa:	e1b8      	b.n	8008d6e <UART_SetConfig+0x7ae>
 80089fc:	2310      	movs	r3, #16
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a02:	e1b4      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008a04:	2320      	movs	r3, #32
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a0a:	e1b0      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008a0c:	2340      	movs	r3, #64	; 0x40
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a12:	e1ac      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008a14:	2380      	movs	r3, #128	; 0x80
 8008a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a1a:	e1a8      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a75      	ldr	r2, [pc, #468]	; (8008bf8 <UART_SetConfig+0x638>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d130      	bne.n	8008a88 <UART_SetConfig+0x4c8>
 8008a26:	4b73      	ldr	r3, [pc, #460]	; (8008bf4 <UART_SetConfig+0x634>)
 8008a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2a:	f003 0307 	and.w	r3, r3, #7
 8008a2e:	2b05      	cmp	r3, #5
 8008a30:	d826      	bhi.n	8008a80 <UART_SetConfig+0x4c0>
 8008a32:	a201      	add	r2, pc, #4	; (adr r2, 8008a38 <UART_SetConfig+0x478>)
 8008a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a38:	08008a51 	.word	0x08008a51
 8008a3c:	08008a59 	.word	0x08008a59
 8008a40:	08008a61 	.word	0x08008a61
 8008a44:	08008a69 	.word	0x08008a69
 8008a48:	08008a71 	.word	0x08008a71
 8008a4c:	08008a79 	.word	0x08008a79
 8008a50:	2300      	movs	r3, #0
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a56:	e18a      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008a58:	2304      	movs	r3, #4
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5e:	e186      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008a60:	2308      	movs	r3, #8
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a66:	e182      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008a68:	2310      	movs	r3, #16
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a6e:	e17e      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008a70:	2320      	movs	r3, #32
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a76:	e17a      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008a78:	2340      	movs	r3, #64	; 0x40
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a7e:	e176      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008a80:	2380      	movs	r3, #128	; 0x80
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a86:	e172      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a5b      	ldr	r2, [pc, #364]	; (8008bfc <UART_SetConfig+0x63c>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d130      	bne.n	8008af4 <UART_SetConfig+0x534>
 8008a92:	4b58      	ldr	r3, [pc, #352]	; (8008bf4 <UART_SetConfig+0x634>)
 8008a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a96:	f003 0307 	and.w	r3, r3, #7
 8008a9a:	2b05      	cmp	r3, #5
 8008a9c:	d826      	bhi.n	8008aec <UART_SetConfig+0x52c>
 8008a9e:	a201      	add	r2, pc, #4	; (adr r2, 8008aa4 <UART_SetConfig+0x4e4>)
 8008aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa4:	08008abd 	.word	0x08008abd
 8008aa8:	08008ac5 	.word	0x08008ac5
 8008aac:	08008acd 	.word	0x08008acd
 8008ab0:	08008ad5 	.word	0x08008ad5
 8008ab4:	08008add 	.word	0x08008add
 8008ab8:	08008ae5 	.word	0x08008ae5
 8008abc:	2300      	movs	r3, #0
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac2:	e154      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008ac4:	2304      	movs	r3, #4
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aca:	e150      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008acc:	2308      	movs	r3, #8
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad2:	e14c      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008ad4:	2310      	movs	r3, #16
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ada:	e148      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008adc:	2320      	movs	r3, #32
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae2:	e144      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008ae4:	2340      	movs	r3, #64	; 0x40
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aea:	e140      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008aec:	2380      	movs	r3, #128	; 0x80
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af2:	e13c      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a41      	ldr	r2, [pc, #260]	; (8008c00 <UART_SetConfig+0x640>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	f040 8082 	bne.w	8008c04 <UART_SetConfig+0x644>
 8008b00:	4b3c      	ldr	r3, [pc, #240]	; (8008bf4 <UART_SetConfig+0x634>)
 8008b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b08:	2b28      	cmp	r3, #40	; 0x28
 8008b0a:	d86d      	bhi.n	8008be8 <UART_SetConfig+0x628>
 8008b0c:	a201      	add	r2, pc, #4	; (adr r2, 8008b14 <UART_SetConfig+0x554>)
 8008b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b12:	bf00      	nop
 8008b14:	08008bb9 	.word	0x08008bb9
 8008b18:	08008be9 	.word	0x08008be9
 8008b1c:	08008be9 	.word	0x08008be9
 8008b20:	08008be9 	.word	0x08008be9
 8008b24:	08008be9 	.word	0x08008be9
 8008b28:	08008be9 	.word	0x08008be9
 8008b2c:	08008be9 	.word	0x08008be9
 8008b30:	08008be9 	.word	0x08008be9
 8008b34:	08008bc1 	.word	0x08008bc1
 8008b38:	08008be9 	.word	0x08008be9
 8008b3c:	08008be9 	.word	0x08008be9
 8008b40:	08008be9 	.word	0x08008be9
 8008b44:	08008be9 	.word	0x08008be9
 8008b48:	08008be9 	.word	0x08008be9
 8008b4c:	08008be9 	.word	0x08008be9
 8008b50:	08008be9 	.word	0x08008be9
 8008b54:	08008bc9 	.word	0x08008bc9
 8008b58:	08008be9 	.word	0x08008be9
 8008b5c:	08008be9 	.word	0x08008be9
 8008b60:	08008be9 	.word	0x08008be9
 8008b64:	08008be9 	.word	0x08008be9
 8008b68:	08008be9 	.word	0x08008be9
 8008b6c:	08008be9 	.word	0x08008be9
 8008b70:	08008be9 	.word	0x08008be9
 8008b74:	08008bd1 	.word	0x08008bd1
 8008b78:	08008be9 	.word	0x08008be9
 8008b7c:	08008be9 	.word	0x08008be9
 8008b80:	08008be9 	.word	0x08008be9
 8008b84:	08008be9 	.word	0x08008be9
 8008b88:	08008be9 	.word	0x08008be9
 8008b8c:	08008be9 	.word	0x08008be9
 8008b90:	08008be9 	.word	0x08008be9
 8008b94:	08008bd9 	.word	0x08008bd9
 8008b98:	08008be9 	.word	0x08008be9
 8008b9c:	08008be9 	.word	0x08008be9
 8008ba0:	08008be9 	.word	0x08008be9
 8008ba4:	08008be9 	.word	0x08008be9
 8008ba8:	08008be9 	.word	0x08008be9
 8008bac:	08008be9 	.word	0x08008be9
 8008bb0:	08008be9 	.word	0x08008be9
 8008bb4:	08008be1 	.word	0x08008be1
 8008bb8:	2301      	movs	r3, #1
 8008bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bbe:	e0d6      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008bc0:	2304      	movs	r3, #4
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc6:	e0d2      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008bc8:	2308      	movs	r3, #8
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bce:	e0ce      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008bd0:	2310      	movs	r3, #16
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd6:	e0ca      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008bd8:	2320      	movs	r3, #32
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bde:	e0c6      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008be0:	2340      	movs	r3, #64	; 0x40
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be6:	e0c2      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008be8:	2380      	movs	r3, #128	; 0x80
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bee:	e0be      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008bf0:	40011400 	.word	0x40011400
 8008bf4:	58024400 	.word	0x58024400
 8008bf8:	40007800 	.word	0x40007800
 8008bfc:	40007c00 	.word	0x40007c00
 8008c00:	40011800 	.word	0x40011800
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4aad      	ldr	r2, [pc, #692]	; (8008ec0 <UART_SetConfig+0x900>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d176      	bne.n	8008cfc <UART_SetConfig+0x73c>
 8008c0e:	4bad      	ldr	r3, [pc, #692]	; (8008ec4 <UART_SetConfig+0x904>)
 8008c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c16:	2b28      	cmp	r3, #40	; 0x28
 8008c18:	d86c      	bhi.n	8008cf4 <UART_SetConfig+0x734>
 8008c1a:	a201      	add	r2, pc, #4	; (adr r2, 8008c20 <UART_SetConfig+0x660>)
 8008c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c20:	08008cc5 	.word	0x08008cc5
 8008c24:	08008cf5 	.word	0x08008cf5
 8008c28:	08008cf5 	.word	0x08008cf5
 8008c2c:	08008cf5 	.word	0x08008cf5
 8008c30:	08008cf5 	.word	0x08008cf5
 8008c34:	08008cf5 	.word	0x08008cf5
 8008c38:	08008cf5 	.word	0x08008cf5
 8008c3c:	08008cf5 	.word	0x08008cf5
 8008c40:	08008ccd 	.word	0x08008ccd
 8008c44:	08008cf5 	.word	0x08008cf5
 8008c48:	08008cf5 	.word	0x08008cf5
 8008c4c:	08008cf5 	.word	0x08008cf5
 8008c50:	08008cf5 	.word	0x08008cf5
 8008c54:	08008cf5 	.word	0x08008cf5
 8008c58:	08008cf5 	.word	0x08008cf5
 8008c5c:	08008cf5 	.word	0x08008cf5
 8008c60:	08008cd5 	.word	0x08008cd5
 8008c64:	08008cf5 	.word	0x08008cf5
 8008c68:	08008cf5 	.word	0x08008cf5
 8008c6c:	08008cf5 	.word	0x08008cf5
 8008c70:	08008cf5 	.word	0x08008cf5
 8008c74:	08008cf5 	.word	0x08008cf5
 8008c78:	08008cf5 	.word	0x08008cf5
 8008c7c:	08008cf5 	.word	0x08008cf5
 8008c80:	08008cdd 	.word	0x08008cdd
 8008c84:	08008cf5 	.word	0x08008cf5
 8008c88:	08008cf5 	.word	0x08008cf5
 8008c8c:	08008cf5 	.word	0x08008cf5
 8008c90:	08008cf5 	.word	0x08008cf5
 8008c94:	08008cf5 	.word	0x08008cf5
 8008c98:	08008cf5 	.word	0x08008cf5
 8008c9c:	08008cf5 	.word	0x08008cf5
 8008ca0:	08008ce5 	.word	0x08008ce5
 8008ca4:	08008cf5 	.word	0x08008cf5
 8008ca8:	08008cf5 	.word	0x08008cf5
 8008cac:	08008cf5 	.word	0x08008cf5
 8008cb0:	08008cf5 	.word	0x08008cf5
 8008cb4:	08008cf5 	.word	0x08008cf5
 8008cb8:	08008cf5 	.word	0x08008cf5
 8008cbc:	08008cf5 	.word	0x08008cf5
 8008cc0:	08008ced 	.word	0x08008ced
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cca:	e050      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008ccc:	2304      	movs	r3, #4
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cd2:	e04c      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008cd4:	2308      	movs	r3, #8
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cda:	e048      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008cdc:	2310      	movs	r3, #16
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ce2:	e044      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008ce4:	2320      	movs	r3, #32
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cea:	e040      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008cec:	2340      	movs	r3, #64	; 0x40
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cf2:	e03c      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008cf4:	2380      	movs	r3, #128	; 0x80
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cfa:	e038      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a71      	ldr	r2, [pc, #452]	; (8008ec8 <UART_SetConfig+0x908>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d130      	bne.n	8008d68 <UART_SetConfig+0x7a8>
 8008d06:	4b6f      	ldr	r3, [pc, #444]	; (8008ec4 <UART_SetConfig+0x904>)
 8008d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d0a:	f003 0307 	and.w	r3, r3, #7
 8008d0e:	2b05      	cmp	r3, #5
 8008d10:	d826      	bhi.n	8008d60 <UART_SetConfig+0x7a0>
 8008d12:	a201      	add	r2, pc, #4	; (adr r2, 8008d18 <UART_SetConfig+0x758>)
 8008d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d18:	08008d31 	.word	0x08008d31
 8008d1c:	08008d39 	.word	0x08008d39
 8008d20:	08008d41 	.word	0x08008d41
 8008d24:	08008d49 	.word	0x08008d49
 8008d28:	08008d51 	.word	0x08008d51
 8008d2c:	08008d59 	.word	0x08008d59
 8008d30:	2302      	movs	r3, #2
 8008d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d36:	e01a      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008d38:	2304      	movs	r3, #4
 8008d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d3e:	e016      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008d40:	2308      	movs	r3, #8
 8008d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d46:	e012      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008d48:	2310      	movs	r3, #16
 8008d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d4e:	e00e      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008d50:	2320      	movs	r3, #32
 8008d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d56:	e00a      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008d58:	2340      	movs	r3, #64	; 0x40
 8008d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d5e:	e006      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008d60:	2380      	movs	r3, #128	; 0x80
 8008d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d66:	e002      	b.n	8008d6e <UART_SetConfig+0x7ae>
 8008d68:	2380      	movs	r3, #128	; 0x80
 8008d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a55      	ldr	r2, [pc, #340]	; (8008ec8 <UART_SetConfig+0x908>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	f040 80f8 	bne.w	8008f6a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d7e:	2b20      	cmp	r3, #32
 8008d80:	dc46      	bgt.n	8008e10 <UART_SetConfig+0x850>
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	db75      	blt.n	8008e72 <UART_SetConfig+0x8b2>
 8008d86:	3b02      	subs	r3, #2
 8008d88:	2b1e      	cmp	r3, #30
 8008d8a:	d872      	bhi.n	8008e72 <UART_SetConfig+0x8b2>
 8008d8c:	a201      	add	r2, pc, #4	; (adr r2, 8008d94 <UART_SetConfig+0x7d4>)
 8008d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d92:	bf00      	nop
 8008d94:	08008e17 	.word	0x08008e17
 8008d98:	08008e73 	.word	0x08008e73
 8008d9c:	08008e1f 	.word	0x08008e1f
 8008da0:	08008e73 	.word	0x08008e73
 8008da4:	08008e73 	.word	0x08008e73
 8008da8:	08008e73 	.word	0x08008e73
 8008dac:	08008e2f 	.word	0x08008e2f
 8008db0:	08008e73 	.word	0x08008e73
 8008db4:	08008e73 	.word	0x08008e73
 8008db8:	08008e73 	.word	0x08008e73
 8008dbc:	08008e73 	.word	0x08008e73
 8008dc0:	08008e73 	.word	0x08008e73
 8008dc4:	08008e73 	.word	0x08008e73
 8008dc8:	08008e73 	.word	0x08008e73
 8008dcc:	08008e3f 	.word	0x08008e3f
 8008dd0:	08008e73 	.word	0x08008e73
 8008dd4:	08008e73 	.word	0x08008e73
 8008dd8:	08008e73 	.word	0x08008e73
 8008ddc:	08008e73 	.word	0x08008e73
 8008de0:	08008e73 	.word	0x08008e73
 8008de4:	08008e73 	.word	0x08008e73
 8008de8:	08008e73 	.word	0x08008e73
 8008dec:	08008e73 	.word	0x08008e73
 8008df0:	08008e73 	.word	0x08008e73
 8008df4:	08008e73 	.word	0x08008e73
 8008df8:	08008e73 	.word	0x08008e73
 8008dfc:	08008e73 	.word	0x08008e73
 8008e00:	08008e73 	.word	0x08008e73
 8008e04:	08008e73 	.word	0x08008e73
 8008e08:	08008e73 	.word	0x08008e73
 8008e0c:	08008e65 	.word	0x08008e65
 8008e10:	2b40      	cmp	r3, #64	; 0x40
 8008e12:	d02a      	beq.n	8008e6a <UART_SetConfig+0x8aa>
 8008e14:	e02d      	b.n	8008e72 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008e16:	f7fd fd81 	bl	800691c <HAL_RCCEx_GetD3PCLK1Freq>
 8008e1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e1c:	e02f      	b.n	8008e7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fd fd90 	bl	8006948 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e2c:	e027      	b.n	8008e7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e2e:	f107 0318 	add.w	r3, r7, #24
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7fd fedc 	bl	8006bf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e3c:	e01f      	b.n	8008e7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e3e:	4b21      	ldr	r3, [pc, #132]	; (8008ec4 <UART_SetConfig+0x904>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0320 	and.w	r3, r3, #32
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d009      	beq.n	8008e5e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e4a:	4b1e      	ldr	r3, [pc, #120]	; (8008ec4 <UART_SetConfig+0x904>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	08db      	lsrs	r3, r3, #3
 8008e50:	f003 0303 	and.w	r3, r3, #3
 8008e54:	4a1d      	ldr	r2, [pc, #116]	; (8008ecc <UART_SetConfig+0x90c>)
 8008e56:	fa22 f303 	lsr.w	r3, r2, r3
 8008e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e5c:	e00f      	b.n	8008e7e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008e5e:	4b1b      	ldr	r3, [pc, #108]	; (8008ecc <UART_SetConfig+0x90c>)
 8008e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e62:	e00c      	b.n	8008e7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e64:	4b1a      	ldr	r3, [pc, #104]	; (8008ed0 <UART_SetConfig+0x910>)
 8008e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e68:	e009      	b.n	8008e7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e70:	e005      	b.n	8008e7e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008e72:	2300      	movs	r3, #0
 8008e74:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f000 81ee 	beq.w	8009262 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8a:	4a12      	ldr	r2, [pc, #72]	; (8008ed4 <UART_SetConfig+0x914>)
 8008e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e90:	461a      	mov	r2, r3
 8008e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e94:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e98:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	685a      	ldr	r2, [r3, #4]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	005b      	lsls	r3, r3, #1
 8008ea2:	4413      	add	r3, r2
 8008ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d305      	bcc.n	8008eb6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d910      	bls.n	8008ed8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008ebc:	e1d1      	b.n	8009262 <UART_SetConfig+0xca2>
 8008ebe:	bf00      	nop
 8008ec0:	40011c00 	.word	0x40011c00
 8008ec4:	58024400 	.word	0x58024400
 8008ec8:	58000c00 	.word	0x58000c00
 8008ecc:	03d09000 	.word	0x03d09000
 8008ed0:	003d0900 	.word	0x003d0900
 8008ed4:	0800b05c 	.word	0x0800b05c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eda:	2200      	movs	r2, #0
 8008edc:	60bb      	str	r3, [r7, #8]
 8008ede:	60fa      	str	r2, [r7, #12]
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	4ac0      	ldr	r2, [pc, #768]	; (80091e8 <UART_SetConfig+0xc28>)
 8008ee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	2200      	movs	r2, #0
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	607a      	str	r2, [r7, #4]
 8008ef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ef6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008efa:	f7f7 fa51 	bl	80003a0 <__aeabi_uldivmod>
 8008efe:	4602      	mov	r2, r0
 8008f00:	460b      	mov	r3, r1
 8008f02:	4610      	mov	r0, r2
 8008f04:	4619      	mov	r1, r3
 8008f06:	f04f 0200 	mov.w	r2, #0
 8008f0a:	f04f 0300 	mov.w	r3, #0
 8008f0e:	020b      	lsls	r3, r1, #8
 8008f10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f14:	0202      	lsls	r2, r0, #8
 8008f16:	6979      	ldr	r1, [r7, #20]
 8008f18:	6849      	ldr	r1, [r1, #4]
 8008f1a:	0849      	lsrs	r1, r1, #1
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	460c      	mov	r4, r1
 8008f20:	4605      	mov	r5, r0
 8008f22:	eb12 0804 	adds.w	r8, r2, r4
 8008f26:	eb43 0905 	adc.w	r9, r3, r5
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	469a      	mov	sl, r3
 8008f32:	4693      	mov	fp, r2
 8008f34:	4652      	mov	r2, sl
 8008f36:	465b      	mov	r3, fp
 8008f38:	4640      	mov	r0, r8
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	f7f7 fa30 	bl	80003a0 <__aeabi_uldivmod>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	4613      	mov	r3, r2
 8008f46:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f4e:	d308      	bcc.n	8008f62 <UART_SetConfig+0x9a2>
 8008f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f56:	d204      	bcs.n	8008f62 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f5e:	60da      	str	r2, [r3, #12]
 8008f60:	e17f      	b.n	8009262 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008f68:	e17b      	b.n	8009262 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	69db      	ldr	r3, [r3, #28]
 8008f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f72:	f040 80bd 	bne.w	80090f0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008f76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	dc48      	bgt.n	8009010 <UART_SetConfig+0xa50>
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	db7b      	blt.n	800907a <UART_SetConfig+0xaba>
 8008f82:	2b20      	cmp	r3, #32
 8008f84:	d879      	bhi.n	800907a <UART_SetConfig+0xaba>
 8008f86:	a201      	add	r2, pc, #4	; (adr r2, 8008f8c <UART_SetConfig+0x9cc>)
 8008f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8c:	08009017 	.word	0x08009017
 8008f90:	0800901f 	.word	0x0800901f
 8008f94:	0800907b 	.word	0x0800907b
 8008f98:	0800907b 	.word	0x0800907b
 8008f9c:	08009027 	.word	0x08009027
 8008fa0:	0800907b 	.word	0x0800907b
 8008fa4:	0800907b 	.word	0x0800907b
 8008fa8:	0800907b 	.word	0x0800907b
 8008fac:	08009037 	.word	0x08009037
 8008fb0:	0800907b 	.word	0x0800907b
 8008fb4:	0800907b 	.word	0x0800907b
 8008fb8:	0800907b 	.word	0x0800907b
 8008fbc:	0800907b 	.word	0x0800907b
 8008fc0:	0800907b 	.word	0x0800907b
 8008fc4:	0800907b 	.word	0x0800907b
 8008fc8:	0800907b 	.word	0x0800907b
 8008fcc:	08009047 	.word	0x08009047
 8008fd0:	0800907b 	.word	0x0800907b
 8008fd4:	0800907b 	.word	0x0800907b
 8008fd8:	0800907b 	.word	0x0800907b
 8008fdc:	0800907b 	.word	0x0800907b
 8008fe0:	0800907b 	.word	0x0800907b
 8008fe4:	0800907b 	.word	0x0800907b
 8008fe8:	0800907b 	.word	0x0800907b
 8008fec:	0800907b 	.word	0x0800907b
 8008ff0:	0800907b 	.word	0x0800907b
 8008ff4:	0800907b 	.word	0x0800907b
 8008ff8:	0800907b 	.word	0x0800907b
 8008ffc:	0800907b 	.word	0x0800907b
 8009000:	0800907b 	.word	0x0800907b
 8009004:	0800907b 	.word	0x0800907b
 8009008:	0800907b 	.word	0x0800907b
 800900c:	0800906d 	.word	0x0800906d
 8009010:	2b40      	cmp	r3, #64	; 0x40
 8009012:	d02e      	beq.n	8009072 <UART_SetConfig+0xab2>
 8009014:	e031      	b.n	800907a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009016:	f7fc fa97 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 800901a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800901c:	e033      	b.n	8009086 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800901e:	f7fc faa9 	bl	8005574 <HAL_RCC_GetPCLK2Freq>
 8009022:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009024:	e02f      	b.n	8009086 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800902a:	4618      	mov	r0, r3
 800902c:	f7fd fc8c 	bl	8006948 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009034:	e027      	b.n	8009086 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009036:	f107 0318 	add.w	r3, r7, #24
 800903a:	4618      	mov	r0, r3
 800903c:	f7fd fdd8 	bl	8006bf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009044:	e01f      	b.n	8009086 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009046:	4b69      	ldr	r3, [pc, #420]	; (80091ec <UART_SetConfig+0xc2c>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0320 	and.w	r3, r3, #32
 800904e:	2b00      	cmp	r3, #0
 8009050:	d009      	beq.n	8009066 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009052:	4b66      	ldr	r3, [pc, #408]	; (80091ec <UART_SetConfig+0xc2c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	08db      	lsrs	r3, r3, #3
 8009058:	f003 0303 	and.w	r3, r3, #3
 800905c:	4a64      	ldr	r2, [pc, #400]	; (80091f0 <UART_SetConfig+0xc30>)
 800905e:	fa22 f303 	lsr.w	r3, r2, r3
 8009062:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009064:	e00f      	b.n	8009086 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009066:	4b62      	ldr	r3, [pc, #392]	; (80091f0 <UART_SetConfig+0xc30>)
 8009068:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800906a:	e00c      	b.n	8009086 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800906c:	4b61      	ldr	r3, [pc, #388]	; (80091f4 <UART_SetConfig+0xc34>)
 800906e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009070:	e009      	b.n	8009086 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009078:	e005      	b.n	8009086 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800907a:	2300      	movs	r3, #0
 800907c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009088:	2b00      	cmp	r3, #0
 800908a:	f000 80ea 	beq.w	8009262 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009092:	4a55      	ldr	r2, [pc, #340]	; (80091e8 <UART_SetConfig+0xc28>)
 8009094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009098:	461a      	mov	r2, r3
 800909a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800909c:	fbb3 f3f2 	udiv	r3, r3, r2
 80090a0:	005a      	lsls	r2, r3, #1
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	085b      	lsrs	r3, r3, #1
 80090a8:	441a      	add	r2, r3
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80090b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b6:	2b0f      	cmp	r3, #15
 80090b8:	d916      	bls.n	80090e8 <UART_SetConfig+0xb28>
 80090ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090c0:	d212      	bcs.n	80090e8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	f023 030f 	bic.w	r3, r3, #15
 80090ca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ce:	085b      	lsrs	r3, r3, #1
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	f003 0307 	and.w	r3, r3, #7
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80090da:	4313      	orrs	r3, r2
 80090dc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80090e4:	60da      	str	r2, [r3, #12]
 80090e6:	e0bc      	b.n	8009262 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80090ee:	e0b8      	b.n	8009262 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80090f4:	2b20      	cmp	r3, #32
 80090f6:	dc4b      	bgt.n	8009190 <UART_SetConfig+0xbd0>
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f2c0 8087 	blt.w	800920c <UART_SetConfig+0xc4c>
 80090fe:	2b20      	cmp	r3, #32
 8009100:	f200 8084 	bhi.w	800920c <UART_SetConfig+0xc4c>
 8009104:	a201      	add	r2, pc, #4	; (adr r2, 800910c <UART_SetConfig+0xb4c>)
 8009106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910a:	bf00      	nop
 800910c:	08009197 	.word	0x08009197
 8009110:	0800919f 	.word	0x0800919f
 8009114:	0800920d 	.word	0x0800920d
 8009118:	0800920d 	.word	0x0800920d
 800911c:	080091a7 	.word	0x080091a7
 8009120:	0800920d 	.word	0x0800920d
 8009124:	0800920d 	.word	0x0800920d
 8009128:	0800920d 	.word	0x0800920d
 800912c:	080091b7 	.word	0x080091b7
 8009130:	0800920d 	.word	0x0800920d
 8009134:	0800920d 	.word	0x0800920d
 8009138:	0800920d 	.word	0x0800920d
 800913c:	0800920d 	.word	0x0800920d
 8009140:	0800920d 	.word	0x0800920d
 8009144:	0800920d 	.word	0x0800920d
 8009148:	0800920d 	.word	0x0800920d
 800914c:	080091c7 	.word	0x080091c7
 8009150:	0800920d 	.word	0x0800920d
 8009154:	0800920d 	.word	0x0800920d
 8009158:	0800920d 	.word	0x0800920d
 800915c:	0800920d 	.word	0x0800920d
 8009160:	0800920d 	.word	0x0800920d
 8009164:	0800920d 	.word	0x0800920d
 8009168:	0800920d 	.word	0x0800920d
 800916c:	0800920d 	.word	0x0800920d
 8009170:	0800920d 	.word	0x0800920d
 8009174:	0800920d 	.word	0x0800920d
 8009178:	0800920d 	.word	0x0800920d
 800917c:	0800920d 	.word	0x0800920d
 8009180:	0800920d 	.word	0x0800920d
 8009184:	0800920d 	.word	0x0800920d
 8009188:	0800920d 	.word	0x0800920d
 800918c:	080091ff 	.word	0x080091ff
 8009190:	2b40      	cmp	r3, #64	; 0x40
 8009192:	d037      	beq.n	8009204 <UART_SetConfig+0xc44>
 8009194:	e03a      	b.n	800920c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009196:	f7fc f9d7 	bl	8005548 <HAL_RCC_GetPCLK1Freq>
 800919a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800919c:	e03c      	b.n	8009218 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800919e:	f7fc f9e9 	bl	8005574 <HAL_RCC_GetPCLK2Freq>
 80091a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091a4:	e038      	b.n	8009218 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fd fbcc 	bl	8006948 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091b4:	e030      	b.n	8009218 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091b6:	f107 0318 	add.w	r3, r7, #24
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fd fd18 	bl	8006bf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091c4:	e028      	b.n	8009218 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091c6:	4b09      	ldr	r3, [pc, #36]	; (80091ec <UART_SetConfig+0xc2c>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 0320 	and.w	r3, r3, #32
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d012      	beq.n	80091f8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091d2:	4b06      	ldr	r3, [pc, #24]	; (80091ec <UART_SetConfig+0xc2c>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	08db      	lsrs	r3, r3, #3
 80091d8:	f003 0303 	and.w	r3, r3, #3
 80091dc:	4a04      	ldr	r2, [pc, #16]	; (80091f0 <UART_SetConfig+0xc30>)
 80091de:	fa22 f303 	lsr.w	r3, r2, r3
 80091e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091e4:	e018      	b.n	8009218 <UART_SetConfig+0xc58>
 80091e6:	bf00      	nop
 80091e8:	0800b05c 	.word	0x0800b05c
 80091ec:	58024400 	.word	0x58024400
 80091f0:	03d09000 	.word	0x03d09000
 80091f4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80091f8:	4b24      	ldr	r3, [pc, #144]	; (800928c <UART_SetConfig+0xccc>)
 80091fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091fc:	e00c      	b.n	8009218 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091fe:	4b24      	ldr	r3, [pc, #144]	; (8009290 <UART_SetConfig+0xcd0>)
 8009200:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009202:	e009      	b.n	8009218 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009208:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800920a:	e005      	b.n	8009218 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800920c:	2300      	movs	r3, #0
 800920e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009216:	bf00      	nop
    }

    if (pclk != 0U)
 8009218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800921a:	2b00      	cmp	r3, #0
 800921c:	d021      	beq.n	8009262 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009222:	4a1c      	ldr	r2, [pc, #112]	; (8009294 <UART_SetConfig+0xcd4>)
 8009224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009228:	461a      	mov	r2, r3
 800922a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800922c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	085b      	lsrs	r3, r3, #1
 8009236:	441a      	add	r2, r3
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009240:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009244:	2b0f      	cmp	r3, #15
 8009246:	d909      	bls.n	800925c <UART_SetConfig+0xc9c>
 8009248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800924e:	d205      	bcs.n	800925c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009252:	b29a      	uxth	r2, r3
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	60da      	str	r2, [r3, #12]
 800925a:	e002      	b.n	8009262 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2201      	movs	r2, #1
 8009266:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	2201      	movs	r2, #1
 800926e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	2200      	movs	r2, #0
 8009276:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	2200      	movs	r2, #0
 800927c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800927e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009282:	4618      	mov	r0, r3
 8009284:	3748      	adds	r7, #72	; 0x48
 8009286:	46bd      	mov	sp, r7
 8009288:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800928c:	03d09000 	.word	0x03d09000
 8009290:	003d0900 	.word	0x003d0900
 8009294:	0800b05c 	.word	0x0800b05c

08009298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a4:	f003 0301 	and.w	r3, r3, #1
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00a      	beq.n	80092c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	430a      	orrs	r2, r1
 80092c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c6:	f003 0302 	and.w	r3, r3, #2
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00a      	beq.n	80092e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	430a      	orrs	r2, r1
 80092e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e8:	f003 0304 	and.w	r3, r3, #4
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00a      	beq.n	8009306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	430a      	orrs	r2, r1
 8009304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930a:	f003 0308 	and.w	r3, r3, #8
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00a      	beq.n	8009328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	430a      	orrs	r2, r1
 8009326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932c:	f003 0310 	and.w	r3, r3, #16
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00a      	beq.n	800934a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	430a      	orrs	r2, r1
 8009348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934e:	f003 0320 	and.w	r3, r3, #32
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00a      	beq.n	800936c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	430a      	orrs	r2, r1
 800936a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009374:	2b00      	cmp	r3, #0
 8009376:	d01a      	beq.n	80093ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009396:	d10a      	bne.n	80093ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	430a      	orrs	r2, r1
 80093ce:	605a      	str	r2, [r3, #4]
  }
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b098      	sub	sp, #96	; 0x60
 80093e0:	af02      	add	r7, sp, #8
 80093e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093ec:	f7f8 fb04 	bl	80019f8 <HAL_GetTick>
 80093f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 0308 	and.w	r3, r3, #8
 80093fc:	2b08      	cmp	r3, #8
 80093fe:	d12f      	bne.n	8009460 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009408:	2200      	movs	r2, #0
 800940a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f88e 	bl	8009530 <UART_WaitOnFlagUntilTimeout>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d022      	beq.n	8009460 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009422:	e853 3f00 	ldrex	r3, [r3]
 8009426:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800942a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800942e:	653b      	str	r3, [r7, #80]	; 0x50
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	461a      	mov	r2, r3
 8009436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009438:	647b      	str	r3, [r7, #68]	; 0x44
 800943a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800943e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009440:	e841 2300 	strex	r3, r2, [r1]
 8009444:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e6      	bne.n	800941a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2220      	movs	r2, #32
 8009450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800945c:	2303      	movs	r3, #3
 800945e:	e063      	b.n	8009528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 0304 	and.w	r3, r3, #4
 800946a:	2b04      	cmp	r3, #4
 800946c:	d149      	bne.n	8009502 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800946e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009476:	2200      	movs	r2, #0
 8009478:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f857 	bl	8009530 <UART_WaitOnFlagUntilTimeout>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d03c      	beq.n	8009502 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	623b      	str	r3, [r7, #32]
   return(result);
 8009496:	6a3b      	ldr	r3, [r7, #32]
 8009498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800949c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	461a      	mov	r2, r3
 80094a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094a6:	633b      	str	r3, [r7, #48]	; 0x30
 80094a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ae:	e841 2300 	strex	r3, r2, [r1]
 80094b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1e6      	bne.n	8009488 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3308      	adds	r3, #8
 80094c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	e853 3f00 	ldrex	r3, [r3]
 80094c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f023 0301 	bic.w	r3, r3, #1
 80094d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3308      	adds	r3, #8
 80094d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094da:	61fa      	str	r2, [r7, #28]
 80094dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094de:	69b9      	ldr	r1, [r7, #24]
 80094e0:	69fa      	ldr	r2, [r7, #28]
 80094e2:	e841 2300 	strex	r3, r2, [r1]
 80094e6:	617b      	str	r3, [r7, #20]
   return(result);
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1e5      	bne.n	80094ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2220      	movs	r2, #32
 80094f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	e012      	b.n	8009528 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2220      	movs	r2, #32
 8009506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2220      	movs	r2, #32
 800950e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3758      	adds	r7, #88	; 0x58
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	603b      	str	r3, [r7, #0]
 800953c:	4613      	mov	r3, r2
 800953e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009540:	e049      	b.n	80095d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009548:	d045      	beq.n	80095d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800954a:	f7f8 fa55 	bl	80019f8 <HAL_GetTick>
 800954e:	4602      	mov	r2, r0
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	69ba      	ldr	r2, [r7, #24]
 8009556:	429a      	cmp	r2, r3
 8009558:	d302      	bcc.n	8009560 <UART_WaitOnFlagUntilTimeout+0x30>
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e048      	b.n	80095f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 0304 	and.w	r3, r3, #4
 800956e:	2b00      	cmp	r3, #0
 8009570:	d031      	beq.n	80095d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	69db      	ldr	r3, [r3, #28]
 8009578:	f003 0308 	and.w	r3, r3, #8
 800957c:	2b08      	cmp	r3, #8
 800957e:	d110      	bne.n	80095a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2208      	movs	r2, #8
 8009586:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 f95b 	bl	8009844 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2208      	movs	r2, #8
 8009592:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e029      	b.n	80095f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	69db      	ldr	r3, [r3, #28]
 80095a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095b0:	d111      	bne.n	80095d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 f941 	bl	8009844 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2220      	movs	r2, #32
 80095c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e00f      	b.n	80095f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	69da      	ldr	r2, [r3, #28]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	4013      	ands	r3, r2
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	bf0c      	ite	eq
 80095e6:	2301      	moveq	r3, #1
 80095e8:	2300      	movne	r3, #0
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	461a      	mov	r2, r3
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d0a6      	beq.n	8009542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
	...

08009600 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009600:	b480      	push	{r7}
 8009602:	b0a3      	sub	sp, #140	; 0x8c
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	4613      	mov	r3, r2
 800960c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	88fa      	ldrh	r2, [r7, #6]
 8009618:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	88fa      	ldrh	r2, [r7, #6]
 8009620:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2200      	movs	r2, #0
 8009628:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009632:	d10e      	bne.n	8009652 <UART_Start_Receive_IT+0x52>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d105      	bne.n	8009648 <UART_Start_Receive_IT+0x48>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009642:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009646:	e02d      	b.n	80096a4 <UART_Start_Receive_IT+0xa4>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	22ff      	movs	r2, #255	; 0xff
 800964c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009650:	e028      	b.n	80096a4 <UART_Start_Receive_IT+0xa4>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10d      	bne.n	8009676 <UART_Start_Receive_IT+0x76>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d104      	bne.n	800966c <UART_Start_Receive_IT+0x6c>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	22ff      	movs	r2, #255	; 0xff
 8009666:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800966a:	e01b      	b.n	80096a4 <UART_Start_Receive_IT+0xa4>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	227f      	movs	r2, #127	; 0x7f
 8009670:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009674:	e016      	b.n	80096a4 <UART_Start_Receive_IT+0xa4>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800967e:	d10d      	bne.n	800969c <UART_Start_Receive_IT+0x9c>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d104      	bne.n	8009692 <UART_Start_Receive_IT+0x92>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	227f      	movs	r2, #127	; 0x7f
 800968c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009690:	e008      	b.n	80096a4 <UART_Start_Receive_IT+0xa4>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	223f      	movs	r2, #63	; 0x3f
 8009696:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800969a:	e003      	b.n	80096a4 <UART_Start_Receive_IT+0xa4>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2222      	movs	r2, #34	; 0x22
 80096b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3308      	adds	r3, #8
 80096ba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096be:	e853 3f00 	ldrex	r3, [r3]
 80096c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80096c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096c6:	f043 0301 	orr.w	r3, r3, #1
 80096ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3308      	adds	r3, #8
 80096d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80096d8:	673a      	str	r2, [r7, #112]	; 0x70
 80096da:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096dc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80096de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80096e0:	e841 2300 	strex	r3, r2, [r1]
 80096e4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80096e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1e3      	bne.n	80096b4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096f4:	d14f      	bne.n	8009796 <UART_Start_Receive_IT+0x196>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096fc:	88fa      	ldrh	r2, [r7, #6]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d349      	bcc.n	8009796 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800970a:	d107      	bne.n	800971c <UART_Start_Receive_IT+0x11c>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d103      	bne.n	800971c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	4a47      	ldr	r2, [pc, #284]	; (8009834 <UART_Start_Receive_IT+0x234>)
 8009718:	675a      	str	r2, [r3, #116]	; 0x74
 800971a:	e002      	b.n	8009722 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	4a46      	ldr	r2, [pc, #280]	; (8009838 <UART_Start_Receive_IT+0x238>)
 8009720:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d01a      	beq.n	8009760 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009732:	e853 3f00 	ldrex	r3, [r3]
 8009736:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800973a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800973e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800974c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800974e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009750:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009752:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009754:	e841 2300 	strex	r3, r2, [r1]
 8009758:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800975a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1e4      	bne.n	800972a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	3308      	adds	r3, #8
 8009766:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800976a:	e853 3f00 	ldrex	r3, [r3]
 800976e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009776:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	3308      	adds	r3, #8
 800977e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009780:	64ba      	str	r2, [r7, #72]	; 0x48
 8009782:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009784:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009788:	e841 2300 	strex	r3, r2, [r1]
 800978c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800978e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1e5      	bne.n	8009760 <UART_Start_Receive_IT+0x160>
 8009794:	e046      	b.n	8009824 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800979e:	d107      	bne.n	80097b0 <UART_Start_Receive_IT+0x1b0>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d103      	bne.n	80097b0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	4a24      	ldr	r2, [pc, #144]	; (800983c <UART_Start_Receive_IT+0x23c>)
 80097ac:	675a      	str	r2, [r3, #116]	; 0x74
 80097ae:	e002      	b.n	80097b6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	4a23      	ldr	r2, [pc, #140]	; (8009840 <UART_Start_Receive_IT+0x240>)
 80097b4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d019      	beq.n	80097f2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	e853 3f00 	ldrex	r3, [r3]
 80097ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80097d2:	677b      	str	r3, [r7, #116]	; 0x74
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	461a      	mov	r2, r3
 80097da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097dc:	637b      	str	r3, [r7, #52]	; 0x34
 80097de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097e4:	e841 2300 	strex	r3, r2, [r1]
 80097e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80097ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1e6      	bne.n	80097be <UART_Start_Receive_IT+0x1be>
 80097f0:	e018      	b.n	8009824 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	e853 3f00 	ldrex	r3, [r3]
 80097fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	f043 0320 	orr.w	r3, r3, #32
 8009806:	67bb      	str	r3, [r7, #120]	; 0x78
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	461a      	mov	r2, r3
 800980e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009810:	623b      	str	r3, [r7, #32]
 8009812:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009814:	69f9      	ldr	r1, [r7, #28]
 8009816:	6a3a      	ldr	r2, [r7, #32]
 8009818:	e841 2300 	strex	r3, r2, [r1]
 800981c:	61bb      	str	r3, [r7, #24]
   return(result);
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e6      	bne.n	80097f2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	378c      	adds	r7, #140	; 0x8c
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	0800a065 	.word	0x0800a065
 8009838:	08009d05 	.word	0x08009d05
 800983c:	08009b4d 	.word	0x08009b4d
 8009840:	08009995 	.word	0x08009995

08009844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009844:	b480      	push	{r7}
 8009846:	b095      	sub	sp, #84	; 0x54
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009854:	e853 3f00 	ldrex	r3, [r3]
 8009858:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009860:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	461a      	mov	r2, r3
 8009868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800986a:	643b      	str	r3, [r7, #64]	; 0x40
 800986c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009870:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009872:	e841 2300 	strex	r3, r2, [r1]
 8009876:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1e6      	bne.n	800984c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	3308      	adds	r3, #8
 8009884:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009886:	6a3b      	ldr	r3, [r7, #32]
 8009888:	e853 3f00 	ldrex	r3, [r3]
 800988c:	61fb      	str	r3, [r7, #28]
   return(result);
 800988e:	69fa      	ldr	r2, [r7, #28]
 8009890:	4b1e      	ldr	r3, [pc, #120]	; (800990c <UART_EndRxTransfer+0xc8>)
 8009892:	4013      	ands	r3, r2
 8009894:	64bb      	str	r3, [r7, #72]	; 0x48
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3308      	adds	r3, #8
 800989c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800989e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098a6:	e841 2300 	strex	r3, r2, [r1]
 80098aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1e5      	bne.n	800987e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d118      	bne.n	80098ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	e853 3f00 	ldrex	r3, [r3]
 80098c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	f023 0310 	bic.w	r3, r3, #16
 80098ce:	647b      	str	r3, [r7, #68]	; 0x44
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	461a      	mov	r2, r3
 80098d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098d8:	61bb      	str	r3, [r7, #24]
 80098da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098dc:	6979      	ldr	r1, [r7, #20]
 80098de:	69ba      	ldr	r2, [r7, #24]
 80098e0:	e841 2300 	strex	r3, r2, [r1]
 80098e4:	613b      	str	r3, [r7, #16]
   return(result);
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1e6      	bne.n	80098ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2220      	movs	r2, #32
 80098f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009900:	bf00      	nop
 8009902:	3754      	adds	r7, #84	; 0x54
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	effffffe 	.word	0xeffffffe

08009910 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f7fe fe30 	bl	8008594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009934:	bf00      	nop
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	e853 3f00 	ldrex	r3, [r3]
 8009950:	60bb      	str	r3, [r7, #8]
   return(result);
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009958:	61fb      	str	r3, [r7, #28]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	61bb      	str	r3, [r7, #24]
 8009964:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009966:	6979      	ldr	r1, [r7, #20]
 8009968:	69ba      	ldr	r2, [r7, #24]
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	613b      	str	r3, [r7, #16]
   return(result);
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e6      	bne.n	8009944 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2220      	movs	r2, #32
 800997a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7fe fdfb 	bl	8008580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800998a:	bf00      	nop
 800998c:	3720      	adds	r7, #32
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
	...

08009994 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b09c      	sub	sp, #112	; 0x70
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80099a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099ac:	2b22      	cmp	r3, #34	; 0x22
 80099ae:	f040 80be 	bne.w	8009b2e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80099bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80099c0:	b2d9      	uxtb	r1, r3
 80099c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099cc:	400a      	ands	r2, r1
 80099ce:	b2d2      	uxtb	r2, r2
 80099d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099d6:	1c5a      	adds	r2, r3, #1
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	3b01      	subs	r3, #1
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f040 80a1 	bne.w	8009b3e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a04:	e853 3f00 	ldrex	r3, [r3]
 8009a08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a10:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a22:	e841 2300 	strex	r3, r2, [r1]
 8009a26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1e6      	bne.n	80099fc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3308      	adds	r3, #8
 8009a34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a38:	e853 3f00 	ldrex	r3, [r3]
 8009a3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a40:	f023 0301 	bic.w	r3, r3, #1
 8009a44:	667b      	str	r3, [r7, #100]	; 0x64
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3308      	adds	r3, #8
 8009a4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009a4e:	647a      	str	r2, [r7, #68]	; 0x44
 8009a50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a56:	e841 2300 	strex	r3, r2, [r1]
 8009a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1e5      	bne.n	8009a2e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2220      	movs	r2, #32
 8009a66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a33      	ldr	r2, [pc, #204]	; (8009b48 <UART_RxISR_8BIT+0x1b4>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d01f      	beq.n	8009ac0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d018      	beq.n	8009ac0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a96:	e853 3f00 	ldrex	r3, [r3]
 8009a9a:	623b      	str	r3, [r7, #32]
   return(result);
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
 8009a9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009aa2:	663b      	str	r3, [r7, #96]	; 0x60
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009aac:	633b      	str	r3, [r7, #48]	; 0x30
 8009aae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ab4:	e841 2300 	strex	r3, r2, [r1]
 8009ab8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1e6      	bne.n	8009a8e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d12e      	bne.n	8009b26 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	e853 3f00 	ldrex	r3, [r3]
 8009ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f023 0310 	bic.w	r3, r3, #16
 8009ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	461a      	mov	r2, r3
 8009aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009aec:	61fb      	str	r3, [r7, #28]
 8009aee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af0:	69b9      	ldr	r1, [r7, #24]
 8009af2:	69fa      	ldr	r2, [r7, #28]
 8009af4:	e841 2300 	strex	r3, r2, [r1]
 8009af8:	617b      	str	r3, [r7, #20]
   return(result);
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1e6      	bne.n	8009ace <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	69db      	ldr	r3, [r3, #28]
 8009b06:	f003 0310 	and.w	r3, r3, #16
 8009b0a:	2b10      	cmp	r3, #16
 8009b0c:	d103      	bne.n	8009b16 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2210      	movs	r2, #16
 8009b14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7fe fd42 	bl	80085a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b24:	e00b      	b.n	8009b3e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7f6 ff22 	bl	8000970 <HAL_UART_RxCpltCallback>
}
 8009b2c:	e007      	b.n	8009b3e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	699a      	ldr	r2, [r3, #24]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f042 0208 	orr.w	r2, r2, #8
 8009b3c:	619a      	str	r2, [r3, #24]
}
 8009b3e:	bf00      	nop
 8009b40:	3770      	adds	r7, #112	; 0x70
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	58000c00 	.word	0x58000c00

08009b4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b09c      	sub	sp, #112	; 0x70
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b5a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b64:	2b22      	cmp	r3, #34	; 0x22
 8009b66:	f040 80be 	bne.w	8009ce6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b70:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b78:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009b7a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009b7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009b82:	4013      	ands	r3, r2
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b8e:	1c9a      	adds	r2, r3, #2
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f040 80a1 	bne.w	8009cf6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bbc:	e853 3f00 	ldrex	r3, [r3]
 8009bc0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bc8:	667b      	str	r3, [r7, #100]	; 0x64
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bd2:	657b      	str	r3, [r7, #84]	; 0x54
 8009bd4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009bd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bda:	e841 2300 	strex	r3, r2, [r1]
 8009bde:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1e6      	bne.n	8009bb4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	3308      	adds	r3, #8
 8009bec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf0:	e853 3f00 	ldrex	r3, [r3]
 8009bf4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf8:	f023 0301 	bic.w	r3, r3, #1
 8009bfc:	663b      	str	r3, [r7, #96]	; 0x60
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	3308      	adds	r3, #8
 8009c04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c06:	643a      	str	r2, [r7, #64]	; 0x40
 8009c08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c0e:	e841 2300 	strex	r3, r2, [r1]
 8009c12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1e5      	bne.n	8009be6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2220      	movs	r2, #32
 8009c1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a33      	ldr	r2, [pc, #204]	; (8009d00 <UART_RxISR_16BIT+0x1b4>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d01f      	beq.n	8009c78 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d018      	beq.n	8009c78 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	e853 3f00 	ldrex	r3, [r3]
 8009c52:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	461a      	mov	r2, r3
 8009c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c66:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c6c:	e841 2300 	strex	r3, r2, [r1]
 8009c70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1e6      	bne.n	8009c46 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d12e      	bne.n	8009cde <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	e853 3f00 	ldrex	r3, [r3]
 8009c92:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	f023 0310 	bic.w	r3, r3, #16
 8009c9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ca4:	61bb      	str	r3, [r7, #24]
 8009ca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca8:	6979      	ldr	r1, [r7, #20]
 8009caa:	69ba      	ldr	r2, [r7, #24]
 8009cac:	e841 2300 	strex	r3, r2, [r1]
 8009cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1e6      	bne.n	8009c86 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	69db      	ldr	r3, [r3, #28]
 8009cbe:	f003 0310 	and.w	r3, r3, #16
 8009cc2:	2b10      	cmp	r3, #16
 8009cc4:	d103      	bne.n	8009cce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2210      	movs	r2, #16
 8009ccc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7fe fc66 	bl	80085a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009cdc:	e00b      	b.n	8009cf6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7f6 fe46 	bl	8000970 <HAL_UART_RxCpltCallback>
}
 8009ce4:	e007      	b.n	8009cf6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	699a      	ldr	r2, [r3, #24]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f042 0208 	orr.w	r2, r2, #8
 8009cf4:	619a      	str	r2, [r3, #24]
}
 8009cf6:	bf00      	nop
 8009cf8:	3770      	adds	r7, #112	; 0x70
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	58000c00 	.word	0x58000c00

08009d04 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b0ac      	sub	sp, #176	; 0xb0
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d12:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	69db      	ldr	r3, [r3, #28]
 8009d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d3a:	2b22      	cmp	r3, #34	; 0x22
 8009d3c:	f040 8180 	bne.w	800a040 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009d46:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d4a:	e123      	b.n	8009f94 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d52:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d56:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009d5a:	b2d9      	uxtb	r1, r3
 8009d5c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d66:	400a      	ands	r2, r1
 8009d68:	b2d2      	uxtb	r2, r2
 8009d6a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009d92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d96:	f003 0307 	and.w	r3, r3, #7
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d053      	beq.n	8009e46 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009da2:	f003 0301 	and.w	r3, r3, #1
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d011      	beq.n	8009dce <UART_RxISR_8BIT_FIFOEN+0xca>
 8009daa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00b      	beq.n	8009dce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dc4:	f043 0201 	orr.w	r2, r3, #1
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009dd2:	f003 0302 	and.w	r3, r3, #2
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d011      	beq.n	8009dfe <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009dde:	f003 0301 	and.w	r3, r3, #1
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00b      	beq.n	8009dfe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2202      	movs	r2, #2
 8009dec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009df4:	f043 0204 	orr.w	r2, r3, #4
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e02:	f003 0304 	and.w	r3, r3, #4
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d011      	beq.n	8009e2e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009e0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00b      	beq.n	8009e2e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2204      	movs	r2, #4
 8009e1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e24:	f043 0202 	orr.w	r2, r3, #2
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d006      	beq.n	8009e46 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7fe fbab 	bl	8008594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f040 80a0 	bne.w	8009f94 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e5c:	e853 3f00 	ldrex	r3, [r3]
 8009e60:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8009e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	461a      	mov	r2, r3
 8009e72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009e78:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009e7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009e7e:	e841 2300 	strex	r3, r2, [r1]
 8009e82:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1e4      	bne.n	8009e54 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3308      	adds	r3, #8
 8009e90:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e94:	e853 3f00 	ldrex	r3, [r3]
 8009e98:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009e9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e9c:	4b6e      	ldr	r3, [pc, #440]	; (800a058 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	3308      	adds	r3, #8
 8009eaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009eae:	66ba      	str	r2, [r7, #104]	; 0x68
 8009eb0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009eb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009eb6:	e841 2300 	strex	r3, r2, [r1]
 8009eba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1e3      	bne.n	8009e8a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2220      	movs	r2, #32
 8009ec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a60      	ldr	r2, [pc, #384]	; (800a05c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d021      	beq.n	8009f24 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d01a      	beq.n	8009f24 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ef6:	e853 3f00 	ldrex	r3, [r3]
 8009efa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009efe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f10:	657b      	str	r3, [r7, #84]	; 0x54
 8009f12:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f14:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f18:	e841 2300 	strex	r3, r2, [r1]
 8009f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1e4      	bne.n	8009eee <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d130      	bne.n	8009f8e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3a:	e853 3f00 	ldrex	r3, [r3]
 8009f3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f42:	f023 0310 	bic.w	r3, r3, #16
 8009f46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f54:	643b      	str	r3, [r7, #64]	; 0x40
 8009f56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f5c:	e841 2300 	strex	r3, r2, [r1]
 8009f60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1e4      	bne.n	8009f32 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	69db      	ldr	r3, [r3, #28]
 8009f6e:	f003 0310 	and.w	r3, r3, #16
 8009f72:	2b10      	cmp	r3, #16
 8009f74:	d103      	bne.n	8009f7e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2210      	movs	r2, #16
 8009f7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f84:	4619      	mov	r1, r3
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f7fe fb0e 	bl	80085a8 <HAL_UARTEx_RxEventCallback>
 8009f8c:	e002      	b.n	8009f94 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7f6 fcee 	bl	8000970 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f94:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d006      	beq.n	8009faa <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8009f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fa0:	f003 0320 	and.w	r3, r3, #32
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f47f aed1 	bne.w	8009d4c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009fb0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009fb4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d049      	beq.n	800a050 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009fc2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d242      	bcs.n	800a050 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3308      	adds	r3, #8
 8009fd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd2:	6a3b      	ldr	r3, [r7, #32]
 8009fd4:	e853 3f00 	ldrex	r3, [r3]
 8009fd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	3308      	adds	r3, #8
 8009fea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009fee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ff0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ff6:	e841 2300 	strex	r3, r2, [r1]
 8009ffa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1e3      	bne.n	8009fca <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a16      	ldr	r2, [pc, #88]	; (800a060 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a006:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	e853 3f00 	ldrex	r3, [r3]
 800a014:	60bb      	str	r3, [r7, #8]
   return(result);
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	f043 0320 	orr.w	r3, r3, #32
 800a01c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	461a      	mov	r2, r3
 800a026:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a02a:	61bb      	str	r3, [r7, #24]
 800a02c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02e:	6979      	ldr	r1, [r7, #20]
 800a030:	69ba      	ldr	r2, [r7, #24]
 800a032:	e841 2300 	strex	r3, r2, [r1]
 800a036:	613b      	str	r3, [r7, #16]
   return(result);
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1e4      	bne.n	800a008 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a03e:	e007      	b.n	800a050 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	699a      	ldr	r2, [r3, #24]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f042 0208 	orr.w	r2, r2, #8
 800a04e:	619a      	str	r2, [r3, #24]
}
 800a050:	bf00      	nop
 800a052:	37b0      	adds	r7, #176	; 0xb0
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	effffffe 	.word	0xeffffffe
 800a05c:	58000c00 	.word	0x58000c00
 800a060:	08009995 	.word	0x08009995

0800a064 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b0ae      	sub	sp, #184	; 0xb8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a072:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a09a:	2b22      	cmp	r3, #34	; 0x22
 800a09c:	f040 8184 	bne.w	800a3a8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a0a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a0aa:	e127      	b.n	800a2fc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a0be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a0c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a0ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d4:	1c9a      	adds	r2, r3, #2
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	69db      	ldr	r3, [r3, #28]
 800a0f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a0f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a0fa:	f003 0307 	and.w	r3, r3, #7
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d053      	beq.n	800a1aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a102:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a106:	f003 0301 	and.w	r3, r3, #1
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d011      	beq.n	800a132 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a10e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00b      	beq.n	800a132 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2201      	movs	r2, #1
 800a120:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a128:	f043 0201 	orr.w	r2, r3, #1
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a132:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a136:	f003 0302 	and.w	r3, r3, #2
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d011      	beq.n	800a162 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a13e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a142:	f003 0301 	and.w	r3, r3, #1
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00b      	beq.n	800a162 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2202      	movs	r2, #2
 800a150:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a158:	f043 0204 	orr.w	r2, r3, #4
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a162:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a166:	f003 0304 	and.w	r3, r3, #4
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d011      	beq.n	800a192 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a16e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00b      	beq.n	800a192 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2204      	movs	r2, #4
 800a180:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a188:	f043 0202 	orr.w	r2, r3, #2
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d006      	beq.n	800a1aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7fe f9f9 	bl	8008594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f040 80a2 	bne.w	800a2fc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1c0:	e853 3f00 	ldrex	r3, [r3]
 800a1c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a1c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a1da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1de:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a1e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a1e6:	e841 2300 	strex	r3, r2, [r1]
 800a1ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a1ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1e2      	bne.n	800a1b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1fc:	e853 3f00 	ldrex	r3, [r3]
 800a200:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a202:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a204:	4b6e      	ldr	r3, [pc, #440]	; (800a3c0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800a206:	4013      	ands	r3, r2
 800a208:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	3308      	adds	r3, #8
 800a212:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a216:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a218:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a21c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a21e:	e841 2300 	strex	r3, r2, [r1]
 800a222:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1e3      	bne.n	800a1f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2220      	movs	r2, #32
 800a22e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a60      	ldr	r2, [pc, #384]	; (800a3c4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d021      	beq.n	800a28c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a252:	2b00      	cmp	r3, #0
 800a254:	d01a      	beq.n	800a28c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a25e:	e853 3f00 	ldrex	r3, [r3]
 800a262:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a266:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a26a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	461a      	mov	r2, r3
 800a274:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a278:	65bb      	str	r3, [r7, #88]	; 0x58
 800a27a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a27e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a280:	e841 2300 	strex	r3, r2, [r1]
 800a284:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1e4      	bne.n	800a256 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a290:	2b01      	cmp	r3, #1
 800a292:	d130      	bne.n	800a2f6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a2:	e853 3f00 	ldrex	r3, [r3]
 800a2a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2aa:	f023 0310 	bic.w	r3, r3, #16
 800a2ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a2bc:	647b      	str	r3, [r7, #68]	; 0x44
 800a2be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a2c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2c4:	e841 2300 	strex	r3, r2, [r1]
 800a2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a2ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d1e4      	bne.n	800a29a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	f003 0310 	and.w	r3, r3, #16
 800a2da:	2b10      	cmp	r3, #16
 800a2dc:	d103      	bne.n	800a2e6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2210      	movs	r2, #16
 800a2e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7fe f95a 	bl	80085a8 <HAL_UARTEx_RxEventCallback>
 800a2f4:	e002      	b.n	800a2fc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f7f6 fb3a 	bl	8000970 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a2fc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a300:	2b00      	cmp	r3, #0
 800a302:	d006      	beq.n	800a312 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800a304:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a308:	f003 0320 	and.w	r3, r3, #32
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f47f aecd 	bne.w	800a0ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a318:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a31c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a320:	2b00      	cmp	r3, #0
 800a322:	d049      	beq.n	800a3b8 <UART_RxISR_16BIT_FIFOEN+0x354>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a32a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a32e:	429a      	cmp	r2, r3
 800a330:	d242      	bcs.n	800a3b8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3308      	adds	r3, #8
 800a338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33c:	e853 3f00 	ldrex	r3, [r3]
 800a340:	623b      	str	r3, [r7, #32]
   return(result);
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3308      	adds	r3, #8
 800a352:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a356:	633a      	str	r2, [r7, #48]	; 0x30
 800a358:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a35e:	e841 2300 	strex	r3, r2, [r1]
 800a362:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1e3      	bne.n	800a332 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a16      	ldr	r2, [pc, #88]	; (800a3c8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a36e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	e853 3f00 	ldrex	r3, [r3]
 800a37c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f043 0320 	orr.w	r3, r3, #32
 800a384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	461a      	mov	r2, r3
 800a38e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a392:	61fb      	str	r3, [r7, #28]
 800a394:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a396:	69b9      	ldr	r1, [r7, #24]
 800a398:	69fa      	ldr	r2, [r7, #28]
 800a39a:	e841 2300 	strex	r3, r2, [r1]
 800a39e:	617b      	str	r3, [r7, #20]
   return(result);
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d1e4      	bne.n	800a370 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a3a6:	e007      	b.n	800a3b8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	699a      	ldr	r2, [r3, #24]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f042 0208 	orr.w	r2, r2, #8
 800a3b6:	619a      	str	r2, [r3, #24]
}
 800a3b8:	bf00      	nop
 800a3ba:	37b8      	adds	r7, #184	; 0xb8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	effffffe 	.word	0xeffffffe
 800a3c4:	58000c00 	.word	0x58000c00
 800a3c8:	08009b4d 	.word	0x08009b4d

0800a3cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a3d4:	bf00      	nop
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a416:	2b01      	cmp	r3, #1
 800a418:	d101      	bne.n	800a41e <HAL_UARTEx_DisableFifoMode+0x16>
 800a41a:	2302      	movs	r3, #2
 800a41c:	e027      	b.n	800a46e <HAL_UARTEx_DisableFifoMode+0x66>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2201      	movs	r2, #1
 800a422:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2224      	movs	r2, #36	; 0x24
 800a42a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f022 0201 	bic.w	r2, r2, #1
 800a444:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a44c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2220      	movs	r2, #32
 800a460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3714      	adds	r7, #20
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b084      	sub	sp, #16
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d101      	bne.n	800a492 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a48e:	2302      	movs	r3, #2
 800a490:	e02d      	b.n	800a4ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2201      	movs	r2, #1
 800a496:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2224      	movs	r2, #36	; 0x24
 800a49e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f022 0201 	bic.w	r2, r2, #1
 800a4b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	683a      	ldr	r2, [r7, #0]
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f850 	bl	800a574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2220      	movs	r2, #32
 800a4e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a506:	2b01      	cmp	r3, #1
 800a508:	d101      	bne.n	800a50e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a50a:	2302      	movs	r3, #2
 800a50c:	e02d      	b.n	800a56a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2224      	movs	r2, #36	; 0x24
 800a51a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f022 0201 	bic.w	r2, r2, #1
 800a534:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	430a      	orrs	r2, r1
 800a548:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f812 	bl	800a574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2220      	movs	r2, #32
 800a55c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
	...

0800a574 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a580:	2b00      	cmp	r3, #0
 800a582:	d108      	bne.n	800a596 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a594:	e031      	b.n	800a5fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a596:	2310      	movs	r3, #16
 800a598:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a59a:	2310      	movs	r3, #16
 800a59c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	0e5b      	lsrs	r3, r3, #25
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	f003 0307 	and.w	r3, r3, #7
 800a5ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	0f5b      	lsrs	r3, r3, #29
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	f003 0307 	and.w	r3, r3, #7
 800a5bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5be:	7bbb      	ldrb	r3, [r7, #14]
 800a5c0:	7b3a      	ldrb	r2, [r7, #12]
 800a5c2:	4911      	ldr	r1, [pc, #68]	; (800a608 <UARTEx_SetNbDataToProcess+0x94>)
 800a5c4:	5c8a      	ldrb	r2, [r1, r2]
 800a5c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a5ca:	7b3a      	ldrb	r2, [r7, #12]
 800a5cc:	490f      	ldr	r1, [pc, #60]	; (800a60c <UARTEx_SetNbDataToProcess+0x98>)
 800a5ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5dc:	7bfb      	ldrb	r3, [r7, #15]
 800a5de:	7b7a      	ldrb	r2, [r7, #13]
 800a5e0:	4909      	ldr	r1, [pc, #36]	; (800a608 <UARTEx_SetNbDataToProcess+0x94>)
 800a5e2:	5c8a      	ldrb	r2, [r1, r2]
 800a5e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a5e8:	7b7a      	ldrb	r2, [r7, #13]
 800a5ea:	4908      	ldr	r1, [pc, #32]	; (800a60c <UARTEx_SetNbDataToProcess+0x98>)
 800a5ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a5fa:	bf00      	nop
 800a5fc:	3714      	adds	r7, #20
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	0800b074 	.word	0x0800b074
 800a60c:	0800b07c 	.word	0x0800b07c

0800a610 <__errno>:
 800a610:	4b01      	ldr	r3, [pc, #4]	; (800a618 <__errno+0x8>)
 800a612:	6818      	ldr	r0, [r3, #0]
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	24000018 	.word	0x24000018

0800a61c <__libc_init_array>:
 800a61c:	b570      	push	{r4, r5, r6, lr}
 800a61e:	4d0d      	ldr	r5, [pc, #52]	; (800a654 <__libc_init_array+0x38>)
 800a620:	4c0d      	ldr	r4, [pc, #52]	; (800a658 <__libc_init_array+0x3c>)
 800a622:	1b64      	subs	r4, r4, r5
 800a624:	10a4      	asrs	r4, r4, #2
 800a626:	2600      	movs	r6, #0
 800a628:	42a6      	cmp	r6, r4
 800a62a:	d109      	bne.n	800a640 <__libc_init_array+0x24>
 800a62c:	4d0b      	ldr	r5, [pc, #44]	; (800a65c <__libc_init_array+0x40>)
 800a62e:	4c0c      	ldr	r4, [pc, #48]	; (800a660 <__libc_init_array+0x44>)
 800a630:	f000 fc8e 	bl	800af50 <_init>
 800a634:	1b64      	subs	r4, r4, r5
 800a636:	10a4      	asrs	r4, r4, #2
 800a638:	2600      	movs	r6, #0
 800a63a:	42a6      	cmp	r6, r4
 800a63c:	d105      	bne.n	800a64a <__libc_init_array+0x2e>
 800a63e:	bd70      	pop	{r4, r5, r6, pc}
 800a640:	f855 3b04 	ldr.w	r3, [r5], #4
 800a644:	4798      	blx	r3
 800a646:	3601      	adds	r6, #1
 800a648:	e7ee      	b.n	800a628 <__libc_init_array+0xc>
 800a64a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a64e:	4798      	blx	r3
 800a650:	3601      	adds	r6, #1
 800a652:	e7f2      	b.n	800a63a <__libc_init_array+0x1e>
 800a654:	0800b0c0 	.word	0x0800b0c0
 800a658:	0800b0c0 	.word	0x0800b0c0
 800a65c:	0800b0c0 	.word	0x0800b0c0
 800a660:	0800b0c4 	.word	0x0800b0c4

0800a664 <memset>:
 800a664:	4402      	add	r2, r0
 800a666:	4603      	mov	r3, r0
 800a668:	4293      	cmp	r3, r2
 800a66a:	d100      	bne.n	800a66e <memset+0xa>
 800a66c:	4770      	bx	lr
 800a66e:	f803 1b01 	strb.w	r1, [r3], #1
 800a672:	e7f9      	b.n	800a668 <memset+0x4>

0800a674 <siprintf>:
 800a674:	b40e      	push	{r1, r2, r3}
 800a676:	b500      	push	{lr}
 800a678:	b09c      	sub	sp, #112	; 0x70
 800a67a:	ab1d      	add	r3, sp, #116	; 0x74
 800a67c:	9002      	str	r0, [sp, #8]
 800a67e:	9006      	str	r0, [sp, #24]
 800a680:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a684:	4809      	ldr	r0, [pc, #36]	; (800a6ac <siprintf+0x38>)
 800a686:	9107      	str	r1, [sp, #28]
 800a688:	9104      	str	r1, [sp, #16]
 800a68a:	4909      	ldr	r1, [pc, #36]	; (800a6b0 <siprintf+0x3c>)
 800a68c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a690:	9105      	str	r1, [sp, #20]
 800a692:	6800      	ldr	r0, [r0, #0]
 800a694:	9301      	str	r3, [sp, #4]
 800a696:	a902      	add	r1, sp, #8
 800a698:	f000 f868 	bl	800a76c <_svfiprintf_r>
 800a69c:	9b02      	ldr	r3, [sp, #8]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	701a      	strb	r2, [r3, #0]
 800a6a2:	b01c      	add	sp, #112	; 0x70
 800a6a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6a8:	b003      	add	sp, #12
 800a6aa:	4770      	bx	lr
 800a6ac:	24000018 	.word	0x24000018
 800a6b0:	ffff0208 	.word	0xffff0208

0800a6b4 <__ssputs_r>:
 800a6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b8:	688e      	ldr	r6, [r1, #8]
 800a6ba:	429e      	cmp	r6, r3
 800a6bc:	4682      	mov	sl, r0
 800a6be:	460c      	mov	r4, r1
 800a6c0:	4690      	mov	r8, r2
 800a6c2:	461f      	mov	r7, r3
 800a6c4:	d838      	bhi.n	800a738 <__ssputs_r+0x84>
 800a6c6:	898a      	ldrh	r2, [r1, #12]
 800a6c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6cc:	d032      	beq.n	800a734 <__ssputs_r+0x80>
 800a6ce:	6825      	ldr	r5, [r4, #0]
 800a6d0:	6909      	ldr	r1, [r1, #16]
 800a6d2:	eba5 0901 	sub.w	r9, r5, r1
 800a6d6:	6965      	ldr	r5, [r4, #20]
 800a6d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	444b      	add	r3, r9
 800a6e4:	106d      	asrs	r5, r5, #1
 800a6e6:	429d      	cmp	r5, r3
 800a6e8:	bf38      	it	cc
 800a6ea:	461d      	movcc	r5, r3
 800a6ec:	0553      	lsls	r3, r2, #21
 800a6ee:	d531      	bpl.n	800a754 <__ssputs_r+0xa0>
 800a6f0:	4629      	mov	r1, r5
 800a6f2:	f000 fb63 	bl	800adbc <_malloc_r>
 800a6f6:	4606      	mov	r6, r0
 800a6f8:	b950      	cbnz	r0, 800a710 <__ssputs_r+0x5c>
 800a6fa:	230c      	movs	r3, #12
 800a6fc:	f8ca 3000 	str.w	r3, [sl]
 800a700:	89a3      	ldrh	r3, [r4, #12]
 800a702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a706:	81a3      	strh	r3, [r4, #12]
 800a708:	f04f 30ff 	mov.w	r0, #4294967295
 800a70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a710:	6921      	ldr	r1, [r4, #16]
 800a712:	464a      	mov	r2, r9
 800a714:	f000 fabe 	bl	800ac94 <memcpy>
 800a718:	89a3      	ldrh	r3, [r4, #12]
 800a71a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a71e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a722:	81a3      	strh	r3, [r4, #12]
 800a724:	6126      	str	r6, [r4, #16]
 800a726:	6165      	str	r5, [r4, #20]
 800a728:	444e      	add	r6, r9
 800a72a:	eba5 0509 	sub.w	r5, r5, r9
 800a72e:	6026      	str	r6, [r4, #0]
 800a730:	60a5      	str	r5, [r4, #8]
 800a732:	463e      	mov	r6, r7
 800a734:	42be      	cmp	r6, r7
 800a736:	d900      	bls.n	800a73a <__ssputs_r+0x86>
 800a738:	463e      	mov	r6, r7
 800a73a:	6820      	ldr	r0, [r4, #0]
 800a73c:	4632      	mov	r2, r6
 800a73e:	4641      	mov	r1, r8
 800a740:	f000 fab6 	bl	800acb0 <memmove>
 800a744:	68a3      	ldr	r3, [r4, #8]
 800a746:	1b9b      	subs	r3, r3, r6
 800a748:	60a3      	str	r3, [r4, #8]
 800a74a:	6823      	ldr	r3, [r4, #0]
 800a74c:	4433      	add	r3, r6
 800a74e:	6023      	str	r3, [r4, #0]
 800a750:	2000      	movs	r0, #0
 800a752:	e7db      	b.n	800a70c <__ssputs_r+0x58>
 800a754:	462a      	mov	r2, r5
 800a756:	f000 fba5 	bl	800aea4 <_realloc_r>
 800a75a:	4606      	mov	r6, r0
 800a75c:	2800      	cmp	r0, #0
 800a75e:	d1e1      	bne.n	800a724 <__ssputs_r+0x70>
 800a760:	6921      	ldr	r1, [r4, #16]
 800a762:	4650      	mov	r0, sl
 800a764:	f000 fabe 	bl	800ace4 <_free_r>
 800a768:	e7c7      	b.n	800a6fa <__ssputs_r+0x46>
	...

0800a76c <_svfiprintf_r>:
 800a76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a770:	4698      	mov	r8, r3
 800a772:	898b      	ldrh	r3, [r1, #12]
 800a774:	061b      	lsls	r3, r3, #24
 800a776:	b09d      	sub	sp, #116	; 0x74
 800a778:	4607      	mov	r7, r0
 800a77a:	460d      	mov	r5, r1
 800a77c:	4614      	mov	r4, r2
 800a77e:	d50e      	bpl.n	800a79e <_svfiprintf_r+0x32>
 800a780:	690b      	ldr	r3, [r1, #16]
 800a782:	b963      	cbnz	r3, 800a79e <_svfiprintf_r+0x32>
 800a784:	2140      	movs	r1, #64	; 0x40
 800a786:	f000 fb19 	bl	800adbc <_malloc_r>
 800a78a:	6028      	str	r0, [r5, #0]
 800a78c:	6128      	str	r0, [r5, #16]
 800a78e:	b920      	cbnz	r0, 800a79a <_svfiprintf_r+0x2e>
 800a790:	230c      	movs	r3, #12
 800a792:	603b      	str	r3, [r7, #0]
 800a794:	f04f 30ff 	mov.w	r0, #4294967295
 800a798:	e0d1      	b.n	800a93e <_svfiprintf_r+0x1d2>
 800a79a:	2340      	movs	r3, #64	; 0x40
 800a79c:	616b      	str	r3, [r5, #20]
 800a79e:	2300      	movs	r3, #0
 800a7a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a2:	2320      	movs	r3, #32
 800a7a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7ac:	2330      	movs	r3, #48	; 0x30
 800a7ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a958 <_svfiprintf_r+0x1ec>
 800a7b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7b6:	f04f 0901 	mov.w	r9, #1
 800a7ba:	4623      	mov	r3, r4
 800a7bc:	469a      	mov	sl, r3
 800a7be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7c2:	b10a      	cbz	r2, 800a7c8 <_svfiprintf_r+0x5c>
 800a7c4:	2a25      	cmp	r2, #37	; 0x25
 800a7c6:	d1f9      	bne.n	800a7bc <_svfiprintf_r+0x50>
 800a7c8:	ebba 0b04 	subs.w	fp, sl, r4
 800a7cc:	d00b      	beq.n	800a7e6 <_svfiprintf_r+0x7a>
 800a7ce:	465b      	mov	r3, fp
 800a7d0:	4622      	mov	r2, r4
 800a7d2:	4629      	mov	r1, r5
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	f7ff ff6d 	bl	800a6b4 <__ssputs_r>
 800a7da:	3001      	adds	r0, #1
 800a7dc:	f000 80aa 	beq.w	800a934 <_svfiprintf_r+0x1c8>
 800a7e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7e2:	445a      	add	r2, fp
 800a7e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a7e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f000 80a2 	beq.w	800a934 <_svfiprintf_r+0x1c8>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7fa:	f10a 0a01 	add.w	sl, sl, #1
 800a7fe:	9304      	str	r3, [sp, #16]
 800a800:	9307      	str	r3, [sp, #28]
 800a802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a806:	931a      	str	r3, [sp, #104]	; 0x68
 800a808:	4654      	mov	r4, sl
 800a80a:	2205      	movs	r2, #5
 800a80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a810:	4851      	ldr	r0, [pc, #324]	; (800a958 <_svfiprintf_r+0x1ec>)
 800a812:	f7f5 fd75 	bl	8000300 <memchr>
 800a816:	9a04      	ldr	r2, [sp, #16]
 800a818:	b9d8      	cbnz	r0, 800a852 <_svfiprintf_r+0xe6>
 800a81a:	06d0      	lsls	r0, r2, #27
 800a81c:	bf44      	itt	mi
 800a81e:	2320      	movmi	r3, #32
 800a820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a824:	0711      	lsls	r1, r2, #28
 800a826:	bf44      	itt	mi
 800a828:	232b      	movmi	r3, #43	; 0x2b
 800a82a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a82e:	f89a 3000 	ldrb.w	r3, [sl]
 800a832:	2b2a      	cmp	r3, #42	; 0x2a
 800a834:	d015      	beq.n	800a862 <_svfiprintf_r+0xf6>
 800a836:	9a07      	ldr	r2, [sp, #28]
 800a838:	4654      	mov	r4, sl
 800a83a:	2000      	movs	r0, #0
 800a83c:	f04f 0c0a 	mov.w	ip, #10
 800a840:	4621      	mov	r1, r4
 800a842:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a846:	3b30      	subs	r3, #48	; 0x30
 800a848:	2b09      	cmp	r3, #9
 800a84a:	d94e      	bls.n	800a8ea <_svfiprintf_r+0x17e>
 800a84c:	b1b0      	cbz	r0, 800a87c <_svfiprintf_r+0x110>
 800a84e:	9207      	str	r2, [sp, #28]
 800a850:	e014      	b.n	800a87c <_svfiprintf_r+0x110>
 800a852:	eba0 0308 	sub.w	r3, r0, r8
 800a856:	fa09 f303 	lsl.w	r3, r9, r3
 800a85a:	4313      	orrs	r3, r2
 800a85c:	9304      	str	r3, [sp, #16]
 800a85e:	46a2      	mov	sl, r4
 800a860:	e7d2      	b.n	800a808 <_svfiprintf_r+0x9c>
 800a862:	9b03      	ldr	r3, [sp, #12]
 800a864:	1d19      	adds	r1, r3, #4
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	9103      	str	r1, [sp, #12]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	bfbb      	ittet	lt
 800a86e:	425b      	neglt	r3, r3
 800a870:	f042 0202 	orrlt.w	r2, r2, #2
 800a874:	9307      	strge	r3, [sp, #28]
 800a876:	9307      	strlt	r3, [sp, #28]
 800a878:	bfb8      	it	lt
 800a87a:	9204      	strlt	r2, [sp, #16]
 800a87c:	7823      	ldrb	r3, [r4, #0]
 800a87e:	2b2e      	cmp	r3, #46	; 0x2e
 800a880:	d10c      	bne.n	800a89c <_svfiprintf_r+0x130>
 800a882:	7863      	ldrb	r3, [r4, #1]
 800a884:	2b2a      	cmp	r3, #42	; 0x2a
 800a886:	d135      	bne.n	800a8f4 <_svfiprintf_r+0x188>
 800a888:	9b03      	ldr	r3, [sp, #12]
 800a88a:	1d1a      	adds	r2, r3, #4
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	9203      	str	r2, [sp, #12]
 800a890:	2b00      	cmp	r3, #0
 800a892:	bfb8      	it	lt
 800a894:	f04f 33ff 	movlt.w	r3, #4294967295
 800a898:	3402      	adds	r4, #2
 800a89a:	9305      	str	r3, [sp, #20]
 800a89c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a968 <_svfiprintf_r+0x1fc>
 800a8a0:	7821      	ldrb	r1, [r4, #0]
 800a8a2:	2203      	movs	r2, #3
 800a8a4:	4650      	mov	r0, sl
 800a8a6:	f7f5 fd2b 	bl	8000300 <memchr>
 800a8aa:	b140      	cbz	r0, 800a8be <_svfiprintf_r+0x152>
 800a8ac:	2340      	movs	r3, #64	; 0x40
 800a8ae:	eba0 000a 	sub.w	r0, r0, sl
 800a8b2:	fa03 f000 	lsl.w	r0, r3, r0
 800a8b6:	9b04      	ldr	r3, [sp, #16]
 800a8b8:	4303      	orrs	r3, r0
 800a8ba:	3401      	adds	r4, #1
 800a8bc:	9304      	str	r3, [sp, #16]
 800a8be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c2:	4826      	ldr	r0, [pc, #152]	; (800a95c <_svfiprintf_r+0x1f0>)
 800a8c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8c8:	2206      	movs	r2, #6
 800a8ca:	f7f5 fd19 	bl	8000300 <memchr>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d038      	beq.n	800a944 <_svfiprintf_r+0x1d8>
 800a8d2:	4b23      	ldr	r3, [pc, #140]	; (800a960 <_svfiprintf_r+0x1f4>)
 800a8d4:	bb1b      	cbnz	r3, 800a91e <_svfiprintf_r+0x1b2>
 800a8d6:	9b03      	ldr	r3, [sp, #12]
 800a8d8:	3307      	adds	r3, #7
 800a8da:	f023 0307 	bic.w	r3, r3, #7
 800a8de:	3308      	adds	r3, #8
 800a8e0:	9303      	str	r3, [sp, #12]
 800a8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e4:	4433      	add	r3, r6
 800a8e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a8e8:	e767      	b.n	800a7ba <_svfiprintf_r+0x4e>
 800a8ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	2001      	movs	r0, #1
 800a8f2:	e7a5      	b.n	800a840 <_svfiprintf_r+0xd4>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	3401      	adds	r4, #1
 800a8f8:	9305      	str	r3, [sp, #20]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	f04f 0c0a 	mov.w	ip, #10
 800a900:	4620      	mov	r0, r4
 800a902:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a906:	3a30      	subs	r2, #48	; 0x30
 800a908:	2a09      	cmp	r2, #9
 800a90a:	d903      	bls.n	800a914 <_svfiprintf_r+0x1a8>
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d0c5      	beq.n	800a89c <_svfiprintf_r+0x130>
 800a910:	9105      	str	r1, [sp, #20]
 800a912:	e7c3      	b.n	800a89c <_svfiprintf_r+0x130>
 800a914:	fb0c 2101 	mla	r1, ip, r1, r2
 800a918:	4604      	mov	r4, r0
 800a91a:	2301      	movs	r3, #1
 800a91c:	e7f0      	b.n	800a900 <_svfiprintf_r+0x194>
 800a91e:	ab03      	add	r3, sp, #12
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	462a      	mov	r2, r5
 800a924:	4b0f      	ldr	r3, [pc, #60]	; (800a964 <_svfiprintf_r+0x1f8>)
 800a926:	a904      	add	r1, sp, #16
 800a928:	4638      	mov	r0, r7
 800a92a:	f3af 8000 	nop.w
 800a92e:	1c42      	adds	r2, r0, #1
 800a930:	4606      	mov	r6, r0
 800a932:	d1d6      	bne.n	800a8e2 <_svfiprintf_r+0x176>
 800a934:	89ab      	ldrh	r3, [r5, #12]
 800a936:	065b      	lsls	r3, r3, #25
 800a938:	f53f af2c 	bmi.w	800a794 <_svfiprintf_r+0x28>
 800a93c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a93e:	b01d      	add	sp, #116	; 0x74
 800a940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a944:	ab03      	add	r3, sp, #12
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	462a      	mov	r2, r5
 800a94a:	4b06      	ldr	r3, [pc, #24]	; (800a964 <_svfiprintf_r+0x1f8>)
 800a94c:	a904      	add	r1, sp, #16
 800a94e:	4638      	mov	r0, r7
 800a950:	f000 f87a 	bl	800aa48 <_printf_i>
 800a954:	e7eb      	b.n	800a92e <_svfiprintf_r+0x1c2>
 800a956:	bf00      	nop
 800a958:	0800b084 	.word	0x0800b084
 800a95c:	0800b08e 	.word	0x0800b08e
 800a960:	00000000 	.word	0x00000000
 800a964:	0800a6b5 	.word	0x0800a6b5
 800a968:	0800b08a 	.word	0x0800b08a

0800a96c <_printf_common>:
 800a96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a970:	4616      	mov	r6, r2
 800a972:	4699      	mov	r9, r3
 800a974:	688a      	ldr	r2, [r1, #8]
 800a976:	690b      	ldr	r3, [r1, #16]
 800a978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a97c:	4293      	cmp	r3, r2
 800a97e:	bfb8      	it	lt
 800a980:	4613      	movlt	r3, r2
 800a982:	6033      	str	r3, [r6, #0]
 800a984:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a988:	4607      	mov	r7, r0
 800a98a:	460c      	mov	r4, r1
 800a98c:	b10a      	cbz	r2, 800a992 <_printf_common+0x26>
 800a98e:	3301      	adds	r3, #1
 800a990:	6033      	str	r3, [r6, #0]
 800a992:	6823      	ldr	r3, [r4, #0]
 800a994:	0699      	lsls	r1, r3, #26
 800a996:	bf42      	ittt	mi
 800a998:	6833      	ldrmi	r3, [r6, #0]
 800a99a:	3302      	addmi	r3, #2
 800a99c:	6033      	strmi	r3, [r6, #0]
 800a99e:	6825      	ldr	r5, [r4, #0]
 800a9a0:	f015 0506 	ands.w	r5, r5, #6
 800a9a4:	d106      	bne.n	800a9b4 <_printf_common+0x48>
 800a9a6:	f104 0a19 	add.w	sl, r4, #25
 800a9aa:	68e3      	ldr	r3, [r4, #12]
 800a9ac:	6832      	ldr	r2, [r6, #0]
 800a9ae:	1a9b      	subs	r3, r3, r2
 800a9b0:	42ab      	cmp	r3, r5
 800a9b2:	dc26      	bgt.n	800aa02 <_printf_common+0x96>
 800a9b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9b8:	1e13      	subs	r3, r2, #0
 800a9ba:	6822      	ldr	r2, [r4, #0]
 800a9bc:	bf18      	it	ne
 800a9be:	2301      	movne	r3, #1
 800a9c0:	0692      	lsls	r2, r2, #26
 800a9c2:	d42b      	bmi.n	800aa1c <_printf_common+0xb0>
 800a9c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9c8:	4649      	mov	r1, r9
 800a9ca:	4638      	mov	r0, r7
 800a9cc:	47c0      	blx	r8
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	d01e      	beq.n	800aa10 <_printf_common+0xa4>
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	68e5      	ldr	r5, [r4, #12]
 800a9d6:	6832      	ldr	r2, [r6, #0]
 800a9d8:	f003 0306 	and.w	r3, r3, #6
 800a9dc:	2b04      	cmp	r3, #4
 800a9de:	bf08      	it	eq
 800a9e0:	1aad      	subeq	r5, r5, r2
 800a9e2:	68a3      	ldr	r3, [r4, #8]
 800a9e4:	6922      	ldr	r2, [r4, #16]
 800a9e6:	bf0c      	ite	eq
 800a9e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9ec:	2500      	movne	r5, #0
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	bfc4      	itt	gt
 800a9f2:	1a9b      	subgt	r3, r3, r2
 800a9f4:	18ed      	addgt	r5, r5, r3
 800a9f6:	2600      	movs	r6, #0
 800a9f8:	341a      	adds	r4, #26
 800a9fa:	42b5      	cmp	r5, r6
 800a9fc:	d11a      	bne.n	800aa34 <_printf_common+0xc8>
 800a9fe:	2000      	movs	r0, #0
 800aa00:	e008      	b.n	800aa14 <_printf_common+0xa8>
 800aa02:	2301      	movs	r3, #1
 800aa04:	4652      	mov	r2, sl
 800aa06:	4649      	mov	r1, r9
 800aa08:	4638      	mov	r0, r7
 800aa0a:	47c0      	blx	r8
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	d103      	bne.n	800aa18 <_printf_common+0xac>
 800aa10:	f04f 30ff 	mov.w	r0, #4294967295
 800aa14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa18:	3501      	adds	r5, #1
 800aa1a:	e7c6      	b.n	800a9aa <_printf_common+0x3e>
 800aa1c:	18e1      	adds	r1, r4, r3
 800aa1e:	1c5a      	adds	r2, r3, #1
 800aa20:	2030      	movs	r0, #48	; 0x30
 800aa22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa26:	4422      	add	r2, r4
 800aa28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa30:	3302      	adds	r3, #2
 800aa32:	e7c7      	b.n	800a9c4 <_printf_common+0x58>
 800aa34:	2301      	movs	r3, #1
 800aa36:	4622      	mov	r2, r4
 800aa38:	4649      	mov	r1, r9
 800aa3a:	4638      	mov	r0, r7
 800aa3c:	47c0      	blx	r8
 800aa3e:	3001      	adds	r0, #1
 800aa40:	d0e6      	beq.n	800aa10 <_printf_common+0xa4>
 800aa42:	3601      	adds	r6, #1
 800aa44:	e7d9      	b.n	800a9fa <_printf_common+0x8e>
	...

0800aa48 <_printf_i>:
 800aa48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa4c:	7e0f      	ldrb	r7, [r1, #24]
 800aa4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa50:	2f78      	cmp	r7, #120	; 0x78
 800aa52:	4691      	mov	r9, r2
 800aa54:	4680      	mov	r8, r0
 800aa56:	460c      	mov	r4, r1
 800aa58:	469a      	mov	sl, r3
 800aa5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa5e:	d807      	bhi.n	800aa70 <_printf_i+0x28>
 800aa60:	2f62      	cmp	r7, #98	; 0x62
 800aa62:	d80a      	bhi.n	800aa7a <_printf_i+0x32>
 800aa64:	2f00      	cmp	r7, #0
 800aa66:	f000 80d8 	beq.w	800ac1a <_printf_i+0x1d2>
 800aa6a:	2f58      	cmp	r7, #88	; 0x58
 800aa6c:	f000 80a3 	beq.w	800abb6 <_printf_i+0x16e>
 800aa70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa78:	e03a      	b.n	800aaf0 <_printf_i+0xa8>
 800aa7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa7e:	2b15      	cmp	r3, #21
 800aa80:	d8f6      	bhi.n	800aa70 <_printf_i+0x28>
 800aa82:	a101      	add	r1, pc, #4	; (adr r1, 800aa88 <_printf_i+0x40>)
 800aa84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa88:	0800aae1 	.word	0x0800aae1
 800aa8c:	0800aaf5 	.word	0x0800aaf5
 800aa90:	0800aa71 	.word	0x0800aa71
 800aa94:	0800aa71 	.word	0x0800aa71
 800aa98:	0800aa71 	.word	0x0800aa71
 800aa9c:	0800aa71 	.word	0x0800aa71
 800aaa0:	0800aaf5 	.word	0x0800aaf5
 800aaa4:	0800aa71 	.word	0x0800aa71
 800aaa8:	0800aa71 	.word	0x0800aa71
 800aaac:	0800aa71 	.word	0x0800aa71
 800aab0:	0800aa71 	.word	0x0800aa71
 800aab4:	0800ac01 	.word	0x0800ac01
 800aab8:	0800ab25 	.word	0x0800ab25
 800aabc:	0800abe3 	.word	0x0800abe3
 800aac0:	0800aa71 	.word	0x0800aa71
 800aac4:	0800aa71 	.word	0x0800aa71
 800aac8:	0800ac23 	.word	0x0800ac23
 800aacc:	0800aa71 	.word	0x0800aa71
 800aad0:	0800ab25 	.word	0x0800ab25
 800aad4:	0800aa71 	.word	0x0800aa71
 800aad8:	0800aa71 	.word	0x0800aa71
 800aadc:	0800abeb 	.word	0x0800abeb
 800aae0:	682b      	ldr	r3, [r5, #0]
 800aae2:	1d1a      	adds	r2, r3, #4
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	602a      	str	r2, [r5, #0]
 800aae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aaec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e0a3      	b.n	800ac3c <_printf_i+0x1f4>
 800aaf4:	6820      	ldr	r0, [r4, #0]
 800aaf6:	6829      	ldr	r1, [r5, #0]
 800aaf8:	0606      	lsls	r6, r0, #24
 800aafa:	f101 0304 	add.w	r3, r1, #4
 800aafe:	d50a      	bpl.n	800ab16 <_printf_i+0xce>
 800ab00:	680e      	ldr	r6, [r1, #0]
 800ab02:	602b      	str	r3, [r5, #0]
 800ab04:	2e00      	cmp	r6, #0
 800ab06:	da03      	bge.n	800ab10 <_printf_i+0xc8>
 800ab08:	232d      	movs	r3, #45	; 0x2d
 800ab0a:	4276      	negs	r6, r6
 800ab0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab10:	485e      	ldr	r0, [pc, #376]	; (800ac8c <_printf_i+0x244>)
 800ab12:	230a      	movs	r3, #10
 800ab14:	e019      	b.n	800ab4a <_printf_i+0x102>
 800ab16:	680e      	ldr	r6, [r1, #0]
 800ab18:	602b      	str	r3, [r5, #0]
 800ab1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab1e:	bf18      	it	ne
 800ab20:	b236      	sxthne	r6, r6
 800ab22:	e7ef      	b.n	800ab04 <_printf_i+0xbc>
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	6820      	ldr	r0, [r4, #0]
 800ab28:	1d19      	adds	r1, r3, #4
 800ab2a:	6029      	str	r1, [r5, #0]
 800ab2c:	0601      	lsls	r1, r0, #24
 800ab2e:	d501      	bpl.n	800ab34 <_printf_i+0xec>
 800ab30:	681e      	ldr	r6, [r3, #0]
 800ab32:	e002      	b.n	800ab3a <_printf_i+0xf2>
 800ab34:	0646      	lsls	r6, r0, #25
 800ab36:	d5fb      	bpl.n	800ab30 <_printf_i+0xe8>
 800ab38:	881e      	ldrh	r6, [r3, #0]
 800ab3a:	4854      	ldr	r0, [pc, #336]	; (800ac8c <_printf_i+0x244>)
 800ab3c:	2f6f      	cmp	r7, #111	; 0x6f
 800ab3e:	bf0c      	ite	eq
 800ab40:	2308      	moveq	r3, #8
 800ab42:	230a      	movne	r3, #10
 800ab44:	2100      	movs	r1, #0
 800ab46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab4a:	6865      	ldr	r5, [r4, #4]
 800ab4c:	60a5      	str	r5, [r4, #8]
 800ab4e:	2d00      	cmp	r5, #0
 800ab50:	bfa2      	ittt	ge
 800ab52:	6821      	ldrge	r1, [r4, #0]
 800ab54:	f021 0104 	bicge.w	r1, r1, #4
 800ab58:	6021      	strge	r1, [r4, #0]
 800ab5a:	b90e      	cbnz	r6, 800ab60 <_printf_i+0x118>
 800ab5c:	2d00      	cmp	r5, #0
 800ab5e:	d04d      	beq.n	800abfc <_printf_i+0x1b4>
 800ab60:	4615      	mov	r5, r2
 800ab62:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab66:	fb03 6711 	mls	r7, r3, r1, r6
 800ab6a:	5dc7      	ldrb	r7, [r0, r7]
 800ab6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab70:	4637      	mov	r7, r6
 800ab72:	42bb      	cmp	r3, r7
 800ab74:	460e      	mov	r6, r1
 800ab76:	d9f4      	bls.n	800ab62 <_printf_i+0x11a>
 800ab78:	2b08      	cmp	r3, #8
 800ab7a:	d10b      	bne.n	800ab94 <_printf_i+0x14c>
 800ab7c:	6823      	ldr	r3, [r4, #0]
 800ab7e:	07de      	lsls	r6, r3, #31
 800ab80:	d508      	bpl.n	800ab94 <_printf_i+0x14c>
 800ab82:	6923      	ldr	r3, [r4, #16]
 800ab84:	6861      	ldr	r1, [r4, #4]
 800ab86:	4299      	cmp	r1, r3
 800ab88:	bfde      	ittt	le
 800ab8a:	2330      	movle	r3, #48	; 0x30
 800ab8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab90:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab94:	1b52      	subs	r2, r2, r5
 800ab96:	6122      	str	r2, [r4, #16]
 800ab98:	f8cd a000 	str.w	sl, [sp]
 800ab9c:	464b      	mov	r3, r9
 800ab9e:	aa03      	add	r2, sp, #12
 800aba0:	4621      	mov	r1, r4
 800aba2:	4640      	mov	r0, r8
 800aba4:	f7ff fee2 	bl	800a96c <_printf_common>
 800aba8:	3001      	adds	r0, #1
 800abaa:	d14c      	bne.n	800ac46 <_printf_i+0x1fe>
 800abac:	f04f 30ff 	mov.w	r0, #4294967295
 800abb0:	b004      	add	sp, #16
 800abb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb6:	4835      	ldr	r0, [pc, #212]	; (800ac8c <_printf_i+0x244>)
 800abb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800abbc:	6829      	ldr	r1, [r5, #0]
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	f851 6b04 	ldr.w	r6, [r1], #4
 800abc4:	6029      	str	r1, [r5, #0]
 800abc6:	061d      	lsls	r5, r3, #24
 800abc8:	d514      	bpl.n	800abf4 <_printf_i+0x1ac>
 800abca:	07df      	lsls	r7, r3, #31
 800abcc:	bf44      	itt	mi
 800abce:	f043 0320 	orrmi.w	r3, r3, #32
 800abd2:	6023      	strmi	r3, [r4, #0]
 800abd4:	b91e      	cbnz	r6, 800abde <_printf_i+0x196>
 800abd6:	6823      	ldr	r3, [r4, #0]
 800abd8:	f023 0320 	bic.w	r3, r3, #32
 800abdc:	6023      	str	r3, [r4, #0]
 800abde:	2310      	movs	r3, #16
 800abe0:	e7b0      	b.n	800ab44 <_printf_i+0xfc>
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	f043 0320 	orr.w	r3, r3, #32
 800abe8:	6023      	str	r3, [r4, #0]
 800abea:	2378      	movs	r3, #120	; 0x78
 800abec:	4828      	ldr	r0, [pc, #160]	; (800ac90 <_printf_i+0x248>)
 800abee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abf2:	e7e3      	b.n	800abbc <_printf_i+0x174>
 800abf4:	0659      	lsls	r1, r3, #25
 800abf6:	bf48      	it	mi
 800abf8:	b2b6      	uxthmi	r6, r6
 800abfa:	e7e6      	b.n	800abca <_printf_i+0x182>
 800abfc:	4615      	mov	r5, r2
 800abfe:	e7bb      	b.n	800ab78 <_printf_i+0x130>
 800ac00:	682b      	ldr	r3, [r5, #0]
 800ac02:	6826      	ldr	r6, [r4, #0]
 800ac04:	6961      	ldr	r1, [r4, #20]
 800ac06:	1d18      	adds	r0, r3, #4
 800ac08:	6028      	str	r0, [r5, #0]
 800ac0a:	0635      	lsls	r5, r6, #24
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	d501      	bpl.n	800ac14 <_printf_i+0x1cc>
 800ac10:	6019      	str	r1, [r3, #0]
 800ac12:	e002      	b.n	800ac1a <_printf_i+0x1d2>
 800ac14:	0670      	lsls	r0, r6, #25
 800ac16:	d5fb      	bpl.n	800ac10 <_printf_i+0x1c8>
 800ac18:	8019      	strh	r1, [r3, #0]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	6123      	str	r3, [r4, #16]
 800ac1e:	4615      	mov	r5, r2
 800ac20:	e7ba      	b.n	800ab98 <_printf_i+0x150>
 800ac22:	682b      	ldr	r3, [r5, #0]
 800ac24:	1d1a      	adds	r2, r3, #4
 800ac26:	602a      	str	r2, [r5, #0]
 800ac28:	681d      	ldr	r5, [r3, #0]
 800ac2a:	6862      	ldr	r2, [r4, #4]
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	4628      	mov	r0, r5
 800ac30:	f7f5 fb66 	bl	8000300 <memchr>
 800ac34:	b108      	cbz	r0, 800ac3a <_printf_i+0x1f2>
 800ac36:	1b40      	subs	r0, r0, r5
 800ac38:	6060      	str	r0, [r4, #4]
 800ac3a:	6863      	ldr	r3, [r4, #4]
 800ac3c:	6123      	str	r3, [r4, #16]
 800ac3e:	2300      	movs	r3, #0
 800ac40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac44:	e7a8      	b.n	800ab98 <_printf_i+0x150>
 800ac46:	6923      	ldr	r3, [r4, #16]
 800ac48:	462a      	mov	r2, r5
 800ac4a:	4649      	mov	r1, r9
 800ac4c:	4640      	mov	r0, r8
 800ac4e:	47d0      	blx	sl
 800ac50:	3001      	adds	r0, #1
 800ac52:	d0ab      	beq.n	800abac <_printf_i+0x164>
 800ac54:	6823      	ldr	r3, [r4, #0]
 800ac56:	079b      	lsls	r3, r3, #30
 800ac58:	d413      	bmi.n	800ac82 <_printf_i+0x23a>
 800ac5a:	68e0      	ldr	r0, [r4, #12]
 800ac5c:	9b03      	ldr	r3, [sp, #12]
 800ac5e:	4298      	cmp	r0, r3
 800ac60:	bfb8      	it	lt
 800ac62:	4618      	movlt	r0, r3
 800ac64:	e7a4      	b.n	800abb0 <_printf_i+0x168>
 800ac66:	2301      	movs	r3, #1
 800ac68:	4632      	mov	r2, r6
 800ac6a:	4649      	mov	r1, r9
 800ac6c:	4640      	mov	r0, r8
 800ac6e:	47d0      	blx	sl
 800ac70:	3001      	adds	r0, #1
 800ac72:	d09b      	beq.n	800abac <_printf_i+0x164>
 800ac74:	3501      	adds	r5, #1
 800ac76:	68e3      	ldr	r3, [r4, #12]
 800ac78:	9903      	ldr	r1, [sp, #12]
 800ac7a:	1a5b      	subs	r3, r3, r1
 800ac7c:	42ab      	cmp	r3, r5
 800ac7e:	dcf2      	bgt.n	800ac66 <_printf_i+0x21e>
 800ac80:	e7eb      	b.n	800ac5a <_printf_i+0x212>
 800ac82:	2500      	movs	r5, #0
 800ac84:	f104 0619 	add.w	r6, r4, #25
 800ac88:	e7f5      	b.n	800ac76 <_printf_i+0x22e>
 800ac8a:	bf00      	nop
 800ac8c:	0800b095 	.word	0x0800b095
 800ac90:	0800b0a6 	.word	0x0800b0a6

0800ac94 <memcpy>:
 800ac94:	440a      	add	r2, r1
 800ac96:	4291      	cmp	r1, r2
 800ac98:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac9c:	d100      	bne.n	800aca0 <memcpy+0xc>
 800ac9e:	4770      	bx	lr
 800aca0:	b510      	push	{r4, lr}
 800aca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acaa:	4291      	cmp	r1, r2
 800acac:	d1f9      	bne.n	800aca2 <memcpy+0xe>
 800acae:	bd10      	pop	{r4, pc}

0800acb0 <memmove>:
 800acb0:	4288      	cmp	r0, r1
 800acb2:	b510      	push	{r4, lr}
 800acb4:	eb01 0402 	add.w	r4, r1, r2
 800acb8:	d902      	bls.n	800acc0 <memmove+0x10>
 800acba:	4284      	cmp	r4, r0
 800acbc:	4623      	mov	r3, r4
 800acbe:	d807      	bhi.n	800acd0 <memmove+0x20>
 800acc0:	1e43      	subs	r3, r0, #1
 800acc2:	42a1      	cmp	r1, r4
 800acc4:	d008      	beq.n	800acd8 <memmove+0x28>
 800acc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acce:	e7f8      	b.n	800acc2 <memmove+0x12>
 800acd0:	4402      	add	r2, r0
 800acd2:	4601      	mov	r1, r0
 800acd4:	428a      	cmp	r2, r1
 800acd6:	d100      	bne.n	800acda <memmove+0x2a>
 800acd8:	bd10      	pop	{r4, pc}
 800acda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ace2:	e7f7      	b.n	800acd4 <memmove+0x24>

0800ace4 <_free_r>:
 800ace4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ace6:	2900      	cmp	r1, #0
 800ace8:	d044      	beq.n	800ad74 <_free_r+0x90>
 800acea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acee:	9001      	str	r0, [sp, #4]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f1a1 0404 	sub.w	r4, r1, #4
 800acf6:	bfb8      	it	lt
 800acf8:	18e4      	addlt	r4, r4, r3
 800acfa:	f000 f913 	bl	800af24 <__malloc_lock>
 800acfe:	4a1e      	ldr	r2, [pc, #120]	; (800ad78 <_free_r+0x94>)
 800ad00:	9801      	ldr	r0, [sp, #4]
 800ad02:	6813      	ldr	r3, [r2, #0]
 800ad04:	b933      	cbnz	r3, 800ad14 <_free_r+0x30>
 800ad06:	6063      	str	r3, [r4, #4]
 800ad08:	6014      	str	r4, [r2, #0]
 800ad0a:	b003      	add	sp, #12
 800ad0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad10:	f000 b90e 	b.w	800af30 <__malloc_unlock>
 800ad14:	42a3      	cmp	r3, r4
 800ad16:	d908      	bls.n	800ad2a <_free_r+0x46>
 800ad18:	6825      	ldr	r5, [r4, #0]
 800ad1a:	1961      	adds	r1, r4, r5
 800ad1c:	428b      	cmp	r3, r1
 800ad1e:	bf01      	itttt	eq
 800ad20:	6819      	ldreq	r1, [r3, #0]
 800ad22:	685b      	ldreq	r3, [r3, #4]
 800ad24:	1949      	addeq	r1, r1, r5
 800ad26:	6021      	streq	r1, [r4, #0]
 800ad28:	e7ed      	b.n	800ad06 <_free_r+0x22>
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	b10b      	cbz	r3, 800ad34 <_free_r+0x50>
 800ad30:	42a3      	cmp	r3, r4
 800ad32:	d9fa      	bls.n	800ad2a <_free_r+0x46>
 800ad34:	6811      	ldr	r1, [r2, #0]
 800ad36:	1855      	adds	r5, r2, r1
 800ad38:	42a5      	cmp	r5, r4
 800ad3a:	d10b      	bne.n	800ad54 <_free_r+0x70>
 800ad3c:	6824      	ldr	r4, [r4, #0]
 800ad3e:	4421      	add	r1, r4
 800ad40:	1854      	adds	r4, r2, r1
 800ad42:	42a3      	cmp	r3, r4
 800ad44:	6011      	str	r1, [r2, #0]
 800ad46:	d1e0      	bne.n	800ad0a <_free_r+0x26>
 800ad48:	681c      	ldr	r4, [r3, #0]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	6053      	str	r3, [r2, #4]
 800ad4e:	4421      	add	r1, r4
 800ad50:	6011      	str	r1, [r2, #0]
 800ad52:	e7da      	b.n	800ad0a <_free_r+0x26>
 800ad54:	d902      	bls.n	800ad5c <_free_r+0x78>
 800ad56:	230c      	movs	r3, #12
 800ad58:	6003      	str	r3, [r0, #0]
 800ad5a:	e7d6      	b.n	800ad0a <_free_r+0x26>
 800ad5c:	6825      	ldr	r5, [r4, #0]
 800ad5e:	1961      	adds	r1, r4, r5
 800ad60:	428b      	cmp	r3, r1
 800ad62:	bf04      	itt	eq
 800ad64:	6819      	ldreq	r1, [r3, #0]
 800ad66:	685b      	ldreq	r3, [r3, #4]
 800ad68:	6063      	str	r3, [r4, #4]
 800ad6a:	bf04      	itt	eq
 800ad6c:	1949      	addeq	r1, r1, r5
 800ad6e:	6021      	streq	r1, [r4, #0]
 800ad70:	6054      	str	r4, [r2, #4]
 800ad72:	e7ca      	b.n	800ad0a <_free_r+0x26>
 800ad74:	b003      	add	sp, #12
 800ad76:	bd30      	pop	{r4, r5, pc}
 800ad78:	24000268 	.word	0x24000268

0800ad7c <sbrk_aligned>:
 800ad7c:	b570      	push	{r4, r5, r6, lr}
 800ad7e:	4e0e      	ldr	r6, [pc, #56]	; (800adb8 <sbrk_aligned+0x3c>)
 800ad80:	460c      	mov	r4, r1
 800ad82:	6831      	ldr	r1, [r6, #0]
 800ad84:	4605      	mov	r5, r0
 800ad86:	b911      	cbnz	r1, 800ad8e <sbrk_aligned+0x12>
 800ad88:	f000 f8bc 	bl	800af04 <_sbrk_r>
 800ad8c:	6030      	str	r0, [r6, #0]
 800ad8e:	4621      	mov	r1, r4
 800ad90:	4628      	mov	r0, r5
 800ad92:	f000 f8b7 	bl	800af04 <_sbrk_r>
 800ad96:	1c43      	adds	r3, r0, #1
 800ad98:	d00a      	beq.n	800adb0 <sbrk_aligned+0x34>
 800ad9a:	1cc4      	adds	r4, r0, #3
 800ad9c:	f024 0403 	bic.w	r4, r4, #3
 800ada0:	42a0      	cmp	r0, r4
 800ada2:	d007      	beq.n	800adb4 <sbrk_aligned+0x38>
 800ada4:	1a21      	subs	r1, r4, r0
 800ada6:	4628      	mov	r0, r5
 800ada8:	f000 f8ac 	bl	800af04 <_sbrk_r>
 800adac:	3001      	adds	r0, #1
 800adae:	d101      	bne.n	800adb4 <sbrk_aligned+0x38>
 800adb0:	f04f 34ff 	mov.w	r4, #4294967295
 800adb4:	4620      	mov	r0, r4
 800adb6:	bd70      	pop	{r4, r5, r6, pc}
 800adb8:	2400026c 	.word	0x2400026c

0800adbc <_malloc_r>:
 800adbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adc0:	1ccd      	adds	r5, r1, #3
 800adc2:	f025 0503 	bic.w	r5, r5, #3
 800adc6:	3508      	adds	r5, #8
 800adc8:	2d0c      	cmp	r5, #12
 800adca:	bf38      	it	cc
 800adcc:	250c      	movcc	r5, #12
 800adce:	2d00      	cmp	r5, #0
 800add0:	4607      	mov	r7, r0
 800add2:	db01      	blt.n	800add8 <_malloc_r+0x1c>
 800add4:	42a9      	cmp	r1, r5
 800add6:	d905      	bls.n	800ade4 <_malloc_r+0x28>
 800add8:	230c      	movs	r3, #12
 800adda:	603b      	str	r3, [r7, #0]
 800addc:	2600      	movs	r6, #0
 800adde:	4630      	mov	r0, r6
 800ade0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ade4:	4e2e      	ldr	r6, [pc, #184]	; (800aea0 <_malloc_r+0xe4>)
 800ade6:	f000 f89d 	bl	800af24 <__malloc_lock>
 800adea:	6833      	ldr	r3, [r6, #0]
 800adec:	461c      	mov	r4, r3
 800adee:	bb34      	cbnz	r4, 800ae3e <_malloc_r+0x82>
 800adf0:	4629      	mov	r1, r5
 800adf2:	4638      	mov	r0, r7
 800adf4:	f7ff ffc2 	bl	800ad7c <sbrk_aligned>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	4604      	mov	r4, r0
 800adfc:	d14d      	bne.n	800ae9a <_malloc_r+0xde>
 800adfe:	6834      	ldr	r4, [r6, #0]
 800ae00:	4626      	mov	r6, r4
 800ae02:	2e00      	cmp	r6, #0
 800ae04:	d140      	bne.n	800ae88 <_malloc_r+0xcc>
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	4631      	mov	r1, r6
 800ae0a:	4638      	mov	r0, r7
 800ae0c:	eb04 0803 	add.w	r8, r4, r3
 800ae10:	f000 f878 	bl	800af04 <_sbrk_r>
 800ae14:	4580      	cmp	r8, r0
 800ae16:	d13a      	bne.n	800ae8e <_malloc_r+0xd2>
 800ae18:	6821      	ldr	r1, [r4, #0]
 800ae1a:	3503      	adds	r5, #3
 800ae1c:	1a6d      	subs	r5, r5, r1
 800ae1e:	f025 0503 	bic.w	r5, r5, #3
 800ae22:	3508      	adds	r5, #8
 800ae24:	2d0c      	cmp	r5, #12
 800ae26:	bf38      	it	cc
 800ae28:	250c      	movcc	r5, #12
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	4638      	mov	r0, r7
 800ae2e:	f7ff ffa5 	bl	800ad7c <sbrk_aligned>
 800ae32:	3001      	adds	r0, #1
 800ae34:	d02b      	beq.n	800ae8e <_malloc_r+0xd2>
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	442b      	add	r3, r5
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	e00e      	b.n	800ae5c <_malloc_r+0xa0>
 800ae3e:	6822      	ldr	r2, [r4, #0]
 800ae40:	1b52      	subs	r2, r2, r5
 800ae42:	d41e      	bmi.n	800ae82 <_malloc_r+0xc6>
 800ae44:	2a0b      	cmp	r2, #11
 800ae46:	d916      	bls.n	800ae76 <_malloc_r+0xba>
 800ae48:	1961      	adds	r1, r4, r5
 800ae4a:	42a3      	cmp	r3, r4
 800ae4c:	6025      	str	r5, [r4, #0]
 800ae4e:	bf18      	it	ne
 800ae50:	6059      	strne	r1, [r3, #4]
 800ae52:	6863      	ldr	r3, [r4, #4]
 800ae54:	bf08      	it	eq
 800ae56:	6031      	streq	r1, [r6, #0]
 800ae58:	5162      	str	r2, [r4, r5]
 800ae5a:	604b      	str	r3, [r1, #4]
 800ae5c:	4638      	mov	r0, r7
 800ae5e:	f104 060b 	add.w	r6, r4, #11
 800ae62:	f000 f865 	bl	800af30 <__malloc_unlock>
 800ae66:	f026 0607 	bic.w	r6, r6, #7
 800ae6a:	1d23      	adds	r3, r4, #4
 800ae6c:	1af2      	subs	r2, r6, r3
 800ae6e:	d0b6      	beq.n	800adde <_malloc_r+0x22>
 800ae70:	1b9b      	subs	r3, r3, r6
 800ae72:	50a3      	str	r3, [r4, r2]
 800ae74:	e7b3      	b.n	800adde <_malloc_r+0x22>
 800ae76:	6862      	ldr	r2, [r4, #4]
 800ae78:	42a3      	cmp	r3, r4
 800ae7a:	bf0c      	ite	eq
 800ae7c:	6032      	streq	r2, [r6, #0]
 800ae7e:	605a      	strne	r2, [r3, #4]
 800ae80:	e7ec      	b.n	800ae5c <_malloc_r+0xa0>
 800ae82:	4623      	mov	r3, r4
 800ae84:	6864      	ldr	r4, [r4, #4]
 800ae86:	e7b2      	b.n	800adee <_malloc_r+0x32>
 800ae88:	4634      	mov	r4, r6
 800ae8a:	6876      	ldr	r6, [r6, #4]
 800ae8c:	e7b9      	b.n	800ae02 <_malloc_r+0x46>
 800ae8e:	230c      	movs	r3, #12
 800ae90:	603b      	str	r3, [r7, #0]
 800ae92:	4638      	mov	r0, r7
 800ae94:	f000 f84c 	bl	800af30 <__malloc_unlock>
 800ae98:	e7a1      	b.n	800adde <_malloc_r+0x22>
 800ae9a:	6025      	str	r5, [r4, #0]
 800ae9c:	e7de      	b.n	800ae5c <_malloc_r+0xa0>
 800ae9e:	bf00      	nop
 800aea0:	24000268 	.word	0x24000268

0800aea4 <_realloc_r>:
 800aea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aea8:	4680      	mov	r8, r0
 800aeaa:	4614      	mov	r4, r2
 800aeac:	460e      	mov	r6, r1
 800aeae:	b921      	cbnz	r1, 800aeba <_realloc_r+0x16>
 800aeb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	f7ff bf81 	b.w	800adbc <_malloc_r>
 800aeba:	b92a      	cbnz	r2, 800aec8 <_realloc_r+0x24>
 800aebc:	f7ff ff12 	bl	800ace4 <_free_r>
 800aec0:	4625      	mov	r5, r4
 800aec2:	4628      	mov	r0, r5
 800aec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec8:	f000 f838 	bl	800af3c <_malloc_usable_size_r>
 800aecc:	4284      	cmp	r4, r0
 800aece:	4607      	mov	r7, r0
 800aed0:	d802      	bhi.n	800aed8 <_realloc_r+0x34>
 800aed2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aed6:	d812      	bhi.n	800aefe <_realloc_r+0x5a>
 800aed8:	4621      	mov	r1, r4
 800aeda:	4640      	mov	r0, r8
 800aedc:	f7ff ff6e 	bl	800adbc <_malloc_r>
 800aee0:	4605      	mov	r5, r0
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d0ed      	beq.n	800aec2 <_realloc_r+0x1e>
 800aee6:	42bc      	cmp	r4, r7
 800aee8:	4622      	mov	r2, r4
 800aeea:	4631      	mov	r1, r6
 800aeec:	bf28      	it	cs
 800aeee:	463a      	movcs	r2, r7
 800aef0:	f7ff fed0 	bl	800ac94 <memcpy>
 800aef4:	4631      	mov	r1, r6
 800aef6:	4640      	mov	r0, r8
 800aef8:	f7ff fef4 	bl	800ace4 <_free_r>
 800aefc:	e7e1      	b.n	800aec2 <_realloc_r+0x1e>
 800aefe:	4635      	mov	r5, r6
 800af00:	e7df      	b.n	800aec2 <_realloc_r+0x1e>
	...

0800af04 <_sbrk_r>:
 800af04:	b538      	push	{r3, r4, r5, lr}
 800af06:	4d06      	ldr	r5, [pc, #24]	; (800af20 <_sbrk_r+0x1c>)
 800af08:	2300      	movs	r3, #0
 800af0a:	4604      	mov	r4, r0
 800af0c:	4608      	mov	r0, r1
 800af0e:	602b      	str	r3, [r5, #0]
 800af10:	f7f6 fc14 	bl	800173c <_sbrk>
 800af14:	1c43      	adds	r3, r0, #1
 800af16:	d102      	bne.n	800af1e <_sbrk_r+0x1a>
 800af18:	682b      	ldr	r3, [r5, #0]
 800af1a:	b103      	cbz	r3, 800af1e <_sbrk_r+0x1a>
 800af1c:	6023      	str	r3, [r4, #0]
 800af1e:	bd38      	pop	{r3, r4, r5, pc}
 800af20:	24000270 	.word	0x24000270

0800af24 <__malloc_lock>:
 800af24:	4801      	ldr	r0, [pc, #4]	; (800af2c <__malloc_lock+0x8>)
 800af26:	f000 b811 	b.w	800af4c <__retarget_lock_acquire_recursive>
 800af2a:	bf00      	nop
 800af2c:	24000274 	.word	0x24000274

0800af30 <__malloc_unlock>:
 800af30:	4801      	ldr	r0, [pc, #4]	; (800af38 <__malloc_unlock+0x8>)
 800af32:	f000 b80c 	b.w	800af4e <__retarget_lock_release_recursive>
 800af36:	bf00      	nop
 800af38:	24000274 	.word	0x24000274

0800af3c <_malloc_usable_size_r>:
 800af3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af40:	1f18      	subs	r0, r3, #4
 800af42:	2b00      	cmp	r3, #0
 800af44:	bfbc      	itt	lt
 800af46:	580b      	ldrlt	r3, [r1, r0]
 800af48:	18c0      	addlt	r0, r0, r3
 800af4a:	4770      	bx	lr

0800af4c <__retarget_lock_acquire_recursive>:
 800af4c:	4770      	bx	lr

0800af4e <__retarget_lock_release_recursive>:
 800af4e:	4770      	bx	lr

0800af50 <_init>:
 800af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af52:	bf00      	nop
 800af54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af56:	bc08      	pop	{r3}
 800af58:	469e      	mov	lr, r3
 800af5a:	4770      	bx	lr

0800af5c <_fini>:
 800af5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5e:	bf00      	nop
 800af60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af62:	bc08      	pop	{r3}
 800af64:	469e      	mov	lr, r3
 800af66:	4770      	bx	lr
