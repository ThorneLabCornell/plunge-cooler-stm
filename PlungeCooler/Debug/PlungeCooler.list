
PlungeCooler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000959c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800984c  0800984c  0001984c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080098fc  080098fc  000198fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009904  08009904  00019904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009908  08009908  00019908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800990c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00009fd4  24000070  08009978  00020070  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400a044  08009978  0002a044  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 11 .debug_info   000166d8  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000028c4  00000000  00000000  000367b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001140  00000000  00000000  00039080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000d87  00000000  00000000  0003a1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00030bc4  00000000  00000000  0003af47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017f9a  00000000  00000000  0006bb0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001400dd  00000000  00000000  00083aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004e58  00000000  00000000  001c3b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  001c89dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000070 	.word	0x24000070
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009834 	.word	0x08009834

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000074 	.word	0x24000074
 80002ec:	08009834 	.word	0x08009834

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <dispense>:
 */
#include "globals.h"
#include "main.h"
#include <stdio.h>

void dispense(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
//	char a[] = "DEPOSITING!!!\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)a, strlen(a), HAL_MAX_DELAY);
	HAL_GPIO_WritePin(DROP_GPIO_Port, DROP_Pin, 1); //Dispense drop
 80006a2:	2201      	movs	r2, #1
 80006a4:	2101      	movs	r1, #1
 80006a6:	480e      	ldr	r0, [pc, #56]	; (80006e0 <dispense+0x44>)
 80006a8:	f002 fbb6 	bl	8002e18 <HAL_GPIO_WritePin>
	for(int i=0; i<20000; i+=2) i--; 		//pseudo-delay. replace with a short timer setup is ideal
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	e005      	b.n	80006be <dispense+0x22>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3b01      	subs	r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3302      	adds	r3, #2
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80006c4:	4293      	cmp	r3, r2
 80006c6:	ddf4      	ble.n	80006b2 <dispense+0x16>
	HAL_GPIO_WritePin(DROP_GPIO_Port, DROP_Pin, 0); //Dispense drop
 80006c8:	2200      	movs	r2, #0
 80006ca:	2101      	movs	r1, #1
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <dispense+0x44>)
 80006ce:	f002 fba3 	bl	8002e18 <HAL_GPIO_WritePin>

	DEPOSITED = 1;
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <dispense+0x48>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	701a      	strb	r2, [r3, #0]
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	58021000 	.word	0x58021000
 80006e4:	24009e61 	.word	0x24009e61

080006e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	db0b      	blt.n	8000712 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	f003 021f 	and.w	r2, r3, #31
 8000700:	4907      	ldr	r1, [pc, #28]	; (8000720 <__NVIC_EnableIRQ+0x38>)
 8000702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000706:	095b      	lsrs	r3, r3, #5
 8000708:	2001      	movs	r0, #1
 800070a:	fa00 f202 	lsl.w	r2, r0, r2
 800070e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000e100 	.word	0xe000e100

08000724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000734:	2b00      	cmp	r3, #0
 8000736:	db0a      	blt.n	800074e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	490c      	ldr	r1, [pc, #48]	; (8000770 <__NVIC_SetPriority+0x4c>)
 800073e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000742:	0112      	lsls	r2, r2, #4
 8000744:	b2d2      	uxtb	r2, r2
 8000746:	440b      	add	r3, r1
 8000748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800074c:	e00a      	b.n	8000764 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4908      	ldr	r1, [pc, #32]	; (8000774 <__NVIC_SetPriority+0x50>)
 8000754:	88fb      	ldrh	r3, [r7, #6]
 8000756:	f003 030f 	and.w	r3, r3, #15
 800075a:	3b04      	subs	r3, #4
 800075c:	0112      	lsls	r2, r2, #4
 800075e:	b2d2      	uxtb	r2, r2
 8000760:	440b      	add	r3, r1
 8000762:	761a      	strb	r2, [r3, #24]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000e100 	.word	0xe000e100
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <move_tilt_steps>:
uint8_t rx_flag = 0;
int panPos = 0;
int tiltPos = 0;

/*** MOTOR CONTROL FUNCTIONS ***/
void move_tilt_steps(uint32_t delay, uint8_t dir, uint32_t num_steps) {
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b08b      	sub	sp, #44	; 0x2c
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	460b      	mov	r3, r1
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(TILT_EN_GPIO_Port, TILT_EN_Pin, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2140      	movs	r1, #64	; 0x40
 800078a:	4824      	ldr	r0, [pc, #144]	; (800081c <move_tilt_steps+0xa4>)
 800078c:	f002 fb44 	bl	8002e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TILT_DIR_GPIO_Port, TILT_DIR_Pin, dir);
 8000790:	7afb      	ldrb	r3, [r7, #11]
 8000792:	461a      	mov	r2, r3
 8000794:	2120      	movs	r1, #32
 8000796:	4821      	ldr	r0, [pc, #132]	; (800081c <move_tilt_steps+0xa4>)
 8000798:	f002 fb3e 	bl	8002e18 <HAL_GPIO_WritePin>
	for(int i=0; i<num_steps; i++) {
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
 80007a0:	e012      	b.n	80007c8 <move_tilt_steps+0x50>
		HAL_GPIO_WritePin(TILT_STP_GPIO_Port, TILT_STP_Pin, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	2120      	movs	r1, #32
 80007a6:	481e      	ldr	r0, [pc, #120]	; (8000820 <move_tilt_steps+0xa8>)
 80007a8:	f002 fb36 	bl	8002e18 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f001 faeb 	bl	8001d88 <HAL_Delay>
		HAL_GPIO_WritePin(TILT_STP_GPIO_Port, TILT_STP_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2120      	movs	r1, #32
 80007b6:	481a      	ldr	r0, [pc, #104]	; (8000820 <move_tilt_steps+0xa8>)
 80007b8:	f002 fb2e 	bl	8002e18 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 80007bc:	68f8      	ldr	r0, [r7, #12]
 80007be:	f001 fae3 	bl	8001d88 <HAL_Delay>
	for(int i=0; i<num_steps; i++) {
 80007c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c4:	3301      	adds	r3, #1
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
 80007c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d8e8      	bhi.n	80007a2 <move_tilt_steps+0x2a>


	}
	char b[] = "done steps\r\n";
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <move_tilt_steps+0xac>)
 80007d2:	f107 0414 	add.w	r4, r7, #20
 80007d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007d8:	c407      	stmia	r4!, {r0, r1, r2}
 80007da:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fd85 	bl	80002f0 <strlen>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	f107 0114 	add.w	r1, r7, #20
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	480d      	ldr	r0, [pc, #52]	; (8000828 <move_tilt_steps+0xb0>)
 80007f4:	f005 fe9e 	bl	8006534 <HAL_UART_Transmit>

	tiltPos += num_steps * (1 - 2 * dir); // + if dir is 0, else -
 80007f8:	7afb      	ldrb	r3, [r7, #11]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	f1c3 0301 	rsb	r3, r3, #1
 8000800:	461a      	mov	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	fb02 f303 	mul.w	r3, r2, r3
 8000808:	4a08      	ldr	r2, [pc, #32]	; (800082c <move_tilt_steps+0xb4>)
 800080a:	6812      	ldr	r2, [r2, #0]
 800080c:	4413      	add	r3, r2
 800080e:	461a      	mov	r2, r3
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <move_tilt_steps+0xb4>)
 8000812:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(TILT_EN_GPIO_Port, TILT_EN_Pin, 1);

}
 8000814:	bf00      	nop
 8000816:	372c      	adds	r7, #44	; 0x2c
 8000818:	46bd      	mov	sp, r7
 800081a:	bd90      	pop	{r4, r7, pc}
 800081c:	58020000 	.word	0x58020000
 8000820:	58020800 	.word	0x58020800
 8000824:	0800984c 	.word	0x0800984c
 8000828:	24000170 	.word	0x24000170
 800082c:	24009ed8 	.word	0x24009ed8

08000830 <move_tilt_deg>:

void move_tilt_deg(uint32_t degrees, uint8_t dir) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	70fb      	strb	r3, [r7, #3]
	move_tilt_steps(TILT_DEFAULT_DELAY, dir, degrees*TILT_DEG_TO_STEPS);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 8000842:	fb03 f202 	mul.w	r2, r3, r2
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	4619      	mov	r1, r3
 800084a:	200a      	movs	r0, #10
 800084c:	f7ff ff94 	bl	8000778 <move_tilt_steps>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <move_pan_steps>:

void move_pan_steps(uint32_t delay, uint8_t dir, uint32_t num_steps) {
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b08b      	sub	sp, #44	; 0x2c
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	460b      	mov	r3, r1
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(PAN_EN_GPIO_Port, PAN_EN_Pin, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086c:	4824      	ldr	r0, [pc, #144]	; (8000900 <move_pan_steps+0xa8>)
 800086e:	f002 fad3 	bl	8002e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PAN_DIR_GPIO_Port, PAN_DIR_Pin, dir);
 8000872:	7afb      	ldrb	r3, [r7, #11]
 8000874:	461a      	mov	r2, r3
 8000876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087a:	4821      	ldr	r0, [pc, #132]	; (8000900 <move_pan_steps+0xa8>)
 800087c:	f002 facc 	bl	8002e18 <HAL_GPIO_WritePin>
	for(int i=0; i<num_steps; i++) {
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
 8000884:	e012      	b.n	80008ac <move_pan_steps+0x54>
		HAL_GPIO_WritePin(PAN_STP_GPIO_Port, PAN_STP_Pin, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	2140      	movs	r1, #64	; 0x40
 800088a:	481e      	ldr	r0, [pc, #120]	; (8000904 <move_pan_steps+0xac>)
 800088c:	f002 fac4 	bl	8002e18 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000890:	68f8      	ldr	r0, [r7, #12]
 8000892:	f001 fa79 	bl	8001d88 <HAL_Delay>
		HAL_GPIO_WritePin(PAN_STP_GPIO_Port, PAN_STP_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2140      	movs	r1, #64	; 0x40
 800089a:	481a      	ldr	r0, [pc, #104]	; (8000904 <move_pan_steps+0xac>)
 800089c:	f002 fabc 	bl	8002e18 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f001 fa71 	bl	8001d88 <HAL_Delay>
	for(int i=0; i<num_steps; i++) {
 80008a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a8:	3301      	adds	r3, #1
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d8e8      	bhi.n	8000886 <move_pan_steps+0x2e>
	}
	char b[] = "done steps\r\n";
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <move_pan_steps+0xb0>)
 80008b6:	f107 0414 	add.w	r4, r7, #20
 80008ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008bc:	c407      	stmia	r4!, {r0, r1, r2}
 80008be:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fd13 	bl	80002f0 <strlen>
 80008ca:	4603      	mov	r3, r0
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	f107 0114 	add.w	r1, r7, #20
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	480d      	ldr	r0, [pc, #52]	; (800090c <move_pan_steps+0xb4>)
 80008d8:	f005 fe2c 	bl	8006534 <HAL_UART_Transmit>

	panPos += num_steps * (1 - 2 * dir); // + if dir is 0, else -
 80008dc:	7afb      	ldrb	r3, [r7, #11]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	f1c3 0301 	rsb	r3, r3, #1
 80008e4:	461a      	mov	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	fb02 f303 	mul.w	r3, r2, r3
 80008ec:	4a08      	ldr	r2, [pc, #32]	; (8000910 <move_pan_steps+0xb8>)
 80008ee:	6812      	ldr	r2, [r2, #0]
 80008f0:	4413      	add	r3, r2
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <move_pan_steps+0xb8>)
 80008f6:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(PAN_EN_GPIO_Port, PAN_EN_Pin, 1);

}
 80008f8:	bf00      	nop
 80008fa:	372c      	adds	r7, #44	; 0x2c
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	58020400 	.word	0x58020400
 8000904:	58020800 	.word	0x58020800
 8000908:	0800984c 	.word	0x0800984c
 800090c:	24000170 	.word	0x24000170
 8000910:	24009ed4 	.word	0x24009ed4

08000914 <move_pan_deg>:

void move_pan_deg(uint32_t degrees, uint8_t dir) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	70fb      	strb	r3, [r7, #3]
	move_pan_steps(PAN_DEFAULT_DELAY, dir, degrees*PAN_DEG_TO_STEPS);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 8000926:	fb03 f202 	mul.w	r2, r3, r2
 800092a:	78fb      	ldrb	r3, [r7, #3]
 800092c:	4619      	mov	r1, r3
 800092e:	200a      	movs	r0, #10
 8000930:	f7ff ff92 	bl	8000858 <move_pan_steps>
	char pos[30];
	sprintf(pos, "panPos: %d\r\n", panPos);
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <move_pan_deg+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	490b      	ldr	r1, [pc, #44]	; (800096c <move_pan_deg+0x58>)
 800093e:	4618      	mov	r0, r3
 8000940:	f008 fad4 	bl	8008eec <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)pos, strlen(pos), HAL_MAX_DELAY);
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fcd1 	bl	80002f0 <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	b29a      	uxth	r2, r3
 8000952:	f107 0108 	add.w	r1, r7, #8
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <move_pan_deg+0x5c>)
 800095c:	f005 fdea 	bl	8006534 <HAL_UART_Transmit>

}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	; 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	24009ed4 	.word	0x24009ed4
 800096c:	0800985c 	.word	0x0800985c
 8000970:	24000170 	.word	0x24000170

08000974 <ack>:
void start_plunge(void) {

}

/*** USART Rx HANDLE ***/
void ack(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart3, tx_ack, 3, HAL_MAX_DELAY);
 8000978:	f04f 33ff 	mov.w	r3, #4294967295
 800097c:	2203      	movs	r2, #3
 800097e:	4903      	ldr	r1, [pc, #12]	; (800098c <ack+0x18>)
 8000980:	4803      	ldr	r0, [pc, #12]	; (8000990 <ack+0x1c>)
 8000982:	f005 fdd7 	bl	8006534 <HAL_UART_Transmit>
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	24000004 	.word	0x24000004
 8000990:	24000170 	.word	0x24000170

08000994 <bad>:

void bad(void) {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, tx_bad, 3, HAL_MAX_DELAY);
 8000998:	f04f 33ff 	mov.w	r3, #4294967295
 800099c:	2203      	movs	r2, #3
 800099e:	4903      	ldr	r1, [pc, #12]	; (80009ac <bad+0x18>)
 80009a0:	4803      	ldr	r0, [pc, #12]	; (80009b0 <bad+0x1c>)
 80009a2:	f005 fdc7 	bl	8006534 <HAL_UART_Transmit>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	24000008 	.word	0x24000008
 80009b0:	24000170 	.word	0x24000170

080009b4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    rxBuffer[rxIndex] = received_character[0];
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_UART_RxCpltCallback+0x54>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_UART_RxCpltCallback+0x58>)
 80009c4:	7819      	ldrb	r1, [r3, #0]
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_UART_RxCpltCallback+0x5c>)
 80009c8:	5499      	strb	r1, [r3, r2]
	rxIndex++;
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_UART_RxCpltCallback+0x54>)
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	3301      	adds	r3, #1
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <HAL_UART_RxCpltCallback+0x54>)
 80009d4:	801a      	strh	r2, [r3, #0]

	if (received_character[0] == '\n' || received_character[0] == '\r') {
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <HAL_UART_RxCpltCallback+0x58>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b0a      	cmp	r3, #10
 80009dc:	d003      	beq.n	80009e6 <HAL_UART_RxCpltCallback+0x32>
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_UART_RxCpltCallback+0x58>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b0d      	cmp	r3, #13
 80009e4:	d106      	bne.n	80009f4 <HAL_UART_RxCpltCallback+0x40>
    	rxIndex = 0;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_UART_RxCpltCallback+0x54>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	801a      	strh	r2, [r3, #0]
    	rx_flag = 1;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_UART_RxCpltCallback+0x60>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e005      	b.n	8000a00 <HAL_UART_RxCpltCallback+0x4c>
    } else {
        HAL_UART_Receive_IT(&huart3, received_character, 1);
 80009f4:	2201      	movs	r2, #1
 80009f6:	4905      	ldr	r1, [pc, #20]	; (8000a0c <HAL_UART_RxCpltCallback+0x58>)
 80009f8:	4807      	ldr	r0, [pc, #28]	; (8000a18 <HAL_UART_RxCpltCallback+0x64>)
 80009fa:	f005 fe29 	bl	8006650 <HAL_UART_Receive_IT>
    }
}
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	24009ecc 	.word	0x24009ecc
 8000a0c:	24009ed0 	.word	0x24009ed0
 8000a10:	24009e68 	.word	0x24009e68
 8000a14:	24009ed1 	.word	0x24009ed1
 8000a18:	24000170 	.word	0x24000170

08000a1c <rx_handle>:

void rx_handle(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b0a0      	sub	sp, #128	; 0x80
 8000a20:	af02      	add	r7, sp, #8
	HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	2203      	movs	r2, #3
 8000a28:	495a      	ldr	r1, [pc, #360]	; (8000b94 <rx_handle+0x178>)
 8000a2a:	485b      	ldr	r0, [pc, #364]	; (8000b98 <rx_handle+0x17c>)
 8000a2c:	f005 fd82 	bl	8006534 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(GPIOE, LD2_Pin, val);
 8000a30:	4b5a      	ldr	r3, [pc, #360]	; (8000b9c <rx_handle+0x180>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	2102      	movs	r1, #2
 8000a38:	4859      	ldr	r0, [pc, #356]	; (8000ba0 <rx_handle+0x184>)
 8000a3a:	f002 f9ed 	bl	8002e18 <HAL_GPIO_WritePin>
	if(val)
 8000a3e:	4b57      	ldr	r3, [pc, #348]	; (8000b9c <rx_handle+0x180>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <rx_handle+0x32>
		val = 0;
 8000a46:	4b55      	ldr	r3, [pc, #340]	; (8000b9c <rx_handle+0x180>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	e002      	b.n	8000a54 <rx_handle+0x38>
	else
		val = 1;
 8000a4e:	4b53      	ldr	r3, [pc, #332]	; (8000b9c <rx_handle+0x180>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
	//sprintf(num, "RX0: %d\r\n", rxBuffer[0]);
	//HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);
	switch(rxBuffer[0]) {
 8000a54:	4b53      	ldr	r3, [pc, #332]	; (8000ba4 <rx_handle+0x188>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	3b31      	subs	r3, #49	; 0x31
 8000a5a:	2b05      	cmp	r3, #5
 8000a5c:	f200 8180 	bhi.w	8000d60 <rx_handle+0x344>
 8000a60:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <rx_handle+0x4c>)
 8000a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a66:	bf00      	nop
 8000a68:	08000a81 	.word	0x08000a81
 8000a6c:	08000b39 	.word	0x08000b39
 8000a70:	08000d61 	.word	0x08000d61
 8000a74:	08000d37 	.word	0x08000d37
 8000a78:	08000d43 	.word	0x08000d43
 8000a7c:	08000d4f 	.word	0x08000d4f
    	case MOVE: ;
			uint32_t amount = (rxBuffer[2]-48) << 24 | (rxBuffer[3]-48) << 16 | (rxBuffer[4]-48) << 8 | (rxBuffer[5]-48);
 8000a80:	4b48      	ldr	r3, [pc, #288]	; (8000ba4 <rx_handle+0x188>)
 8000a82:	789b      	ldrb	r3, [r3, #2]
 8000a84:	3b30      	subs	r3, #48	; 0x30
 8000a86:	061a      	lsls	r2, r3, #24
 8000a88:	4b46      	ldr	r3, [pc, #280]	; (8000ba4 <rx_handle+0x188>)
 8000a8a:	78db      	ldrb	r3, [r3, #3]
 8000a8c:	3b30      	subs	r3, #48	; 0x30
 8000a8e:	041b      	lsls	r3, r3, #16
 8000a90:	431a      	orrs	r2, r3
 8000a92:	4b44      	ldr	r3, [pc, #272]	; (8000ba4 <rx_handle+0x188>)
 8000a94:	791b      	ldrb	r3, [r3, #4]
 8000a96:	3b30      	subs	r3, #48	; 0x30
 8000a98:	021b      	lsls	r3, r3, #8
 8000a9a:	431a      	orrs	r2, r3
 8000a9c:	4b41      	ldr	r3, [pc, #260]	; (8000ba4 <rx_handle+0x188>)
 8000a9e:	795b      	ldrb	r3, [r3, #5]
 8000aa0:	3b30      	subs	r3, #48	; 0x30
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	667b      	str	r3, [r7, #100]	; 0x64
			char response[100];
			sprintf(response, "%c%c received this amount: %d\r\n", (int)rxBuffer[0], (int)rxBuffer[1], (int)amount);
 8000aa6:	4b3f      	ldr	r3, [pc, #252]	; (8000ba4 <rx_handle+0x188>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4b3d      	ldr	r3, [pc, #244]	; (8000ba4 <rx_handle+0x188>)
 8000aae:	785b      	ldrb	r3, [r3, #1]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ab4:	4638      	mov	r0, r7
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	493b      	ldr	r1, [pc, #236]	; (8000ba8 <rx_handle+0x18c>)
 8000abc:	f008 fa16 	bl	8008eec <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fc14 	bl	80002f0 <strlen>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	4639      	mov	r1, r7
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	4831      	ldr	r0, [pc, #196]	; (8000b98 <rx_handle+0x17c>)
 8000ad4:	f005 fd2e 	bl	8006534 <HAL_UART_Transmit>

			switch(rxBuffer[1]) {
 8000ad8:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <rx_handle+0x188>)
 8000ada:	785b      	ldrb	r3, [r3, #1]
 8000adc:	3b31      	subs	r3, #49	; 0x31
 8000ade:	2b03      	cmp	r3, #3
 8000ae0:	d826      	bhi.n	8000b30 <rx_handle+0x114>
 8000ae2:	a201      	add	r2, pc, #4	; (adr r2, 8000ae8 <rx_handle+0xcc>)
 8000ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae8:	08000af9 	.word	0x08000af9
 8000aec:	08000b07 	.word	0x08000b07
 8000af0:	08000b15 	.word	0x08000b15
 8000af4:	08000b23 	.word	0x08000b23
				case UP: ;
					move_tilt_deg(amount, DIR_TILT_UP);
 8000af8:	2101      	movs	r1, #1
 8000afa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000afc:	f7ff fe98 	bl	8000830 <move_tilt_deg>
					ack();
 8000b00:	f7ff ff38 	bl	8000974 <ack>
					break;
 8000b04:	e017      	b.n	8000b36 <rx_handle+0x11a>
				case DOWN: ;
					move_tilt_deg(amount, DIR_TILT_DOWN);
 8000b06:	2100      	movs	r1, #0
 8000b08:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000b0a:	f7ff fe91 	bl	8000830 <move_tilt_deg>
					ack();
 8000b0e:	f7ff ff31 	bl	8000974 <ack>
					break;
 8000b12:	e010      	b.n	8000b36 <rx_handle+0x11a>
				case LEFT: ;
					move_pan_deg(amount, DIR_PAN_LEFT);
 8000b14:	2101      	movs	r1, #1
 8000b16:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000b18:	f7ff fefc 	bl	8000914 <move_pan_deg>
					ack();
 8000b1c:	f7ff ff2a 	bl	8000974 <ack>
					break;
 8000b20:	e009      	b.n	8000b36 <rx_handle+0x11a>
				case RIGHT: ;
					move_pan_deg(amount, DIR_PAN_RIGHT);
 8000b22:	2100      	movs	r1, #0
 8000b24:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000b26:	f7ff fef5 	bl	8000914 <move_pan_deg>
					ack();
 8000b2a:	f7ff ff23 	bl	8000974 <ack>
					break;
 8000b2e:	e002      	b.n	8000b36 <rx_handle+0x11a>
				default: ;
					bad();
 8000b30:	f7ff ff30 	bl	8000994 <bad>
					break;
 8000b34:	bf00      	nop
			}

			break;
 8000b36:	e113      	b.n	8000d60 <rx_handle+0x344>

		case PLUNGE: ;
		/* retrieve info */
			plunge_done_flag = 0;
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <rx_handle+0x190>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]

			uint32_t brake_pos = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	677b      	str	r3, [r7, #116]	; 0x74
			timepoint_pos = 0;
 8000b42:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <rx_handle+0x194>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
			for(int i=1; i<=6; i++) {
 8000b48:	2301      	movs	r3, #1
 8000b4a:	673b      	str	r3, [r7, #112]	; 0x70
 8000b4c:	e01b      	b.n	8000b86 <rx_handle+0x16a>
				 char digit = rxBuffer[i];
 8000b4e:	4a15      	ldr	r2, [pc, #84]	; (8000ba4 <rx_handle+0x188>)
 8000b50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b52:	4413      	add	r3, r2
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
				 if (digit >= '0' && digit <= '9') {
 8000b5a:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000b5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000b60:	d90e      	bls.n	8000b80 <rx_handle+0x164>
 8000b62:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000b66:	2b39      	cmp	r3, #57	; 0x39
 8000b68:	d80a      	bhi.n	8000b80 <rx_handle+0x164>
					 brake_pos = (brake_pos * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 8000b6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	461a      	mov	r2, r3
 8000b76:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000b7a:	4413      	add	r3, r2
 8000b7c:	3b30      	subs	r3, #48	; 0x30
 8000b7e:	677b      	str	r3, [r7, #116]	; 0x74
			for(int i=1; i<=6; i++) {
 8000b80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b82:	3301      	adds	r3, #1
 8000b84:	673b      	str	r3, [r7, #112]	; 0x70
 8000b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b88:	2b06      	cmp	r3, #6
 8000b8a:	dde0      	ble.n	8000b4e <rx_handle+0x132>
				 }
			}
			for(int i=7; i<=12; i++) {
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000b90:	e02e      	b.n	8000bf0 <rx_handle+0x1d4>
 8000b92:	bf00      	nop
 8000b94:	24000004 	.word	0x24000004
 8000b98:	24000170 	.word	0x24000170
 8000b9c:	24000000 	.word	0x24000000
 8000ba0:	58021000 	.word	0x58021000
 8000ba4:	24009e68 	.word	0x24009e68
 8000ba8:	0800986c 	.word	0x0800986c
 8000bac:	24009e60 	.word	0x24009e60
 8000bb0:	24009e4c 	.word	0x24009e4c
				 char digit = rxBuffer[i];
 8000bb4:	4a70      	ldr	r2, [pc, #448]	; (8000d78 <rx_handle+0x35c>)
 8000bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bb8:	4413      	add	r3, r2
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
				 if (digit >= '0' && digit <= '9') {
 8000bc0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000bc4:	2b2f      	cmp	r3, #47	; 0x2f
 8000bc6:	d910      	bls.n	8000bea <rx_handle+0x1ce>
 8000bc8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000bcc:	2b39      	cmp	r3, #57	; 0x39
 8000bce:	d80c      	bhi.n	8000bea <rx_handle+0x1ce>
					 timepoint_pos = (timepoint_pos * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 8000bd0:	4b6a      	ldr	r3, [pc, #424]	; (8000d7c <rx_handle+0x360>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4413      	add	r3, r2
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	461a      	mov	r2, r3
 8000bde:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000be2:	4413      	add	r3, r2
 8000be4:	3b30      	subs	r3, #48	; 0x30
 8000be6:	4a65      	ldr	r2, [pc, #404]	; (8000d7c <rx_handle+0x360>)
 8000be8:	6013      	str	r3, [r2, #0]
			for(int i=7; i<=12; i++) {
 8000bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bec:	3301      	adds	r3, #1
 8000bee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bf2:	2b0c      	cmp	r3, #12
 8000bf4:	ddde      	ble.n	8000bb4 <rx_handle+0x198>
	//		HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);

			/***TODO: figure out what angle to tilt to given timepoint_pos***/

			/* reset tracking variables */
			log_position = 0;
 8000bf6:	4b62      	ldr	r3, [pc, #392]	; (8000d80 <rx_handle+0x364>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
			running_sum = 0;
 8000bfc:	4b61      	ldr	r3, [pc, #388]	; (8000d84 <rx_handle+0x368>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
			memset(posLog, 0, sizeof(posLog));
 8000c02:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000c06:	2100      	movs	r1, #0
 8000c08:	485f      	ldr	r0, [pc, #380]	; (8000d88 <rx_handle+0x36c>)
 8000c0a:	f008 f98f 	bl	8008f2c <memset>
			DEPOSITED = 0;
 8000c0e:	4b5f      	ldr	r3, [pc, #380]	; (8000d8c <rx_handle+0x370>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]

			/* dispense position calculation */
			//						    us								mm						mm/s	   s->us
			dispense_delay_clocks = 10000;//(DISPENSE_LATENCY + (TARGET_DIST_ORTH*cos(tiltPos*M_PI/180))/DROP_SPEED*1000*1000)*US_TO_TICKS;
 8000c14:	4b5e      	ldr	r3, [pc, #376]	; (8000d90 <rx_handle+0x374>)
 8000c16:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c1a:	601a      	str	r2, [r3, #0]
			// ^ delay in ticks between dispensing and drop hit target in x direction


			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); //disengage brake
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2140      	movs	r1, #64	; 0x40
 8000c20:	485c      	ldr	r0, [pc, #368]	; (8000d94 <rx_handle+0x378>)
 8000c22:	f002 f8f9 	bl	8002e18 <HAL_GPIO_WritePin>


			/* configure tim4 for final dispense timing */
			TIM4->CR1  &= ~TIM_CR1_CEN;
 8000c26:	4b5c      	ldr	r3, [pc, #368]	; (8000d98 <rx_handle+0x37c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a5b      	ldr	r2, [pc, #364]	; (8000d98 <rx_handle+0x37c>)
 8000c2c:	f023 0301 	bic.w	r3, r3, #1
 8000c30:	6013      	str	r3, [r2, #0]

			TIM4->CNT   =  0;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000c32:	4b59      	ldr	r3, [pc, #356]	; (8000d98 <rx_handle+0x37c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->ARR 	= brake_pos; 	// Counter rolls over at brake_pos which triggers an interrupt handled in TIM2_IRQHandler (stm32h7xx_it.c)
 8000c38:	4a57      	ldr	r2, [pc, #348]	; (8000d98 <rx_handle+0x37c>)
 8000c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c3c:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM4->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000c3e:	4b56      	ldr	r3, [pc, #344]	; (8000d98 <rx_handle+0x37c>)
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	4a55      	ldr	r2, [pc, #340]	; (8000d98 <rx_handle+0x37c>)
 8000c44:	f023 0301 	bic.w	r3, r3, #1
 8000c48:	6113      	str	r3, [r2, #16]
			TIM4->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000c4a:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <rx_handle+0x37c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a52      	ldr	r2, [pc, #328]	; (8000d98 <rx_handle+0x37c>)
 8000c50:	f023 0302 	bic.w	r3, r3, #2
 8000c54:	6013      	str	r3, [r2, #0]
			TIM4->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000c56:	4b50      	ldr	r3, [pc, #320]	; (8000d98 <rx_handle+0x37c>)
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	4a4f      	ldr	r2, [pc, #316]	; (8000d98 <rx_handle+0x37c>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	60d3      	str	r3, [r2, #12]
			TIM4->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000c62:	4b4d      	ldr	r3, [pc, #308]	; (8000d98 <rx_handle+0x37c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a4c      	ldr	r2, [pc, #304]	; (8000d98 <rx_handle+0x37c>)
 8000c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6c:	6013      	str	r3, [r2, #0]

			/* configuring encoder counter */
			TIM2->CR1  &= ~TIM_CR1_CEN;
 8000c6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c78:	f023 0301 	bic.w	r3, r3, #1
 8000c7c:	6013      	str	r3, [r2, #0]

			TIM2->CNT   =  0;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000c7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->ARR 	= brake_pos; 		// Counter rolls over at brake_pos which triggers an interrupt handled in TIM2_IRQHandler (stm32h7xx_it.c)
 8000c86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c8c:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000c8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c98:	f023 0301 	bic.w	r3, r3, #1
 8000c9c:	6113      	str	r3, [r2, #16]
			TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ca8:	f023 0302 	bic.w	r3, r3, #2
 8000cac:	6013      	str	r3, [r2, #0]
			TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000cae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	60d3      	str	r3, [r2, #12]
			TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	6013      	str	r3, [r2, #0]

			TIM2->CR1  |=  TIM_CR1_CEN; 	//start counter
 8000cce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6013      	str	r3, [r2, #0]

			/* configuring data logging timer */
			TIM5->CR1  &= ~TIM_CR1_CEN; // Start TIM5 to commence data collection
 8000cde:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <rx_handle+0x380>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a2e      	ldr	r2, [pc, #184]	; (8000d9c <rx_handle+0x380>)
 8000ce4:	f023 0301 	bic.w	r3, r3, #1
 8000ce8:	6013      	str	r3, [r2, #0]

			TIM5-> CNT  = 0;				//
 8000cea:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <rx_handle+0x380>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	625a      	str	r2, [r3, #36]	; 0x24
			TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <rx_handle+0x380>)
 8000cf2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000cf8:	4b28      	ldr	r3, [pc, #160]	; (8000d9c <rx_handle+0x380>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a27      	ldr	r2, [pc, #156]	; (8000d9c <rx_handle+0x380>)
 8000cfe:	f023 0302 	bic.w	r3, r3, #2
 8000d02:	6013      	str	r3, [r2, #0]
			TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <rx_handle+0x380>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	4a24      	ldr	r2, [pc, #144]	; (8000d9c <rx_handle+0x380>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	60d3      	str	r3, [r2, #12]
			TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <rx_handle+0x380>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a21      	ldr	r2, [pc, #132]	; (8000d9c <rx_handle+0x380>)
 8000d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1a:	6013      	str	r3, [r2, #0]
			TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <rx_handle+0x380>)
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	4a1e      	ldr	r2, [pc, #120]	; (8000d9c <rx_handle+0x380>)
 8000d22:	f023 0301 	bic.w	r3, r3, #1
 8000d26:	6113      	str	r3, [r2, #16]

			TIM5->CR1  |= TIM_CR1_CEN; // Start TIM5 to commence data collection
 8000d28:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <rx_handle+0x380>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <rx_handle+0x380>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6013      	str	r3, [r2, #0]
//				char response[100] = {0};
//				enc_pos = TIM2->CNT;
//				sprintf(response, "enc: %d; disp_f: %d; runsum: %d; tim4: %d; log_pos: %d, clocks_to_disp: %d; disp: %d\r\n", (int)enc_pos, (int)disp_flag, (int)running_sum, (int)TIM4->CNT, (int)log_position, (int)TIM4->ARR, (int)DEPOSITED);
//				HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
//			}
			break;
 8000d34:	e014      	b.n	8000d60 <rx_handle+0x344>

		case RELEASE: ;
			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); //disengage brake
 8000d36:	2201      	movs	r2, #1
 8000d38:	2140      	movs	r1, #64	; 0x40
 8000d3a:	4816      	ldr	r0, [pc, #88]	; (8000d94 <rx_handle+0x378>)
 8000d3c:	f002 f86c 	bl	8002e18 <HAL_GPIO_WritePin>
//			char j[100] = {0};
//			sprintf(j, "RELEASE\r\n");
//			HAL_UART_Transmit(&huart3, (uint8_t*)j, strlen(j), HAL_MAX_DELAY);

			break;
 8000d40:	e00e      	b.n	8000d60 <rx_handle+0x344>
		case '5': ;
			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 0); //engage brake
 8000d42:	2200      	movs	r2, #0
 8000d44:	2140      	movs	r1, #64	; 0x40
 8000d46:	4813      	ldr	r0, [pc, #76]	; (8000d94 <rx_handle+0x378>)
 8000d48:	f002 f866 	bl	8002e18 <HAL_GPIO_WritePin>
//			char k[100] = {0};
//			sprintf(k, "BRAKE\r\n");
//			HAL_UART_Transmit(&huart3, (uint8_t*)k, strlen(k), HAL_MAX_DELAY);

			break;
 8000d4c:	e008      	b.n	8000d60 <rx_handle+0x344>
		case '6': ;
			char lm[100] = {0};
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2260      	movs	r2, #96	; 0x60
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f008 f8e7 	bl	8008f2c <memset>
			//sprintf(lm, "current position: %d\r\n braked at: %d\r\n", TIM2->CNT, posn_braked_at);
			//HAL_UART_Transmit(&huart3, (uint8_t*)lm, strlen(lm), HAL_MAX_DELAY);
			break;
 8000d5e:	bf00      	nop

    }
//	char b[] = "done handling\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

    rx_flag = 0;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <rx_handle+0x384>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart3, received_character, 1);
 8000d66:	2201      	movs	r2, #1
 8000d68:	490e      	ldr	r1, [pc, #56]	; (8000da4 <rx_handle+0x388>)
 8000d6a:	480f      	ldr	r0, [pc, #60]	; (8000da8 <rx_handle+0x38c>)
 8000d6c:	f005 fc70 	bl	8006650 <HAL_UART_Receive_IT>
}
 8000d70:	bf00      	nop
 8000d72:	3778      	adds	r7, #120	; 0x78
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	24009e68 	.word	0x24009e68
 8000d7c:	24009e4c 	.word	0x24009e4c
 8000d80:	24009e44 	.word	0x24009e44
 8000d84:	24009e48 	.word	0x24009e48
 8000d88:	24000204 	.word	0x24000204
 8000d8c:	24009e61 	.word	0x24009e61
 8000d90:	24009e50 	.word	0x24009e50
 8000d94:	58020400 	.word	0x58020400
 8000d98:	40000800 	.word	0x40000800
 8000d9c:	40000c00 	.word	0x40000c00
 8000da0:	24009ed1 	.word	0x24009ed1
 8000da4:	24009ed0 	.word	0x24009ed0
 8000da8:	24000170 	.word	0x24000170

08000dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db2:	f000 ff57 	bl	8001c64 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db6:	f000 f897 	bl	8000ee8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dba:	f000 fa71 	bl	80012a0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dbe:	f000 f909 	bl	8000fd4 <MX_TIM2_Init>
  MX_USB_OTG_HS_USB_Init();
 8000dc2:	f000 fa65 	bl	8001290 <MX_USB_OTG_HS_USB_Init>
  MX_USART3_UART_Init();
 8000dc6:	f000 fa17 	bl	80011f8 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000dca:	f000 f9c7 	bl	800115c <MX_TIM5_Init>
  MX_TIM4_Init();
 8000dce:	f000 f96d 	bl	80010ac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, received_character, 1); // initialize interrupts
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	493c      	ldr	r1, [pc, #240]	; (8000ec8 <main+0x11c>)
 8000dd6:	483d      	ldr	r0, [pc, #244]	; (8000ecc <main+0x120>)
 8000dd8:	f005 fc3a 	bl	8006650 <HAL_UART_Receive_IT>

//  char msg[] = "program start \r\n";
//  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  // TIM2 for encoder tick counting
  NVIC_SetPriority(TIM2_IRQn, 1); // Braking is priority as long as dispense isnt happening
 8000ddc:	2101      	movs	r1, #1
 8000dde:	201c      	movs	r0, #28
 8000de0:	f7ff fca0 	bl	8000724 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000de4:	201c      	movs	r0, #28
 8000de6:	f7ff fc7f 	bl	80006e8 <__NVIC_EnableIRQ>

  // TIM5 for logkeeping and speed calculations and TIM4 setup
  NVIC_SetPriority(TIM5_IRQn, 2); // Log keeping should be interruptable
 8000dea:	2102      	movs	r1, #2
 8000dec:	2032      	movs	r0, #50	; 0x32
 8000dee:	f7ff fc99 	bl	8000724 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8000df2:	2032      	movs	r0, #50	; 0x32
 8000df4:	f7ff fc78 	bl	80006e8 <__NVIC_EnableIRQ>

  // TIM4 for dispense timing after commenced by TIM5
  NVIC_SetPriority(TIM4_IRQn, 0); // Dispense accuracy is top priority
 8000df8:	2100      	movs	r1, #0
 8000dfa:	201e      	movs	r0, #30
 8000dfc:	f7ff fc92 	bl	8000724 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8000e00:	201e      	movs	r0, #30
 8000e02:	f7ff fc71 	bl	80006e8 <__NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
	  if(rx_flag) rx_handle();
 8000e06:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <main+0x124>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <main+0x66>
 8000e0e:	f7ff fe05 	bl	8000a1c <rx_handle>


	  if(plunge_done_flag) {
 8000e12:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <main+0x128>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0f5      	beq.n	8000e06 <main+0x5a>
		  char rn[] = "\r\n";
 8000e1a:	4a2f      	ldr	r2, [pc, #188]	; (8000ed8 <main+0x12c>)
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	6812      	ldr	r2, [r2, #0]
 8000e22:	4611      	mov	r1, r2
 8000e24:	8019      	strh	r1, [r3, #0]
 8000e26:	3302      	adds	r3, #2
 8000e28:	0c12      	lsrs	r2, r2, #16
 8000e2a:	701a      	strb	r2, [r3, #0]
		  uint8_t bytes[4];
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e30:	2203      	movs	r2, #3
 8000e32:	492a      	ldr	r1, [pc, #168]	; (8000edc <main+0x130>)
 8000e34:	4825      	ldr	r0, [pc, #148]	; (8000ecc <main+0x120>)
 8000e36:	f005 fb7d 	bl	8006534 <HAL_UART_Transmit>

		  for(int i=0 ; i<log_position; i++) {
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	e032      	b.n	8000ea6 <main+0xfa>
			  bytes[0] = ((posLog[i] >> 24) 	& 0xFF);
 8000e40:	4a27      	ldr	r2, [pc, #156]	; (8000ee0 <main+0x134>)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e48:	0e1b      	lsrs	r3, r3, #24
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	713b      	strb	r3, [r7, #4]
			  bytes[1] = ((posLog[i] >> 16) 	& 0xFF);
 8000e4e:	4a24      	ldr	r2, [pc, #144]	; (8000ee0 <main+0x134>)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e56:	0c1b      	lsrs	r3, r3, #16
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	717b      	strb	r3, [r7, #5]
			  bytes[2] = ((posLog[i] >> 8) 		& 0xFF);
 8000e5c:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <main+0x134>)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	71bb      	strb	r3, [r7, #6]
			  bytes[3] = ((posLog[i])	 		& 0xFF);
 8000e6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ee0 <main+0x134>)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	71fb      	strb	r3, [r7, #7]

			  HAL_UART_Transmit(&huart3, bytes, 4, HAL_MAX_DELAY);
 8000e76:	1d39      	adds	r1, r7, #4
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	4813      	ldr	r0, [pc, #76]	; (8000ecc <main+0x120>)
 8000e80:	f005 fb58 	bl	8006534 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart3, (uint8_t*)rn, strlen(rn), HAL_MAX_DELAY);
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fa31 	bl	80002f0 <strlen>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	f107 0108 	add.w	r1, r7, #8
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	480c      	ldr	r0, [pc, #48]	; (8000ecc <main+0x120>)
 8000e9c:	f005 fb4a 	bl	8006534 <HAL_UART_Transmit>
		  for(int i=0 ; i<log_position; i++) {
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <main+0x138>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d3c7      	bcc.n	8000e40 <main+0x94>
		  }

		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	4909      	ldr	r1, [pc, #36]	; (8000edc <main+0x130>)
 8000eb8:	4804      	ldr	r0, [pc, #16]	; (8000ecc <main+0x120>)
 8000eba:	f005 fb3b 	bl	8006534 <HAL_UART_Transmit>

		  plunge_done_flag = 0;
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <main+0x128>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
	  if(rx_flag) rx_handle();
 8000ec4:	e79f      	b.n	8000e06 <main+0x5a>
 8000ec6:	bf00      	nop
 8000ec8:	24009ed0 	.word	0x24009ed0
 8000ecc:	24000170 	.word	0x24000170
 8000ed0:	24009ed1 	.word	0x24009ed1
 8000ed4:	24009e60 	.word	0x24009e60
 8000ed8:	0800988c 	.word	0x0800988c
 8000edc:	24000004 	.word	0x24000004
 8000ee0:	24000204 	.word	0x24000204
 8000ee4:	24009e44 	.word	0x24009e44

08000ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b09c      	sub	sp, #112	; 0x70
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef2:	224c      	movs	r2, #76	; 0x4c
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f008 f818 	bl	8008f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2220      	movs	r2, #32
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f008 f812 	bl	8008f2c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000f08:	4b30      	ldr	r3, [pc, #192]	; (8000fcc <SystemClock_Config+0xe4>)
 8000f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f12:	2004      	movs	r0, #4
 8000f14:	f001 ff9a 	bl	8002e4c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f18:	2300      	movs	r3, #0
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <SystemClock_Config+0xe8>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a2b      	ldr	r2, [pc, #172]	; (8000fd0 <SystemClock_Config+0xe8>)
 8000f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b29      	ldr	r3, [pc, #164]	; (8000fd0 <SystemClock_Config+0xe8>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f34:	bf00      	nop
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <SystemClock_Config+0xe8>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f42:	d1f8      	bne.n	8000f36 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000f44:	2321      	movs	r3, #33	; 0x21
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f48:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f52:	2302      	movs	r3, #2
 8000f54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f56:	2302      	movs	r3, #2
 8000f58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000f5e:	2318      	movs	r3, #24
 8000f60:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f62:	2302      	movs	r3, #2
 8000f64:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f66:	2304      	movs	r3, #4
 8000f68:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f6e:	230c      	movs	r3, #12
 8000f70:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 ffbe 	bl	8002f00 <HAL_RCC_OscConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f8a:	f000 fad7 	bl	800153c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8e:	233f      	movs	r3, #63	; 0x3f
 8000f90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f92:	2303      	movs	r3, #3
 8000f94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 fbd6 	bl	8003764 <HAL_RCC_ClockConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000fbe:	f000 fabd 	bl	800153c <Error_Handler>
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3770      	adds	r7, #112	; 0x70
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	58024800 	.word	0x58024800

08000fd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08c      	sub	sp, #48	; 0x30
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	2224      	movs	r2, #36	; 0x24
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f007 ffa2 	bl	8008f2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <MX_TIM2_Init+0xd4>)
 8000ff4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <MX_TIM2_Init+0xd4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001000:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <MX_TIM2_Init+0xd4>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <MX_TIM2_Init+0xd4>)
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <MX_TIM2_Init+0xd4>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001014:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <MX_TIM2_Init+0xd4>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800101a:	2301      	movs	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001022:	2301      	movs	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001032:	2301      	movs	r3, #1
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4619      	mov	r1, r3
 8001044:	4818      	ldr	r0, [pc, #96]	; (80010a8 <MX_TIM2_Init+0xd4>)
 8001046:	f004 fd51 	bl	8005aec <HAL_TIM_Encoder_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001050:	f000 fa74 	bl	800153c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800105c:	463b      	mov	r3, r7
 800105e:	4619      	mov	r1, r3
 8001060:	4811      	ldr	r0, [pc, #68]	; (80010a8 <MX_TIM2_Init+0xd4>)
 8001062:	f005 f96b 	bl	800633c <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800106c:	f000 fa66 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 8001070:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	6013      	str	r3, [r2, #0]
	TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 8001080:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108a:	f023 0301 	bic.w	r3, r3, #1
 800108e:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8001090:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800109a:	f023 0301 	bic.w	r3, r3, #1
 800109e:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3730      	adds	r7, #48	; 0x30
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2400008c 	.word	0x2400008c

080010ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <MX_TIM4_Init+0xa8>)
 80010cc:	4a22      	ldr	r2, [pc, #136]	; (8001158 <MX_TIM4_Init+0xac>)
 80010ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <MX_TIM4_Init+0xa8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_TIM4_Init+0xa8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_TIM4_Init+0xa8>)
 80010de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_TIM4_Init+0xa8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_TIM4_Init+0xa8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010f0:	4818      	ldr	r0, [pc, #96]	; (8001154 <MX_TIM4_Init+0xa8>)
 80010f2:	f004 fca3 	bl	8005a3c <HAL_TIM_Base_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80010fc:	f000 fa1e 	bl	800153c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001104:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	4811      	ldr	r0, [pc, #68]	; (8001154 <MX_TIM4_Init+0xa8>)
 800110e:	f004 feb3 	bl	8005e78 <HAL_TIM_ConfigClockSource>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001118:	f000 fa10 	bl	800153c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4619      	mov	r1, r3
 8001128:	480a      	ldr	r0, [pc, #40]	; (8001154 <MX_TIM4_Init+0xa8>)
 800112a:	f005 f907 	bl	800633c <HAL_TIMEx_MasterConfigSynchronization>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001134:	f000 fa02 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
	TIM4->CR1 &= ~TIM_CR1_CEN; 	// dont start it
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <MX_TIM4_Init+0xac>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <MX_TIM4_Init+0xac>)
 800113e:	f023 0301 	bic.w	r3, r3, #1
 8001142:	6013      	str	r3, [r2, #0]
	TIM4->CNT = 0;				//reset it
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <MX_TIM4_Init+0xac>)
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END TIM4_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	240000d8 	.word	0x240000d8
 8001158:	40000800 	.word	0x40000800

0800115c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <MX_TIM5_Init+0x94>)
 800117c:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <MX_TIM5_Init+0x98>)
 800117e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_TIM5_Init+0x94>)
 8001182:	2200      	movs	r2, #0
 8001184:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_TIM5_Init+0x94>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_TIM5_Init+0x94>)
 800118e:	f04f 32ff 	mov.w	r2, #4294967295
 8001192:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_TIM5_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_TIM5_Init+0x94>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011a0:	4813      	ldr	r0, [pc, #76]	; (80011f0 <MX_TIM5_Init+0x94>)
 80011a2:	f004 fc4b 	bl	8005a3c <HAL_TIM_Base_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80011ac:	f000 f9c6 	bl	800153c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_TIM5_Init+0x94>)
 80011be:	f004 fe5b 	bl	8005e78 <HAL_TIM_ConfigClockSource>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80011c8:	f000 f9b8 	bl	800153c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_TIM5_Init+0x94>)
 80011da:	f005 f8af 	bl	800633c <HAL_TIMEx_MasterConfigSynchronization>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80011e4:	f000 f9aa 	bl	800153c <Error_Handler>
//  TIM5->DIER |= TIM_DIER_UIE; // Enable update interrupt
//  TIM5->ARR = ENC_DMA_POLL_FREQ; // Timebase

  /* USER CODE END TIM5_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	24000124 	.word	0x24000124
 80011f4:	40000c00 	.word	0x40000c00

080011f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011fc:	4b22      	ldr	r3, [pc, #136]	; (8001288 <MX_USART3_UART_Init+0x90>)
 80011fe:	4a23      	ldr	r2, [pc, #140]	; (800128c <MX_USART3_UART_Init+0x94>)
 8001200:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <MX_USART3_UART_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_USART3_UART_Init+0x90>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_USART3_UART_Init+0x90>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <MX_USART3_UART_Init+0x90>)
 800123c:	2200      	movs	r2, #0
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001240:	4811      	ldr	r0, [pc, #68]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001242:	f005 f927 	bl	8006494 <HAL_UART_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800124c:	f000 f976 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001250:	2100      	movs	r1, #0
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001254:	f007 fd7f 	bl	8008d56 <HAL_UARTEx_SetTxFifoThreshold>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800125e:	f000 f96d 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001262:	2100      	movs	r1, #0
 8001264:	4808      	ldr	r0, [pc, #32]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001266:	f007 fdb4 	bl	8008dd2 <HAL_UARTEx_SetRxFifoThreshold>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001270:	f000 f964 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <MX_USART3_UART_Init+0x90>)
 8001276:	f007 fd35 	bl	8008ce4 <HAL_UARTEx_DisableFifoMode>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001280:	f000 f95c 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	24000170 	.word	0x24000170
 800128c:	40004800 	.word	0x40004800

08001290 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08e      	sub	sp, #56	; 0x38
 80012a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	4b9a      	ldr	r3, [pc, #616]	; (8001520 <MX_GPIO_Init+0x280>)
 80012b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012bc:	4a98      	ldr	r2, [pc, #608]	; (8001520 <MX_GPIO_Init+0x280>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012c6:	4b96      	ldr	r3, [pc, #600]	; (8001520 <MX_GPIO_Init+0x280>)
 80012c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	623b      	str	r3, [r7, #32]
 80012d2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d4:	4b92      	ldr	r3, [pc, #584]	; (8001520 <MX_GPIO_Init+0x280>)
 80012d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012da:	4a91      	ldr	r2, [pc, #580]	; (8001520 <MX_GPIO_Init+0x280>)
 80012dc:	f043 0320 	orr.w	r3, r3, #32
 80012e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012e4:	4b8e      	ldr	r3, [pc, #568]	; (8001520 <MX_GPIO_Init+0x280>)
 80012e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ea:	f003 0320 	and.w	r3, r3, #32
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f2:	4b8b      	ldr	r3, [pc, #556]	; (8001520 <MX_GPIO_Init+0x280>)
 80012f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012f8:	4a89      	ldr	r2, [pc, #548]	; (8001520 <MX_GPIO_Init+0x280>)
 80012fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001302:	4b87      	ldr	r3, [pc, #540]	; (8001520 <MX_GPIO_Init+0x280>)
 8001304:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	4b83      	ldr	r3, [pc, #524]	; (8001520 <MX_GPIO_Init+0x280>)
 8001312:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001316:	4a82      	ldr	r2, [pc, #520]	; (8001520 <MX_GPIO_Init+0x280>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001320:	4b7f      	ldr	r3, [pc, #508]	; (8001520 <MX_GPIO_Init+0x280>)
 8001322:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	4b7c      	ldr	r3, [pc, #496]	; (8001520 <MX_GPIO_Init+0x280>)
 8001330:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001334:	4a7a      	ldr	r2, [pc, #488]	; (8001520 <MX_GPIO_Init+0x280>)
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800133e:	4b78      	ldr	r3, [pc, #480]	; (8001520 <MX_GPIO_Init+0x280>)
 8001340:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800134c:	4b74      	ldr	r3, [pc, #464]	; (8001520 <MX_GPIO_Init+0x280>)
 800134e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001352:	4a73      	ldr	r2, [pc, #460]	; (8001520 <MX_GPIO_Init+0x280>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800135c:	4b70      	ldr	r3, [pc, #448]	; (8001520 <MX_GPIO_Init+0x280>)
 800135e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800136a:	4b6d      	ldr	r3, [pc, #436]	; (8001520 <MX_GPIO_Init+0x280>)
 800136c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001370:	4a6b      	ldr	r2, [pc, #428]	; (8001520 <MX_GPIO_Init+0x280>)
 8001372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001376:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800137a:	4b69      	ldr	r3, [pc, #420]	; (8001520 <MX_GPIO_Init+0x280>)
 800137c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001388:	4b65      	ldr	r3, [pc, #404]	; (8001520 <MX_GPIO_Init+0x280>)
 800138a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800138e:	4a64      	ldr	r2, [pc, #400]	; (8001520 <MX_GPIO_Init+0x280>)
 8001390:	f043 0310 	orr.w	r3, r3, #16
 8001394:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001398:	4b61      	ldr	r3, [pc, #388]	; (8001520 <MX_GPIO_Init+0x280>)
 800139a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ac:	485d      	ldr	r0, [pc, #372]	; (8001524 <MX_GPIO_Init+0x284>)
 80013ae:	f001 fd33 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TILT_DIR_Pin|TILT_EN_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2160      	movs	r1, #96	; 0x60
 80013b6:	485c      	ldr	r0, [pc, #368]	; (8001528 <MX_GPIO_Init+0x288>)
 80013b8:	f001 fd2e 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TILT_STP_Pin|PAN_STP_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	2160      	movs	r1, #96	; 0x60
 80013c0:	485a      	ldr	r0, [pc, #360]	; (800152c <MX_GPIO_Init+0x28c>)
 80013c2:	f001 fd29 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|BRAKE_Pin|PAN_DIR_Pin|PAN_EN_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	f244 3140 	movw	r1, #17216	; 0x4340
 80013cc:	4858      	ldr	r0, [pc, #352]	; (8001530 <MX_GPIO_Init+0x290>)
 80013ce:	f001 fd23 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DROP_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2103      	movs	r1, #3
 80013d6:	4857      	ldr	r0, [pc, #348]	; (8001534 <MX_GPIO_Init+0x294>)
 80013d8:	f001 fd1e 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	4619      	mov	r1, r3
 80013f0:	484e      	ldr	r0, [pc, #312]	; (800152c <MX_GPIO_Init+0x28c>)
 80013f2:	f001 fb61 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80013f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140c:	4619      	mov	r1, r3
 800140e:	4845      	ldr	r0, [pc, #276]	; (8001524 <MX_GPIO_Init+0x284>)
 8001410:	f001 fb52 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TILT_DIR_Pin TILT_EN_Pin */
  GPIO_InitStruct.Pin = TILT_DIR_Pin|TILT_EN_Pin;
 8001414:	2360      	movs	r3, #96	; 0x60
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	2301      	movs	r3, #1
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001428:	4619      	mov	r1, r3
 800142a:	483f      	ldr	r0, [pc, #252]	; (8001528 <MX_GPIO_Init+0x288>)
 800142c:	f001 fb44 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TILT_STP_Pin PAN_STP_Pin */
  GPIO_InitStruct.Pin = TILT_STP_Pin|PAN_STP_Pin;
 8001430:	2360      	movs	r3, #96	; 0x60
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001444:	4619      	mov	r1, r3
 8001446:	4839      	ldr	r0, [pc, #228]	; (800152c <MX_GPIO_Init+0x28c>)
 8001448:	f001 fb36 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin PAN_DIR_Pin PAN_EN_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|PAN_DIR_Pin|PAN_EN_Pin;
 800144c:	f44f 4386 	mov.w	r3, #17152	; 0x4300
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	4832      	ldr	r0, [pc, #200]	; (8001530 <MX_GPIO_Init+0x290>)
 8001466:	f001 fb27 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800146e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	482e      	ldr	r0, [pc, #184]	; (8001538 <MX_GPIO_Init+0x298>)
 8001480:	f001 fb1a 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148a:	2300      	movs	r3, #0
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001496:	4619      	mov	r1, r3
 8001498:	4823      	ldr	r0, [pc, #140]	; (8001528 <MX_GPIO_Init+0x288>)
 800149a:	f001 fb0d 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800149e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80014b0:	230a      	movs	r3, #10
 80014b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	481b      	ldr	r0, [pc, #108]	; (8001528 <MX_GPIO_Init+0x288>)
 80014bc:	f001 fafc 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80014c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	4619      	mov	r1, r3
 80014d8:	4813      	ldr	r0, [pc, #76]	; (8001528 <MX_GPIO_Init+0x288>)
 80014da:	f001 faed 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BRAKE_Pin */
  GPIO_InitStruct.Pin = BRAKE_Pin;
 80014de:	2340      	movs	r3, #64	; 0x40
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014e2:	2311      	movs	r3, #17
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BRAKE_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f2:	4619      	mov	r1, r3
 80014f4:	480e      	ldr	r0, [pc, #56]	; (8001530 <MX_GPIO_Init+0x290>)
 80014f6:	f001 fadf 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DROP_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DROP_Pin|LD2_Pin;
 80014fa:	2303      	movs	r3, #3
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	4808      	ldr	r0, [pc, #32]	; (8001534 <MX_GPIO_Init+0x294>)
 8001512:	f001 fad1 	bl	8002ab8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001516:	bf00      	nop
 8001518:	3738      	adds	r7, #56	; 0x38
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	58024400 	.word	0x58024400
 8001524:	58021400 	.word	0x58021400
 8001528:	58020000 	.word	0x58020000
 800152c:	58020800 	.word	0x58020800
 8001530:	58020400 	.word	0x58020400
 8001534:	58021000 	.word	0x58021000
 8001538:	58021800 	.word	0x58021800

0800153c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001540:	b672      	cpsid	i
}
 8001542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001544:	e7fe      	b.n	8001544 <Error_Handler+0x8>
	...

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_MspInit+0x30>)
 8001550:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001554:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_MspInit+0x30>)
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_MspInit+0x30>)
 8001560:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	58024400 	.word	0x58024400

0800157c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800159c:	d135      	bne.n	800160a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800159e:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <HAL_TIM_Encoder_MspInit+0x98>)
 80015a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015a4:	4a1b      	ldr	r2, [pc, #108]	; (8001614 <HAL_TIM_Encoder_MspInit+0x98>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_TIM_Encoder_MspInit+0x98>)
 80015b0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_TIM_Encoder_MspInit+0x98>)
 80015be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015c2:	4a14      	ldr	r2, [pc, #80]	; (8001614 <HAL_TIM_Encoder_MspInit+0x98>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_TIM_Encoder_MspInit+0x98>)
 80015ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PLUNGE_ENC_A_Pin|PLUNGE_ENC_B_Pin;
 80015da:	2303      	movs	r3, #3
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015ea:	2301      	movs	r3, #1
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	4808      	ldr	r0, [pc, #32]	; (8001618 <HAL_TIM_Encoder_MspInit+0x9c>)
 80015f6:	f001 fa5f 	bl	8002ab8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	201c      	movs	r0, #28
 8001600:	f000 fcc1 	bl	8001f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001604:	201c      	movs	r0, #28
 8001606:	f000 fcd8 	bl	8001fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800160a:	bf00      	nop
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	58024400 	.word	0x58024400
 8001618:	58020000 	.word	0x58020000

0800161c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1d      	ldr	r2, [pc, #116]	; (80016a0 <HAL_TIM_Base_MspInit+0x84>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d117      	bne.n	800165e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HAL_TIM_Base_MspInit+0x88>)
 8001630:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001634:	4a1b      	ldr	r2, [pc, #108]	; (80016a4 <HAL_TIM_Base_MspInit+0x88>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_TIM_Base_MspInit+0x88>)
 8001640:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	201e      	movs	r0, #30
 8001652:	f000 fc98 	bl	8001f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001656:	201e      	movs	r0, #30
 8001658:	f000 fcaf 	bl	8001fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800165c:	e01b      	b.n	8001696 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a11      	ldr	r2, [pc, #68]	; (80016a8 <HAL_TIM_Base_MspInit+0x8c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d116      	bne.n	8001696 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_TIM_Base_MspInit+0x88>)
 800166a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800166e:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_TIM_Base_MspInit+0x88>)
 8001670:	f043 0308 	orr.w	r3, r3, #8
 8001674:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_TIM_Base_MspInit+0x88>)
 800167a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	2032      	movs	r0, #50	; 0x32
 800168c:	f000 fc7b 	bl	8001f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001690:	2032      	movs	r0, #50	; 0x32
 8001692:	f000 fc92 	bl	8001fba <HAL_NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40000800 	.word	0x40000800
 80016a4:	58024400 	.word	0x58024400
 80016a8:	40000c00 	.word	0x40000c00

080016ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b0ba      	sub	sp, #232	; 0xe8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	22c0      	movs	r2, #192	; 0xc0
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f007 fc2d 	bl	8008f2c <memset>
  if(huart->Instance==USART3)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a2b      	ldr	r2, [pc, #172]	; (8001784 <HAL_UART_MspInit+0xd8>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d14e      	bne.n	800177a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016dc:	f04f 0202 	mov.w	r2, #2
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	4618      	mov	r0, r3
 80016f4:	f002 fbc2 	bl	8003e7c <HAL_RCCEx_PeriphCLKConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80016fe:	f7ff ff1d 	bl	800153c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <HAL_UART_MspInit+0xdc>)
 8001704:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001708:	4a1f      	ldr	r2, [pc, #124]	; (8001788 <HAL_UART_MspInit+0xdc>)
 800170a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800170e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <HAL_UART_MspInit+0xdc>)
 8001714:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_UART_MspInit+0xdc>)
 8001722:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <HAL_UART_MspInit+0xdc>)
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_UART_MspInit+0xdc>)
 8001732:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800173e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001742:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001758:	2307      	movs	r3, #7
 800175a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001762:	4619      	mov	r1, r3
 8001764:	4809      	ldr	r0, [pc, #36]	; (800178c <HAL_UART_MspInit+0xe0>)
 8001766:	f001 f9a7 	bl	8002ab8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	2027      	movs	r0, #39	; 0x27
 8001770:	f000 fc09 	bl	8001f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001774:	2027      	movs	r0, #39	; 0x27
 8001776:	f000 fc20 	bl	8001fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800177a:	bf00      	nop
 800177c:	37e8      	adds	r7, #232	; 0xe8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40004800 	.word	0x40004800
 8001788:	58024400 	.word	0x58024400
 800178c:	58020c00 	.word	0x58020c00

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <NMI_Handler+0x4>

08001796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <MemManage_Handler+0x4>

080017a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <BusFault_Handler+0x4>

080017a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <UsageFault_Handler+0x4>

080017ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017dc:	f000 fab4 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//NOTE TO MORNING LEO: LOG SEEMS TO WORK, SHOULD TRANSMIT IT TO PC FOR EASY VISUALIZATION
	if ((TIM2->SR & TIM_SR_UIF) != 0) { // check if update interrupt occured
 80017e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d024      	beq.n	8001840 <TIM2_IRQHandler+0x5c>
		HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 0); //engage brake
 80017f6:	2200      	movs	r2, #0
 80017f8:	2140      	movs	r1, #64	; 0x40
 80017fa:	4814      	ldr	r0, [pc, #80]	; (800184c <TIM2_IRQHandler+0x68>)
 80017fc:	f001 fb0c 	bl	8002e18 <HAL_GPIO_WritePin>
		posn_braked_at = TIM2->CNT;
 8001800:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <TIM2_IRQHandler+0x6c>)
 8001808:	6013      	str	r3, [r2, #0]
		//also somehow make sure motor is stopped

		plunge_done_flag = 1;
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <TIM2_IRQHandler+0x70>)
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]

		TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 8001810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	6013      	str	r3, [r2, #0]
		TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 8001820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;
 8001830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800183a:	f023 0301 	bic.w	r3, r3, #1
 800183e:	6013      	str	r3, [r2, #0]
		//TIM2->ARR = 999999;			//massive so that we dont hit it when we try to move around. later i can just diable timer but for debugging i want to preserve tim2->cnt
    }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001840:	4805      	ldr	r0, [pc, #20]	; (8001858 <TIM2_IRQHandler+0x74>)
 8001842:	f004 f9f9 	bl	8005c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	58020400 	.word	0x58020400
 8001850:	24009e5c 	.word	0x24009e5c
 8001854:	24009e60 	.word	0x24009e60
 8001858:	2400008c 	.word	0x2400008c

0800185c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if ((TIM4->SR & TIM_SR_UIF) != 0) {
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <TIM4_IRQHandler+0x3c>)
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d010      	beq.n	800188e <TIM4_IRQHandler+0x32>
		DEPOSITED = 1;
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <TIM4_IRQHandler+0x40>)
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
		dispense();
 8001872:	f7fe ff13 	bl	800069c <dispense>
		TIM4->DIER &=  ~TIM_DIER_UIE; 	// update interrupt disabled
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <TIM4_IRQHandler+0x3c>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	4a07      	ldr	r2, [pc, #28]	; (8001898 <TIM4_IRQHandler+0x3c>)
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	60d3      	str	r3, [r2, #12]
		TIM4->CR1 &= ~TIM_CR1_CEN; 	// only fire this timer once
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <TIM4_IRQHandler+0x3c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a04      	ldr	r2, [pc, #16]	; (8001898 <TIM4_IRQHandler+0x3c>)
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800188e:	4804      	ldr	r0, [pc, #16]	; (80018a0 <TIM4_IRQHandler+0x44>)
 8001890:	f004 f9d2 	bl	8005c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40000800 	.word	0x40000800
 800189c:	24009e61 	.word	0x24009e61
 80018a0:	240000d8 	.word	0x240000d8

080018a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	//dispense();
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <USART3_IRQHandler+0x10>)
 80018aa:	f004 ff1d 	bl	80066e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	24000170 	.word	0x24000170

080018b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
		/* always dot he logging portion */
		/* TODO: Convert this datalogging to DMA to speed it up. actually a priority I think it would have big preformance gains*/
		log_position += 1; // increment number of data points taken
 80018be:	4b6e      	ldr	r3, [pc, #440]	; (8001a78 <TIM5_IRQHandler+0x1c0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	4a6c      	ldr	r2, [pc, #432]	; (8001a78 <TIM5_IRQHandler+0x1c0>)
 80018c6:	6013      	str	r3, [r2, #0]
		current_pos = TIM2->CNT;
 80018c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	4a6b      	ldr	r2, [pc, #428]	; (8001a7c <TIM5_IRQHandler+0x1c4>)
 80018d0:	6013      	str	r3, [r2, #0]
		posLog[log_position] = current_pos; // update log of positions
 80018d2:	4b69      	ldr	r3, [pc, #420]	; (8001a78 <TIM5_IRQHandler+0x1c0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a69      	ldr	r2, [pc, #420]	; (8001a7c <TIM5_IRQHandler+0x1c4>)
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	4969      	ldr	r1, [pc, #420]	; (8001a80 <TIM5_IRQHandler+0x1c8>)
 80018dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		running_sum += current_pos - prev_pos;
 80018e0:	4b66      	ldr	r3, [pc, #408]	; (8001a7c <TIM5_IRQHandler+0x1c4>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b67      	ldr	r3, [pc, #412]	; (8001a84 <TIM5_IRQHandler+0x1cc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	1ad2      	subs	r2, r2, r3
 80018ea:	4b67      	ldr	r3, [pc, #412]	; (8001a88 <TIM5_IRQHandler+0x1d0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a65      	ldr	r2, [pc, #404]	; (8001a88 <TIM5_IRQHandler+0x1d0>)
 80018f2:	6013      	str	r3, [r2, #0]
		prev_pos = current_pos;
 80018f4:	4b61      	ldr	r3, [pc, #388]	; (8001a7c <TIM5_IRQHandler+0x1c4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a62      	ldr	r2, [pc, #392]	; (8001a84 <TIM5_IRQHandler+0x1cc>)
 80018fa:	6013      	str	r3, [r2, #0]
		/* if disp hasnt triggered yet, calculate speed and find disp pos */
		if(!disp_flag){
 80018fc:	4b63      	ldr	r3, [pc, #396]	; (8001a8c <TIM5_IRQHandler+0x1d4>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	f040 80a3 	bne.w	8001a4c <TIM5_IRQHandler+0x194>
			if(log_position >= MOVING_AVG_LENGTH) {
 8001906:	4b5c      	ldr	r3, [pc, #368]	; (8001a78 <TIM5_IRQHandler+0x1c0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2bc7      	cmp	r3, #199	; 0xc7
 800190c:	f240 809e 	bls.w	8001a4c <TIM5_IRQHandler+0x194>
				/*update running sum of most recent n data points*/
				running_sum -= (posLog[log_position - MOVING_AVG_LENGTH + 1] - posLog[log_position - MOVING_AVG_LENGTH]);
 8001910:	4b59      	ldr	r3, [pc, #356]	; (8001a78 <TIM5_IRQHandler+0x1c0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3bc8      	subs	r3, #200	; 0xc8
 8001916:	4a5a      	ldr	r2, [pc, #360]	; (8001a80 <TIM5_IRQHandler+0x1c8>)
 8001918:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800191c:	4b56      	ldr	r3, [pc, #344]	; (8001a78 <TIM5_IRQHandler+0x1c0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3bc7      	subs	r3, #199	; 0xc7
 8001922:	4957      	ldr	r1, [pc, #348]	; (8001a80 <TIM5_IRQHandler+0x1c8>)
 8001924:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001928:	1ad2      	subs	r2, r2, r3
 800192a:	4b57      	ldr	r3, [pc, #348]	; (8001a88 <TIM5_IRQHandler+0x1d0>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4413      	add	r3, r2
 8001930:	4a55      	ldr	r2, [pc, #340]	; (8001a88 <TIM5_IRQHandler+0x1d0>)
 8001932:	6013      	str	r3, [r2, #0]
				speed = (double)running_sum / (double)MOVING_AVG_LENGTH; // speed in pulses per log
 8001934:	4b54      	ldr	r3, [pc, #336]	; (8001a88 <TIM5_IRQHandler+0x1d0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	ee07 3a90 	vmov	s15, r3
 800193c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001940:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8001a68 <TIM5_IRQHandler+0x1b0>
 8001944:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001948:	4b51      	ldr	r3, [pc, #324]	; (8001a90 <TIM5_IRQHandler+0x1d8>)
 800194a:	ed83 7b00 	vstr	d7, [r3]

				uint32_t clocks_per_encoder_pulse = (CLOCKS_PER_LOG / speed); // a form of speed measurement
 800194e:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <TIM5_IRQHandler+0x1d8>)
 8001950:	ed93 6b00 	vldr	d6, [r3]
 8001954:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001a70 <TIM5_IRQHandler+0x1b8>
 8001958:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800195c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001960:	ee17 3a90 	vmov	r3, s15
 8001964:	607b      	str	r3, [r7, #4]

				next_next_pos = current_pos + 2*speed;	// predicted position 2 TIM5 updates from now. if this is beyond disp_pos we want to trigger TIM4
 8001966:	4b45      	ldr	r3, [pc, #276]	; (8001a7c <TIM5_IRQHandler+0x1c4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <TIM5_IRQHandler+0x1d8>)
 8001974:	ed93 7b00 	vldr	d7, [r3]
 8001978:	ee37 7b07 	vadd.f64	d7, d7, d7
 800197c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001980:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001984:	ee17 2a90 	vmov	r2, s15
 8001988:	4b42      	ldr	r3, [pc, #264]	; (8001a94 <TIM5_IRQHandler+0x1dc>)
 800198a:	601a      	str	r2, [r3, #0]

				// enc				enc		   enc/log			clocks 				clocks/log
				dispense_pos = (timepoint_pos) - (speed * (dispense_delay_clocks / CLOCKS_PER_LOG));
 800198c:	4b42      	ldr	r3, [pc, #264]	; (8001a98 <TIM5_IRQHandler+0x1e0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	ee07 3a90 	vmov	s15, r3
 8001994:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001998:	4b40      	ldr	r3, [pc, #256]	; (8001a9c <TIM5_IRQHandler+0x1e4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80019a4:	ed9f 4b32 	vldr	d4, [pc, #200]	; 8001a70 <TIM5_IRQHandler+0x1b8>
 80019a8:	ee87 5b04 	vdiv.f64	d5, d7, d4
 80019ac:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <TIM5_IRQHandler+0x1d8>)
 80019ae:	ed93 7b00 	vldr	d7, [r3]
 80019b2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80019ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80019be:	ee17 2a90 	vmov	r2, s15
 80019c2:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <TIM5_IRQHandler+0x1e8>)
 80019c4:	601a      	str	r2, [r3, #0]
				//		(enc ticks @ intersection) - (encoder ticks between disp signal and contact )
				// dispense_delay_clocks is based on the geometry of the dipense (ie distance and speed that the drop is shooting at)

				if(next_next_pos > dispense_pos) { // dispense comes within the next timebase
 80019c6:	4b33      	ldr	r3, [pc, #204]	; (8001a94 <TIM5_IRQHandler+0x1dc>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4b35      	ldr	r3, [pc, #212]	; (8001aa0 <TIM5_IRQHandler+0x1e8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d93c      	bls.n	8001a4c <TIM5_IRQHandler+0x194>
					TIM5->ARR = TIM5->ARR * POST_DISP_LOG_SLOW_FACTOR; // slow down the logging rate after dispense since it is less essential
 80019d2:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <TIM5_IRQHandler+0x1ec>)
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	4a33      	ldr	r2, [pc, #204]	; (8001aa4 <TIM5_IRQHandler+0x1ec>)
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	62d3      	str	r3, [r2, #44]	; 0x2c

					/* Insert a marker for when dispense happened */
					//log_position += 1;
					//posLog[log_position] = 12345678;

					disp_flag = 1;
 80019dc:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <TIM5_IRQHandler+0x1d4>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]

					// using this with a third timer is likely the most accurate. allows inter-encoder values
					clocks_to_disp = clocks_per_encoder_pulse*(dispense_pos-current_pos);
 80019e2:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <TIM5_IRQHandler+0x1e8>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <TIM5_IRQHandler+0x1c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	4a2d      	ldr	r2, [pc, #180]	; (8001aa8 <TIM5_IRQHandler+0x1f0>)
 80019f4:	6013      	str	r3, [r2, #0]

					/* start TIM4 to count to clocks_to_disp */
					TIM4->CR1  &= ~TIM_CR1_CEN; 	//start counter
 80019f6:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <TIM5_IRQHandler+0x1f4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a2c      	ldr	r2, [pc, #176]	; (8001aac <TIM5_IRQHandler+0x1f4>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	6013      	str	r3, [r2, #0]
					TIM4->CNT   = 0;				// Reset count
 8001a02:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <TIM5_IRQHandler+0x1f4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
					TIM4->ARR 	= clocks_to_disp; 	// Update event when we want to dispense
 8001a08:	4a28      	ldr	r2, [pc, #160]	; (8001aac <TIM5_IRQHandler+0x1f4>)
 8001a0a:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <TIM5_IRQHandler+0x1f0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	62d3      	str	r3, [r2, #44]	; 0x2c
					TIM4->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8001a10:	4b26      	ldr	r3, [pc, #152]	; (8001aac <TIM5_IRQHandler+0x1f4>)
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	4a25      	ldr	r2, [pc, #148]	; (8001aac <TIM5_IRQHandler+0x1f4>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	6113      	str	r3, [r2, #16]
					TIM4->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <TIM5_IRQHandler+0x1f4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a22      	ldr	r2, [pc, #136]	; (8001aac <TIM5_IRQHandler+0x1f4>)
 8001a22:	f023 0302 	bic.w	r3, r3, #2
 8001a26:	6013      	str	r3, [r2, #0]
					TIM4->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8001a28:	4b20      	ldr	r3, [pc, #128]	; (8001aac <TIM5_IRQHandler+0x1f4>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4a1f      	ldr	r2, [pc, #124]	; (8001aac <TIM5_IRQHandler+0x1f4>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	60d3      	str	r3, [r2, #12]
					TIM4->CR1  |=  TIM_CR1_ARPE;	// enable auto reload preload
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <TIM5_IRQHandler+0x1f4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1c      	ldr	r2, [pc, #112]	; (8001aac <TIM5_IRQHandler+0x1f4>)
 8001a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a3e:	6013      	str	r3, [r2, #0]
					TIM4->CR1  |=  TIM_CR1_CEN; 	//start counter
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <TIM5_IRQHandler+0x1f4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a19      	ldr	r2, [pc, #100]	; (8001aac <TIM5_IRQHandler+0x1f4>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6013      	str	r3, [r2, #0]
			}


		}

		TIM5->SR &= ~TIM_SR_UIF; // Clear the TIM5 update flag
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <TIM5_IRQHandler+0x1ec>)
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <TIM5_IRQHandler+0x1ec>)
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a58:	4815      	ldr	r0, [pc, #84]	; (8001ab0 <TIM5_IRQHandler+0x1f8>)
 8001a5a:	f004 f8ed 	bl	8005c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	40690000 	.word	0x40690000
 8001a70:	00000000 	.word	0x00000000
 8001a74:	40c2c000 	.word	0x40c2c000
 8001a78:	24009e44 	.word	0x24009e44
 8001a7c:	24009ee8 	.word	0x24009ee8
 8001a80:	24000204 	.word	0x24000204
 8001a84:	24009eec 	.word	0x24009eec
 8001a88:	24009e48 	.word	0x24009e48
 8001a8c:	24009e54 	.word	0x24009e54
 8001a90:	24009ee0 	.word	0x24009ee0
 8001a94:	24009ef0 	.word	0x24009ef0
 8001a98:	24009e4c 	.word	0x24009e4c
 8001a9c:	24009e50 	.word	0x24009e50
 8001aa0:	24009e58 	.word	0x24009e58
 8001aa4:	40000c00 	.word	0x40000c00
 8001aa8:	24009e64 	.word	0x24009e64
 8001aac:	40000800 	.word	0x40000800
 8001ab0:	24000124 	.word	0x24000124

08001ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001abc:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <_sbrk+0x5c>)
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <_sbrk+0x60>)
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d102      	bne.n	8001ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <_sbrk+0x64>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <_sbrk+0x68>)
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d207      	bcs.n	8001af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ae4:	f007 fa2a 	bl	8008f3c <__errno>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	220c      	movs	r2, #12
 8001aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
 8001af2:	e009      	b.n	8001b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <_sbrk+0x64>)
 8001b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	24100000 	.word	0x24100000
 8001b14:	00000400 	.word	0x00000400
 8001b18:	24009ef4 	.word	0x24009ef4
 8001b1c:	2400a048 	.word	0x2400a048

08001b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b24:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <SystemInit+0xd0>)
 8001b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b2a:	4a31      	ldr	r2, [pc, #196]	; (8001bf0 <SystemInit+0xd0>)
 8001b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b34:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <SystemInit+0xd4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d807      	bhi.n	8001b50 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b40:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <SystemInit+0xd4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 030f 	bic.w	r3, r3, #15
 8001b48:	4a2a      	ldr	r2, [pc, #168]	; (8001bf4 <SystemInit+0xd4>)
 8001b4a:	f043 0303 	orr.w	r3, r3, #3
 8001b4e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b50:	4b29      	ldr	r3, [pc, #164]	; (8001bf8 <SystemInit+0xd8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a28      	ldr	r2, [pc, #160]	; (8001bf8 <SystemInit+0xd8>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b5c:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <SystemInit+0xd8>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <SystemInit+0xd8>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4924      	ldr	r1, [pc, #144]	; (8001bf8 <SystemInit+0xd8>)
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <SystemInit+0xdc>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b6e:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <SystemInit+0xd4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <SystemInit+0xd4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 030f 	bic.w	r3, r3, #15
 8001b82:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <SystemInit+0xd4>)
 8001b84:	f043 0303 	orr.w	r3, r3, #3
 8001b88:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <SystemInit+0xd8>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <SystemInit+0xd8>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <SystemInit+0xd8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <SystemInit+0xd8>)
 8001b9e:	4a18      	ldr	r2, [pc, #96]	; (8001c00 <SystemInit+0xe0>)
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <SystemInit+0xd8>)
 8001ba4:	4a17      	ldr	r2, [pc, #92]	; (8001c04 <SystemInit+0xe4>)
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <SystemInit+0xd8>)
 8001baa:	4a17      	ldr	r2, [pc, #92]	; (8001c08 <SystemInit+0xe8>)
 8001bac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <SystemInit+0xd8>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <SystemInit+0xd8>)
 8001bb6:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <SystemInit+0xe8>)
 8001bb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <SystemInit+0xd8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bc0:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <SystemInit+0xd8>)
 8001bc2:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <SystemInit+0xe8>)
 8001bc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <SystemInit+0xd8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <SystemInit+0xd8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a09      	ldr	r2, [pc, #36]	; (8001bf8 <SystemInit+0xd8>)
 8001bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <SystemInit+0xd8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <SystemInit+0xec>)
 8001be0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001be4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00
 8001bf4:	52002000 	.word	0x52002000
 8001bf8:	58024400 	.word	0x58024400
 8001bfc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c00:	02020200 	.word	0x02020200
 8001c04:	01ff0000 	.word	0x01ff0000
 8001c08:	01010280 	.word	0x01010280
 8001c0c:	52004000 	.word	0x52004000

08001c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c14:	f7ff ff84 	bl	8001b20 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c1a:	490d      	ldr	r1, [pc, #52]	; (8001c50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c30:	4c0a      	ldr	r4, [pc, #40]	; (8001c5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c3e:	f007 f983 	bl	8008f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c42:	f7ff f8b3 	bl	8000dac <main>
  bx  lr
 8001c46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c48:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001c4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c50:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001c54:	0800990c 	.word	0x0800990c
  ldr r2, =_sbss
 8001c58:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001c5c:	2400a044 	.word	0x2400a044

08001c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC_IRQHandler>
	...

08001c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6a:	2003      	movs	r0, #3
 8001c6c:	f000 f980 	bl	8001f70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c70:	f001 ff2e 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8001c74:	4602      	mov	r2, r0
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_Init+0x68>)
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	0a1b      	lsrs	r3, r3, #8
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	4913      	ldr	r1, [pc, #76]	; (8001cd0 <HAL_Init+0x6c>)
 8001c82:	5ccb      	ldrb	r3, [r1, r3]
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_Init+0x68>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	4a0e      	ldr	r2, [pc, #56]	; (8001cd0 <HAL_Init+0x6c>)
 8001c98:	5cd3      	ldrb	r3, [r2, r3]
 8001c9a:	f003 031f 	and.w	r3, r3, #31
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca4:	4a0b      	ldr	r2, [pc, #44]	; (8001cd4 <HAL_Init+0x70>)
 8001ca6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ca8:	4a0b      	ldr	r2, [pc, #44]	; (8001cd8 <HAL_Init+0x74>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f000 f814 	bl	8001cdc <HAL_InitTick>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e002      	b.n	8001cc4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cbe:	f7ff fc43 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	08009890 	.word	0x08009890
 8001cd4:	24000010 	.word	0x24000010
 8001cd8:	2400000c 	.word	0x2400000c

08001cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_InitTick+0x60>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e021      	b.n	8001d34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <HAL_InitTick+0x64>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_InitTick+0x60>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f965 	bl	8001fd6 <HAL_SYSTICK_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00e      	b.n	8001d34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	d80a      	bhi.n	8001d32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f000 f92f 	bl	8001f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d28:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <HAL_InitTick+0x68>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	24000018 	.word	0x24000018
 8001d40:	2400000c 	.word	0x2400000c
 8001d44:	24000014 	.word	0x24000014

08001d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x20>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x24>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <HAL_IncTick+0x24>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	24000018 	.word	0x24000018
 8001d6c:	24009ef8 	.word	0x24009ef8

08001d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return uwTick;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_GetTick+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	24009ef8 	.word	0x24009ef8

08001d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff ffee 	bl	8001d70 <HAL_GetTick>
 8001d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da0:	d005      	beq.n	8001dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_Delay+0x44>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dae:	bf00      	nop
 8001db0:	f7ff ffde 	bl	8001d70 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d8f7      	bhi.n	8001db0 <HAL_Delay+0x28>
  {
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	24000018 	.word	0x24000018

08001dd0 <__NVIC_SetPriorityGrouping>:
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <__NVIC_SetPriorityGrouping+0x40>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dec:	4013      	ands	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <__NVIC_SetPriorityGrouping+0x40>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00
 8001e14:	05fa0000 	.word	0x05fa0000

08001e18 <__NVIC_GetPriorityGrouping>:
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <__NVIC_GetPriorityGrouping+0x18>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 0307 	and.w	r3, r3, #7
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_EnableIRQ>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	db0b      	blt.n	8001e5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	f003 021f 	and.w	r2, r3, #31
 8001e4c:	4907      	ldr	r1, [pc, #28]	; (8001e6c <__NVIC_EnableIRQ+0x38>)
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	2001      	movs	r0, #1
 8001e56:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000e100 	.word	0xe000e100

08001e70 <__NVIC_SetPriority>:
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db0a      	blt.n	8001e9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	490c      	ldr	r1, [pc, #48]	; (8001ebc <__NVIC_SetPriority+0x4c>)
 8001e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e8e:	0112      	lsls	r2, r2, #4
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	440b      	add	r3, r1
 8001e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e98:	e00a      	b.n	8001eb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4908      	ldr	r1, [pc, #32]	; (8001ec0 <__NVIC_SetPriority+0x50>)
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	0112      	lsls	r2, r2, #4
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	761a      	strb	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000e100 	.word	0xe000e100
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	; 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f1c3 0307 	rsb	r3, r3, #7
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf28      	it	cs
 8001ee2:	2304      	movcs	r3, #4
 8001ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d902      	bls.n	8001ef4 <NVIC_EncodePriority+0x30>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3b03      	subs	r3, #3
 8001ef2:	e000      	b.n	8001ef6 <NVIC_EncodePriority+0x32>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	4313      	orrs	r3, r2
         );
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3724      	adds	r7, #36	; 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f3c:	d301      	bcc.n	8001f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e00f      	b.n	8001f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f42:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <SysTick_Config+0x40>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4a:	210f      	movs	r1, #15
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f7ff ff8e 	bl	8001e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <SysTick_Config+0x40>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5a:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <SysTick_Config+0x40>)
 8001f5c:	2207      	movs	r2, #7
 8001f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	e000e010 	.word	0xe000e010

08001f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ff29 	bl	8001dd0 <__NVIC_SetPriorityGrouping>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f94:	f7ff ff40 	bl	8001e18 <__NVIC_GetPriorityGrouping>
 8001f98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff ff90 	bl	8001ec4 <NVIC_EncodePriority>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff5f 	bl	8001e70 <__NVIC_SetPriority>
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff33 	bl	8001e34 <__NVIC_EnableIRQ>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ffa4 	bl	8001f2c <SysTick_Config>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001ff8:	f7ff feba 	bl	8001d70 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e2dc      	b.n	80025c2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d008      	beq.n	8002026 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e2cd      	b.n	80025c2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a76      	ldr	r2, [pc, #472]	; (8002204 <HAL_DMA_Abort+0x214>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d04a      	beq.n	80020c6 <HAL_DMA_Abort+0xd6>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a74      	ldr	r2, [pc, #464]	; (8002208 <HAL_DMA_Abort+0x218>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d045      	beq.n	80020c6 <HAL_DMA_Abort+0xd6>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a73      	ldr	r2, [pc, #460]	; (800220c <HAL_DMA_Abort+0x21c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d040      	beq.n	80020c6 <HAL_DMA_Abort+0xd6>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a71      	ldr	r2, [pc, #452]	; (8002210 <HAL_DMA_Abort+0x220>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d03b      	beq.n	80020c6 <HAL_DMA_Abort+0xd6>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a70      	ldr	r2, [pc, #448]	; (8002214 <HAL_DMA_Abort+0x224>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d036      	beq.n	80020c6 <HAL_DMA_Abort+0xd6>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a6e      	ldr	r2, [pc, #440]	; (8002218 <HAL_DMA_Abort+0x228>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d031      	beq.n	80020c6 <HAL_DMA_Abort+0xd6>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a6d      	ldr	r2, [pc, #436]	; (800221c <HAL_DMA_Abort+0x22c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d02c      	beq.n	80020c6 <HAL_DMA_Abort+0xd6>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a6b      	ldr	r2, [pc, #428]	; (8002220 <HAL_DMA_Abort+0x230>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d027      	beq.n	80020c6 <HAL_DMA_Abort+0xd6>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a6a      	ldr	r2, [pc, #424]	; (8002224 <HAL_DMA_Abort+0x234>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d022      	beq.n	80020c6 <HAL_DMA_Abort+0xd6>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a68      	ldr	r2, [pc, #416]	; (8002228 <HAL_DMA_Abort+0x238>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01d      	beq.n	80020c6 <HAL_DMA_Abort+0xd6>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a67      	ldr	r2, [pc, #412]	; (800222c <HAL_DMA_Abort+0x23c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d018      	beq.n	80020c6 <HAL_DMA_Abort+0xd6>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a65      	ldr	r2, [pc, #404]	; (8002230 <HAL_DMA_Abort+0x240>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_DMA_Abort+0xd6>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a64      	ldr	r2, [pc, #400]	; (8002234 <HAL_DMA_Abort+0x244>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00e      	beq.n	80020c6 <HAL_DMA_Abort+0xd6>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a62      	ldr	r2, [pc, #392]	; (8002238 <HAL_DMA_Abort+0x248>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d009      	beq.n	80020c6 <HAL_DMA_Abort+0xd6>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a61      	ldr	r2, [pc, #388]	; (800223c <HAL_DMA_Abort+0x24c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d004      	beq.n	80020c6 <HAL_DMA_Abort+0xd6>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a5f      	ldr	r2, [pc, #380]	; (8002240 <HAL_DMA_Abort+0x250>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_DMA_Abort+0xda>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_DMA_Abort+0xdc>
 80020ca:	2300      	movs	r3, #0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d013      	beq.n	80020f8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 021e 	bic.w	r2, r2, #30
 80020de:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695a      	ldr	r2, [r3, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	e00a      	b.n	800210e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 020e 	bic.w	r2, r2, #14
 8002106:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a3c      	ldr	r2, [pc, #240]	; (8002204 <HAL_DMA_Abort+0x214>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d072      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a3a      	ldr	r2, [pc, #232]	; (8002208 <HAL_DMA_Abort+0x218>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d06d      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a39      	ldr	r2, [pc, #228]	; (800220c <HAL_DMA_Abort+0x21c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d068      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a37      	ldr	r2, [pc, #220]	; (8002210 <HAL_DMA_Abort+0x220>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d063      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a36      	ldr	r2, [pc, #216]	; (8002214 <HAL_DMA_Abort+0x224>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d05e      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a34      	ldr	r2, [pc, #208]	; (8002218 <HAL_DMA_Abort+0x228>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d059      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a33      	ldr	r2, [pc, #204]	; (800221c <HAL_DMA_Abort+0x22c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d054      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a31      	ldr	r2, [pc, #196]	; (8002220 <HAL_DMA_Abort+0x230>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d04f      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a30      	ldr	r2, [pc, #192]	; (8002224 <HAL_DMA_Abort+0x234>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d04a      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a2e      	ldr	r2, [pc, #184]	; (8002228 <HAL_DMA_Abort+0x238>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d045      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a2d      	ldr	r2, [pc, #180]	; (800222c <HAL_DMA_Abort+0x23c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d040      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2b      	ldr	r2, [pc, #172]	; (8002230 <HAL_DMA_Abort+0x240>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d03b      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a2a      	ldr	r2, [pc, #168]	; (8002234 <HAL_DMA_Abort+0x244>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d036      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a28      	ldr	r2, [pc, #160]	; (8002238 <HAL_DMA_Abort+0x248>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d031      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a27      	ldr	r2, [pc, #156]	; (800223c <HAL_DMA_Abort+0x24c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d02c      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a25      	ldr	r2, [pc, #148]	; (8002240 <HAL_DMA_Abort+0x250>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d027      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a24      	ldr	r2, [pc, #144]	; (8002244 <HAL_DMA_Abort+0x254>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d022      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a22      	ldr	r2, [pc, #136]	; (8002248 <HAL_DMA_Abort+0x258>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01d      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a21      	ldr	r2, [pc, #132]	; (800224c <HAL_DMA_Abort+0x25c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d018      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1f      	ldr	r2, [pc, #124]	; (8002250 <HAL_DMA_Abort+0x260>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a1e      	ldr	r2, [pc, #120]	; (8002254 <HAL_DMA_Abort+0x264>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00e      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1c      	ldr	r2, [pc, #112]	; (8002258 <HAL_DMA_Abort+0x268>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d009      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1b      	ldr	r2, [pc, #108]	; (800225c <HAL_DMA_Abort+0x26c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d004      	beq.n	80021fe <HAL_DMA_Abort+0x20e>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a19      	ldr	r2, [pc, #100]	; (8002260 <HAL_DMA_Abort+0x270>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d132      	bne.n	8002264 <HAL_DMA_Abort+0x274>
 80021fe:	2301      	movs	r3, #1
 8002200:	e031      	b.n	8002266 <HAL_DMA_Abort+0x276>
 8002202:	bf00      	nop
 8002204:	40020010 	.word	0x40020010
 8002208:	40020028 	.word	0x40020028
 800220c:	40020040 	.word	0x40020040
 8002210:	40020058 	.word	0x40020058
 8002214:	40020070 	.word	0x40020070
 8002218:	40020088 	.word	0x40020088
 800221c:	400200a0 	.word	0x400200a0
 8002220:	400200b8 	.word	0x400200b8
 8002224:	40020410 	.word	0x40020410
 8002228:	40020428 	.word	0x40020428
 800222c:	40020440 	.word	0x40020440
 8002230:	40020458 	.word	0x40020458
 8002234:	40020470 	.word	0x40020470
 8002238:	40020488 	.word	0x40020488
 800223c:	400204a0 	.word	0x400204a0
 8002240:	400204b8 	.word	0x400204b8
 8002244:	58025408 	.word	0x58025408
 8002248:	5802541c 	.word	0x5802541c
 800224c:	58025430 	.word	0x58025430
 8002250:	58025444 	.word	0x58025444
 8002254:	58025458 	.word	0x58025458
 8002258:	5802546c 	.word	0x5802546c
 800225c:	58025480 	.word	0x58025480
 8002260:	58025494 	.word	0x58025494
 8002264:	2300      	movs	r3, #0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d007      	beq.n	800227a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002278:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a6d      	ldr	r2, [pc, #436]	; (8002434 <HAL_DMA_Abort+0x444>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d04a      	beq.n	800231a <HAL_DMA_Abort+0x32a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a6b      	ldr	r2, [pc, #428]	; (8002438 <HAL_DMA_Abort+0x448>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d045      	beq.n	800231a <HAL_DMA_Abort+0x32a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a6a      	ldr	r2, [pc, #424]	; (800243c <HAL_DMA_Abort+0x44c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d040      	beq.n	800231a <HAL_DMA_Abort+0x32a>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a68      	ldr	r2, [pc, #416]	; (8002440 <HAL_DMA_Abort+0x450>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d03b      	beq.n	800231a <HAL_DMA_Abort+0x32a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a67      	ldr	r2, [pc, #412]	; (8002444 <HAL_DMA_Abort+0x454>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d036      	beq.n	800231a <HAL_DMA_Abort+0x32a>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a65      	ldr	r2, [pc, #404]	; (8002448 <HAL_DMA_Abort+0x458>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d031      	beq.n	800231a <HAL_DMA_Abort+0x32a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a64      	ldr	r2, [pc, #400]	; (800244c <HAL_DMA_Abort+0x45c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d02c      	beq.n	800231a <HAL_DMA_Abort+0x32a>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a62      	ldr	r2, [pc, #392]	; (8002450 <HAL_DMA_Abort+0x460>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d027      	beq.n	800231a <HAL_DMA_Abort+0x32a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a61      	ldr	r2, [pc, #388]	; (8002454 <HAL_DMA_Abort+0x464>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d022      	beq.n	800231a <HAL_DMA_Abort+0x32a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a5f      	ldr	r2, [pc, #380]	; (8002458 <HAL_DMA_Abort+0x468>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d01d      	beq.n	800231a <HAL_DMA_Abort+0x32a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a5e      	ldr	r2, [pc, #376]	; (800245c <HAL_DMA_Abort+0x46c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d018      	beq.n	800231a <HAL_DMA_Abort+0x32a>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a5c      	ldr	r2, [pc, #368]	; (8002460 <HAL_DMA_Abort+0x470>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d013      	beq.n	800231a <HAL_DMA_Abort+0x32a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a5b      	ldr	r2, [pc, #364]	; (8002464 <HAL_DMA_Abort+0x474>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00e      	beq.n	800231a <HAL_DMA_Abort+0x32a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a59      	ldr	r2, [pc, #356]	; (8002468 <HAL_DMA_Abort+0x478>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d009      	beq.n	800231a <HAL_DMA_Abort+0x32a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a58      	ldr	r2, [pc, #352]	; (800246c <HAL_DMA_Abort+0x47c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d004      	beq.n	800231a <HAL_DMA_Abort+0x32a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a56      	ldr	r2, [pc, #344]	; (8002470 <HAL_DMA_Abort+0x480>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d108      	bne.n	800232c <HAL_DMA_Abort+0x33c>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0201 	bic.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	e007      	b.n	800233c <HAL_DMA_Abort+0x34c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800233c:	e013      	b.n	8002366 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800233e:	f7ff fd17 	bl	8001d70 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b05      	cmp	r3, #5
 800234a:	d90c      	bls.n	8002366 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2203      	movs	r2, #3
 8002356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e12d      	b.n	80025c2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1e5      	bne.n	800233e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a2f      	ldr	r2, [pc, #188]	; (8002434 <HAL_DMA_Abort+0x444>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d04a      	beq.n	8002412 <HAL_DMA_Abort+0x422>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a2d      	ldr	r2, [pc, #180]	; (8002438 <HAL_DMA_Abort+0x448>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d045      	beq.n	8002412 <HAL_DMA_Abort+0x422>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a2c      	ldr	r2, [pc, #176]	; (800243c <HAL_DMA_Abort+0x44c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d040      	beq.n	8002412 <HAL_DMA_Abort+0x422>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a2a      	ldr	r2, [pc, #168]	; (8002440 <HAL_DMA_Abort+0x450>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d03b      	beq.n	8002412 <HAL_DMA_Abort+0x422>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a29      	ldr	r2, [pc, #164]	; (8002444 <HAL_DMA_Abort+0x454>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d036      	beq.n	8002412 <HAL_DMA_Abort+0x422>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a27      	ldr	r2, [pc, #156]	; (8002448 <HAL_DMA_Abort+0x458>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d031      	beq.n	8002412 <HAL_DMA_Abort+0x422>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a26      	ldr	r2, [pc, #152]	; (800244c <HAL_DMA_Abort+0x45c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d02c      	beq.n	8002412 <HAL_DMA_Abort+0x422>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a24      	ldr	r2, [pc, #144]	; (8002450 <HAL_DMA_Abort+0x460>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d027      	beq.n	8002412 <HAL_DMA_Abort+0x422>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a23      	ldr	r2, [pc, #140]	; (8002454 <HAL_DMA_Abort+0x464>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d022      	beq.n	8002412 <HAL_DMA_Abort+0x422>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a21      	ldr	r2, [pc, #132]	; (8002458 <HAL_DMA_Abort+0x468>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01d      	beq.n	8002412 <HAL_DMA_Abort+0x422>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a20      	ldr	r2, [pc, #128]	; (800245c <HAL_DMA_Abort+0x46c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d018      	beq.n	8002412 <HAL_DMA_Abort+0x422>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a1e      	ldr	r2, [pc, #120]	; (8002460 <HAL_DMA_Abort+0x470>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d013      	beq.n	8002412 <HAL_DMA_Abort+0x422>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <HAL_DMA_Abort+0x474>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00e      	beq.n	8002412 <HAL_DMA_Abort+0x422>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1b      	ldr	r2, [pc, #108]	; (8002468 <HAL_DMA_Abort+0x478>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d009      	beq.n	8002412 <HAL_DMA_Abort+0x422>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1a      	ldr	r2, [pc, #104]	; (800246c <HAL_DMA_Abort+0x47c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d004      	beq.n	8002412 <HAL_DMA_Abort+0x422>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a18      	ldr	r2, [pc, #96]	; (8002470 <HAL_DMA_Abort+0x480>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <HAL_DMA_Abort+0x426>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <HAL_DMA_Abort+0x428>
 8002416:	2300      	movs	r3, #0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d02b      	beq.n	8002474 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002420:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	223f      	movs	r2, #63	; 0x3f
 800242c:	409a      	lsls	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	e02a      	b.n	800248a <HAL_DMA_Abort+0x49a>
 8002434:	40020010 	.word	0x40020010
 8002438:	40020028 	.word	0x40020028
 800243c:	40020040 	.word	0x40020040
 8002440:	40020058 	.word	0x40020058
 8002444:	40020070 	.word	0x40020070
 8002448:	40020088 	.word	0x40020088
 800244c:	400200a0 	.word	0x400200a0
 8002450:	400200b8 	.word	0x400200b8
 8002454:	40020410 	.word	0x40020410
 8002458:	40020428 	.word	0x40020428
 800245c:	40020440 	.word	0x40020440
 8002460:	40020458 	.word	0x40020458
 8002464:	40020470 	.word	0x40020470
 8002468:	40020488 	.word	0x40020488
 800246c:	400204a0 	.word	0x400204a0
 8002470:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	2201      	movs	r2, #1
 8002484:	409a      	lsls	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a4f      	ldr	r2, [pc, #316]	; (80025cc <HAL_DMA_Abort+0x5dc>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d072      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a4d      	ldr	r2, [pc, #308]	; (80025d0 <HAL_DMA_Abort+0x5e0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d06d      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a4c      	ldr	r2, [pc, #304]	; (80025d4 <HAL_DMA_Abort+0x5e4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d068      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a4a      	ldr	r2, [pc, #296]	; (80025d8 <HAL_DMA_Abort+0x5e8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d063      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a49      	ldr	r2, [pc, #292]	; (80025dc <HAL_DMA_Abort+0x5ec>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d05e      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a47      	ldr	r2, [pc, #284]	; (80025e0 <HAL_DMA_Abort+0x5f0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d059      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a46      	ldr	r2, [pc, #280]	; (80025e4 <HAL_DMA_Abort+0x5f4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d054      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a44      	ldr	r2, [pc, #272]	; (80025e8 <HAL_DMA_Abort+0x5f8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d04f      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a43      	ldr	r2, [pc, #268]	; (80025ec <HAL_DMA_Abort+0x5fc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d04a      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a41      	ldr	r2, [pc, #260]	; (80025f0 <HAL_DMA_Abort+0x600>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d045      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a40      	ldr	r2, [pc, #256]	; (80025f4 <HAL_DMA_Abort+0x604>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d040      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a3e      	ldr	r2, [pc, #248]	; (80025f8 <HAL_DMA_Abort+0x608>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d03b      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a3d      	ldr	r2, [pc, #244]	; (80025fc <HAL_DMA_Abort+0x60c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d036      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a3b      	ldr	r2, [pc, #236]	; (8002600 <HAL_DMA_Abort+0x610>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d031      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a3a      	ldr	r2, [pc, #232]	; (8002604 <HAL_DMA_Abort+0x614>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d02c      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a38      	ldr	r2, [pc, #224]	; (8002608 <HAL_DMA_Abort+0x618>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d027      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a37      	ldr	r2, [pc, #220]	; (800260c <HAL_DMA_Abort+0x61c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d022      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a35      	ldr	r2, [pc, #212]	; (8002610 <HAL_DMA_Abort+0x620>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d01d      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a34      	ldr	r2, [pc, #208]	; (8002614 <HAL_DMA_Abort+0x624>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d018      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a32      	ldr	r2, [pc, #200]	; (8002618 <HAL_DMA_Abort+0x628>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d013      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a31      	ldr	r2, [pc, #196]	; (800261c <HAL_DMA_Abort+0x62c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d00e      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a2f      	ldr	r2, [pc, #188]	; (8002620 <HAL_DMA_Abort+0x630>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d009      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a2e      	ldr	r2, [pc, #184]	; (8002624 <HAL_DMA_Abort+0x634>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d004      	beq.n	800257a <HAL_DMA_Abort+0x58a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a2c      	ldr	r2, [pc, #176]	; (8002628 <HAL_DMA_Abort+0x638>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <HAL_DMA_Abort+0x58e>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_DMA_Abort+0x590>
 800257e:	2300      	movs	r3, #0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d015      	beq.n	80025b0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800258c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00c      	beq.n	80025b0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025a4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025ae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40020010 	.word	0x40020010
 80025d0:	40020028 	.word	0x40020028
 80025d4:	40020040 	.word	0x40020040
 80025d8:	40020058 	.word	0x40020058
 80025dc:	40020070 	.word	0x40020070
 80025e0:	40020088 	.word	0x40020088
 80025e4:	400200a0 	.word	0x400200a0
 80025e8:	400200b8 	.word	0x400200b8
 80025ec:	40020410 	.word	0x40020410
 80025f0:	40020428 	.word	0x40020428
 80025f4:	40020440 	.word	0x40020440
 80025f8:	40020458 	.word	0x40020458
 80025fc:	40020470 	.word	0x40020470
 8002600:	40020488 	.word	0x40020488
 8002604:	400204a0 	.word	0x400204a0
 8002608:	400204b8 	.word	0x400204b8
 800260c:	58025408 	.word	0x58025408
 8002610:	5802541c 	.word	0x5802541c
 8002614:	58025430 	.word	0x58025430
 8002618:	58025444 	.word	0x58025444
 800261c:	58025458 	.word	0x58025458
 8002620:	5802546c 	.word	0x5802546c
 8002624:	58025480 	.word	0x58025480
 8002628:	58025494 	.word	0x58025494

0800262c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e237      	b.n	8002aae <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d004      	beq.n	8002654 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2280      	movs	r2, #128	; 0x80
 800264e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e22c      	b.n	8002aae <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a5c      	ldr	r2, [pc, #368]	; (80027cc <HAL_DMA_Abort_IT+0x1a0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d04a      	beq.n	80026f4 <HAL_DMA_Abort_IT+0xc8>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a5b      	ldr	r2, [pc, #364]	; (80027d0 <HAL_DMA_Abort_IT+0x1a4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d045      	beq.n	80026f4 <HAL_DMA_Abort_IT+0xc8>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a59      	ldr	r2, [pc, #356]	; (80027d4 <HAL_DMA_Abort_IT+0x1a8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d040      	beq.n	80026f4 <HAL_DMA_Abort_IT+0xc8>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <HAL_DMA_Abort_IT+0x1ac>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d03b      	beq.n	80026f4 <HAL_DMA_Abort_IT+0xc8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a56      	ldr	r2, [pc, #344]	; (80027dc <HAL_DMA_Abort_IT+0x1b0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d036      	beq.n	80026f4 <HAL_DMA_Abort_IT+0xc8>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a55      	ldr	r2, [pc, #340]	; (80027e0 <HAL_DMA_Abort_IT+0x1b4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d031      	beq.n	80026f4 <HAL_DMA_Abort_IT+0xc8>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a53      	ldr	r2, [pc, #332]	; (80027e4 <HAL_DMA_Abort_IT+0x1b8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d02c      	beq.n	80026f4 <HAL_DMA_Abort_IT+0xc8>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a52      	ldr	r2, [pc, #328]	; (80027e8 <HAL_DMA_Abort_IT+0x1bc>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d027      	beq.n	80026f4 <HAL_DMA_Abort_IT+0xc8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a50      	ldr	r2, [pc, #320]	; (80027ec <HAL_DMA_Abort_IT+0x1c0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d022      	beq.n	80026f4 <HAL_DMA_Abort_IT+0xc8>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a4f      	ldr	r2, [pc, #316]	; (80027f0 <HAL_DMA_Abort_IT+0x1c4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d01d      	beq.n	80026f4 <HAL_DMA_Abort_IT+0xc8>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a4d      	ldr	r2, [pc, #308]	; (80027f4 <HAL_DMA_Abort_IT+0x1c8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d018      	beq.n	80026f4 <HAL_DMA_Abort_IT+0xc8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a4c      	ldr	r2, [pc, #304]	; (80027f8 <HAL_DMA_Abort_IT+0x1cc>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d013      	beq.n	80026f4 <HAL_DMA_Abort_IT+0xc8>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a4a      	ldr	r2, [pc, #296]	; (80027fc <HAL_DMA_Abort_IT+0x1d0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00e      	beq.n	80026f4 <HAL_DMA_Abort_IT+0xc8>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a49      	ldr	r2, [pc, #292]	; (8002800 <HAL_DMA_Abort_IT+0x1d4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d009      	beq.n	80026f4 <HAL_DMA_Abort_IT+0xc8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a47      	ldr	r2, [pc, #284]	; (8002804 <HAL_DMA_Abort_IT+0x1d8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d004      	beq.n	80026f4 <HAL_DMA_Abort_IT+0xc8>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a46      	ldr	r2, [pc, #280]	; (8002808 <HAL_DMA_Abort_IT+0x1dc>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d101      	bne.n	80026f8 <HAL_DMA_Abort_IT+0xcc>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <HAL_DMA_Abort_IT+0xce>
 80026f8:	2300      	movs	r3, #0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8086 	beq.w	800280c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2204      	movs	r2, #4
 8002704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a2f      	ldr	r2, [pc, #188]	; (80027cc <HAL_DMA_Abort_IT+0x1a0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d04a      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x17c>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a2e      	ldr	r2, [pc, #184]	; (80027d0 <HAL_DMA_Abort_IT+0x1a4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d045      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x17c>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a2c      	ldr	r2, [pc, #176]	; (80027d4 <HAL_DMA_Abort_IT+0x1a8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d040      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x17c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a2b      	ldr	r2, [pc, #172]	; (80027d8 <HAL_DMA_Abort_IT+0x1ac>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d03b      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x17c>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a29      	ldr	r2, [pc, #164]	; (80027dc <HAL_DMA_Abort_IT+0x1b0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d036      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x17c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <HAL_DMA_Abort_IT+0x1b4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d031      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x17c>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a26      	ldr	r2, [pc, #152]	; (80027e4 <HAL_DMA_Abort_IT+0x1b8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d02c      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x17c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a25      	ldr	r2, [pc, #148]	; (80027e8 <HAL_DMA_Abort_IT+0x1bc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d027      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x17c>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a23      	ldr	r2, [pc, #140]	; (80027ec <HAL_DMA_Abort_IT+0x1c0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d022      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x17c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <HAL_DMA_Abort_IT+0x1c4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d01d      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x17c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a20      	ldr	r2, [pc, #128]	; (80027f4 <HAL_DMA_Abort_IT+0x1c8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d018      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x17c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1f      	ldr	r2, [pc, #124]	; (80027f8 <HAL_DMA_Abort_IT+0x1cc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d013      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x17c>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <HAL_DMA_Abort_IT+0x1d0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00e      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x17c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1c      	ldr	r2, [pc, #112]	; (8002800 <HAL_DMA_Abort_IT+0x1d4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d009      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x17c>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1a      	ldr	r2, [pc, #104]	; (8002804 <HAL_DMA_Abort_IT+0x1d8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d004      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x17c>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a19      	ldr	r2, [pc, #100]	; (8002808 <HAL_DMA_Abort_IT+0x1dc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d108      	bne.n	80027ba <HAL_DMA_Abort_IT+0x18e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0201 	bic.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	e178      	b.n	8002aac <HAL_DMA_Abort_IT+0x480>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	e16f      	b.n	8002aac <HAL_DMA_Abort_IT+0x480>
 80027cc:	40020010 	.word	0x40020010
 80027d0:	40020028 	.word	0x40020028
 80027d4:	40020040 	.word	0x40020040
 80027d8:	40020058 	.word	0x40020058
 80027dc:	40020070 	.word	0x40020070
 80027e0:	40020088 	.word	0x40020088
 80027e4:	400200a0 	.word	0x400200a0
 80027e8:	400200b8 	.word	0x400200b8
 80027ec:	40020410 	.word	0x40020410
 80027f0:	40020428 	.word	0x40020428
 80027f4:	40020440 	.word	0x40020440
 80027f8:	40020458 	.word	0x40020458
 80027fc:	40020470 	.word	0x40020470
 8002800:	40020488 	.word	0x40020488
 8002804:	400204a0 	.word	0x400204a0
 8002808:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 020e 	bic.w	r2, r2, #14
 800281a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a6c      	ldr	r2, [pc, #432]	; (80029d4 <HAL_DMA_Abort_IT+0x3a8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d04a      	beq.n	80028bc <HAL_DMA_Abort_IT+0x290>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a6b      	ldr	r2, [pc, #428]	; (80029d8 <HAL_DMA_Abort_IT+0x3ac>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d045      	beq.n	80028bc <HAL_DMA_Abort_IT+0x290>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a69      	ldr	r2, [pc, #420]	; (80029dc <HAL_DMA_Abort_IT+0x3b0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d040      	beq.n	80028bc <HAL_DMA_Abort_IT+0x290>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a68      	ldr	r2, [pc, #416]	; (80029e0 <HAL_DMA_Abort_IT+0x3b4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d03b      	beq.n	80028bc <HAL_DMA_Abort_IT+0x290>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a66      	ldr	r2, [pc, #408]	; (80029e4 <HAL_DMA_Abort_IT+0x3b8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d036      	beq.n	80028bc <HAL_DMA_Abort_IT+0x290>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a65      	ldr	r2, [pc, #404]	; (80029e8 <HAL_DMA_Abort_IT+0x3bc>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d031      	beq.n	80028bc <HAL_DMA_Abort_IT+0x290>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a63      	ldr	r2, [pc, #396]	; (80029ec <HAL_DMA_Abort_IT+0x3c0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d02c      	beq.n	80028bc <HAL_DMA_Abort_IT+0x290>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a62      	ldr	r2, [pc, #392]	; (80029f0 <HAL_DMA_Abort_IT+0x3c4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d027      	beq.n	80028bc <HAL_DMA_Abort_IT+0x290>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a60      	ldr	r2, [pc, #384]	; (80029f4 <HAL_DMA_Abort_IT+0x3c8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d022      	beq.n	80028bc <HAL_DMA_Abort_IT+0x290>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a5f      	ldr	r2, [pc, #380]	; (80029f8 <HAL_DMA_Abort_IT+0x3cc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d01d      	beq.n	80028bc <HAL_DMA_Abort_IT+0x290>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a5d      	ldr	r2, [pc, #372]	; (80029fc <HAL_DMA_Abort_IT+0x3d0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d018      	beq.n	80028bc <HAL_DMA_Abort_IT+0x290>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a5c      	ldr	r2, [pc, #368]	; (8002a00 <HAL_DMA_Abort_IT+0x3d4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d013      	beq.n	80028bc <HAL_DMA_Abort_IT+0x290>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a5a      	ldr	r2, [pc, #360]	; (8002a04 <HAL_DMA_Abort_IT+0x3d8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00e      	beq.n	80028bc <HAL_DMA_Abort_IT+0x290>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a59      	ldr	r2, [pc, #356]	; (8002a08 <HAL_DMA_Abort_IT+0x3dc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d009      	beq.n	80028bc <HAL_DMA_Abort_IT+0x290>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a57      	ldr	r2, [pc, #348]	; (8002a0c <HAL_DMA_Abort_IT+0x3e0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d004      	beq.n	80028bc <HAL_DMA_Abort_IT+0x290>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a56      	ldr	r2, [pc, #344]	; (8002a10 <HAL_DMA_Abort_IT+0x3e4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d108      	bne.n	80028ce <HAL_DMA_Abort_IT+0x2a2>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e007      	b.n	80028de <HAL_DMA_Abort_IT+0x2b2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a3c      	ldr	r2, [pc, #240]	; (80029d4 <HAL_DMA_Abort_IT+0x3a8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d072      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a3a      	ldr	r2, [pc, #232]	; (80029d8 <HAL_DMA_Abort_IT+0x3ac>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d06d      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a39      	ldr	r2, [pc, #228]	; (80029dc <HAL_DMA_Abort_IT+0x3b0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d068      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a37      	ldr	r2, [pc, #220]	; (80029e0 <HAL_DMA_Abort_IT+0x3b4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d063      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a36      	ldr	r2, [pc, #216]	; (80029e4 <HAL_DMA_Abort_IT+0x3b8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d05e      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a34      	ldr	r2, [pc, #208]	; (80029e8 <HAL_DMA_Abort_IT+0x3bc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d059      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a33      	ldr	r2, [pc, #204]	; (80029ec <HAL_DMA_Abort_IT+0x3c0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d054      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a31      	ldr	r2, [pc, #196]	; (80029f0 <HAL_DMA_Abort_IT+0x3c4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d04f      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a30      	ldr	r2, [pc, #192]	; (80029f4 <HAL_DMA_Abort_IT+0x3c8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d04a      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a2e      	ldr	r2, [pc, #184]	; (80029f8 <HAL_DMA_Abort_IT+0x3cc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d045      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a2d      	ldr	r2, [pc, #180]	; (80029fc <HAL_DMA_Abort_IT+0x3d0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d040      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a2b      	ldr	r2, [pc, #172]	; (8002a00 <HAL_DMA_Abort_IT+0x3d4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d03b      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a2a      	ldr	r2, [pc, #168]	; (8002a04 <HAL_DMA_Abort_IT+0x3d8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d036      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a28      	ldr	r2, [pc, #160]	; (8002a08 <HAL_DMA_Abort_IT+0x3dc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d031      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a27      	ldr	r2, [pc, #156]	; (8002a0c <HAL_DMA_Abort_IT+0x3e0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d02c      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a25      	ldr	r2, [pc, #148]	; (8002a10 <HAL_DMA_Abort_IT+0x3e4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d027      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a24      	ldr	r2, [pc, #144]	; (8002a14 <HAL_DMA_Abort_IT+0x3e8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d022      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a22      	ldr	r2, [pc, #136]	; (8002a18 <HAL_DMA_Abort_IT+0x3ec>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01d      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a21      	ldr	r2, [pc, #132]	; (8002a1c <HAL_DMA_Abort_IT+0x3f0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d018      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a1f      	ldr	r2, [pc, #124]	; (8002a20 <HAL_DMA_Abort_IT+0x3f4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <HAL_DMA_Abort_IT+0x3f8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00e      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a1c      	ldr	r2, [pc, #112]	; (8002a28 <HAL_DMA_Abort_IT+0x3fc>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <HAL_DMA_Abort_IT+0x400>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d004      	beq.n	80029ce <HAL_DMA_Abort_IT+0x3a2>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <HAL_DMA_Abort_IT+0x404>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d132      	bne.n	8002a34 <HAL_DMA_Abort_IT+0x408>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e031      	b.n	8002a36 <HAL_DMA_Abort_IT+0x40a>
 80029d2:	bf00      	nop
 80029d4:	40020010 	.word	0x40020010
 80029d8:	40020028 	.word	0x40020028
 80029dc:	40020040 	.word	0x40020040
 80029e0:	40020058 	.word	0x40020058
 80029e4:	40020070 	.word	0x40020070
 80029e8:	40020088 	.word	0x40020088
 80029ec:	400200a0 	.word	0x400200a0
 80029f0:	400200b8 	.word	0x400200b8
 80029f4:	40020410 	.word	0x40020410
 80029f8:	40020428 	.word	0x40020428
 80029fc:	40020440 	.word	0x40020440
 8002a00:	40020458 	.word	0x40020458
 8002a04:	40020470 	.word	0x40020470
 8002a08:	40020488 	.word	0x40020488
 8002a0c:	400204a0 	.word	0x400204a0
 8002a10:	400204b8 	.word	0x400204b8
 8002a14:	58025408 	.word	0x58025408
 8002a18:	5802541c 	.word	0x5802541c
 8002a1c:	58025430 	.word	0x58025430
 8002a20:	58025444 	.word	0x58025444
 8002a24:	58025458 	.word	0x58025458
 8002a28:	5802546c 	.word	0x5802546c
 8002a2c:	58025480 	.word	0x58025480
 8002a30:	58025494 	.word	0x58025494
 8002a34:	2300      	movs	r3, #0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d028      	beq.n	8002a8c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a48:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2201      	movs	r2, #1
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a68:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00c      	beq.n	8002a8c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a80:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a8a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop

08002ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	; 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ac6:	4b89      	ldr	r3, [pc, #548]	; (8002cec <HAL_GPIO_Init+0x234>)
 8002ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002aca:	e194      	b.n	8002df6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8186 	beq.w	8002df0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d005      	beq.n	8002afc <HAL_GPIO_Init+0x44>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d130      	bne.n	8002b5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b32:	2201      	movs	r2, #1
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	f003 0201 	and.w	r2, r3, #1
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d017      	beq.n	8002b9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	2203      	movs	r2, #3
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d123      	bne.n	8002bee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	08da      	lsrs	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3208      	adds	r2, #8
 8002bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	220f      	movs	r2, #15
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	08da      	lsrs	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3208      	adds	r2, #8
 8002be8:	69b9      	ldr	r1, [r7, #24]
 8002bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0203 	and.w	r2, r3, #3
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80e0 	beq.w	8002df0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c30:	4b2f      	ldr	r3, [pc, #188]	; (8002cf0 <HAL_GPIO_Init+0x238>)
 8002c32:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002c36:	4a2e      	ldr	r2, [pc, #184]	; (8002cf0 <HAL_GPIO_Init+0x238>)
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002c40:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <HAL_GPIO_Init+0x238>)
 8002c42:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c4e:	4a29      	ldr	r2, [pc, #164]	; (8002cf4 <HAL_GPIO_Init+0x23c>)
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	3302      	adds	r3, #2
 8002c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	220f      	movs	r2, #15
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a20      	ldr	r2, [pc, #128]	; (8002cf8 <HAL_GPIO_Init+0x240>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d052      	beq.n	8002d20 <HAL_GPIO_Init+0x268>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a1f      	ldr	r2, [pc, #124]	; (8002cfc <HAL_GPIO_Init+0x244>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d031      	beq.n	8002ce6 <HAL_GPIO_Init+0x22e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a1e      	ldr	r2, [pc, #120]	; (8002d00 <HAL_GPIO_Init+0x248>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d02b      	beq.n	8002ce2 <HAL_GPIO_Init+0x22a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a1d      	ldr	r2, [pc, #116]	; (8002d04 <HAL_GPIO_Init+0x24c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d025      	beq.n	8002cde <HAL_GPIO_Init+0x226>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a1c      	ldr	r2, [pc, #112]	; (8002d08 <HAL_GPIO_Init+0x250>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01f      	beq.n	8002cda <HAL_GPIO_Init+0x222>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a1b      	ldr	r2, [pc, #108]	; (8002d0c <HAL_GPIO_Init+0x254>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d019      	beq.n	8002cd6 <HAL_GPIO_Init+0x21e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a1a      	ldr	r2, [pc, #104]	; (8002d10 <HAL_GPIO_Init+0x258>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <HAL_GPIO_Init+0x21a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a19      	ldr	r2, [pc, #100]	; (8002d14 <HAL_GPIO_Init+0x25c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00d      	beq.n	8002cce <HAL_GPIO_Init+0x216>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <HAL_GPIO_Init+0x260>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d007      	beq.n	8002cca <HAL_GPIO_Init+0x212>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a17      	ldr	r2, [pc, #92]	; (8002d1c <HAL_GPIO_Init+0x264>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d101      	bne.n	8002cc6 <HAL_GPIO_Init+0x20e>
 8002cc2:	2309      	movs	r3, #9
 8002cc4:	e02d      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002cc6:	230a      	movs	r3, #10
 8002cc8:	e02b      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002cca:	2308      	movs	r3, #8
 8002ccc:	e029      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002cce:	2307      	movs	r3, #7
 8002cd0:	e027      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002cd2:	2306      	movs	r3, #6
 8002cd4:	e025      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002cd6:	2305      	movs	r3, #5
 8002cd8:	e023      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002cda:	2304      	movs	r3, #4
 8002cdc:	e021      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e01f      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e01d      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e01b      	b.n	8002d22 <HAL_GPIO_Init+0x26a>
 8002cea:	bf00      	nop
 8002cec:	58000080 	.word	0x58000080
 8002cf0:	58024400 	.word	0x58024400
 8002cf4:	58000400 	.word	0x58000400
 8002cf8:	58020000 	.word	0x58020000
 8002cfc:	58020400 	.word	0x58020400
 8002d00:	58020800 	.word	0x58020800
 8002d04:	58020c00 	.word	0x58020c00
 8002d08:	58021000 	.word	0x58021000
 8002d0c:	58021400 	.word	0x58021400
 8002d10:	58021800 	.word	0x58021800
 8002d14:	58021c00 	.word	0x58021c00
 8002d18:	58022000 	.word	0x58022000
 8002d1c:	58022400 	.word	0x58022400
 8002d20:	2300      	movs	r3, #0
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	f002 0203 	and.w	r2, r2, #3
 8002d28:	0092      	lsls	r2, r2, #2
 8002d2a:	4093      	lsls	r3, r2
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d32:	4938      	ldr	r1, [pc, #224]	; (8002e14 <HAL_GPIO_Init+0x35c>)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	3301      	adds	r3, #1
 8002df4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f47f ae63 	bne.w	8002acc <HAL_GPIO_Init+0x14>
  }
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	3724      	adds	r7, #36	; 0x24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	58000400 	.word	0x58000400

08002e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	807b      	strh	r3, [r7, #2]
 8002e24:	4613      	mov	r3, r2
 8002e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e28:	787b      	ldrb	r3, [r7, #1]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e2e:	887a      	ldrh	r2, [r7, #2]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e34:	e003      	b.n	8002e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e36:	887b      	ldrh	r3, [r7, #2]
 8002e38:	041a      	lsls	r2, r3, #16
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	619a      	str	r2, [r3, #24]
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
	...

08002e4c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002e54:	4b29      	ldr	r3, [pc, #164]	; (8002efc <HAL_PWREx_ConfigSupply+0xb0>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	2b06      	cmp	r3, #6
 8002e5e:	d00a      	beq.n	8002e76 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e60:	4b26      	ldr	r3, [pc, #152]	; (8002efc <HAL_PWREx_ConfigSupply+0xb0>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d001      	beq.n	8002e72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e040      	b.n	8002ef4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e03e      	b.n	8002ef4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e76:	4b21      	ldr	r3, [pc, #132]	; (8002efc <HAL_PWREx_ConfigSupply+0xb0>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002e7e:	491f      	ldr	r1, [pc, #124]	; (8002efc <HAL_PWREx_ConfigSupply+0xb0>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002e86:	f7fe ff73 	bl	8001d70 <HAL_GetTick>
 8002e8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e8c:	e009      	b.n	8002ea2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e8e:	f7fe ff6f 	bl	8001d70 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e9c:	d901      	bls.n	8002ea2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e028      	b.n	8002ef4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ea2:	4b16      	ldr	r3, [pc, #88]	; (8002efc <HAL_PWREx_ConfigSupply+0xb0>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eae:	d1ee      	bne.n	8002e8e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b1e      	cmp	r3, #30
 8002eb4:	d008      	beq.n	8002ec8 <HAL_PWREx_ConfigSupply+0x7c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8002eba:	d005      	beq.n	8002ec8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b1d      	cmp	r3, #29
 8002ec0:	d002      	beq.n	8002ec8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b2d      	cmp	r3, #45	; 0x2d
 8002ec6:	d114      	bne.n	8002ef2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002ec8:	f7fe ff52 	bl	8001d70 <HAL_GetTick>
 8002ecc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ece:	e009      	b.n	8002ee4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ed0:	f7fe ff4e 	bl	8001d70 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ede:	d901      	bls.n	8002ee4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e007      	b.n	8002ef4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_PWREx_ConfigSupply+0xb0>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef0:	d1ee      	bne.n	8002ed0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	58024800 	.word	0x58024800

08002f00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08c      	sub	sp, #48	; 0x30
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d102      	bne.n	8002f14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f000 bc1f 	b.w	8003752 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 80b3 	beq.w	8003088 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f22:	4b95      	ldr	r3, [pc, #596]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f2c:	4b92      	ldr	r3, [pc, #584]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d007      	beq.n	8002f48 <HAL_RCC_OscConfig+0x48>
 8002f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3a:	2b18      	cmp	r3, #24
 8002f3c:	d112      	bne.n	8002f64 <HAL_RCC_OscConfig+0x64>
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d10d      	bne.n	8002f64 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	4b8b      	ldr	r3, [pc, #556]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8098 	beq.w	8003086 <HAL_RCC_OscConfig+0x186>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f040 8093 	bne.w	8003086 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e3f6      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6c:	d106      	bne.n	8002f7c <HAL_RCC_OscConfig+0x7c>
 8002f6e:	4b82      	ldr	r3, [pc, #520]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a81      	ldr	r2, [pc, #516]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e058      	b.n	800302e <HAL_RCC_OscConfig+0x12e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d112      	bne.n	8002faa <HAL_RCC_OscConfig+0xaa>
 8002f84:	4b7c      	ldr	r3, [pc, #496]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a7b      	ldr	r2, [pc, #492]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	4b79      	ldr	r3, [pc, #484]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a78      	ldr	r2, [pc, #480]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002f96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b76      	ldr	r3, [pc, #472]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a75      	ldr	r2, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	e041      	b.n	800302e <HAL_RCC_OscConfig+0x12e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb2:	d112      	bne.n	8002fda <HAL_RCC_OscConfig+0xda>
 8002fb4:	4b70      	ldr	r3, [pc, #448]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a6f      	ldr	r2, [pc, #444]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002fba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4b6d      	ldr	r3, [pc, #436]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a6c      	ldr	r2, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002fc6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a69      	ldr	r2, [pc, #420]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	e029      	b.n	800302e <HAL_RCC_OscConfig+0x12e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002fe2:	d112      	bne.n	800300a <HAL_RCC_OscConfig+0x10a>
 8002fe4:	4b64      	ldr	r3, [pc, #400]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a63      	ldr	r2, [pc, #396]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002fea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	4b61      	ldr	r3, [pc, #388]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a60      	ldr	r2, [pc, #384]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	4b5e      	ldr	r3, [pc, #376]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a5d      	ldr	r2, [pc, #372]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8003002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	e011      	b.n	800302e <HAL_RCC_OscConfig+0x12e>
 800300a:	4b5b      	ldr	r3, [pc, #364]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a5a      	ldr	r2, [pc, #360]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8003010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b58      	ldr	r3, [pc, #352]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a57      	ldr	r2, [pc, #348]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 800301c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b55      	ldr	r3, [pc, #340]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a54      	ldr	r2, [pc, #336]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8003028:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800302c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d013      	beq.n	800305e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fe fe9b 	bl	8001d70 <HAL_GetTick>
 800303a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303e:	f7fe fe97 	bl	8001d70 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b64      	cmp	r3, #100	; 0x64
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e380      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003050:	4b49      	ldr	r3, [pc, #292]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x13e>
 800305c:	e014      	b.n	8003088 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305e:	f7fe fe87 	bl	8001d70 <HAL_GetTick>
 8003062:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003066:	f7fe fe83 	bl	8001d70 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b64      	cmp	r3, #100	; 0x64
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e36c      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003078:	4b3f      	ldr	r3, [pc, #252]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f0      	bne.n	8003066 <HAL_RCC_OscConfig+0x166>
 8003084:	e000      	b.n	8003088 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003086:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 808c 	beq.w	80031ae <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003096:	4b38      	ldr	r3, [pc, #224]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800309e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030a0:	4b35      	ldr	r3, [pc, #212]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <HAL_RCC_OscConfig+0x1bc>
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	2b18      	cmp	r3, #24
 80030b0:	d137      	bne.n	8003122 <HAL_RCC_OscConfig+0x222>
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d132      	bne.n	8003122 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030bc:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_OscConfig+0x1d4>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e33e      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030d4:	4b28      	ldr	r3, [pc, #160]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 0219 	bic.w	r2, r3, #25
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4925      	ldr	r1, [pc, #148]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fe fe43 	bl	8001d70 <HAL_GetTick>
 80030ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ee:	f7fe fe3f 	bl	8001d70 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e328      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003100:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310c:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	4917      	ldr	r1, [pc, #92]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003120:	e045      	b.n	80031ae <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d028      	beq.n	800317c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 0219 	bic.w	r2, r3, #25
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	4910      	ldr	r1, [pc, #64]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fe fe18 	bl	8001d70 <HAL_GetTick>
 8003140:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003144:	f7fe fe14 	bl	8001d70 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e2fd      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003156:	4b08      	ldr	r3, [pc, #32]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	061b      	lsls	r3, r3, #24
 8003170:	4901      	ldr	r1, [pc, #4]	; (8003178 <HAL_RCC_OscConfig+0x278>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
 8003176:	e01a      	b.n	80031ae <HAL_RCC_OscConfig+0x2ae>
 8003178:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800317c:	4b97      	ldr	r3, [pc, #604]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a96      	ldr	r2, [pc, #600]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe fdf2 	bl	8001d70 <HAL_GetTick>
 800318c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003190:	f7fe fdee 	bl	8001d70 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e2d7      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031a2:	4b8e      	ldr	r3, [pc, #568]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d06a      	beq.n	8003290 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ba:	4b88      	ldr	r3, [pc, #544]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031c4:	4b85      	ldr	r3, [pc, #532]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d007      	beq.n	80031e0 <HAL_RCC_OscConfig+0x2e0>
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2b18      	cmp	r3, #24
 80031d4:	d11b      	bne.n	800320e <HAL_RCC_OscConfig+0x30e>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d116      	bne.n	800320e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031e0:	4b7e      	ldr	r3, [pc, #504]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_OscConfig+0x2f8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	2b80      	cmp	r3, #128	; 0x80
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e2ac      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031f8:	4b78      	ldr	r3, [pc, #480]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	061b      	lsls	r3, r3, #24
 8003206:	4975      	ldr	r1, [pc, #468]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 8003208:	4313      	orrs	r3, r2
 800320a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800320c:	e040      	b.n	8003290 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d023      	beq.n	800325e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003216:	4b71      	ldr	r3, [pc, #452]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a70      	ldr	r2, [pc, #448]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 800321c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003222:	f7fe fda5 	bl	8001d70 <HAL_GetTick>
 8003226:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800322a:	f7fe fda1 	bl	8001d70 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e28a      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800323c:	4b67      	ldr	r3, [pc, #412]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f0      	beq.n	800322a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003248:	4b64      	ldr	r3, [pc, #400]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	4961      	ldr	r1, [pc, #388]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 8003258:	4313      	orrs	r3, r2
 800325a:	60cb      	str	r3, [r1, #12]
 800325c:	e018      	b.n	8003290 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800325e:	4b5f      	ldr	r3, [pc, #380]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a5e      	ldr	r2, [pc, #376]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 8003264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326a:	f7fe fd81 	bl	8001d70 <HAL_GetTick>
 800326e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003272:	f7fe fd7d 	bl	8001d70 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e266      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003284:	4b55      	ldr	r3, [pc, #340]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f0      	bne.n	8003272 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d036      	beq.n	800330a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d019      	beq.n	80032d8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a4:	4b4d      	ldr	r3, [pc, #308]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 80032a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a8:	4a4c      	ldr	r2, [pc, #304]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b0:	f7fe fd5e 	bl	8001d70 <HAL_GetTick>
 80032b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b8:	f7fe fd5a 	bl	8001d70 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e243      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032ca:	4b44      	ldr	r3, [pc, #272]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 80032cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x3b8>
 80032d6:	e018      	b.n	800330a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d8:	4b40      	ldr	r3, [pc, #256]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 80032da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032dc:	4a3f      	ldr	r2, [pc, #252]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 80032de:	f023 0301 	bic.w	r3, r3, #1
 80032e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e4:	f7fe fd44 	bl	8001d70 <HAL_GetTick>
 80032e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ec:	f7fe fd40 	bl	8001d70 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e229      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032fe:	4b37      	ldr	r3, [pc, #220]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 8003300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	d036      	beq.n	8003384 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d019      	beq.n	8003352 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800331e:	4b2f      	ldr	r3, [pc, #188]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a2e      	ldr	r2, [pc, #184]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 8003324:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003328:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800332a:	f7fe fd21 	bl	8001d70 <HAL_GetTick>
 800332e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003332:	f7fe fd1d 	bl	8001d70 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e206      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003344:	4b25      	ldr	r3, [pc, #148]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x432>
 8003350:	e018      	b.n	8003384 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003352:	4b22      	ldr	r3, [pc, #136]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a21      	ldr	r2, [pc, #132]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 8003358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800335c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800335e:	f7fe fd07 	bl	8001d70 <HAL_GetTick>
 8003362:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003366:	f7fe fd03 	bl	8001d70 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e1ec      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003378:	4b18      	ldr	r3, [pc, #96]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1f0      	bne.n	8003366 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80af 	beq.w	80034f0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003392:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <HAL_RCC_OscConfig+0x4e0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a12      	ldr	r2, [pc, #72]	; (80033e0 <HAL_RCC_OscConfig+0x4e0>)
 8003398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800339e:	f7fe fce7 	bl	8001d70 <HAL_GetTick>
 80033a2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a6:	f7fe fce3 	bl	8001d70 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b64      	cmp	r3, #100	; 0x64
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e1cc      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033b8:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <HAL_RCC_OscConfig+0x4e0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d10b      	bne.n	80033e4 <HAL_RCC_OscConfig+0x4e4>
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d0:	4a02      	ldr	r2, [pc, #8]	; (80033dc <HAL_RCC_OscConfig+0x4dc>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6713      	str	r3, [r2, #112]	; 0x70
 80033d8:	e05b      	b.n	8003492 <HAL_RCC_OscConfig+0x592>
 80033da:	bf00      	nop
 80033dc:	58024400 	.word	0x58024400
 80033e0:	58024800 	.word	0x58024800
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d112      	bne.n	8003412 <HAL_RCC_OscConfig+0x512>
 80033ec:	4b9d      	ldr	r3, [pc, #628]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4a9c      	ldr	r2, [pc, #624]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	6713      	str	r3, [r2, #112]	; 0x70
 80033f8:	4b9a      	ldr	r3, [pc, #616]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	4a99      	ldr	r2, [pc, #612]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80033fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003402:	6713      	str	r3, [r2, #112]	; 0x70
 8003404:	4b97      	ldr	r3, [pc, #604]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	4a96      	ldr	r2, [pc, #600]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 800340a:	f023 0304 	bic.w	r3, r3, #4
 800340e:	6713      	str	r3, [r2, #112]	; 0x70
 8003410:	e03f      	b.n	8003492 <HAL_RCC_OscConfig+0x592>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b05      	cmp	r3, #5
 8003418:	d112      	bne.n	8003440 <HAL_RCC_OscConfig+0x540>
 800341a:	4b92      	ldr	r3, [pc, #584]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	4a91      	ldr	r2, [pc, #580]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003420:	f043 0304 	orr.w	r3, r3, #4
 8003424:	6713      	str	r3, [r2, #112]	; 0x70
 8003426:	4b8f      	ldr	r3, [pc, #572]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	4a8e      	ldr	r2, [pc, #568]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 800342c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003430:	6713      	str	r3, [r2, #112]	; 0x70
 8003432:	4b8c      	ldr	r3, [pc, #560]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4a8b      	ldr	r2, [pc, #556]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6713      	str	r3, [r2, #112]	; 0x70
 800343e:	e028      	b.n	8003492 <HAL_RCC_OscConfig+0x592>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b85      	cmp	r3, #133	; 0x85
 8003446:	d112      	bne.n	800346e <HAL_RCC_OscConfig+0x56e>
 8003448:	4b86      	ldr	r3, [pc, #536]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	4a85      	ldr	r2, [pc, #532]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 800344e:	f043 0304 	orr.w	r3, r3, #4
 8003452:	6713      	str	r3, [r2, #112]	; 0x70
 8003454:	4b83      	ldr	r3, [pc, #524]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	4a82      	ldr	r2, [pc, #520]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 800345a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345e:	6713      	str	r3, [r2, #112]	; 0x70
 8003460:	4b80      	ldr	r3, [pc, #512]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	4a7f      	ldr	r2, [pc, #508]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6713      	str	r3, [r2, #112]	; 0x70
 800346c:	e011      	b.n	8003492 <HAL_RCC_OscConfig+0x592>
 800346e:	4b7d      	ldr	r3, [pc, #500]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003472:	4a7c      	ldr	r2, [pc, #496]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	6713      	str	r3, [r2, #112]	; 0x70
 800347a:	4b7a      	ldr	r3, [pc, #488]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	4a79      	ldr	r2, [pc, #484]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003480:	f023 0304 	bic.w	r3, r3, #4
 8003484:	6713      	str	r3, [r2, #112]	; 0x70
 8003486:	4b77      	ldr	r3, [pc, #476]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	4a76      	ldr	r2, [pc, #472]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 800348c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d015      	beq.n	80034c6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7fe fc69 	bl	8001d70 <HAL_GetTick>
 800349e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a2:	f7fe fc65 	bl	8001d70 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e14c      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034b8:	4b6a      	ldr	r3, [pc, #424]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80034ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0ee      	beq.n	80034a2 <HAL_RCC_OscConfig+0x5a2>
 80034c4:	e014      	b.n	80034f0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7fe fc53 	bl	8001d70 <HAL_GetTick>
 80034ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ce:	f7fe fc4f 	bl	8001d70 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034dc:	4293      	cmp	r3, r2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e136      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034e4:	4b5f      	ldr	r3, [pc, #380]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1ee      	bne.n	80034ce <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 812b 	beq.w	8003750 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80034fa:	4b5a      	ldr	r3, [pc, #360]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003502:	2b18      	cmp	r3, #24
 8003504:	f000 80bb 	beq.w	800367e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	2b02      	cmp	r3, #2
 800350e:	f040 8095 	bne.w	800363c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	4b54      	ldr	r3, [pc, #336]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a53      	ldr	r2, [pc, #332]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003518:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800351c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fe fc27 	bl	8001d70 <HAL_GetTick>
 8003522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003526:	f7fe fc23 	bl	8001d70 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e10c      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003538:	4b4a      	ldr	r3, [pc, #296]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f0      	bne.n	8003526 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003544:	4b47      	ldr	r3, [pc, #284]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003548:	4b47      	ldr	r3, [pc, #284]	; (8003668 <HAL_RCC_OscConfig+0x768>)
 800354a:	4013      	ands	r3, r2
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003554:	0112      	lsls	r2, r2, #4
 8003556:	430a      	orrs	r2, r1
 8003558:	4942      	ldr	r1, [pc, #264]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 800355a:	4313      	orrs	r3, r2
 800355c:	628b      	str	r3, [r1, #40]	; 0x28
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	3b01      	subs	r3, #1
 8003564:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356c:	3b01      	subs	r3, #1
 800356e:	025b      	lsls	r3, r3, #9
 8003570:	b29b      	uxth	r3, r3
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	3b01      	subs	r3, #1
 800357a:	041b      	lsls	r3, r3, #16
 800357c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	3b01      	subs	r3, #1
 8003588:	061b      	lsls	r3, r3, #24
 800358a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800358e:	4935      	ldr	r1, [pc, #212]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003590:	4313      	orrs	r3, r2
 8003592:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003594:	4b33      	ldr	r3, [pc, #204]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	4a32      	ldr	r2, [pc, #200]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80035a0:	4b30      	ldr	r3, [pc, #192]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80035a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a4:	4b31      	ldr	r3, [pc, #196]	; (800366c <HAL_RCC_OscConfig+0x76c>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80035ac:	00d2      	lsls	r2, r2, #3
 80035ae:	492d      	ldr	r1, [pc, #180]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80035b4:	4b2b      	ldr	r3, [pc, #172]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	f023 020c 	bic.w	r2, r3, #12
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	4928      	ldr	r1, [pc, #160]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80035c6:	4b27      	ldr	r3, [pc, #156]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	f023 0202 	bic.w	r2, r3, #2
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	4924      	ldr	r1, [pc, #144]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035d8:	4b22      	ldr	r3, [pc, #136]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	4a21      	ldr	r2, [pc, #132]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80035de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e4:	4b1f      	ldr	r3, [pc, #124]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80035ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80035f0:	4b1c      	ldr	r3, [pc, #112]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	4a1b      	ldr	r2, [pc, #108]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80035f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80035fc:	4b19      	ldr	r3, [pc, #100]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	4a18      	ldr	r2, [pc, #96]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003608:	4b16      	ldr	r3, [pc, #88]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a15      	ldr	r2, [pc, #84]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 800360e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fe fbac 	bl	8001d70 <HAL_GetTick>
 8003618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361c:	f7fe fba8 	bl	8001d70 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e091      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800362e:	4b0d      	ldr	r3, [pc, #52]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0x71c>
 800363a:	e089      	b.n	8003750 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363c:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a08      	ldr	r2, [pc, #32]	; (8003664 <HAL_RCC_OscConfig+0x764>)
 8003642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fe fb92 	bl	8001d70 <HAL_GetTick>
 800364c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800364e:	e00f      	b.n	8003670 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003650:	f7fe fb8e 	bl	8001d70 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d908      	bls.n	8003670 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e077      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
 8003662:	bf00      	nop
 8003664:	58024400 	.word	0x58024400
 8003668:	fffffc0c 	.word	0xfffffc0c
 800366c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003670:	4b3a      	ldr	r3, [pc, #232]	; (800375c <HAL_RCC_OscConfig+0x85c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e9      	bne.n	8003650 <HAL_RCC_OscConfig+0x750>
 800367c:	e068      	b.n	8003750 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800367e:	4b37      	ldr	r3, [pc, #220]	; (800375c <HAL_RCC_OscConfig+0x85c>)
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003684:	4b35      	ldr	r3, [pc, #212]	; (800375c <HAL_RCC_OscConfig+0x85c>)
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	2b01      	cmp	r3, #1
 8003690:	d031      	beq.n	80036f6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f003 0203 	and.w	r2, r3, #3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d12a      	bne.n	80036f6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d122      	bne.n	80036f6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036bc:	429a      	cmp	r2, r3
 80036be:	d11a      	bne.n	80036f6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	0a5b      	lsrs	r3, r3, #9
 80036c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036cc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d111      	bne.n	80036f6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d108      	bne.n	80036f6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	0e1b      	lsrs	r3, r3, #24
 80036e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d001      	beq.n	80036fa <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e02b      	b.n	8003752 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80036fa:	4b18      	ldr	r3, [pc, #96]	; (800375c <HAL_RCC_OscConfig+0x85c>)
 80036fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fe:	08db      	lsrs	r3, r3, #3
 8003700:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003704:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	429a      	cmp	r2, r3
 800370e:	d01f      	beq.n	8003750 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_RCC_OscConfig+0x85c>)
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	4a11      	ldr	r2, [pc, #68]	; (800375c <HAL_RCC_OscConfig+0x85c>)
 8003716:	f023 0301 	bic.w	r3, r3, #1
 800371a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800371c:	f7fe fb28 	bl	8001d70 <HAL_GetTick>
 8003720:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003722:	bf00      	nop
 8003724:	f7fe fb24 	bl	8001d70 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	4293      	cmp	r3, r2
 800372e:	d0f9      	beq.n	8003724 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003730:	4b0a      	ldr	r3, [pc, #40]	; (800375c <HAL_RCC_OscConfig+0x85c>)
 8003732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_RCC_OscConfig+0x860>)
 8003736:	4013      	ands	r3, r2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800373c:	00d2      	lsls	r2, r2, #3
 800373e:	4907      	ldr	r1, [pc, #28]	; (800375c <HAL_RCC_OscConfig+0x85c>)
 8003740:	4313      	orrs	r3, r2
 8003742:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <HAL_RCC_OscConfig+0x85c>)
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	4a04      	ldr	r2, [pc, #16]	; (800375c <HAL_RCC_OscConfig+0x85c>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3730      	adds	r7, #48	; 0x30
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	58024400 	.word	0x58024400
 8003760:	ffff0007 	.word	0xffff0007

08003764 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e19c      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003778:	4b8a      	ldr	r3, [pc, #552]	; (80039a4 <HAL_RCC_ClockConfig+0x240>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d910      	bls.n	80037a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003786:	4b87      	ldr	r3, [pc, #540]	; (80039a4 <HAL_RCC_ClockConfig+0x240>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 020f 	bic.w	r2, r3, #15
 800378e:	4985      	ldr	r1, [pc, #532]	; (80039a4 <HAL_RCC_ClockConfig+0x240>)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003796:	4b83      	ldr	r3, [pc, #524]	; (80039a4 <HAL_RCC_ClockConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d001      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e184      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d010      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	4b7b      	ldr	r3, [pc, #492]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d908      	bls.n	80037d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80037c4:	4b78      	ldr	r3, [pc, #480]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	4975      	ldr	r1, [pc, #468]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d010      	beq.n	8003804 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695a      	ldr	r2, [r3, #20]
 80037e6:	4b70      	ldr	r3, [pc, #448]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d908      	bls.n	8003804 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037f2:	4b6d      	ldr	r3, [pc, #436]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	496a      	ldr	r1, [pc, #424]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 8003800:	4313      	orrs	r3, r2
 8003802:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b00      	cmp	r3, #0
 800380e:	d010      	beq.n	8003832 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699a      	ldr	r2, [r3, #24]
 8003814:	4b64      	ldr	r3, [pc, #400]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800381c:	429a      	cmp	r2, r3
 800381e:	d908      	bls.n	8003832 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003820:	4b61      	ldr	r3, [pc, #388]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	495e      	ldr	r1, [pc, #376]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 800382e:	4313      	orrs	r3, r2
 8003830:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d010      	beq.n	8003860 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69da      	ldr	r2, [r3, #28]
 8003842:	4b59      	ldr	r3, [pc, #356]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800384a:	429a      	cmp	r2, r3
 800384c:	d908      	bls.n	8003860 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800384e:	4b56      	ldr	r3, [pc, #344]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	4953      	ldr	r1, [pc, #332]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 800385c:	4313      	orrs	r3, r2
 800385e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d010      	beq.n	800388e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	4b4d      	ldr	r3, [pc, #308]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	429a      	cmp	r2, r3
 800387a:	d908      	bls.n	800388e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800387c:	4b4a      	ldr	r3, [pc, #296]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f023 020f 	bic.w	r2, r3, #15
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4947      	ldr	r1, [pc, #284]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 800388a:	4313      	orrs	r3, r2
 800388c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d055      	beq.n	8003946 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800389a:	4b43      	ldr	r3, [pc, #268]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	4940      	ldr	r1, [pc, #256]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d107      	bne.n	80038c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038b4:	4b3c      	ldr	r3, [pc, #240]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d121      	bne.n	8003904 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0f6      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d107      	bne.n	80038dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038cc:	4b36      	ldr	r3, [pc, #216]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d115      	bne.n	8003904 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0ea      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d107      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038e4:	4b30      	ldr	r3, [pc, #192]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d109      	bne.n	8003904 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0de      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038f4:	4b2c      	ldr	r3, [pc, #176]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0d6      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003904:	4b28      	ldr	r3, [pc, #160]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f023 0207 	bic.w	r2, r3, #7
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4925      	ldr	r1, [pc, #148]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 8003912:	4313      	orrs	r3, r2
 8003914:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003916:	f7fe fa2b 	bl	8001d70 <HAL_GetTick>
 800391a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391c:	e00a      	b.n	8003934 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800391e:	f7fe fa27 	bl	8001d70 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	f241 3288 	movw	r2, #5000	; 0x1388
 800392c:	4293      	cmp	r3, r2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e0be      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003934:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	429a      	cmp	r2, r3
 8003944:	d1eb      	bne.n	800391e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d010      	beq.n	8003974 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	429a      	cmp	r2, r3
 8003960:	d208      	bcs.n	8003974 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f023 020f 	bic.w	r2, r3, #15
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	490e      	ldr	r1, [pc, #56]	; (80039a8 <HAL_RCC_ClockConfig+0x244>)
 8003970:	4313      	orrs	r3, r2
 8003972:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_RCC_ClockConfig+0x240>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d214      	bcs.n	80039ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <HAL_RCC_ClockConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 020f 	bic.w	r2, r3, #15
 800398a:	4906      	ldr	r1, [pc, #24]	; (80039a4 <HAL_RCC_ClockConfig+0x240>)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <HAL_RCC_ClockConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d005      	beq.n	80039ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e086      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x34e>
 80039a4:	52002000 	.word	0x52002000
 80039a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d010      	beq.n	80039da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	4b3f      	ldr	r3, [pc, #252]	; (8003abc <HAL_RCC_ClockConfig+0x358>)
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d208      	bcs.n	80039da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039c8:	4b3c      	ldr	r3, [pc, #240]	; (8003abc <HAL_RCC_ClockConfig+0x358>)
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	4939      	ldr	r1, [pc, #228]	; (8003abc <HAL_RCC_ClockConfig+0x358>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d010      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	4b34      	ldr	r3, [pc, #208]	; (8003abc <HAL_RCC_ClockConfig+0x358>)
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d208      	bcs.n	8003a08 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039f6:	4b31      	ldr	r3, [pc, #196]	; (8003abc <HAL_RCC_ClockConfig+0x358>)
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	492e      	ldr	r1, [pc, #184]	; (8003abc <HAL_RCC_ClockConfig+0x358>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d010      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699a      	ldr	r2, [r3, #24]
 8003a18:	4b28      	ldr	r3, [pc, #160]	; (8003abc <HAL_RCC_ClockConfig+0x358>)
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d208      	bcs.n	8003a36 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a24:	4b25      	ldr	r3, [pc, #148]	; (8003abc <HAL_RCC_ClockConfig+0x358>)
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	4922      	ldr	r1, [pc, #136]	; (8003abc <HAL_RCC_ClockConfig+0x358>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d010      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69da      	ldr	r2, [r3, #28]
 8003a46:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <HAL_RCC_ClockConfig+0x358>)
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d208      	bcs.n	8003a64 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a52:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <HAL_RCC_ClockConfig+0x358>)
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	4917      	ldr	r1, [pc, #92]	; (8003abc <HAL_RCC_ClockConfig+0x358>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003a64:	f000 f834 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b14      	ldr	r3, [pc, #80]	; (8003abc <HAL_RCC_ClockConfig+0x358>)
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	0a1b      	lsrs	r3, r3, #8
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	4912      	ldr	r1, [pc, #72]	; (8003ac0 <HAL_RCC_ClockConfig+0x35c>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a80:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003a82:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <HAL_RCC_ClockConfig+0x358>)
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	4a0d      	ldr	r2, [pc, #52]	; (8003ac0 <HAL_RCC_ClockConfig+0x35c>)
 8003a8c:	5cd3      	ldrb	r3, [r2, r3]
 8003a8e:	f003 031f 	and.w	r3, r3, #31
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
 8003a98:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <HAL_RCC_ClockConfig+0x360>)
 8003a9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a9c:	4a0a      	ldr	r2, [pc, #40]	; (8003ac8 <HAL_RCC_ClockConfig+0x364>)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003aa2:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <HAL_RCC_ClockConfig+0x368>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe f918 	bl	8001cdc <HAL_InitTick>
 8003aac:	4603      	mov	r3, r0
 8003aae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	58024400 	.word	0x58024400
 8003ac0:	08009890 	.word	0x08009890
 8003ac4:	24000010 	.word	0x24000010
 8003ac8:	2400000c 	.word	0x2400000c
 8003acc:	24000014 	.word	0x24000014

08003ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b089      	sub	sp, #36	; 0x24
 8003ad4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ad6:	4bb3      	ldr	r3, [pc, #716]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ade:	2b18      	cmp	r3, #24
 8003ae0:	f200 8155 	bhi.w	8003d8e <HAL_RCC_GetSysClockFreq+0x2be>
 8003ae4:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <HAL_RCC_GetSysClockFreq+0x1c>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003b51 	.word	0x08003b51
 8003af0:	08003d8f 	.word	0x08003d8f
 8003af4:	08003d8f 	.word	0x08003d8f
 8003af8:	08003d8f 	.word	0x08003d8f
 8003afc:	08003d8f 	.word	0x08003d8f
 8003b00:	08003d8f 	.word	0x08003d8f
 8003b04:	08003d8f 	.word	0x08003d8f
 8003b08:	08003d8f 	.word	0x08003d8f
 8003b0c:	08003b77 	.word	0x08003b77
 8003b10:	08003d8f 	.word	0x08003d8f
 8003b14:	08003d8f 	.word	0x08003d8f
 8003b18:	08003d8f 	.word	0x08003d8f
 8003b1c:	08003d8f 	.word	0x08003d8f
 8003b20:	08003d8f 	.word	0x08003d8f
 8003b24:	08003d8f 	.word	0x08003d8f
 8003b28:	08003d8f 	.word	0x08003d8f
 8003b2c:	08003b7d 	.word	0x08003b7d
 8003b30:	08003d8f 	.word	0x08003d8f
 8003b34:	08003d8f 	.word	0x08003d8f
 8003b38:	08003d8f 	.word	0x08003d8f
 8003b3c:	08003d8f 	.word	0x08003d8f
 8003b40:	08003d8f 	.word	0x08003d8f
 8003b44:	08003d8f 	.word	0x08003d8f
 8003b48:	08003d8f 	.word	0x08003d8f
 8003b4c:	08003b83 	.word	0x08003b83
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b50:	4b94      	ldr	r3, [pc, #592]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d009      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b5c:	4b91      	ldr	r3, [pc, #580]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	08db      	lsrs	r3, r3, #3
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	4a90      	ldr	r2, [pc, #576]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b68:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003b6e:	e111      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003b70:	4b8d      	ldr	r3, [pc, #564]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b72:	61bb      	str	r3, [r7, #24]
      break;
 8003b74:	e10e      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003b76:	4b8d      	ldr	r3, [pc, #564]	; (8003dac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b78:	61bb      	str	r3, [r7, #24]
      break;
 8003b7a:	e10b      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003b7c:	4b8c      	ldr	r3, [pc, #560]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003b7e:	61bb      	str	r3, [r7, #24]
      break;
 8003b80:	e108      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b82:	4b88      	ldr	r3, [pc, #544]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003b8c:	4b85      	ldr	r3, [pc, #532]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b96:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b98:	4b82      	ldr	r3, [pc, #520]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003ba2:	4b80      	ldr	r3, [pc, #512]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba6:	08db      	lsrs	r3, r3, #3
 8003ba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	fb02 f303 	mul.w	r3, r2, r3
 8003bb2:	ee07 3a90 	vmov	s15, r3
 8003bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 80e1 	beq.w	8003d88 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	f000 8083 	beq.w	8003cd4 <HAL_RCC_GetSysClockFreq+0x204>
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	f200 80a1 	bhi.w	8003d18 <HAL_RCC_GetSysClockFreq+0x248>
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0x114>
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d056      	beq.n	8003c90 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003be2:	e099      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003be4:	4b6f      	ldr	r3, [pc, #444]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d02d      	beq.n	8003c4c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bf0:	4b6c      	ldr	r3, [pc, #432]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	08db      	lsrs	r3, r3, #3
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	4a6b      	ldr	r2, [pc, #428]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003c00:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	ee07 3a90 	vmov	s15, r3
 8003c08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c1a:	4b62      	ldr	r3, [pc, #392]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c2e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003db4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c46:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003c4a:	e087      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	ee07 3a90 	vmov	s15, r3
 8003c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c56:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003db8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c5e:	4b51      	ldr	r3, [pc, #324]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c72:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003db4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c8e:	e065      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003dbc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ca2:	4b40      	ldr	r3, [pc, #256]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cb6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003db4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cd2:	e043      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	ee07 3a90 	vmov	s15, r3
 8003cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cde:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003dc0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce6:	4b2f      	ldr	r3, [pc, #188]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cfa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003db4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d16:	e021      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d22:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003dbc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d2a:	4b1e      	ldr	r3, [pc, #120]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d3e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003db4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d5a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003d5c:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	0a5b      	lsrs	r3, r3, #9
 8003d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d66:	3301      	adds	r3, #1
 8003d68:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	ee07 3a90 	vmov	s15, r3
 8003d70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d74:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d80:	ee17 3a90 	vmov	r3, s15
 8003d84:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003d86:	e005      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61bb      	str	r3, [r7, #24]
      break;
 8003d8c:	e002      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003d8e:	4b07      	ldr	r3, [pc, #28]	; (8003dac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d90:	61bb      	str	r3, [r7, #24]
      break;
 8003d92:	bf00      	nop
  }

  return sysclockfreq;
 8003d94:	69bb      	ldr	r3, [r7, #24]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3724      	adds	r7, #36	; 0x24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	58024400 	.word	0x58024400
 8003da8:	03d09000 	.word	0x03d09000
 8003dac:	003d0900 	.word	0x003d0900
 8003db0:	007a1200 	.word	0x007a1200
 8003db4:	46000000 	.word	0x46000000
 8003db8:	4c742400 	.word	0x4c742400
 8003dbc:	4a742400 	.word	0x4a742400
 8003dc0:	4af42400 	.word	0x4af42400

08003dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003dca:	f7ff fe81 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <HAL_RCC_GetHCLKFreq+0x50>)
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	0a1b      	lsrs	r3, r3, #8
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	490f      	ldr	r1, [pc, #60]	; (8003e18 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ddc:	5ccb      	ldrb	r3, [r1, r3]
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	fa22 f303 	lsr.w	r3, r2, r3
 8003de6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003de8:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <HAL_RCC_GetHCLKFreq+0x50>)
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	4a09      	ldr	r2, [pc, #36]	; (8003e18 <HAL_RCC_GetHCLKFreq+0x54>)
 8003df2:	5cd3      	ldrb	r3, [r2, r3]
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfe:	4a07      	ldr	r2, [pc, #28]	; (8003e1c <HAL_RCC_GetHCLKFreq+0x58>)
 8003e00:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e02:	4a07      	ldr	r2, [pc, #28]	; (8003e20 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e08:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <HAL_RCC_GetHCLKFreq+0x58>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	58024400 	.word	0x58024400
 8003e18:	08009890 	.word	0x08009890
 8003e1c:	24000010 	.word	0x24000010
 8003e20:	2400000c 	.word	0x2400000c

08003e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003e28:	f7ff ffcc 	bl	8003dc4 <HAL_RCC_GetHCLKFreq>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	4904      	ldr	r1, [pc, #16]	; (8003e4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e3a:	5ccb      	ldrb	r3, [r1, r3]
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	58024400 	.word	0x58024400
 8003e4c:	08009890 	.word	0x08009890

08003e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003e54:	f7ff ffb6 	bl	8003dc4 <HAL_RCC_GetHCLKFreq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	0a1b      	lsrs	r3, r3, #8
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	4904      	ldr	r1, [pc, #16]	; (8003e78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e66:	5ccb      	ldrb	r3, [r1, r3]
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	58024400 	.word	0x58024400
 8003e78:	08009890 	.word	0x08009890

08003e7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e80:	b0c8      	sub	sp, #288	; 0x120
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003ea0:	2500      	movs	r5, #0
 8003ea2:	ea54 0305 	orrs.w	r3, r4, r5
 8003ea6:	d049      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003eb2:	d02f      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003eb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003eb8:	d828      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003eba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ebe:	d01a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ec0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ec4:	d822      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ece:	d007      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ed0:	e01c      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ed2:	4ba7      	ldr	r3, [pc, #668]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	4aa6      	ldr	r2, [pc, #664]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003edc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ede:	e01a      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f001 fc43 	bl	8005774 <RCCEx_PLL2_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ef4:	e00f      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003efa:	3328      	adds	r3, #40	; 0x28
 8003efc:	2102      	movs	r1, #2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 fcea 	bl	80058d8 <RCCEx_PLL3_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003f0a:	e004      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f12:	e000      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f1e:	4b94      	ldr	r3, [pc, #592]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f22:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f2c:	4a90      	ldr	r2, [pc, #576]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	6513      	str	r3, [r2, #80]	; 0x50
 8003f32:	e003      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003f48:	f04f 0900 	mov.w	r9, #0
 8003f4c:	ea58 0309 	orrs.w	r3, r8, r9
 8003f50:	d047      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d82a      	bhi.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003f5c:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f62:	bf00      	nop
 8003f64:	08003f79 	.word	0x08003f79
 8003f68:	08003f87 	.word	0x08003f87
 8003f6c:	08003f9d 	.word	0x08003f9d
 8003f70:	08003fbb 	.word	0x08003fbb
 8003f74:	08003fbb 	.word	0x08003fbb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f78:	4b7d      	ldr	r3, [pc, #500]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	4a7c      	ldr	r2, [pc, #496]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f84:	e01a      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 fbf0 	bl	8005774 <RCCEx_PLL2_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f9a:	e00f      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa0:	3328      	adds	r3, #40	; 0x28
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f001 fc97 	bl	80058d8 <RCCEx_PLL3_Config>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fb0:	e004      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003fb8:	e000      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fc4:	4b6a      	ldr	r3, [pc, #424]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc8:	f023 0107 	bic.w	r1, r3, #7
 8003fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd2:	4a67      	ldr	r2, [pc, #412]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6513      	str	r3, [r2, #80]	; 0x50
 8003fd8:	e003      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fde:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fea:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003fee:	f04f 0b00 	mov.w	fp, #0
 8003ff2:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ff6:	d054      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004002:	d036      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004004:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004008:	d82f      	bhi.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800400a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800400e:	d032      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004014:	d829      	bhi.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004016:	2bc0      	cmp	r3, #192	; 0xc0
 8004018:	d02f      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800401a:	2bc0      	cmp	r3, #192	; 0xc0
 800401c:	d825      	bhi.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800401e:	2b80      	cmp	r3, #128	; 0x80
 8004020:	d018      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004022:	2b80      	cmp	r3, #128	; 0x80
 8004024:	d821      	bhi.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800402a:	2b40      	cmp	r3, #64	; 0x40
 800402c:	d007      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800402e:	e01c      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004030:	4b4f      	ldr	r3, [pc, #316]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	4a4e      	ldr	r2, [pc, #312]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800403c:	e01e      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800403e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004042:	3308      	adds	r3, #8
 8004044:	2100      	movs	r1, #0
 8004046:	4618      	mov	r0, r3
 8004048:	f001 fb94 	bl	8005774 <RCCEx_PLL2_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004052:	e013      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004058:	3328      	adds	r3, #40	; 0x28
 800405a:	2100      	movs	r1, #0
 800405c:	4618      	mov	r0, r3
 800405e:	f001 fc3b 	bl	80058d8 <RCCEx_PLL3_Config>
 8004062:	4603      	mov	r3, r0
 8004064:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004068:	e008      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004070:	e004      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004072:	bf00      	nop
 8004074:	e002      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004076:	bf00      	nop
 8004078:	e000      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800407a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004084:	4b3a      	ldr	r3, [pc, #232]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004088:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800408c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004092:	4a37      	ldr	r2, [pc, #220]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004094:	430b      	orrs	r3, r1
 8004096:	6513      	str	r3, [r2, #80]	; 0x50
 8004098:	e003      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800409e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80040a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80040ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80040b2:	2300      	movs	r3, #0
 80040b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80040b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80040bc:	460b      	mov	r3, r1
 80040be:	4313      	orrs	r3, r2
 80040c0:	d05c      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80040c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80040cc:	d03b      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80040ce:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80040d2:	d834      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80040d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d8:	d037      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80040da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040de:	d82e      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80040e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040e4:	d033      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80040e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040ea:	d828      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80040ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f0:	d01a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80040f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f6:	d822      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80040fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004100:	d007      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004102:	e01c      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004104:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	4a19      	ldr	r2, [pc, #100]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800410a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800410e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004110:	e01e      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004116:	3308      	adds	r3, #8
 8004118:	2100      	movs	r1, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f001 fb2a 	bl	8005774 <RCCEx_PLL2_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004126:	e013      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800412c:	3328      	adds	r3, #40	; 0x28
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f001 fbd1 	bl	80058d8 <RCCEx_PLL3_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800413c:	e008      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004144:	e004      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004146:	bf00      	nop
 8004148:	e002      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800414a:	bf00      	nop
 800414c:	e000      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800414e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004150:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10d      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004158:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800415a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004160:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004166:	4a02      	ldr	r2, [pc, #8]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004168:	430b      	orrs	r3, r1
 800416a:	6513      	str	r3, [r2, #80]	; 0x50
 800416c:	e006      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800416e:	bf00      	nop
 8004170:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004174:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004178:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800417c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004188:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800418c:	2300      	movs	r3, #0
 800418e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004192:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004196:	460b      	mov	r3, r1
 8004198:	4313      	orrs	r3, r2
 800419a:	d03a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800419c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a2:	2b30      	cmp	r3, #48	; 0x30
 80041a4:	d01f      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80041a6:	2b30      	cmp	r3, #48	; 0x30
 80041a8:	d819      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x362>
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d00c      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d815      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x362>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d019      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80041b6:	2b10      	cmp	r3, #16
 80041b8:	d111      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ba:	4bae      	ldr	r3, [pc, #696]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	4aad      	ldr	r2, [pc, #692]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80041c6:	e011      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041cc:	3308      	adds	r3, #8
 80041ce:	2102      	movs	r1, #2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f001 facf 	bl	8005774 <RCCEx_PLL2_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80041dc:	e006      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041e4:	e002      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80041e6:	bf00      	nop
 80041e8:	e000      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80041ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80041f4:	4b9f      	ldr	r3, [pc, #636]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80041fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004202:	4a9c      	ldr	r2, [pc, #624]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004204:	430b      	orrs	r3, r1
 8004206:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004208:	e003      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800420e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800421e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004222:	2300      	movs	r3, #0
 8004224:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004228:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800422c:	460b      	mov	r3, r1
 800422e:	4313      	orrs	r3, r2
 8004230:	d051      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800423c:	d035      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800423e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004242:	d82e      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004244:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004248:	d031      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x432>
 800424a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800424e:	d828      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004254:	d01a      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800425a:	d822      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004264:	d007      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004266:	e01c      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004268:	4b82      	ldr	r3, [pc, #520]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	4a81      	ldr	r2, [pc, #516]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800426e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004272:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004274:	e01c      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800427a:	3308      	adds	r3, #8
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f001 fa78 	bl	8005774 <RCCEx_PLL2_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800428a:	e011      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800428c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004290:	3328      	adds	r3, #40	; 0x28
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f001 fb1f 	bl	80058d8 <RCCEx_PLL3_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80042a0:	e006      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042a8:	e002      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80042aa:	bf00      	nop
 80042ac:	e000      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80042ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80042b8:	4b6e      	ldr	r3, [pc, #440]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042bc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80042c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c6:	4a6b      	ldr	r2, [pc, #428]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042c8:	430b      	orrs	r3, r1
 80042ca:	6513      	str	r3, [r2, #80]	; 0x50
 80042cc:	e003      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80042d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042de:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80042e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042e6:	2300      	movs	r3, #0
 80042e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80042f0:	460b      	mov	r3, r1
 80042f2:	4313      	orrs	r3, r2
 80042f4:	d053      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80042f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004300:	d033      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004302:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004306:	d82c      	bhi.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004308:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800430c:	d02f      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800430e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004312:	d826      	bhi.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004314:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004318:	d02b      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800431a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800431e:	d820      	bhi.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004324:	d012      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800432a:	d81a      	bhi.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800432c:	2b00      	cmp	r3, #0
 800432e:	d022      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004334:	d115      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800433a:	3308      	adds	r3, #8
 800433c:	2101      	movs	r1, #1
 800433e:	4618      	mov	r0, r3
 8004340:	f001 fa18 	bl	8005774 <RCCEx_PLL2_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800434a:	e015      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800434c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004350:	3328      	adds	r3, #40	; 0x28
 8004352:	2101      	movs	r1, #1
 8004354:	4618      	mov	r0, r3
 8004356:	f001 fabf 	bl	80058d8 <RCCEx_PLL3_Config>
 800435a:	4603      	mov	r3, r0
 800435c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004360:	e00a      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004368:	e006      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800436a:	bf00      	nop
 800436c:	e004      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800436e:	bf00      	nop
 8004370:	e002      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004372:	bf00      	nop
 8004374:	e000      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004378:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004380:	4b3c      	ldr	r3, [pc, #240]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004384:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800438c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800438e:	4a39      	ldr	r2, [pc, #228]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004390:	430b      	orrs	r3, r1
 8004392:	6513      	str	r3, [r2, #80]	; 0x50
 8004394:	e003      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004396:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800439a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800439e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80043aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043ae:	2300      	movs	r3, #0
 80043b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043b4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4313      	orrs	r3, r2
 80043bc:	d060      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80043be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043c6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80043ca:	d039      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80043cc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80043d0:	d832      	bhi.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80043d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043d6:	d035      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80043d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043dc:	d82c      	bhi.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80043de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e2:	d031      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80043e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e8:	d826      	bhi.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80043ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043ee:	d02d      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80043f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043f4:	d820      	bhi.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80043f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043fa:	d012      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80043fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004400:	d81a      	bhi.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004402:	2b00      	cmp	r3, #0
 8004404:	d024      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800440a:	d115      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800440c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004410:	3308      	adds	r3, #8
 8004412:	2101      	movs	r1, #1
 8004414:	4618      	mov	r0, r3
 8004416:	f001 f9ad 	bl	8005774 <RCCEx_PLL2_Config>
 800441a:	4603      	mov	r3, r0
 800441c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004420:	e017      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004426:	3328      	adds	r3, #40	; 0x28
 8004428:	2101      	movs	r1, #1
 800442a:	4618      	mov	r0, r3
 800442c:	f001 fa54 	bl	80058d8 <RCCEx_PLL3_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004436:	e00c      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800443e:	e008      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004440:	bf00      	nop
 8004442:	e006      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004444:	bf00      	nop
 8004446:	e004      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004448:	bf00      	nop
 800444a:	e002      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800444c:	bf00      	nop
 800444e:	e000      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004452:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10e      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004466:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800446a:	4a02      	ldr	r2, [pc, #8]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800446c:	430b      	orrs	r3, r1
 800446e:	6593      	str	r3, [r2, #88]	; 0x58
 8004470:	e006      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004472:	bf00      	nop
 8004474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800447c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800448c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004496:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d037      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80044a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044aa:	d00e      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80044ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044b0:	d816      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d018      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80044b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044ba:	d111      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044bc:	4bc4      	ldr	r3, [pc, #784]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	4ac3      	ldr	r2, [pc, #780]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80044c8:	e00f      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ce:	3308      	adds	r3, #8
 80044d0:	2101      	movs	r1, #1
 80044d2:	4618      	mov	r0, r3
 80044d4:	f001 f94e 	bl	8005774 <RCCEx_PLL2_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80044de:	e004      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044e6:	e000      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80044e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044f2:	4bb7      	ldr	r3, [pc, #732]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80044fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004500:	4ab3      	ldr	r2, [pc, #716]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004502:	430b      	orrs	r3, r1
 8004504:	6513      	str	r3, [r2, #80]	; 0x50
 8004506:	e003      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004508:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800450c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800451c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004520:	2300      	movs	r3, #0
 8004522:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004526:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800452a:	460b      	mov	r3, r1
 800452c:	4313      	orrs	r3, r2
 800452e:	d039      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004536:	2b03      	cmp	r3, #3
 8004538:	d81c      	bhi.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800453a:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004540:	0800457d 	.word	0x0800457d
 8004544:	08004551 	.word	0x08004551
 8004548:	0800455f 	.word	0x0800455f
 800454c:	0800457d 	.word	0x0800457d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004550:	4b9f      	ldr	r3, [pc, #636]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	4a9e      	ldr	r2, [pc, #632]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800455a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800455c:	e00f      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800455e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004562:	3308      	adds	r3, #8
 8004564:	2102      	movs	r1, #2
 8004566:	4618      	mov	r0, r3
 8004568:	f001 f904 	bl	8005774 <RCCEx_PLL2_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004572:	e004      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800457a:	e000      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800457c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004586:	4b92      	ldr	r3, [pc, #584]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458a:	f023 0103 	bic.w	r1, r3, #3
 800458e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004594:	4a8e      	ldr	r2, [pc, #568]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004596:	430b      	orrs	r3, r1
 8004598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800459a:	e003      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80045b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045b4:	2300      	movs	r3, #0
 80045b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80045be:	460b      	mov	r3, r1
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f000 8099 	beq.w	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045c6:	4b83      	ldr	r3, [pc, #524]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a82      	ldr	r2, [pc, #520]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80045cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045d2:	f7fd fbcd 	bl	8001d70 <HAL_GetTick>
 80045d6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045da:	e00b      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045dc:	f7fd fbc8 	bl	8001d70 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b64      	cmp	r3, #100	; 0x64
 80045ea:	d903      	bls.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80045f2:	e005      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045f4:	4b77      	ldr	r3, [pc, #476]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0ed      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004600:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004604:	2b00      	cmp	r3, #0
 8004606:	d173      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004608:	4b71      	ldr	r3, [pc, #452]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800460a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800460c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004610:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004614:	4053      	eors	r3, r2
 8004616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461a:	2b00      	cmp	r3, #0
 800461c:	d015      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800461e:	4b6c      	ldr	r3, [pc, #432]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004626:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800462a:	4b69      	ldr	r3, [pc, #420]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	4a68      	ldr	r2, [pc, #416]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004634:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004636:	4b66      	ldr	r3, [pc, #408]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	4a65      	ldr	r2, [pc, #404]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800463c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004640:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004642:	4a63      	ldr	r2, [pc, #396]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004648:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800464a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800464e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004656:	d118      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fd fb8a 	bl	8001d70 <HAL_GetTick>
 800465c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004660:	e00d      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004662:	f7fd fb85 	bl	8001d70 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800466c:	1ad2      	subs	r2, r2, r3
 800466e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004672:	429a      	cmp	r2, r3
 8004674:	d903      	bls.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800467c:	e005      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800467e:	4b54      	ldr	r3, [pc, #336]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0eb      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800468a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800468e:	2b00      	cmp	r3, #0
 8004690:	d129      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004696:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800469a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046a2:	d10e      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80046a4:	4b4a      	ldr	r3, [pc, #296]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80046ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046b4:	091a      	lsrs	r2, r3, #4
 80046b6:	4b48      	ldr	r3, [pc, #288]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	4a45      	ldr	r2, [pc, #276]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046bc:	430b      	orrs	r3, r1
 80046be:	6113      	str	r3, [r2, #16]
 80046c0:	e005      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x852>
 80046c2:	4b43      	ldr	r3, [pc, #268]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	4a42      	ldr	r2, [pc, #264]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80046cc:	6113      	str	r3, [r2, #16]
 80046ce:	4b40      	ldr	r3, [pc, #256]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80046d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046de:	4a3c      	ldr	r2, [pc, #240]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046e0:	430b      	orrs	r3, r1
 80046e2:	6713      	str	r3, [r2, #112]	; 0x70
 80046e4:	e008      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80046ee:	e003      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80046f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	f002 0301 	and.w	r3, r2, #1
 8004704:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004708:	2300      	movs	r3, #0
 800470a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800470e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004712:	460b      	mov	r3, r1
 8004714:	4313      	orrs	r3, r2
 8004716:	f000 8090 	beq.w	800483a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800471a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800471e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004722:	2b28      	cmp	r3, #40	; 0x28
 8004724:	d870      	bhi.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004726:	a201      	add	r2, pc, #4	; (adr r2, 800472c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472c:	08004811 	.word	0x08004811
 8004730:	08004809 	.word	0x08004809
 8004734:	08004809 	.word	0x08004809
 8004738:	08004809 	.word	0x08004809
 800473c:	08004809 	.word	0x08004809
 8004740:	08004809 	.word	0x08004809
 8004744:	08004809 	.word	0x08004809
 8004748:	08004809 	.word	0x08004809
 800474c:	080047dd 	.word	0x080047dd
 8004750:	08004809 	.word	0x08004809
 8004754:	08004809 	.word	0x08004809
 8004758:	08004809 	.word	0x08004809
 800475c:	08004809 	.word	0x08004809
 8004760:	08004809 	.word	0x08004809
 8004764:	08004809 	.word	0x08004809
 8004768:	08004809 	.word	0x08004809
 800476c:	080047f3 	.word	0x080047f3
 8004770:	08004809 	.word	0x08004809
 8004774:	08004809 	.word	0x08004809
 8004778:	08004809 	.word	0x08004809
 800477c:	08004809 	.word	0x08004809
 8004780:	08004809 	.word	0x08004809
 8004784:	08004809 	.word	0x08004809
 8004788:	08004809 	.word	0x08004809
 800478c:	08004811 	.word	0x08004811
 8004790:	08004809 	.word	0x08004809
 8004794:	08004809 	.word	0x08004809
 8004798:	08004809 	.word	0x08004809
 800479c:	08004809 	.word	0x08004809
 80047a0:	08004809 	.word	0x08004809
 80047a4:	08004809 	.word	0x08004809
 80047a8:	08004809 	.word	0x08004809
 80047ac:	08004811 	.word	0x08004811
 80047b0:	08004809 	.word	0x08004809
 80047b4:	08004809 	.word	0x08004809
 80047b8:	08004809 	.word	0x08004809
 80047bc:	08004809 	.word	0x08004809
 80047c0:	08004809 	.word	0x08004809
 80047c4:	08004809 	.word	0x08004809
 80047c8:	08004809 	.word	0x08004809
 80047cc:	08004811 	.word	0x08004811
 80047d0:	58024400 	.word	0x58024400
 80047d4:	58024800 	.word	0x58024800
 80047d8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e0:	3308      	adds	r3, #8
 80047e2:	2101      	movs	r1, #1
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 ffc5 	bl	8005774 <RCCEx_PLL2_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80047f0:	e00f      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f6:	3328      	adds	r3, #40	; 0x28
 80047f8:	2101      	movs	r1, #1
 80047fa:	4618      	mov	r0, r3
 80047fc:	f001 f86c 	bl	80058d8 <RCCEx_PLL3_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004806:	e004      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800480e:	e000      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004812:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10b      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800481a:	4bc0      	ldr	r3, [pc, #768]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800481c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482a:	4abc      	ldr	r2, [pc, #752]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800482c:	430b      	orrs	r3, r1
 800482e:	6553      	str	r3, [r2, #84]	; 0x54
 8004830:	e003      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004832:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004836:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800483a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	f002 0302 	and.w	r3, r2, #2
 8004846:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800484a:	2300      	movs	r3, #0
 800484c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004850:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004854:	460b      	mov	r3, r1
 8004856:	4313      	orrs	r3, r2
 8004858:	d043      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800485a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800485e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004862:	2b05      	cmp	r3, #5
 8004864:	d824      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	080048b9 	.word	0x080048b9
 8004870:	08004885 	.word	0x08004885
 8004874:	0800489b 	.word	0x0800489b
 8004878:	080048b9 	.word	0x080048b9
 800487c:	080048b9 	.word	0x080048b9
 8004880:	080048b9 	.word	0x080048b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004888:	3308      	adds	r3, #8
 800488a:	2101      	movs	r1, #1
 800488c:	4618      	mov	r0, r3
 800488e:	f000 ff71 	bl	8005774 <RCCEx_PLL2_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004898:	e00f      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800489a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800489e:	3328      	adds	r3, #40	; 0x28
 80048a0:	2101      	movs	r1, #1
 80048a2:	4618      	mov	r0, r3
 80048a4:	f001 f818 	bl	80058d8 <RCCEx_PLL3_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80048ae:	e004      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80048b6:	e000      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80048b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10b      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80048c2:	4b96      	ldr	r3, [pc, #600]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f023 0107 	bic.w	r1, r3, #7
 80048ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d2:	4a92      	ldr	r2, [pc, #584]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048d4:	430b      	orrs	r3, r1
 80048d6:	6553      	str	r3, [r2, #84]	; 0x54
 80048d8:	e003      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	f002 0304 	and.w	r3, r2, #4
 80048ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048f2:	2300      	movs	r3, #0
 80048f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048f8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4313      	orrs	r3, r2
 8004900:	d043      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004906:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800490a:	2b05      	cmp	r3, #5
 800490c:	d824      	bhi.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800490e:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004914:	08004961 	.word	0x08004961
 8004918:	0800492d 	.word	0x0800492d
 800491c:	08004943 	.word	0x08004943
 8004920:	08004961 	.word	0x08004961
 8004924:	08004961 	.word	0x08004961
 8004928:	08004961 	.word	0x08004961
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800492c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004930:	3308      	adds	r3, #8
 8004932:	2101      	movs	r1, #1
 8004934:	4618      	mov	r0, r3
 8004936:	f000 ff1d 	bl	8005774 <RCCEx_PLL2_Config>
 800493a:	4603      	mov	r3, r0
 800493c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004940:	e00f      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004946:	3328      	adds	r3, #40	; 0x28
 8004948:	2101      	movs	r1, #1
 800494a:	4618      	mov	r0, r3
 800494c:	f000 ffc4 	bl	80058d8 <RCCEx_PLL3_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004956:	e004      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800495e:	e000      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004962:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10b      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800496a:	4b6c      	ldr	r3, [pc, #432]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	f023 0107 	bic.w	r1, r3, #7
 8004972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004976:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800497a:	4a68      	ldr	r2, [pc, #416]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800497c:	430b      	orrs	r3, r1
 800497e:	6593      	str	r3, [r2, #88]	; 0x58
 8004980:	e003      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004982:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004986:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800498a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	f002 0320 	and.w	r3, r2, #32
 8004996:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800499a:	2300      	movs	r3, #0
 800499c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049a4:	460b      	mov	r3, r1
 80049a6:	4313      	orrs	r3, r2
 80049a8:	d055      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80049aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049b6:	d033      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80049b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049bc:	d82c      	bhi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80049be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c2:	d02f      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80049c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c8:	d826      	bhi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80049ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049ce:	d02b      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80049d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049d4:	d820      	bhi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80049d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049da:	d012      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80049dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e0:	d81a      	bhi.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d022      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80049e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ea:	d115      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f0:	3308      	adds	r3, #8
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 febd 	bl	8005774 <RCCEx_PLL2_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004a00:	e015      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a06:	3328      	adds	r3, #40	; 0x28
 8004a08:	2102      	movs	r1, #2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 ff64 	bl	80058d8 <RCCEx_PLL3_Config>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004a16:	e00a      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a1e:	e006      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004a20:	bf00      	nop
 8004a22:	e004      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004a24:	bf00      	nop
 8004a26:	e002      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004a28:	bf00      	nop
 8004a2a:	e000      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10b      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a36:	4b39      	ldr	r3, [pc, #228]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a46:	4a35      	ldr	r2, [pc, #212]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	6553      	str	r3, [r2, #84]	; 0x54
 8004a4c:	e003      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a66:	2300      	movs	r3, #0
 8004a68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004a6c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4313      	orrs	r3, r2
 8004a74:	d058      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a7e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a82:	d033      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004a84:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a88:	d82c      	bhi.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8e:	d02f      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a94:	d826      	bhi.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004a96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a9a:	d02b      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004a9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aa0:	d820      	bhi.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa6:	d012      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aac:	d81a      	bhi.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d022      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab6:	d115      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004abc:	3308      	adds	r3, #8
 8004abe:	2100      	movs	r1, #0
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fe57 	bl	8005774 <RCCEx_PLL2_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004acc:	e015      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad2:	3328      	adds	r3, #40	; 0x28
 8004ad4:	2102      	movs	r1, #2
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fefe 	bl	80058d8 <RCCEx_PLL3_Config>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ae2:	e00a      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004aea:	e006      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004aec:	bf00      	nop
 8004aee:	e004      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004af0:	bf00      	nop
 8004af2:	e002      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004af4:	bf00      	nop
 8004af6:	e000      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004afa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10e      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b02:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b06:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b12:	4a02      	ldr	r2, [pc, #8]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b14:	430b      	orrs	r3, r1
 8004b16:	6593      	str	r3, [r2, #88]	; 0x58
 8004b18:	e006      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004b1a:	bf00      	nop
 8004b1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b24:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b30:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b3e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004b42:	460b      	mov	r3, r1
 8004b44:	4313      	orrs	r3, r2
 8004b46:	d055      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b50:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b54:	d033      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004b56:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b5a:	d82c      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b60:	d02f      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b66:	d826      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004b68:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b6c:	d02b      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004b6e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b72:	d820      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b78:	d012      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004b7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b7e:	d81a      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d022      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b88:	d115      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b8e:	3308      	adds	r3, #8
 8004b90:	2100      	movs	r1, #0
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fdee 	bl	8005774 <RCCEx_PLL2_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b9e:	e015      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba4:	3328      	adds	r3, #40	; 0x28
 8004ba6:	2102      	movs	r1, #2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fe95 	bl	80058d8 <RCCEx_PLL3_Config>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004bb4:	e00a      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004bbc:	e006      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004bbe:	bf00      	nop
 8004bc0:	e004      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004bc2:	bf00      	nop
 8004bc4:	e002      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004bc6:	bf00      	nop
 8004bc8:	e000      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bcc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10b      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004bd4:	4ba1      	ldr	r3, [pc, #644]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004be0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004be4:	4a9d      	ldr	r2, [pc, #628]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004be6:	430b      	orrs	r3, r1
 8004be8:	6593      	str	r3, [r2, #88]	; 0x58
 8004bea:	e003      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bf0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfc:	f002 0308 	and.w	r3, r2, #8
 8004c00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c04:	2300      	movs	r3, #0
 8004c06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c0a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4313      	orrs	r3, r2
 8004c12:	d01e      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c20:	d10c      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c26:	3328      	adds	r3, #40	; 0x28
 8004c28:	2102      	movs	r1, #2
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fe54 	bl	80058d8 <RCCEx_PLL3_Config>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004c3c:	4b87      	ldr	r3, [pc, #540]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c4c:	4a83      	ldr	r2, [pc, #524]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	f002 0310 	and.w	r3, r2, #16
 8004c5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c62:	2300      	movs	r3, #0
 8004c64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c68:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	d01e      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7e:	d10c      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c84:	3328      	adds	r3, #40	; 0x28
 8004c86:	2102      	movs	r1, #2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fe25 	bl	80058d8 <RCCEx_PLL3_Config>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c9a:	4b70      	ldr	r3, [pc, #448]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ca6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004caa:	4a6c      	ldr	r2, [pc, #432]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004cbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cc6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	d03e      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cdc:	d022      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004cde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ce2:	d81b      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cec:	d00b      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004cee:	e015      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fd3b 	bl	8005774 <RCCEx_PLL2_Config>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004d04:	e00f      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d0a:	3328      	adds	r3, #40	; 0x28
 8004d0c:	2102      	movs	r1, #2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fde2 	bl	80058d8 <RCCEx_PLL3_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004d1a:	e004      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d22:	e000      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10b      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d2e:	4b4b      	ldr	r3, [pc, #300]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d32:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d3e:	4a47      	ldr	r2, [pc, #284]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6593      	str	r3, [r2, #88]	; 0x58
 8004d44:	e003      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004d5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d60:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004d64:	460b      	mov	r3, r1
 8004d66:	4313      	orrs	r3, r2
 8004d68:	d03b      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d76:	d01f      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004d78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d7c:	d818      	bhi.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d82:	d003      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d88:	d007      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004d8a:	e011      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d8c:	4b33      	ldr	r3, [pc, #204]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	4a32      	ldr	r2, [pc, #200]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d98:	e00f      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d9e:	3328      	adds	r3, #40	; 0x28
 8004da0:	2101      	movs	r1, #1
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fd98 	bl	80058d8 <RCCEx_PLL3_Config>
 8004da8:	4603      	mov	r3, r0
 8004daa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004dae:	e004      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004db6:	e000      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10b      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dc2:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd2:	4a22      	ldr	r2, [pc, #136]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	6553      	str	r3, [r2, #84]	; 0x54
 8004dd8:	e003      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dde:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004dee:	673b      	str	r3, [r7, #112]	; 0x70
 8004df0:	2300      	movs	r3, #0
 8004df2:	677b      	str	r3, [r7, #116]	; 0x74
 8004df4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	d034      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e0c:	d007      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004e0e:	e011      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e10:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	4a11      	ldr	r2, [pc, #68]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004e1c:	e00e      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e22:	3308      	adds	r3, #8
 8004e24:	2102      	movs	r1, #2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fca4 	bl	8005774 <RCCEx_PLL2_Config>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004e32:	e003      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10d      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e52:	4a02      	ldr	r2, [pc, #8]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e54:	430b      	orrs	r3, r1
 8004e56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e58:	e006      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004e5a:	bf00      	nop
 8004e5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e64:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004e74:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e76:	2300      	movs	r3, #0
 8004e78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e7a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4313      	orrs	r3, r2
 8004e82:	d00c      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e88:	3328      	adds	r3, #40	; 0x28
 8004e8a:	2102      	movs	r1, #2
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fd23 	bl	80058d8 <RCCEx_PLL3_Config>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004eaa:	663b      	str	r3, [r7, #96]	; 0x60
 8004eac:	2300      	movs	r3, #0
 8004eae:	667b      	str	r3, [r7, #100]	; 0x64
 8004eb0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	d038      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ec6:	d018      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004ec8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ecc:	d811      	bhi.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed2:	d014      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed8:	d80b      	bhi.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d011      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee2:	d106      	bne.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee4:	4bc3      	ldr	r3, [pc, #780]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	4ac2      	ldr	r2, [pc, #776]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004ef0:	e008      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004ef8:	e004      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004efa:	bf00      	nop
 8004efc:	e002      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004efe:	bf00      	nop
 8004f00:	e000      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10b      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f0c:	4bb9      	ldr	r3, [pc, #740]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	4ab5      	ldr	r2, [pc, #724]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	6553      	str	r3, [r2, #84]	; 0x54
 8004f22:	e003      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004f38:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004f42:	460b      	mov	r3, r1
 8004f44:	4313      	orrs	r3, r2
 8004f46:	d009      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f48:	4baa      	ldr	r3, [pc, #680]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f56:	4aa7      	ldr	r2, [pc, #668]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004f68:	653b      	str	r3, [r7, #80]	; 0x50
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	657b      	str	r3, [r7, #84]	; 0x54
 8004f6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004f72:	460b      	mov	r3, r1
 8004f74:	4313      	orrs	r3, r2
 8004f76:	d009      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f78:	4b9e      	ldr	r3, [pc, #632]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	4a9b      	ldr	r2, [pc, #620]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004f98:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f9e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	d009      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004fa8:	4b92      	ldr	r3, [pc, #584]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fac:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb6:	4a8f      	ldr	r2, [pc, #572]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8004fca:	2300      	movs	r3, #0
 8004fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8004fce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	d00e      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fd8:	4b86      	ldr	r3, [pc, #536]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	4a85      	ldr	r2, [pc, #532]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fe2:	6113      	str	r3, [r2, #16]
 8004fe4:	4b83      	ldr	r3, [pc, #524]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fe6:	6919      	ldr	r1, [r3, #16]
 8004fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004ff0:	4a80      	ldr	r2, [pc, #512]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005002:	63bb      	str	r3, [r7, #56]	; 0x38
 8005004:	2300      	movs	r3, #0
 8005006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005008:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800500c:	460b      	mov	r3, r1
 800500e:	4313      	orrs	r3, r2
 8005010:	d009      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005012:	4b78      	ldr	r3, [pc, #480]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005016:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800501a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800501e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005020:	4a74      	ldr	r2, [pc, #464]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005022:	430b      	orrs	r3, r1
 8005024:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005032:	633b      	str	r3, [r7, #48]	; 0x30
 8005034:	2300      	movs	r3, #0
 8005036:	637b      	str	r3, [r7, #52]	; 0x34
 8005038:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800503c:	460b      	mov	r3, r1
 800503e:	4313      	orrs	r3, r2
 8005040:	d00a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005042:	4b6c      	ldr	r3, [pc, #432]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005046:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800504a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800504e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005052:	4a68      	ldr	r2, [pc, #416]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005054:	430b      	orrs	r3, r1
 8005056:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005060:	2100      	movs	r1, #0
 8005062:	62b9      	str	r1, [r7, #40]	; 0x28
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800506a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800506e:	460b      	mov	r3, r1
 8005070:	4313      	orrs	r3, r2
 8005072:	d011      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005074:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005078:	3308      	adds	r3, #8
 800507a:	2100      	movs	r1, #0
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fb79 	bl	8005774 <RCCEx_PLL2_Config>
 8005082:	4603      	mov	r3, r0
 8005084:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005088:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005090:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005094:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	2100      	movs	r1, #0
 80050a2:	6239      	str	r1, [r7, #32]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
 80050aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80050ae:	460b      	mov	r3, r1
 80050b0:	4313      	orrs	r3, r2
 80050b2:	d011      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050b8:	3308      	adds	r3, #8
 80050ba:	2101      	movs	r1, #1
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fb59 	bl	8005774 <RCCEx_PLL2_Config>
 80050c2:	4603      	mov	r3, r0
 80050c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80050c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80050d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	2100      	movs	r1, #0
 80050e2:	61b9      	str	r1, [r7, #24]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80050ee:	460b      	mov	r3, r1
 80050f0:	4313      	orrs	r3, r2
 80050f2:	d011      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050f8:	3308      	adds	r3, #8
 80050fa:	2102      	movs	r1, #2
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 fb39 	bl	8005774 <RCCEx_PLL2_Config>
 8005102:	4603      	mov	r3, r0
 8005104:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005108:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005110:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005114:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005120:	2100      	movs	r1, #0
 8005122:	6139      	str	r1, [r7, #16]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800512e:	460b      	mov	r3, r1
 8005130:	4313      	orrs	r3, r2
 8005132:	d011      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005138:	3328      	adds	r3, #40	; 0x28
 800513a:	2100      	movs	r1, #0
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fbcb 	bl	80058d8 <RCCEx_PLL3_Config>
 8005142:	4603      	mov	r3, r0
 8005144:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8005148:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005150:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005154:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005160:	2100      	movs	r1, #0
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800516e:	460b      	mov	r3, r1
 8005170:	4313      	orrs	r3, r2
 8005172:	d011      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005178:	3328      	adds	r3, #40	; 0x28
 800517a:	2101      	movs	r1, #1
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fbab 	bl	80058d8 <RCCEx_PLL3_Config>
 8005182:	4603      	mov	r3, r0
 8005184:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005188:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005190:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005194:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a0:	2100      	movs	r1, #0
 80051a2:	6039      	str	r1, [r7, #0]
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	607b      	str	r3, [r7, #4]
 80051aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80051ae:	460b      	mov	r3, r1
 80051b0:	4313      	orrs	r3, r2
 80051b2:	d011      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051b8:	3328      	adds	r3, #40	; 0x28
 80051ba:	2102      	movs	r1, #2
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 fb8b 	bl	80058d8 <RCCEx_PLL3_Config>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80051c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80051d8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e000      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80051ec:	46bd      	mov	sp, r7
 80051ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051f2:	bf00      	nop
 80051f4:	58024400 	.word	0x58024400

080051f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80051fc:	f7fe fde2 	bl	8003dc4 <HAL_RCC_GetHCLKFreq>
 8005200:	4602      	mov	r2, r0
 8005202:	4b06      	ldr	r3, [pc, #24]	; (800521c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	091b      	lsrs	r3, r3, #4
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	4904      	ldr	r1, [pc, #16]	; (8005220 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800520e:	5ccb      	ldrb	r3, [r1, r3]
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005218:	4618      	mov	r0, r3
 800521a:	bd80      	pop	{r7, pc}
 800521c:	58024400 	.word	0x58024400
 8005220:	08009890 	.word	0x08009890

08005224 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005224:	b480      	push	{r7}
 8005226:	b089      	sub	sp, #36	; 0x24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800522c:	4ba1      	ldr	r3, [pc, #644]	; (80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800522e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005236:	4b9f      	ldr	r3, [pc, #636]	; (80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523a:	0b1b      	lsrs	r3, r3, #12
 800523c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005240:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005242:	4b9c      	ldr	r3, [pc, #624]	; (80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	091b      	lsrs	r3, r3, #4
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800524e:	4b99      	ldr	r3, [pc, #612]	; (80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005252:	08db      	lsrs	r3, r3, #3
 8005254:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005266:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 8111 	beq.w	8005494 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	2b02      	cmp	r3, #2
 8005276:	f000 8083 	beq.w	8005380 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	2b02      	cmp	r3, #2
 800527e:	f200 80a1 	bhi.w	80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d056      	beq.n	800533c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800528e:	e099      	b.n	80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005290:	4b88      	ldr	r3, [pc, #544]	; (80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b00      	cmp	r3, #0
 800529a:	d02d      	beq.n	80052f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800529c:	4b85      	ldr	r3, [pc, #532]	; (80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	08db      	lsrs	r3, r3, #3
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	4a84      	ldr	r2, [pc, #528]	; (80054b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80052a8:	fa22 f303 	lsr.w	r3, r2, r3
 80052ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	ee07 3a90 	vmov	s15, r3
 80052b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c6:	4b7b      	ldr	r3, [pc, #492]	; (80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80054bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80052f6:	e087      	b.n	8005408 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005302:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80054c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800530a:	4b6a      	ldr	r3, [pc, #424]	; (80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531a:	ed97 6a03 	vldr	s12, [r7, #12]
 800531e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80054bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800532a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800532e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800533a:	e065      	b.n	8005408 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	ee07 3a90 	vmov	s15, r3
 8005342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005346:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80054c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800534a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800534e:	4b59      	ldr	r3, [pc, #356]	; (80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005362:	eddf 5a56 	vldr	s11, [pc, #344]	; 80054bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800536a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800536e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800537e:	e043      	b.n	8005408 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80054c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800538e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005392:	4b48      	ldr	r3, [pc, #288]	; (80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539a:	ee07 3a90 	vmov	s15, r3
 800539e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80054bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053c2:	e021      	b.n	8005408 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80054c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80053d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d6:	4b37      	ldr	r3, [pc, #220]	; (80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80054bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005406:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005408:	4b2a      	ldr	r3, [pc, #168]	; (80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	0a5b      	lsrs	r3, r3, #9
 800540e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800541e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005422:	edd7 6a07 	vldr	s13, [r7, #28]
 8005426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800542a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800542e:	ee17 2a90 	vmov	r2, s15
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005436:	4b1f      	ldr	r3, [pc, #124]	; (80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	0c1b      	lsrs	r3, r3, #16
 800543c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005440:	ee07 3a90 	vmov	s15, r3
 8005444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005448:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800544c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005450:	edd7 6a07 	vldr	s13, [r7, #28]
 8005454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800545c:	ee17 2a90 	vmov	r2, s15
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005464:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005468:	0e1b      	lsrs	r3, r3, #24
 800546a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005476:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800547a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800547e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800548a:	ee17 2a90 	vmov	r2, s15
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005492:	e008      	b.n	80054a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	609a      	str	r2, [r3, #8]
}
 80054a6:	bf00      	nop
 80054a8:	3724      	adds	r7, #36	; 0x24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	58024400 	.word	0x58024400
 80054b8:	03d09000 	.word	0x03d09000
 80054bc:	46000000 	.word	0x46000000
 80054c0:	4c742400 	.word	0x4c742400
 80054c4:	4a742400 	.word	0x4a742400
 80054c8:	4af42400 	.word	0x4af42400

080054cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b089      	sub	sp, #36	; 0x24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054d4:	4ba1      	ldr	r3, [pc, #644]	; (800575c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d8:	f003 0303 	and.w	r3, r3, #3
 80054dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80054de:	4b9f      	ldr	r3, [pc, #636]	; (800575c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	0d1b      	lsrs	r3, r3, #20
 80054e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80054ea:	4b9c      	ldr	r3, [pc, #624]	; (800575c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	0a1b      	lsrs	r3, r3, #8
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80054f6:	4b99      	ldr	r3, [pc, #612]	; (800575c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fa:	08db      	lsrs	r3, r3, #3
 80054fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	fb02 f303 	mul.w	r3, r2, r3
 8005506:	ee07 3a90 	vmov	s15, r3
 800550a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8111 	beq.w	800573c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b02      	cmp	r3, #2
 800551e:	f000 8083 	beq.w	8005628 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b02      	cmp	r3, #2
 8005526:	f200 80a1 	bhi.w	800566c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d056      	beq.n	80055e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005536:	e099      	b.n	800566c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005538:	4b88      	ldr	r3, [pc, #544]	; (800575c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b00      	cmp	r3, #0
 8005542:	d02d      	beq.n	80055a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005544:	4b85      	ldr	r3, [pc, #532]	; (800575c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	08db      	lsrs	r3, r3, #3
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	4a84      	ldr	r2, [pc, #528]	; (8005760 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005550:	fa22 f303 	lsr.w	r3, r2, r3
 8005554:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	ee07 3a90 	vmov	s15, r3
 800555c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	ee07 3a90 	vmov	s15, r3
 8005566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800556e:	4b7b      	ldr	r3, [pc, #492]	; (800575c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800557e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005582:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005764 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800558a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800558e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800559e:	e087      	b.n	80056b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005768 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80055ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055b2:	4b6a      	ldr	r3, [pc, #424]	; (800575c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ba:	ee07 3a90 	vmov	s15, r3
 80055be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005764 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055e2:	e065      	b.n	80056b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	ee07 3a90 	vmov	s15, r3
 80055ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800576c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055f6:	4b59      	ldr	r3, [pc, #356]	; (800575c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005606:	ed97 6a03 	vldr	s12, [r7, #12]
 800560a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005764 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800560e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800561a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800561e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005626:	e043      	b.n	80056b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005770 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800563a:	4b48      	ldr	r3, [pc, #288]	; (800575c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800564a:	ed97 6a03 	vldr	s12, [r7, #12]
 800564e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005764 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800565a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800565e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005666:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800566a:	e021      	b.n	80056b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005676:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800576c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800567a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800567e:	4b37      	ldr	r3, [pc, #220]	; (800575c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800568e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005692:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005764 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800569a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800569e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80056b0:	4b2a      	ldr	r3, [pc, #168]	; (800575c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	0a5b      	lsrs	r3, r3, #9
 80056b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ba:	ee07 3a90 	vmov	s15, r3
 80056be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80056ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056d6:	ee17 2a90 	vmov	r2, s15
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80056de:	4b1f      	ldr	r3, [pc, #124]	; (800575c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	0c1b      	lsrs	r3, r3, #16
 80056e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056e8:	ee07 3a90 	vmov	s15, r3
 80056ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80056fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005704:	ee17 2a90 	vmov	r2, s15
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800570c:	4b13      	ldr	r3, [pc, #76]	; (800575c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	0e1b      	lsrs	r3, r3, #24
 8005712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005716:	ee07 3a90 	vmov	s15, r3
 800571a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005722:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005726:	edd7 6a07 	vldr	s13, [r7, #28]
 800572a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800572e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005732:	ee17 2a90 	vmov	r2, s15
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800573a:	e008      	b.n	800574e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	609a      	str	r2, [r3, #8]
}
 800574e:	bf00      	nop
 8005750:	3724      	adds	r7, #36	; 0x24
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	58024400 	.word	0x58024400
 8005760:	03d09000 	.word	0x03d09000
 8005764:	46000000 	.word	0x46000000
 8005768:	4c742400 	.word	0x4c742400
 800576c:	4a742400 	.word	0x4a742400
 8005770:	4af42400 	.word	0x4af42400

08005774 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005782:	4b53      	ldr	r3, [pc, #332]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	2b03      	cmp	r3, #3
 800578c:	d101      	bne.n	8005792 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e099      	b.n	80058c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005792:	4b4f      	ldr	r3, [pc, #316]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a4e      	ldr	r2, [pc, #312]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 8005798:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800579c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800579e:	f7fc fae7 	bl	8001d70 <HAL_GetTick>
 80057a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80057a4:	e008      	b.n	80057b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80057a6:	f7fc fae3 	bl	8001d70 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e086      	b.n	80058c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80057b8:	4b45      	ldr	r3, [pc, #276]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1f0      	bne.n	80057a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80057c4:	4b42      	ldr	r3, [pc, #264]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	031b      	lsls	r3, r3, #12
 80057d2:	493f      	ldr	r1, [pc, #252]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	628b      	str	r3, [r1, #40]	; 0x28
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	3b01      	subs	r3, #1
 80057de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	025b      	lsls	r3, r3, #9
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	041b      	lsls	r3, r3, #16
 80057f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	3b01      	subs	r3, #1
 8005802:	061b      	lsls	r3, r3, #24
 8005804:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005808:	4931      	ldr	r1, [pc, #196]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 800580a:	4313      	orrs	r3, r2
 800580c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800580e:	4b30      	ldr	r3, [pc, #192]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 8005810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005812:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	492d      	ldr	r1, [pc, #180]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 800581c:	4313      	orrs	r3, r2
 800581e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005820:	4b2b      	ldr	r3, [pc, #172]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	f023 0220 	bic.w	r2, r3, #32
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	4928      	ldr	r1, [pc, #160]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 800582e:	4313      	orrs	r3, r2
 8005830:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005832:	4b27      	ldr	r3, [pc, #156]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	4a26      	ldr	r2, [pc, #152]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 8005838:	f023 0310 	bic.w	r3, r3, #16
 800583c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800583e:	4b24      	ldr	r3, [pc, #144]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 8005840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005842:	4b24      	ldr	r3, [pc, #144]	; (80058d4 <RCCEx_PLL2_Config+0x160>)
 8005844:	4013      	ands	r3, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	69d2      	ldr	r2, [r2, #28]
 800584a:	00d2      	lsls	r2, r2, #3
 800584c:	4920      	ldr	r1, [pc, #128]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 800584e:	4313      	orrs	r3, r2
 8005850:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005852:	4b1f      	ldr	r3, [pc, #124]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	4a1e      	ldr	r2, [pc, #120]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 8005858:	f043 0310 	orr.w	r3, r3, #16
 800585c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d106      	bne.n	8005872 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005864:	4b1a      	ldr	r3, [pc, #104]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	4a19      	ldr	r2, [pc, #100]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 800586a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800586e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005870:	e00f      	b.n	8005892 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d106      	bne.n	8005886 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005878:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	4a14      	ldr	r2, [pc, #80]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 800587e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005882:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005884:	e005      	b.n	8005892 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005886:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 8005888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588a:	4a11      	ldr	r2, [pc, #68]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 800588c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005890:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005892:	4b0f      	ldr	r3, [pc, #60]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a0e      	ldr	r2, [pc, #56]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 8005898:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800589c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800589e:	f7fc fa67 	bl	8001d70 <HAL_GetTick>
 80058a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80058a4:	e008      	b.n	80058b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80058a6:	f7fc fa63 	bl	8001d70 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e006      	b.n	80058c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80058b8:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <RCCEx_PLL2_Config+0x15c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0f0      	beq.n	80058a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	58024400 	.word	0x58024400
 80058d4:	ffff0007 	.word	0xffff0007

080058d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058e6:	4b53      	ldr	r3, [pc, #332]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d101      	bne.n	80058f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e099      	b.n	8005a2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80058f6:	4b4f      	ldr	r3, [pc, #316]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a4e      	ldr	r2, [pc, #312]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 80058fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005902:	f7fc fa35 	bl	8001d70 <HAL_GetTick>
 8005906:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005908:	e008      	b.n	800591c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800590a:	f7fc fa31 	bl	8001d70 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e086      	b.n	8005a2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800591c:	4b45      	ldr	r3, [pc, #276]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1f0      	bne.n	800590a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005928:	4b42      	ldr	r3, [pc, #264]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 800592a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	051b      	lsls	r3, r3, #20
 8005936:	493f      	ldr	r1, [pc, #252]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 8005938:	4313      	orrs	r3, r2
 800593a:	628b      	str	r3, [r1, #40]	; 0x28
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	3b01      	subs	r3, #1
 8005942:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	3b01      	subs	r3, #1
 800594c:	025b      	lsls	r3, r3, #9
 800594e:	b29b      	uxth	r3, r3
 8005950:	431a      	orrs	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	3b01      	subs	r3, #1
 8005958:	041b      	lsls	r3, r3, #16
 800595a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	3b01      	subs	r3, #1
 8005966:	061b      	lsls	r3, r3, #24
 8005968:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800596c:	4931      	ldr	r1, [pc, #196]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 800596e:	4313      	orrs	r3, r2
 8005970:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005972:	4b30      	ldr	r3, [pc, #192]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	492d      	ldr	r1, [pc, #180]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 8005980:	4313      	orrs	r3, r2
 8005982:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005984:	4b2b      	ldr	r3, [pc, #172]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	4928      	ldr	r1, [pc, #160]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 8005992:	4313      	orrs	r3, r2
 8005994:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005996:	4b27      	ldr	r3, [pc, #156]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599a:	4a26      	ldr	r2, [pc, #152]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 800599c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80059a2:	4b24      	ldr	r3, [pc, #144]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 80059a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059a6:	4b24      	ldr	r3, [pc, #144]	; (8005a38 <RCCEx_PLL3_Config+0x160>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	69d2      	ldr	r2, [r2, #28]
 80059ae:	00d2      	lsls	r2, r2, #3
 80059b0:	4920      	ldr	r1, [pc, #128]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80059b6:	4b1f      	ldr	r3, [pc, #124]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	4a1e      	ldr	r2, [pc, #120]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 80059bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80059c8:	4b1a      	ldr	r3, [pc, #104]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	4a19      	ldr	r2, [pc, #100]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 80059ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80059d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059d4:	e00f      	b.n	80059f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d106      	bne.n	80059ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80059dc:	4b15      	ldr	r3, [pc, #84]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	4a14      	ldr	r2, [pc, #80]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 80059e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80059e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059e8:	e005      	b.n	80059f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80059ea:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 80059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ee:	4a11      	ldr	r2, [pc, #68]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 80059f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80059f6:	4b0f      	ldr	r3, [pc, #60]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a0e      	ldr	r2, [pc, #56]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 80059fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a02:	f7fc f9b5 	bl	8001d70 <HAL_GetTick>
 8005a06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a08:	e008      	b.n	8005a1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005a0a:	f7fc f9b1 	bl	8001d70 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e006      	b.n	8005a2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a1c:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <RCCEx_PLL3_Config+0x15c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0f0      	beq.n	8005a0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	58024400 	.word	0x58024400
 8005a38:	ffff0007 	.word	0xffff0007

08005a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e049      	b.n	8005ae2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fb fdda 	bl	800161c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3304      	adds	r3, #4
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	f000 fb26 	bl	80060cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e08f      	b.n	8005c20 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d106      	bne.n	8005b1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7fb fd31 	bl	800157c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6899      	ldr	r1, [r3, #8]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	4b3e      	ldr	r3, [pc, #248]	; (8005c28 <HAL_TIM_Encoder_Init+0x13c>)
 8005b2e:	400b      	ands	r3, r1
 8005b30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	f000 fac5 	bl	80060cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4b31      	ldr	r3, [pc, #196]	; (8005c2c <HAL_TIM_Encoder_Init+0x140>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	021b      	lsls	r3, r3, #8
 8005b76:	4313      	orrs	r3, r2
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4b2b      	ldr	r3, [pc, #172]	; (8005c30 <HAL_TIM_Encoder_Init+0x144>)
 8005b82:	4013      	ands	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4b2a      	ldr	r3, [pc, #168]	; (8005c34 <HAL_TIM_Encoder_Init+0x148>)
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	011a      	lsls	r2, r3, #4
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	031b      	lsls	r3, r3, #12
 8005bac:	4313      	orrs	r3, r2
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005bba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005bc2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	fffebff8 	.word	0xfffebff8
 8005c2c:	fffffcfc 	.word	0xfffffcfc
 8005c30:	fffff3f3 	.word	0xfffff3f3
 8005c34:	ffff0f0f 	.word	0xffff0f0f

08005c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d122      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d11b      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f06f 0202 	mvn.w	r2, #2
 8005c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fa08 	bl	8006090 <HAL_TIM_IC_CaptureCallback>
 8005c80:	e005      	b.n	8005c8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f9fa 	bl	800607c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fa0b 	bl	80060a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f003 0304 	and.w	r3, r3, #4
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d122      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d11b      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0204 	mvn.w	r2, #4
 8005cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f9de 	bl	8006090 <HAL_TIM_IC_CaptureCallback>
 8005cd4:	e005      	b.n	8005ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f9d0 	bl	800607c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f9e1 	bl	80060a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0308 	and.w	r3, r3, #8
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d122      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d11b      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f06f 0208 	mvn.w	r2, #8
 8005d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2204      	movs	r2, #4
 8005d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f9b4 	bl	8006090 <HAL_TIM_IC_CaptureCallback>
 8005d28:	e005      	b.n	8005d36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f9a6 	bl	800607c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f9b7 	bl	80060a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0310 	and.w	r3, r3, #16
 8005d46:	2b10      	cmp	r3, #16
 8005d48:	d122      	bne.n	8005d90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f003 0310 	and.w	r3, r3, #16
 8005d54:	2b10      	cmp	r3, #16
 8005d56:	d11b      	bne.n	8005d90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0210 	mvn.w	r2, #16
 8005d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2208      	movs	r2, #8
 8005d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f98a 	bl	8006090 <HAL_TIM_IC_CaptureCallback>
 8005d7c:	e005      	b.n	8005d8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f97c 	bl	800607c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f98d 	bl	80060a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d10e      	bne.n	8005dbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d107      	bne.n	8005dbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f06f 0201 	mvn.w	r2, #1
 8005db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f956 	bl	8006068 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc6:	2b80      	cmp	r3, #128	; 0x80
 8005dc8:	d10e      	bne.n	8005de8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd4:	2b80      	cmp	r3, #128	; 0x80
 8005dd6:	d107      	bne.n	8005de8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fb42 	bl	800646c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df6:	d10e      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e02:	2b80      	cmp	r3, #128	; 0x80
 8005e04:	d107      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fb35 	bl	8006480 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e20:	2b40      	cmp	r3, #64	; 0x40
 8005e22:	d10e      	bne.n	8005e42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	d107      	bne.n	8005e42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f93b 	bl	80060b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	d10e      	bne.n	8005e6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d107      	bne.n	8005e6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f06f 0220 	mvn.w	r2, #32
 8005e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 faf5 	bl	8006458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e6e:	bf00      	nop
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_TIM_ConfigClockSource+0x1c>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e0dc      	b.n	800604e <HAL_TIM_ConfigClockSource+0x1d6>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	4b6a      	ldr	r3, [pc, #424]	; (8006058 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a64      	ldr	r2, [pc, #400]	; (800605c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	f000 80a9 	beq.w	8006022 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ed0:	4a62      	ldr	r2, [pc, #392]	; (800605c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	f200 80ae 	bhi.w	8006034 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ed8:	4a61      	ldr	r2, [pc, #388]	; (8006060 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	f000 80a1 	beq.w	8006022 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ee0:	4a5f      	ldr	r2, [pc, #380]	; (8006060 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	f200 80a6 	bhi.w	8006034 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ee8:	4a5e      	ldr	r2, [pc, #376]	; (8006064 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	f000 8099 	beq.w	8006022 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ef0:	4a5c      	ldr	r2, [pc, #368]	; (8006064 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	f200 809e 	bhi.w	8006034 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ef8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005efc:	f000 8091 	beq.w	8006022 <HAL_TIM_ConfigClockSource+0x1aa>
 8005f00:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005f04:	f200 8096 	bhi.w	8006034 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f0c:	f000 8089 	beq.w	8006022 <HAL_TIM_ConfigClockSource+0x1aa>
 8005f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f14:	f200 808e 	bhi.w	8006034 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f1c:	d03e      	beq.n	8005f9c <HAL_TIM_ConfigClockSource+0x124>
 8005f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f22:	f200 8087 	bhi.w	8006034 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2a:	f000 8086 	beq.w	800603a <HAL_TIM_ConfigClockSource+0x1c2>
 8005f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f32:	d87f      	bhi.n	8006034 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f34:	2b70      	cmp	r3, #112	; 0x70
 8005f36:	d01a      	beq.n	8005f6e <HAL_TIM_ConfigClockSource+0xf6>
 8005f38:	2b70      	cmp	r3, #112	; 0x70
 8005f3a:	d87b      	bhi.n	8006034 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f3c:	2b60      	cmp	r3, #96	; 0x60
 8005f3e:	d050      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x16a>
 8005f40:	2b60      	cmp	r3, #96	; 0x60
 8005f42:	d877      	bhi.n	8006034 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f44:	2b50      	cmp	r3, #80	; 0x50
 8005f46:	d03c      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x14a>
 8005f48:	2b50      	cmp	r3, #80	; 0x50
 8005f4a:	d873      	bhi.n	8006034 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f4c:	2b40      	cmp	r3, #64	; 0x40
 8005f4e:	d058      	beq.n	8006002 <HAL_TIM_ConfigClockSource+0x18a>
 8005f50:	2b40      	cmp	r3, #64	; 0x40
 8005f52:	d86f      	bhi.n	8006034 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f54:	2b30      	cmp	r3, #48	; 0x30
 8005f56:	d064      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0x1aa>
 8005f58:	2b30      	cmp	r3, #48	; 0x30
 8005f5a:	d86b      	bhi.n	8006034 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	d060      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0x1aa>
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	d867      	bhi.n	8006034 <HAL_TIM_ConfigClockSource+0x1bc>
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d05c      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0x1aa>
 8005f68:	2b10      	cmp	r3, #16
 8005f6a:	d05a      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0x1aa>
 8005f6c:	e062      	b.n	8006034 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f7e:	f000 f9bd 	bl	80062fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	609a      	str	r2, [r3, #8]
      break;
 8005f9a:	e04f      	b.n	800603c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fac:	f000 f9a6 	bl	80062fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fbe:	609a      	str	r2, [r3, #8]
      break;
 8005fc0:	e03c      	b.n	800603c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f000 f916 	bl	8006200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2150      	movs	r1, #80	; 0x50
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 f970 	bl	80062c0 <TIM_ITRx_SetConfig>
      break;
 8005fe0:	e02c      	b.n	800603c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f000 f935 	bl	800625e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2160      	movs	r1, #96	; 0x60
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 f960 	bl	80062c0 <TIM_ITRx_SetConfig>
      break;
 8006000:	e01c      	b.n	800603c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800600e:	461a      	mov	r2, r3
 8006010:	f000 f8f6 	bl	8006200 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2140      	movs	r1, #64	; 0x40
 800601a:	4618      	mov	r0, r3
 800601c:	f000 f950 	bl	80062c0 <TIM_ITRx_SetConfig>
      break;
 8006020:	e00c      	b.n	800603c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4619      	mov	r1, r3
 800602c:	4610      	mov	r0, r2
 800602e:	f000 f947 	bl	80062c0 <TIM_ITRx_SetConfig>
      break;
 8006032:	e003      	b.n	800603c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	73fb      	strb	r3, [r7, #15]
      break;
 8006038:	e000      	b.n	800603c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800603a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800604c:	7bfb      	ldrb	r3, [r7, #15]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	ffceff88 	.word	0xffceff88
 800605c:	00100040 	.word	0x00100040
 8006060:	00100030 	.word	0x00100030
 8006064:	00100020 	.word	0x00100020

08006068 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a40      	ldr	r2, [pc, #256]	; (80061e0 <TIM_Base_SetConfig+0x114>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d013      	beq.n	800610c <TIM_Base_SetConfig+0x40>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ea:	d00f      	beq.n	800610c <TIM_Base_SetConfig+0x40>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a3d      	ldr	r2, [pc, #244]	; (80061e4 <TIM_Base_SetConfig+0x118>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00b      	beq.n	800610c <TIM_Base_SetConfig+0x40>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a3c      	ldr	r2, [pc, #240]	; (80061e8 <TIM_Base_SetConfig+0x11c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d007      	beq.n	800610c <TIM_Base_SetConfig+0x40>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a3b      	ldr	r2, [pc, #236]	; (80061ec <TIM_Base_SetConfig+0x120>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d003      	beq.n	800610c <TIM_Base_SetConfig+0x40>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a3a      	ldr	r2, [pc, #232]	; (80061f0 <TIM_Base_SetConfig+0x124>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d108      	bne.n	800611e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a2f      	ldr	r2, [pc, #188]	; (80061e0 <TIM_Base_SetConfig+0x114>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d01f      	beq.n	8006166 <TIM_Base_SetConfig+0x9a>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612c:	d01b      	beq.n	8006166 <TIM_Base_SetConfig+0x9a>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a2c      	ldr	r2, [pc, #176]	; (80061e4 <TIM_Base_SetConfig+0x118>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d017      	beq.n	8006166 <TIM_Base_SetConfig+0x9a>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a2b      	ldr	r2, [pc, #172]	; (80061e8 <TIM_Base_SetConfig+0x11c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d013      	beq.n	8006166 <TIM_Base_SetConfig+0x9a>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a2a      	ldr	r2, [pc, #168]	; (80061ec <TIM_Base_SetConfig+0x120>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00f      	beq.n	8006166 <TIM_Base_SetConfig+0x9a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a29      	ldr	r2, [pc, #164]	; (80061f0 <TIM_Base_SetConfig+0x124>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00b      	beq.n	8006166 <TIM_Base_SetConfig+0x9a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a28      	ldr	r2, [pc, #160]	; (80061f4 <TIM_Base_SetConfig+0x128>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d007      	beq.n	8006166 <TIM_Base_SetConfig+0x9a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a27      	ldr	r2, [pc, #156]	; (80061f8 <TIM_Base_SetConfig+0x12c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d003      	beq.n	8006166 <TIM_Base_SetConfig+0x9a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a26      	ldr	r2, [pc, #152]	; (80061fc <TIM_Base_SetConfig+0x130>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d108      	bne.n	8006178 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800616c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a10      	ldr	r2, [pc, #64]	; (80061e0 <TIM_Base_SetConfig+0x114>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d00f      	beq.n	80061c4 <TIM_Base_SetConfig+0xf8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a12      	ldr	r2, [pc, #72]	; (80061f0 <TIM_Base_SetConfig+0x124>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00b      	beq.n	80061c4 <TIM_Base_SetConfig+0xf8>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a11      	ldr	r2, [pc, #68]	; (80061f4 <TIM_Base_SetConfig+0x128>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d007      	beq.n	80061c4 <TIM_Base_SetConfig+0xf8>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a10      	ldr	r2, [pc, #64]	; (80061f8 <TIM_Base_SetConfig+0x12c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d003      	beq.n	80061c4 <TIM_Base_SetConfig+0xf8>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a0f      	ldr	r2, [pc, #60]	; (80061fc <TIM_Base_SetConfig+0x130>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d103      	bne.n	80061cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	691a      	ldr	r2, [r3, #16]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	615a      	str	r2, [r3, #20]
}
 80061d2:	bf00      	nop
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40010000 	.word	0x40010000
 80061e4:	40000400 	.word	0x40000400
 80061e8:	40000800 	.word	0x40000800
 80061ec:	40000c00 	.word	0x40000c00
 80061f0:	40010400 	.word	0x40010400
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40014400 	.word	0x40014400
 80061fc:	40014800 	.word	0x40014800

08006200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	f023 0201 	bic.w	r2, r3, #1
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800622a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	4313      	orrs	r3, r2
 8006234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f023 030a 	bic.w	r3, r3, #10
 800623c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4313      	orrs	r3, r2
 8006244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	621a      	str	r2, [r3, #32]
}
 8006252:	bf00      	nop
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800625e:	b480      	push	{r7}
 8006260:	b087      	sub	sp, #28
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f023 0210 	bic.w	r2, r3, #16
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006288:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	031b      	lsls	r3, r3, #12
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800629a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	011b      	lsls	r3, r3, #4
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	621a      	str	r2, [r3, #32]
}
 80062b2:	bf00      	nop
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
	...

080062c0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4b09      	ldr	r3, [pc, #36]	; (80062f8 <TIM_ITRx_SetConfig+0x38>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	f043 0307 	orr.w	r3, r3, #7
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	609a      	str	r2, [r3, #8]
}
 80062ea:	bf00      	nop
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	ffcfff8f 	.word	0xffcfff8f

080062fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006316:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	021a      	lsls	r2, r3, #8
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	431a      	orrs	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4313      	orrs	r3, r2
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	609a      	str	r2, [r3, #8]
}
 8006330:	bf00      	nop
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006350:	2302      	movs	r3, #2
 8006352:	e06d      	b.n	8006430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a30      	ldr	r2, [pc, #192]	; (800643c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d004      	beq.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a2f      	ldr	r2, [pc, #188]	; (8006440 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d108      	bne.n	800639a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800638e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a20      	ldr	r2, [pc, #128]	; (800643c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d022      	beq.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c6:	d01d      	beq.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1d      	ldr	r2, [pc, #116]	; (8006444 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d018      	beq.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1c      	ldr	r2, [pc, #112]	; (8006448 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d013      	beq.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1a      	ldr	r2, [pc, #104]	; (800644c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00e      	beq.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a15      	ldr	r2, [pc, #84]	; (8006440 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d009      	beq.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a16      	ldr	r2, [pc, #88]	; (8006450 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d004      	beq.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a15      	ldr	r2, [pc, #84]	; (8006454 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d10c      	bne.n	800641e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800640a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	4313      	orrs	r3, r2
 8006414:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	40010000 	.word	0x40010000
 8006440:	40010400 	.word	0x40010400
 8006444:	40000400 	.word	0x40000400
 8006448:	40000800 	.word	0x40000800
 800644c:	40000c00 	.word	0x40000c00
 8006450:	40001800 	.word	0x40001800
 8006454:	40014000 	.word	0x40014000

08006458 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e042      	b.n	800652c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d106      	bne.n	80064be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7fb f8f7 	bl	80016ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2224      	movs	r2, #36	; 0x24
 80064c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0201 	bic.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fce0 	bl	8006e9c <UART_SetConfig>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d101      	bne.n	80064e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e022      	b.n	800652c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d002      	beq.n	80064f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 fb40 	bl	8007b74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006502:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006512:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 fbc7 	bl	8007cb8 <UART_CheckIdleState>
 800652a:	4603      	mov	r3, r0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08a      	sub	sp, #40	; 0x28
 8006538:	af02      	add	r7, sp, #8
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	603b      	str	r3, [r7, #0]
 8006540:	4613      	mov	r3, r2
 8006542:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654a:	2b20      	cmp	r3, #32
 800654c:	d17b      	bne.n	8006646 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_UART_Transmit+0x26>
 8006554:	88fb      	ldrh	r3, [r7, #6]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e074      	b.n	8006648 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2221      	movs	r2, #33	; 0x21
 800656a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800656e:	f7fb fbff 	bl	8001d70 <HAL_GetTick>
 8006572:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	88fa      	ldrh	r2, [r7, #6]
 8006578:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	88fa      	ldrh	r2, [r7, #6]
 8006580:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658c:	d108      	bne.n	80065a0 <HAL_UART_Transmit+0x6c>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d104      	bne.n	80065a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006596:	2300      	movs	r3, #0
 8006598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	61bb      	str	r3, [r7, #24]
 800659e:	e003      	b.n	80065a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065a4:	2300      	movs	r3, #0
 80065a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065a8:	e030      	b.n	800660c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2200      	movs	r2, #0
 80065b2:	2180      	movs	r1, #128	; 0x80
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f001 fc29 	bl	8007e0c <UART_WaitOnFlagUntilTimeout>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d005      	beq.n	80065cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e03d      	b.n	8006648 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10b      	bne.n	80065ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	3302      	adds	r3, #2
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	e007      	b.n	80065fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	781a      	ldrb	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	3301      	adds	r3, #1
 80065f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006600:	b29b      	uxth	r3, r3
 8006602:	3b01      	subs	r3, #1
 8006604:	b29a      	uxth	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006612:	b29b      	uxth	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1c8      	bne.n	80065aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	2200      	movs	r2, #0
 8006620:	2140      	movs	r1, #64	; 0x40
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f001 fbf2 	bl	8007e0c <UART_WaitOnFlagUntilTimeout>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d005      	beq.n	800663a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e006      	b.n	8006648 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2220      	movs	r2, #32
 800663e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	e000      	b.n	8006648 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006646:	2302      	movs	r3, #2
  }
}
 8006648:	4618      	mov	r0, r3
 800664a:	3720      	adds	r7, #32
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08a      	sub	sp, #40	; 0x28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	4613      	mov	r3, r2
 800665c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006664:	2b20      	cmp	r3, #32
 8006666:	d137      	bne.n	80066d8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <HAL_UART_Receive_IT+0x24>
 800666e:	88fb      	ldrh	r3, [r7, #6]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e030      	b.n	80066da <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a18      	ldr	r2, [pc, #96]	; (80066e4 <HAL_UART_Receive_IT+0x94>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d01f      	beq.n	80066c8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d018      	beq.n	80066c8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	613b      	str	r3, [r7, #16]
   return(result);
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	623b      	str	r3, [r7, #32]
 80066b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	69f9      	ldr	r1, [r7, #28]
 80066ba:	6a3a      	ldr	r2, [r7, #32]
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e6      	bne.n	8006696 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066c8:	88fb      	ldrh	r3, [r7, #6]
 80066ca:	461a      	mov	r2, r3
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f001 fc04 	bl	8007edc <UART_Start_Receive_IT>
 80066d4:	4603      	mov	r3, r0
 80066d6:	e000      	b.n	80066da <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066d8:	2302      	movs	r3, #2
  }
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3728      	adds	r7, #40	; 0x28
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	58000c00 	.word	0x58000c00

080066e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b0ba      	sub	sp, #232	; 0xe8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800670e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006712:	f640 030f 	movw	r3, #2063	; 0x80f
 8006716:	4013      	ands	r3, r2
 8006718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800671c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006720:	2b00      	cmp	r3, #0
 8006722:	d11b      	bne.n	800675c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006728:	f003 0320 	and.w	r3, r3, #32
 800672c:	2b00      	cmp	r3, #0
 800672e:	d015      	beq.n	800675c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006734:	f003 0320 	and.w	r3, r3, #32
 8006738:	2b00      	cmp	r3, #0
 800673a:	d105      	bne.n	8006748 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800673c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d009      	beq.n	800675c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 8377 	beq.w	8006e40 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
      }
      return;
 800675a:	e371      	b.n	8006e40 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800675c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 8123 	beq.w	80069ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006766:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800676a:	4b8d      	ldr	r3, [pc, #564]	; (80069a0 <HAL_UART_IRQHandler+0x2b8>)
 800676c:	4013      	ands	r3, r2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006772:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006776:	4b8b      	ldr	r3, [pc, #556]	; (80069a4 <HAL_UART_IRQHandler+0x2bc>)
 8006778:	4013      	ands	r3, r2
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 8116 	beq.w	80069ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d011      	beq.n	80067b0 <HAL_UART_IRQHandler+0xc8>
 800678c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00b      	beq.n	80067b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2201      	movs	r2, #1
 800679e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a6:	f043 0201 	orr.w	r2, r3, #1
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d011      	beq.n	80067e0 <HAL_UART_IRQHandler+0xf8>
 80067bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00b      	beq.n	80067e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2202      	movs	r2, #2
 80067ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d6:	f043 0204 	orr.w	r2, r3, #4
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d011      	beq.n	8006810 <HAL_UART_IRQHandler+0x128>
 80067ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00b      	beq.n	8006810 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2204      	movs	r2, #4
 80067fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006806:	f043 0202 	orr.w	r2, r3, #2
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006814:	f003 0308 	and.w	r3, r3, #8
 8006818:	2b00      	cmp	r3, #0
 800681a:	d017      	beq.n	800684c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800681c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b00      	cmp	r3, #0
 8006826:	d105      	bne.n	8006834 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006828:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800682c:	4b5c      	ldr	r3, [pc, #368]	; (80069a0 <HAL_UART_IRQHandler+0x2b8>)
 800682e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00b      	beq.n	800684c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2208      	movs	r2, #8
 800683a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006842:	f043 0208 	orr.w	r2, r3, #8
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800684c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006854:	2b00      	cmp	r3, #0
 8006856:	d012      	beq.n	800687e <HAL_UART_IRQHandler+0x196>
 8006858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800685c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00c      	beq.n	800687e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800686c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006874:	f043 0220 	orr.w	r2, r3, #32
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 82dd 	beq.w	8006e44 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800688a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d013      	beq.n	80068be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d105      	bne.n	80068ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d007      	beq.n	80068be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d2:	2b40      	cmp	r3, #64	; 0x40
 80068d4:	d005      	beq.n	80068e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d054      	beq.n	800698c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 fc1c 	bl	8008120 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f2:	2b40      	cmp	r3, #64	; 0x40
 80068f4:	d146      	bne.n	8006984 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3308      	adds	r3, #8
 80068fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800690c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3308      	adds	r3, #8
 800691e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006922:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800692e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800693a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1d9      	bne.n	80068f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006948:	2b00      	cmp	r3, #0
 800694a:	d017      	beq.n	800697c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006952:	4a15      	ldr	r2, [pc, #84]	; (80069a8 <HAL_UART_IRQHandler+0x2c0>)
 8006954:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800695c:	4618      	mov	r0, r3
 800695e:	f7fb fe65 	bl	800262c <HAL_DMA_Abort_IT>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d019      	beq.n	800699c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800696e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006976:	4610      	mov	r0, r2
 8006978:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697a:	e00f      	b.n	800699c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fa77 	bl	8006e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006982:	e00b      	b.n	800699c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fa73 	bl	8006e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800698a:	e007      	b.n	800699c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fa6f 	bl	8006e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800699a:	e253      	b.n	8006e44 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800699c:	bf00      	nop
    return;
 800699e:	e251      	b.n	8006e44 <HAL_UART_IRQHandler+0x75c>
 80069a0:	10000001 	.word	0x10000001
 80069a4:	04000120 	.word	0x04000120
 80069a8:	080081ed 	.word	0x080081ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	f040 81e7 	bne.w	8006d84 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ba:	f003 0310 	and.w	r3, r3, #16
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 81e0 	beq.w	8006d84 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069c8:	f003 0310 	and.w	r3, r3, #16
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 81d9 	beq.w	8006d84 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2210      	movs	r2, #16
 80069d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e4:	2b40      	cmp	r3, #64	; 0x40
 80069e6:	f040 8151 	bne.w	8006c8c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a96      	ldr	r2, [pc, #600]	; (8006c4c <HAL_UART_IRQHandler+0x564>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d068      	beq.n	8006aca <HAL_UART_IRQHandler+0x3e2>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a93      	ldr	r2, [pc, #588]	; (8006c50 <HAL_UART_IRQHandler+0x568>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d061      	beq.n	8006aca <HAL_UART_IRQHandler+0x3e2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a91      	ldr	r2, [pc, #580]	; (8006c54 <HAL_UART_IRQHandler+0x56c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d05a      	beq.n	8006aca <HAL_UART_IRQHandler+0x3e2>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a8e      	ldr	r2, [pc, #568]	; (8006c58 <HAL_UART_IRQHandler+0x570>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d053      	beq.n	8006aca <HAL_UART_IRQHandler+0x3e2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a8c      	ldr	r2, [pc, #560]	; (8006c5c <HAL_UART_IRQHandler+0x574>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d04c      	beq.n	8006aca <HAL_UART_IRQHandler+0x3e2>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a89      	ldr	r2, [pc, #548]	; (8006c60 <HAL_UART_IRQHandler+0x578>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d045      	beq.n	8006aca <HAL_UART_IRQHandler+0x3e2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a87      	ldr	r2, [pc, #540]	; (8006c64 <HAL_UART_IRQHandler+0x57c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d03e      	beq.n	8006aca <HAL_UART_IRQHandler+0x3e2>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a84      	ldr	r2, [pc, #528]	; (8006c68 <HAL_UART_IRQHandler+0x580>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d037      	beq.n	8006aca <HAL_UART_IRQHandler+0x3e2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a82      	ldr	r2, [pc, #520]	; (8006c6c <HAL_UART_IRQHandler+0x584>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d030      	beq.n	8006aca <HAL_UART_IRQHandler+0x3e2>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a7f      	ldr	r2, [pc, #508]	; (8006c70 <HAL_UART_IRQHandler+0x588>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d029      	beq.n	8006aca <HAL_UART_IRQHandler+0x3e2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a7d      	ldr	r2, [pc, #500]	; (8006c74 <HAL_UART_IRQHandler+0x58c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d022      	beq.n	8006aca <HAL_UART_IRQHandler+0x3e2>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a7a      	ldr	r2, [pc, #488]	; (8006c78 <HAL_UART_IRQHandler+0x590>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d01b      	beq.n	8006aca <HAL_UART_IRQHandler+0x3e2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a78      	ldr	r2, [pc, #480]	; (8006c7c <HAL_UART_IRQHandler+0x594>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d014      	beq.n	8006aca <HAL_UART_IRQHandler+0x3e2>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a75      	ldr	r2, [pc, #468]	; (8006c80 <HAL_UART_IRQHandler+0x598>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00d      	beq.n	8006aca <HAL_UART_IRQHandler+0x3e2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a73      	ldr	r2, [pc, #460]	; (8006c84 <HAL_UART_IRQHandler+0x59c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d006      	beq.n	8006aca <HAL_UART_IRQHandler+0x3e2>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a70      	ldr	r2, [pc, #448]	; (8006c88 <HAL_UART_IRQHandler+0x5a0>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d106      	bne.n	8006ad8 <HAL_UART_IRQHandler+0x3f0>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	e005      	b.n	8006ae4 <HAL_UART_IRQHandler+0x3fc>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ae8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 81ab 	beq.w	8006e48 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006af8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006afc:	429a      	cmp	r2, r3
 8006afe:	f080 81a3 	bcs.w	8006e48 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b18:	f000 8087 	beq.w	8006c2a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1da      	bne.n	8006b1c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3308      	adds	r3, #8
 8006b6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b78:	f023 0301 	bic.w	r3, r3, #1
 8006b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3308      	adds	r3, #8
 8006b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e1      	bne.n	8006b66 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bac:	e853 3f00 	ldrex	r3, [r3]
 8006bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006bc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006bcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e3      	bne.n	8006ba2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bf8:	f023 0310 	bic.w	r3, r3, #16
 8006bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e4      	bne.n	8006be8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fb f9e3 	bl	8001ff0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f91d 	bl	8006e84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c4a:	e0fd      	b.n	8006e48 <HAL_UART_IRQHandler+0x760>
 8006c4c:	40020010 	.word	0x40020010
 8006c50:	40020028 	.word	0x40020028
 8006c54:	40020040 	.word	0x40020040
 8006c58:	40020058 	.word	0x40020058
 8006c5c:	40020070 	.word	0x40020070
 8006c60:	40020088 	.word	0x40020088
 8006c64:	400200a0 	.word	0x400200a0
 8006c68:	400200b8 	.word	0x400200b8
 8006c6c:	40020410 	.word	0x40020410
 8006c70:	40020428 	.word	0x40020428
 8006c74:	40020440 	.word	0x40020440
 8006c78:	40020458 	.word	0x40020458
 8006c7c:	40020470 	.word	0x40020470
 8006c80:	40020488 	.word	0x40020488
 8006c84:	400204a0 	.word	0x400204a0
 8006c88:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 80cf 	beq.w	8006e4c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006cae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f000 80ca 	beq.w	8006e4c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc0:	e853 3f00 	ldrex	r3, [r3]
 8006cc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ccc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cda:	647b      	str	r3, [r7, #68]	; 0x44
 8006cdc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ce0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e4      	bne.n	8006cb8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	623b      	str	r3, [r7, #32]
   return(result);
 8006cfe:	6a3a      	ldr	r2, [r7, #32]
 8006d00:	4b55      	ldr	r3, [pc, #340]	; (8006e58 <HAL_UART_IRQHandler+0x770>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3308      	adds	r3, #8
 8006d0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d12:	633a      	str	r2, [r7, #48]	; 0x30
 8006d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e3      	bne.n	8006cee <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	e853 3f00 	ldrex	r3, [r3]
 8006d46:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 0310 	bic.w	r3, r3, #16
 8006d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d5c:	61fb      	str	r3, [r7, #28]
 8006d5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	69b9      	ldr	r1, [r7, #24]
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	e841 2300 	strex	r3, r2, [r1]
 8006d68:	617b      	str	r3, [r7, #20]
   return(result);
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1e4      	bne.n	8006d3a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f881 	bl	8006e84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d82:	e063      	b.n	8006e4c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00e      	beq.n	8006dae <HAL_UART_IRQHandler+0x6c6>
 8006d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d008      	beq.n	8006dae <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006da4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 ff7e 	bl	8008ca8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006dac:	e051      	b.n	8006e52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d014      	beq.n	8006de4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d105      	bne.n	8006dd2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d008      	beq.n	8006de4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d03a      	beq.n	8006e50 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	4798      	blx	r3
    }
    return;
 8006de2:	e035      	b.n	8006e50 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d009      	beq.n	8006e04 <HAL_UART_IRQHandler+0x71c>
 8006df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 fa0b 	bl	8008218 <UART_EndTransmit_IT>
    return;
 8006e02:	e026      	b.n	8006e52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d009      	beq.n	8006e24 <HAL_UART_IRQHandler+0x73c>
 8006e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 ff57 	bl	8008cd0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e22:	e016      	b.n	8006e52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d010      	beq.n	8006e52 <HAL_UART_IRQHandler+0x76a>
 8006e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	da0c      	bge.n	8006e52 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 ff3f 	bl	8008cbc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e3e:	e008      	b.n	8006e52 <HAL_UART_IRQHandler+0x76a>
      return;
 8006e40:	bf00      	nop
 8006e42:	e006      	b.n	8006e52 <HAL_UART_IRQHandler+0x76a>
    return;
 8006e44:	bf00      	nop
 8006e46:	e004      	b.n	8006e52 <HAL_UART_IRQHandler+0x76a>
      return;
 8006e48:	bf00      	nop
 8006e4a:	e002      	b.n	8006e52 <HAL_UART_IRQHandler+0x76a>
      return;
 8006e4c:	bf00      	nop
 8006e4e:	e000      	b.n	8006e52 <HAL_UART_IRQHandler+0x76a>
    return;
 8006e50:	bf00      	nop
  }
}
 8006e52:	37e8      	adds	r7, #232	; 0xe8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	effffffe 	.word	0xeffffffe

08006e5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ea0:	b092      	sub	sp, #72	; 0x48
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	4bbe      	ldr	r3, [pc, #760]	; (80071c4 <UART_SetConfig+0x328>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	6812      	ldr	r2, [r2, #0]
 8006ed2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ed4:	430b      	orrs	r3, r1
 8006ed6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	68da      	ldr	r2, [r3, #12]
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4ab3      	ldr	r2, [pc, #716]	; (80071c8 <UART_SetConfig+0x32c>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d004      	beq.n	8006f08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f04:	4313      	orrs	r3, r2
 8006f06:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689a      	ldr	r2, [r3, #8]
 8006f0e:	4baf      	ldr	r3, [pc, #700]	; (80071cc <UART_SetConfig+0x330>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	6812      	ldr	r2, [r2, #0]
 8006f16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f18:	430b      	orrs	r3, r1
 8006f1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	f023 010f 	bic.w	r1, r3, #15
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4aa6      	ldr	r2, [pc, #664]	; (80071d0 <UART_SetConfig+0x334>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d177      	bne.n	800702c <UART_SetConfig+0x190>
 8006f3c:	4ba5      	ldr	r3, [pc, #660]	; (80071d4 <UART_SetConfig+0x338>)
 8006f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f44:	2b28      	cmp	r3, #40	; 0x28
 8006f46:	d86d      	bhi.n	8007024 <UART_SetConfig+0x188>
 8006f48:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <UART_SetConfig+0xb4>)
 8006f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4e:	bf00      	nop
 8006f50:	08006ff5 	.word	0x08006ff5
 8006f54:	08007025 	.word	0x08007025
 8006f58:	08007025 	.word	0x08007025
 8006f5c:	08007025 	.word	0x08007025
 8006f60:	08007025 	.word	0x08007025
 8006f64:	08007025 	.word	0x08007025
 8006f68:	08007025 	.word	0x08007025
 8006f6c:	08007025 	.word	0x08007025
 8006f70:	08006ffd 	.word	0x08006ffd
 8006f74:	08007025 	.word	0x08007025
 8006f78:	08007025 	.word	0x08007025
 8006f7c:	08007025 	.word	0x08007025
 8006f80:	08007025 	.word	0x08007025
 8006f84:	08007025 	.word	0x08007025
 8006f88:	08007025 	.word	0x08007025
 8006f8c:	08007025 	.word	0x08007025
 8006f90:	08007005 	.word	0x08007005
 8006f94:	08007025 	.word	0x08007025
 8006f98:	08007025 	.word	0x08007025
 8006f9c:	08007025 	.word	0x08007025
 8006fa0:	08007025 	.word	0x08007025
 8006fa4:	08007025 	.word	0x08007025
 8006fa8:	08007025 	.word	0x08007025
 8006fac:	08007025 	.word	0x08007025
 8006fb0:	0800700d 	.word	0x0800700d
 8006fb4:	08007025 	.word	0x08007025
 8006fb8:	08007025 	.word	0x08007025
 8006fbc:	08007025 	.word	0x08007025
 8006fc0:	08007025 	.word	0x08007025
 8006fc4:	08007025 	.word	0x08007025
 8006fc8:	08007025 	.word	0x08007025
 8006fcc:	08007025 	.word	0x08007025
 8006fd0:	08007015 	.word	0x08007015
 8006fd4:	08007025 	.word	0x08007025
 8006fd8:	08007025 	.word	0x08007025
 8006fdc:	08007025 	.word	0x08007025
 8006fe0:	08007025 	.word	0x08007025
 8006fe4:	08007025 	.word	0x08007025
 8006fe8:	08007025 	.word	0x08007025
 8006fec:	08007025 	.word	0x08007025
 8006ff0:	0800701d 	.word	0x0800701d
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ffa:	e326      	b.n	800764a <UART_SetConfig+0x7ae>
 8006ffc:	2304      	movs	r3, #4
 8006ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007002:	e322      	b.n	800764a <UART_SetConfig+0x7ae>
 8007004:	2308      	movs	r3, #8
 8007006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800700a:	e31e      	b.n	800764a <UART_SetConfig+0x7ae>
 800700c:	2310      	movs	r3, #16
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007012:	e31a      	b.n	800764a <UART_SetConfig+0x7ae>
 8007014:	2320      	movs	r3, #32
 8007016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701a:	e316      	b.n	800764a <UART_SetConfig+0x7ae>
 800701c:	2340      	movs	r3, #64	; 0x40
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007022:	e312      	b.n	800764a <UART_SetConfig+0x7ae>
 8007024:	2380      	movs	r3, #128	; 0x80
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702a:	e30e      	b.n	800764a <UART_SetConfig+0x7ae>
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a69      	ldr	r2, [pc, #420]	; (80071d8 <UART_SetConfig+0x33c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d130      	bne.n	8007098 <UART_SetConfig+0x1fc>
 8007036:	4b67      	ldr	r3, [pc, #412]	; (80071d4 <UART_SetConfig+0x338>)
 8007038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	2b05      	cmp	r3, #5
 8007040:	d826      	bhi.n	8007090 <UART_SetConfig+0x1f4>
 8007042:	a201      	add	r2, pc, #4	; (adr r2, 8007048 <UART_SetConfig+0x1ac>)
 8007044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007048:	08007061 	.word	0x08007061
 800704c:	08007069 	.word	0x08007069
 8007050:	08007071 	.word	0x08007071
 8007054:	08007079 	.word	0x08007079
 8007058:	08007081 	.word	0x08007081
 800705c:	08007089 	.word	0x08007089
 8007060:	2300      	movs	r3, #0
 8007062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007066:	e2f0      	b.n	800764a <UART_SetConfig+0x7ae>
 8007068:	2304      	movs	r3, #4
 800706a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800706e:	e2ec      	b.n	800764a <UART_SetConfig+0x7ae>
 8007070:	2308      	movs	r3, #8
 8007072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007076:	e2e8      	b.n	800764a <UART_SetConfig+0x7ae>
 8007078:	2310      	movs	r3, #16
 800707a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800707e:	e2e4      	b.n	800764a <UART_SetConfig+0x7ae>
 8007080:	2320      	movs	r3, #32
 8007082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007086:	e2e0      	b.n	800764a <UART_SetConfig+0x7ae>
 8007088:	2340      	movs	r3, #64	; 0x40
 800708a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800708e:	e2dc      	b.n	800764a <UART_SetConfig+0x7ae>
 8007090:	2380      	movs	r3, #128	; 0x80
 8007092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007096:	e2d8      	b.n	800764a <UART_SetConfig+0x7ae>
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a4f      	ldr	r2, [pc, #316]	; (80071dc <UART_SetConfig+0x340>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d130      	bne.n	8007104 <UART_SetConfig+0x268>
 80070a2:	4b4c      	ldr	r3, [pc, #304]	; (80071d4 <UART_SetConfig+0x338>)
 80070a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	2b05      	cmp	r3, #5
 80070ac:	d826      	bhi.n	80070fc <UART_SetConfig+0x260>
 80070ae:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <UART_SetConfig+0x218>)
 80070b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b4:	080070cd 	.word	0x080070cd
 80070b8:	080070d5 	.word	0x080070d5
 80070bc:	080070dd 	.word	0x080070dd
 80070c0:	080070e5 	.word	0x080070e5
 80070c4:	080070ed 	.word	0x080070ed
 80070c8:	080070f5 	.word	0x080070f5
 80070cc:	2300      	movs	r3, #0
 80070ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070d2:	e2ba      	b.n	800764a <UART_SetConfig+0x7ae>
 80070d4:	2304      	movs	r3, #4
 80070d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070da:	e2b6      	b.n	800764a <UART_SetConfig+0x7ae>
 80070dc:	2308      	movs	r3, #8
 80070de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070e2:	e2b2      	b.n	800764a <UART_SetConfig+0x7ae>
 80070e4:	2310      	movs	r3, #16
 80070e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ea:	e2ae      	b.n	800764a <UART_SetConfig+0x7ae>
 80070ec:	2320      	movs	r3, #32
 80070ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070f2:	e2aa      	b.n	800764a <UART_SetConfig+0x7ae>
 80070f4:	2340      	movs	r3, #64	; 0x40
 80070f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070fa:	e2a6      	b.n	800764a <UART_SetConfig+0x7ae>
 80070fc:	2380      	movs	r3, #128	; 0x80
 80070fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007102:	e2a2      	b.n	800764a <UART_SetConfig+0x7ae>
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a35      	ldr	r2, [pc, #212]	; (80071e0 <UART_SetConfig+0x344>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d130      	bne.n	8007170 <UART_SetConfig+0x2d4>
 800710e:	4b31      	ldr	r3, [pc, #196]	; (80071d4 <UART_SetConfig+0x338>)
 8007110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007112:	f003 0307 	and.w	r3, r3, #7
 8007116:	2b05      	cmp	r3, #5
 8007118:	d826      	bhi.n	8007168 <UART_SetConfig+0x2cc>
 800711a:	a201      	add	r2, pc, #4	; (adr r2, 8007120 <UART_SetConfig+0x284>)
 800711c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007120:	08007139 	.word	0x08007139
 8007124:	08007141 	.word	0x08007141
 8007128:	08007149 	.word	0x08007149
 800712c:	08007151 	.word	0x08007151
 8007130:	08007159 	.word	0x08007159
 8007134:	08007161 	.word	0x08007161
 8007138:	2300      	movs	r3, #0
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713e:	e284      	b.n	800764a <UART_SetConfig+0x7ae>
 8007140:	2304      	movs	r3, #4
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007146:	e280      	b.n	800764a <UART_SetConfig+0x7ae>
 8007148:	2308      	movs	r3, #8
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714e:	e27c      	b.n	800764a <UART_SetConfig+0x7ae>
 8007150:	2310      	movs	r3, #16
 8007152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007156:	e278      	b.n	800764a <UART_SetConfig+0x7ae>
 8007158:	2320      	movs	r3, #32
 800715a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715e:	e274      	b.n	800764a <UART_SetConfig+0x7ae>
 8007160:	2340      	movs	r3, #64	; 0x40
 8007162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007166:	e270      	b.n	800764a <UART_SetConfig+0x7ae>
 8007168:	2380      	movs	r3, #128	; 0x80
 800716a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800716e:	e26c      	b.n	800764a <UART_SetConfig+0x7ae>
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a1b      	ldr	r2, [pc, #108]	; (80071e4 <UART_SetConfig+0x348>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d142      	bne.n	8007200 <UART_SetConfig+0x364>
 800717a:	4b16      	ldr	r3, [pc, #88]	; (80071d4 <UART_SetConfig+0x338>)
 800717c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717e:	f003 0307 	and.w	r3, r3, #7
 8007182:	2b05      	cmp	r3, #5
 8007184:	d838      	bhi.n	80071f8 <UART_SetConfig+0x35c>
 8007186:	a201      	add	r2, pc, #4	; (adr r2, 800718c <UART_SetConfig+0x2f0>)
 8007188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718c:	080071a5 	.word	0x080071a5
 8007190:	080071ad 	.word	0x080071ad
 8007194:	080071b5 	.word	0x080071b5
 8007198:	080071bd 	.word	0x080071bd
 800719c:	080071e9 	.word	0x080071e9
 80071a0:	080071f1 	.word	0x080071f1
 80071a4:	2300      	movs	r3, #0
 80071a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071aa:	e24e      	b.n	800764a <UART_SetConfig+0x7ae>
 80071ac:	2304      	movs	r3, #4
 80071ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071b2:	e24a      	b.n	800764a <UART_SetConfig+0x7ae>
 80071b4:	2308      	movs	r3, #8
 80071b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ba:	e246      	b.n	800764a <UART_SetConfig+0x7ae>
 80071bc:	2310      	movs	r3, #16
 80071be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071c2:	e242      	b.n	800764a <UART_SetConfig+0x7ae>
 80071c4:	cfff69f3 	.word	0xcfff69f3
 80071c8:	58000c00 	.word	0x58000c00
 80071cc:	11fff4ff 	.word	0x11fff4ff
 80071d0:	40011000 	.word	0x40011000
 80071d4:	58024400 	.word	0x58024400
 80071d8:	40004400 	.word	0x40004400
 80071dc:	40004800 	.word	0x40004800
 80071e0:	40004c00 	.word	0x40004c00
 80071e4:	40005000 	.word	0x40005000
 80071e8:	2320      	movs	r3, #32
 80071ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ee:	e22c      	b.n	800764a <UART_SetConfig+0x7ae>
 80071f0:	2340      	movs	r3, #64	; 0x40
 80071f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f6:	e228      	b.n	800764a <UART_SetConfig+0x7ae>
 80071f8:	2380      	movs	r3, #128	; 0x80
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071fe:	e224      	b.n	800764a <UART_SetConfig+0x7ae>
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4ab1      	ldr	r2, [pc, #708]	; (80074cc <UART_SetConfig+0x630>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d176      	bne.n	80072f8 <UART_SetConfig+0x45c>
 800720a:	4bb1      	ldr	r3, [pc, #708]	; (80074d0 <UART_SetConfig+0x634>)
 800720c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007212:	2b28      	cmp	r3, #40	; 0x28
 8007214:	d86c      	bhi.n	80072f0 <UART_SetConfig+0x454>
 8007216:	a201      	add	r2, pc, #4	; (adr r2, 800721c <UART_SetConfig+0x380>)
 8007218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721c:	080072c1 	.word	0x080072c1
 8007220:	080072f1 	.word	0x080072f1
 8007224:	080072f1 	.word	0x080072f1
 8007228:	080072f1 	.word	0x080072f1
 800722c:	080072f1 	.word	0x080072f1
 8007230:	080072f1 	.word	0x080072f1
 8007234:	080072f1 	.word	0x080072f1
 8007238:	080072f1 	.word	0x080072f1
 800723c:	080072c9 	.word	0x080072c9
 8007240:	080072f1 	.word	0x080072f1
 8007244:	080072f1 	.word	0x080072f1
 8007248:	080072f1 	.word	0x080072f1
 800724c:	080072f1 	.word	0x080072f1
 8007250:	080072f1 	.word	0x080072f1
 8007254:	080072f1 	.word	0x080072f1
 8007258:	080072f1 	.word	0x080072f1
 800725c:	080072d1 	.word	0x080072d1
 8007260:	080072f1 	.word	0x080072f1
 8007264:	080072f1 	.word	0x080072f1
 8007268:	080072f1 	.word	0x080072f1
 800726c:	080072f1 	.word	0x080072f1
 8007270:	080072f1 	.word	0x080072f1
 8007274:	080072f1 	.word	0x080072f1
 8007278:	080072f1 	.word	0x080072f1
 800727c:	080072d9 	.word	0x080072d9
 8007280:	080072f1 	.word	0x080072f1
 8007284:	080072f1 	.word	0x080072f1
 8007288:	080072f1 	.word	0x080072f1
 800728c:	080072f1 	.word	0x080072f1
 8007290:	080072f1 	.word	0x080072f1
 8007294:	080072f1 	.word	0x080072f1
 8007298:	080072f1 	.word	0x080072f1
 800729c:	080072e1 	.word	0x080072e1
 80072a0:	080072f1 	.word	0x080072f1
 80072a4:	080072f1 	.word	0x080072f1
 80072a8:	080072f1 	.word	0x080072f1
 80072ac:	080072f1 	.word	0x080072f1
 80072b0:	080072f1 	.word	0x080072f1
 80072b4:	080072f1 	.word	0x080072f1
 80072b8:	080072f1 	.word	0x080072f1
 80072bc:	080072e9 	.word	0x080072e9
 80072c0:	2301      	movs	r3, #1
 80072c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c6:	e1c0      	b.n	800764a <UART_SetConfig+0x7ae>
 80072c8:	2304      	movs	r3, #4
 80072ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ce:	e1bc      	b.n	800764a <UART_SetConfig+0x7ae>
 80072d0:	2308      	movs	r3, #8
 80072d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d6:	e1b8      	b.n	800764a <UART_SetConfig+0x7ae>
 80072d8:	2310      	movs	r3, #16
 80072da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072de:	e1b4      	b.n	800764a <UART_SetConfig+0x7ae>
 80072e0:	2320      	movs	r3, #32
 80072e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072e6:	e1b0      	b.n	800764a <UART_SetConfig+0x7ae>
 80072e8:	2340      	movs	r3, #64	; 0x40
 80072ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ee:	e1ac      	b.n	800764a <UART_SetConfig+0x7ae>
 80072f0:	2380      	movs	r3, #128	; 0x80
 80072f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072f6:	e1a8      	b.n	800764a <UART_SetConfig+0x7ae>
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a75      	ldr	r2, [pc, #468]	; (80074d4 <UART_SetConfig+0x638>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d130      	bne.n	8007364 <UART_SetConfig+0x4c8>
 8007302:	4b73      	ldr	r3, [pc, #460]	; (80074d0 <UART_SetConfig+0x634>)
 8007304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007306:	f003 0307 	and.w	r3, r3, #7
 800730a:	2b05      	cmp	r3, #5
 800730c:	d826      	bhi.n	800735c <UART_SetConfig+0x4c0>
 800730e:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <UART_SetConfig+0x478>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	0800732d 	.word	0x0800732d
 8007318:	08007335 	.word	0x08007335
 800731c:	0800733d 	.word	0x0800733d
 8007320:	08007345 	.word	0x08007345
 8007324:	0800734d 	.word	0x0800734d
 8007328:	08007355 	.word	0x08007355
 800732c:	2300      	movs	r3, #0
 800732e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007332:	e18a      	b.n	800764a <UART_SetConfig+0x7ae>
 8007334:	2304      	movs	r3, #4
 8007336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800733a:	e186      	b.n	800764a <UART_SetConfig+0x7ae>
 800733c:	2308      	movs	r3, #8
 800733e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007342:	e182      	b.n	800764a <UART_SetConfig+0x7ae>
 8007344:	2310      	movs	r3, #16
 8007346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800734a:	e17e      	b.n	800764a <UART_SetConfig+0x7ae>
 800734c:	2320      	movs	r3, #32
 800734e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007352:	e17a      	b.n	800764a <UART_SetConfig+0x7ae>
 8007354:	2340      	movs	r3, #64	; 0x40
 8007356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800735a:	e176      	b.n	800764a <UART_SetConfig+0x7ae>
 800735c:	2380      	movs	r3, #128	; 0x80
 800735e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007362:	e172      	b.n	800764a <UART_SetConfig+0x7ae>
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a5b      	ldr	r2, [pc, #364]	; (80074d8 <UART_SetConfig+0x63c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d130      	bne.n	80073d0 <UART_SetConfig+0x534>
 800736e:	4b58      	ldr	r3, [pc, #352]	; (80074d0 <UART_SetConfig+0x634>)
 8007370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	2b05      	cmp	r3, #5
 8007378:	d826      	bhi.n	80073c8 <UART_SetConfig+0x52c>
 800737a:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <UART_SetConfig+0x4e4>)
 800737c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007380:	08007399 	.word	0x08007399
 8007384:	080073a1 	.word	0x080073a1
 8007388:	080073a9 	.word	0x080073a9
 800738c:	080073b1 	.word	0x080073b1
 8007390:	080073b9 	.word	0x080073b9
 8007394:	080073c1 	.word	0x080073c1
 8007398:	2300      	movs	r3, #0
 800739a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800739e:	e154      	b.n	800764a <UART_SetConfig+0x7ae>
 80073a0:	2304      	movs	r3, #4
 80073a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073a6:	e150      	b.n	800764a <UART_SetConfig+0x7ae>
 80073a8:	2308      	movs	r3, #8
 80073aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ae:	e14c      	b.n	800764a <UART_SetConfig+0x7ae>
 80073b0:	2310      	movs	r3, #16
 80073b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073b6:	e148      	b.n	800764a <UART_SetConfig+0x7ae>
 80073b8:	2320      	movs	r3, #32
 80073ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073be:	e144      	b.n	800764a <UART_SetConfig+0x7ae>
 80073c0:	2340      	movs	r3, #64	; 0x40
 80073c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073c6:	e140      	b.n	800764a <UART_SetConfig+0x7ae>
 80073c8:	2380      	movs	r3, #128	; 0x80
 80073ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ce:	e13c      	b.n	800764a <UART_SetConfig+0x7ae>
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a41      	ldr	r2, [pc, #260]	; (80074dc <UART_SetConfig+0x640>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	f040 8082 	bne.w	80074e0 <UART_SetConfig+0x644>
 80073dc:	4b3c      	ldr	r3, [pc, #240]	; (80074d0 <UART_SetConfig+0x634>)
 80073de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073e4:	2b28      	cmp	r3, #40	; 0x28
 80073e6:	d86d      	bhi.n	80074c4 <UART_SetConfig+0x628>
 80073e8:	a201      	add	r2, pc, #4	; (adr r2, 80073f0 <UART_SetConfig+0x554>)
 80073ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ee:	bf00      	nop
 80073f0:	08007495 	.word	0x08007495
 80073f4:	080074c5 	.word	0x080074c5
 80073f8:	080074c5 	.word	0x080074c5
 80073fc:	080074c5 	.word	0x080074c5
 8007400:	080074c5 	.word	0x080074c5
 8007404:	080074c5 	.word	0x080074c5
 8007408:	080074c5 	.word	0x080074c5
 800740c:	080074c5 	.word	0x080074c5
 8007410:	0800749d 	.word	0x0800749d
 8007414:	080074c5 	.word	0x080074c5
 8007418:	080074c5 	.word	0x080074c5
 800741c:	080074c5 	.word	0x080074c5
 8007420:	080074c5 	.word	0x080074c5
 8007424:	080074c5 	.word	0x080074c5
 8007428:	080074c5 	.word	0x080074c5
 800742c:	080074c5 	.word	0x080074c5
 8007430:	080074a5 	.word	0x080074a5
 8007434:	080074c5 	.word	0x080074c5
 8007438:	080074c5 	.word	0x080074c5
 800743c:	080074c5 	.word	0x080074c5
 8007440:	080074c5 	.word	0x080074c5
 8007444:	080074c5 	.word	0x080074c5
 8007448:	080074c5 	.word	0x080074c5
 800744c:	080074c5 	.word	0x080074c5
 8007450:	080074ad 	.word	0x080074ad
 8007454:	080074c5 	.word	0x080074c5
 8007458:	080074c5 	.word	0x080074c5
 800745c:	080074c5 	.word	0x080074c5
 8007460:	080074c5 	.word	0x080074c5
 8007464:	080074c5 	.word	0x080074c5
 8007468:	080074c5 	.word	0x080074c5
 800746c:	080074c5 	.word	0x080074c5
 8007470:	080074b5 	.word	0x080074b5
 8007474:	080074c5 	.word	0x080074c5
 8007478:	080074c5 	.word	0x080074c5
 800747c:	080074c5 	.word	0x080074c5
 8007480:	080074c5 	.word	0x080074c5
 8007484:	080074c5 	.word	0x080074c5
 8007488:	080074c5 	.word	0x080074c5
 800748c:	080074c5 	.word	0x080074c5
 8007490:	080074bd 	.word	0x080074bd
 8007494:	2301      	movs	r3, #1
 8007496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800749a:	e0d6      	b.n	800764a <UART_SetConfig+0x7ae>
 800749c:	2304      	movs	r3, #4
 800749e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074a2:	e0d2      	b.n	800764a <UART_SetConfig+0x7ae>
 80074a4:	2308      	movs	r3, #8
 80074a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074aa:	e0ce      	b.n	800764a <UART_SetConfig+0x7ae>
 80074ac:	2310      	movs	r3, #16
 80074ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074b2:	e0ca      	b.n	800764a <UART_SetConfig+0x7ae>
 80074b4:	2320      	movs	r3, #32
 80074b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ba:	e0c6      	b.n	800764a <UART_SetConfig+0x7ae>
 80074bc:	2340      	movs	r3, #64	; 0x40
 80074be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074c2:	e0c2      	b.n	800764a <UART_SetConfig+0x7ae>
 80074c4:	2380      	movs	r3, #128	; 0x80
 80074c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ca:	e0be      	b.n	800764a <UART_SetConfig+0x7ae>
 80074cc:	40011400 	.word	0x40011400
 80074d0:	58024400 	.word	0x58024400
 80074d4:	40007800 	.word	0x40007800
 80074d8:	40007c00 	.word	0x40007c00
 80074dc:	40011800 	.word	0x40011800
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4aad      	ldr	r2, [pc, #692]	; (800779c <UART_SetConfig+0x900>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d176      	bne.n	80075d8 <UART_SetConfig+0x73c>
 80074ea:	4bad      	ldr	r3, [pc, #692]	; (80077a0 <UART_SetConfig+0x904>)
 80074ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074f2:	2b28      	cmp	r3, #40	; 0x28
 80074f4:	d86c      	bhi.n	80075d0 <UART_SetConfig+0x734>
 80074f6:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <UART_SetConfig+0x660>)
 80074f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fc:	080075a1 	.word	0x080075a1
 8007500:	080075d1 	.word	0x080075d1
 8007504:	080075d1 	.word	0x080075d1
 8007508:	080075d1 	.word	0x080075d1
 800750c:	080075d1 	.word	0x080075d1
 8007510:	080075d1 	.word	0x080075d1
 8007514:	080075d1 	.word	0x080075d1
 8007518:	080075d1 	.word	0x080075d1
 800751c:	080075a9 	.word	0x080075a9
 8007520:	080075d1 	.word	0x080075d1
 8007524:	080075d1 	.word	0x080075d1
 8007528:	080075d1 	.word	0x080075d1
 800752c:	080075d1 	.word	0x080075d1
 8007530:	080075d1 	.word	0x080075d1
 8007534:	080075d1 	.word	0x080075d1
 8007538:	080075d1 	.word	0x080075d1
 800753c:	080075b1 	.word	0x080075b1
 8007540:	080075d1 	.word	0x080075d1
 8007544:	080075d1 	.word	0x080075d1
 8007548:	080075d1 	.word	0x080075d1
 800754c:	080075d1 	.word	0x080075d1
 8007550:	080075d1 	.word	0x080075d1
 8007554:	080075d1 	.word	0x080075d1
 8007558:	080075d1 	.word	0x080075d1
 800755c:	080075b9 	.word	0x080075b9
 8007560:	080075d1 	.word	0x080075d1
 8007564:	080075d1 	.word	0x080075d1
 8007568:	080075d1 	.word	0x080075d1
 800756c:	080075d1 	.word	0x080075d1
 8007570:	080075d1 	.word	0x080075d1
 8007574:	080075d1 	.word	0x080075d1
 8007578:	080075d1 	.word	0x080075d1
 800757c:	080075c1 	.word	0x080075c1
 8007580:	080075d1 	.word	0x080075d1
 8007584:	080075d1 	.word	0x080075d1
 8007588:	080075d1 	.word	0x080075d1
 800758c:	080075d1 	.word	0x080075d1
 8007590:	080075d1 	.word	0x080075d1
 8007594:	080075d1 	.word	0x080075d1
 8007598:	080075d1 	.word	0x080075d1
 800759c:	080075c9 	.word	0x080075c9
 80075a0:	2301      	movs	r3, #1
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075a6:	e050      	b.n	800764a <UART_SetConfig+0x7ae>
 80075a8:	2304      	movs	r3, #4
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ae:	e04c      	b.n	800764a <UART_SetConfig+0x7ae>
 80075b0:	2308      	movs	r3, #8
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075b6:	e048      	b.n	800764a <UART_SetConfig+0x7ae>
 80075b8:	2310      	movs	r3, #16
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075be:	e044      	b.n	800764a <UART_SetConfig+0x7ae>
 80075c0:	2320      	movs	r3, #32
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075c6:	e040      	b.n	800764a <UART_SetConfig+0x7ae>
 80075c8:	2340      	movs	r3, #64	; 0x40
 80075ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ce:	e03c      	b.n	800764a <UART_SetConfig+0x7ae>
 80075d0:	2380      	movs	r3, #128	; 0x80
 80075d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075d6:	e038      	b.n	800764a <UART_SetConfig+0x7ae>
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a71      	ldr	r2, [pc, #452]	; (80077a4 <UART_SetConfig+0x908>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d130      	bne.n	8007644 <UART_SetConfig+0x7a8>
 80075e2:	4b6f      	ldr	r3, [pc, #444]	; (80077a0 <UART_SetConfig+0x904>)
 80075e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	2b05      	cmp	r3, #5
 80075ec:	d826      	bhi.n	800763c <UART_SetConfig+0x7a0>
 80075ee:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <UART_SetConfig+0x758>)
 80075f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f4:	0800760d 	.word	0x0800760d
 80075f8:	08007615 	.word	0x08007615
 80075fc:	0800761d 	.word	0x0800761d
 8007600:	08007625 	.word	0x08007625
 8007604:	0800762d 	.word	0x0800762d
 8007608:	08007635 	.word	0x08007635
 800760c:	2302      	movs	r3, #2
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007612:	e01a      	b.n	800764a <UART_SetConfig+0x7ae>
 8007614:	2304      	movs	r3, #4
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800761a:	e016      	b.n	800764a <UART_SetConfig+0x7ae>
 800761c:	2308      	movs	r3, #8
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007622:	e012      	b.n	800764a <UART_SetConfig+0x7ae>
 8007624:	2310      	movs	r3, #16
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762a:	e00e      	b.n	800764a <UART_SetConfig+0x7ae>
 800762c:	2320      	movs	r3, #32
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007632:	e00a      	b.n	800764a <UART_SetConfig+0x7ae>
 8007634:	2340      	movs	r3, #64	; 0x40
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800763a:	e006      	b.n	800764a <UART_SetConfig+0x7ae>
 800763c:	2380      	movs	r3, #128	; 0x80
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007642:	e002      	b.n	800764a <UART_SetConfig+0x7ae>
 8007644:	2380      	movs	r3, #128	; 0x80
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a55      	ldr	r2, [pc, #340]	; (80077a4 <UART_SetConfig+0x908>)
 8007650:	4293      	cmp	r3, r2
 8007652:	f040 80f8 	bne.w	8007846 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007656:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800765a:	2b20      	cmp	r3, #32
 800765c:	dc46      	bgt.n	80076ec <UART_SetConfig+0x850>
 800765e:	2b02      	cmp	r3, #2
 8007660:	db75      	blt.n	800774e <UART_SetConfig+0x8b2>
 8007662:	3b02      	subs	r3, #2
 8007664:	2b1e      	cmp	r3, #30
 8007666:	d872      	bhi.n	800774e <UART_SetConfig+0x8b2>
 8007668:	a201      	add	r2, pc, #4	; (adr r2, 8007670 <UART_SetConfig+0x7d4>)
 800766a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766e:	bf00      	nop
 8007670:	080076f3 	.word	0x080076f3
 8007674:	0800774f 	.word	0x0800774f
 8007678:	080076fb 	.word	0x080076fb
 800767c:	0800774f 	.word	0x0800774f
 8007680:	0800774f 	.word	0x0800774f
 8007684:	0800774f 	.word	0x0800774f
 8007688:	0800770b 	.word	0x0800770b
 800768c:	0800774f 	.word	0x0800774f
 8007690:	0800774f 	.word	0x0800774f
 8007694:	0800774f 	.word	0x0800774f
 8007698:	0800774f 	.word	0x0800774f
 800769c:	0800774f 	.word	0x0800774f
 80076a0:	0800774f 	.word	0x0800774f
 80076a4:	0800774f 	.word	0x0800774f
 80076a8:	0800771b 	.word	0x0800771b
 80076ac:	0800774f 	.word	0x0800774f
 80076b0:	0800774f 	.word	0x0800774f
 80076b4:	0800774f 	.word	0x0800774f
 80076b8:	0800774f 	.word	0x0800774f
 80076bc:	0800774f 	.word	0x0800774f
 80076c0:	0800774f 	.word	0x0800774f
 80076c4:	0800774f 	.word	0x0800774f
 80076c8:	0800774f 	.word	0x0800774f
 80076cc:	0800774f 	.word	0x0800774f
 80076d0:	0800774f 	.word	0x0800774f
 80076d4:	0800774f 	.word	0x0800774f
 80076d8:	0800774f 	.word	0x0800774f
 80076dc:	0800774f 	.word	0x0800774f
 80076e0:	0800774f 	.word	0x0800774f
 80076e4:	0800774f 	.word	0x0800774f
 80076e8:	08007741 	.word	0x08007741
 80076ec:	2b40      	cmp	r3, #64	; 0x40
 80076ee:	d02a      	beq.n	8007746 <UART_SetConfig+0x8aa>
 80076f0:	e02d      	b.n	800774e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80076f2:	f7fd fd81 	bl	80051f8 <HAL_RCCEx_GetD3PCLK1Freq>
 80076f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80076f8:	e02f      	b.n	800775a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fd fd90 	bl	8005224 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007708:	e027      	b.n	800775a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800770a:	f107 0318 	add.w	r3, r7, #24
 800770e:	4618      	mov	r0, r3
 8007710:	f7fd fedc 	bl	80054cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007718:	e01f      	b.n	800775a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800771a:	4b21      	ldr	r3, [pc, #132]	; (80077a0 <UART_SetConfig+0x904>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b00      	cmp	r3, #0
 8007724:	d009      	beq.n	800773a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007726:	4b1e      	ldr	r3, [pc, #120]	; (80077a0 <UART_SetConfig+0x904>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	08db      	lsrs	r3, r3, #3
 800772c:	f003 0303 	and.w	r3, r3, #3
 8007730:	4a1d      	ldr	r2, [pc, #116]	; (80077a8 <UART_SetConfig+0x90c>)
 8007732:	fa22 f303 	lsr.w	r3, r2, r3
 8007736:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007738:	e00f      	b.n	800775a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800773a:	4b1b      	ldr	r3, [pc, #108]	; (80077a8 <UART_SetConfig+0x90c>)
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800773e:	e00c      	b.n	800775a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007740:	4b1a      	ldr	r3, [pc, #104]	; (80077ac <UART_SetConfig+0x910>)
 8007742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007744:	e009      	b.n	800775a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800774a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800774c:	e005      	b.n	800775a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007758:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800775a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 81ee 	beq.w	8007b3e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	4a12      	ldr	r2, [pc, #72]	; (80077b0 <UART_SetConfig+0x914>)
 8007768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800776c:	461a      	mov	r2, r3
 800776e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007770:	fbb3 f3f2 	udiv	r3, r3, r2
 8007774:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	4613      	mov	r3, r2
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	4413      	add	r3, r2
 8007780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007782:	429a      	cmp	r2, r3
 8007784:	d305      	bcc.n	8007792 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800778c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800778e:	429a      	cmp	r2, r3
 8007790:	d910      	bls.n	80077b4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007798:	e1d1      	b.n	8007b3e <UART_SetConfig+0xca2>
 800779a:	bf00      	nop
 800779c:	40011c00 	.word	0x40011c00
 80077a0:	58024400 	.word	0x58024400
 80077a4:	58000c00 	.word	0x58000c00
 80077a8:	03d09000 	.word	0x03d09000
 80077ac:	003d0900 	.word	0x003d0900
 80077b0:	080098a0 	.word	0x080098a0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b6:	2200      	movs	r2, #0
 80077b8:	60bb      	str	r3, [r7, #8]
 80077ba:	60fa      	str	r2, [r7, #12]
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	4ac0      	ldr	r2, [pc, #768]	; (8007ac4 <UART_SetConfig+0xc28>)
 80077c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	2200      	movs	r2, #0
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	607a      	str	r2, [r7, #4]
 80077ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077d6:	f7f8 fde3 	bl	80003a0 <__aeabi_uldivmod>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4610      	mov	r0, r2
 80077e0:	4619      	mov	r1, r3
 80077e2:	f04f 0200 	mov.w	r2, #0
 80077e6:	f04f 0300 	mov.w	r3, #0
 80077ea:	020b      	lsls	r3, r1, #8
 80077ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077f0:	0202      	lsls	r2, r0, #8
 80077f2:	6979      	ldr	r1, [r7, #20]
 80077f4:	6849      	ldr	r1, [r1, #4]
 80077f6:	0849      	lsrs	r1, r1, #1
 80077f8:	2000      	movs	r0, #0
 80077fa:	460c      	mov	r4, r1
 80077fc:	4605      	mov	r5, r0
 80077fe:	eb12 0804 	adds.w	r8, r2, r4
 8007802:	eb43 0905 	adc.w	r9, r3, r5
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	469a      	mov	sl, r3
 800780e:	4693      	mov	fp, r2
 8007810:	4652      	mov	r2, sl
 8007812:	465b      	mov	r3, fp
 8007814:	4640      	mov	r0, r8
 8007816:	4649      	mov	r1, r9
 8007818:	f7f8 fdc2 	bl	80003a0 <__aeabi_uldivmod>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	4613      	mov	r3, r2
 8007822:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800782a:	d308      	bcc.n	800783e <UART_SetConfig+0x9a2>
 800782c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007832:	d204      	bcs.n	800783e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800783a:	60da      	str	r2, [r3, #12]
 800783c:	e17f      	b.n	8007b3e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007844:	e17b      	b.n	8007b3e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800784e:	f040 80bd 	bne.w	80079cc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007852:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007856:	2b20      	cmp	r3, #32
 8007858:	dc48      	bgt.n	80078ec <UART_SetConfig+0xa50>
 800785a:	2b00      	cmp	r3, #0
 800785c:	db7b      	blt.n	8007956 <UART_SetConfig+0xaba>
 800785e:	2b20      	cmp	r3, #32
 8007860:	d879      	bhi.n	8007956 <UART_SetConfig+0xaba>
 8007862:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <UART_SetConfig+0x9cc>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	080078f3 	.word	0x080078f3
 800786c:	080078fb 	.word	0x080078fb
 8007870:	08007957 	.word	0x08007957
 8007874:	08007957 	.word	0x08007957
 8007878:	08007903 	.word	0x08007903
 800787c:	08007957 	.word	0x08007957
 8007880:	08007957 	.word	0x08007957
 8007884:	08007957 	.word	0x08007957
 8007888:	08007913 	.word	0x08007913
 800788c:	08007957 	.word	0x08007957
 8007890:	08007957 	.word	0x08007957
 8007894:	08007957 	.word	0x08007957
 8007898:	08007957 	.word	0x08007957
 800789c:	08007957 	.word	0x08007957
 80078a0:	08007957 	.word	0x08007957
 80078a4:	08007957 	.word	0x08007957
 80078a8:	08007923 	.word	0x08007923
 80078ac:	08007957 	.word	0x08007957
 80078b0:	08007957 	.word	0x08007957
 80078b4:	08007957 	.word	0x08007957
 80078b8:	08007957 	.word	0x08007957
 80078bc:	08007957 	.word	0x08007957
 80078c0:	08007957 	.word	0x08007957
 80078c4:	08007957 	.word	0x08007957
 80078c8:	08007957 	.word	0x08007957
 80078cc:	08007957 	.word	0x08007957
 80078d0:	08007957 	.word	0x08007957
 80078d4:	08007957 	.word	0x08007957
 80078d8:	08007957 	.word	0x08007957
 80078dc:	08007957 	.word	0x08007957
 80078e0:	08007957 	.word	0x08007957
 80078e4:	08007957 	.word	0x08007957
 80078e8:	08007949 	.word	0x08007949
 80078ec:	2b40      	cmp	r3, #64	; 0x40
 80078ee:	d02e      	beq.n	800794e <UART_SetConfig+0xab2>
 80078f0:	e031      	b.n	8007956 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f2:	f7fc fa97 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 80078f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80078f8:	e033      	b.n	8007962 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078fa:	f7fc faa9 	bl	8003e50 <HAL_RCC_GetPCLK2Freq>
 80078fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007900:	e02f      	b.n	8007962 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007906:	4618      	mov	r0, r3
 8007908:	f7fd fc8c 	bl	8005224 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007910:	e027      	b.n	8007962 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007912:	f107 0318 	add.w	r3, r7, #24
 8007916:	4618      	mov	r0, r3
 8007918:	f7fd fdd8 	bl	80054cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007920:	e01f      	b.n	8007962 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007922:	4b69      	ldr	r3, [pc, #420]	; (8007ac8 <UART_SetConfig+0xc2c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0320 	and.w	r3, r3, #32
 800792a:	2b00      	cmp	r3, #0
 800792c:	d009      	beq.n	8007942 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800792e:	4b66      	ldr	r3, [pc, #408]	; (8007ac8 <UART_SetConfig+0xc2c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	08db      	lsrs	r3, r3, #3
 8007934:	f003 0303 	and.w	r3, r3, #3
 8007938:	4a64      	ldr	r2, [pc, #400]	; (8007acc <UART_SetConfig+0xc30>)
 800793a:	fa22 f303 	lsr.w	r3, r2, r3
 800793e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007940:	e00f      	b.n	8007962 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007942:	4b62      	ldr	r3, [pc, #392]	; (8007acc <UART_SetConfig+0xc30>)
 8007944:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007946:	e00c      	b.n	8007962 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007948:	4b61      	ldr	r3, [pc, #388]	; (8007ad0 <UART_SetConfig+0xc34>)
 800794a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800794c:	e009      	b.n	8007962 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800794e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007954:	e005      	b.n	8007962 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 80ea 	beq.w	8007b3e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	4a55      	ldr	r2, [pc, #340]	; (8007ac4 <UART_SetConfig+0xc28>)
 8007970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007974:	461a      	mov	r2, r3
 8007976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007978:	fbb3 f3f2 	udiv	r3, r3, r2
 800797c:	005a      	lsls	r2, r3, #1
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	085b      	lsrs	r3, r3, #1
 8007984:	441a      	add	r2, r3
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	fbb2 f3f3 	udiv	r3, r2, r3
 800798e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007992:	2b0f      	cmp	r3, #15
 8007994:	d916      	bls.n	80079c4 <UART_SetConfig+0xb28>
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800799c:	d212      	bcs.n	80079c4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800799e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	f023 030f 	bic.w	r3, r3, #15
 80079a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	085b      	lsrs	r3, r3, #1
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	f003 0307 	and.w	r3, r3, #7
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80079b6:	4313      	orrs	r3, r2
 80079b8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80079c0:	60da      	str	r2, [r3, #12]
 80079c2:	e0bc      	b.n	8007b3e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80079ca:	e0b8      	b.n	8007b3e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80079d0:	2b20      	cmp	r3, #32
 80079d2:	dc4b      	bgt.n	8007a6c <UART_SetConfig+0xbd0>
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f2c0 8087 	blt.w	8007ae8 <UART_SetConfig+0xc4c>
 80079da:	2b20      	cmp	r3, #32
 80079dc:	f200 8084 	bhi.w	8007ae8 <UART_SetConfig+0xc4c>
 80079e0:	a201      	add	r2, pc, #4	; (adr r2, 80079e8 <UART_SetConfig+0xb4c>)
 80079e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e6:	bf00      	nop
 80079e8:	08007a73 	.word	0x08007a73
 80079ec:	08007a7b 	.word	0x08007a7b
 80079f0:	08007ae9 	.word	0x08007ae9
 80079f4:	08007ae9 	.word	0x08007ae9
 80079f8:	08007a83 	.word	0x08007a83
 80079fc:	08007ae9 	.word	0x08007ae9
 8007a00:	08007ae9 	.word	0x08007ae9
 8007a04:	08007ae9 	.word	0x08007ae9
 8007a08:	08007a93 	.word	0x08007a93
 8007a0c:	08007ae9 	.word	0x08007ae9
 8007a10:	08007ae9 	.word	0x08007ae9
 8007a14:	08007ae9 	.word	0x08007ae9
 8007a18:	08007ae9 	.word	0x08007ae9
 8007a1c:	08007ae9 	.word	0x08007ae9
 8007a20:	08007ae9 	.word	0x08007ae9
 8007a24:	08007ae9 	.word	0x08007ae9
 8007a28:	08007aa3 	.word	0x08007aa3
 8007a2c:	08007ae9 	.word	0x08007ae9
 8007a30:	08007ae9 	.word	0x08007ae9
 8007a34:	08007ae9 	.word	0x08007ae9
 8007a38:	08007ae9 	.word	0x08007ae9
 8007a3c:	08007ae9 	.word	0x08007ae9
 8007a40:	08007ae9 	.word	0x08007ae9
 8007a44:	08007ae9 	.word	0x08007ae9
 8007a48:	08007ae9 	.word	0x08007ae9
 8007a4c:	08007ae9 	.word	0x08007ae9
 8007a50:	08007ae9 	.word	0x08007ae9
 8007a54:	08007ae9 	.word	0x08007ae9
 8007a58:	08007ae9 	.word	0x08007ae9
 8007a5c:	08007ae9 	.word	0x08007ae9
 8007a60:	08007ae9 	.word	0x08007ae9
 8007a64:	08007ae9 	.word	0x08007ae9
 8007a68:	08007adb 	.word	0x08007adb
 8007a6c:	2b40      	cmp	r3, #64	; 0x40
 8007a6e:	d037      	beq.n	8007ae0 <UART_SetConfig+0xc44>
 8007a70:	e03a      	b.n	8007ae8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a72:	f7fc f9d7 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 8007a76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a78:	e03c      	b.n	8007af4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a7a:	f7fc f9e9 	bl	8003e50 <HAL_RCC_GetPCLK2Freq>
 8007a7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007a80:	e038      	b.n	8007af4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fd fbcc 	bl	8005224 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a90:	e030      	b.n	8007af4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a92:	f107 0318 	add.w	r3, r7, #24
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fd fd18 	bl	80054cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007aa0:	e028      	b.n	8007af4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007aa2:	4b09      	ldr	r3, [pc, #36]	; (8007ac8 <UART_SetConfig+0xc2c>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0320 	and.w	r3, r3, #32
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d012      	beq.n	8007ad4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007aae:	4b06      	ldr	r3, [pc, #24]	; (8007ac8 <UART_SetConfig+0xc2c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	08db      	lsrs	r3, r3, #3
 8007ab4:	f003 0303 	and.w	r3, r3, #3
 8007ab8:	4a04      	ldr	r2, [pc, #16]	; (8007acc <UART_SetConfig+0xc30>)
 8007aba:	fa22 f303 	lsr.w	r3, r2, r3
 8007abe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ac0:	e018      	b.n	8007af4 <UART_SetConfig+0xc58>
 8007ac2:	bf00      	nop
 8007ac4:	080098a0 	.word	0x080098a0
 8007ac8:	58024400 	.word	0x58024400
 8007acc:	03d09000 	.word	0x03d09000
 8007ad0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007ad4:	4b24      	ldr	r3, [pc, #144]	; (8007b68 <UART_SetConfig+0xccc>)
 8007ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ad8:	e00c      	b.n	8007af4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ada:	4b24      	ldr	r3, [pc, #144]	; (8007b6c <UART_SetConfig+0xcd0>)
 8007adc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ade:	e009      	b.n	8007af4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ae0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ae6:	e005      	b.n	8007af4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007af2:	bf00      	nop
    }

    if (pclk != 0U)
 8007af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d021      	beq.n	8007b3e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	4a1c      	ldr	r2, [pc, #112]	; (8007b70 <UART_SetConfig+0xcd4>)
 8007b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b04:	461a      	mov	r2, r3
 8007b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b08:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	085b      	lsrs	r3, r3, #1
 8007b12:	441a      	add	r2, r3
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b20:	2b0f      	cmp	r3, #15
 8007b22:	d909      	bls.n	8007b38 <UART_SetConfig+0xc9c>
 8007b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b2a:	d205      	bcs.n	8007b38 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	60da      	str	r2, [r3, #12]
 8007b36:	e002      	b.n	8007b3e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2200      	movs	r2, #0
 8007b52:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	2200      	movs	r2, #0
 8007b58:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007b5a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3748      	adds	r7, #72	; 0x48
 8007b62:	46bd      	mov	sp, r7
 8007b64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b68:	03d09000 	.word	0x03d09000
 8007b6c:	003d0900 	.word	0x003d0900
 8007b70:	080098a0 	.word	0x080098a0

08007b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00a      	beq.n	8007b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba2:	f003 0302 	and.w	r3, r3, #2
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc4:	f003 0304 	and.w	r3, r3, #4
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be6:	f003 0308 	and.w	r3, r3, #8
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d01a      	beq.n	8007c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c72:	d10a      	bne.n	8007c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	605a      	str	r2, [r3, #4]
  }
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b098      	sub	sp, #96	; 0x60
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cc8:	f7fa f852 	bl	8001d70 <HAL_GetTick>
 8007ccc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0308 	and.w	r3, r3, #8
 8007cd8:	2b08      	cmp	r3, #8
 8007cda:	d12f      	bne.n	8007d3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f88e 	bl	8007e0c <UART_WaitOnFlagUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d022      	beq.n	8007d3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d0a:	653b      	str	r3, [r7, #80]	; 0x50
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d14:	647b      	str	r3, [r7, #68]	; 0x44
 8007d16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d1c:	e841 2300 	strex	r3, r2, [r1]
 8007d20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e6      	bne.n	8007cf6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e063      	b.n	8007e04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	d149      	bne.n	8007dde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d52:	2200      	movs	r2, #0
 8007d54:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f857 	bl	8007e0c <UART_WaitOnFlagUntilTimeout>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d03c      	beq.n	8007dde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	e853 3f00 	ldrex	r3, [r3]
 8007d70:	623b      	str	r3, [r7, #32]
   return(result);
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d82:	633b      	str	r3, [r7, #48]	; 0x30
 8007d84:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e6      	bne.n	8007d64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3308      	adds	r3, #8
 8007d9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f023 0301 	bic.w	r3, r3, #1
 8007dac:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3308      	adds	r3, #8
 8007db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007db6:	61fa      	str	r2, [r7, #28]
 8007db8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	69b9      	ldr	r1, [r7, #24]
 8007dbc:	69fa      	ldr	r2, [r7, #28]
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	617b      	str	r3, [r7, #20]
   return(result);
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e5      	bne.n	8007d96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e012      	b.n	8007e04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2220      	movs	r2, #32
 8007de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3758      	adds	r7, #88	; 0x58
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e1c:	e049      	b.n	8007eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e24:	d045      	beq.n	8007eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e26:	f7f9 ffa3 	bl	8001d70 <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d302      	bcc.n	8007e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e048      	b.n	8007ed2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0304 	and.w	r3, r3, #4
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d031      	beq.n	8007eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	f003 0308 	and.w	r3, r3, #8
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d110      	bne.n	8007e7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2208      	movs	r2, #8
 8007e62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 f95b 	bl	8008120 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2208      	movs	r2, #8
 8007e6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e029      	b.n	8007ed2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69db      	ldr	r3, [r3, #28]
 8007e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e8c:	d111      	bne.n	8007eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 f941 	bl	8008120 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e00f      	b.n	8007ed2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69da      	ldr	r2, [r3, #28]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	4013      	ands	r3, r2
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	bf0c      	ite	eq
 8007ec2:	2301      	moveq	r3, #1
 8007ec4:	2300      	movne	r3, #0
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	461a      	mov	r2, r3
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d0a6      	beq.n	8007e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b0a3      	sub	sp, #140	; 0x8c
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	88fa      	ldrh	r2, [r7, #6]
 8007ef4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	88fa      	ldrh	r2, [r7, #6]
 8007efc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f0e:	d10e      	bne.n	8007f2e <UART_Start_Receive_IT+0x52>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d105      	bne.n	8007f24 <UART_Start_Receive_IT+0x48>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007f1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f22:	e02d      	b.n	8007f80 <UART_Start_Receive_IT+0xa4>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	22ff      	movs	r2, #255	; 0xff
 8007f28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f2c:	e028      	b.n	8007f80 <UART_Start_Receive_IT+0xa4>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10d      	bne.n	8007f52 <UART_Start_Receive_IT+0x76>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d104      	bne.n	8007f48 <UART_Start_Receive_IT+0x6c>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	22ff      	movs	r2, #255	; 0xff
 8007f42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f46:	e01b      	b.n	8007f80 <UART_Start_Receive_IT+0xa4>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	227f      	movs	r2, #127	; 0x7f
 8007f4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f50:	e016      	b.n	8007f80 <UART_Start_Receive_IT+0xa4>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f5a:	d10d      	bne.n	8007f78 <UART_Start_Receive_IT+0x9c>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d104      	bne.n	8007f6e <UART_Start_Receive_IT+0x92>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	227f      	movs	r2, #127	; 0x7f
 8007f68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f6c:	e008      	b.n	8007f80 <UART_Start_Receive_IT+0xa4>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	223f      	movs	r2, #63	; 0x3f
 8007f72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f76:	e003      	b.n	8007f80 <UART_Start_Receive_IT+0xa4>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2222      	movs	r2, #34	; 0x22
 8007f8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3308      	adds	r3, #8
 8007f96:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f9a:	e853 3f00 	ldrex	r3, [r3]
 8007f9e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007fa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fa2:	f043 0301 	orr.w	r3, r3, #1
 8007fa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3308      	adds	r3, #8
 8007fb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007fb4:	673a      	str	r2, [r7, #112]	; 0x70
 8007fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007fba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007fbc:	e841 2300 	strex	r3, r2, [r1]
 8007fc0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007fc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e3      	bne.n	8007f90 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fd0:	d14f      	bne.n	8008072 <UART_Start_Receive_IT+0x196>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007fd8:	88fa      	ldrh	r2, [r7, #6]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d349      	bcc.n	8008072 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe6:	d107      	bne.n	8007ff8 <UART_Start_Receive_IT+0x11c>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d103      	bne.n	8007ff8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	4a47      	ldr	r2, [pc, #284]	; (8008110 <UART_Start_Receive_IT+0x234>)
 8007ff4:	675a      	str	r2, [r3, #116]	; 0x74
 8007ff6:	e002      	b.n	8007ffe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4a46      	ldr	r2, [pc, #280]	; (8008114 <UART_Start_Receive_IT+0x238>)
 8007ffc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d01a      	beq.n	800803c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800801a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008028:	65fb      	str	r3, [r7, #92]	; 0x5c
 800802a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800802e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e4      	bne.n	8008006 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3308      	adds	r3, #8
 8008042:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008046:	e853 3f00 	ldrex	r3, [r3]
 800804a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800804c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008052:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	3308      	adds	r3, #8
 800805a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800805c:	64ba      	str	r2, [r7, #72]	; 0x48
 800805e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008060:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008064:	e841 2300 	strex	r3, r2, [r1]
 8008068:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800806a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1e5      	bne.n	800803c <UART_Start_Receive_IT+0x160>
 8008070:	e046      	b.n	8008100 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800807a:	d107      	bne.n	800808c <UART_Start_Receive_IT+0x1b0>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d103      	bne.n	800808c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4a24      	ldr	r2, [pc, #144]	; (8008118 <UART_Start_Receive_IT+0x23c>)
 8008088:	675a      	str	r2, [r3, #116]	; 0x74
 800808a:	e002      	b.n	8008092 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4a23      	ldr	r2, [pc, #140]	; (800811c <UART_Start_Receive_IT+0x240>)
 8008090:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d019      	beq.n	80080ce <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a2:	e853 3f00 	ldrex	r3, [r3]
 80080a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80080ae:	677b      	str	r3, [r7, #116]	; 0x74
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	461a      	mov	r2, r3
 80080b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080b8:	637b      	str	r3, [r7, #52]	; 0x34
 80080ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080c0:	e841 2300 	strex	r3, r2, [r1]
 80080c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1e6      	bne.n	800809a <UART_Start_Receive_IT+0x1be>
 80080cc:	e018      	b.n	8008100 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	e853 3f00 	ldrex	r3, [r3]
 80080da:	613b      	str	r3, [r7, #16]
   return(result);
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	f043 0320 	orr.w	r3, r3, #32
 80080e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	461a      	mov	r2, r3
 80080ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ec:	623b      	str	r3, [r7, #32]
 80080ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f0:	69f9      	ldr	r1, [r7, #28]
 80080f2:	6a3a      	ldr	r2, [r7, #32]
 80080f4:	e841 2300 	strex	r3, r2, [r1]
 80080f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1e6      	bne.n	80080ce <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	378c      	adds	r7, #140	; 0x8c
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	08008941 	.word	0x08008941
 8008114:	080085e1 	.word	0x080085e1
 8008118:	08008429 	.word	0x08008429
 800811c:	08008271 	.word	0x08008271

08008120 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008120:	b480      	push	{r7}
 8008122:	b095      	sub	sp, #84	; 0x54
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008130:	e853 3f00 	ldrex	r3, [r3]
 8008134:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800813c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	461a      	mov	r2, r3
 8008144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008146:	643b      	str	r3, [r7, #64]	; 0x40
 8008148:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800814c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800814e:	e841 2300 	strex	r3, r2, [r1]
 8008152:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e6      	bne.n	8008128 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3308      	adds	r3, #8
 8008160:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	e853 3f00 	ldrex	r3, [r3]
 8008168:	61fb      	str	r3, [r7, #28]
   return(result);
 800816a:	69fa      	ldr	r2, [r7, #28]
 800816c:	4b1e      	ldr	r3, [pc, #120]	; (80081e8 <UART_EndRxTransfer+0xc8>)
 800816e:	4013      	ands	r3, r2
 8008170:	64bb      	str	r3, [r7, #72]	; 0x48
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3308      	adds	r3, #8
 8008178:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800817a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800817c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008182:	e841 2300 	strex	r3, r2, [r1]
 8008186:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1e5      	bne.n	800815a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008192:	2b01      	cmp	r3, #1
 8008194:	d118      	bne.n	80081c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	e853 3f00 	ldrex	r3, [r3]
 80081a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	f023 0310 	bic.w	r3, r3, #16
 80081aa:	647b      	str	r3, [r7, #68]	; 0x44
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	461a      	mov	r2, r3
 80081b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081b4:	61bb      	str	r3, [r7, #24]
 80081b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b8:	6979      	ldr	r1, [r7, #20]
 80081ba:	69ba      	ldr	r2, [r7, #24]
 80081bc:	e841 2300 	strex	r3, r2, [r1]
 80081c0:	613b      	str	r3, [r7, #16]
   return(result);
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1e6      	bne.n	8008196 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2220      	movs	r2, #32
 80081cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	675a      	str	r2, [r3, #116]	; 0x74
}
 80081dc:	bf00      	nop
 80081de:	3754      	adds	r7, #84	; 0x54
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr
 80081e8:	effffffe 	.word	0xeffffffe

080081ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f7fe fe30 	bl	8006e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008210:	bf00      	nop
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	60bb      	str	r3, [r7, #8]
   return(result);
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008234:	61fb      	str	r3, [r7, #28]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	61bb      	str	r3, [r7, #24]
 8008240:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	6979      	ldr	r1, [r7, #20]
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	613b      	str	r3, [r7, #16]
   return(result);
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e6      	bne.n	8008220 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2220      	movs	r2, #32
 8008256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7fe fdfb 	bl	8006e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008266:	bf00      	nop
 8008268:	3720      	adds	r7, #32
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
	...

08008270 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b09c      	sub	sp, #112	; 0x70
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800827e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008288:	2b22      	cmp	r3, #34	; 0x22
 800828a:	f040 80be 	bne.w	800840a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008294:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008298:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800829c:	b2d9      	uxtb	r1, r3
 800829e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a8:	400a      	ands	r2, r1
 80082aa:	b2d2      	uxtb	r2, r2
 80082ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b2:	1c5a      	adds	r2, r3, #1
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082be:	b29b      	uxth	r3, r3
 80082c0:	3b01      	subs	r3, #1
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f040 80a1 	bne.w	800841a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e0:	e853 3f00 	ldrex	r3, [r3]
 80082e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	461a      	mov	r2, r3
 80082f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80082f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082fe:	e841 2300 	strex	r3, r2, [r1]
 8008302:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1e6      	bne.n	80082d8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	3308      	adds	r3, #8
 8008310:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008314:	e853 3f00 	ldrex	r3, [r3]
 8008318:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800831a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831c:	f023 0301 	bic.w	r3, r3, #1
 8008320:	667b      	str	r3, [r7, #100]	; 0x64
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3308      	adds	r3, #8
 8008328:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800832a:	647a      	str	r2, [r7, #68]	; 0x44
 800832c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008332:	e841 2300 	strex	r3, r2, [r1]
 8008336:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1e5      	bne.n	800830a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2220      	movs	r2, #32
 8008342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a33      	ldr	r2, [pc, #204]	; (8008424 <UART_RxISR_8BIT+0x1b4>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d01f      	beq.n	800839c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d018      	beq.n	800839c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	623b      	str	r3, [r7, #32]
   return(result);
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800837e:	663b      	str	r3, [r7, #96]	; 0x60
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	461a      	mov	r2, r3
 8008386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008388:	633b      	str	r3, [r7, #48]	; 0x30
 800838a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800838e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008390:	e841 2300 	strex	r3, r2, [r1]
 8008394:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e6      	bne.n	800836a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d12e      	bne.n	8008402 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	e853 3f00 	ldrex	r3, [r3]
 80083b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0310 	bic.w	r3, r3, #16
 80083be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	461a      	mov	r2, r3
 80083c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083c8:	61fb      	str	r3, [r7, #28]
 80083ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083cc:	69b9      	ldr	r1, [r7, #24]
 80083ce:	69fa      	ldr	r2, [r7, #28]
 80083d0:	e841 2300 	strex	r3, r2, [r1]
 80083d4:	617b      	str	r3, [r7, #20]
   return(result);
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1e6      	bne.n	80083aa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	f003 0310 	and.w	r3, r3, #16
 80083e6:	2b10      	cmp	r3, #16
 80083e8:	d103      	bne.n	80083f2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2210      	movs	r2, #16
 80083f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7fe fd42 	bl	8006e84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008400:	e00b      	b.n	800841a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7f8 fad6 	bl	80009b4 <HAL_UART_RxCpltCallback>
}
 8008408:	e007      	b.n	800841a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	699a      	ldr	r2, [r3, #24]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f042 0208 	orr.w	r2, r2, #8
 8008418:	619a      	str	r2, [r3, #24]
}
 800841a:	bf00      	nop
 800841c:	3770      	adds	r7, #112	; 0x70
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	58000c00 	.word	0x58000c00

08008428 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b09c      	sub	sp, #112	; 0x70
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008436:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008440:	2b22      	cmp	r3, #34	; 0x22
 8008442:	f040 80be 	bne.w	80085c2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008454:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008456:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800845a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800845e:	4013      	ands	r3, r2
 8008460:	b29a      	uxth	r2, r3
 8008462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008464:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800846a:	1c9a      	adds	r2, r3, #2
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008476:	b29b      	uxth	r3, r3
 8008478:	3b01      	subs	r3, #1
 800847a:	b29a      	uxth	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008488:	b29b      	uxth	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	f040 80a1 	bne.w	80085d2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008498:	e853 3f00 	ldrex	r3, [r3]
 800849c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800849e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084a4:	667b      	str	r3, [r7, #100]	; 0x64
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084ae:	657b      	str	r3, [r7, #84]	; 0x54
 80084b0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80084bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e6      	bne.n	8008490 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3308      	adds	r3, #8
 80084c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	f023 0301 	bic.w	r3, r3, #1
 80084d8:	663b      	str	r3, [r7, #96]	; 0x60
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3308      	adds	r3, #8
 80084e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084e2:	643a      	str	r2, [r7, #64]	; 0x40
 80084e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084ea:	e841 2300 	strex	r3, r2, [r1]
 80084ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1e5      	bne.n	80084c2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2220      	movs	r2, #32
 80084fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a33      	ldr	r2, [pc, #204]	; (80085dc <UART_RxISR_16BIT+0x1b4>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d01f      	beq.n	8008554 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d018      	beq.n	8008554 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	e853 3f00 	ldrex	r3, [r3]
 800852e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008536:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	461a      	mov	r2, r3
 800853e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008542:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e6      	bne.n	8008522 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008558:	2b01      	cmp	r3, #1
 800855a:	d12e      	bne.n	80085ba <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	e853 3f00 	ldrex	r3, [r3]
 800856e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f023 0310 	bic.w	r3, r3, #16
 8008576:	65bb      	str	r3, [r7, #88]	; 0x58
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	461a      	mov	r2, r3
 800857e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008580:	61bb      	str	r3, [r7, #24]
 8008582:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008584:	6979      	ldr	r1, [r7, #20]
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	e841 2300 	strex	r3, r2, [r1]
 800858c:	613b      	str	r3, [r7, #16]
   return(result);
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1e6      	bne.n	8008562 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	69db      	ldr	r3, [r3, #28]
 800859a:	f003 0310 	and.w	r3, r3, #16
 800859e:	2b10      	cmp	r3, #16
 80085a0:	d103      	bne.n	80085aa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2210      	movs	r2, #16
 80085a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7fe fc66 	bl	8006e84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085b8:	e00b      	b.n	80085d2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7f8 f9fa 	bl	80009b4 <HAL_UART_RxCpltCallback>
}
 80085c0:	e007      	b.n	80085d2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	699a      	ldr	r2, [r3, #24]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f042 0208 	orr.w	r2, r2, #8
 80085d0:	619a      	str	r2, [r3, #24]
}
 80085d2:	bf00      	nop
 80085d4:	3770      	adds	r7, #112	; 0x70
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	58000c00 	.word	0x58000c00

080085e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b0ac      	sub	sp, #176	; 0xb0
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80085ee:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69db      	ldr	r3, [r3, #28]
 80085f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008616:	2b22      	cmp	r3, #34	; 0x22
 8008618:	f040 8180 	bne.w	800891c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008622:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008626:	e123      	b.n	8008870 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008632:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008636:	b2d9      	uxtb	r1, r3
 8008638:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800863c:	b2da      	uxtb	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008642:	400a      	ands	r2, r1
 8008644:	b2d2      	uxtb	r2, r2
 8008646:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800864c:	1c5a      	adds	r2, r3, #1
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008658:	b29b      	uxth	r3, r3
 800865a:	3b01      	subs	r3, #1
 800865c:	b29a      	uxth	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800866e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008672:	f003 0307 	and.w	r3, r3, #7
 8008676:	2b00      	cmp	r3, #0
 8008678:	d053      	beq.n	8008722 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800867a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	d011      	beq.n	80086aa <UART_RxISR_8BIT_FIFOEN+0xca>
 8008686:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800868a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00b      	beq.n	80086aa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2201      	movs	r2, #1
 8008698:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a0:	f043 0201 	orr.w	r2, r3, #1
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086ae:	f003 0302 	and.w	r3, r3, #2
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d011      	beq.n	80086da <UART_RxISR_8BIT_FIFOEN+0xfa>
 80086b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00b      	beq.n	80086da <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2202      	movs	r2, #2
 80086c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d0:	f043 0204 	orr.w	r2, r3, #4
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086de:	f003 0304 	and.w	r3, r3, #4
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d011      	beq.n	800870a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80086e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00b      	beq.n	800870a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2204      	movs	r2, #4
 80086f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008700:	f043 0202 	orr.w	r2, r3, #2
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008710:	2b00      	cmp	r3, #0
 8008712:	d006      	beq.n	8008722 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7fe fbab 	bl	8006e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008728:	b29b      	uxth	r3, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	f040 80a0 	bne.w	8008870 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008736:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008738:	e853 3f00 	ldrex	r3, [r3]
 800873c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800873e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	461a      	mov	r2, r3
 800874e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008752:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008754:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008756:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008758:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800875a:	e841 2300 	strex	r3, r2, [r1]
 800875e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1e4      	bne.n	8008730 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3308      	adds	r3, #8
 800876c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008776:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008778:	4b6e      	ldr	r3, [pc, #440]	; (8008934 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800877a:	4013      	ands	r3, r2
 800877c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3308      	adds	r3, #8
 8008786:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800878a:	66ba      	str	r2, [r7, #104]	; 0x68
 800878c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008790:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008792:	e841 2300 	strex	r3, r2, [r1]
 8008796:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1e3      	bne.n	8008766 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2220      	movs	r2, #32
 80087a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a60      	ldr	r2, [pc, #384]	; (8008938 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d021      	beq.n	8008800 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d01a      	beq.n	8008800 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d2:	e853 3f00 	ldrex	r3, [r3]
 80087d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80087d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087ec:	657b      	str	r3, [r7, #84]	; 0x54
 80087ee:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087f4:	e841 2300 	strex	r3, r2, [r1]
 80087f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80087fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e4      	bne.n	80087ca <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008804:	2b01      	cmp	r3, #1
 8008806:	d130      	bne.n	800886a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008816:	e853 3f00 	ldrex	r3, [r3]
 800881a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800881c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881e:	f023 0310 	bic.w	r3, r3, #16
 8008822:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008830:	643b      	str	r3, [r7, #64]	; 0x40
 8008832:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008834:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008836:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008838:	e841 2300 	strex	r3, r2, [r1]
 800883c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800883e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1e4      	bne.n	800880e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	f003 0310 	and.w	r3, r3, #16
 800884e:	2b10      	cmp	r3, #16
 8008850:	d103      	bne.n	800885a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2210      	movs	r2, #16
 8008858:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7fe fb0e 	bl	8006e84 <HAL_UARTEx_RxEventCallback>
 8008868:	e002      	b.n	8008870 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7f8 f8a2 	bl	80009b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008870:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008874:	2b00      	cmp	r3, #0
 8008876:	d006      	beq.n	8008886 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8008878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800887c:	f003 0320 	and.w	r3, r3, #32
 8008880:	2b00      	cmp	r3, #0
 8008882:	f47f aed1 	bne.w	8008628 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800888c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008890:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008894:	2b00      	cmp	r3, #0
 8008896:	d049      	beq.n	800892c <UART_RxISR_8BIT_FIFOEN+0x34c>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800889e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d242      	bcs.n	800892c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3308      	adds	r3, #8
 80088ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ae:	6a3b      	ldr	r3, [r7, #32]
 80088b0:	e853 3f00 	ldrex	r3, [r3]
 80088b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3308      	adds	r3, #8
 80088c6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80088ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088d2:	e841 2300 	strex	r3, r2, [r1]
 80088d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1e3      	bne.n	80088a6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a16      	ldr	r2, [pc, #88]	; (800893c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80088e2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	e853 3f00 	ldrex	r3, [r3]
 80088f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	f043 0320 	orr.w	r3, r3, #32
 80088f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008906:	61bb      	str	r3, [r7, #24]
 8008908:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890a:	6979      	ldr	r1, [r7, #20]
 800890c:	69ba      	ldr	r2, [r7, #24]
 800890e:	e841 2300 	strex	r3, r2, [r1]
 8008912:	613b      	str	r3, [r7, #16]
   return(result);
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1e4      	bne.n	80088e4 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800891a:	e007      	b.n	800892c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f042 0208 	orr.w	r2, r2, #8
 800892a:	619a      	str	r2, [r3, #24]
}
 800892c:	bf00      	nop
 800892e:	37b0      	adds	r7, #176	; 0xb0
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	effffffe 	.word	0xeffffffe
 8008938:	58000c00 	.word	0x58000c00
 800893c:	08008271 	.word	0x08008271

08008940 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b0ae      	sub	sp, #184	; 0xb8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800894e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	69db      	ldr	r3, [r3, #28]
 8008958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008976:	2b22      	cmp	r3, #34	; 0x22
 8008978:	f040 8184 	bne.w	8008c84 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008982:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008986:	e127      	b.n	8008bd8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800899a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800899e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80089a2:	4013      	ands	r3, r2
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089b0:	1c9a      	adds	r2, r3, #2
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089bc:	b29b      	uxth	r3, r3
 80089be:	3b01      	subs	r3, #1
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80089d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089d6:	f003 0307 	and.w	r3, r3, #7
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d053      	beq.n	8008a86 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80089de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d011      	beq.n	8008a0e <UART_RxISR_16BIT_FIFOEN+0xce>
 80089ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00b      	beq.n	8008a0e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2201      	movs	r2, #1
 80089fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a04:	f043 0201 	orr.w	r2, r3, #1
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d011      	beq.n	8008a3e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008a1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00b      	beq.n	8008a3e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a34:	f043 0204 	orr.w	r2, r3, #4
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a42:	f003 0304 	and.w	r3, r3, #4
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d011      	beq.n	8008a6e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008a4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00b      	beq.n	8008a6e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2204      	movs	r2, #4
 8008a5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a64:	f043 0202 	orr.w	r2, r3, #2
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d006      	beq.n	8008a86 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7fe f9f9 	bl	8006e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	f040 80a2 	bne.w	8008bd8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a9c:	e853 3f00 	ldrex	r3, [r3]
 8008aa0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ab6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008aba:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008abe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ac2:	e841 2300 	strex	r3, r2, [r1]
 8008ac6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e2      	bne.n	8008a94 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3308      	adds	r3, #8
 8008ad4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ad8:	e853 3f00 	ldrex	r3, [r3]
 8008adc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ade:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ae0:	4b6e      	ldr	r3, [pc, #440]	; (8008c9c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	3308      	adds	r3, #8
 8008aee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008af2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008af4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008af8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008afa:	e841 2300 	strex	r3, r2, [r1]
 8008afe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e3      	bne.n	8008ace <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a60      	ldr	r2, [pc, #384]	; (8008ca0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d021      	beq.n	8008b68 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d01a      	beq.n	8008b68 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b3a:	e853 3f00 	ldrex	r3, [r3]
 8008b3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b54:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b56:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b5c:	e841 2300 	strex	r3, r2, [r1]
 8008b60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1e4      	bne.n	8008b32 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d130      	bne.n	8008bd2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7e:	e853 3f00 	ldrex	r3, [r3]
 8008b82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b86:	f023 0310 	bic.w	r3, r3, #16
 8008b8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b98:	647b      	str	r3, [r7, #68]	; 0x44
 8008b9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ba0:	e841 2300 	strex	r3, r2, [r1]
 8008ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e4      	bne.n	8008b76 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	f003 0310 	and.w	r3, r3, #16
 8008bb6:	2b10      	cmp	r3, #16
 8008bb8:	d103      	bne.n	8008bc2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2210      	movs	r2, #16
 8008bc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7fe f95a 	bl	8006e84 <HAL_UARTEx_RxEventCallback>
 8008bd0:	e002      	b.n	8008bd8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7f7 feee 	bl	80009b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008bd8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d006      	beq.n	8008bee <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008be0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008be4:	f003 0320 	and.w	r3, r3, #32
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f47f aecd 	bne.w	8008988 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bf4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008bf8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d049      	beq.n	8008c94 <UART_RxISR_16BIT_FIFOEN+0x354>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c06:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d242      	bcs.n	8008c94 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3308      	adds	r3, #8
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	e853 3f00 	ldrex	r3, [r3]
 8008c1c:	623b      	str	r3, [r7, #32]
   return(result);
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3308      	adds	r3, #8
 8008c2e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008c32:	633a      	str	r2, [r7, #48]	; 0x30
 8008c34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c3a:	e841 2300 	strex	r3, r2, [r1]
 8008c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1e3      	bne.n	8008c0e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a16      	ldr	r2, [pc, #88]	; (8008ca4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008c4a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	e853 3f00 	ldrex	r3, [r3]
 8008c58:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f043 0320 	orr.w	r3, r3, #32
 8008c60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c6e:	61fb      	str	r3, [r7, #28]
 8008c70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c72:	69b9      	ldr	r1, [r7, #24]
 8008c74:	69fa      	ldr	r2, [r7, #28]
 8008c76:	e841 2300 	strex	r3, r2, [r1]
 8008c7a:	617b      	str	r3, [r7, #20]
   return(result);
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1e4      	bne.n	8008c4c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c82:	e007      	b.n	8008c94 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	699a      	ldr	r2, [r3, #24]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f042 0208 	orr.w	r2, r2, #8
 8008c92:	619a      	str	r2, [r3, #24]
}
 8008c94:	bf00      	nop
 8008c96:	37b8      	adds	r7, #184	; 0xb8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	effffffe 	.word	0xeffffffe
 8008ca0:	58000c00 	.word	0x58000c00
 8008ca4:	08008429 	.word	0x08008429

08008ca8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d101      	bne.n	8008cfa <HAL_UARTEx_DisableFifoMode+0x16>
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	e027      	b.n	8008d4a <HAL_UARTEx_DisableFifoMode+0x66>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2224      	movs	r2, #36	; 0x24
 8008d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f022 0201 	bic.w	r2, r2, #1
 8008d20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d101      	bne.n	8008d6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	e02d      	b.n	8008dca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2224      	movs	r2, #36	; 0x24
 8008d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f022 0201 	bic.w	r2, r2, #1
 8008d94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	683a      	ldr	r2, [r7, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f850 	bl	8008e50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2220      	movs	r2, #32
 8008dbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d101      	bne.n	8008dea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008de6:	2302      	movs	r3, #2
 8008de8:	e02d      	b.n	8008e46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2224      	movs	r2, #36	; 0x24
 8008df6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f022 0201 	bic.w	r2, r2, #1
 8008e10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	430a      	orrs	r2, r1
 8008e24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f812 	bl	8008e50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2220      	movs	r2, #32
 8008e38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
	...

08008e50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d108      	bne.n	8008e72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e70:	e031      	b.n	8008ed6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e72:	2310      	movs	r3, #16
 8008e74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e76:	2310      	movs	r3, #16
 8008e78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	0e5b      	lsrs	r3, r3, #25
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	f003 0307 	and.w	r3, r3, #7
 8008e88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	0f5b      	lsrs	r3, r3, #29
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	f003 0307 	and.w	r3, r3, #7
 8008e98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e9a:	7bbb      	ldrb	r3, [r7, #14]
 8008e9c:	7b3a      	ldrb	r2, [r7, #12]
 8008e9e:	4911      	ldr	r1, [pc, #68]	; (8008ee4 <UARTEx_SetNbDataToProcess+0x94>)
 8008ea0:	5c8a      	ldrb	r2, [r1, r2]
 8008ea2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ea6:	7b3a      	ldrb	r2, [r7, #12]
 8008ea8:	490f      	ldr	r1, [pc, #60]	; (8008ee8 <UARTEx_SetNbDataToProcess+0x98>)
 8008eaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008eac:	fb93 f3f2 	sdiv	r3, r3, r2
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
 8008eba:	7b7a      	ldrb	r2, [r7, #13]
 8008ebc:	4909      	ldr	r1, [pc, #36]	; (8008ee4 <UARTEx_SetNbDataToProcess+0x94>)
 8008ebe:	5c8a      	ldrb	r2, [r1, r2]
 8008ec0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ec4:	7b7a      	ldrb	r2, [r7, #13]
 8008ec6:	4908      	ldr	r1, [pc, #32]	; (8008ee8 <UARTEx_SetNbDataToProcess+0x98>)
 8008ec8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008eca:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008ed6:	bf00      	nop
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	080098b8 	.word	0x080098b8
 8008ee8:	080098c0 	.word	0x080098c0

08008eec <siprintf>:
 8008eec:	b40e      	push	{r1, r2, r3}
 8008eee:	b500      	push	{lr}
 8008ef0:	b09c      	sub	sp, #112	; 0x70
 8008ef2:	ab1d      	add	r3, sp, #116	; 0x74
 8008ef4:	9002      	str	r0, [sp, #8]
 8008ef6:	9006      	str	r0, [sp, #24]
 8008ef8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008efc:	4809      	ldr	r0, [pc, #36]	; (8008f24 <siprintf+0x38>)
 8008efe:	9107      	str	r1, [sp, #28]
 8008f00:	9104      	str	r1, [sp, #16]
 8008f02:	4909      	ldr	r1, [pc, #36]	; (8008f28 <siprintf+0x3c>)
 8008f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f08:	9105      	str	r1, [sp, #20]
 8008f0a:	6800      	ldr	r0, [r0, #0]
 8008f0c:	9301      	str	r3, [sp, #4]
 8008f0e:	a902      	add	r1, sp, #8
 8008f10:	f000 f992 	bl	8009238 <_svfiprintf_r>
 8008f14:	9b02      	ldr	r3, [sp, #8]
 8008f16:	2200      	movs	r2, #0
 8008f18:	701a      	strb	r2, [r3, #0]
 8008f1a:	b01c      	add	sp, #112	; 0x70
 8008f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f20:	b003      	add	sp, #12
 8008f22:	4770      	bx	lr
 8008f24:	24000068 	.word	0x24000068
 8008f28:	ffff0208 	.word	0xffff0208

08008f2c <memset>:
 8008f2c:	4402      	add	r2, r0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d100      	bne.n	8008f36 <memset+0xa>
 8008f34:	4770      	bx	lr
 8008f36:	f803 1b01 	strb.w	r1, [r3], #1
 8008f3a:	e7f9      	b.n	8008f30 <memset+0x4>

08008f3c <__errno>:
 8008f3c:	4b01      	ldr	r3, [pc, #4]	; (8008f44 <__errno+0x8>)
 8008f3e:	6818      	ldr	r0, [r3, #0]
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	24000068 	.word	0x24000068

08008f48 <__libc_init_array>:
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	4d0d      	ldr	r5, [pc, #52]	; (8008f80 <__libc_init_array+0x38>)
 8008f4c:	4c0d      	ldr	r4, [pc, #52]	; (8008f84 <__libc_init_array+0x3c>)
 8008f4e:	1b64      	subs	r4, r4, r5
 8008f50:	10a4      	asrs	r4, r4, #2
 8008f52:	2600      	movs	r6, #0
 8008f54:	42a6      	cmp	r6, r4
 8008f56:	d109      	bne.n	8008f6c <__libc_init_array+0x24>
 8008f58:	4d0b      	ldr	r5, [pc, #44]	; (8008f88 <__libc_init_array+0x40>)
 8008f5a:	4c0c      	ldr	r4, [pc, #48]	; (8008f8c <__libc_init_array+0x44>)
 8008f5c:	f000 fc6a 	bl	8009834 <_init>
 8008f60:	1b64      	subs	r4, r4, r5
 8008f62:	10a4      	asrs	r4, r4, #2
 8008f64:	2600      	movs	r6, #0
 8008f66:	42a6      	cmp	r6, r4
 8008f68:	d105      	bne.n	8008f76 <__libc_init_array+0x2e>
 8008f6a:	bd70      	pop	{r4, r5, r6, pc}
 8008f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f70:	4798      	blx	r3
 8008f72:	3601      	adds	r6, #1
 8008f74:	e7ee      	b.n	8008f54 <__libc_init_array+0xc>
 8008f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f7a:	4798      	blx	r3
 8008f7c:	3601      	adds	r6, #1
 8008f7e:	e7f2      	b.n	8008f66 <__libc_init_array+0x1e>
 8008f80:	08009904 	.word	0x08009904
 8008f84:	08009904 	.word	0x08009904
 8008f88:	08009904 	.word	0x08009904
 8008f8c:	08009908 	.word	0x08009908

08008f90 <__retarget_lock_acquire_recursive>:
 8008f90:	4770      	bx	lr

08008f92 <__retarget_lock_release_recursive>:
 8008f92:	4770      	bx	lr

08008f94 <_free_r>:
 8008f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f96:	2900      	cmp	r1, #0
 8008f98:	d044      	beq.n	8009024 <_free_r+0x90>
 8008f9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f9e:	9001      	str	r0, [sp, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f1a1 0404 	sub.w	r4, r1, #4
 8008fa6:	bfb8      	it	lt
 8008fa8:	18e4      	addlt	r4, r4, r3
 8008faa:	f000 f8df 	bl	800916c <__malloc_lock>
 8008fae:	4a1e      	ldr	r2, [pc, #120]	; (8009028 <_free_r+0x94>)
 8008fb0:	9801      	ldr	r0, [sp, #4]
 8008fb2:	6813      	ldr	r3, [r2, #0]
 8008fb4:	b933      	cbnz	r3, 8008fc4 <_free_r+0x30>
 8008fb6:	6063      	str	r3, [r4, #4]
 8008fb8:	6014      	str	r4, [r2, #0]
 8008fba:	b003      	add	sp, #12
 8008fbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fc0:	f000 b8da 	b.w	8009178 <__malloc_unlock>
 8008fc4:	42a3      	cmp	r3, r4
 8008fc6:	d908      	bls.n	8008fda <_free_r+0x46>
 8008fc8:	6825      	ldr	r5, [r4, #0]
 8008fca:	1961      	adds	r1, r4, r5
 8008fcc:	428b      	cmp	r3, r1
 8008fce:	bf01      	itttt	eq
 8008fd0:	6819      	ldreq	r1, [r3, #0]
 8008fd2:	685b      	ldreq	r3, [r3, #4]
 8008fd4:	1949      	addeq	r1, r1, r5
 8008fd6:	6021      	streq	r1, [r4, #0]
 8008fd8:	e7ed      	b.n	8008fb6 <_free_r+0x22>
 8008fda:	461a      	mov	r2, r3
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	b10b      	cbz	r3, 8008fe4 <_free_r+0x50>
 8008fe0:	42a3      	cmp	r3, r4
 8008fe2:	d9fa      	bls.n	8008fda <_free_r+0x46>
 8008fe4:	6811      	ldr	r1, [r2, #0]
 8008fe6:	1855      	adds	r5, r2, r1
 8008fe8:	42a5      	cmp	r5, r4
 8008fea:	d10b      	bne.n	8009004 <_free_r+0x70>
 8008fec:	6824      	ldr	r4, [r4, #0]
 8008fee:	4421      	add	r1, r4
 8008ff0:	1854      	adds	r4, r2, r1
 8008ff2:	42a3      	cmp	r3, r4
 8008ff4:	6011      	str	r1, [r2, #0]
 8008ff6:	d1e0      	bne.n	8008fba <_free_r+0x26>
 8008ff8:	681c      	ldr	r4, [r3, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	6053      	str	r3, [r2, #4]
 8008ffe:	440c      	add	r4, r1
 8009000:	6014      	str	r4, [r2, #0]
 8009002:	e7da      	b.n	8008fba <_free_r+0x26>
 8009004:	d902      	bls.n	800900c <_free_r+0x78>
 8009006:	230c      	movs	r3, #12
 8009008:	6003      	str	r3, [r0, #0]
 800900a:	e7d6      	b.n	8008fba <_free_r+0x26>
 800900c:	6825      	ldr	r5, [r4, #0]
 800900e:	1961      	adds	r1, r4, r5
 8009010:	428b      	cmp	r3, r1
 8009012:	bf04      	itt	eq
 8009014:	6819      	ldreq	r1, [r3, #0]
 8009016:	685b      	ldreq	r3, [r3, #4]
 8009018:	6063      	str	r3, [r4, #4]
 800901a:	bf04      	itt	eq
 800901c:	1949      	addeq	r1, r1, r5
 800901e:	6021      	streq	r1, [r4, #0]
 8009020:	6054      	str	r4, [r2, #4]
 8009022:	e7ca      	b.n	8008fba <_free_r+0x26>
 8009024:	b003      	add	sp, #12
 8009026:	bd30      	pop	{r4, r5, pc}
 8009028:	2400a03c 	.word	0x2400a03c

0800902c <sbrk_aligned>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	4e0e      	ldr	r6, [pc, #56]	; (8009068 <sbrk_aligned+0x3c>)
 8009030:	460c      	mov	r4, r1
 8009032:	6831      	ldr	r1, [r6, #0]
 8009034:	4605      	mov	r5, r0
 8009036:	b911      	cbnz	r1, 800903e <sbrk_aligned+0x12>
 8009038:	f000 fba6 	bl	8009788 <_sbrk_r>
 800903c:	6030      	str	r0, [r6, #0]
 800903e:	4621      	mov	r1, r4
 8009040:	4628      	mov	r0, r5
 8009042:	f000 fba1 	bl	8009788 <_sbrk_r>
 8009046:	1c43      	adds	r3, r0, #1
 8009048:	d00a      	beq.n	8009060 <sbrk_aligned+0x34>
 800904a:	1cc4      	adds	r4, r0, #3
 800904c:	f024 0403 	bic.w	r4, r4, #3
 8009050:	42a0      	cmp	r0, r4
 8009052:	d007      	beq.n	8009064 <sbrk_aligned+0x38>
 8009054:	1a21      	subs	r1, r4, r0
 8009056:	4628      	mov	r0, r5
 8009058:	f000 fb96 	bl	8009788 <_sbrk_r>
 800905c:	3001      	adds	r0, #1
 800905e:	d101      	bne.n	8009064 <sbrk_aligned+0x38>
 8009060:	f04f 34ff 	mov.w	r4, #4294967295
 8009064:	4620      	mov	r0, r4
 8009066:	bd70      	pop	{r4, r5, r6, pc}
 8009068:	2400a040 	.word	0x2400a040

0800906c <_malloc_r>:
 800906c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009070:	1ccd      	adds	r5, r1, #3
 8009072:	f025 0503 	bic.w	r5, r5, #3
 8009076:	3508      	adds	r5, #8
 8009078:	2d0c      	cmp	r5, #12
 800907a:	bf38      	it	cc
 800907c:	250c      	movcc	r5, #12
 800907e:	2d00      	cmp	r5, #0
 8009080:	4607      	mov	r7, r0
 8009082:	db01      	blt.n	8009088 <_malloc_r+0x1c>
 8009084:	42a9      	cmp	r1, r5
 8009086:	d905      	bls.n	8009094 <_malloc_r+0x28>
 8009088:	230c      	movs	r3, #12
 800908a:	603b      	str	r3, [r7, #0]
 800908c:	2600      	movs	r6, #0
 800908e:	4630      	mov	r0, r6
 8009090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009094:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009168 <_malloc_r+0xfc>
 8009098:	f000 f868 	bl	800916c <__malloc_lock>
 800909c:	f8d8 3000 	ldr.w	r3, [r8]
 80090a0:	461c      	mov	r4, r3
 80090a2:	bb5c      	cbnz	r4, 80090fc <_malloc_r+0x90>
 80090a4:	4629      	mov	r1, r5
 80090a6:	4638      	mov	r0, r7
 80090a8:	f7ff ffc0 	bl	800902c <sbrk_aligned>
 80090ac:	1c43      	adds	r3, r0, #1
 80090ae:	4604      	mov	r4, r0
 80090b0:	d155      	bne.n	800915e <_malloc_r+0xf2>
 80090b2:	f8d8 4000 	ldr.w	r4, [r8]
 80090b6:	4626      	mov	r6, r4
 80090b8:	2e00      	cmp	r6, #0
 80090ba:	d145      	bne.n	8009148 <_malloc_r+0xdc>
 80090bc:	2c00      	cmp	r4, #0
 80090be:	d048      	beq.n	8009152 <_malloc_r+0xe6>
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	4631      	mov	r1, r6
 80090c4:	4638      	mov	r0, r7
 80090c6:	eb04 0903 	add.w	r9, r4, r3
 80090ca:	f000 fb5d 	bl	8009788 <_sbrk_r>
 80090ce:	4581      	cmp	r9, r0
 80090d0:	d13f      	bne.n	8009152 <_malloc_r+0xe6>
 80090d2:	6821      	ldr	r1, [r4, #0]
 80090d4:	1a6d      	subs	r5, r5, r1
 80090d6:	4629      	mov	r1, r5
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff ffa7 	bl	800902c <sbrk_aligned>
 80090de:	3001      	adds	r0, #1
 80090e0:	d037      	beq.n	8009152 <_malloc_r+0xe6>
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	442b      	add	r3, r5
 80090e6:	6023      	str	r3, [r4, #0]
 80090e8:	f8d8 3000 	ldr.w	r3, [r8]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d038      	beq.n	8009162 <_malloc_r+0xf6>
 80090f0:	685a      	ldr	r2, [r3, #4]
 80090f2:	42a2      	cmp	r2, r4
 80090f4:	d12b      	bne.n	800914e <_malloc_r+0xe2>
 80090f6:	2200      	movs	r2, #0
 80090f8:	605a      	str	r2, [r3, #4]
 80090fa:	e00f      	b.n	800911c <_malloc_r+0xb0>
 80090fc:	6822      	ldr	r2, [r4, #0]
 80090fe:	1b52      	subs	r2, r2, r5
 8009100:	d41f      	bmi.n	8009142 <_malloc_r+0xd6>
 8009102:	2a0b      	cmp	r2, #11
 8009104:	d917      	bls.n	8009136 <_malloc_r+0xca>
 8009106:	1961      	adds	r1, r4, r5
 8009108:	42a3      	cmp	r3, r4
 800910a:	6025      	str	r5, [r4, #0]
 800910c:	bf18      	it	ne
 800910e:	6059      	strne	r1, [r3, #4]
 8009110:	6863      	ldr	r3, [r4, #4]
 8009112:	bf08      	it	eq
 8009114:	f8c8 1000 	streq.w	r1, [r8]
 8009118:	5162      	str	r2, [r4, r5]
 800911a:	604b      	str	r3, [r1, #4]
 800911c:	4638      	mov	r0, r7
 800911e:	f104 060b 	add.w	r6, r4, #11
 8009122:	f000 f829 	bl	8009178 <__malloc_unlock>
 8009126:	f026 0607 	bic.w	r6, r6, #7
 800912a:	1d23      	adds	r3, r4, #4
 800912c:	1af2      	subs	r2, r6, r3
 800912e:	d0ae      	beq.n	800908e <_malloc_r+0x22>
 8009130:	1b9b      	subs	r3, r3, r6
 8009132:	50a3      	str	r3, [r4, r2]
 8009134:	e7ab      	b.n	800908e <_malloc_r+0x22>
 8009136:	42a3      	cmp	r3, r4
 8009138:	6862      	ldr	r2, [r4, #4]
 800913a:	d1dd      	bne.n	80090f8 <_malloc_r+0x8c>
 800913c:	f8c8 2000 	str.w	r2, [r8]
 8009140:	e7ec      	b.n	800911c <_malloc_r+0xb0>
 8009142:	4623      	mov	r3, r4
 8009144:	6864      	ldr	r4, [r4, #4]
 8009146:	e7ac      	b.n	80090a2 <_malloc_r+0x36>
 8009148:	4634      	mov	r4, r6
 800914a:	6876      	ldr	r6, [r6, #4]
 800914c:	e7b4      	b.n	80090b8 <_malloc_r+0x4c>
 800914e:	4613      	mov	r3, r2
 8009150:	e7cc      	b.n	80090ec <_malloc_r+0x80>
 8009152:	230c      	movs	r3, #12
 8009154:	603b      	str	r3, [r7, #0]
 8009156:	4638      	mov	r0, r7
 8009158:	f000 f80e 	bl	8009178 <__malloc_unlock>
 800915c:	e797      	b.n	800908e <_malloc_r+0x22>
 800915e:	6025      	str	r5, [r4, #0]
 8009160:	e7dc      	b.n	800911c <_malloc_r+0xb0>
 8009162:	605b      	str	r3, [r3, #4]
 8009164:	deff      	udf	#255	; 0xff
 8009166:	bf00      	nop
 8009168:	2400a03c 	.word	0x2400a03c

0800916c <__malloc_lock>:
 800916c:	4801      	ldr	r0, [pc, #4]	; (8009174 <__malloc_lock+0x8>)
 800916e:	f7ff bf0f 	b.w	8008f90 <__retarget_lock_acquire_recursive>
 8009172:	bf00      	nop
 8009174:	2400a038 	.word	0x2400a038

08009178 <__malloc_unlock>:
 8009178:	4801      	ldr	r0, [pc, #4]	; (8009180 <__malloc_unlock+0x8>)
 800917a:	f7ff bf0a 	b.w	8008f92 <__retarget_lock_release_recursive>
 800917e:	bf00      	nop
 8009180:	2400a038 	.word	0x2400a038

08009184 <__ssputs_r>:
 8009184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009188:	688e      	ldr	r6, [r1, #8]
 800918a:	461f      	mov	r7, r3
 800918c:	42be      	cmp	r6, r7
 800918e:	680b      	ldr	r3, [r1, #0]
 8009190:	4682      	mov	sl, r0
 8009192:	460c      	mov	r4, r1
 8009194:	4690      	mov	r8, r2
 8009196:	d82c      	bhi.n	80091f2 <__ssputs_r+0x6e>
 8009198:	898a      	ldrh	r2, [r1, #12]
 800919a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800919e:	d026      	beq.n	80091ee <__ssputs_r+0x6a>
 80091a0:	6965      	ldr	r5, [r4, #20]
 80091a2:	6909      	ldr	r1, [r1, #16]
 80091a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091a8:	eba3 0901 	sub.w	r9, r3, r1
 80091ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091b0:	1c7b      	adds	r3, r7, #1
 80091b2:	444b      	add	r3, r9
 80091b4:	106d      	asrs	r5, r5, #1
 80091b6:	429d      	cmp	r5, r3
 80091b8:	bf38      	it	cc
 80091ba:	461d      	movcc	r5, r3
 80091bc:	0553      	lsls	r3, r2, #21
 80091be:	d527      	bpl.n	8009210 <__ssputs_r+0x8c>
 80091c0:	4629      	mov	r1, r5
 80091c2:	f7ff ff53 	bl	800906c <_malloc_r>
 80091c6:	4606      	mov	r6, r0
 80091c8:	b360      	cbz	r0, 8009224 <__ssputs_r+0xa0>
 80091ca:	6921      	ldr	r1, [r4, #16]
 80091cc:	464a      	mov	r2, r9
 80091ce:	f000 faeb 	bl	80097a8 <memcpy>
 80091d2:	89a3      	ldrh	r3, [r4, #12]
 80091d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091dc:	81a3      	strh	r3, [r4, #12]
 80091de:	6126      	str	r6, [r4, #16]
 80091e0:	6165      	str	r5, [r4, #20]
 80091e2:	444e      	add	r6, r9
 80091e4:	eba5 0509 	sub.w	r5, r5, r9
 80091e8:	6026      	str	r6, [r4, #0]
 80091ea:	60a5      	str	r5, [r4, #8]
 80091ec:	463e      	mov	r6, r7
 80091ee:	42be      	cmp	r6, r7
 80091f0:	d900      	bls.n	80091f4 <__ssputs_r+0x70>
 80091f2:	463e      	mov	r6, r7
 80091f4:	6820      	ldr	r0, [r4, #0]
 80091f6:	4632      	mov	r2, r6
 80091f8:	4641      	mov	r1, r8
 80091fa:	f000 faab 	bl	8009754 <memmove>
 80091fe:	68a3      	ldr	r3, [r4, #8]
 8009200:	1b9b      	subs	r3, r3, r6
 8009202:	60a3      	str	r3, [r4, #8]
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	4433      	add	r3, r6
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	2000      	movs	r0, #0
 800920c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009210:	462a      	mov	r2, r5
 8009212:	f000 fad7 	bl	80097c4 <_realloc_r>
 8009216:	4606      	mov	r6, r0
 8009218:	2800      	cmp	r0, #0
 800921a:	d1e0      	bne.n	80091de <__ssputs_r+0x5a>
 800921c:	6921      	ldr	r1, [r4, #16]
 800921e:	4650      	mov	r0, sl
 8009220:	f7ff feb8 	bl	8008f94 <_free_r>
 8009224:	230c      	movs	r3, #12
 8009226:	f8ca 3000 	str.w	r3, [sl]
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009230:	81a3      	strh	r3, [r4, #12]
 8009232:	f04f 30ff 	mov.w	r0, #4294967295
 8009236:	e7e9      	b.n	800920c <__ssputs_r+0x88>

08009238 <_svfiprintf_r>:
 8009238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	4698      	mov	r8, r3
 800923e:	898b      	ldrh	r3, [r1, #12]
 8009240:	061b      	lsls	r3, r3, #24
 8009242:	b09d      	sub	sp, #116	; 0x74
 8009244:	4607      	mov	r7, r0
 8009246:	460d      	mov	r5, r1
 8009248:	4614      	mov	r4, r2
 800924a:	d50e      	bpl.n	800926a <_svfiprintf_r+0x32>
 800924c:	690b      	ldr	r3, [r1, #16]
 800924e:	b963      	cbnz	r3, 800926a <_svfiprintf_r+0x32>
 8009250:	2140      	movs	r1, #64	; 0x40
 8009252:	f7ff ff0b 	bl	800906c <_malloc_r>
 8009256:	6028      	str	r0, [r5, #0]
 8009258:	6128      	str	r0, [r5, #16]
 800925a:	b920      	cbnz	r0, 8009266 <_svfiprintf_r+0x2e>
 800925c:	230c      	movs	r3, #12
 800925e:	603b      	str	r3, [r7, #0]
 8009260:	f04f 30ff 	mov.w	r0, #4294967295
 8009264:	e0d0      	b.n	8009408 <_svfiprintf_r+0x1d0>
 8009266:	2340      	movs	r3, #64	; 0x40
 8009268:	616b      	str	r3, [r5, #20]
 800926a:	2300      	movs	r3, #0
 800926c:	9309      	str	r3, [sp, #36]	; 0x24
 800926e:	2320      	movs	r3, #32
 8009270:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009274:	f8cd 800c 	str.w	r8, [sp, #12]
 8009278:	2330      	movs	r3, #48	; 0x30
 800927a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009420 <_svfiprintf_r+0x1e8>
 800927e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009282:	f04f 0901 	mov.w	r9, #1
 8009286:	4623      	mov	r3, r4
 8009288:	469a      	mov	sl, r3
 800928a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800928e:	b10a      	cbz	r2, 8009294 <_svfiprintf_r+0x5c>
 8009290:	2a25      	cmp	r2, #37	; 0x25
 8009292:	d1f9      	bne.n	8009288 <_svfiprintf_r+0x50>
 8009294:	ebba 0b04 	subs.w	fp, sl, r4
 8009298:	d00b      	beq.n	80092b2 <_svfiprintf_r+0x7a>
 800929a:	465b      	mov	r3, fp
 800929c:	4622      	mov	r2, r4
 800929e:	4629      	mov	r1, r5
 80092a0:	4638      	mov	r0, r7
 80092a2:	f7ff ff6f 	bl	8009184 <__ssputs_r>
 80092a6:	3001      	adds	r0, #1
 80092a8:	f000 80a9 	beq.w	80093fe <_svfiprintf_r+0x1c6>
 80092ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ae:	445a      	add	r2, fp
 80092b0:	9209      	str	r2, [sp, #36]	; 0x24
 80092b2:	f89a 3000 	ldrb.w	r3, [sl]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 80a1 	beq.w	80093fe <_svfiprintf_r+0x1c6>
 80092bc:	2300      	movs	r3, #0
 80092be:	f04f 32ff 	mov.w	r2, #4294967295
 80092c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092c6:	f10a 0a01 	add.w	sl, sl, #1
 80092ca:	9304      	str	r3, [sp, #16]
 80092cc:	9307      	str	r3, [sp, #28]
 80092ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092d2:	931a      	str	r3, [sp, #104]	; 0x68
 80092d4:	4654      	mov	r4, sl
 80092d6:	2205      	movs	r2, #5
 80092d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092dc:	4850      	ldr	r0, [pc, #320]	; (8009420 <_svfiprintf_r+0x1e8>)
 80092de:	f7f7 f80f 	bl	8000300 <memchr>
 80092e2:	9a04      	ldr	r2, [sp, #16]
 80092e4:	b9d8      	cbnz	r0, 800931e <_svfiprintf_r+0xe6>
 80092e6:	06d0      	lsls	r0, r2, #27
 80092e8:	bf44      	itt	mi
 80092ea:	2320      	movmi	r3, #32
 80092ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092f0:	0711      	lsls	r1, r2, #28
 80092f2:	bf44      	itt	mi
 80092f4:	232b      	movmi	r3, #43	; 0x2b
 80092f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092fa:	f89a 3000 	ldrb.w	r3, [sl]
 80092fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009300:	d015      	beq.n	800932e <_svfiprintf_r+0xf6>
 8009302:	9a07      	ldr	r2, [sp, #28]
 8009304:	4654      	mov	r4, sl
 8009306:	2000      	movs	r0, #0
 8009308:	f04f 0c0a 	mov.w	ip, #10
 800930c:	4621      	mov	r1, r4
 800930e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009312:	3b30      	subs	r3, #48	; 0x30
 8009314:	2b09      	cmp	r3, #9
 8009316:	d94d      	bls.n	80093b4 <_svfiprintf_r+0x17c>
 8009318:	b1b0      	cbz	r0, 8009348 <_svfiprintf_r+0x110>
 800931a:	9207      	str	r2, [sp, #28]
 800931c:	e014      	b.n	8009348 <_svfiprintf_r+0x110>
 800931e:	eba0 0308 	sub.w	r3, r0, r8
 8009322:	fa09 f303 	lsl.w	r3, r9, r3
 8009326:	4313      	orrs	r3, r2
 8009328:	9304      	str	r3, [sp, #16]
 800932a:	46a2      	mov	sl, r4
 800932c:	e7d2      	b.n	80092d4 <_svfiprintf_r+0x9c>
 800932e:	9b03      	ldr	r3, [sp, #12]
 8009330:	1d19      	adds	r1, r3, #4
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	9103      	str	r1, [sp, #12]
 8009336:	2b00      	cmp	r3, #0
 8009338:	bfbb      	ittet	lt
 800933a:	425b      	neglt	r3, r3
 800933c:	f042 0202 	orrlt.w	r2, r2, #2
 8009340:	9307      	strge	r3, [sp, #28]
 8009342:	9307      	strlt	r3, [sp, #28]
 8009344:	bfb8      	it	lt
 8009346:	9204      	strlt	r2, [sp, #16]
 8009348:	7823      	ldrb	r3, [r4, #0]
 800934a:	2b2e      	cmp	r3, #46	; 0x2e
 800934c:	d10c      	bne.n	8009368 <_svfiprintf_r+0x130>
 800934e:	7863      	ldrb	r3, [r4, #1]
 8009350:	2b2a      	cmp	r3, #42	; 0x2a
 8009352:	d134      	bne.n	80093be <_svfiprintf_r+0x186>
 8009354:	9b03      	ldr	r3, [sp, #12]
 8009356:	1d1a      	adds	r2, r3, #4
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	9203      	str	r2, [sp, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	bfb8      	it	lt
 8009360:	f04f 33ff 	movlt.w	r3, #4294967295
 8009364:	3402      	adds	r4, #2
 8009366:	9305      	str	r3, [sp, #20]
 8009368:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009430 <_svfiprintf_r+0x1f8>
 800936c:	7821      	ldrb	r1, [r4, #0]
 800936e:	2203      	movs	r2, #3
 8009370:	4650      	mov	r0, sl
 8009372:	f7f6 ffc5 	bl	8000300 <memchr>
 8009376:	b138      	cbz	r0, 8009388 <_svfiprintf_r+0x150>
 8009378:	9b04      	ldr	r3, [sp, #16]
 800937a:	eba0 000a 	sub.w	r0, r0, sl
 800937e:	2240      	movs	r2, #64	; 0x40
 8009380:	4082      	lsls	r2, r0
 8009382:	4313      	orrs	r3, r2
 8009384:	3401      	adds	r4, #1
 8009386:	9304      	str	r3, [sp, #16]
 8009388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938c:	4825      	ldr	r0, [pc, #148]	; (8009424 <_svfiprintf_r+0x1ec>)
 800938e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009392:	2206      	movs	r2, #6
 8009394:	f7f6 ffb4 	bl	8000300 <memchr>
 8009398:	2800      	cmp	r0, #0
 800939a:	d038      	beq.n	800940e <_svfiprintf_r+0x1d6>
 800939c:	4b22      	ldr	r3, [pc, #136]	; (8009428 <_svfiprintf_r+0x1f0>)
 800939e:	bb1b      	cbnz	r3, 80093e8 <_svfiprintf_r+0x1b0>
 80093a0:	9b03      	ldr	r3, [sp, #12]
 80093a2:	3307      	adds	r3, #7
 80093a4:	f023 0307 	bic.w	r3, r3, #7
 80093a8:	3308      	adds	r3, #8
 80093aa:	9303      	str	r3, [sp, #12]
 80093ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ae:	4433      	add	r3, r6
 80093b0:	9309      	str	r3, [sp, #36]	; 0x24
 80093b2:	e768      	b.n	8009286 <_svfiprintf_r+0x4e>
 80093b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80093b8:	460c      	mov	r4, r1
 80093ba:	2001      	movs	r0, #1
 80093bc:	e7a6      	b.n	800930c <_svfiprintf_r+0xd4>
 80093be:	2300      	movs	r3, #0
 80093c0:	3401      	adds	r4, #1
 80093c2:	9305      	str	r3, [sp, #20]
 80093c4:	4619      	mov	r1, r3
 80093c6:	f04f 0c0a 	mov.w	ip, #10
 80093ca:	4620      	mov	r0, r4
 80093cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093d0:	3a30      	subs	r2, #48	; 0x30
 80093d2:	2a09      	cmp	r2, #9
 80093d4:	d903      	bls.n	80093de <_svfiprintf_r+0x1a6>
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d0c6      	beq.n	8009368 <_svfiprintf_r+0x130>
 80093da:	9105      	str	r1, [sp, #20]
 80093dc:	e7c4      	b.n	8009368 <_svfiprintf_r+0x130>
 80093de:	fb0c 2101 	mla	r1, ip, r1, r2
 80093e2:	4604      	mov	r4, r0
 80093e4:	2301      	movs	r3, #1
 80093e6:	e7f0      	b.n	80093ca <_svfiprintf_r+0x192>
 80093e8:	ab03      	add	r3, sp, #12
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	462a      	mov	r2, r5
 80093ee:	4b0f      	ldr	r3, [pc, #60]	; (800942c <_svfiprintf_r+0x1f4>)
 80093f0:	a904      	add	r1, sp, #16
 80093f2:	4638      	mov	r0, r7
 80093f4:	f3af 8000 	nop.w
 80093f8:	1c42      	adds	r2, r0, #1
 80093fa:	4606      	mov	r6, r0
 80093fc:	d1d6      	bne.n	80093ac <_svfiprintf_r+0x174>
 80093fe:	89ab      	ldrh	r3, [r5, #12]
 8009400:	065b      	lsls	r3, r3, #25
 8009402:	f53f af2d 	bmi.w	8009260 <_svfiprintf_r+0x28>
 8009406:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009408:	b01d      	add	sp, #116	; 0x74
 800940a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940e:	ab03      	add	r3, sp, #12
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	462a      	mov	r2, r5
 8009414:	4b05      	ldr	r3, [pc, #20]	; (800942c <_svfiprintf_r+0x1f4>)
 8009416:	a904      	add	r1, sp, #16
 8009418:	4638      	mov	r0, r7
 800941a:	f000 f879 	bl	8009510 <_printf_i>
 800941e:	e7eb      	b.n	80093f8 <_svfiprintf_r+0x1c0>
 8009420:	080098c8 	.word	0x080098c8
 8009424:	080098d2 	.word	0x080098d2
 8009428:	00000000 	.word	0x00000000
 800942c:	08009185 	.word	0x08009185
 8009430:	080098ce 	.word	0x080098ce

08009434 <_printf_common>:
 8009434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009438:	4616      	mov	r6, r2
 800943a:	4699      	mov	r9, r3
 800943c:	688a      	ldr	r2, [r1, #8]
 800943e:	690b      	ldr	r3, [r1, #16]
 8009440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009444:	4293      	cmp	r3, r2
 8009446:	bfb8      	it	lt
 8009448:	4613      	movlt	r3, r2
 800944a:	6033      	str	r3, [r6, #0]
 800944c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009450:	4607      	mov	r7, r0
 8009452:	460c      	mov	r4, r1
 8009454:	b10a      	cbz	r2, 800945a <_printf_common+0x26>
 8009456:	3301      	adds	r3, #1
 8009458:	6033      	str	r3, [r6, #0]
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	0699      	lsls	r1, r3, #26
 800945e:	bf42      	ittt	mi
 8009460:	6833      	ldrmi	r3, [r6, #0]
 8009462:	3302      	addmi	r3, #2
 8009464:	6033      	strmi	r3, [r6, #0]
 8009466:	6825      	ldr	r5, [r4, #0]
 8009468:	f015 0506 	ands.w	r5, r5, #6
 800946c:	d106      	bne.n	800947c <_printf_common+0x48>
 800946e:	f104 0a19 	add.w	sl, r4, #25
 8009472:	68e3      	ldr	r3, [r4, #12]
 8009474:	6832      	ldr	r2, [r6, #0]
 8009476:	1a9b      	subs	r3, r3, r2
 8009478:	42ab      	cmp	r3, r5
 800947a:	dc26      	bgt.n	80094ca <_printf_common+0x96>
 800947c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009480:	1e13      	subs	r3, r2, #0
 8009482:	6822      	ldr	r2, [r4, #0]
 8009484:	bf18      	it	ne
 8009486:	2301      	movne	r3, #1
 8009488:	0692      	lsls	r2, r2, #26
 800948a:	d42b      	bmi.n	80094e4 <_printf_common+0xb0>
 800948c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009490:	4649      	mov	r1, r9
 8009492:	4638      	mov	r0, r7
 8009494:	47c0      	blx	r8
 8009496:	3001      	adds	r0, #1
 8009498:	d01e      	beq.n	80094d8 <_printf_common+0xa4>
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	6922      	ldr	r2, [r4, #16]
 800949e:	f003 0306 	and.w	r3, r3, #6
 80094a2:	2b04      	cmp	r3, #4
 80094a4:	bf02      	ittt	eq
 80094a6:	68e5      	ldreq	r5, [r4, #12]
 80094a8:	6833      	ldreq	r3, [r6, #0]
 80094aa:	1aed      	subeq	r5, r5, r3
 80094ac:	68a3      	ldr	r3, [r4, #8]
 80094ae:	bf0c      	ite	eq
 80094b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094b4:	2500      	movne	r5, #0
 80094b6:	4293      	cmp	r3, r2
 80094b8:	bfc4      	itt	gt
 80094ba:	1a9b      	subgt	r3, r3, r2
 80094bc:	18ed      	addgt	r5, r5, r3
 80094be:	2600      	movs	r6, #0
 80094c0:	341a      	adds	r4, #26
 80094c2:	42b5      	cmp	r5, r6
 80094c4:	d11a      	bne.n	80094fc <_printf_common+0xc8>
 80094c6:	2000      	movs	r0, #0
 80094c8:	e008      	b.n	80094dc <_printf_common+0xa8>
 80094ca:	2301      	movs	r3, #1
 80094cc:	4652      	mov	r2, sl
 80094ce:	4649      	mov	r1, r9
 80094d0:	4638      	mov	r0, r7
 80094d2:	47c0      	blx	r8
 80094d4:	3001      	adds	r0, #1
 80094d6:	d103      	bne.n	80094e0 <_printf_common+0xac>
 80094d8:	f04f 30ff 	mov.w	r0, #4294967295
 80094dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e0:	3501      	adds	r5, #1
 80094e2:	e7c6      	b.n	8009472 <_printf_common+0x3e>
 80094e4:	18e1      	adds	r1, r4, r3
 80094e6:	1c5a      	adds	r2, r3, #1
 80094e8:	2030      	movs	r0, #48	; 0x30
 80094ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094ee:	4422      	add	r2, r4
 80094f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094f8:	3302      	adds	r3, #2
 80094fa:	e7c7      	b.n	800948c <_printf_common+0x58>
 80094fc:	2301      	movs	r3, #1
 80094fe:	4622      	mov	r2, r4
 8009500:	4649      	mov	r1, r9
 8009502:	4638      	mov	r0, r7
 8009504:	47c0      	blx	r8
 8009506:	3001      	adds	r0, #1
 8009508:	d0e6      	beq.n	80094d8 <_printf_common+0xa4>
 800950a:	3601      	adds	r6, #1
 800950c:	e7d9      	b.n	80094c2 <_printf_common+0x8e>
	...

08009510 <_printf_i>:
 8009510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009514:	7e0f      	ldrb	r7, [r1, #24]
 8009516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009518:	2f78      	cmp	r7, #120	; 0x78
 800951a:	4691      	mov	r9, r2
 800951c:	4680      	mov	r8, r0
 800951e:	460c      	mov	r4, r1
 8009520:	469a      	mov	sl, r3
 8009522:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009526:	d807      	bhi.n	8009538 <_printf_i+0x28>
 8009528:	2f62      	cmp	r7, #98	; 0x62
 800952a:	d80a      	bhi.n	8009542 <_printf_i+0x32>
 800952c:	2f00      	cmp	r7, #0
 800952e:	f000 80d4 	beq.w	80096da <_printf_i+0x1ca>
 8009532:	2f58      	cmp	r7, #88	; 0x58
 8009534:	f000 80c0 	beq.w	80096b8 <_printf_i+0x1a8>
 8009538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800953c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009540:	e03a      	b.n	80095b8 <_printf_i+0xa8>
 8009542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009546:	2b15      	cmp	r3, #21
 8009548:	d8f6      	bhi.n	8009538 <_printf_i+0x28>
 800954a:	a101      	add	r1, pc, #4	; (adr r1, 8009550 <_printf_i+0x40>)
 800954c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009550:	080095a9 	.word	0x080095a9
 8009554:	080095bd 	.word	0x080095bd
 8009558:	08009539 	.word	0x08009539
 800955c:	08009539 	.word	0x08009539
 8009560:	08009539 	.word	0x08009539
 8009564:	08009539 	.word	0x08009539
 8009568:	080095bd 	.word	0x080095bd
 800956c:	08009539 	.word	0x08009539
 8009570:	08009539 	.word	0x08009539
 8009574:	08009539 	.word	0x08009539
 8009578:	08009539 	.word	0x08009539
 800957c:	080096c1 	.word	0x080096c1
 8009580:	080095e9 	.word	0x080095e9
 8009584:	0800967b 	.word	0x0800967b
 8009588:	08009539 	.word	0x08009539
 800958c:	08009539 	.word	0x08009539
 8009590:	080096e3 	.word	0x080096e3
 8009594:	08009539 	.word	0x08009539
 8009598:	080095e9 	.word	0x080095e9
 800959c:	08009539 	.word	0x08009539
 80095a0:	08009539 	.word	0x08009539
 80095a4:	08009683 	.word	0x08009683
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	1d1a      	adds	r2, r3, #4
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	602a      	str	r2, [r5, #0]
 80095b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095b8:	2301      	movs	r3, #1
 80095ba:	e09f      	b.n	80096fc <_printf_i+0x1ec>
 80095bc:	6820      	ldr	r0, [r4, #0]
 80095be:	682b      	ldr	r3, [r5, #0]
 80095c0:	0607      	lsls	r7, r0, #24
 80095c2:	f103 0104 	add.w	r1, r3, #4
 80095c6:	6029      	str	r1, [r5, #0]
 80095c8:	d501      	bpl.n	80095ce <_printf_i+0xbe>
 80095ca:	681e      	ldr	r6, [r3, #0]
 80095cc:	e003      	b.n	80095d6 <_printf_i+0xc6>
 80095ce:	0646      	lsls	r6, r0, #25
 80095d0:	d5fb      	bpl.n	80095ca <_printf_i+0xba>
 80095d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80095d6:	2e00      	cmp	r6, #0
 80095d8:	da03      	bge.n	80095e2 <_printf_i+0xd2>
 80095da:	232d      	movs	r3, #45	; 0x2d
 80095dc:	4276      	negs	r6, r6
 80095de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095e2:	485a      	ldr	r0, [pc, #360]	; (800974c <_printf_i+0x23c>)
 80095e4:	230a      	movs	r3, #10
 80095e6:	e012      	b.n	800960e <_printf_i+0xfe>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	6820      	ldr	r0, [r4, #0]
 80095ec:	1d19      	adds	r1, r3, #4
 80095ee:	6029      	str	r1, [r5, #0]
 80095f0:	0605      	lsls	r5, r0, #24
 80095f2:	d501      	bpl.n	80095f8 <_printf_i+0xe8>
 80095f4:	681e      	ldr	r6, [r3, #0]
 80095f6:	e002      	b.n	80095fe <_printf_i+0xee>
 80095f8:	0641      	lsls	r1, r0, #25
 80095fa:	d5fb      	bpl.n	80095f4 <_printf_i+0xe4>
 80095fc:	881e      	ldrh	r6, [r3, #0]
 80095fe:	4853      	ldr	r0, [pc, #332]	; (800974c <_printf_i+0x23c>)
 8009600:	2f6f      	cmp	r7, #111	; 0x6f
 8009602:	bf0c      	ite	eq
 8009604:	2308      	moveq	r3, #8
 8009606:	230a      	movne	r3, #10
 8009608:	2100      	movs	r1, #0
 800960a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800960e:	6865      	ldr	r5, [r4, #4]
 8009610:	60a5      	str	r5, [r4, #8]
 8009612:	2d00      	cmp	r5, #0
 8009614:	bfa2      	ittt	ge
 8009616:	6821      	ldrge	r1, [r4, #0]
 8009618:	f021 0104 	bicge.w	r1, r1, #4
 800961c:	6021      	strge	r1, [r4, #0]
 800961e:	b90e      	cbnz	r6, 8009624 <_printf_i+0x114>
 8009620:	2d00      	cmp	r5, #0
 8009622:	d04b      	beq.n	80096bc <_printf_i+0x1ac>
 8009624:	4615      	mov	r5, r2
 8009626:	fbb6 f1f3 	udiv	r1, r6, r3
 800962a:	fb03 6711 	mls	r7, r3, r1, r6
 800962e:	5dc7      	ldrb	r7, [r0, r7]
 8009630:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009634:	4637      	mov	r7, r6
 8009636:	42bb      	cmp	r3, r7
 8009638:	460e      	mov	r6, r1
 800963a:	d9f4      	bls.n	8009626 <_printf_i+0x116>
 800963c:	2b08      	cmp	r3, #8
 800963e:	d10b      	bne.n	8009658 <_printf_i+0x148>
 8009640:	6823      	ldr	r3, [r4, #0]
 8009642:	07de      	lsls	r6, r3, #31
 8009644:	d508      	bpl.n	8009658 <_printf_i+0x148>
 8009646:	6923      	ldr	r3, [r4, #16]
 8009648:	6861      	ldr	r1, [r4, #4]
 800964a:	4299      	cmp	r1, r3
 800964c:	bfde      	ittt	le
 800964e:	2330      	movle	r3, #48	; 0x30
 8009650:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009654:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009658:	1b52      	subs	r2, r2, r5
 800965a:	6122      	str	r2, [r4, #16]
 800965c:	f8cd a000 	str.w	sl, [sp]
 8009660:	464b      	mov	r3, r9
 8009662:	aa03      	add	r2, sp, #12
 8009664:	4621      	mov	r1, r4
 8009666:	4640      	mov	r0, r8
 8009668:	f7ff fee4 	bl	8009434 <_printf_common>
 800966c:	3001      	adds	r0, #1
 800966e:	d14a      	bne.n	8009706 <_printf_i+0x1f6>
 8009670:	f04f 30ff 	mov.w	r0, #4294967295
 8009674:	b004      	add	sp, #16
 8009676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	f043 0320 	orr.w	r3, r3, #32
 8009680:	6023      	str	r3, [r4, #0]
 8009682:	4833      	ldr	r0, [pc, #204]	; (8009750 <_printf_i+0x240>)
 8009684:	2778      	movs	r7, #120	; 0x78
 8009686:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800968a:	6823      	ldr	r3, [r4, #0]
 800968c:	6829      	ldr	r1, [r5, #0]
 800968e:	061f      	lsls	r7, r3, #24
 8009690:	f851 6b04 	ldr.w	r6, [r1], #4
 8009694:	d402      	bmi.n	800969c <_printf_i+0x18c>
 8009696:	065f      	lsls	r7, r3, #25
 8009698:	bf48      	it	mi
 800969a:	b2b6      	uxthmi	r6, r6
 800969c:	07df      	lsls	r7, r3, #31
 800969e:	bf48      	it	mi
 80096a0:	f043 0320 	orrmi.w	r3, r3, #32
 80096a4:	6029      	str	r1, [r5, #0]
 80096a6:	bf48      	it	mi
 80096a8:	6023      	strmi	r3, [r4, #0]
 80096aa:	b91e      	cbnz	r6, 80096b4 <_printf_i+0x1a4>
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	f023 0320 	bic.w	r3, r3, #32
 80096b2:	6023      	str	r3, [r4, #0]
 80096b4:	2310      	movs	r3, #16
 80096b6:	e7a7      	b.n	8009608 <_printf_i+0xf8>
 80096b8:	4824      	ldr	r0, [pc, #144]	; (800974c <_printf_i+0x23c>)
 80096ba:	e7e4      	b.n	8009686 <_printf_i+0x176>
 80096bc:	4615      	mov	r5, r2
 80096be:	e7bd      	b.n	800963c <_printf_i+0x12c>
 80096c0:	682b      	ldr	r3, [r5, #0]
 80096c2:	6826      	ldr	r6, [r4, #0]
 80096c4:	6961      	ldr	r1, [r4, #20]
 80096c6:	1d18      	adds	r0, r3, #4
 80096c8:	6028      	str	r0, [r5, #0]
 80096ca:	0635      	lsls	r5, r6, #24
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	d501      	bpl.n	80096d4 <_printf_i+0x1c4>
 80096d0:	6019      	str	r1, [r3, #0]
 80096d2:	e002      	b.n	80096da <_printf_i+0x1ca>
 80096d4:	0670      	lsls	r0, r6, #25
 80096d6:	d5fb      	bpl.n	80096d0 <_printf_i+0x1c0>
 80096d8:	8019      	strh	r1, [r3, #0]
 80096da:	2300      	movs	r3, #0
 80096dc:	6123      	str	r3, [r4, #16]
 80096de:	4615      	mov	r5, r2
 80096e0:	e7bc      	b.n	800965c <_printf_i+0x14c>
 80096e2:	682b      	ldr	r3, [r5, #0]
 80096e4:	1d1a      	adds	r2, r3, #4
 80096e6:	602a      	str	r2, [r5, #0]
 80096e8:	681d      	ldr	r5, [r3, #0]
 80096ea:	6862      	ldr	r2, [r4, #4]
 80096ec:	2100      	movs	r1, #0
 80096ee:	4628      	mov	r0, r5
 80096f0:	f7f6 fe06 	bl	8000300 <memchr>
 80096f4:	b108      	cbz	r0, 80096fa <_printf_i+0x1ea>
 80096f6:	1b40      	subs	r0, r0, r5
 80096f8:	6060      	str	r0, [r4, #4]
 80096fa:	6863      	ldr	r3, [r4, #4]
 80096fc:	6123      	str	r3, [r4, #16]
 80096fe:	2300      	movs	r3, #0
 8009700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009704:	e7aa      	b.n	800965c <_printf_i+0x14c>
 8009706:	6923      	ldr	r3, [r4, #16]
 8009708:	462a      	mov	r2, r5
 800970a:	4649      	mov	r1, r9
 800970c:	4640      	mov	r0, r8
 800970e:	47d0      	blx	sl
 8009710:	3001      	adds	r0, #1
 8009712:	d0ad      	beq.n	8009670 <_printf_i+0x160>
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	079b      	lsls	r3, r3, #30
 8009718:	d413      	bmi.n	8009742 <_printf_i+0x232>
 800971a:	68e0      	ldr	r0, [r4, #12]
 800971c:	9b03      	ldr	r3, [sp, #12]
 800971e:	4298      	cmp	r0, r3
 8009720:	bfb8      	it	lt
 8009722:	4618      	movlt	r0, r3
 8009724:	e7a6      	b.n	8009674 <_printf_i+0x164>
 8009726:	2301      	movs	r3, #1
 8009728:	4632      	mov	r2, r6
 800972a:	4649      	mov	r1, r9
 800972c:	4640      	mov	r0, r8
 800972e:	47d0      	blx	sl
 8009730:	3001      	adds	r0, #1
 8009732:	d09d      	beq.n	8009670 <_printf_i+0x160>
 8009734:	3501      	adds	r5, #1
 8009736:	68e3      	ldr	r3, [r4, #12]
 8009738:	9903      	ldr	r1, [sp, #12]
 800973a:	1a5b      	subs	r3, r3, r1
 800973c:	42ab      	cmp	r3, r5
 800973e:	dcf2      	bgt.n	8009726 <_printf_i+0x216>
 8009740:	e7eb      	b.n	800971a <_printf_i+0x20a>
 8009742:	2500      	movs	r5, #0
 8009744:	f104 0619 	add.w	r6, r4, #25
 8009748:	e7f5      	b.n	8009736 <_printf_i+0x226>
 800974a:	bf00      	nop
 800974c:	080098d9 	.word	0x080098d9
 8009750:	080098ea 	.word	0x080098ea

08009754 <memmove>:
 8009754:	4288      	cmp	r0, r1
 8009756:	b510      	push	{r4, lr}
 8009758:	eb01 0402 	add.w	r4, r1, r2
 800975c:	d902      	bls.n	8009764 <memmove+0x10>
 800975e:	4284      	cmp	r4, r0
 8009760:	4623      	mov	r3, r4
 8009762:	d807      	bhi.n	8009774 <memmove+0x20>
 8009764:	1e43      	subs	r3, r0, #1
 8009766:	42a1      	cmp	r1, r4
 8009768:	d008      	beq.n	800977c <memmove+0x28>
 800976a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800976e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009772:	e7f8      	b.n	8009766 <memmove+0x12>
 8009774:	4402      	add	r2, r0
 8009776:	4601      	mov	r1, r0
 8009778:	428a      	cmp	r2, r1
 800977a:	d100      	bne.n	800977e <memmove+0x2a>
 800977c:	bd10      	pop	{r4, pc}
 800977e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009786:	e7f7      	b.n	8009778 <memmove+0x24>

08009788 <_sbrk_r>:
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	4d06      	ldr	r5, [pc, #24]	; (80097a4 <_sbrk_r+0x1c>)
 800978c:	2300      	movs	r3, #0
 800978e:	4604      	mov	r4, r0
 8009790:	4608      	mov	r0, r1
 8009792:	602b      	str	r3, [r5, #0]
 8009794:	f7f8 f98e 	bl	8001ab4 <_sbrk>
 8009798:	1c43      	adds	r3, r0, #1
 800979a:	d102      	bne.n	80097a2 <_sbrk_r+0x1a>
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	b103      	cbz	r3, 80097a2 <_sbrk_r+0x1a>
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	bd38      	pop	{r3, r4, r5, pc}
 80097a4:	2400a034 	.word	0x2400a034

080097a8 <memcpy>:
 80097a8:	440a      	add	r2, r1
 80097aa:	4291      	cmp	r1, r2
 80097ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80097b0:	d100      	bne.n	80097b4 <memcpy+0xc>
 80097b2:	4770      	bx	lr
 80097b4:	b510      	push	{r4, lr}
 80097b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097be:	4291      	cmp	r1, r2
 80097c0:	d1f9      	bne.n	80097b6 <memcpy+0xe>
 80097c2:	bd10      	pop	{r4, pc}

080097c4 <_realloc_r>:
 80097c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c8:	4680      	mov	r8, r0
 80097ca:	4614      	mov	r4, r2
 80097cc:	460e      	mov	r6, r1
 80097ce:	b921      	cbnz	r1, 80097da <_realloc_r+0x16>
 80097d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097d4:	4611      	mov	r1, r2
 80097d6:	f7ff bc49 	b.w	800906c <_malloc_r>
 80097da:	b92a      	cbnz	r2, 80097e8 <_realloc_r+0x24>
 80097dc:	f7ff fbda 	bl	8008f94 <_free_r>
 80097e0:	4625      	mov	r5, r4
 80097e2:	4628      	mov	r0, r5
 80097e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097e8:	f000 f81b 	bl	8009822 <_malloc_usable_size_r>
 80097ec:	4284      	cmp	r4, r0
 80097ee:	4607      	mov	r7, r0
 80097f0:	d802      	bhi.n	80097f8 <_realloc_r+0x34>
 80097f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097f6:	d812      	bhi.n	800981e <_realloc_r+0x5a>
 80097f8:	4621      	mov	r1, r4
 80097fa:	4640      	mov	r0, r8
 80097fc:	f7ff fc36 	bl	800906c <_malloc_r>
 8009800:	4605      	mov	r5, r0
 8009802:	2800      	cmp	r0, #0
 8009804:	d0ed      	beq.n	80097e2 <_realloc_r+0x1e>
 8009806:	42bc      	cmp	r4, r7
 8009808:	4622      	mov	r2, r4
 800980a:	4631      	mov	r1, r6
 800980c:	bf28      	it	cs
 800980e:	463a      	movcs	r2, r7
 8009810:	f7ff ffca 	bl	80097a8 <memcpy>
 8009814:	4631      	mov	r1, r6
 8009816:	4640      	mov	r0, r8
 8009818:	f7ff fbbc 	bl	8008f94 <_free_r>
 800981c:	e7e1      	b.n	80097e2 <_realloc_r+0x1e>
 800981e:	4635      	mov	r5, r6
 8009820:	e7df      	b.n	80097e2 <_realloc_r+0x1e>

08009822 <_malloc_usable_size_r>:
 8009822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009826:	1f18      	subs	r0, r3, #4
 8009828:	2b00      	cmp	r3, #0
 800982a:	bfbc      	itt	lt
 800982c:	580b      	ldrlt	r3, [r1, r0]
 800982e:	18c0      	addlt	r0, r0, r3
 8009830:	4770      	bx	lr
	...

08009834 <_init>:
 8009834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009836:	bf00      	nop
 8009838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800983a:	bc08      	pop	{r3}
 800983c:	469e      	mov	lr, r3
 800983e:	4770      	bx	lr

08009840 <_fini>:
 8009840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009842:	bf00      	nop
 8009844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009846:	bc08      	pop	{r3}
 8009848:	469e      	mov	lr, r3
 800984a:	4770      	bx	lr
