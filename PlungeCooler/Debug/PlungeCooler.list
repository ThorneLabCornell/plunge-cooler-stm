
PlungeCooler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094f4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080097a4  080097a4  000197a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009814  08009814  00019814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800981c  0800981c  0001981c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009820  08009820  00019820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  08009824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000edf4  24000070  08009890  00020070  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400ee64  08009890  0002ee64  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 11 .debug_info   000166c4  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000028c4  00000000  00000000  000367a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001140  00000000  00000000  00039068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000d88  00000000  00000000  0003a1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00030bc4  00000000  00000000  0003af30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017f30  00000000  00000000  0006baf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001400cf  00000000  00000000  00083a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004e50  00000000  00000000  001c3af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001c8944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000070 	.word	0x24000070
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800978c 	.word	0x0800978c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000074 	.word	0x24000074
 80002ec:	0800978c 	.word	0x0800978c

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <dispense>:
 */
#include "globals.h"
#include "main.h"
#include <stdio.h>

void dispense(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
//	char a[] = "DEPOSITING!!!\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)a, strlen(a), HAL_MAX_DELAY);
	HAL_GPIO_WritePin(DROP_GPIO_Port, DROP_Pin, 1); //Dispense drop
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a8:	480e      	ldr	r0, [pc, #56]	; (80006e4 <dispense+0x48>)
 80006aa:	f002 fb61 	bl	8002d70 <HAL_GPIO_WritePin>
	for(int i=0; i<20000; i+=2) i--; 		//pseudo-delay. replace with a short timer setup is ideal
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	e005      	b.n	80006c0 <dispense+0x24>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3302      	adds	r3, #2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80006c6:	4293      	cmp	r3, r2
 80006c8:	ddf4      	ble.n	80006b4 <dispense+0x18>
	HAL_GPIO_WritePin(DROP_GPIO_Port, DROP_Pin, 0); //Dispense drop
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <dispense+0x48>)
 80006d2:	f002 fb4d 	bl	8002d70 <HAL_GPIO_WritePin>

	DEPOSITED = 1;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <dispense+0x4c>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58021000 	.word	0x58021000
 80006e8:	2400ec81 	.word	0x2400ec81

080006ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	db0b      	blt.n	8000716 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	f003 021f 	and.w	r2, r3, #31
 8000704:	4907      	ldr	r1, [pc, #28]	; (8000724 <__NVIC_EnableIRQ+0x38>)
 8000706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800070a:	095b      	lsrs	r3, r3, #5
 800070c:	2001      	movs	r0, #1
 800070e:	fa00 f202 	lsl.w	r2, r0, r2
 8000712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000e100 	.word	0xe000e100

08000728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db0a      	blt.n	8000752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	490c      	ldr	r1, [pc, #48]	; (8000774 <__NVIC_SetPriority+0x4c>)
 8000742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	440b      	add	r3, r1
 800074c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000750:	e00a      	b.n	8000768 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4908      	ldr	r1, [pc, #32]	; (8000778 <__NVIC_SetPriority+0x50>)
 8000758:	88fb      	ldrh	r3, [r7, #6]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	3b04      	subs	r3, #4
 8000760:	0112      	lsls	r2, r2, #4
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	440b      	add	r3, r1
 8000766:	761a      	strb	r2, [r3, #24]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <move_tilt_steps>:
uint8_t rx_flag = 0;
int panPos = 0;
int tiltPos = 0;

/*** MOTOR CONTROL FUNCTIONS ***/
void move_tilt_steps(uint32_t delay, uint8_t dir, uint32_t num_steps) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	460b      	mov	r3, r1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(TILT_EN_GPIO_Port, TILT_EN_Pin, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2104      	movs	r1, #4
 800078e:	481a      	ldr	r0, [pc, #104]	; (80007f8 <move_tilt_steps+0x7c>)
 8000790:	f002 faee 	bl	8002d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TILT_DIR_GPIO_Port, TILT_DIR_Pin, dir);
 8000794:	7afb      	ldrb	r3, [r7, #11]
 8000796:	461a      	mov	r2, r3
 8000798:	2102      	movs	r1, #2
 800079a:	4818      	ldr	r0, [pc, #96]	; (80007fc <move_tilt_steps+0x80>)
 800079c:	f002 fae8 	bl	8002d70 <HAL_GPIO_WritePin>
	for(int i=0; i<num_steps; i++) {
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e012      	b.n	80007cc <move_tilt_steps+0x50>
		HAL_GPIO_WritePin(TILT_STP_GPIO_Port, TILT_STP_Pin, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	2108      	movs	r1, #8
 80007aa:	4813      	ldr	r0, [pc, #76]	; (80007f8 <move_tilt_steps+0x7c>)
 80007ac:	f002 fae0 	bl	8002d70 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 80007b0:	68f8      	ldr	r0, [r7, #12]
 80007b2:	f001 fa95 	bl	8001ce0 <HAL_Delay>
		HAL_GPIO_WritePin(TILT_STP_GPIO_Port, TILT_STP_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2108      	movs	r1, #8
 80007ba:	480f      	ldr	r0, [pc, #60]	; (80007f8 <move_tilt_steps+0x7c>)
 80007bc:	f002 fad8 	bl	8002d70 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 80007c0:	68f8      	ldr	r0, [r7, #12]
 80007c2:	f001 fa8d 	bl	8001ce0 <HAL_Delay>
	for(int i=0; i<num_steps; i++) {
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	3301      	adds	r3, #1
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d8e8      	bhi.n	80007a6 <move_tilt_steps+0x2a>

	}
//	char b[] = "done steps\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

	tiltPos += num_steps * (1 - 2 * dir); // + if dir is 0, else -
 80007d4:	7afb      	ldrb	r3, [r7, #11]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	f1c3 0301 	rsb	r3, r3, #1
 80007dc:	461a      	mov	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	fb02 f303 	mul.w	r3, r2, r3
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <move_tilt_steps+0x84>)
 80007e6:	6812      	ldr	r2, [r2, #0]
 80007e8:	4413      	add	r3, r2
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <move_tilt_steps+0x84>)
 80007ee:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(TILT_EN_GPIO_Port, TILT_EN_Pin, 1);

}
 80007f0:	bf00      	nop
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	58020800 	.word	0x58020800
 80007fc:	58020400 	.word	0x58020400
 8000800:	2400ecf8 	.word	0x2400ecf8

08000804 <move_tilt_deg>:

void move_tilt_deg(uint32_t degrees, uint8_t dir) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
	move_tilt_steps(TILT_DEFAULT_DELAY, dir, degrees*TILT_DEG_TO_STEPS);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 8000816:	fb03 f202 	mul.w	r2, r3, r2
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	4619      	mov	r1, r3
 800081e:	2001      	movs	r0, #1
 8000820:	f7ff ffac 	bl	800077c <move_tilt_steps>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <move_pan_steps>:

void move_pan_steps(uint32_t delay, uint8_t dir, uint32_t num_steps) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	460b      	mov	r3, r1
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(PAN_EN_GPIO_Port, PAN_EN_Pin, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2101      	movs	r1, #1
 800083e:	481b      	ldr	r0, [pc, #108]	; (80008ac <move_pan_steps+0x80>)
 8000840:	f002 fa96 	bl	8002d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PAN_DIR_GPIO_Port, PAN_DIR_Pin, dir);
 8000844:	7afb      	ldrb	r3, [r7, #11]
 8000846:	461a      	mov	r2, r3
 8000848:	2108      	movs	r1, #8
 800084a:	4819      	ldr	r0, [pc, #100]	; (80008b0 <move_pan_steps+0x84>)
 800084c:	f002 fa90 	bl	8002d70 <HAL_GPIO_WritePin>
	for(int i=0; i<num_steps; i++) {
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e014      	b.n	8000880 <move_pan_steps+0x54>
		HAL_GPIO_WritePin(PAN_STP_GPIO_Port, PAN_STP_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800085c:	4815      	ldr	r0, [pc, #84]	; (80008b4 <move_pan_steps+0x88>)
 800085e:	f002 fa87 	bl	8002d70 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f001 fa3c 	bl	8001ce0 <HAL_Delay>
		HAL_GPIO_WritePin(PAN_STP_GPIO_Port, PAN_STP_Pin, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800086e:	4811      	ldr	r0, [pc, #68]	; (80008b4 <move_pan_steps+0x88>)
 8000870:	f002 fa7e 	bl	8002d70 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f001 fa33 	bl	8001ce0 <HAL_Delay>
	for(int i=0; i<num_steps; i++) {
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	429a      	cmp	r2, r3
 8000886:	d8e6      	bhi.n	8000856 <move_pan_steps+0x2a>
	}
//	char b[] = "done steps\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

	panPos += num_steps * (1 - 2 * dir); // + if dir is 0, else -
 8000888:	7afb      	ldrb	r3, [r7, #11]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	f1c3 0301 	rsb	r3, r3, #1
 8000890:	461a      	mov	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	fb02 f303 	mul.w	r3, r2, r3
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <move_pan_steps+0x8c>)
 800089a:	6812      	ldr	r2, [r2, #0]
 800089c:	4413      	add	r3, r2
 800089e:	461a      	mov	r2, r3
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <move_pan_steps+0x8c>)
 80008a2:	601a      	str	r2, [r3, #0]
//	HAL_GPIO_WritePin(PAN_EN_GPIO_Port, PAN_EN_Pin, 1);

}
 80008a4:	bf00      	nop
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	58020800 	.word	0x58020800
 80008b0:	58020000 	.word	0x58020000
 80008b4:	58021400 	.word	0x58021400
 80008b8:	2400ecf4 	.word	0x2400ecf4

080008bc <move_pan_deg>:

void move_pan_deg(uint32_t degrees, uint8_t dir) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
	move_pan_steps(PAN_DEFAULT_DELAY, dir, degrees*PAN_DEG_TO_STEPS);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 80008ce:	fb03 f202 	mul.w	r2, r3, r2
 80008d2:	78fb      	ldrb	r3, [r7, #3]
 80008d4:	4619      	mov	r1, r3
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff ffa8 	bl	800082c <move_pan_steps>
	char pos[30];
//	sprintf(pos, "panPos: %d\r\n", panPos);
//	HAL_UART_Transmit(&huart3, (uint8_t*)pos, strlen(pos), HAL_MAX_DELAY);

}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ack>:
void start_plunge(void) {

}

/*** USART Rx HANDLE ***/
void ack(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart3, tx_ack, 3, HAL_MAX_DELAY);
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	2203      	movs	r2, #3
 80008ee:	4903      	ldr	r1, [pc, #12]	; (80008fc <ack+0x18>)
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <ack+0x1c>)
 80008f2:	f005 fdcb 	bl	800648c <HAL_UART_Transmit>
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	24000004 	.word	0x24000004
 8000900:	24000170 	.word	0x24000170

08000904 <bad>:

void bad(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, tx_bad, 3, HAL_MAX_DELAY);
 8000908:	f04f 33ff 	mov.w	r3, #4294967295
 800090c:	2203      	movs	r2, #3
 800090e:	4903      	ldr	r1, [pc, #12]	; (800091c <bad+0x18>)
 8000910:	4803      	ldr	r0, [pc, #12]	; (8000920 <bad+0x1c>)
 8000912:	f005 fdbb 	bl	800648c <HAL_UART_Transmit>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	24000008 	.word	0x24000008
 8000920:	24000170 	.word	0x24000170

08000924 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    rxBuffer[rxIndex] = received_character[0];
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_UART_RxCpltCallback+0x54>)
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_UART_RxCpltCallback+0x58>)
 8000934:	7819      	ldrb	r1, [r3, #0]
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_UART_RxCpltCallback+0x5c>)
 8000938:	5499      	strb	r1, [r3, r2]
	rxIndex++;
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_UART_RxCpltCallback+0x54>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	3301      	adds	r3, #1
 8000940:	b29a      	uxth	r2, r3
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_UART_RxCpltCallback+0x54>)
 8000944:	801a      	strh	r2, [r3, #0]

	if (received_character[0] == '\n' || received_character[0] == '\r') {
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_UART_RxCpltCallback+0x58>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b0a      	cmp	r3, #10
 800094c:	d003      	beq.n	8000956 <HAL_UART_RxCpltCallback+0x32>
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_UART_RxCpltCallback+0x58>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b0d      	cmp	r3, #13
 8000954:	d106      	bne.n	8000964 <HAL_UART_RxCpltCallback+0x40>
    	rxIndex = 0;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_UART_RxCpltCallback+0x54>)
 8000958:	2200      	movs	r2, #0
 800095a:	801a      	strh	r2, [r3, #0]
    	rx_flag = 1;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_UART_RxCpltCallback+0x60>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e005      	b.n	8000970 <HAL_UART_RxCpltCallback+0x4c>
    } else {
        HAL_UART_Receive_IT(&huart3, received_character, 1);
 8000964:	2201      	movs	r2, #1
 8000966:	4905      	ldr	r1, [pc, #20]	; (800097c <HAL_UART_RxCpltCallback+0x58>)
 8000968:	4807      	ldr	r0, [pc, #28]	; (8000988 <HAL_UART_RxCpltCallback+0x64>)
 800096a:	f005 fe1d 	bl	80065a8 <HAL_UART_Receive_IT>
    }
}
 800096e:	bf00      	nop
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2400ecec 	.word	0x2400ecec
 800097c:	2400ecf0 	.word	0x2400ecf0
 8000980:	2400ec88 	.word	0x2400ec88
 8000984:	2400ecf1 	.word	0x2400ecf1
 8000988:	24000170 	.word	0x24000170

0800098c <rx_handle>:

void rx_handle(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b0a0      	sub	sp, #128	; 0x80
 8000990:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, val);
 8000992:	4b5a      	ldr	r3, [pc, #360]	; (8000afc <rx_handle+0x170>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	2102      	movs	r1, #2
 800099a:	4859      	ldr	r0, [pc, #356]	; (8000b00 <rx_handle+0x174>)
 800099c:	f002 f9e8 	bl	8002d70 <HAL_GPIO_WritePin>
	if(val)
 80009a0:	4b56      	ldr	r3, [pc, #344]	; (8000afc <rx_handle+0x170>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d003      	beq.n	80009b0 <rx_handle+0x24>
		val = 0;
 80009a8:	4b54      	ldr	r3, [pc, #336]	; (8000afc <rx_handle+0x170>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	e002      	b.n	80009b6 <rx_handle+0x2a>
	else
		val = 1;
 80009b0:	4b52      	ldr	r3, [pc, #328]	; (8000afc <rx_handle+0x170>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
	//sprintf(num, "RX0: %d\r\n", rxBuffer[0]);
	//HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);
	switch(rxBuffer[0]) {
 80009b6:	4b53      	ldr	r3, [pc, #332]	; (8000b04 <rx_handle+0x178>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	3b31      	subs	r3, #49	; 0x31
 80009bc:	2b05      	cmp	r3, #5
 80009be:	f200 818d 	bhi.w	8000cdc <rx_handle+0x350>
 80009c2:	a201      	add	r2, pc, #4	; (adr r2, 80009c8 <rx_handle+0x3c>)
 80009c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c8:	080009e1 	.word	0x080009e1
 80009cc:	08000a89 	.word	0x08000a89
 80009d0:	08000cdd 	.word	0x08000cdd
 80009d4:	08000c95 	.word	0x08000c95
 80009d8:	08000caf 	.word	0x08000caf
 80009dc:	08000cc9 	.word	0x08000cc9
    	case MOVE: ;
    		uint32_t amount = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	67fb      	str	r3, [r7, #124]	; 0x7c
			for(int i=2; i<=4; i++) {
 80009e4:	2302      	movs	r3, #2
 80009e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80009e8:	e01b      	b.n	8000a22 <rx_handle+0x96>
				 char digit = rxBuffer[i];
 80009ea:	4a46      	ldr	r2, [pc, #280]	; (8000b04 <rx_handle+0x178>)
 80009ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80009ee:	4413      	add	r3, r2
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
				 if (digit >= '0' && digit <= '9') {
 80009f6:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80009fa:	2b2f      	cmp	r3, #47	; 0x2f
 80009fc:	d90e      	bls.n	8000a1c <rx_handle+0x90>
 80009fe:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000a02:	2b39      	cmp	r3, #57	; 0x39
 8000a04:	d80a      	bhi.n	8000a1c <rx_handle+0x90>
					 amount = (amount * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 8000a06:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000a08:	4613      	mov	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	461a      	mov	r2, r3
 8000a12:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000a16:	4413      	add	r3, r2
 8000a18:	3b30      	subs	r3, #48	; 0x30
 8000a1a:	67fb      	str	r3, [r7, #124]	; 0x7c
			for(int i=2; i<=4; i++) {
 8000a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a1e:	3301      	adds	r3, #1
 8000a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8000a22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	dde0      	ble.n	80009ea <rx_handle+0x5e>

			char response[100];
//			sprintf(response, "%c%c received this amount: %d\r\n", (int)rxBuffer[0], (int)rxBuffer[1], (int)amount);
//			HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);

			switch(rxBuffer[1]) {
 8000a28:	4b36      	ldr	r3, [pc, #216]	; (8000b04 <rx_handle+0x178>)
 8000a2a:	785b      	ldrb	r3, [r3, #1]
 8000a2c:	3b31      	subs	r3, #49	; 0x31
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d826      	bhi.n	8000a80 <rx_handle+0xf4>
 8000a32:	a201      	add	r2, pc, #4	; (adr r2, 8000a38 <rx_handle+0xac>)
 8000a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a38:	08000a49 	.word	0x08000a49
 8000a3c:	08000a57 	.word	0x08000a57
 8000a40:	08000a65 	.word	0x08000a65
 8000a44:	08000a73 	.word	0x08000a73
				case UP: ;
					move_tilt_deg(amount, DIR_TILT_UP);
 8000a48:	2101      	movs	r1, #1
 8000a4a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a4c:	f7ff feda 	bl	8000804 <move_tilt_deg>
					ack();
 8000a50:	f7ff ff48 	bl	80008e4 <ack>
					break;
 8000a54:	e017      	b.n	8000a86 <rx_handle+0xfa>
				case DOWN: ;
					move_tilt_deg(amount, DIR_TILT_DOWN);
 8000a56:	2100      	movs	r1, #0
 8000a58:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a5a:	f7ff fed3 	bl	8000804 <move_tilt_deg>
					ack();
 8000a5e:	f7ff ff41 	bl	80008e4 <ack>
					break;
 8000a62:	e010      	b.n	8000a86 <rx_handle+0xfa>
				case LEFT: ;
					move_pan_deg(amount, DIR_PAN_LEFT);
 8000a64:	2101      	movs	r1, #1
 8000a66:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a68:	f7ff ff28 	bl	80008bc <move_pan_deg>
					ack();
 8000a6c:	f7ff ff3a 	bl	80008e4 <ack>
					break;
 8000a70:	e009      	b.n	8000a86 <rx_handle+0xfa>
				case RIGHT: ;
					move_pan_deg(amount, DIR_PAN_RIGHT);
 8000a72:	2100      	movs	r1, #0
 8000a74:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000a76:	f7ff ff21 	bl	80008bc <move_pan_deg>
					ack();
 8000a7a:	f7ff ff33 	bl	80008e4 <ack>
					break;
 8000a7e:	e002      	b.n	8000a86 <rx_handle+0xfa>
				default: ;
					bad();
 8000a80:	f7ff ff40 	bl	8000904 <bad>
					break;
 8000a84:	bf00      	nop
			}

			break;
 8000a86:	e129      	b.n	8000cdc <rx_handle+0x350>

		case PLUNGE: ;
			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); //disengage brake
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2140      	movs	r1, #64	; 0x40
 8000a8c:	481e      	ldr	r0, [pc, #120]	; (8000b08 <rx_handle+0x17c>)
 8000a8e:	f002 f96f 	bl	8002d70 <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	2203      	movs	r2, #3
 8000a98:	491c      	ldr	r1, [pc, #112]	; (8000b0c <rx_handle+0x180>)
 8000a9a:	481d      	ldr	r0, [pc, #116]	; (8000b10 <rx_handle+0x184>)
 8000a9c:	f005 fcf6 	bl	800648c <HAL_UART_Transmit>

		/* retrieve info */
			plunge_done_flag = 0;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <rx_handle+0x188>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]

			uint32_t brake_pos = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	677b      	str	r3, [r7, #116]	; 0x74
			timepoint_pos = 0;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <rx_handle+0x18c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
			for(int i=1; i<=6; i++) {
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	673b      	str	r3, [r7, #112]	; 0x70
 8000ab4:	e01b      	b.n	8000aee <rx_handle+0x162>
				 char digit = rxBuffer[i];
 8000ab6:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <rx_handle+0x178>)
 8000ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000aba:	4413      	add	r3, r2
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
				 if (digit >= '0' && digit <= '9') {
 8000ac2:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000ac6:	2b2f      	cmp	r3, #47	; 0x2f
 8000ac8:	d90e      	bls.n	8000ae8 <rx_handle+0x15c>
 8000aca:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000ace:	2b39      	cmp	r3, #57	; 0x39
 8000ad0:	d80a      	bhi.n	8000ae8 <rx_handle+0x15c>
					 brake_pos = (brake_pos * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 8000ad2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	461a      	mov	r2, r3
 8000ade:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000ae2:	4413      	add	r3, r2
 8000ae4:	3b30      	subs	r3, #48	; 0x30
 8000ae6:	677b      	str	r3, [r7, #116]	; 0x74
			for(int i=1; i<=6; i++) {
 8000ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000aea:	3301      	adds	r3, #1
 8000aec:	673b      	str	r3, [r7, #112]	; 0x70
 8000aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000af0:	2b06      	cmp	r3, #6
 8000af2:	dde0      	ble.n	8000ab6 <rx_handle+0x12a>
				 }
			}
			for(int i=7; i<=12; i++) {
 8000af4:	2307      	movs	r3, #7
 8000af6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000af8:	e02e      	b.n	8000b58 <rx_handle+0x1cc>
 8000afa:	bf00      	nop
 8000afc:	24000000 	.word	0x24000000
 8000b00:	58021000 	.word	0x58021000
 8000b04:	2400ec88 	.word	0x2400ec88
 8000b08:	58020000 	.word	0x58020000
 8000b0c:	24000004 	.word	0x24000004
 8000b10:	24000170 	.word	0x24000170
 8000b14:	2400ec80 	.word	0x2400ec80
 8000b18:	2400ec6c 	.word	0x2400ec6c
				 char digit = rxBuffer[i];
 8000b1c:	4a75      	ldr	r2, [pc, #468]	; (8000cf4 <rx_handle+0x368>)
 8000b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b20:	4413      	add	r3, r2
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
				 if (digit >= '0' && digit <= '9') {
 8000b28:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b2c:	2b2f      	cmp	r3, #47	; 0x2f
 8000b2e:	d910      	bls.n	8000b52 <rx_handle+0x1c6>
 8000b30:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b34:	2b39      	cmp	r3, #57	; 0x39
 8000b36:	d80c      	bhi.n	8000b52 <rx_handle+0x1c6>
					 timepoint_pos = (timepoint_pos * 10) + (digit - '0');	// Shift the existing result left by one decimal place and add the digit value
 8000b38:	4b6f      	ldr	r3, [pc, #444]	; (8000cf8 <rx_handle+0x36c>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	461a      	mov	r2, r3
 8000b46:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b4a:	4413      	add	r3, r2
 8000b4c:	3b30      	subs	r3, #48	; 0x30
 8000b4e:	4a6a      	ldr	r2, [pc, #424]	; (8000cf8 <rx_handle+0x36c>)
 8000b50:	6013      	str	r3, [r2, #0]
			for(int i=7; i<=12; i++) {
 8000b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b54:	3301      	adds	r3, #1
 8000b56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b5a:	2b0c      	cmp	r3, #12
 8000b5c:	ddde      	ble.n	8000b1c <rx_handle+0x190>
	//		HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);

			/***TODO: figure out what angle to tilt to given timepoint_pos***/

			/* reset tracking variables */
			log_position = 0;
 8000b5e:	4b67      	ldr	r3, [pc, #412]	; (8000cfc <rx_handle+0x370>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
			running_sum = 0;
 8000b64:	4b66      	ldr	r3, [pc, #408]	; (8000d00 <rx_handle+0x374>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
			memset(posLog, 0, sizeof(posLog));
 8000b6a:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4864      	ldr	r0, [pc, #400]	; (8000d04 <rx_handle+0x378>)
 8000b72:	f008 f987 	bl	8008e84 <memset>
			DEPOSITED = 0;
 8000b76:	4b64      	ldr	r3, [pc, #400]	; (8000d08 <rx_handle+0x37c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]

			/* dispense position calculation */
			//						    us								mm						mm/s	   s->us
			dispense_delay_clocks = 10000;//(DISPENSE_LATENCY + (TARGET_DIST_ORTH*cos(tiltPos*M_PI/180))/DROP_SPEED*1000*1000)*US_TO_TICKS;
 8000b7c:	4b63      	ldr	r3, [pc, #396]	; (8000d0c <rx_handle+0x380>)
 8000b7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b82:	601a      	str	r2, [r3, #0]
			// ^ delay in ticks between dispensing and drop hit target in x direction


			/* configure tim4 for final dispense timing */
			TIM4->CR1  &= ~TIM_CR1_CEN;
 8000b84:	4b62      	ldr	r3, [pc, #392]	; (8000d10 <rx_handle+0x384>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a61      	ldr	r2, [pc, #388]	; (8000d10 <rx_handle+0x384>)
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	6013      	str	r3, [r2, #0]

			TIM4->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000b90:	4b5f      	ldr	r3, [pc, #380]	; (8000d10 <rx_handle+0x384>)
 8000b92:	2264      	movs	r2, #100	; 0x64
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->ARR 	= brake_pos; 	// Counter rolls over at brake_pos which triggers an interrupt handled in TIM2_IRQHandler (stm32h7xx_it.c)
 8000b96:	4a5e      	ldr	r2, [pc, #376]	; (8000d10 <rx_handle+0x384>)
 8000b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM4->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000b9c:	4b5c      	ldr	r3, [pc, #368]	; (8000d10 <rx_handle+0x384>)
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	4a5b      	ldr	r2, [pc, #364]	; (8000d10 <rx_handle+0x384>)
 8000ba2:	f023 0301 	bic.w	r3, r3, #1
 8000ba6:	6113      	str	r3, [r2, #16]
			TIM4->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000ba8:	4b59      	ldr	r3, [pc, #356]	; (8000d10 <rx_handle+0x384>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a58      	ldr	r2, [pc, #352]	; (8000d10 <rx_handle+0x384>)
 8000bae:	f023 0302 	bic.w	r3, r3, #2
 8000bb2:	6013      	str	r3, [r2, #0]
			TIM4->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000bb4:	4b56      	ldr	r3, [pc, #344]	; (8000d10 <rx_handle+0x384>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	4a55      	ldr	r2, [pc, #340]	; (8000d10 <rx_handle+0x384>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	60d3      	str	r3, [r2, #12]
			TIM4->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000bc0:	4b53      	ldr	r3, [pc, #332]	; (8000d10 <rx_handle+0x384>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a52      	ldr	r2, [pc, #328]	; (8000d10 <rx_handle+0x384>)
 8000bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bca:	6013      	str	r3, [r2, #0]

			/* configuring encoder counter */
			TIM2->CR1  &= ~TIM_CR1_CEN;
 8000bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bd6:	f023 0301 	bic.w	r3, r3, #1
 8000bda:	6013      	str	r3, [r2, #0]

			TIM2->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000bdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000be0:	2264      	movs	r2, #100	; 0x64
 8000be2:	625a      	str	r2, [r3, #36]	; 0x24
			TIM2->ARR 	= brake_pos; 		// Counter rolls over at brake_pos which triggers an interrupt handled in TIM2_IRQHandler (stm32h7xx_it.c)
 8000be4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bea:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000bec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf6:	f023 0301 	bic.w	r3, r3, #1
 8000bfa:	6113      	str	r3, [r2, #16]
			TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000bfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c06:	f023 0302 	bic.w	r3, r3, #2
 8000c0a:	6013      	str	r3, [r2, #0]
			TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	60d3      	str	r3, [r2, #12]
			TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000c1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2a:	6013      	str	r3, [r2, #0]

			TIM2->CR1  |=  TIM_CR1_CEN; 	//start counter
 8000c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6013      	str	r3, [r2, #0]

			/* configuring data logging timer */
			TIM5->CR1  &= ~TIM_CR1_CEN; // Start TIM5 to commence data collection
 8000c3c:	4b35      	ldr	r3, [pc, #212]	; (8000d14 <rx_handle+0x388>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a34      	ldr	r2, [pc, #208]	; (8000d14 <rx_handle+0x388>)
 8000c42:	f023 0301 	bic.w	r3, r3, #1
 8000c46:	6013      	str	r3, [r2, #0]

			TIM5-> CNT  = 100;				//
 8000c48:	4b32      	ldr	r3, [pc, #200]	; (8000d14 <rx_handle+0x388>)
 8000c4a:	2264      	movs	r2, #100	; 0x64
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
			TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <rx_handle+0x388>)
 8000c50:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000c54:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000c56:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <rx_handle+0x388>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a2e      	ldr	r2, [pc, #184]	; (8000d14 <rx_handle+0x388>)
 8000c5c:	f023 0302 	bic.w	r3, r3, #2
 8000c60:	6013      	str	r3, [r2, #0]
			TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000c62:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <rx_handle+0x388>)
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	4a2b      	ldr	r2, [pc, #172]	; (8000d14 <rx_handle+0x388>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	60d3      	str	r3, [r2, #12]
			TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000c6e:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <rx_handle+0x388>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a28      	ldr	r2, [pc, #160]	; (8000d14 <rx_handle+0x388>)
 8000c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c78:	6013      	str	r3, [r2, #0]
			TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <rx_handle+0x388>)
 8000c7c:	691b      	ldr	r3, [r3, #16]
 8000c7e:	4a25      	ldr	r2, [pc, #148]	; (8000d14 <rx_handle+0x388>)
 8000c80:	f023 0301 	bic.w	r3, r3, #1
 8000c84:	6113      	str	r3, [r2, #16]

			TIM5->CR1  |= TIM_CR1_CEN; // Start TIM5 to commence data collection
 8000c86:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <rx_handle+0x388>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a22      	ldr	r2, [pc, #136]	; (8000d14 <rx_handle+0x388>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6013      	str	r3, [r2, #0]
//				char response[100] = {0};
//				enc_pos = TIM2->CNT;
//				sprintf(response, "enc: %d; disp_f: %d; runsum: %d; tim4: %d; log_pos: %d, clocks_to_disp: %d; disp: %d\r\n", (int)enc_pos, (int)disp_flag, (int)running_sum, (int)TIM4->CNT, (int)log_position, (int)TIM4->ARR, (int)DEPOSITED);
//				HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
//			}
			break;
 8000c92:	e023      	b.n	8000cdc <rx_handle+0x350>

		case RELEASE: ;
			HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000c94:	f04f 33ff 	mov.w	r3, #4294967295
 8000c98:	2203      	movs	r2, #3
 8000c9a:	491f      	ldr	r1, [pc, #124]	; (8000d18 <rx_handle+0x38c>)
 8000c9c:	481f      	ldr	r0, [pc, #124]	; (8000d1c <rx_handle+0x390>)
 8000c9e:	f005 fbf5 	bl	800648c <HAL_UART_Transmit>

			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); //disengage brake
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2140      	movs	r1, #64	; 0x40
 8000ca6:	481e      	ldr	r0, [pc, #120]	; (8000d20 <rx_handle+0x394>)
 8000ca8:	f002 f862 	bl	8002d70 <HAL_GPIO_WritePin>
//			char j[100] = {0};
//			sprintf(j, "RELEASE\r\n");
//			HAL_UART_Transmit(&huart3, (uint8_t*)j, strlen(j), HAL_MAX_DELAY);

			break;
 8000cac:	e016      	b.n	8000cdc <rx_handle+0x350>
		case '5': ;
			HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	4918      	ldr	r1, [pc, #96]	; (8000d18 <rx_handle+0x38c>)
 8000cb6:	4819      	ldr	r0, [pc, #100]	; (8000d1c <rx_handle+0x390>)
 8000cb8:	f005 fbe8 	bl	800648c <HAL_UART_Transmit>

			HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 0); //engage brake
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2140      	movs	r1, #64	; 0x40
 8000cc0:	4817      	ldr	r0, [pc, #92]	; (8000d20 <rx_handle+0x394>)
 8000cc2:	f002 f855 	bl	8002d70 <HAL_GPIO_WritePin>
//			char k[100] = {0};
//			sprintf(k, "BRAKE\r\n");
//			HAL_UART_Transmit(&huart3, (uint8_t*)k, strlen(k), HAL_MAX_DELAY);

			break;
 8000cc6:	e009      	b.n	8000cdc <rx_handle+0x350>
		case '6': ;
			char lm[100] = {0};
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	2260      	movs	r2, #96	; 0x60
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f008 f8d5 	bl	8008e84 <memset>
			//sprintf(lm, "current position: %d\r\n braked at: %d\r\n", TIM2->CNT, posn_braked_at);
			//HAL_UART_Transmit(&huart3, (uint8_t*)lm, strlen(lm), HAL_MAX_DELAY);
			break;
 8000cda:	bf00      	nop

    }
//	char b[] = "done handling\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

    rx_flag = 0;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <rx_handle+0x398>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart3, received_character, 1);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4910      	ldr	r1, [pc, #64]	; (8000d28 <rx_handle+0x39c>)
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <rx_handle+0x390>)
 8000ce8:	f005 fc5e 	bl	80065a8 <HAL_UART_Receive_IT>
}
 8000cec:	bf00      	nop
 8000cee:	3780      	adds	r7, #128	; 0x80
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2400ec88 	.word	0x2400ec88
 8000cf8:	2400ec6c 	.word	0x2400ec6c
 8000cfc:	2400ec64 	.word	0x2400ec64
 8000d00:	2400ec68 	.word	0x2400ec68
 8000d04:	24000204 	.word	0x24000204
 8000d08:	2400ec81 	.word	0x2400ec81
 8000d0c:	2400ec70 	.word	0x2400ec70
 8000d10:	40000800 	.word	0x40000800
 8000d14:	40000c00 	.word	0x40000c00
 8000d18:	24000004 	.word	0x24000004
 8000d1c:	24000170 	.word	0x24000170
 8000d20:	58020000 	.word	0x58020000
 8000d24:	2400ecf1 	.word	0x2400ecf1
 8000d28:	2400ecf0 	.word	0x2400ecf0

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d32:	f000 ff43 	bl	8001bbc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d36:	f000 f87b 	bl	8000e30 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3a:	f000 fa55 	bl	80011e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d3e:	f000 f8ed 	bl	8000f1c <MX_TIM2_Init>
  MX_USB_OTG_HS_USB_Init();
 8000d42:	f000 fa49 	bl	80011d8 <MX_USB_OTG_HS_USB_Init>
  MX_USART3_UART_Init();
 8000d46:	f000 f9fb 	bl	8001140 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000d4a:	f000 f9ab 	bl	80010a4 <MX_TIM5_Init>
  MX_TIM4_Init();
 8000d4e:	f000 f951 	bl	8000ff4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, received_character, 1); // initialize interrupts
 8000d52:	2201      	movs	r2, #1
 8000d54:	492d      	ldr	r1, [pc, #180]	; (8000e0c <main+0xe0>)
 8000d56:	482e      	ldr	r0, [pc, #184]	; (8000e10 <main+0xe4>)
 8000d58:	f005 fc26 	bl	80065a8 <HAL_UART_Receive_IT>

//  char msg[] = "program start \r\n";
//  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  // TIM2 for encoder tick counting
  NVIC_SetPriority(TIM2_IRQn, 1); // Braking is priority as long as dispense isnt happening
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	201c      	movs	r0, #28
 8000d60:	f7ff fce2 	bl	8000728 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000d64:	201c      	movs	r0, #28
 8000d66:	f7ff fcc1 	bl	80006ec <__NVIC_EnableIRQ>

  // TIM5 for logkeeping and speed calculations and TIM4 setup
  NVIC_SetPriority(TIM5_IRQn, 2); // Log keeping should be interruptable
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	2032      	movs	r0, #50	; 0x32
 8000d6e:	f7ff fcdb 	bl	8000728 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8000d72:	2032      	movs	r0, #50	; 0x32
 8000d74:	f7ff fcba 	bl	80006ec <__NVIC_EnableIRQ>

  // TIM4 for dispense timing after commenced by TIM5
  NVIC_SetPriority(TIM4_IRQn, 0); // Dispense accuracy is top priority
 8000d78:	2100      	movs	r1, #0
 8000d7a:	201e      	movs	r0, #30
 8000d7c:	f7ff fcd4 	bl	8000728 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8000d80:	201e      	movs	r0, #30
 8000d82:	f7ff fcb3 	bl	80006ec <__NVIC_EnableIRQ>

  HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 1); // Ensure brake is disengaged after reset
 8000d86:	2201      	movs	r2, #1
 8000d88:	2140      	movs	r1, #64	; 0x40
 8000d8a:	4822      	ldr	r0, [pc, #136]	; (8000e14 <main+0xe8>)
 8000d8c:	f001 fff0 	bl	8002d70 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
	  if(rx_flag) rx_handle();
 8000d90:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <main+0xec>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <main+0x70>
 8000d98:	f7ff fdf8 	bl	800098c <rx_handle>


	  if(plunge_done_flag) {
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <main+0xf0>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0f5      	beq.n	8000d90 <main+0x64>
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	2203      	movs	r2, #3
 8000daa:	491d      	ldr	r1, [pc, #116]	; (8000e20 <main+0xf4>)
 8000dac:	4818      	ldr	r0, [pc, #96]	; (8000e10 <main+0xe4>)
 8000dae:	f005 fb6d 	bl	800648c <HAL_UART_Transmit>
		  char msg[10];
		  for(int i=0 ; i<log_position; i++) {
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	e018      	b.n	8000dea <main+0xbe>
			  sprintf(msg, "%u\n", posLog[i]);
 8000db8:	4a1a      	ldr	r2, [pc, #104]	; (8000e24 <main+0xf8>)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4918      	ldr	r1, [pc, #96]	; (8000e28 <main+0xfc>)
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f008 f83c 	bl	8008e44 <siprintf>
//			  bytes[2] = ((posLog[i] >> 8) 		& 0xFF);
//			  bytes[3] = ((posLog[i])	 		& 0xFF);
//
//			  HAL_UART_Transmit(&huart3, bytes, 4, HAL_MAX_DELAY);
//			  HAL_UART_Transmit(&huart3, (uint8_t*)rn, strlen(rn), HAL_MAX_DELAY);
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000dcc:	463b      	mov	r3, r7
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fa8e 	bl	80002f0 <strlen>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	4639      	mov	r1, r7
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	480c      	ldr	r0, [pc, #48]	; (8000e10 <main+0xe4>)
 8000de0:	f005 fb54 	bl	800648c <HAL_UART_Transmit>
		  for(int i=0 ; i<log_position; i++) {
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	3301      	adds	r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <main+0x100>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d3e1      	bcc.n	8000db8 <main+0x8c>
		  }
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000df4:	f04f 33ff 	mov.w	r3, #4294967295
 8000df8:	2203      	movs	r2, #3
 8000dfa:	4909      	ldr	r1, [pc, #36]	; (8000e20 <main+0xf4>)
 8000dfc:	4804      	ldr	r0, [pc, #16]	; (8000e10 <main+0xe4>)
 8000dfe:	f005 fb45 	bl	800648c <HAL_UART_Transmit>

		  plunge_done_flag = 0;
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <main+0xf0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
	  if(rx_flag) rx_handle();
 8000e08:	e7c2      	b.n	8000d90 <main+0x64>
 8000e0a:	bf00      	nop
 8000e0c:	2400ecf0 	.word	0x2400ecf0
 8000e10:	24000170 	.word	0x24000170
 8000e14:	58020000 	.word	0x58020000
 8000e18:	2400ecf1 	.word	0x2400ecf1
 8000e1c:	2400ec80 	.word	0x2400ec80
 8000e20:	24000004 	.word	0x24000004
 8000e24:	24000204 	.word	0x24000204
 8000e28:	080097a4 	.word	0x080097a4
 8000e2c:	2400ec64 	.word	0x2400ec64

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b09c      	sub	sp, #112	; 0x70
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3a:	224c      	movs	r2, #76	; 0x4c
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f008 f820 	bl	8008e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2220      	movs	r2, #32
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f008 f81a 	bl	8008e84 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000e50:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <SystemClock_Config+0xe4>)
 8000e52:	f04f 32ff 	mov.w	r2, #4294967295
 8000e56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e5a:	2004      	movs	r0, #4
 8000e5c:	f001 ffa2 	bl	8002da4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e60:	2300      	movs	r3, #0
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	4b2c      	ldr	r3, [pc, #176]	; (8000f18 <SystemClock_Config+0xe8>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a2b      	ldr	r2, [pc, #172]	; (8000f18 <SystemClock_Config+0xe8>)
 8000e6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <SystemClock_Config+0xe8>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e7c:	bf00      	nop
 8000e7e:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <SystemClock_Config+0xe8>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e8a:	d1f8      	bne.n	8000e7e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e8c:	2321      	movs	r3, #33	; 0x21
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e90:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e96:	2301      	movs	r3, #1
 8000e98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000ea6:	2318      	movs	r3, #24
 8000ea8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000eb6:	230c      	movs	r3, #12
 8000eb8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 ffc6 	bl	8002e58 <HAL_RCC_OscConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ed2:	f000 fad9 	bl	8001488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed6:	233f      	movs	r3, #63	; 0x3f
 8000ed8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eda:	2303      	movs	r3, #3
 8000edc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2102      	movs	r1, #2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 fbde 	bl	80036bc <HAL_RCC_ClockConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000f06:	f000 fabf 	bl	8001488 <Error_Handler>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	3770      	adds	r7, #112	; 0x70
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	58024400 	.word	0x58024400
 8000f18:	58024800 	.word	0x58024800

08000f1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	2224      	movs	r2, #36	; 0x24
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f007 ffaa 	bl	8008e84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f30:	463b      	mov	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <MX_TIM2_Init+0xd4>)
 8000f3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f42:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <MX_TIM2_Init+0xd4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <MX_TIM2_Init+0xd4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f4e:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <MX_TIM2_Init+0xd4>)
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <MX_TIM2_Init+0xd4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5c:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <MX_TIM2_Init+0xd4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4818      	ldr	r0, [pc, #96]	; (8000ff0 <MX_TIM2_Init+0xd4>)
 8000f8e:	f004 fd59 	bl	8005a44 <HAL_TIM_Encoder_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000f98:	f000 fa76 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4811      	ldr	r0, [pc, #68]	; (8000ff0 <MX_TIM2_Init+0xd4>)
 8000faa:	f005 f973 	bl	8006294 <HAL_TIMEx_MasterConfigSynchronization>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000fb4:	f000 fa68 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 8000fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	6013      	str	r3, [r2, #0]
	TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 8000fc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd2:	f023 0301 	bic.w	r3, r3, #1
 8000fd6:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8000fd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe2:	f023 0301 	bic.w	r3, r3, #1
 8000fe6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	3730      	adds	r7, #48	; 0x30
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2400008c 	.word	0x2400008c

08000ff4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001012:	4b22      	ldr	r3, [pc, #136]	; (800109c <MX_TIM4_Init+0xa8>)
 8001014:	4a22      	ldr	r2, [pc, #136]	; (80010a0 <MX_TIM4_Init+0xac>)
 8001016:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <MX_TIM4_Init+0xa8>)
 800101a:	2200      	movs	r2, #0
 800101c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101e:	4b1f      	ldr	r3, [pc, #124]	; (800109c <MX_TIM4_Init+0xa8>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_TIM4_Init+0xa8>)
 8001026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800102a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_TIM4_Init+0xa8>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_TIM4_Init+0xa8>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001038:	4818      	ldr	r0, [pc, #96]	; (800109c <MX_TIM4_Init+0xa8>)
 800103a:	f004 fcab 	bl	8005994 <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001044:	f000 fa20 	bl	8001488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	4619      	mov	r1, r3
 8001054:	4811      	ldr	r0, [pc, #68]	; (800109c <MX_TIM4_Init+0xa8>)
 8001056:	f004 febb 	bl	8005dd0 <HAL_TIM_ConfigClockSource>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001060:	f000 fa12 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4619      	mov	r1, r3
 8001070:	480a      	ldr	r0, [pc, #40]	; (800109c <MX_TIM4_Init+0xa8>)
 8001072:	f005 f90f 	bl	8006294 <HAL_TIMEx_MasterConfigSynchronization>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800107c:	f000 fa04 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
	TIM4->CR1 &= ~TIM_CR1_CEN; 	// dont start it
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <MX_TIM4_Init+0xac>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <MX_TIM4_Init+0xac>)
 8001086:	f023 0301 	bic.w	r3, r3, #1
 800108a:	6013      	str	r3, [r2, #0]
	TIM4->CNT = 0;				//reset it
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <MX_TIM4_Init+0xac>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END TIM4_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	3720      	adds	r7, #32
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	240000d8 	.word	0x240000d8
 80010a0:	40000800 	.word	0x40000800

080010a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <MX_TIM5_Init+0x94>)
 80010c4:	4a1d      	ldr	r2, [pc, #116]	; (800113c <MX_TIM5_Init+0x98>)
 80010c6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_TIM5_Init+0x94>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_TIM5_Init+0x94>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_TIM5_Init+0x94>)
 80010d6:	f04f 32ff 	mov.w	r2, #4294967295
 80010da:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_TIM5_Init+0x94>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_TIM5_Init+0x94>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80010e8:	4813      	ldr	r0, [pc, #76]	; (8001138 <MX_TIM5_Init+0x94>)
 80010ea:	f004 fc53 	bl	8005994 <HAL_TIM_Base_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80010f4:	f000 f9c8 	bl	8001488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <MX_TIM5_Init+0x94>)
 8001106:	f004 fe63 	bl	8005dd0 <HAL_TIM_ConfigClockSource>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001110:	f000 f9ba 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001114:	2300      	movs	r3, #0
 8001116:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_TIM5_Init+0x94>)
 8001122:	f005 f8b7 	bl	8006294 <HAL_TIMEx_MasterConfigSynchronization>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800112c:	f000 f9ac 	bl	8001488 <Error_Handler>
//  TIM5->DIER |= TIM_DIER_UIE; // Enable update interrupt
//  TIM5->ARR = ENC_DMA_POLL_FREQ; // Timebase

  /* USER CODE END TIM5_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	24000124 	.word	0x24000124
 800113c:	40000c00 	.word	0x40000c00

08001140 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 8001146:	4a23      	ldr	r2, [pc, #140]	; (80011d4 <MX_USART3_UART_Init+0x94>)
 8001148:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001188:	4811      	ldr	r0, [pc, #68]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 800118a:	f005 f92f 	bl	80063ec <HAL_UART_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001194:	f000 f978 	bl	8001488 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001198:	2100      	movs	r1, #0
 800119a:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 800119c:	f007 fd87 	bl	8008cae <HAL_UARTEx_SetTxFifoThreshold>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011a6:	f000 f96f 	bl	8001488 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011aa:	2100      	movs	r1, #0
 80011ac:	4808      	ldr	r0, [pc, #32]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 80011ae:	f007 fdbc 	bl	8008d2a <HAL_UARTEx_SetRxFifoThreshold>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011b8:	f000 f966 	bl	8001488 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <MX_USART3_UART_Init+0x90>)
 80011be:	f007 fd3d 	bl	8008c3c <HAL_UARTEx_DisableFifoMode>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011c8:	f000 f95e 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	24000170 	.word	0x24000170
 80011d4:	40004800 	.word	0x40004800

080011d8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	4b9b      	ldr	r3, [pc, #620]	; (800146c <MX_GPIO_Init+0x284>)
 8001200:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001204:	4a99      	ldr	r2, [pc, #612]	; (800146c <MX_GPIO_Init+0x284>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800120e:	4b97      	ldr	r3, [pc, #604]	; (800146c <MX_GPIO_Init+0x284>)
 8001210:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	623b      	str	r3, [r7, #32]
 800121a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800121c:	4b93      	ldr	r3, [pc, #588]	; (800146c <MX_GPIO_Init+0x284>)
 800121e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001222:	4a92      	ldr	r2, [pc, #584]	; (800146c <MX_GPIO_Init+0x284>)
 8001224:	f043 0320 	orr.w	r3, r3, #32
 8001228:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800122c:	4b8f      	ldr	r3, [pc, #572]	; (800146c <MX_GPIO_Init+0x284>)
 800122e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001232:	f003 0320 	and.w	r3, r3, #32
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	4b8c      	ldr	r3, [pc, #560]	; (800146c <MX_GPIO_Init+0x284>)
 800123c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001240:	4a8a      	ldr	r2, [pc, #552]	; (800146c <MX_GPIO_Init+0x284>)
 8001242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001246:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800124a:	4b88      	ldr	r3, [pc, #544]	; (800146c <MX_GPIO_Init+0x284>)
 800124c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001254:	61bb      	str	r3, [r7, #24]
 8001256:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b84      	ldr	r3, [pc, #528]	; (800146c <MX_GPIO_Init+0x284>)
 800125a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800125e:	4a83      	ldr	r2, [pc, #524]	; (800146c <MX_GPIO_Init+0x284>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001268:	4b80      	ldr	r3, [pc, #512]	; (800146c <MX_GPIO_Init+0x284>)
 800126a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	4b7d      	ldr	r3, [pc, #500]	; (800146c <MX_GPIO_Init+0x284>)
 8001278:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800127c:	4a7b      	ldr	r2, [pc, #492]	; (800146c <MX_GPIO_Init+0x284>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001286:	4b79      	ldr	r3, [pc, #484]	; (800146c <MX_GPIO_Init+0x284>)
 8001288:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001294:	4b75      	ldr	r3, [pc, #468]	; (800146c <MX_GPIO_Init+0x284>)
 8001296:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800129a:	4a74      	ldr	r2, [pc, #464]	; (800146c <MX_GPIO_Init+0x284>)
 800129c:	f043 0310 	orr.w	r3, r3, #16
 80012a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012a4:	4b71      	ldr	r3, [pc, #452]	; (800146c <MX_GPIO_Init+0x284>)
 80012a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012aa:	f003 0310 	and.w	r3, r3, #16
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	4b6e      	ldr	r3, [pc, #440]	; (800146c <MX_GPIO_Init+0x284>)
 80012b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012b8:	4a6c      	ldr	r2, [pc, #432]	; (800146c <MX_GPIO_Init+0x284>)
 80012ba:	f043 0308 	orr.w	r3, r3, #8
 80012be:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012c2:	4b6a      	ldr	r3, [pc, #424]	; (800146c <MX_GPIO_Init+0x284>)
 80012c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012d0:	4b66      	ldr	r3, [pc, #408]	; (800146c <MX_GPIO_Init+0x284>)
 80012d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012d6:	4a65      	ldr	r2, [pc, #404]	; (800146c <MX_GPIO_Init+0x284>)
 80012d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012e0:	4b62      	ldr	r3, [pc, #392]	; (800146c <MX_GPIO_Init+0x284>)
 80012e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USB_FS_PWR_EN_Pin|PAN_STP_Pin, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80012f4:	485e      	ldr	r0, [pc, #376]	; (8001470 <MX_GPIO_Init+0x288>)
 80012f6:	f001 fd3b 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PAN_EN_Pin|TILT_EN_Pin|TILT_STP_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	210d      	movs	r1, #13
 80012fe:	485d      	ldr	r0, [pc, #372]	; (8001474 <MX_GPIO_Init+0x28c>)
 8001300:	f001 fd36 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PAN_DIR_Pin|BRAKE_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2148      	movs	r1, #72	; 0x48
 8001308:	485b      	ldr	r0, [pc, #364]	; (8001478 <MX_GPIO_Init+0x290>)
 800130a:	f001 fd31 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TILT_DIR_Pin|LD3_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f244 0102 	movw	r1, #16386	; 0x4002
 8001314:	4859      	ldr	r0, [pc, #356]	; (800147c <MX_GPIO_Init+0x294>)
 8001316:	f001 fd2b 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DROP_Pin|LD2_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f240 4102 	movw	r1, #1026	; 0x402
 8001320:	4857      	ldr	r0, [pc, #348]	; (8001480 <MX_GPIO_Init+0x298>)
 8001322:	f001 fd25 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	4619      	mov	r1, r3
 800133a:	484e      	ldr	r0, [pc, #312]	; (8001474 <MX_GPIO_Init+0x28c>)
 800133c:	f001 fb68 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PAN_STP_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|PAN_STP_Pin;
 8001340:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	4619      	mov	r1, r3
 8001358:	4845      	ldr	r0, [pc, #276]	; (8001470 <MX_GPIO_Init+0x288>)
 800135a:	f001 fb59 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN_EN_Pin TILT_EN_Pin TILT_STP_Pin */
  GPIO_InitStruct.Pin = PAN_EN_Pin|TILT_EN_Pin|TILT_STP_Pin;
 800135e:	230d      	movs	r3, #13
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	483f      	ldr	r0, [pc, #252]	; (8001474 <MX_GPIO_Init+0x28c>)
 8001376:	f001 fb4b 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PAN_DIR_Pin */
  GPIO_InitStruct.Pin = PAN_DIR_Pin;
 800137a:	2308      	movs	r3, #8
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PAN_DIR_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138e:	4619      	mov	r1, r3
 8001390:	4839      	ldr	r0, [pc, #228]	; (8001478 <MX_GPIO_Init+0x290>)
 8001392:	f001 fb3d 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BRAKE_Pin */
  GPIO_InitStruct.Pin = BRAKE_Pin;
 8001396:	2340      	movs	r3, #64	; 0x40
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800139e:	2302      	movs	r3, #2
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BRAKE_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013aa:	4619      	mov	r1, r3
 80013ac:	4832      	ldr	r0, [pc, #200]	; (8001478 <MX_GPIO_Init+0x290>)
 80013ae:	f001 fb2f 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : TILT_DIR_Pin LD3_Pin */
  GPIO_InitStruct.Pin = TILT_DIR_Pin|LD3_Pin;
 80013b2:	f244 0302 	movw	r3, #16386	; 0x4002
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c8:	4619      	mov	r1, r3
 80013ca:	482c      	ldr	r0, [pc, #176]	; (800147c <MX_GPIO_Init+0x294>)
 80013cc:	f001 fb20 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : DROP_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DROP_Pin|LD2_Pin;
 80013d0:	f240 4302 	movw	r3, #1026	; 0x402
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e6:	4619      	mov	r1, r3
 80013e8:	4825      	ldr	r0, [pc, #148]	; (8001480 <MX_GPIO_Init+0x298>)
 80013ea:	f001 fb11 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	4619      	mov	r1, r3
 8001402:	4820      	ldr	r0, [pc, #128]	; (8001484 <MX_GPIO_Init+0x29c>)
 8001404:	f001 fb04 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141a:	4619      	mov	r1, r3
 800141c:	4816      	ldr	r0, [pc, #88]	; (8001478 <MX_GPIO_Init+0x290>)
 800141e:	f001 faf7 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001434:	230a      	movs	r3, #10
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143c:	4619      	mov	r1, r3
 800143e:	480e      	ldr	r0, [pc, #56]	; (8001478 <MX_GPIO_Init+0x290>)
 8001440:	f001 fae6 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001444:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	4619      	mov	r1, r3
 800145c:	4806      	ldr	r0, [pc, #24]	; (8001478 <MX_GPIO_Init+0x290>)
 800145e:	f001 fad7 	bl	8002a10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001462:	bf00      	nop
 8001464:	3738      	adds	r7, #56	; 0x38
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	58024400 	.word	0x58024400
 8001470:	58021400 	.word	0x58021400
 8001474:	58020800 	.word	0x58020800
 8001478:	58020000 	.word	0x58020000
 800147c:	58020400 	.word	0x58020400
 8001480:	58021000 	.word	0x58021000
 8001484:	58021800 	.word	0x58021800

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	e7fe      	b.n	8001490 <Error_Handler+0x8>
	...

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_MspInit+0x30>)
 800149c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80014a0:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_MspInit+0x30>)
 80014a2:	f043 0302 	orr.w	r3, r3, #2
 80014a6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_MspInit+0x30>)
 80014ac:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	58024400 	.word	0x58024400

080014c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e8:	d135      	bne.n	8001556 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <HAL_TIM_Encoder_MspInit+0x98>)
 80014ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80014f0:	4a1b      	ldr	r2, [pc, #108]	; (8001560 <HAL_TIM_Encoder_MspInit+0x98>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_TIM_Encoder_MspInit+0x98>)
 80014fc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_TIM_Encoder_MspInit+0x98>)
 800150a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800150e:	4a14      	ldr	r2, [pc, #80]	; (8001560 <HAL_TIM_Encoder_MspInit+0x98>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_TIM_Encoder_MspInit+0x98>)
 800151a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PLUNGE_ENC_A_Pin|PLUNGE_ENC_B_Pin;
 8001526:	2303      	movs	r3, #3
 8001528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001536:	2301      	movs	r3, #1
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	4808      	ldr	r0, [pc, #32]	; (8001564 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001542:	f001 fa65 	bl	8002a10 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	201c      	movs	r0, #28
 800154c:	f000 fcc7 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001550:	201c      	movs	r0, #28
 8001552:	f000 fcde 	bl	8001f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	; 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	58024400 	.word	0x58024400
 8001564:	58020000 	.word	0x58020000

08001568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <HAL_TIM_Base_MspInit+0x84>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d117      	bne.n	80015aa <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <HAL_TIM_Base_MspInit+0x88>)
 800157c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001580:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <HAL_TIM_Base_MspInit+0x88>)
 8001582:	f043 0304 	orr.w	r3, r3, #4
 8001586:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_TIM_Base_MspInit+0x88>)
 800158c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	201e      	movs	r0, #30
 800159e:	f000 fc9e 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015a2:	201e      	movs	r0, #30
 80015a4:	f000 fcb5 	bl	8001f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80015a8:	e01b      	b.n	80015e2 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM5)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a11      	ldr	r2, [pc, #68]	; (80015f4 <HAL_TIM_Base_MspInit+0x8c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d116      	bne.n	80015e2 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_TIM_Base_MspInit+0x88>)
 80015b6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015ba:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <HAL_TIM_Base_MspInit+0x88>)
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_TIM_Base_MspInit+0x88>)
 80015c6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2032      	movs	r0, #50	; 0x32
 80015d8:	f000 fc81 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80015dc:	2032      	movs	r0, #50	; 0x32
 80015de:	f000 fc98 	bl	8001f12 <HAL_NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40000800 	.word	0x40000800
 80015f0:	58024400 	.word	0x58024400
 80015f4:	40000c00 	.word	0x40000c00

080015f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0ba      	sub	sp, #232	; 0xe8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	22c0      	movs	r2, #192	; 0xc0
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f007 fc33 	bl	8008e84 <memset>
  if(huart->Instance==USART3)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a2b      	ldr	r2, [pc, #172]	; (80016d0 <HAL_UART_MspInit+0xd8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d14e      	bne.n	80016c6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001628:	f04f 0202 	mov.w	r2, #2
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4618      	mov	r0, r3
 8001640:	f002 fbc8 	bl	8003dd4 <HAL_RCCEx_PeriphCLKConfig>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800164a:	f7ff ff1d 	bl	8001488 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800164e:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <HAL_UART_MspInit+0xdc>)
 8001650:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001654:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <HAL_UART_MspInit+0xdc>)
 8001656:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_UART_MspInit+0xdc>)
 8001660:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_UART_MspInit+0xdc>)
 800166e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_UART_MspInit+0xdc>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_UART_MspInit+0xdc>)
 800167e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800168a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800168e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016a4:	2307      	movs	r3, #7
 80016a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016ae:	4619      	mov	r1, r3
 80016b0:	4809      	ldr	r0, [pc, #36]	; (80016d8 <HAL_UART_MspInit+0xe0>)
 80016b2:	f001 f9ad 	bl	8002a10 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2027      	movs	r0, #39	; 0x27
 80016bc:	f000 fc0f 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016c0:	2027      	movs	r0, #39	; 0x27
 80016c2:	f000 fc26 	bl	8001f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016c6:	bf00      	nop
 80016c8:	37e8      	adds	r7, #232	; 0xe8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40004800 	.word	0x40004800
 80016d4:	58024400 	.word	0x58024400
 80016d8:	58020c00 	.word	0x58020c00

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <NMI_Handler+0x4>

080016e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <MemManage_Handler+0x4>

080016ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001728:	f000 faba 	bl	8001ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//NOTE TO MORNING LEO: LOG SEEMS TO WORK, SHOULD TRANSMIT IT TO PC FOR EASY VISUALIZATION
	if ((TIM2->SR & TIM_SR_UIF) != 0) { // check if update interrupt occured
 8001734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d02a      	beq.n	8001798 <TIM2_IRQHandler+0x68>
		HAL_GPIO_WritePin(BRAKE_GPIO_Port, BRAKE_Pin, 0); //engage brake
 8001742:	2200      	movs	r2, #0
 8001744:	2140      	movs	r1, #64	; 0x40
 8001746:	4817      	ldr	r0, [pc, #92]	; (80017a4 <TIM2_IRQHandler+0x74>)
 8001748:	f001 fb12 	bl	8002d70 <HAL_GPIO_WritePin>
		posn_braked_at = TIM2->CNT;
 800174c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <TIM2_IRQHandler+0x78>)
 8001754:	6013      	str	r3, [r2, #0]
		//also somehow make sure motor is stopped

		plunge_done_flag = 1;
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <TIM2_IRQHandler+0x7c>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]

		TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 800175c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001766:	f043 0302 	orr.w	r3, r3, #2
 800176a:	6013      	str	r3, [r2, #0]
		TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 800176c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// disable tim2
 800177c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	6013      	str	r3, [r2, #0]
		TIM5->CR1  &= ~TIM_CR1_CEN; 	// disable tim5
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <TIM2_IRQHandler+0x80>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <TIM2_IRQHandler+0x80>)
 8001792:	f023 0301 	bic.w	r3, r3, #1
 8001796:	6013      	str	r3, [r2, #0]

		//TIM2->ARR = 999999;			//massive so that we dont hit it when we try to move around. later i can just diable timer but for debugging i want to preserve tim2->cnt
    }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001798:	4806      	ldr	r0, [pc, #24]	; (80017b4 <TIM2_IRQHandler+0x84>)
 800179a:	f004 f9f9 	bl	8005b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	58020000 	.word	0x58020000
 80017a8:	2400ec7c 	.word	0x2400ec7c
 80017ac:	2400ec80 	.word	0x2400ec80
 80017b0:	40000c00 	.word	0x40000c00
 80017b4:	2400008c 	.word	0x2400008c

080017b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if ((TIM4->SR & TIM_SR_UIF) != 0) {
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <TIM4_IRQHandler+0x3c>)
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d010      	beq.n	80017ea <TIM4_IRQHandler+0x32>
		DEPOSITED = 1;
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <TIM4_IRQHandler+0x40>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
		dispense();
 80017ce:	f7fe ff65 	bl	800069c <dispense>
		TIM4->DIER &=  ~TIM_DIER_UIE; 	// update interrupt disabled
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <TIM4_IRQHandler+0x3c>)
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <TIM4_IRQHandler+0x3c>)
 80017d8:	f023 0301 	bic.w	r3, r3, #1
 80017dc:	60d3      	str	r3, [r2, #12]
		TIM4->CR1 &= ~TIM_CR1_CEN; 	// only fire this timer once
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <TIM4_IRQHandler+0x3c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <TIM4_IRQHandler+0x3c>)
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017ea:	4804      	ldr	r0, [pc, #16]	; (80017fc <TIM4_IRQHandler+0x44>)
 80017ec:	f004 f9d0 	bl	8005b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40000800 	.word	0x40000800
 80017f8:	2400ec81 	.word	0x2400ec81
 80017fc:	240000d8 	.word	0x240000d8

08001800 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	//dispense();
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <USART3_IRQHandler+0x10>)
 8001806:	f004 ff1b 	bl	8006640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	24000170 	.word	0x24000170
 8001814:	00000000 	.word	0x00000000

08001818 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
		/* always do the logging portion */
		/* TODO: Convert this datalogging to DMA to speed it up. actually a priority I think it would have big performance gains*/
		log_position += 1; // increment number of data points taken
 800181e:	4b6c      	ldr	r3, [pc, #432]	; (80019d0 <TIM5_IRQHandler+0x1b8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3301      	adds	r3, #1
 8001824:	4a6a      	ldr	r2, [pc, #424]	; (80019d0 <TIM5_IRQHandler+0x1b8>)
 8001826:	6013      	str	r3, [r2, #0]
		current_pos = TIM2->CNT;
 8001828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	4a69      	ldr	r2, [pc, #420]	; (80019d4 <TIM5_IRQHandler+0x1bc>)
 8001830:	6013      	str	r3, [r2, #0]
		posLog[log_position] = current_pos; // update log of positions
 8001832:	4b68      	ldr	r3, [pc, #416]	; (80019d4 <TIM5_IRQHandler+0x1bc>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4b66      	ldr	r3, [pc, #408]	; (80019d0 <TIM5_IRQHandler+0x1b8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	b291      	uxth	r1, r2
 800183c:	4a66      	ldr	r2, [pc, #408]	; (80019d8 <TIM5_IRQHandler+0x1c0>)
 800183e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		running_sum += current_pos - prev_pos;
 8001842:	4b64      	ldr	r3, [pc, #400]	; (80019d4 <TIM5_IRQHandler+0x1bc>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4b65      	ldr	r3, [pc, #404]	; (80019dc <TIM5_IRQHandler+0x1c4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	1ad2      	subs	r2, r2, r3
 800184c:	4b64      	ldr	r3, [pc, #400]	; (80019e0 <TIM5_IRQHandler+0x1c8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4413      	add	r3, r2
 8001852:	4a63      	ldr	r2, [pc, #396]	; (80019e0 <TIM5_IRQHandler+0x1c8>)
 8001854:	6013      	str	r3, [r2, #0]
		prev_pos = current_pos;
 8001856:	4b5f      	ldr	r3, [pc, #380]	; (80019d4 <TIM5_IRQHandler+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a60      	ldr	r2, [pc, #384]	; (80019dc <TIM5_IRQHandler+0x1c4>)
 800185c:	6013      	str	r3, [r2, #0]
		/* if disp hasnt triggered yet, calculate speed and find disp pos */
		if(!disp_flag){
 800185e:	4b61      	ldr	r3, [pc, #388]	; (80019e4 <TIM5_IRQHandler+0x1cc>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 809f 	bne.w	80019a6 <TIM5_IRQHandler+0x18e>
			if(log_position >= MOVING_AVG_LENGTH) {
 8001868:	4b59      	ldr	r3, [pc, #356]	; (80019d0 <TIM5_IRQHandler+0x1b8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2bc7      	cmp	r3, #199	; 0xc7
 800186e:	f240 809a 	bls.w	80019a6 <TIM5_IRQHandler+0x18e>
				/*update running sum of most recent n data points*/
				running_sum -= (posLog[log_position - MOVING_AVG_LENGTH + 1] - posLog[log_position - MOVING_AVG_LENGTH]);
 8001872:	4b5b      	ldr	r3, [pc, #364]	; (80019e0 <TIM5_IRQHandler+0x1c8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a56      	ldr	r2, [pc, #344]	; (80019d0 <TIM5_IRQHandler+0x1b8>)
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	3ac7      	subs	r2, #199	; 0xc7
 800187c:	4956      	ldr	r1, [pc, #344]	; (80019d8 <TIM5_IRQHandler+0x1c0>)
 800187e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001882:	4610      	mov	r0, r2
 8001884:	4a52      	ldr	r2, [pc, #328]	; (80019d0 <TIM5_IRQHandler+0x1b8>)
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	3ac8      	subs	r2, #200	; 0xc8
 800188a:	4953      	ldr	r1, [pc, #332]	; (80019d8 <TIM5_IRQHandler+0x1c0>)
 800188c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001890:	1a82      	subs	r2, r0, r2
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	4a52      	ldr	r2, [pc, #328]	; (80019e0 <TIM5_IRQHandler+0x1c8>)
 8001896:	6013      	str	r3, [r2, #0]
				speed = (double)running_sum / (double)MOVING_AVG_LENGTH; // speed in pulses per log
 8001898:	4b51      	ldr	r3, [pc, #324]	; (80019e0 <TIM5_IRQHandler+0x1c8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80018a4:	ed9f 5b46 	vldr	d5, [pc, #280]	; 80019c0 <TIM5_IRQHandler+0x1a8>
 80018a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018ac:	4b4e      	ldr	r3, [pc, #312]	; (80019e8 <TIM5_IRQHandler+0x1d0>)
 80018ae:	ed83 7b00 	vstr	d7, [r3]

				uint32_t clocks_per_encoder_pulse = (CLOCKS_PER_LOG / speed); // a form of speed measurement
 80018b2:	4b4d      	ldr	r3, [pc, #308]	; (80019e8 <TIM5_IRQHandler+0x1d0>)
 80018b4:	ed93 6b00 	vldr	d6, [r3]
 80018b8:	ed9f 5b43 	vldr	d5, [pc, #268]	; 80019c8 <TIM5_IRQHandler+0x1b0>
 80018bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80018c0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018c4:	ee17 3a90 	vmov	r3, s15
 80018c8:	607b      	str	r3, [r7, #4]

				next_next_pos = current_pos + 2*speed;	// predicted position 2 TIM5 updates from now. if this is beyond disp_pos we want to trigger TIM4
 80018ca:	4b42      	ldr	r3, [pc, #264]	; (80019d4 <TIM5_IRQHandler+0x1bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80018d6:	4b44      	ldr	r3, [pc, #272]	; (80019e8 <TIM5_IRQHandler+0x1d0>)
 80018d8:	ed93 7b00 	vldr	d7, [r3]
 80018dc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80018e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018e8:	ee17 2a90 	vmov	r2, s15
 80018ec:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <TIM5_IRQHandler+0x1d4>)
 80018ee:	601a      	str	r2, [r3, #0]

				// enc				enc		   enc/log			clocks 				clocks/log
				dispense_pos = (timepoint_pos) - (speed * (dispense_delay_clocks / CLOCKS_PER_LOG));
 80018f0:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <TIM5_IRQHandler+0x1d8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	ee07 3a90 	vmov	s15, r3
 80018f8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80018fc:	4b3d      	ldr	r3, [pc, #244]	; (80019f4 <TIM5_IRQHandler+0x1dc>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001908:	ed9f 4b2f 	vldr	d4, [pc, #188]	; 80019c8 <TIM5_IRQHandler+0x1b0>
 800190c:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001910:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <TIM5_IRQHandler+0x1d0>)
 8001912:	ed93 7b00 	vldr	d7, [r3]
 8001916:	ee25 7b07 	vmul.f64	d7, d5, d7
 800191a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800191e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001922:	ee17 2a90 	vmov	r2, s15
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <TIM5_IRQHandler+0x1e0>)
 8001928:	601a      	str	r2, [r3, #0]
				//		(enc ticks @ intersection) - (encoder ticks between disp signal and contact )
				// dispense_delay_clocks is based on the geometry of the dipense (ie distance and speed that the drop is shooting at)

				if(next_next_pos > dispense_pos) { // dispense comes within the next timebase
 800192a:	4b30      	ldr	r3, [pc, #192]	; (80019ec <TIM5_IRQHandler+0x1d4>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <TIM5_IRQHandler+0x1e0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d937      	bls.n	80019a6 <TIM5_IRQHandler+0x18e>

					/* Insert a marker for when dispense happened */
					//log_position += 1;
					//posLog[log_position] = 12345678;

					disp_flag = 1;
 8001936:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <TIM5_IRQHandler+0x1cc>)
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]

					// using this with a third timer is likely the most accurate. allows inter-encoder values
					clocks_to_disp = clocks_per_encoder_pulse*(dispense_pos-current_pos);
 800193c:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <TIM5_IRQHandler+0x1e0>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <TIM5_IRQHandler+0x1bc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	4a2b      	ldr	r2, [pc, #172]	; (80019fc <TIM5_IRQHandler+0x1e4>)
 800194e:	6013      	str	r3, [r2, #0]

					/* start TIM4 to count to clocks_to_disp */
					TIM4->CR1  &= ~TIM_CR1_CEN; 	//stop counter
 8001950:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <TIM5_IRQHandler+0x1e8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a2a      	ldr	r2, [pc, #168]	; (8001a00 <TIM5_IRQHandler+0x1e8>)
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	6013      	str	r3, [r2, #0]
					TIM4->CNT   = 0;				// Reset count
 800195c:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <TIM5_IRQHandler+0x1e8>)
 800195e:	2200      	movs	r2, #0
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
					TIM4->ARR 	= clocks_to_disp; 	// Update event when we want to dispense
 8001962:	4a27      	ldr	r2, [pc, #156]	; (8001a00 <TIM5_IRQHandler+0x1e8>)
 8001964:	4b25      	ldr	r3, [pc, #148]	; (80019fc <TIM5_IRQHandler+0x1e4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	62d3      	str	r3, [r2, #44]	; 0x2c
					TIM4->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 800196a:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <TIM5_IRQHandler+0x1e8>)
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	4a24      	ldr	r2, [pc, #144]	; (8001a00 <TIM5_IRQHandler+0x1e8>)
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	6113      	str	r3, [r2, #16]
					TIM4->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <TIM5_IRQHandler+0x1e8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a21      	ldr	r2, [pc, #132]	; (8001a00 <TIM5_IRQHandler+0x1e8>)
 800197c:	f023 0302 	bic.w	r3, r3, #2
 8001980:	6013      	str	r3, [r2, #0]
					TIM4->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8001982:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <TIM5_IRQHandler+0x1e8>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <TIM5_IRQHandler+0x1e8>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	60d3      	str	r3, [r2, #12]
					TIM4->CR1  |=  TIM_CR1_ARPE;	// enable auto reload preload
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <TIM5_IRQHandler+0x1e8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1b      	ldr	r2, [pc, #108]	; (8001a00 <TIM5_IRQHandler+0x1e8>)
 8001994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001998:	6013      	str	r3, [r2, #0]
					TIM4->CR1  |=  TIM_CR1_CEN; 	//start counter
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <TIM5_IRQHandler+0x1e8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <TIM5_IRQHandler+0x1e8>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6013      	str	r3, [r2, #0]
			}


		}

		TIM5->SR &= ~TIM_SR_UIF; // Clear the TIM5 update flag
 80019a6:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <TIM5_IRQHandler+0x1ec>)
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	4a16      	ldr	r2, [pc, #88]	; (8001a04 <TIM5_IRQHandler+0x1ec>)
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80019b2:	4815      	ldr	r0, [pc, #84]	; (8001a08 <TIM5_IRQHandler+0x1f0>)
 80019b4:	f004 f8ec 	bl	8005b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	00000000 	.word	0x00000000
 80019c4:	40690000 	.word	0x40690000
 80019c8:	00000000 	.word	0x00000000
 80019cc:	409e0000 	.word	0x409e0000
 80019d0:	2400ec64 	.word	0x2400ec64
 80019d4:	2400ed08 	.word	0x2400ed08
 80019d8:	24000204 	.word	0x24000204
 80019dc:	2400ed0c 	.word	0x2400ed0c
 80019e0:	2400ec68 	.word	0x2400ec68
 80019e4:	2400ec74 	.word	0x2400ec74
 80019e8:	2400ed00 	.word	0x2400ed00
 80019ec:	2400ed10 	.word	0x2400ed10
 80019f0:	2400ec6c 	.word	0x2400ec6c
 80019f4:	2400ec70 	.word	0x2400ec70
 80019f8:	2400ec78 	.word	0x2400ec78
 80019fc:	2400ec84 	.word	0x2400ec84
 8001a00:	40000800 	.word	0x40000800
 8001a04:	40000c00 	.word	0x40000c00
 8001a08:	24000124 	.word	0x24000124

08001a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a14:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <_sbrk+0x5c>)
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <_sbrk+0x60>)
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d102      	bne.n	8001a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <_sbrk+0x64>)
 8001a2a:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <_sbrk+0x68>)
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d207      	bcs.n	8001a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a3c:	f007 fa2a 	bl	8008e94 <__errno>
 8001a40:	4603      	mov	r3, r0
 8001a42:	220c      	movs	r2, #12
 8001a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	e009      	b.n	8001a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <_sbrk+0x64>)
 8001a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	24100000 	.word	0x24100000
 8001a6c:	00000400 	.word	0x00000400
 8001a70:	2400ed14 	.word	0x2400ed14
 8001a74:	2400ee68 	.word	0x2400ee68

08001a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a7c:	4b32      	ldr	r3, [pc, #200]	; (8001b48 <SystemInit+0xd0>)
 8001a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a82:	4a31      	ldr	r2, [pc, #196]	; (8001b48 <SystemInit+0xd0>)
 8001a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <SystemInit+0xd4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d807      	bhi.n	8001aa8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a98:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <SystemInit+0xd4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f023 030f 	bic.w	r3, r3, #15
 8001aa0:	4a2a      	ldr	r2, [pc, #168]	; (8001b4c <SystemInit+0xd4>)
 8001aa2:	f043 0303 	orr.w	r3, r3, #3
 8001aa6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001aa8:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <SystemInit+0xd8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a28      	ldr	r2, [pc, #160]	; (8001b50 <SystemInit+0xd8>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ab4:	4b26      	ldr	r3, [pc, #152]	; (8001b50 <SystemInit+0xd8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001aba:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <SystemInit+0xd8>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4924      	ldr	r1, [pc, #144]	; (8001b50 <SystemInit+0xd8>)
 8001ac0:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <SystemInit+0xdc>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ac6:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <SystemInit+0xd4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ad2:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <SystemInit+0xd4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 030f 	bic.w	r3, r3, #15
 8001ada:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <SystemInit+0xd4>)
 8001adc:	f043 0303 	orr.w	r3, r3, #3
 8001ae0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <SystemInit+0xd8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <SystemInit+0xd8>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001aee:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <SystemInit+0xd8>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001af4:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <SystemInit+0xd8>)
 8001af6:	4a18      	ldr	r2, [pc, #96]	; (8001b58 <SystemInit+0xe0>)
 8001af8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <SystemInit+0xd8>)
 8001afc:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <SystemInit+0xe4>)
 8001afe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <SystemInit+0xd8>)
 8001b02:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <SystemInit+0xe8>)
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <SystemInit+0xd8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b0c:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <SystemInit+0xd8>)
 8001b0e:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <SystemInit+0xe8>)
 8001b10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <SystemInit+0xd8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <SystemInit+0xd8>)
 8001b1a:	4a11      	ldr	r2, [pc, #68]	; (8001b60 <SystemInit+0xe8>)
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <SystemInit+0xd8>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <SystemInit+0xd8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <SystemInit+0xd8>)
 8001b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <SystemInit+0xd8>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <SystemInit+0xec>)
 8001b38:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b3c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00
 8001b4c:	52002000 	.word	0x52002000
 8001b50:	58024400 	.word	0x58024400
 8001b54:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b58:	02020200 	.word	0x02020200
 8001b5c:	01ff0000 	.word	0x01ff0000
 8001b60:	01010280 	.word	0x01010280
 8001b64:	52004000 	.word	0x52004000

08001b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b6c:	f7ff ff84 	bl	8001a78 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b70:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b72:	490d      	ldr	r1, [pc, #52]	; (8001ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b88:	4c0a      	ldr	r4, [pc, #40]	; (8001bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b96:	f007 f983 	bl	8008ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9a:	f7ff f8c7 	bl	8000d2c <main>
  bx  lr
 8001b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ba0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001ba4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ba8:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001bac:	08009824 	.word	0x08009824
  ldr r2, =_sbss
 8001bb0:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001bb4:	2400ee64 	.word	0x2400ee64

08001bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC_IRQHandler>
	...

08001bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc2:	2003      	movs	r0, #3
 8001bc4:	f000 f980 	bl	8001ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001bc8:	f001 ff2e 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_Init+0x68>)
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	4913      	ldr	r1, [pc, #76]	; (8001c28 <HAL_Init+0x6c>)
 8001bda:	5ccb      	ldrb	r3, [r1, r3]
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
 8001be4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <HAL_Init+0x68>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <HAL_Init+0x6c>)
 8001bf0:	5cd3      	ldrb	r3, [r2, r3]
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <HAL_Init+0x70>)
 8001bfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c00:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <HAL_Init+0x74>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c06:	2000      	movs	r0, #0
 8001c08:	f000 f814 	bl	8001c34 <HAL_InitTick>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e002      	b.n	8001c1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c16:	f7ff fc3d 	bl	8001494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	58024400 	.word	0x58024400
 8001c28:	080097a8 	.word	0x080097a8
 8001c2c:	24000010 	.word	0x24000010
 8001c30:	2400000c 	.word	0x2400000c

08001c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_InitTick+0x60>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e021      	b.n	8001c8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <HAL_InitTick+0x64>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_InitTick+0x60>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f965 	bl	8001f2e <HAL_SYSTICK_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00e      	b.n	8001c8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d80a      	bhi.n	8001c8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f000 f92f 	bl	8001ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c80:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <HAL_InitTick+0x68>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	24000018 	.word	0x24000018
 8001c98:	2400000c 	.word	0x2400000c
 8001c9c:	24000014 	.word	0x24000014

08001ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_IncTick+0x20>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_IncTick+0x24>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <HAL_IncTick+0x24>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	24000018 	.word	0x24000018
 8001cc4:	2400ed18 	.word	0x2400ed18

08001cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <HAL_GetTick+0x14>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	2400ed18 	.word	0x2400ed18

08001ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff ffee 	bl	8001cc8 <HAL_GetTick>
 8001cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d005      	beq.n	8001d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_Delay+0x44>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d06:	bf00      	nop
 8001d08:	f7ff ffde 	bl	8001cc8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d8f7      	bhi.n	8001d08 <HAL_Delay+0x28>
  {
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	24000018 	.word	0x24000018

08001d28 <__NVIC_SetPriorityGrouping>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <__NVIC_SetPriorityGrouping+0x40>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d56:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <__NVIC_SetPriorityGrouping+0x40>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60d3      	str	r3, [r2, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00
 8001d6c:	05fa0000 	.word	0x05fa0000

08001d70 <__NVIC_GetPriorityGrouping>:
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_EnableIRQ>:
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	db0b      	blt.n	8001db6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	4907      	ldr	r1, [pc, #28]	; (8001dc4 <__NVIC_EnableIRQ+0x38>)
 8001da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	2001      	movs	r0, #1
 8001dae:	fa00 f202 	lsl.w	r2, r0, r2
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <__NVIC_SetPriority>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	db0a      	blt.n	8001df2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	490c      	ldr	r1, [pc, #48]	; (8001e14 <__NVIC_SetPriority+0x4c>)
 8001de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	440b      	add	r3, r1
 8001dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001df0:	e00a      	b.n	8001e08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4908      	ldr	r1, [pc, #32]	; (8001e18 <__NVIC_SetPriority+0x50>)
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	0112      	lsls	r2, r2, #4
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	440b      	add	r3, r1
 8001e06:	761a      	strb	r2, [r3, #24]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000e100 	.word	0xe000e100
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f1c3 0307 	rsb	r3, r3, #7
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	bf28      	it	cs
 8001e3a:	2304      	movcs	r3, #4
 8001e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3304      	adds	r3, #4
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d902      	bls.n	8001e4c <NVIC_EncodePriority+0x30>
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3b03      	subs	r3, #3
 8001e4a:	e000      	b.n	8001e4e <NVIC_EncodePriority+0x32>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	401a      	ands	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	43d9      	mvns	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	4313      	orrs	r3, r2
         );
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	; 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e94:	d301      	bcc.n	8001e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00f      	b.n	8001eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <SysTick_Config+0x40>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea2:	210f      	movs	r1, #15
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f7ff ff8e 	bl	8001dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <SysTick_Config+0x40>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <SysTick_Config+0x40>)
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	e000e010 	.word	0xe000e010

08001ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff29 	bl	8001d28 <__NVIC_SetPriorityGrouping>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eec:	f7ff ff40 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001ef0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f7ff ff90 	bl	8001e1c <NVIC_EncodePriority>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff5f 	bl	8001dc8 <__NVIC_SetPriority>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff33 	bl	8001d8c <__NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffa4 	bl	8001e84 <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001f50:	f7ff feba 	bl	8001cc8 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e2dc      	b.n	800251a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d008      	beq.n	8001f7e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e2cd      	b.n	800251a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a76      	ldr	r2, [pc, #472]	; (800215c <HAL_DMA_Abort+0x214>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d04a      	beq.n	800201e <HAL_DMA_Abort+0xd6>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a74      	ldr	r2, [pc, #464]	; (8002160 <HAL_DMA_Abort+0x218>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d045      	beq.n	800201e <HAL_DMA_Abort+0xd6>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a73      	ldr	r2, [pc, #460]	; (8002164 <HAL_DMA_Abort+0x21c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d040      	beq.n	800201e <HAL_DMA_Abort+0xd6>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a71      	ldr	r2, [pc, #452]	; (8002168 <HAL_DMA_Abort+0x220>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d03b      	beq.n	800201e <HAL_DMA_Abort+0xd6>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a70      	ldr	r2, [pc, #448]	; (800216c <HAL_DMA_Abort+0x224>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d036      	beq.n	800201e <HAL_DMA_Abort+0xd6>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a6e      	ldr	r2, [pc, #440]	; (8002170 <HAL_DMA_Abort+0x228>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d031      	beq.n	800201e <HAL_DMA_Abort+0xd6>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a6d      	ldr	r2, [pc, #436]	; (8002174 <HAL_DMA_Abort+0x22c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d02c      	beq.n	800201e <HAL_DMA_Abort+0xd6>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a6b      	ldr	r2, [pc, #428]	; (8002178 <HAL_DMA_Abort+0x230>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d027      	beq.n	800201e <HAL_DMA_Abort+0xd6>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a6a      	ldr	r2, [pc, #424]	; (800217c <HAL_DMA_Abort+0x234>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d022      	beq.n	800201e <HAL_DMA_Abort+0xd6>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a68      	ldr	r2, [pc, #416]	; (8002180 <HAL_DMA_Abort+0x238>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d01d      	beq.n	800201e <HAL_DMA_Abort+0xd6>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a67      	ldr	r2, [pc, #412]	; (8002184 <HAL_DMA_Abort+0x23c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d018      	beq.n	800201e <HAL_DMA_Abort+0xd6>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a65      	ldr	r2, [pc, #404]	; (8002188 <HAL_DMA_Abort+0x240>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d013      	beq.n	800201e <HAL_DMA_Abort+0xd6>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a64      	ldr	r2, [pc, #400]	; (800218c <HAL_DMA_Abort+0x244>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00e      	beq.n	800201e <HAL_DMA_Abort+0xd6>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a62      	ldr	r2, [pc, #392]	; (8002190 <HAL_DMA_Abort+0x248>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d009      	beq.n	800201e <HAL_DMA_Abort+0xd6>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a61      	ldr	r2, [pc, #388]	; (8002194 <HAL_DMA_Abort+0x24c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d004      	beq.n	800201e <HAL_DMA_Abort+0xd6>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a5f      	ldr	r2, [pc, #380]	; (8002198 <HAL_DMA_Abort+0x250>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d101      	bne.n	8002022 <HAL_DMA_Abort+0xda>
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <HAL_DMA_Abort+0xdc>
 8002022:	2300      	movs	r3, #0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d013      	beq.n	8002050 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 021e 	bic.w	r2, r2, #30
 8002036:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002046:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	e00a      	b.n	8002066 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 020e 	bic.w	r2, r2, #14
 800205e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a3c      	ldr	r2, [pc, #240]	; (800215c <HAL_DMA_Abort+0x214>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d072      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a3a      	ldr	r2, [pc, #232]	; (8002160 <HAL_DMA_Abort+0x218>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d06d      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a39      	ldr	r2, [pc, #228]	; (8002164 <HAL_DMA_Abort+0x21c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d068      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a37      	ldr	r2, [pc, #220]	; (8002168 <HAL_DMA_Abort+0x220>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d063      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a36      	ldr	r2, [pc, #216]	; (800216c <HAL_DMA_Abort+0x224>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d05e      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a34      	ldr	r2, [pc, #208]	; (8002170 <HAL_DMA_Abort+0x228>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d059      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a33      	ldr	r2, [pc, #204]	; (8002174 <HAL_DMA_Abort+0x22c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d054      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a31      	ldr	r2, [pc, #196]	; (8002178 <HAL_DMA_Abort+0x230>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d04f      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a30      	ldr	r2, [pc, #192]	; (800217c <HAL_DMA_Abort+0x234>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d04a      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a2e      	ldr	r2, [pc, #184]	; (8002180 <HAL_DMA_Abort+0x238>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d045      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a2d      	ldr	r2, [pc, #180]	; (8002184 <HAL_DMA_Abort+0x23c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d040      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a2b      	ldr	r2, [pc, #172]	; (8002188 <HAL_DMA_Abort+0x240>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d03b      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a2a      	ldr	r2, [pc, #168]	; (800218c <HAL_DMA_Abort+0x244>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d036      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a28      	ldr	r2, [pc, #160]	; (8002190 <HAL_DMA_Abort+0x248>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d031      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a27      	ldr	r2, [pc, #156]	; (8002194 <HAL_DMA_Abort+0x24c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d02c      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a25      	ldr	r2, [pc, #148]	; (8002198 <HAL_DMA_Abort+0x250>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d027      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a24      	ldr	r2, [pc, #144]	; (800219c <HAL_DMA_Abort+0x254>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d022      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a22      	ldr	r2, [pc, #136]	; (80021a0 <HAL_DMA_Abort+0x258>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d01d      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <HAL_DMA_Abort+0x25c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d018      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a1f      	ldr	r2, [pc, #124]	; (80021a8 <HAL_DMA_Abort+0x260>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d013      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a1e      	ldr	r2, [pc, #120]	; (80021ac <HAL_DMA_Abort+0x264>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d00e      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a1c      	ldr	r2, [pc, #112]	; (80021b0 <HAL_DMA_Abort+0x268>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d009      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <HAL_DMA_Abort+0x26c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d004      	beq.n	8002156 <HAL_DMA_Abort+0x20e>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a19      	ldr	r2, [pc, #100]	; (80021b8 <HAL_DMA_Abort+0x270>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d132      	bne.n	80021bc <HAL_DMA_Abort+0x274>
 8002156:	2301      	movs	r3, #1
 8002158:	e031      	b.n	80021be <HAL_DMA_Abort+0x276>
 800215a:	bf00      	nop
 800215c:	40020010 	.word	0x40020010
 8002160:	40020028 	.word	0x40020028
 8002164:	40020040 	.word	0x40020040
 8002168:	40020058 	.word	0x40020058
 800216c:	40020070 	.word	0x40020070
 8002170:	40020088 	.word	0x40020088
 8002174:	400200a0 	.word	0x400200a0
 8002178:	400200b8 	.word	0x400200b8
 800217c:	40020410 	.word	0x40020410
 8002180:	40020428 	.word	0x40020428
 8002184:	40020440 	.word	0x40020440
 8002188:	40020458 	.word	0x40020458
 800218c:	40020470 	.word	0x40020470
 8002190:	40020488 	.word	0x40020488
 8002194:	400204a0 	.word	0x400204a0
 8002198:	400204b8 	.word	0x400204b8
 800219c:	58025408 	.word	0x58025408
 80021a0:	5802541c 	.word	0x5802541c
 80021a4:	58025430 	.word	0x58025430
 80021a8:	58025444 	.word	0x58025444
 80021ac:	58025458 	.word	0x58025458
 80021b0:	5802546c 	.word	0x5802546c
 80021b4:	58025480 	.word	0x58025480
 80021b8:	58025494 	.word	0x58025494
 80021bc:	2300      	movs	r3, #0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a6d      	ldr	r2, [pc, #436]	; (800238c <HAL_DMA_Abort+0x444>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d04a      	beq.n	8002272 <HAL_DMA_Abort+0x32a>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a6b      	ldr	r2, [pc, #428]	; (8002390 <HAL_DMA_Abort+0x448>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d045      	beq.n	8002272 <HAL_DMA_Abort+0x32a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a6a      	ldr	r2, [pc, #424]	; (8002394 <HAL_DMA_Abort+0x44c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d040      	beq.n	8002272 <HAL_DMA_Abort+0x32a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a68      	ldr	r2, [pc, #416]	; (8002398 <HAL_DMA_Abort+0x450>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d03b      	beq.n	8002272 <HAL_DMA_Abort+0x32a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a67      	ldr	r2, [pc, #412]	; (800239c <HAL_DMA_Abort+0x454>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d036      	beq.n	8002272 <HAL_DMA_Abort+0x32a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a65      	ldr	r2, [pc, #404]	; (80023a0 <HAL_DMA_Abort+0x458>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d031      	beq.n	8002272 <HAL_DMA_Abort+0x32a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a64      	ldr	r2, [pc, #400]	; (80023a4 <HAL_DMA_Abort+0x45c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d02c      	beq.n	8002272 <HAL_DMA_Abort+0x32a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a62      	ldr	r2, [pc, #392]	; (80023a8 <HAL_DMA_Abort+0x460>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d027      	beq.n	8002272 <HAL_DMA_Abort+0x32a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a61      	ldr	r2, [pc, #388]	; (80023ac <HAL_DMA_Abort+0x464>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d022      	beq.n	8002272 <HAL_DMA_Abort+0x32a>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a5f      	ldr	r2, [pc, #380]	; (80023b0 <HAL_DMA_Abort+0x468>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d01d      	beq.n	8002272 <HAL_DMA_Abort+0x32a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a5e      	ldr	r2, [pc, #376]	; (80023b4 <HAL_DMA_Abort+0x46c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d018      	beq.n	8002272 <HAL_DMA_Abort+0x32a>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a5c      	ldr	r2, [pc, #368]	; (80023b8 <HAL_DMA_Abort+0x470>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d013      	beq.n	8002272 <HAL_DMA_Abort+0x32a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a5b      	ldr	r2, [pc, #364]	; (80023bc <HAL_DMA_Abort+0x474>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00e      	beq.n	8002272 <HAL_DMA_Abort+0x32a>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a59      	ldr	r2, [pc, #356]	; (80023c0 <HAL_DMA_Abort+0x478>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d009      	beq.n	8002272 <HAL_DMA_Abort+0x32a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a58      	ldr	r2, [pc, #352]	; (80023c4 <HAL_DMA_Abort+0x47c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d004      	beq.n	8002272 <HAL_DMA_Abort+0x32a>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a56      	ldr	r2, [pc, #344]	; (80023c8 <HAL_DMA_Abort+0x480>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d108      	bne.n	8002284 <HAL_DMA_Abort+0x33c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0201 	bic.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e007      	b.n	8002294 <HAL_DMA_Abort+0x34c>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0201 	bic.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002294:	e013      	b.n	80022be <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002296:	f7ff fd17 	bl	8001cc8 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b05      	cmp	r3, #5
 80022a2:	d90c      	bls.n	80022be <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2220      	movs	r2, #32
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2203      	movs	r2, #3
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e12d      	b.n	800251a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1e5      	bne.n	8002296 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a2f      	ldr	r2, [pc, #188]	; (800238c <HAL_DMA_Abort+0x444>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d04a      	beq.n	800236a <HAL_DMA_Abort+0x422>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a2d      	ldr	r2, [pc, #180]	; (8002390 <HAL_DMA_Abort+0x448>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d045      	beq.n	800236a <HAL_DMA_Abort+0x422>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2c      	ldr	r2, [pc, #176]	; (8002394 <HAL_DMA_Abort+0x44c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d040      	beq.n	800236a <HAL_DMA_Abort+0x422>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a2a      	ldr	r2, [pc, #168]	; (8002398 <HAL_DMA_Abort+0x450>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d03b      	beq.n	800236a <HAL_DMA_Abort+0x422>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a29      	ldr	r2, [pc, #164]	; (800239c <HAL_DMA_Abort+0x454>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d036      	beq.n	800236a <HAL_DMA_Abort+0x422>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a27      	ldr	r2, [pc, #156]	; (80023a0 <HAL_DMA_Abort+0x458>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d031      	beq.n	800236a <HAL_DMA_Abort+0x422>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a26      	ldr	r2, [pc, #152]	; (80023a4 <HAL_DMA_Abort+0x45c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d02c      	beq.n	800236a <HAL_DMA_Abort+0x422>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a24      	ldr	r2, [pc, #144]	; (80023a8 <HAL_DMA_Abort+0x460>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d027      	beq.n	800236a <HAL_DMA_Abort+0x422>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a23      	ldr	r2, [pc, #140]	; (80023ac <HAL_DMA_Abort+0x464>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d022      	beq.n	800236a <HAL_DMA_Abort+0x422>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a21      	ldr	r2, [pc, #132]	; (80023b0 <HAL_DMA_Abort+0x468>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d01d      	beq.n	800236a <HAL_DMA_Abort+0x422>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a20      	ldr	r2, [pc, #128]	; (80023b4 <HAL_DMA_Abort+0x46c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d018      	beq.n	800236a <HAL_DMA_Abort+0x422>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1e      	ldr	r2, [pc, #120]	; (80023b8 <HAL_DMA_Abort+0x470>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_DMA_Abort+0x422>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1d      	ldr	r2, [pc, #116]	; (80023bc <HAL_DMA_Abort+0x474>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d00e      	beq.n	800236a <HAL_DMA_Abort+0x422>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1b      	ldr	r2, [pc, #108]	; (80023c0 <HAL_DMA_Abort+0x478>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d009      	beq.n	800236a <HAL_DMA_Abort+0x422>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a1a      	ldr	r2, [pc, #104]	; (80023c4 <HAL_DMA_Abort+0x47c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d004      	beq.n	800236a <HAL_DMA_Abort+0x422>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <HAL_DMA_Abort+0x480>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_DMA_Abort+0x426>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_DMA_Abort+0x428>
 800236e:	2300      	movs	r3, #0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d02b      	beq.n	80023cc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002378:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	223f      	movs	r2, #63	; 0x3f
 8002384:	409a      	lsls	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	e02a      	b.n	80023e2 <HAL_DMA_Abort+0x49a>
 800238c:	40020010 	.word	0x40020010
 8002390:	40020028 	.word	0x40020028
 8002394:	40020040 	.word	0x40020040
 8002398:	40020058 	.word	0x40020058
 800239c:	40020070 	.word	0x40020070
 80023a0:	40020088 	.word	0x40020088
 80023a4:	400200a0 	.word	0x400200a0
 80023a8:	400200b8 	.word	0x400200b8
 80023ac:	40020410 	.word	0x40020410
 80023b0:	40020428 	.word	0x40020428
 80023b4:	40020440 	.word	0x40020440
 80023b8:	40020458 	.word	0x40020458
 80023bc:	40020470 	.word	0x40020470
 80023c0:	40020488 	.word	0x40020488
 80023c4:	400204a0 	.word	0x400204a0
 80023c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	2201      	movs	r2, #1
 80023dc:	409a      	lsls	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a4f      	ldr	r2, [pc, #316]	; (8002524 <HAL_DMA_Abort+0x5dc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d072      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a4d      	ldr	r2, [pc, #308]	; (8002528 <HAL_DMA_Abort+0x5e0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d06d      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a4c      	ldr	r2, [pc, #304]	; (800252c <HAL_DMA_Abort+0x5e4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d068      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a4a      	ldr	r2, [pc, #296]	; (8002530 <HAL_DMA_Abort+0x5e8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d063      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a49      	ldr	r2, [pc, #292]	; (8002534 <HAL_DMA_Abort+0x5ec>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d05e      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a47      	ldr	r2, [pc, #284]	; (8002538 <HAL_DMA_Abort+0x5f0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d059      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a46      	ldr	r2, [pc, #280]	; (800253c <HAL_DMA_Abort+0x5f4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d054      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a44      	ldr	r2, [pc, #272]	; (8002540 <HAL_DMA_Abort+0x5f8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d04f      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a43      	ldr	r2, [pc, #268]	; (8002544 <HAL_DMA_Abort+0x5fc>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d04a      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a41      	ldr	r2, [pc, #260]	; (8002548 <HAL_DMA_Abort+0x600>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d045      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a40      	ldr	r2, [pc, #256]	; (800254c <HAL_DMA_Abort+0x604>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d040      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a3e      	ldr	r2, [pc, #248]	; (8002550 <HAL_DMA_Abort+0x608>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d03b      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a3d      	ldr	r2, [pc, #244]	; (8002554 <HAL_DMA_Abort+0x60c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d036      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a3b      	ldr	r2, [pc, #236]	; (8002558 <HAL_DMA_Abort+0x610>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d031      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a3a      	ldr	r2, [pc, #232]	; (800255c <HAL_DMA_Abort+0x614>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d02c      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a38      	ldr	r2, [pc, #224]	; (8002560 <HAL_DMA_Abort+0x618>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d027      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a37      	ldr	r2, [pc, #220]	; (8002564 <HAL_DMA_Abort+0x61c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d022      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a35      	ldr	r2, [pc, #212]	; (8002568 <HAL_DMA_Abort+0x620>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d01d      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a34      	ldr	r2, [pc, #208]	; (800256c <HAL_DMA_Abort+0x624>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d018      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a32      	ldr	r2, [pc, #200]	; (8002570 <HAL_DMA_Abort+0x628>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a31      	ldr	r2, [pc, #196]	; (8002574 <HAL_DMA_Abort+0x62c>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d00e      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a2f      	ldr	r2, [pc, #188]	; (8002578 <HAL_DMA_Abort+0x630>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d009      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2e      	ldr	r2, [pc, #184]	; (800257c <HAL_DMA_Abort+0x634>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d004      	beq.n	80024d2 <HAL_DMA_Abort+0x58a>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2c      	ldr	r2, [pc, #176]	; (8002580 <HAL_DMA_Abort+0x638>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <HAL_DMA_Abort+0x58e>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <HAL_DMA_Abort+0x590>
 80024d6:	2300      	movs	r3, #0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d015      	beq.n	8002508 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00c      	beq.n	8002508 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002506:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40020010 	.word	0x40020010
 8002528:	40020028 	.word	0x40020028
 800252c:	40020040 	.word	0x40020040
 8002530:	40020058 	.word	0x40020058
 8002534:	40020070 	.word	0x40020070
 8002538:	40020088 	.word	0x40020088
 800253c:	400200a0 	.word	0x400200a0
 8002540:	400200b8 	.word	0x400200b8
 8002544:	40020410 	.word	0x40020410
 8002548:	40020428 	.word	0x40020428
 800254c:	40020440 	.word	0x40020440
 8002550:	40020458 	.word	0x40020458
 8002554:	40020470 	.word	0x40020470
 8002558:	40020488 	.word	0x40020488
 800255c:	400204a0 	.word	0x400204a0
 8002560:	400204b8 	.word	0x400204b8
 8002564:	58025408 	.word	0x58025408
 8002568:	5802541c 	.word	0x5802541c
 800256c:	58025430 	.word	0x58025430
 8002570:	58025444 	.word	0x58025444
 8002574:	58025458 	.word	0x58025458
 8002578:	5802546c 	.word	0x5802546c
 800257c:	58025480 	.word	0x58025480
 8002580:	58025494 	.word	0x58025494

08002584 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e237      	b.n	8002a06 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d004      	beq.n	80025ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2280      	movs	r2, #128	; 0x80
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e22c      	b.n	8002a06 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a5c      	ldr	r2, [pc, #368]	; (8002724 <HAL_DMA_Abort_IT+0x1a0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d04a      	beq.n	800264c <HAL_DMA_Abort_IT+0xc8>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a5b      	ldr	r2, [pc, #364]	; (8002728 <HAL_DMA_Abort_IT+0x1a4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d045      	beq.n	800264c <HAL_DMA_Abort_IT+0xc8>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a59      	ldr	r2, [pc, #356]	; (800272c <HAL_DMA_Abort_IT+0x1a8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d040      	beq.n	800264c <HAL_DMA_Abort_IT+0xc8>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a58      	ldr	r2, [pc, #352]	; (8002730 <HAL_DMA_Abort_IT+0x1ac>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d03b      	beq.n	800264c <HAL_DMA_Abort_IT+0xc8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a56      	ldr	r2, [pc, #344]	; (8002734 <HAL_DMA_Abort_IT+0x1b0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d036      	beq.n	800264c <HAL_DMA_Abort_IT+0xc8>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a55      	ldr	r2, [pc, #340]	; (8002738 <HAL_DMA_Abort_IT+0x1b4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d031      	beq.n	800264c <HAL_DMA_Abort_IT+0xc8>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a53      	ldr	r2, [pc, #332]	; (800273c <HAL_DMA_Abort_IT+0x1b8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d02c      	beq.n	800264c <HAL_DMA_Abort_IT+0xc8>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a52      	ldr	r2, [pc, #328]	; (8002740 <HAL_DMA_Abort_IT+0x1bc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d027      	beq.n	800264c <HAL_DMA_Abort_IT+0xc8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a50      	ldr	r2, [pc, #320]	; (8002744 <HAL_DMA_Abort_IT+0x1c0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d022      	beq.n	800264c <HAL_DMA_Abort_IT+0xc8>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a4f      	ldr	r2, [pc, #316]	; (8002748 <HAL_DMA_Abort_IT+0x1c4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d01d      	beq.n	800264c <HAL_DMA_Abort_IT+0xc8>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a4d      	ldr	r2, [pc, #308]	; (800274c <HAL_DMA_Abort_IT+0x1c8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d018      	beq.n	800264c <HAL_DMA_Abort_IT+0xc8>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a4c      	ldr	r2, [pc, #304]	; (8002750 <HAL_DMA_Abort_IT+0x1cc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d013      	beq.n	800264c <HAL_DMA_Abort_IT+0xc8>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a4a      	ldr	r2, [pc, #296]	; (8002754 <HAL_DMA_Abort_IT+0x1d0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00e      	beq.n	800264c <HAL_DMA_Abort_IT+0xc8>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a49      	ldr	r2, [pc, #292]	; (8002758 <HAL_DMA_Abort_IT+0x1d4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d009      	beq.n	800264c <HAL_DMA_Abort_IT+0xc8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a47      	ldr	r2, [pc, #284]	; (800275c <HAL_DMA_Abort_IT+0x1d8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d004      	beq.n	800264c <HAL_DMA_Abort_IT+0xc8>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a46      	ldr	r2, [pc, #280]	; (8002760 <HAL_DMA_Abort_IT+0x1dc>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d101      	bne.n	8002650 <HAL_DMA_Abort_IT+0xcc>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <HAL_DMA_Abort_IT+0xce>
 8002650:	2300      	movs	r3, #0
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8086 	beq.w	8002764 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2204      	movs	r2, #4
 800265c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a2f      	ldr	r2, [pc, #188]	; (8002724 <HAL_DMA_Abort_IT+0x1a0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d04a      	beq.n	8002700 <HAL_DMA_Abort_IT+0x17c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a2e      	ldr	r2, [pc, #184]	; (8002728 <HAL_DMA_Abort_IT+0x1a4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d045      	beq.n	8002700 <HAL_DMA_Abort_IT+0x17c>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a2c      	ldr	r2, [pc, #176]	; (800272c <HAL_DMA_Abort_IT+0x1a8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d040      	beq.n	8002700 <HAL_DMA_Abort_IT+0x17c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a2b      	ldr	r2, [pc, #172]	; (8002730 <HAL_DMA_Abort_IT+0x1ac>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d03b      	beq.n	8002700 <HAL_DMA_Abort_IT+0x17c>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a29      	ldr	r2, [pc, #164]	; (8002734 <HAL_DMA_Abort_IT+0x1b0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d036      	beq.n	8002700 <HAL_DMA_Abort_IT+0x17c>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a28      	ldr	r2, [pc, #160]	; (8002738 <HAL_DMA_Abort_IT+0x1b4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d031      	beq.n	8002700 <HAL_DMA_Abort_IT+0x17c>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a26      	ldr	r2, [pc, #152]	; (800273c <HAL_DMA_Abort_IT+0x1b8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d02c      	beq.n	8002700 <HAL_DMA_Abort_IT+0x17c>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a25      	ldr	r2, [pc, #148]	; (8002740 <HAL_DMA_Abort_IT+0x1bc>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d027      	beq.n	8002700 <HAL_DMA_Abort_IT+0x17c>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a23      	ldr	r2, [pc, #140]	; (8002744 <HAL_DMA_Abort_IT+0x1c0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d022      	beq.n	8002700 <HAL_DMA_Abort_IT+0x17c>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a22      	ldr	r2, [pc, #136]	; (8002748 <HAL_DMA_Abort_IT+0x1c4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d01d      	beq.n	8002700 <HAL_DMA_Abort_IT+0x17c>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a20      	ldr	r2, [pc, #128]	; (800274c <HAL_DMA_Abort_IT+0x1c8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d018      	beq.n	8002700 <HAL_DMA_Abort_IT+0x17c>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1f      	ldr	r2, [pc, #124]	; (8002750 <HAL_DMA_Abort_IT+0x1cc>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d013      	beq.n	8002700 <HAL_DMA_Abort_IT+0x17c>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1d      	ldr	r2, [pc, #116]	; (8002754 <HAL_DMA_Abort_IT+0x1d0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00e      	beq.n	8002700 <HAL_DMA_Abort_IT+0x17c>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <HAL_DMA_Abort_IT+0x1d4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d009      	beq.n	8002700 <HAL_DMA_Abort_IT+0x17c>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1a      	ldr	r2, [pc, #104]	; (800275c <HAL_DMA_Abort_IT+0x1d8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d004      	beq.n	8002700 <HAL_DMA_Abort_IT+0x17c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a19      	ldr	r2, [pc, #100]	; (8002760 <HAL_DMA_Abort_IT+0x1dc>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d108      	bne.n	8002712 <HAL_DMA_Abort_IT+0x18e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	e178      	b.n	8002a04 <HAL_DMA_Abort_IT+0x480>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e16f      	b.n	8002a04 <HAL_DMA_Abort_IT+0x480>
 8002724:	40020010 	.word	0x40020010
 8002728:	40020028 	.word	0x40020028
 800272c:	40020040 	.word	0x40020040
 8002730:	40020058 	.word	0x40020058
 8002734:	40020070 	.word	0x40020070
 8002738:	40020088 	.word	0x40020088
 800273c:	400200a0 	.word	0x400200a0
 8002740:	400200b8 	.word	0x400200b8
 8002744:	40020410 	.word	0x40020410
 8002748:	40020428 	.word	0x40020428
 800274c:	40020440 	.word	0x40020440
 8002750:	40020458 	.word	0x40020458
 8002754:	40020470 	.word	0x40020470
 8002758:	40020488 	.word	0x40020488
 800275c:	400204a0 	.word	0x400204a0
 8002760:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 020e 	bic.w	r2, r2, #14
 8002772:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a6c      	ldr	r2, [pc, #432]	; (800292c <HAL_DMA_Abort_IT+0x3a8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d04a      	beq.n	8002814 <HAL_DMA_Abort_IT+0x290>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a6b      	ldr	r2, [pc, #428]	; (8002930 <HAL_DMA_Abort_IT+0x3ac>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d045      	beq.n	8002814 <HAL_DMA_Abort_IT+0x290>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a69      	ldr	r2, [pc, #420]	; (8002934 <HAL_DMA_Abort_IT+0x3b0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d040      	beq.n	8002814 <HAL_DMA_Abort_IT+0x290>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a68      	ldr	r2, [pc, #416]	; (8002938 <HAL_DMA_Abort_IT+0x3b4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d03b      	beq.n	8002814 <HAL_DMA_Abort_IT+0x290>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a66      	ldr	r2, [pc, #408]	; (800293c <HAL_DMA_Abort_IT+0x3b8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d036      	beq.n	8002814 <HAL_DMA_Abort_IT+0x290>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a65      	ldr	r2, [pc, #404]	; (8002940 <HAL_DMA_Abort_IT+0x3bc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d031      	beq.n	8002814 <HAL_DMA_Abort_IT+0x290>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a63      	ldr	r2, [pc, #396]	; (8002944 <HAL_DMA_Abort_IT+0x3c0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d02c      	beq.n	8002814 <HAL_DMA_Abort_IT+0x290>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a62      	ldr	r2, [pc, #392]	; (8002948 <HAL_DMA_Abort_IT+0x3c4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d027      	beq.n	8002814 <HAL_DMA_Abort_IT+0x290>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a60      	ldr	r2, [pc, #384]	; (800294c <HAL_DMA_Abort_IT+0x3c8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d022      	beq.n	8002814 <HAL_DMA_Abort_IT+0x290>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a5f      	ldr	r2, [pc, #380]	; (8002950 <HAL_DMA_Abort_IT+0x3cc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d01d      	beq.n	8002814 <HAL_DMA_Abort_IT+0x290>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a5d      	ldr	r2, [pc, #372]	; (8002954 <HAL_DMA_Abort_IT+0x3d0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d018      	beq.n	8002814 <HAL_DMA_Abort_IT+0x290>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a5c      	ldr	r2, [pc, #368]	; (8002958 <HAL_DMA_Abort_IT+0x3d4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d013      	beq.n	8002814 <HAL_DMA_Abort_IT+0x290>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a5a      	ldr	r2, [pc, #360]	; (800295c <HAL_DMA_Abort_IT+0x3d8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00e      	beq.n	8002814 <HAL_DMA_Abort_IT+0x290>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a59      	ldr	r2, [pc, #356]	; (8002960 <HAL_DMA_Abort_IT+0x3dc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d009      	beq.n	8002814 <HAL_DMA_Abort_IT+0x290>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a57      	ldr	r2, [pc, #348]	; (8002964 <HAL_DMA_Abort_IT+0x3e0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d004      	beq.n	8002814 <HAL_DMA_Abort_IT+0x290>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a56      	ldr	r2, [pc, #344]	; (8002968 <HAL_DMA_Abort_IT+0x3e4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d108      	bne.n	8002826 <HAL_DMA_Abort_IT+0x2a2>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	e007      	b.n	8002836 <HAL_DMA_Abort_IT+0x2b2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a3c      	ldr	r2, [pc, #240]	; (800292c <HAL_DMA_Abort_IT+0x3a8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d072      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a3a      	ldr	r2, [pc, #232]	; (8002930 <HAL_DMA_Abort_IT+0x3ac>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d06d      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a39      	ldr	r2, [pc, #228]	; (8002934 <HAL_DMA_Abort_IT+0x3b0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d068      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a37      	ldr	r2, [pc, #220]	; (8002938 <HAL_DMA_Abort_IT+0x3b4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d063      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a36      	ldr	r2, [pc, #216]	; (800293c <HAL_DMA_Abort_IT+0x3b8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d05e      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a34      	ldr	r2, [pc, #208]	; (8002940 <HAL_DMA_Abort_IT+0x3bc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d059      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a33      	ldr	r2, [pc, #204]	; (8002944 <HAL_DMA_Abort_IT+0x3c0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d054      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a31      	ldr	r2, [pc, #196]	; (8002948 <HAL_DMA_Abort_IT+0x3c4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d04f      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a30      	ldr	r2, [pc, #192]	; (800294c <HAL_DMA_Abort_IT+0x3c8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d04a      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a2e      	ldr	r2, [pc, #184]	; (8002950 <HAL_DMA_Abort_IT+0x3cc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d045      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a2d      	ldr	r2, [pc, #180]	; (8002954 <HAL_DMA_Abort_IT+0x3d0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d040      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a2b      	ldr	r2, [pc, #172]	; (8002958 <HAL_DMA_Abort_IT+0x3d4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d03b      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2a      	ldr	r2, [pc, #168]	; (800295c <HAL_DMA_Abort_IT+0x3d8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d036      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a28      	ldr	r2, [pc, #160]	; (8002960 <HAL_DMA_Abort_IT+0x3dc>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d031      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a27      	ldr	r2, [pc, #156]	; (8002964 <HAL_DMA_Abort_IT+0x3e0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d02c      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a25      	ldr	r2, [pc, #148]	; (8002968 <HAL_DMA_Abort_IT+0x3e4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d027      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a24      	ldr	r2, [pc, #144]	; (800296c <HAL_DMA_Abort_IT+0x3e8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d022      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a22      	ldr	r2, [pc, #136]	; (8002970 <HAL_DMA_Abort_IT+0x3ec>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01d      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a21      	ldr	r2, [pc, #132]	; (8002974 <HAL_DMA_Abort_IT+0x3f0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d018      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1f      	ldr	r2, [pc, #124]	; (8002978 <HAL_DMA_Abort_IT+0x3f4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d013      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1e      	ldr	r2, [pc, #120]	; (800297c <HAL_DMA_Abort_IT+0x3f8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00e      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <HAL_DMA_Abort_IT+0x3fc>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d009      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1b      	ldr	r2, [pc, #108]	; (8002984 <HAL_DMA_Abort_IT+0x400>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d004      	beq.n	8002926 <HAL_DMA_Abort_IT+0x3a2>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a19      	ldr	r2, [pc, #100]	; (8002988 <HAL_DMA_Abort_IT+0x404>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d132      	bne.n	800298c <HAL_DMA_Abort_IT+0x408>
 8002926:	2301      	movs	r3, #1
 8002928:	e031      	b.n	800298e <HAL_DMA_Abort_IT+0x40a>
 800292a:	bf00      	nop
 800292c:	40020010 	.word	0x40020010
 8002930:	40020028 	.word	0x40020028
 8002934:	40020040 	.word	0x40020040
 8002938:	40020058 	.word	0x40020058
 800293c:	40020070 	.word	0x40020070
 8002940:	40020088 	.word	0x40020088
 8002944:	400200a0 	.word	0x400200a0
 8002948:	400200b8 	.word	0x400200b8
 800294c:	40020410 	.word	0x40020410
 8002950:	40020428 	.word	0x40020428
 8002954:	40020440 	.word	0x40020440
 8002958:	40020458 	.word	0x40020458
 800295c:	40020470 	.word	0x40020470
 8002960:	40020488 	.word	0x40020488
 8002964:	400204a0 	.word	0x400204a0
 8002968:	400204b8 	.word	0x400204b8
 800296c:	58025408 	.word	0x58025408
 8002970:	5802541c 	.word	0x5802541c
 8002974:	58025430 	.word	0x58025430
 8002978:	58025444 	.word	0x58025444
 800297c:	58025458 	.word	0x58025458
 8002980:	5802546c 	.word	0x5802546c
 8002984:	58025480 	.word	0x58025480
 8002988:	58025494 	.word	0x58025494
 800298c:	2300      	movs	r3, #0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d028      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	2201      	movs	r2, #1
 80029b2:	409a      	lsls	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80029c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00c      	beq.n	80029e4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80029e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop

08002a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a1e:	4b89      	ldr	r3, [pc, #548]	; (8002c44 <HAL_GPIO_Init+0x234>)
 8002a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a22:	e194      	b.n	8002d4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	2101      	movs	r1, #1
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8186 	beq.w	8002d48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d005      	beq.n	8002a54 <HAL_GPIO_Init+0x44>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d130      	bne.n	8002ab6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	f003 0201 	and.w	r2, r3, #1
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d017      	beq.n	8002af2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d123      	bne.n	8002b46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	08da      	lsrs	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3208      	adds	r2, #8
 8002b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	220f      	movs	r2, #15
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	08da      	lsrs	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3208      	adds	r2, #8
 8002b40:	69b9      	ldr	r1, [r7, #24]
 8002b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2203      	movs	r2, #3
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0203 	and.w	r2, r3, #3
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80e0 	beq.w	8002d48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b88:	4b2f      	ldr	r3, [pc, #188]	; (8002c48 <HAL_GPIO_Init+0x238>)
 8002b8a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b8e:	4a2e      	ldr	r2, [pc, #184]	; (8002c48 <HAL_GPIO_Init+0x238>)
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002b98:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_GPIO_Init+0x238>)
 8002b9a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ba6:	4a29      	ldr	r2, [pc, #164]	; (8002c4c <HAL_GPIO_Init+0x23c>)
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	089b      	lsrs	r3, r3, #2
 8002bac:	3302      	adds	r3, #2
 8002bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	220f      	movs	r2, #15
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a20      	ldr	r2, [pc, #128]	; (8002c50 <HAL_GPIO_Init+0x240>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d052      	beq.n	8002c78 <HAL_GPIO_Init+0x268>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <HAL_GPIO_Init+0x244>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d031      	beq.n	8002c3e <HAL_GPIO_Init+0x22e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a1e      	ldr	r2, [pc, #120]	; (8002c58 <HAL_GPIO_Init+0x248>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d02b      	beq.n	8002c3a <HAL_GPIO_Init+0x22a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <HAL_GPIO_Init+0x24c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d025      	beq.n	8002c36 <HAL_GPIO_Init+0x226>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a1c      	ldr	r2, [pc, #112]	; (8002c60 <HAL_GPIO_Init+0x250>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d01f      	beq.n	8002c32 <HAL_GPIO_Init+0x222>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a1b      	ldr	r2, [pc, #108]	; (8002c64 <HAL_GPIO_Init+0x254>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d019      	beq.n	8002c2e <HAL_GPIO_Init+0x21e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a1a      	ldr	r2, [pc, #104]	; (8002c68 <HAL_GPIO_Init+0x258>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d013      	beq.n	8002c2a <HAL_GPIO_Init+0x21a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a19      	ldr	r2, [pc, #100]	; (8002c6c <HAL_GPIO_Init+0x25c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00d      	beq.n	8002c26 <HAL_GPIO_Init+0x216>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <HAL_GPIO_Init+0x260>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d007      	beq.n	8002c22 <HAL_GPIO_Init+0x212>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <HAL_GPIO_Init+0x264>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d101      	bne.n	8002c1e <HAL_GPIO_Init+0x20e>
 8002c1a:	2309      	movs	r3, #9
 8002c1c:	e02d      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c1e:	230a      	movs	r3, #10
 8002c20:	e02b      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c22:	2308      	movs	r3, #8
 8002c24:	e029      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c26:	2307      	movs	r3, #7
 8002c28:	e027      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c2a:	2306      	movs	r3, #6
 8002c2c:	e025      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c2e:	2305      	movs	r3, #5
 8002c30:	e023      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c32:	2304      	movs	r3, #4
 8002c34:	e021      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c36:	2303      	movs	r3, #3
 8002c38:	e01f      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e01d      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e01b      	b.n	8002c7a <HAL_GPIO_Init+0x26a>
 8002c42:	bf00      	nop
 8002c44:	58000080 	.word	0x58000080
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	58000400 	.word	0x58000400
 8002c50:	58020000 	.word	0x58020000
 8002c54:	58020400 	.word	0x58020400
 8002c58:	58020800 	.word	0x58020800
 8002c5c:	58020c00 	.word	0x58020c00
 8002c60:	58021000 	.word	0x58021000
 8002c64:	58021400 	.word	0x58021400
 8002c68:	58021800 	.word	0x58021800
 8002c6c:	58021c00 	.word	0x58021c00
 8002c70:	58022000 	.word	0x58022000
 8002c74:	58022400 	.word	0x58022400
 8002c78:	2300      	movs	r3, #0
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	f002 0203 	and.w	r2, r2, #3
 8002c80:	0092      	lsls	r2, r2, #2
 8002c82:	4093      	lsls	r3, r2
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c8a:	4938      	ldr	r1, [pc, #224]	; (8002d6c <HAL_GPIO_Init+0x35c>)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	3302      	adds	r3, #2
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002cbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f47f ae63 	bne.w	8002a24 <HAL_GPIO_Init+0x14>
  }
}
 8002d5e:	bf00      	nop
 8002d60:	bf00      	nop
 8002d62:	3724      	adds	r7, #36	; 0x24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	58000400 	.word	0x58000400

08002d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	807b      	strh	r3, [r7, #2]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d80:	787b      	ldrb	r3, [r7, #1]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d86:	887a      	ldrh	r2, [r7, #2]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d8c:	e003      	b.n	8002d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d8e:	887b      	ldrh	r3, [r7, #2]
 8002d90:	041a      	lsls	r2, r3, #16
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	619a      	str	r2, [r3, #24]
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002dac:	4b29      	ldr	r3, [pc, #164]	; (8002e54 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	2b06      	cmp	r3, #6
 8002db6:	d00a      	beq.n	8002dce <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002db8:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d001      	beq.n	8002dca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e040      	b.n	8002e4c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e03e      	b.n	8002e4c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002dce:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002dd6:	491f      	ldr	r1, [pc, #124]	; (8002e54 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002dde:	f7fe ff73 	bl	8001cc8 <HAL_GetTick>
 8002de2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002de4:	e009      	b.n	8002dfa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002de6:	f7fe ff6f 	bl	8001cc8 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002df4:	d901      	bls.n	8002dfa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e028      	b.n	8002e4c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dfa:	4b16      	ldr	r3, [pc, #88]	; (8002e54 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e06:	d1ee      	bne.n	8002de6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b1e      	cmp	r3, #30
 8002e0c:	d008      	beq.n	8002e20 <HAL_PWREx_ConfigSupply+0x7c>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b2e      	cmp	r3, #46	; 0x2e
 8002e12:	d005      	beq.n	8002e20 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b1d      	cmp	r3, #29
 8002e18:	d002      	beq.n	8002e20 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b2d      	cmp	r3, #45	; 0x2d
 8002e1e:	d114      	bne.n	8002e4a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002e20:	f7fe ff52 	bl	8001cc8 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e26:	e009      	b.n	8002e3c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e28:	f7fe ff4e 	bl	8001cc8 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e36:	d901      	bls.n	8002e3c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e007      	b.n	8002e4c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e48:	d1ee      	bne.n	8002e28 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	58024800 	.word	0x58024800

08002e58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08c      	sub	sp, #48	; 0x30
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f000 bc1f 	b.w	80036aa <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80b3 	beq.w	8002fe0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e7a:	4b95      	ldr	r3, [pc, #596]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e84:	4b92      	ldr	r3, [pc, #584]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d007      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x48>
 8002e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e92:	2b18      	cmp	r3, #24
 8002e94:	d112      	bne.n	8002ebc <HAL_RCC_OscConfig+0x64>
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d10d      	bne.n	8002ebc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	4b8b      	ldr	r3, [pc, #556]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 8098 	beq.w	8002fde <HAL_RCC_OscConfig+0x186>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f040 8093 	bne.w	8002fde <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e3f6      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec4:	d106      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x7c>
 8002ec6:	4b82      	ldr	r3, [pc, #520]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a81      	ldr	r2, [pc, #516]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e058      	b.n	8002f86 <HAL_RCC_OscConfig+0x12e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d112      	bne.n	8002f02 <HAL_RCC_OscConfig+0xaa>
 8002edc:	4b7c      	ldr	r3, [pc, #496]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a7b      	ldr	r2, [pc, #492]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	4b79      	ldr	r3, [pc, #484]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a78      	ldr	r2, [pc, #480]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002eee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	4b76      	ldr	r3, [pc, #472]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a75      	ldr	r2, [pc, #468]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	e041      	b.n	8002f86 <HAL_RCC_OscConfig+0x12e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f0a:	d112      	bne.n	8002f32 <HAL_RCC_OscConfig+0xda>
 8002f0c:	4b70      	ldr	r3, [pc, #448]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a6f      	ldr	r2, [pc, #444]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	4b6d      	ldr	r3, [pc, #436]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a6c      	ldr	r2, [pc, #432]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f1e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a69      	ldr	r2, [pc, #420]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	e029      	b.n	8002f86 <HAL_RCC_OscConfig+0x12e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002f3a:	d112      	bne.n	8002f62 <HAL_RCC_OscConfig+0x10a>
 8002f3c:	4b64      	ldr	r3, [pc, #400]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a63      	ldr	r2, [pc, #396]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	4b61      	ldr	r3, [pc, #388]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a60      	ldr	r2, [pc, #384]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	4b5e      	ldr	r3, [pc, #376]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a5d      	ldr	r2, [pc, #372]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	e011      	b.n	8002f86 <HAL_RCC_OscConfig+0x12e>
 8002f62:	4b5b      	ldr	r3, [pc, #364]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a5a      	ldr	r2, [pc, #360]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	4b58      	ldr	r3, [pc, #352]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a57      	ldr	r2, [pc, #348]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b55      	ldr	r3, [pc, #340]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a54      	ldr	r2, [pc, #336]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002f80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d013      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8e:	f7fe fe9b 	bl	8001cc8 <HAL_GetTick>
 8002f92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f96:	f7fe fe97 	bl	8001cc8 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b64      	cmp	r3, #100	; 0x64
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e380      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fa8:	4b49      	ldr	r3, [pc, #292]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x13e>
 8002fb4:	e014      	b.n	8002fe0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fe fe87 	bl	8001cc8 <HAL_GetTick>
 8002fba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fbe:	f7fe fe83 	bl	8001cc8 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b64      	cmp	r3, #100	; 0x64
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e36c      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fd0:	4b3f      	ldr	r3, [pc, #252]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_OscConfig+0x166>
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fde:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 808c 	beq.w	8003106 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fee:	4b38      	ldr	r3, [pc, #224]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ff6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ff8:	4b35      	ldr	r3, [pc, #212]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d007      	beq.n	8003014 <HAL_RCC_OscConfig+0x1bc>
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	2b18      	cmp	r3, #24
 8003008:	d137      	bne.n	800307a <HAL_RCC_OscConfig+0x222>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d132      	bne.n	800307a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003014:	4b2e      	ldr	r3, [pc, #184]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_OscConfig+0x1d4>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e33e      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800302c:	4b28      	ldr	r3, [pc, #160]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f023 0219 	bic.w	r2, r3, #25
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4925      	ldr	r1, [pc, #148]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 800303a:	4313      	orrs	r3, r2
 800303c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fe fe43 	bl	8001cc8 <HAL_GetTick>
 8003042:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003046:	f7fe fe3f 	bl	8001cc8 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e328      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003058:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003064:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	061b      	lsls	r3, r3, #24
 8003072:	4917      	ldr	r1, [pc, #92]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003078:	e045      	b.n	8003106 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d028      	beq.n	80030d4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f023 0219 	bic.w	r2, r3, #25
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	4910      	ldr	r1, [pc, #64]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe fe18 	bl	8001cc8 <HAL_GetTick>
 8003098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309c:	f7fe fe14 	bl	8001cc8 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e2fd      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	061b      	lsls	r3, r3, #24
 80030c8:	4901      	ldr	r1, [pc, #4]	; (80030d0 <HAL_RCC_OscConfig+0x278>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
 80030ce:	e01a      	b.n	8003106 <HAL_RCC_OscConfig+0x2ae>
 80030d0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d4:	4b97      	ldr	r3, [pc, #604]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a96      	ldr	r2, [pc, #600]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe fdf2 	bl	8001cc8 <HAL_GetTick>
 80030e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e8:	f7fe fdee 	bl	8001cc8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e2d7      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030fa:	4b8e      	ldr	r3, [pc, #568]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	2b00      	cmp	r3, #0
 8003110:	d06a      	beq.n	80031e8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003112:	4b88      	ldr	r3, [pc, #544]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800311a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800311c:	4b85      	ldr	r3, [pc, #532]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d007      	beq.n	8003138 <HAL_RCC_OscConfig+0x2e0>
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b18      	cmp	r3, #24
 800312c:	d11b      	bne.n	8003166 <HAL_RCC_OscConfig+0x30e>
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d116      	bne.n	8003166 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003138:	4b7e      	ldr	r3, [pc, #504]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_OscConfig+0x2f8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	2b80      	cmp	r3, #128	; 0x80
 800314a:	d001      	beq.n	8003150 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e2ac      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003150:	4b78      	ldr	r3, [pc, #480]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	4975      	ldr	r1, [pc, #468]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 8003160:	4313      	orrs	r3, r2
 8003162:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003164:	e040      	b.n	80031e8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d023      	beq.n	80031b6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800316e:	4b71      	ldr	r3, [pc, #452]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a70      	ldr	r2, [pc, #448]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 8003174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fe fda5 	bl	8001cc8 <HAL_GetTick>
 800317e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003182:	f7fe fda1 	bl	8001cc8 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e28a      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003194:	4b67      	ldr	r3, [pc, #412]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031a0:	4b64      	ldr	r3, [pc, #400]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	061b      	lsls	r3, r3, #24
 80031ae:	4961      	ldr	r1, [pc, #388]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60cb      	str	r3, [r1, #12]
 80031b4:	e018      	b.n	80031e8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80031b6:	4b5f      	ldr	r3, [pc, #380]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a5e      	ldr	r2, [pc, #376]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 80031bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c2:	f7fe fd81 	bl	8001cc8 <HAL_GetTick>
 80031c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031ca:	f7fe fd7d 	bl	8001cc8 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e266      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031dc:	4b55      	ldr	r3, [pc, #340]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f0      	bne.n	80031ca <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d036      	beq.n	8003262 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d019      	beq.n	8003230 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fc:	4b4d      	ldr	r3, [pc, #308]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 80031fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003200:	4a4c      	ldr	r2, [pc, #304]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7fe fd5e 	bl	8001cc8 <HAL_GetTick>
 800320c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003210:	f7fe fd5a 	bl	8001cc8 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e243      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003222:	4b44      	ldr	r3, [pc, #272]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 8003224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0x3b8>
 800322e:	e018      	b.n	8003262 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003230:	4b40      	ldr	r3, [pc, #256]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 8003232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003234:	4a3f      	ldr	r2, [pc, #252]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323c:	f7fe fd44 	bl	8001cc8 <HAL_GetTick>
 8003240:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003244:	f7fe fd40 	bl	8001cc8 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e229      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003256:	4b37      	ldr	r3, [pc, #220]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 8003258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d036      	beq.n	80032dc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d019      	beq.n	80032aa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003276:	4b2f      	ldr	r3, [pc, #188]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a2e      	ldr	r2, [pc, #184]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 800327c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003280:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003282:	f7fe fd21 	bl	8001cc8 <HAL_GetTick>
 8003286:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800328a:	f7fe fd1d 	bl	8001cc8 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e206      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800329c:	4b25      	ldr	r3, [pc, #148]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x432>
 80032a8:	e018      	b.n	80032dc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a21      	ldr	r2, [pc, #132]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 80032b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032b6:	f7fe fd07 	bl	8001cc8 <HAL_GetTick>
 80032ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032be:	f7fe fd03 	bl	8001cc8 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e1ec      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032d0:	4b18      	ldr	r3, [pc, #96]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f0      	bne.n	80032be <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80af 	beq.w	8003448 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032ea:	4b13      	ldr	r3, [pc, #76]	; (8003338 <HAL_RCC_OscConfig+0x4e0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a12      	ldr	r2, [pc, #72]	; (8003338 <HAL_RCC_OscConfig+0x4e0>)
 80032f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032f6:	f7fe fce7 	bl	8001cc8 <HAL_GetTick>
 80032fa:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fe:	f7fe fce3 	bl	8001cc8 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b64      	cmp	r3, #100	; 0x64
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e1cc      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003310:	4b09      	ldr	r3, [pc, #36]	; (8003338 <HAL_RCC_OscConfig+0x4e0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0f0      	beq.n	80032fe <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d10b      	bne.n	800333c <HAL_RCC_OscConfig+0x4e4>
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	4a02      	ldr	r2, [pc, #8]	; (8003334 <HAL_RCC_OscConfig+0x4dc>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	6713      	str	r3, [r2, #112]	; 0x70
 8003330:	e05b      	b.n	80033ea <HAL_RCC_OscConfig+0x592>
 8003332:	bf00      	nop
 8003334:	58024400 	.word	0x58024400
 8003338:	58024800 	.word	0x58024800
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d112      	bne.n	800336a <HAL_RCC_OscConfig+0x512>
 8003344:	4b9d      	ldr	r3, [pc, #628]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003348:	4a9c      	ldr	r2, [pc, #624]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 800334a:	f023 0301 	bic.w	r3, r3, #1
 800334e:	6713      	str	r3, [r2, #112]	; 0x70
 8003350:	4b9a      	ldr	r3, [pc, #616]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	4a99      	ldr	r2, [pc, #612]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800335a:	6713      	str	r3, [r2, #112]	; 0x70
 800335c:	4b97      	ldr	r3, [pc, #604]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	4a96      	ldr	r2, [pc, #600]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003362:	f023 0304 	bic.w	r3, r3, #4
 8003366:	6713      	str	r3, [r2, #112]	; 0x70
 8003368:	e03f      	b.n	80033ea <HAL_RCC_OscConfig+0x592>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b05      	cmp	r3, #5
 8003370:	d112      	bne.n	8003398 <HAL_RCC_OscConfig+0x540>
 8003372:	4b92      	ldr	r3, [pc, #584]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	4a91      	ldr	r2, [pc, #580]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	6713      	str	r3, [r2, #112]	; 0x70
 800337e:	4b8f      	ldr	r3, [pc, #572]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a8e      	ldr	r2, [pc, #568]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003388:	6713      	str	r3, [r2, #112]	; 0x70
 800338a:	4b8c      	ldr	r3, [pc, #560]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	4a8b      	ldr	r2, [pc, #556]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	6713      	str	r3, [r2, #112]	; 0x70
 8003396:	e028      	b.n	80033ea <HAL_RCC_OscConfig+0x592>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b85      	cmp	r3, #133	; 0x85
 800339e:	d112      	bne.n	80033c6 <HAL_RCC_OscConfig+0x56e>
 80033a0:	4b86      	ldr	r3, [pc, #536]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a85      	ldr	r2, [pc, #532]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 80033a6:	f043 0304 	orr.w	r3, r3, #4
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
 80033ac:	4b83      	ldr	r3, [pc, #524]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	4a82      	ldr	r2, [pc, #520]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 80033b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b6:	6713      	str	r3, [r2, #112]	; 0x70
 80033b8:	4b80      	ldr	r3, [pc, #512]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	4a7f      	ldr	r2, [pc, #508]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6713      	str	r3, [r2, #112]	; 0x70
 80033c4:	e011      	b.n	80033ea <HAL_RCC_OscConfig+0x592>
 80033c6:	4b7d      	ldr	r3, [pc, #500]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	4a7c      	ldr	r2, [pc, #496]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	6713      	str	r3, [r2, #112]	; 0x70
 80033d2:	4b7a      	ldr	r3, [pc, #488]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	4a79      	ldr	r2, [pc, #484]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 80033d8:	f023 0304 	bic.w	r3, r3, #4
 80033dc:	6713      	str	r3, [r2, #112]	; 0x70
 80033de:	4b77      	ldr	r3, [pc, #476]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	4a76      	ldr	r2, [pc, #472]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 80033e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d015      	beq.n	800341e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f2:	f7fe fc69 	bl	8001cc8 <HAL_GetTick>
 80033f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033f8:	e00a      	b.n	8003410 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fa:	f7fe fc65 	bl	8001cc8 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	f241 3288 	movw	r2, #5000	; 0x1388
 8003408:	4293      	cmp	r3, r2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e14c      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003410:	4b6a      	ldr	r3, [pc, #424]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0ee      	beq.n	80033fa <HAL_RCC_OscConfig+0x5a2>
 800341c:	e014      	b.n	8003448 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341e:	f7fe fc53 	bl	8001cc8 <HAL_GetTick>
 8003422:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003424:	e00a      	b.n	800343c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003426:	f7fe fc4f 	bl	8001cc8 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	f241 3288 	movw	r2, #5000	; 0x1388
 8003434:	4293      	cmp	r3, r2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e136      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800343c:	4b5f      	ldr	r3, [pc, #380]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1ee      	bne.n	8003426 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 812b 	beq.w	80036a8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003452:	4b5a      	ldr	r3, [pc, #360]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800345a:	2b18      	cmp	r3, #24
 800345c:	f000 80bb 	beq.w	80035d6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	2b02      	cmp	r3, #2
 8003466:	f040 8095 	bne.w	8003594 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346a:	4b54      	ldr	r3, [pc, #336]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a53      	ldr	r2, [pc, #332]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003470:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003476:	f7fe fc27 	bl	8001cc8 <HAL_GetTick>
 800347a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347e:	f7fe fc23 	bl	8001cc8 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e10c      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003490:	4b4a      	ldr	r3, [pc, #296]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f0      	bne.n	800347e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800349c:	4b47      	ldr	r3, [pc, #284]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 800349e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034a0:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <HAL_RCC_OscConfig+0x768>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034ac:	0112      	lsls	r2, r2, #4
 80034ae:	430a      	orrs	r2, r1
 80034b0:	4942      	ldr	r1, [pc, #264]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	628b      	str	r3, [r1, #40]	; 0x28
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	3b01      	subs	r3, #1
 80034bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c4:	3b01      	subs	r3, #1
 80034c6:	025b      	lsls	r3, r3, #9
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	3b01      	subs	r3, #1
 80034d2:	041b      	lsls	r3, r3, #16
 80034d4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034de:	3b01      	subs	r3, #1
 80034e0:	061b      	lsls	r3, r3, #24
 80034e2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80034e6:	4935      	ldr	r1, [pc, #212]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80034ec:	4b33      	ldr	r3, [pc, #204]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	4a32      	ldr	r2, [pc, #200]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 80034f2:	f023 0301 	bic.w	r3, r3, #1
 80034f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034f8:	4b30      	ldr	r3, [pc, #192]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 80034fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034fc:	4b31      	ldr	r3, [pc, #196]	; (80035c4 <HAL_RCC_OscConfig+0x76c>)
 80034fe:	4013      	ands	r3, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003504:	00d2      	lsls	r2, r2, #3
 8003506:	492d      	ldr	r1, [pc, #180]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003508:	4313      	orrs	r3, r2
 800350a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800350c:	4b2b      	ldr	r3, [pc, #172]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	f023 020c 	bic.w	r2, r3, #12
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	4928      	ldr	r1, [pc, #160]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 800351a:	4313      	orrs	r3, r2
 800351c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800351e:	4b27      	ldr	r3, [pc, #156]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	f023 0202 	bic.w	r2, r3, #2
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	4924      	ldr	r1, [pc, #144]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 800352c:	4313      	orrs	r3, r2
 800352e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003530:	4b22      	ldr	r3, [pc, #136]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	4a21      	ldr	r2, [pc, #132]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800353c:	4b1f      	ldr	r3, [pc, #124]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	4a1e      	ldr	r2, [pc, #120]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003548:	4b1c      	ldr	r3, [pc, #112]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	4a1b      	ldr	r2, [pc, #108]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 800354e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003552:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003554:	4b19      	ldr	r3, [pc, #100]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	4a18      	ldr	r2, [pc, #96]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003560:	4b16      	ldr	r3, [pc, #88]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a15      	ldr	r2, [pc, #84]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800356a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fe fbac 	bl	8001cc8 <HAL_GetTick>
 8003570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003574:	f7fe fba8 	bl	8001cc8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e091      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x71c>
 8003592:	e089      	b.n	80036a8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003594:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a08      	ldr	r2, [pc, #32]	; (80035bc <HAL_RCC_OscConfig+0x764>)
 800359a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800359e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe fb92 	bl	8001cc8 <HAL_GetTick>
 80035a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035a6:	e00f      	b.n	80035c8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fe fb8e 	bl	8001cc8 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d908      	bls.n	80035c8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e077      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
 80035ba:	bf00      	nop
 80035bc:	58024400 	.word	0x58024400
 80035c0:	fffffc0c 	.word	0xfffffc0c
 80035c4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035c8:	4b3a      	ldr	r3, [pc, #232]	; (80036b4 <HAL_RCC_OscConfig+0x85c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e9      	bne.n	80035a8 <HAL_RCC_OscConfig+0x750>
 80035d4:	e068      	b.n	80036a8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035d6:	4b37      	ldr	r3, [pc, #220]	; (80036b4 <HAL_RCC_OscConfig+0x85c>)
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035dc:	4b35      	ldr	r3, [pc, #212]	; (80036b4 <HAL_RCC_OscConfig+0x85c>)
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d031      	beq.n	800364e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f003 0203 	and.w	r2, r3, #3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d12a      	bne.n	800364e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d122      	bne.n	800364e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d11a      	bne.n	800364e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	0a5b      	lsrs	r3, r3, #9
 800361c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003624:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d111      	bne.n	800364e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d108      	bne.n	800364e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	0e1b      	lsrs	r3, r3, #24
 8003640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003648:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d001      	beq.n	8003652 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e02b      	b.n	80036aa <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003652:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <HAL_RCC_OscConfig+0x85c>)
 8003654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003656:	08db      	lsrs	r3, r3, #3
 8003658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800365c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	429a      	cmp	r2, r3
 8003666:	d01f      	beq.n	80036a8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <HAL_RCC_OscConfig+0x85c>)
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	4a11      	ldr	r2, [pc, #68]	; (80036b4 <HAL_RCC_OscConfig+0x85c>)
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003674:	f7fe fb28 	bl	8001cc8 <HAL_GetTick>
 8003678:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800367a:	bf00      	nop
 800367c:	f7fe fb24 	bl	8001cc8 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	4293      	cmp	r3, r2
 8003686:	d0f9      	beq.n	800367c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003688:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <HAL_RCC_OscConfig+0x85c>)
 800368a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800368c:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <HAL_RCC_OscConfig+0x860>)
 800368e:	4013      	ands	r3, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003694:	00d2      	lsls	r2, r2, #3
 8003696:	4907      	ldr	r1, [pc, #28]	; (80036b4 <HAL_RCC_OscConfig+0x85c>)
 8003698:	4313      	orrs	r3, r2
 800369a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_RCC_OscConfig+0x85c>)
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	4a04      	ldr	r2, [pc, #16]	; (80036b4 <HAL_RCC_OscConfig+0x85c>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3730      	adds	r7, #48	; 0x30
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	58024400 	.word	0x58024400
 80036b8:	ffff0007 	.word	0xffff0007

080036bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e19c      	b.n	8003a0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036d0:	4b8a      	ldr	r3, [pc, #552]	; (80038fc <HAL_RCC_ClockConfig+0x240>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d910      	bls.n	8003700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b87      	ldr	r3, [pc, #540]	; (80038fc <HAL_RCC_ClockConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 020f 	bic.w	r2, r3, #15
 80036e6:	4985      	ldr	r1, [pc, #532]	; (80038fc <HAL_RCC_ClockConfig+0x240>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b83      	ldr	r3, [pc, #524]	; (80038fc <HAL_RCC_ClockConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e184      	b.n	8003a0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d010      	beq.n	800372e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	4b7b      	ldr	r3, [pc, #492]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003718:	429a      	cmp	r2, r3
 800371a:	d908      	bls.n	800372e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800371c:	4b78      	ldr	r3, [pc, #480]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	4975      	ldr	r1, [pc, #468]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 800372a:	4313      	orrs	r3, r2
 800372c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d010      	beq.n	800375c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	4b70      	ldr	r3, [pc, #448]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003746:	429a      	cmp	r2, r3
 8003748:	d908      	bls.n	800375c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800374a:	4b6d      	ldr	r3, [pc, #436]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	496a      	ldr	r1, [pc, #424]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 8003758:	4313      	orrs	r3, r2
 800375a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b00      	cmp	r3, #0
 8003766:	d010      	beq.n	800378a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	4b64      	ldr	r3, [pc, #400]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003774:	429a      	cmp	r2, r3
 8003776:	d908      	bls.n	800378a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003778:	4b61      	ldr	r3, [pc, #388]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	495e      	ldr	r1, [pc, #376]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 8003786:	4313      	orrs	r3, r2
 8003788:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d010      	beq.n	80037b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69da      	ldr	r2, [r3, #28]
 800379a:	4b59      	ldr	r3, [pc, #356]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d908      	bls.n	80037b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037a6:	4b56      	ldr	r3, [pc, #344]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	4953      	ldr	r1, [pc, #332]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d010      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	4b4d      	ldr	r3, [pc, #308]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d908      	bls.n	80037e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d4:	4b4a      	ldr	r3, [pc, #296]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	f023 020f 	bic.w	r2, r3, #15
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4947      	ldr	r1, [pc, #284]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d055      	beq.n	800389e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80037f2:	4b43      	ldr	r3, [pc, #268]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	4940      	ldr	r1, [pc, #256]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 8003800:	4313      	orrs	r3, r2
 8003802:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d107      	bne.n	800381c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800380c:	4b3c      	ldr	r3, [pc, #240]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d121      	bne.n	800385c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0f6      	b.n	8003a0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d107      	bne.n	8003834 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003824:	4b36      	ldr	r3, [pc, #216]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d115      	bne.n	800385c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0ea      	b.n	8003a0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d107      	bne.n	800384c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800383c:	4b30      	ldr	r3, [pc, #192]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d109      	bne.n	800385c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0de      	b.n	8003a0a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800384c:	4b2c      	ldr	r3, [pc, #176]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0d6      	b.n	8003a0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800385c:	4b28      	ldr	r3, [pc, #160]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f023 0207 	bic.w	r2, r3, #7
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	4925      	ldr	r1, [pc, #148]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 800386a:	4313      	orrs	r3, r2
 800386c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800386e:	f7fe fa2b 	bl	8001cc8 <HAL_GetTick>
 8003872:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003874:	e00a      	b.n	800388c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003876:	f7fe fa27 	bl	8001cc8 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	f241 3288 	movw	r2, #5000	; 0x1388
 8003884:	4293      	cmp	r3, r2
 8003886:	d901      	bls.n	800388c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e0be      	b.n	8003a0a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388c:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	429a      	cmp	r2, r3
 800389c:	d1eb      	bne.n	8003876 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d010      	beq.n	80038cc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	4b14      	ldr	r3, [pc, #80]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d208      	bcs.n	80038cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ba:	4b11      	ldr	r3, [pc, #68]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	f023 020f 	bic.w	r2, r3, #15
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	490e      	ldr	r1, [pc, #56]	; (8003900 <HAL_RCC_ClockConfig+0x244>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_RCC_ClockConfig+0x240>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d214      	bcs.n	8003904 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <HAL_RCC_ClockConfig+0x240>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 020f 	bic.w	r2, r3, #15
 80038e2:	4906      	ldr	r1, [pc, #24]	; (80038fc <HAL_RCC_ClockConfig+0x240>)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b04      	ldr	r3, [pc, #16]	; (80038fc <HAL_RCC_ClockConfig+0x240>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e086      	b.n	8003a0a <HAL_RCC_ClockConfig+0x34e>
 80038fc:	52002000 	.word	0x52002000
 8003900:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d010      	beq.n	8003932 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	4b3f      	ldr	r3, [pc, #252]	; (8003a14 <HAL_RCC_ClockConfig+0x358>)
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800391c:	429a      	cmp	r2, r3
 800391e:	d208      	bcs.n	8003932 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003920:	4b3c      	ldr	r3, [pc, #240]	; (8003a14 <HAL_RCC_ClockConfig+0x358>)
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	4939      	ldr	r1, [pc, #228]	; (8003a14 <HAL_RCC_ClockConfig+0x358>)
 800392e:	4313      	orrs	r3, r2
 8003930:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d010      	beq.n	8003960 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	4b34      	ldr	r3, [pc, #208]	; (8003a14 <HAL_RCC_ClockConfig+0x358>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800394a:	429a      	cmp	r2, r3
 800394c:	d208      	bcs.n	8003960 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800394e:	4b31      	ldr	r3, [pc, #196]	; (8003a14 <HAL_RCC_ClockConfig+0x358>)
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	492e      	ldr	r1, [pc, #184]	; (8003a14 <HAL_RCC_ClockConfig+0x358>)
 800395c:	4313      	orrs	r3, r2
 800395e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b00      	cmp	r3, #0
 800396a:	d010      	beq.n	800398e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699a      	ldr	r2, [r3, #24]
 8003970:	4b28      	ldr	r3, [pc, #160]	; (8003a14 <HAL_RCC_ClockConfig+0x358>)
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003978:	429a      	cmp	r2, r3
 800397a:	d208      	bcs.n	800398e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800397c:	4b25      	ldr	r3, [pc, #148]	; (8003a14 <HAL_RCC_ClockConfig+0x358>)
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	4922      	ldr	r1, [pc, #136]	; (8003a14 <HAL_RCC_ClockConfig+0x358>)
 800398a:	4313      	orrs	r3, r2
 800398c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d010      	beq.n	80039bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69da      	ldr	r2, [r3, #28]
 800399e:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <HAL_RCC_ClockConfig+0x358>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d208      	bcs.n	80039bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039aa:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <HAL_RCC_ClockConfig+0x358>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	4917      	ldr	r1, [pc, #92]	; (8003a14 <HAL_RCC_ClockConfig+0x358>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80039bc:	f000 f834 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <HAL_RCC_ClockConfig+0x358>)
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	0a1b      	lsrs	r3, r3, #8
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	4912      	ldr	r1, [pc, #72]	; (8003a18 <HAL_RCC_ClockConfig+0x35c>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
 80039d8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80039da:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <HAL_RCC_ClockConfig+0x358>)
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	4a0d      	ldr	r2, [pc, #52]	; (8003a18 <HAL_RCC_ClockConfig+0x35c>)
 80039e4:	5cd3      	ldrb	r3, [r2, r3]
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
 80039f0:	4a0a      	ldr	r2, [pc, #40]	; (8003a1c <HAL_RCC_ClockConfig+0x360>)
 80039f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039f4:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <HAL_RCC_ClockConfig+0x364>)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80039fa:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <HAL_RCC_ClockConfig+0x368>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe f918 	bl	8001c34 <HAL_InitTick>
 8003a04:	4603      	mov	r3, r0
 8003a06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	58024400 	.word	0x58024400
 8003a18:	080097a8 	.word	0x080097a8
 8003a1c:	24000010 	.word	0x24000010
 8003a20:	2400000c 	.word	0x2400000c
 8003a24:	24000014 	.word	0x24000014

08003a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b089      	sub	sp, #36	; 0x24
 8003a2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a2e:	4bb3      	ldr	r3, [pc, #716]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a36:	2b18      	cmp	r3, #24
 8003a38:	f200 8155 	bhi.w	8003ce6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003a3c:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a42:	bf00      	nop
 8003a44:	08003aa9 	.word	0x08003aa9
 8003a48:	08003ce7 	.word	0x08003ce7
 8003a4c:	08003ce7 	.word	0x08003ce7
 8003a50:	08003ce7 	.word	0x08003ce7
 8003a54:	08003ce7 	.word	0x08003ce7
 8003a58:	08003ce7 	.word	0x08003ce7
 8003a5c:	08003ce7 	.word	0x08003ce7
 8003a60:	08003ce7 	.word	0x08003ce7
 8003a64:	08003acf 	.word	0x08003acf
 8003a68:	08003ce7 	.word	0x08003ce7
 8003a6c:	08003ce7 	.word	0x08003ce7
 8003a70:	08003ce7 	.word	0x08003ce7
 8003a74:	08003ce7 	.word	0x08003ce7
 8003a78:	08003ce7 	.word	0x08003ce7
 8003a7c:	08003ce7 	.word	0x08003ce7
 8003a80:	08003ce7 	.word	0x08003ce7
 8003a84:	08003ad5 	.word	0x08003ad5
 8003a88:	08003ce7 	.word	0x08003ce7
 8003a8c:	08003ce7 	.word	0x08003ce7
 8003a90:	08003ce7 	.word	0x08003ce7
 8003a94:	08003ce7 	.word	0x08003ce7
 8003a98:	08003ce7 	.word	0x08003ce7
 8003a9c:	08003ce7 	.word	0x08003ce7
 8003aa0:	08003ce7 	.word	0x08003ce7
 8003aa4:	08003adb 	.word	0x08003adb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003aa8:	4b94      	ldr	r3, [pc, #592]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d009      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ab4:	4b91      	ldr	r3, [pc, #580]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	08db      	lsrs	r3, r3, #3
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	4a90      	ldr	r2, [pc, #576]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003ac6:	e111      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ac8:	4b8d      	ldr	r3, [pc, #564]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003aca:	61bb      	str	r3, [r7, #24]
      break;
 8003acc:	e10e      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003ace:	4b8d      	ldr	r3, [pc, #564]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ad0:	61bb      	str	r3, [r7, #24]
      break;
 8003ad2:	e10b      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003ad4:	4b8c      	ldr	r3, [pc, #560]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ad6:	61bb      	str	r3, [r7, #24]
      break;
 8003ad8:	e108      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ada:	4b88      	ldr	r3, [pc, #544]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003ae4:	4b85      	ldr	r3, [pc, #532]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003af0:	4b82      	ldr	r3, [pc, #520]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003afa:	4b80      	ldr	r3, [pc, #512]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	08db      	lsrs	r3, r3, #3
 8003b00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	ee07 3a90 	vmov	s15, r3
 8003b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b12:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80e1 	beq.w	8003ce0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	f000 8083 	beq.w	8003c2c <HAL_RCC_GetSysClockFreq+0x204>
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	f200 80a1 	bhi.w	8003c70 <HAL_RCC_GetSysClockFreq+0x248>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_RCC_GetSysClockFreq+0x114>
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d056      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003b3a:	e099      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b3c:	4b6f      	ldr	r3, [pc, #444]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d02d      	beq.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b48:	4b6c      	ldr	r3, [pc, #432]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	08db      	lsrs	r3, r3, #3
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	4a6b      	ldr	r2, [pc, #428]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
 8003b58:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	ee07 3a90 	vmov	s15, r3
 8003b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b72:	4b62      	ldr	r3, [pc, #392]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b86:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003ba2:	e087      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003d10 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bb6:	4b51      	ldr	r3, [pc, #324]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bca:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003be6:	e065      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003d14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bfa:	4b40      	ldr	r3, [pc, #256]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c0e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c2a:	e043      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	ee07 3a90 	vmov	s15, r3
 8003c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c36:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003d18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c3e:	4b2f      	ldr	r3, [pc, #188]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c52:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c6e:	e021      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003d14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c82:	4b1e      	ldr	r3, [pc, #120]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c96:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003d0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cb2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003cb4:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	0a5b      	lsrs	r3, r3, #9
 8003cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	ee07 3a90 	vmov	s15, r3
 8003cc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ccc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cd8:	ee17 3a90 	vmov	r3, s15
 8003cdc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003cde:	e005      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61bb      	str	r3, [r7, #24]
      break;
 8003ce4:	e002      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003ce6:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ce8:	61bb      	str	r3, [r7, #24]
      break;
 8003cea:	bf00      	nop
  }

  return sysclockfreq;
 8003cec:	69bb      	ldr	r3, [r7, #24]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3724      	adds	r7, #36	; 0x24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	58024400 	.word	0x58024400
 8003d00:	03d09000 	.word	0x03d09000
 8003d04:	003d0900 	.word	0x003d0900
 8003d08:	007a1200 	.word	0x007a1200
 8003d0c:	46000000 	.word	0x46000000
 8003d10:	4c742400 	.word	0x4c742400
 8003d14:	4a742400 	.word	0x4a742400
 8003d18:	4af42400 	.word	0x4af42400

08003d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003d22:	f7ff fe81 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 8003d26:	4602      	mov	r2, r0
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <HAL_RCC_GetHCLKFreq+0x50>)
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	490f      	ldr	r1, [pc, #60]	; (8003d70 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d34:	5ccb      	ldrb	r3, [r1, r3]
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <HAL_RCC_GetHCLKFreq+0x50>)
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	4a09      	ldr	r2, [pc, #36]	; (8003d70 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d4a:	5cd3      	ldrb	r3, [r2, r3]
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	fa22 f303 	lsr.w	r3, r2, r3
 8003d56:	4a07      	ldr	r2, [pc, #28]	; (8003d74 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d5a:	4a07      	ldr	r2, [pc, #28]	; (8003d78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d60:	4b04      	ldr	r3, [pc, #16]	; (8003d74 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d62:	681b      	ldr	r3, [r3, #0]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	58024400 	.word	0x58024400
 8003d70:	080097a8 	.word	0x080097a8
 8003d74:	24000010 	.word	0x24000010
 8003d78:	2400000c 	.word	0x2400000c

08003d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003d80:	f7ff ffcc 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4904      	ldr	r1, [pc, #16]	; (8003da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	58024400 	.word	0x58024400
 8003da4:	080097a8 	.word	0x080097a8

08003da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003dac:	f7ff ffb6 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	4904      	ldr	r1, [pc, #16]	; (8003dd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	58024400 	.word	0x58024400
 8003dd0:	080097a8 	.word	0x080097a8

08003dd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd8:	b0c8      	sub	sp, #288	; 0x120
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003de0:	2300      	movs	r3, #0
 8003de2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003de6:	2300      	movs	r3, #0
 8003de8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003df8:	2500      	movs	r5, #0
 8003dfa:	ea54 0305 	orrs.w	r3, r4, r5
 8003dfe:	d049      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e0a:	d02f      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003e0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e10:	d828      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003e12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e16:	d01a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e1c:	d822      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e26:	d007      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e28:	e01c      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e2a:	4ba7      	ldr	r3, [pc, #668]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	4aa6      	ldr	r2, [pc, #664]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e36:	e01a      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	2102      	movs	r1, #2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f001 fc43 	bl	80056cc <RCCEx_PLL2_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e4c:	e00f      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e52:	3328      	adds	r3, #40	; 0x28
 8003e54:	2102      	movs	r1, #2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f001 fcea 	bl	8005830 <RCCEx_PLL3_Config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e62:	e004      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e6a:	e000      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10a      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e76:	4b94      	ldr	r3, [pc, #592]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e84:	4a90      	ldr	r2, [pc, #576]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e86:	430b      	orrs	r3, r1
 8003e88:	6513      	str	r3, [r2, #80]	; 0x50
 8003e8a:	e003      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003ea0:	f04f 0900 	mov.w	r9, #0
 8003ea4:	ea58 0309 	orrs.w	r3, r8, r9
 8003ea8:	d047      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d82a      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003eb4:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eba:	bf00      	nop
 8003ebc:	08003ed1 	.word	0x08003ed1
 8003ec0:	08003edf 	.word	0x08003edf
 8003ec4:	08003ef5 	.word	0x08003ef5
 8003ec8:	08003f13 	.word	0x08003f13
 8003ecc:	08003f13 	.word	0x08003f13
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ed0:	4b7d      	ldr	r3, [pc, #500]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	4a7c      	ldr	r2, [pc, #496]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003edc:	e01a      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee2:	3308      	adds	r3, #8
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f001 fbf0 	bl	80056cc <RCCEx_PLL2_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ef2:	e00f      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ef8:	3328      	adds	r3, #40	; 0x28
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f001 fc97 	bl	8005830 <RCCEx_PLL3_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f08:	e004      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f10:	e000      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f1c:	4b6a      	ldr	r3, [pc, #424]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f20:	f023 0107 	bic.w	r1, r3, #7
 8003f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	4a67      	ldr	r2, [pc, #412]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	6513      	str	r3, [r2, #80]	; 0x50
 8003f30:	e003      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f42:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003f46:	f04f 0b00 	mov.w	fp, #0
 8003f4a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f4e:	d054      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f56:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003f5a:	d036      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003f5c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003f60:	d82f      	bhi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f66:	d032      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6c:	d829      	bhi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f6e:	2bc0      	cmp	r3, #192	; 0xc0
 8003f70:	d02f      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003f72:	2bc0      	cmp	r3, #192	; 0xc0
 8003f74:	d825      	bhi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f76:	2b80      	cmp	r3, #128	; 0x80
 8003f78:	d018      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003f7a:	2b80      	cmp	r3, #128	; 0x80
 8003f7c:	d821      	bhi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003f82:	2b40      	cmp	r3, #64	; 0x40
 8003f84:	d007      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003f86:	e01c      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f88:	4b4f      	ldr	r3, [pc, #316]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	4a4e      	ldr	r2, [pc, #312]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003f94:	e01e      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f001 fb94 	bl	80056cc <RCCEx_PLL2_Config>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003faa:	e013      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb0:	3328      	adds	r3, #40	; 0x28
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f001 fc3b 	bl	8005830 <RCCEx_PLL3_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003fc8:	e004      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003fca:	bf00      	nop
 8003fcc:	e002      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003fce:	bf00      	nop
 8003fd0:	e000      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003fdc:	4b3a      	ldr	r3, [pc, #232]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fea:	4a37      	ldr	r2, [pc, #220]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fec:	430b      	orrs	r3, r1
 8003fee:	6513      	str	r3, [r2, #80]	; 0x50
 8003ff0:	e003      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ff6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004002:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004006:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800400a:	2300      	movs	r3, #0
 800400c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004010:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004014:	460b      	mov	r3, r1
 8004016:	4313      	orrs	r3, r2
 8004018:	d05c      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800401a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800401e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004020:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004024:	d03b      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004026:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800402a:	d834      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800402c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004030:	d037      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004036:	d82e      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004038:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800403c:	d033      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800403e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004042:	d828      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004048:	d01a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800404a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404e:	d822      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004058:	d007      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800405a:	e01c      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800405c:	4b1a      	ldr	r3, [pc, #104]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	4a19      	ldr	r2, [pc, #100]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004068:	e01e      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800406a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800406e:	3308      	adds	r3, #8
 8004070:	2100      	movs	r1, #0
 8004072:	4618      	mov	r0, r3
 8004074:	f001 fb2a 	bl	80056cc <RCCEx_PLL2_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800407e:	e013      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004084:	3328      	adds	r3, #40	; 0x28
 8004086:	2100      	movs	r1, #0
 8004088:	4618      	mov	r0, r3
 800408a:	f001 fbd1 	bl	8005830 <RCCEx_PLL3_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004094:	e008      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800409c:	e004      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800409e:	bf00      	nop
 80040a0:	e002      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80040a2:	bf00      	nop
 80040a4:	e000      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80040a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10d      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80040b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040be:	4a02      	ldr	r2, [pc, #8]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6513      	str	r3, [r2, #80]	; 0x50
 80040c4:	e006      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80040c6:	bf00      	nop
 80040c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80040d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040dc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80040e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80040e4:	2300      	movs	r3, #0
 80040e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80040ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80040ee:	460b      	mov	r3, r1
 80040f0:	4313      	orrs	r3, r2
 80040f2:	d03a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80040f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fa:	2b30      	cmp	r3, #48	; 0x30
 80040fc:	d01f      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80040fe:	2b30      	cmp	r3, #48	; 0x30
 8004100:	d819      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004102:	2b20      	cmp	r3, #32
 8004104:	d00c      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004106:	2b20      	cmp	r3, #32
 8004108:	d815      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800410a:	2b00      	cmp	r3, #0
 800410c:	d019      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800410e:	2b10      	cmp	r3, #16
 8004110:	d111      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004112:	4bae      	ldr	r3, [pc, #696]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	4aad      	ldr	r2, [pc, #692]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800411c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800411e:	e011      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004124:	3308      	adds	r3, #8
 8004126:	2102      	movs	r1, #2
 8004128:	4618      	mov	r0, r3
 800412a:	f001 facf 	bl	80056cc <RCCEx_PLL2_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004134:	e006      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800413c:	e002      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800413e:	bf00      	nop
 8004140:	e000      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004144:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800414c:	4b9f      	ldr	r3, [pc, #636]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800414e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004150:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415a:	4a9c      	ldr	r2, [pc, #624]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800415c:	430b      	orrs	r3, r1
 800415e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004160:	e003      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004162:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004166:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800416a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004176:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800417a:	2300      	movs	r3, #0
 800417c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004180:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004184:	460b      	mov	r3, r1
 8004186:	4313      	orrs	r3, r2
 8004188:	d051      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800418a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800418e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004194:	d035      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800419a:	d82e      	bhi.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x426>
 800419c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041a0:	d031      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80041a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041a6:	d828      	bhi.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x426>
 80041a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ac:	d01a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80041ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b2:	d822      	bhi.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x426>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80041b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041bc:	d007      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80041be:	e01c      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c0:	4b82      	ldr	r3, [pc, #520]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	4a81      	ldr	r2, [pc, #516]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041cc:	e01c      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d2:	3308      	adds	r3, #8
 80041d4:	2100      	movs	r1, #0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f001 fa78 	bl	80056cc <RCCEx_PLL2_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041e2:	e011      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e8:	3328      	adds	r3, #40	; 0x28
 80041ea:	2100      	movs	r1, #0
 80041ec:	4618      	mov	r0, r3
 80041ee:	f001 fb1f 	bl	8005830 <RCCEx_PLL3_Config>
 80041f2:	4603      	mov	r3, r0
 80041f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041f8:	e006      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004200:	e002      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004202:	bf00      	nop
 8004204:	e000      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004208:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10a      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004210:	4b6e      	ldr	r3, [pc, #440]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004214:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800421c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800421e:	4a6b      	ldr	r2, [pc, #428]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004220:	430b      	orrs	r3, r1
 8004222:	6513      	str	r3, [r2, #80]	; 0x50
 8004224:	e003      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004226:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800422a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800422e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800423a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800423e:	2300      	movs	r3, #0
 8004240:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004244:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004248:	460b      	mov	r3, r1
 800424a:	4313      	orrs	r3, r2
 800424c:	d053      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800424e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004258:	d033      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800425a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800425e:	d82c      	bhi.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004260:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004264:	d02f      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004266:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800426a:	d826      	bhi.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800426c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004270:	d02b      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004272:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004276:	d820      	bhi.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004278:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800427c:	d012      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800427e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004282:	d81a      	bhi.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004284:	2b00      	cmp	r3, #0
 8004286:	d022      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428c:	d115      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800428e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004292:	3308      	adds	r3, #8
 8004294:	2101      	movs	r1, #1
 8004296:	4618      	mov	r0, r3
 8004298:	f001 fa18 	bl	80056cc <RCCEx_PLL2_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042a2:	e015      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a8:	3328      	adds	r3, #40	; 0x28
 80042aa:	2101      	movs	r1, #1
 80042ac:	4618      	mov	r0, r3
 80042ae:	f001 fabf 	bl	8005830 <RCCEx_PLL3_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042b8:	e00a      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042c0:	e006      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80042c2:	bf00      	nop
 80042c4:	e004      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80042c6:	bf00      	nop
 80042c8:	e002      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80042ca:	bf00      	nop
 80042cc:	e000      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80042ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80042d8:	4b3c      	ldr	r3, [pc, #240]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042dc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80042e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e6:	4a39      	ldr	r2, [pc, #228]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042e8:	430b      	orrs	r3, r1
 80042ea:	6513      	str	r3, [r2, #80]	; 0x50
 80042ec:	e003      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80042f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004302:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004306:	2300      	movs	r3, #0
 8004308:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800430c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004310:	460b      	mov	r3, r1
 8004312:	4313      	orrs	r3, r2
 8004314:	d060      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800431a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800431e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004322:	d039      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004324:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004328:	d832      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800432a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800432e:	d035      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004334:	d82c      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433a:	d031      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800433c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004340:	d826      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004342:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004346:	d02d      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004348:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800434c:	d820      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800434e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004352:	d012      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004358:	d81a      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800435a:	2b00      	cmp	r3, #0
 800435c:	d024      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800435e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004362:	d115      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004368:	3308      	adds	r3, #8
 800436a:	2101      	movs	r1, #1
 800436c:	4618      	mov	r0, r3
 800436e:	f001 f9ad 	bl	80056cc <RCCEx_PLL2_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004378:	e017      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800437a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800437e:	3328      	adds	r3, #40	; 0x28
 8004380:	2101      	movs	r1, #1
 8004382:	4618      	mov	r0, r3
 8004384:	f001 fa54 	bl	8005830 <RCCEx_PLL3_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800438e:	e00c      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004396:	e008      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004398:	bf00      	nop
 800439a:	e006      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800439c:	bf00      	nop
 800439e:	e004      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043a0:	bf00      	nop
 80043a2:	e002      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043a4:	bf00      	nop
 80043a6:	e000      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10e      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80043ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043c2:	4a02      	ldr	r2, [pc, #8]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043c4:	430b      	orrs	r3, r1
 80043c6:	6593      	str	r3, [r2, #88]	; 0x58
 80043c8:	e006      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80043ca:	bf00      	nop
 80043cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80043e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043e8:	2300      	movs	r3, #0
 80043ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80043ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043f2:	460b      	mov	r3, r1
 80043f4:	4313      	orrs	r3, r2
 80043f6:	d037      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80043f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004402:	d00e      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004408:	d816      	bhi.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d018      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800440e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004412:	d111      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004414:	4bc4      	ldr	r3, [pc, #784]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	4ac3      	ldr	r2, [pc, #780]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800441a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800441e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004420:	e00f      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004426:	3308      	adds	r3, #8
 8004428:	2101      	movs	r1, #1
 800442a:	4618      	mov	r0, r3
 800442c:	f001 f94e 	bl	80056cc <RCCEx_PLL2_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004436:	e004      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800443e:	e000      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004442:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800444a:	4bb7      	ldr	r3, [pc, #732]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800444c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004452:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004456:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004458:	4ab3      	ldr	r2, [pc, #716]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800445a:	430b      	orrs	r3, r1
 800445c:	6513      	str	r3, [r2, #80]	; 0x50
 800445e:	e003      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004460:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004464:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004468:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004478:	2300      	movs	r3, #0
 800447a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800447e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004482:	460b      	mov	r3, r1
 8004484:	4313      	orrs	r3, r2
 8004486:	d039      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800448c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800448e:	2b03      	cmp	r3, #3
 8004490:	d81c      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004492:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	080044d5 	.word	0x080044d5
 800449c:	080044a9 	.word	0x080044a9
 80044a0:	080044b7 	.word	0x080044b7
 80044a4:	080044d5 	.word	0x080044d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a8:	4b9f      	ldr	r3, [pc, #636]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	4a9e      	ldr	r2, [pc, #632]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044b4:	e00f      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ba:	3308      	adds	r3, #8
 80044bc:	2102      	movs	r1, #2
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 f904 	bl	80056cc <RCCEx_PLL2_Config>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044ca:	e004      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044d2:	e000      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80044d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044de:	4b92      	ldr	r3, [pc, #584]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e2:	f023 0103 	bic.w	r1, r3, #3
 80044e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ec:	4a8e      	ldr	r2, [pc, #568]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044ee:	430b      	orrs	r3, r1
 80044f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044f2:	e003      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004508:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800450c:	2300      	movs	r3, #0
 800450e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004512:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004516:	460b      	mov	r3, r1
 8004518:	4313      	orrs	r3, r2
 800451a:	f000 8099 	beq.w	8004650 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800451e:	4b83      	ldr	r3, [pc, #524]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a82      	ldr	r2, [pc, #520]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004528:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800452a:	f7fd fbcd 	bl	8001cc8 <HAL_GetTick>
 800452e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004532:	e00b      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004534:	f7fd fbc8 	bl	8001cc8 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b64      	cmp	r3, #100	; 0x64
 8004542:	d903      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800454a:	e005      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800454c:	4b77      	ldr	r3, [pc, #476]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ed      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004558:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800455c:	2b00      	cmp	r3, #0
 800455e:	d173      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004560:	4b71      	ldr	r3, [pc, #452]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004562:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004568:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800456c:	4053      	eors	r3, r2
 800456e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004572:	2b00      	cmp	r3, #0
 8004574:	d015      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004576:	4b6c      	ldr	r3, [pc, #432]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004582:	4b69      	ldr	r3, [pc, #420]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	4a68      	ldr	r2, [pc, #416]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800458c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800458e:	4b66      	ldr	r3, [pc, #408]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	4a65      	ldr	r2, [pc, #404]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004598:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800459a:	4a63      	ldr	r2, [pc, #396]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800459c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ae:	d118      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fd fb8a 	bl	8001cc8 <HAL_GetTick>
 80045b4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045b8:	e00d      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fd fb85 	bl	8001cc8 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80045c4:	1ad2      	subs	r2, r2, r3
 80045c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d903      	bls.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80045d4:	e005      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045d6:	4b54      	ldr	r3, [pc, #336]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0eb      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80045e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d129      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045fa:	d10e      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80045fc:	4b4a      	ldr	r3, [pc, #296]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004608:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800460c:	091a      	lsrs	r2, r3, #4
 800460e:	4b48      	ldr	r3, [pc, #288]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004610:	4013      	ands	r3, r2
 8004612:	4a45      	ldr	r2, [pc, #276]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004614:	430b      	orrs	r3, r1
 8004616:	6113      	str	r3, [r2, #16]
 8004618:	e005      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800461a:	4b43      	ldr	r3, [pc, #268]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	4a42      	ldr	r2, [pc, #264]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004620:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004624:	6113      	str	r3, [r2, #16]
 8004626:	4b40      	ldr	r3, [pc, #256]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004628:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800462a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800462e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004636:	4a3c      	ldr	r2, [pc, #240]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004638:	430b      	orrs	r3, r1
 800463a:	6713      	str	r3, [r2, #112]	; 0x70
 800463c:	e008      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800463e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004642:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004646:	e003      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800464c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f002 0301 	and.w	r3, r2, #1
 800465c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004660:	2300      	movs	r3, #0
 8004662:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004666:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800466a:	460b      	mov	r3, r1
 800466c:	4313      	orrs	r3, r2
 800466e:	f000 8090 	beq.w	8004792 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467a:	2b28      	cmp	r3, #40	; 0x28
 800467c:	d870      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800467e:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	08004769 	.word	0x08004769
 8004688:	08004761 	.word	0x08004761
 800468c:	08004761 	.word	0x08004761
 8004690:	08004761 	.word	0x08004761
 8004694:	08004761 	.word	0x08004761
 8004698:	08004761 	.word	0x08004761
 800469c:	08004761 	.word	0x08004761
 80046a0:	08004761 	.word	0x08004761
 80046a4:	08004735 	.word	0x08004735
 80046a8:	08004761 	.word	0x08004761
 80046ac:	08004761 	.word	0x08004761
 80046b0:	08004761 	.word	0x08004761
 80046b4:	08004761 	.word	0x08004761
 80046b8:	08004761 	.word	0x08004761
 80046bc:	08004761 	.word	0x08004761
 80046c0:	08004761 	.word	0x08004761
 80046c4:	0800474b 	.word	0x0800474b
 80046c8:	08004761 	.word	0x08004761
 80046cc:	08004761 	.word	0x08004761
 80046d0:	08004761 	.word	0x08004761
 80046d4:	08004761 	.word	0x08004761
 80046d8:	08004761 	.word	0x08004761
 80046dc:	08004761 	.word	0x08004761
 80046e0:	08004761 	.word	0x08004761
 80046e4:	08004769 	.word	0x08004769
 80046e8:	08004761 	.word	0x08004761
 80046ec:	08004761 	.word	0x08004761
 80046f0:	08004761 	.word	0x08004761
 80046f4:	08004761 	.word	0x08004761
 80046f8:	08004761 	.word	0x08004761
 80046fc:	08004761 	.word	0x08004761
 8004700:	08004761 	.word	0x08004761
 8004704:	08004769 	.word	0x08004769
 8004708:	08004761 	.word	0x08004761
 800470c:	08004761 	.word	0x08004761
 8004710:	08004761 	.word	0x08004761
 8004714:	08004761 	.word	0x08004761
 8004718:	08004761 	.word	0x08004761
 800471c:	08004761 	.word	0x08004761
 8004720:	08004761 	.word	0x08004761
 8004724:	08004769 	.word	0x08004769
 8004728:	58024400 	.word	0x58024400
 800472c:	58024800 	.word	0x58024800
 8004730:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004738:	3308      	adds	r3, #8
 800473a:	2101      	movs	r1, #1
 800473c:	4618      	mov	r0, r3
 800473e:	f000 ffc5 	bl	80056cc <RCCEx_PLL2_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004748:	e00f      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800474a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800474e:	3328      	adds	r3, #40	; 0x28
 8004750:	2101      	movs	r1, #1
 8004752:	4618      	mov	r0, r3
 8004754:	f001 f86c 	bl	8005830 <RCCEx_PLL3_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800475e:	e004      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004766:	e000      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800476a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10b      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004772:	4bc0      	ldr	r3, [pc, #768]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800477a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800477e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004782:	4abc      	ldr	r2, [pc, #752]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004784:	430b      	orrs	r3, r1
 8004786:	6553      	str	r3, [r2, #84]	; 0x54
 8004788:	e003      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800478e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479a:	f002 0302 	and.w	r3, r2, #2
 800479e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047a2:	2300      	movs	r3, #0
 80047a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80047a8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80047ac:	460b      	mov	r3, r1
 80047ae:	4313      	orrs	r3, r2
 80047b0:	d043      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80047b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ba:	2b05      	cmp	r3, #5
 80047bc:	d824      	bhi.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80047be:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80047c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c4:	08004811 	.word	0x08004811
 80047c8:	080047dd 	.word	0x080047dd
 80047cc:	080047f3 	.word	0x080047f3
 80047d0:	08004811 	.word	0x08004811
 80047d4:	08004811 	.word	0x08004811
 80047d8:	08004811 	.word	0x08004811
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e0:	3308      	adds	r3, #8
 80047e2:	2101      	movs	r1, #1
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 ff71 	bl	80056cc <RCCEx_PLL2_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80047f0:	e00f      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f6:	3328      	adds	r3, #40	; 0x28
 80047f8:	2101      	movs	r1, #1
 80047fa:	4618      	mov	r0, r3
 80047fc:	f001 f818 	bl	8005830 <RCCEx_PLL3_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004806:	e004      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800480e:	e000      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004812:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10b      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800481a:	4b96      	ldr	r3, [pc, #600]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800481c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481e:	f023 0107 	bic.w	r1, r3, #7
 8004822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800482a:	4a92      	ldr	r2, [pc, #584]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800482c:	430b      	orrs	r3, r1
 800482e:	6553      	str	r3, [r2, #84]	; 0x54
 8004830:	e003      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004832:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004836:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800483a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	f002 0304 	and.w	r3, r2, #4
 8004846:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800484a:	2300      	movs	r3, #0
 800484c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004850:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004854:	460b      	mov	r3, r1
 8004856:	4313      	orrs	r3, r2
 8004858:	d043      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800485a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800485e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004862:	2b05      	cmp	r3, #5
 8004864:	d824      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	080048b9 	.word	0x080048b9
 8004870:	08004885 	.word	0x08004885
 8004874:	0800489b 	.word	0x0800489b
 8004878:	080048b9 	.word	0x080048b9
 800487c:	080048b9 	.word	0x080048b9
 8004880:	080048b9 	.word	0x080048b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004888:	3308      	adds	r3, #8
 800488a:	2101      	movs	r1, #1
 800488c:	4618      	mov	r0, r3
 800488e:	f000 ff1d 	bl	80056cc <RCCEx_PLL2_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004898:	e00f      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800489a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800489e:	3328      	adds	r3, #40	; 0x28
 80048a0:	2101      	movs	r1, #1
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 ffc4 	bl	8005830 <RCCEx_PLL3_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048ae:	e004      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80048b6:	e000      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80048b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10b      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048c2:	4b6c      	ldr	r3, [pc, #432]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c6:	f023 0107 	bic.w	r1, r3, #7
 80048ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048d2:	4a68      	ldr	r2, [pc, #416]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048d4:	430b      	orrs	r3, r1
 80048d6:	6593      	str	r3, [r2, #88]	; 0x58
 80048d8:	e003      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	f002 0320 	and.w	r3, r2, #32
 80048ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048f2:	2300      	movs	r3, #0
 80048f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048fc:	460b      	mov	r3, r1
 80048fe:	4313      	orrs	r3, r2
 8004900:	d055      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004906:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800490a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800490e:	d033      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004914:	d82c      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491a:	d02f      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800491c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004920:	d826      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004922:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004926:	d02b      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004928:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800492c:	d820      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800492e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004932:	d012      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004938:	d81a      	bhi.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d022      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800493e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004942:	d115      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004948:	3308      	adds	r3, #8
 800494a:	2100      	movs	r1, #0
 800494c:	4618      	mov	r0, r3
 800494e:	f000 febd 	bl	80056cc <RCCEx_PLL2_Config>
 8004952:	4603      	mov	r3, r0
 8004954:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004958:	e015      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800495a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800495e:	3328      	adds	r3, #40	; 0x28
 8004960:	2102      	movs	r1, #2
 8004962:	4618      	mov	r0, r3
 8004964:	f000 ff64 	bl	8005830 <RCCEx_PLL3_Config>
 8004968:	4603      	mov	r3, r0
 800496a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800496e:	e00a      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004976:	e006      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004978:	bf00      	nop
 800497a:	e004      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800497c:	bf00      	nop
 800497e:	e002      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004980:	bf00      	nop
 8004982:	e000      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004986:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10b      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800498e:	4b39      	ldr	r3, [pc, #228]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800499a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800499e:	4a35      	ldr	r2, [pc, #212]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80049a0:	430b      	orrs	r3, r1
 80049a2:	6553      	str	r3, [r2, #84]	; 0x54
 80049a4:	e003      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80049ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80049ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049be:	2300      	movs	r3, #0
 80049c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80049c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4313      	orrs	r3, r2
 80049cc:	d058      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80049ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80049d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049da:	d033      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80049dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049e0:	d82c      	bhi.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80049e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e6:	d02f      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80049e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ec:	d826      	bhi.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80049ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049f2:	d02b      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80049f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049f8:	d820      	bhi.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80049fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049fe:	d012      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a04:	d81a      	bhi.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d022      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a0e:	d115      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a14:	3308      	adds	r3, #8
 8004a16:	2100      	movs	r1, #0
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fe57 	bl	80056cc <RCCEx_PLL2_Config>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a24:	e015      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a2a:	3328      	adds	r3, #40	; 0x28
 8004a2c:	2102      	movs	r1, #2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fefe 	bl	8005830 <RCCEx_PLL3_Config>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a3a:	e00a      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a42:	e006      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004a44:	bf00      	nop
 8004a46:	e004      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004a48:	bf00      	nop
 8004a4a:	e002      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004a4c:	bf00      	nop
 8004a4e:	e000      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10e      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a5a:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a6a:	4a02      	ldr	r2, [pc, #8]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a70:	e006      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004a72:	bf00      	nop
 8004a74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a90:	2300      	movs	r3, #0
 8004a92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a96:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	d055      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004aa8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004aac:	d033      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004aae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ab2:	d82c      	bhi.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab8:	d02f      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004abe:	d826      	bhi.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004ac0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ac4:	d02b      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004ac6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004aca:	d820      	bhi.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ad0:	d012      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004ad2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ad6:	d81a      	bhi.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d022      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae0:	d115      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	2100      	movs	r1, #0
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fdee 	bl	80056cc <RCCEx_PLL2_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004af6:	e015      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004afc:	3328      	adds	r3, #40	; 0x28
 8004afe:	2102      	movs	r1, #2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fe95 	bl	8005830 <RCCEx_PLL3_Config>
 8004b06:	4603      	mov	r3, r0
 8004b08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b0c:	e00a      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b14:	e006      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004b16:	bf00      	nop
 8004b18:	e004      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004b1a:	bf00      	nop
 8004b1c:	e002      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004b1e:	bf00      	nop
 8004b20:	e000      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10b      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b2c:	4ba1      	ldr	r3, [pc, #644]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b30:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b3c:	4a9d      	ldr	r2, [pc, #628]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	6593      	str	r3, [r2, #88]	; 0x58
 8004b42:	e003      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b48:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f002 0308 	and.w	r3, r2, #8
 8004b58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b62:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004b66:	460b      	mov	r3, r1
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	d01e      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b78:	d10c      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b7e:	3328      	adds	r3, #40	; 0x28
 8004b80:	2102      	movs	r1, #2
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fe54 	bl	8005830 <RCCEx_PLL3_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004b94:	4b87      	ldr	r3, [pc, #540]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba4:	4a83      	ldr	r2, [pc, #524]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb2:	f002 0310 	and.w	r3, r2, #16
 8004bb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004bc0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	d01e      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd6:	d10c      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bdc:	3328      	adds	r3, #40	; 0x28
 8004bde:	2102      	movs	r1, #2
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fe25 	bl	8005830 <RCCEx_PLL3_Config>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bf2:	4b70      	ldr	r3, [pc, #448]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004c02:	4a6c      	ldr	r2, [pc, #432]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c04:	430b      	orrs	r3, r1
 8004c06:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004c14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c1e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004c22:	460b      	mov	r3, r1
 8004c24:	4313      	orrs	r3, r2
 8004c26:	d03e      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004c28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c34:	d022      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004c36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c3a:	d81b      	bhi.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c44:	d00b      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004c46:	e015      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fd3b 	bl	80056cc <RCCEx_PLL2_Config>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c5c:	e00f      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c62:	3328      	adds	r3, #40	; 0x28
 8004c64:	2102      	movs	r1, #2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fde2 	bl	8005830 <RCCEx_PLL3_Config>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c72:	e004      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c7a:	e000      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10b      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c86:	4b4b      	ldr	r3, [pc, #300]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c96:	4a47      	ldr	r2, [pc, #284]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c9c:	e003      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ca2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004cb2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cb8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	d03b      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cce:	d01f      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004cd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cd4:	d818      	bhi.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cda:	d003      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004cdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce0:	d007      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004ce2:	e011      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ce4:	4b33      	ldr	r3, [pc, #204]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	4a32      	ldr	r2, [pc, #200]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004cf0:	e00f      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf6:	3328      	adds	r3, #40	; 0x28
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fd98 	bl	8005830 <RCCEx_PLL3_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d06:	e004      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d0e:	e000      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d1a:	4b26      	ldr	r3, [pc, #152]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2a:	4a22      	ldr	r2, [pc, #136]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	6553      	str	r3, [r2, #84]	; 0x54
 8004d30:	e003      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d42:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004d46:	673b      	str	r3, [r7, #112]	; 0x70
 8004d48:	2300      	movs	r3, #0
 8004d4a:	677b      	str	r3, [r7, #116]	; 0x74
 8004d4c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004d50:	460b      	mov	r3, r1
 8004d52:	4313      	orrs	r3, r2
 8004d54:	d034      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d64:	d007      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004d66:	e011      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d68:	4b12      	ldr	r3, [pc, #72]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	4a11      	ldr	r2, [pc, #68]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d74:	e00e      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	2102      	movs	r1, #2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fca4 	bl	80056cc <RCCEx_PLL2_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d8a:	e003      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10d      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004daa:	4a02      	ldr	r2, [pc, #8]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004dac:	430b      	orrs	r3, r1
 8004dae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004db0:	e006      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004db2:	bf00      	nop
 8004db4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dbc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004dcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dce:	2300      	movs	r3, #0
 8004dd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dd2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	d00c      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de0:	3328      	adds	r3, #40	; 0x28
 8004de2:	2102      	movs	r1, #2
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fd23 	bl	8005830 <RCCEx_PLL3_Config>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004e02:	663b      	str	r3, [r7, #96]	; 0x60
 8004e04:	2300      	movs	r3, #0
 8004e06:	667b      	str	r3, [r7, #100]	; 0x64
 8004e08:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	d038      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e1e:	d018      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004e20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e24:	d811      	bhi.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e2a:	d014      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e30:	d80b      	bhi.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d011      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3a:	d106      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e3c:	4bc3      	ldr	r3, [pc, #780]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e40:	4ac2      	ldr	r2, [pc, #776]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004e48:	e008      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004e50:	e004      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004e52:	bf00      	nop
 8004e54:	e002      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004e56:	bf00      	nop
 8004e58:	e000      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10b      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e64:	4bb9      	ldr	r3, [pc, #740]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e68:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e74:	4ab5      	ldr	r2, [pc, #724]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004e76:	430b      	orrs	r3, r1
 8004e78:	6553      	str	r3, [r2, #84]	; 0x54
 8004e7a:	e003      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004e90:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e92:	2300      	movs	r3, #0
 8004e94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e96:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ea0:	4baa      	ldr	r3, [pc, #680]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eae:	4aa7      	ldr	r2, [pc, #668]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004ec0:	653b      	str	r3, [r7, #80]	; 0x50
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	657b      	str	r3, [r7, #84]	; 0x54
 8004ec6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	d009      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ed0:	4b9e      	ldr	r3, [pc, #632]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	4a9b      	ldr	r2, [pc, #620]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004ef0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ef6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004efa:	460b      	mov	r3, r1
 8004efc:	4313      	orrs	r3, r2
 8004efe:	d009      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004f00:	4b92      	ldr	r3, [pc, #584]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f04:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0e:	4a8f      	ldr	r2, [pc, #572]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f10:	430b      	orrs	r3, r1
 8004f12:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004f20:	643b      	str	r3, [r7, #64]	; 0x40
 8004f22:	2300      	movs	r3, #0
 8004f24:	647b      	str	r3, [r7, #68]	; 0x44
 8004f26:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	d00e      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f30:	4b86      	ldr	r3, [pc, #536]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	4a85      	ldr	r2, [pc, #532]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f3a:	6113      	str	r3, [r2, #16]
 8004f3c:	4b83      	ldr	r3, [pc, #524]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f3e:	6919      	ldr	r1, [r3, #16]
 8004f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f48:	4a80      	ldr	r2, [pc, #512]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004f5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f60:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004f64:	460b      	mov	r3, r1
 8004f66:	4313      	orrs	r3, r2
 8004f68:	d009      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f6a:	4b78      	ldr	r3, [pc, #480]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f78:	4a74      	ldr	r2, [pc, #464]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004f8a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f90:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004f94:	460b      	mov	r3, r1
 8004f96:	4313      	orrs	r3, r2
 8004f98:	d00a      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f9a:	4b6c      	ldr	r3, [pc, #432]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004faa:	4a68      	ldr	r2, [pc, #416]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004fac:	430b      	orrs	r3, r1
 8004fae:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb8:	2100      	movs	r1, #0
 8004fba:	62b9      	str	r1, [r7, #40]	; 0x28
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	d011      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 fb79 	bl	80056cc <RCCEx_PLL2_Config>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004fe0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004fec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	6239      	str	r1, [r7, #32]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
 8005002:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005006:	460b      	mov	r3, r1
 8005008:	4313      	orrs	r3, r2
 800500a:	d011      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800500c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005010:	3308      	adds	r3, #8
 8005012:	2101      	movs	r1, #1
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fb59 	bl	80056cc <RCCEx_PLL2_Config>
 800501a:	4603      	mov	r3, r0
 800501c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005020:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800502c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	2100      	movs	r1, #0
 800503a:	61b9      	str	r1, [r7, #24]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005046:	460b      	mov	r3, r1
 8005048:	4313      	orrs	r3, r2
 800504a:	d011      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800504c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005050:	3308      	adds	r3, #8
 8005052:	2102      	movs	r1, #2
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fb39 	bl	80056cc <RCCEx_PLL2_Config>
 800505a:	4603      	mov	r3, r0
 800505c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005060:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005068:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800506c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005070:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	2100      	movs	r1, #0
 800507a:	6139      	str	r1, [r7, #16]
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005086:	460b      	mov	r3, r1
 8005088:	4313      	orrs	r3, r2
 800508a:	d011      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800508c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005090:	3328      	adds	r3, #40	; 0x28
 8005092:	2100      	movs	r1, #0
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fbcb 	bl	8005830 <RCCEx_PLL3_Config>
 800509a:	4603      	mov	r3, r0
 800509c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80050a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80050b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b8:	2100      	movs	r1, #0
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	f003 0310 	and.w	r3, r3, #16
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80050c6:	460b      	mov	r3, r1
 80050c8:	4313      	orrs	r3, r2
 80050ca:	d011      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050d0:	3328      	adds	r3, #40	; 0x28
 80050d2:	2101      	movs	r1, #1
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fbab 	bl	8005830 <RCCEx_PLL3_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80050e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80050f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	2100      	movs	r1, #0
 80050fa:	6039      	str	r1, [r7, #0]
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	607b      	str	r3, [r7, #4]
 8005102:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005106:	460b      	mov	r3, r1
 8005108:	4313      	orrs	r3, r2
 800510a:	d011      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800510c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005110:	3328      	adds	r3, #40	; 0x28
 8005112:	2102      	movs	r1, #2
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fb8b 	bl	8005830 <RCCEx_PLL3_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005120:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005128:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800512c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8005130:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	e000      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
}
 800513e:	4618      	mov	r0, r3
 8005140:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005144:	46bd      	mov	sp, r7
 8005146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800514a:	bf00      	nop
 800514c:	58024400 	.word	0x58024400

08005150 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005154:	f7fe fde2 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8005158:	4602      	mov	r2, r0
 800515a:	4b06      	ldr	r3, [pc, #24]	; (8005174 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	091b      	lsrs	r3, r3, #4
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	4904      	ldr	r1, [pc, #16]	; (8005178 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005166:	5ccb      	ldrb	r3, [r1, r3]
 8005168:	f003 031f 	and.w	r3, r3, #31
 800516c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005170:	4618      	mov	r0, r3
 8005172:	bd80      	pop	{r7, pc}
 8005174:	58024400 	.word	0x58024400
 8005178:	080097a8 	.word	0x080097a8

0800517c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800517c:	b480      	push	{r7}
 800517e:	b089      	sub	sp, #36	; 0x24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005184:	4ba1      	ldr	r3, [pc, #644]	; (800540c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800518e:	4b9f      	ldr	r3, [pc, #636]	; (800540c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005192:	0b1b      	lsrs	r3, r3, #12
 8005194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005198:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800519a:	4b9c      	ldr	r3, [pc, #624]	; (800540c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	091b      	lsrs	r3, r3, #4
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80051a6:	4b99      	ldr	r3, [pc, #612]	; (800540c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051aa:	08db      	lsrs	r3, r3, #3
 80051ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	fb02 f303 	mul.w	r3, r2, r3
 80051b6:	ee07 3a90 	vmov	s15, r3
 80051ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8111 	beq.w	80053ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	f000 8083 	beq.w	80052d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	f200 80a1 	bhi.w	800531c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d056      	beq.n	8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80051e6:	e099      	b.n	800531c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051e8:	4b88      	ldr	r3, [pc, #544]	; (800540c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d02d      	beq.n	8005250 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051f4:	4b85      	ldr	r3, [pc, #532]	; (800540c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	08db      	lsrs	r3, r3, #3
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	4a84      	ldr	r2, [pc, #528]	; (8005410 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
 8005204:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	ee07 3a90 	vmov	s15, r3
 800520c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800521e:	4b7b      	ldr	r3, [pc, #492]	; (800540c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800522e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005232:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800523a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800523e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800524e:	e087      	b.n	8005360 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005418 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800525e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005262:	4b6a      	ldr	r3, [pc, #424]	; (800540c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005272:	ed97 6a03 	vldr	s12, [r7, #12]
 8005276:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800527a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800527e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005292:	e065      	b.n	8005360 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800541c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052a6:	4b59      	ldr	r3, [pc, #356]	; (800540c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052d6:	e043      	b.n	8005360 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80052e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ea:	4b48      	ldr	r3, [pc, #288]	; (800540c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80052fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800530a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800530e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800531a:	e021      	b.n	8005360 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005326:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800541c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800532a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800532e:	4b37      	ldr	r3, [pc, #220]	; (800540c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800533e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005342:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800534a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800534e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800535e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005360:	4b2a      	ldr	r3, [pc, #168]	; (800540c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	0a5b      	lsrs	r3, r3, #9
 8005366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005376:	ee37 7a87 	vadd.f32	s14, s15, s14
 800537a:	edd7 6a07 	vldr	s13, [r7, #28]
 800537e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005386:	ee17 2a90 	vmov	r2, s15
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800538e:	4b1f      	ldr	r3, [pc, #124]	; (800540c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	0c1b      	lsrs	r3, r3, #16
 8005394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005398:	ee07 3a90 	vmov	s15, r3
 800539c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80053ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053b4:	ee17 2a90 	vmov	r2, s15
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80053bc:	4b13      	ldr	r3, [pc, #76]	; (800540c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	0e1b      	lsrs	r3, r3, #24
 80053c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80053da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053e2:	ee17 2a90 	vmov	r2, s15
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80053ea:	e008      	b.n	80053fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	609a      	str	r2, [r3, #8]
}
 80053fe:	bf00      	nop
 8005400:	3724      	adds	r7, #36	; 0x24
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	58024400 	.word	0x58024400
 8005410:	03d09000 	.word	0x03d09000
 8005414:	46000000 	.word	0x46000000
 8005418:	4c742400 	.word	0x4c742400
 800541c:	4a742400 	.word	0x4a742400
 8005420:	4af42400 	.word	0x4af42400

08005424 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005424:	b480      	push	{r7}
 8005426:	b089      	sub	sp, #36	; 0x24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800542c:	4ba1      	ldr	r3, [pc, #644]	; (80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800542e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005430:	f003 0303 	and.w	r3, r3, #3
 8005434:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005436:	4b9f      	ldr	r3, [pc, #636]	; (80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543a:	0d1b      	lsrs	r3, r3, #20
 800543c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005440:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005442:	4b9c      	ldr	r3, [pc, #624]	; (80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	0a1b      	lsrs	r3, r3, #8
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800544e:	4b99      	ldr	r3, [pc, #612]	; (80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005452:	08db      	lsrs	r3, r3, #3
 8005454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	fb02 f303 	mul.w	r3, r2, r3
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005466:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8111 	beq.w	8005694 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	2b02      	cmp	r3, #2
 8005476:	f000 8083 	beq.w	8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	2b02      	cmp	r3, #2
 800547e:	f200 80a1 	bhi.w	80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d056      	beq.n	800553c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800548e:	e099      	b.n	80055c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005490:	4b88      	ldr	r3, [pc, #544]	; (80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d02d      	beq.n	80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800549c:	4b85      	ldr	r3, [pc, #532]	; (80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	08db      	lsrs	r3, r3, #3
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	4a84      	ldr	r2, [pc, #528]	; (80056b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80054a8:	fa22 f303 	lsr.w	r3, r2, r3
 80054ac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	ee07 3a90 	vmov	s15, r3
 80054b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c6:	4b7b      	ldr	r3, [pc, #492]	; (80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80054f6:	e087      	b.n	8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005502:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80056c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800550a:	4b6a      	ldr	r3, [pc, #424]	; (80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551a:	ed97 6a03 	vldr	s12, [r7, #12]
 800551e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800552a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800552e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800553a:	e065      	b.n	8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	ee07 3a90 	vmov	s15, r3
 8005542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005546:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800554a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800554e:	4b59      	ldr	r3, [pc, #356]	; (80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800555e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005562:	eddf 5a56 	vldr	s11, [pc, #344]	; 80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800556a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800556e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800557e:	e043      	b.n	8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	ee07 3a90 	vmov	s15, r3
 8005586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800558e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005592:	4b48      	ldr	r3, [pc, #288]	; (80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055c2:	e021      	b.n	8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	ee07 3a90 	vmov	s15, r3
 80055ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d6:	4b37      	ldr	r3, [pc, #220]	; (80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005606:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005608:	4b2a      	ldr	r3, [pc, #168]	; (80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	0a5b      	lsrs	r3, r3, #9
 800560e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800561e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005622:	edd7 6a07 	vldr	s13, [r7, #28]
 8005626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800562a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800562e:	ee17 2a90 	vmov	r2, s15
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005636:	4b1f      	ldr	r3, [pc, #124]	; (80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	0c1b      	lsrs	r3, r3, #16
 800563c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005640:	ee07 3a90 	vmov	s15, r3
 8005644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005648:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800564c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005650:	edd7 6a07 	vldr	s13, [r7, #28]
 8005654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800565c:	ee17 2a90 	vmov	r2, s15
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005664:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	0e1b      	lsrs	r3, r3, #24
 800566a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800567a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800567e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800568a:	ee17 2a90 	vmov	r2, s15
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005692:	e008      	b.n	80056a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	609a      	str	r2, [r3, #8]
}
 80056a6:	bf00      	nop
 80056a8:	3724      	adds	r7, #36	; 0x24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	58024400 	.word	0x58024400
 80056b8:	03d09000 	.word	0x03d09000
 80056bc:	46000000 	.word	0x46000000
 80056c0:	4c742400 	.word	0x4c742400
 80056c4:	4a742400 	.word	0x4a742400
 80056c8:	4af42400 	.word	0x4af42400

080056cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056da:	4b53      	ldr	r3, [pc, #332]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d101      	bne.n	80056ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e099      	b.n	800581e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80056ea:	4b4f      	ldr	r3, [pc, #316]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a4e      	ldr	r2, [pc, #312]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 80056f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f6:	f7fc fae7 	bl	8001cc8 <HAL_GetTick>
 80056fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80056fc:	e008      	b.n	8005710 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056fe:	f7fc fae3 	bl	8001cc8 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d901      	bls.n	8005710 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e086      	b.n	800581e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005710:	4b45      	ldr	r3, [pc, #276]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1f0      	bne.n	80056fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800571c:	4b42      	ldr	r3, [pc, #264]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005720:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	031b      	lsls	r3, r3, #12
 800572a:	493f      	ldr	r1, [pc, #252]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 800572c:	4313      	orrs	r3, r2
 800572e:	628b      	str	r3, [r1, #40]	; 0x28
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	3b01      	subs	r3, #1
 8005736:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	3b01      	subs	r3, #1
 8005740:	025b      	lsls	r3, r3, #9
 8005742:	b29b      	uxth	r3, r3
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	3b01      	subs	r3, #1
 800574c:	041b      	lsls	r3, r3, #16
 800574e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	3b01      	subs	r3, #1
 800575a:	061b      	lsls	r3, r3, #24
 800575c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005760:	4931      	ldr	r1, [pc, #196]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 8005762:	4313      	orrs	r3, r2
 8005764:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005766:	4b30      	ldr	r3, [pc, #192]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	492d      	ldr	r1, [pc, #180]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 8005774:	4313      	orrs	r3, r2
 8005776:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005778:	4b2b      	ldr	r3, [pc, #172]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	f023 0220 	bic.w	r2, r3, #32
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	4928      	ldr	r1, [pc, #160]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 8005786:	4313      	orrs	r3, r2
 8005788:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800578a:	4b27      	ldr	r3, [pc, #156]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	4a26      	ldr	r2, [pc, #152]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 8005790:	f023 0310 	bic.w	r3, r3, #16
 8005794:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005796:	4b24      	ldr	r3, [pc, #144]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 8005798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800579a:	4b24      	ldr	r3, [pc, #144]	; (800582c <RCCEx_PLL2_Config+0x160>)
 800579c:	4013      	ands	r3, r2
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	69d2      	ldr	r2, [r2, #28]
 80057a2:	00d2      	lsls	r2, r2, #3
 80057a4:	4920      	ldr	r1, [pc, #128]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80057aa:	4b1f      	ldr	r3, [pc, #124]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	4a1e      	ldr	r2, [pc, #120]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 80057b0:	f043 0310 	orr.w	r3, r3, #16
 80057b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80057bc:	4b1a      	ldr	r3, [pc, #104]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	4a19      	ldr	r2, [pc, #100]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 80057c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057c8:	e00f      	b.n	80057ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d106      	bne.n	80057de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80057d0:	4b15      	ldr	r3, [pc, #84]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	4a14      	ldr	r2, [pc, #80]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 80057d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057dc:	e005      	b.n	80057ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80057de:	4b12      	ldr	r3, [pc, #72]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 80057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e2:	4a11      	ldr	r2, [pc, #68]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 80057e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80057ea:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a0e      	ldr	r2, [pc, #56]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 80057f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f6:	f7fc fa67 	bl	8001cc8 <HAL_GetTick>
 80057fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80057fc:	e008      	b.n	8005810 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80057fe:	f7fc fa63 	bl	8001cc8 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e006      	b.n	800581e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005810:	4b05      	ldr	r3, [pc, #20]	; (8005828 <RCCEx_PLL2_Config+0x15c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f0      	beq.n	80057fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	58024400 	.word	0x58024400
 800582c:	ffff0007 	.word	0xffff0007

08005830 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800583e:	4b53      	ldr	r3, [pc, #332]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 8005840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	2b03      	cmp	r3, #3
 8005848:	d101      	bne.n	800584e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e099      	b.n	8005982 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800584e:	4b4f      	ldr	r3, [pc, #316]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a4e      	ldr	r2, [pc, #312]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 8005854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005858:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800585a:	f7fc fa35 	bl	8001cc8 <HAL_GetTick>
 800585e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005860:	e008      	b.n	8005874 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005862:	f7fc fa31 	bl	8001cc8 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e086      	b.n	8005982 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005874:	4b45      	ldr	r3, [pc, #276]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1f0      	bne.n	8005862 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005880:	4b42      	ldr	r3, [pc, #264]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	051b      	lsls	r3, r3, #20
 800588e:	493f      	ldr	r1, [pc, #252]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 8005890:	4313      	orrs	r3, r2
 8005892:	628b      	str	r3, [r1, #40]	; 0x28
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	3b01      	subs	r3, #1
 800589a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	025b      	lsls	r3, r3, #9
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	041b      	lsls	r3, r3, #16
 80058b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	3b01      	subs	r3, #1
 80058be:	061b      	lsls	r3, r3, #24
 80058c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058c4:	4931      	ldr	r1, [pc, #196]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80058ca:	4b30      	ldr	r3, [pc, #192]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 80058cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	492d      	ldr	r1, [pc, #180]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80058dc:	4b2b      	ldr	r3, [pc, #172]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	4928      	ldr	r1, [pc, #160]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80058ee:	4b27      	ldr	r3, [pc, #156]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 80058f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f2:	4a26      	ldr	r2, [pc, #152]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 80058f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80058fa:	4b24      	ldr	r3, [pc, #144]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 80058fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058fe:	4b24      	ldr	r3, [pc, #144]	; (8005990 <RCCEx_PLL3_Config+0x160>)
 8005900:	4013      	ands	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	69d2      	ldr	r2, [r2, #28]
 8005906:	00d2      	lsls	r2, r2, #3
 8005908:	4920      	ldr	r1, [pc, #128]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 800590a:	4313      	orrs	r3, r2
 800590c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800590e:	4b1f      	ldr	r3, [pc, #124]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	4a1e      	ldr	r2, [pc, #120]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 8005914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005918:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d106      	bne.n	800592e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005920:	4b1a      	ldr	r3, [pc, #104]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	4a19      	ldr	r2, [pc, #100]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 8005926:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800592a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800592c:	e00f      	b.n	800594e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d106      	bne.n	8005942 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005934:	4b15      	ldr	r3, [pc, #84]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	4a14      	ldr	r2, [pc, #80]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 800593a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800593e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005940:	e005      	b.n	800594e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005942:	4b12      	ldr	r3, [pc, #72]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 8005944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005946:	4a11      	ldr	r2, [pc, #68]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 8005948:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800594c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800594e:	4b0f      	ldr	r3, [pc, #60]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a0e      	ldr	r2, [pc, #56]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 8005954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800595a:	f7fc f9b5 	bl	8001cc8 <HAL_GetTick>
 800595e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005960:	e008      	b.n	8005974 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005962:	f7fc f9b1 	bl	8001cc8 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d901      	bls.n	8005974 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e006      	b.n	8005982 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005974:	4b05      	ldr	r3, [pc, #20]	; (800598c <RCCEx_PLL3_Config+0x15c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0f0      	beq.n	8005962 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005980:	7bfb      	ldrb	r3, [r7, #15]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	58024400 	.word	0x58024400
 8005990:	ffff0007 	.word	0xffff0007

08005994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e049      	b.n	8005a3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fb fdd4 	bl	8001568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4619      	mov	r1, r3
 80059d2:	4610      	mov	r0, r2
 80059d4:	f000 fb26 	bl	8006024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e08f      	b.n	8005b78 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d106      	bne.n	8005a72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7fb fd2b 	bl	80014c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2202      	movs	r2, #2
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6899      	ldr	r1, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	4b3e      	ldr	r3, [pc, #248]	; (8005b80 <HAL_TIM_Encoder_Init+0x13c>)
 8005a86:	400b      	ands	r3, r1
 8005a88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3304      	adds	r3, #4
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f000 fac5 	bl	8006024 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	4b31      	ldr	r3, [pc, #196]	; (8005b84 <HAL_TIM_Encoder_Init+0x140>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	021b      	lsls	r3, r3, #8
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4b2b      	ldr	r3, [pc, #172]	; (8005b88 <HAL_TIM_Encoder_Init+0x144>)
 8005ada:	4013      	ands	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4b2a      	ldr	r3, [pc, #168]	; (8005b8c <HAL_TIM_Encoder_Init+0x148>)
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	021b      	lsls	r3, r3, #8
 8005af0:	4313      	orrs	r3, r2
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	011a      	lsls	r2, r3, #4
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	031b      	lsls	r3, r3, #12
 8005b04:	4313      	orrs	r3, r2
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005b1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	4313      	orrs	r3, r2
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	fffebff8 	.word	0xfffebff8
 8005b84:	fffffcfc 	.word	0xfffffcfc
 8005b88:	fffff3f3 	.word	0xfffff3f3
 8005b8c:	ffff0f0f 	.word	0xffff0f0f

08005b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d122      	bne.n	8005bec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d11b      	bne.n	8005bec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0202 	mvn.w	r2, #2
 8005bbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fa08 	bl	8005fe8 <HAL_TIM_IC_CaptureCallback>
 8005bd8:	e005      	b.n	8005be6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f9fa 	bl	8005fd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fa0b 	bl	8005ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	d122      	bne.n	8005c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d11b      	bne.n	8005c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0204 	mvn.w	r2, #4
 8005c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2202      	movs	r2, #2
 8005c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f9de 	bl	8005fe8 <HAL_TIM_IC_CaptureCallback>
 8005c2c:	e005      	b.n	8005c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f9d0 	bl	8005fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f9e1 	bl	8005ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b08      	cmp	r3, #8
 8005c4c:	d122      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d11b      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f06f 0208 	mvn.w	r2, #8
 8005c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2204      	movs	r2, #4
 8005c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f9b4 	bl	8005fe8 <HAL_TIM_IC_CaptureCallback>
 8005c80:	e005      	b.n	8005c8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f9a6 	bl	8005fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f9b7 	bl	8005ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b10      	cmp	r3, #16
 8005ca0:	d122      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f003 0310 	and.w	r3, r3, #16
 8005cac:	2b10      	cmp	r3, #16
 8005cae:	d11b      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0210 	mvn.w	r2, #16
 8005cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2208      	movs	r2, #8
 8005cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f98a 	bl	8005fe8 <HAL_TIM_IC_CaptureCallback>
 8005cd4:	e005      	b.n	8005ce2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f97c 	bl	8005fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f98d 	bl	8005ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d10e      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d107      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f06f 0201 	mvn.w	r2, #1
 8005d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f956 	bl	8005fc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1e:	2b80      	cmp	r3, #128	; 0x80
 8005d20:	d10e      	bne.n	8005d40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d2c:	2b80      	cmp	r3, #128	; 0x80
 8005d2e:	d107      	bne.n	8005d40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fb42 	bl	80063c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d4e:	d10e      	bne.n	8005d6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5a:	2b80      	cmp	r3, #128	; 0x80
 8005d5c:	d107      	bne.n	8005d6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fb35 	bl	80063d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d78:	2b40      	cmp	r3, #64	; 0x40
 8005d7a:	d10e      	bne.n	8005d9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d86:	2b40      	cmp	r3, #64	; 0x40
 8005d88:	d107      	bne.n	8005d9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f93b 	bl	8006010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d10e      	bne.n	8005dc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d107      	bne.n	8005dc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f06f 0220 	mvn.w	r2, #32
 8005dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 faf5 	bl	80063b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dc6:	bf00      	nop
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_TIM_ConfigClockSource+0x1c>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e0dc      	b.n	8005fa6 <HAL_TIM_ConfigClockSource+0x1d6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	4b6a      	ldr	r3, [pc, #424]	; (8005fb0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a64      	ldr	r2, [pc, #400]	; (8005fb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	f000 80a9 	beq.w	8005f7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005e28:	4a62      	ldr	r2, [pc, #392]	; (8005fb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	f200 80ae 	bhi.w	8005f8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e30:	4a61      	ldr	r2, [pc, #388]	; (8005fb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	f000 80a1 	beq.w	8005f7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005e38:	4a5f      	ldr	r2, [pc, #380]	; (8005fb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	f200 80a6 	bhi.w	8005f8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e40:	4a5e      	ldr	r2, [pc, #376]	; (8005fbc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	f000 8099 	beq.w	8005f7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005e48:	4a5c      	ldr	r2, [pc, #368]	; (8005fbc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	f200 809e 	bhi.w	8005f8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005e54:	f000 8091 	beq.w	8005f7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005e58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005e5c:	f200 8096 	bhi.w	8005f8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e64:	f000 8089 	beq.w	8005f7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e6c:	f200 808e 	bhi.w	8005f8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e74:	d03e      	beq.n	8005ef4 <HAL_TIM_ConfigClockSource+0x124>
 8005e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e7a:	f200 8087 	bhi.w	8005f8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e82:	f000 8086 	beq.w	8005f92 <HAL_TIM_ConfigClockSource+0x1c2>
 8005e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8a:	d87f      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e8c:	2b70      	cmp	r3, #112	; 0x70
 8005e8e:	d01a      	beq.n	8005ec6 <HAL_TIM_ConfigClockSource+0xf6>
 8005e90:	2b70      	cmp	r3, #112	; 0x70
 8005e92:	d87b      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e94:	2b60      	cmp	r3, #96	; 0x60
 8005e96:	d050      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0x16a>
 8005e98:	2b60      	cmp	r3, #96	; 0x60
 8005e9a:	d877      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005e9c:	2b50      	cmp	r3, #80	; 0x50
 8005e9e:	d03c      	beq.n	8005f1a <HAL_TIM_ConfigClockSource+0x14a>
 8005ea0:	2b50      	cmp	r3, #80	; 0x50
 8005ea2:	d873      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005ea4:	2b40      	cmp	r3, #64	; 0x40
 8005ea6:	d058      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0x18a>
 8005ea8:	2b40      	cmp	r3, #64	; 0x40
 8005eaa:	d86f      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005eac:	2b30      	cmp	r3, #48	; 0x30
 8005eae:	d064      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005eb0:	2b30      	cmp	r3, #48	; 0x30
 8005eb2:	d86b      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d060      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d867      	bhi.n	8005f8c <HAL_TIM_ConfigClockSource+0x1bc>
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d05c      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005ec0:	2b10      	cmp	r3, #16
 8005ec2:	d05a      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0x1aa>
 8005ec4:	e062      	b.n	8005f8c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ed6:	f000 f9bd 	bl	8006254 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ee8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	609a      	str	r2, [r3, #8]
      break;
 8005ef2:	e04f      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f04:	f000 f9a6 	bl	8006254 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f16:	609a      	str	r2, [r3, #8]
      break;
 8005f18:	e03c      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f26:	461a      	mov	r2, r3
 8005f28:	f000 f916 	bl	8006158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2150      	movs	r1, #80	; 0x50
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 f970 	bl	8006218 <TIM_ITRx_SetConfig>
      break;
 8005f38:	e02c      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f46:	461a      	mov	r2, r3
 8005f48:	f000 f935 	bl	80061b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2160      	movs	r1, #96	; 0x60
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 f960 	bl	8006218 <TIM_ITRx_SetConfig>
      break;
 8005f58:	e01c      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f66:	461a      	mov	r2, r3
 8005f68:	f000 f8f6 	bl	8006158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2140      	movs	r1, #64	; 0x40
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 f950 	bl	8006218 <TIM_ITRx_SetConfig>
      break;
 8005f78:	e00c      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4619      	mov	r1, r3
 8005f84:	4610      	mov	r0, r2
 8005f86:	f000 f947 	bl	8006218 <TIM_ITRx_SetConfig>
      break;
 8005f8a:	e003      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f90:	e000      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005f92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	ffceff88 	.word	0xffceff88
 8005fb4:	00100040 	.word	0x00100040
 8005fb8:	00100030 	.word	0x00100030
 8005fbc:	00100020 	.word	0x00100020

08005fc0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a40      	ldr	r2, [pc, #256]	; (8006138 <TIM_Base_SetConfig+0x114>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d013      	beq.n	8006064 <TIM_Base_SetConfig+0x40>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006042:	d00f      	beq.n	8006064 <TIM_Base_SetConfig+0x40>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a3d      	ldr	r2, [pc, #244]	; (800613c <TIM_Base_SetConfig+0x118>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00b      	beq.n	8006064 <TIM_Base_SetConfig+0x40>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a3c      	ldr	r2, [pc, #240]	; (8006140 <TIM_Base_SetConfig+0x11c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d007      	beq.n	8006064 <TIM_Base_SetConfig+0x40>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a3b      	ldr	r2, [pc, #236]	; (8006144 <TIM_Base_SetConfig+0x120>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d003      	beq.n	8006064 <TIM_Base_SetConfig+0x40>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a3a      	ldr	r2, [pc, #232]	; (8006148 <TIM_Base_SetConfig+0x124>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d108      	bne.n	8006076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a2f      	ldr	r2, [pc, #188]	; (8006138 <TIM_Base_SetConfig+0x114>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d01f      	beq.n	80060be <TIM_Base_SetConfig+0x9a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006084:	d01b      	beq.n	80060be <TIM_Base_SetConfig+0x9a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a2c      	ldr	r2, [pc, #176]	; (800613c <TIM_Base_SetConfig+0x118>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d017      	beq.n	80060be <TIM_Base_SetConfig+0x9a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a2b      	ldr	r2, [pc, #172]	; (8006140 <TIM_Base_SetConfig+0x11c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d013      	beq.n	80060be <TIM_Base_SetConfig+0x9a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a2a      	ldr	r2, [pc, #168]	; (8006144 <TIM_Base_SetConfig+0x120>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00f      	beq.n	80060be <TIM_Base_SetConfig+0x9a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a29      	ldr	r2, [pc, #164]	; (8006148 <TIM_Base_SetConfig+0x124>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00b      	beq.n	80060be <TIM_Base_SetConfig+0x9a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a28      	ldr	r2, [pc, #160]	; (800614c <TIM_Base_SetConfig+0x128>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d007      	beq.n	80060be <TIM_Base_SetConfig+0x9a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a27      	ldr	r2, [pc, #156]	; (8006150 <TIM_Base_SetConfig+0x12c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d003      	beq.n	80060be <TIM_Base_SetConfig+0x9a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a26      	ldr	r2, [pc, #152]	; (8006154 <TIM_Base_SetConfig+0x130>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d108      	bne.n	80060d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a10      	ldr	r2, [pc, #64]	; (8006138 <TIM_Base_SetConfig+0x114>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d00f      	beq.n	800611c <TIM_Base_SetConfig+0xf8>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a12      	ldr	r2, [pc, #72]	; (8006148 <TIM_Base_SetConfig+0x124>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00b      	beq.n	800611c <TIM_Base_SetConfig+0xf8>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a11      	ldr	r2, [pc, #68]	; (800614c <TIM_Base_SetConfig+0x128>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d007      	beq.n	800611c <TIM_Base_SetConfig+0xf8>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a10      	ldr	r2, [pc, #64]	; (8006150 <TIM_Base_SetConfig+0x12c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d003      	beq.n	800611c <TIM_Base_SetConfig+0xf8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a0f      	ldr	r2, [pc, #60]	; (8006154 <TIM_Base_SetConfig+0x130>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d103      	bne.n	8006124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	691a      	ldr	r2, [r3, #16]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	615a      	str	r2, [r3, #20]
}
 800612a:	bf00      	nop
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40010000 	.word	0x40010000
 800613c:	40000400 	.word	0x40000400
 8006140:	40000800 	.word	0x40000800
 8006144:	40000c00 	.word	0x40000c00
 8006148:	40010400 	.word	0x40010400
 800614c:	40014000 	.word	0x40014000
 8006150:	40014400 	.word	0x40014400
 8006154:	40014800 	.word	0x40014800

08006158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f023 0201 	bic.w	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f023 030a 	bic.w	r3, r3, #10
 8006194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b087      	sub	sp, #28
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	f023 0210 	bic.w	r2, r3, #16
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	031b      	lsls	r3, r3, #12
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	621a      	str	r2, [r3, #32]
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
	...

08006218 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	4b09      	ldr	r3, [pc, #36]	; (8006250 <TIM_ITRx_SetConfig+0x38>)
 800622c:	4013      	ands	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4313      	orrs	r3, r2
 8006236:	f043 0307 	orr.w	r3, r3, #7
 800623a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	609a      	str	r2, [r3, #8]
}
 8006242:	bf00      	nop
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	ffcfff8f 	.word	0xffcfff8f

08006254 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800626e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	021a      	lsls	r2, r3, #8
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	431a      	orrs	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4313      	orrs	r3, r2
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	609a      	str	r2, [r3, #8]
}
 8006288:	bf00      	nop
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e06d      	b.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a30      	ldr	r2, [pc, #192]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d004      	beq.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a2f      	ldr	r2, [pc, #188]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d108      	bne.n	80062f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a20      	ldr	r2, [pc, #128]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d022      	beq.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631e:	d01d      	beq.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a1d      	ldr	r2, [pc, #116]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d018      	beq.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a1c      	ldr	r2, [pc, #112]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d013      	beq.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a1a      	ldr	r2, [pc, #104]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00e      	beq.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a15      	ldr	r2, [pc, #84]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d009      	beq.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a16      	ldr	r2, [pc, #88]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d004      	beq.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a15      	ldr	r2, [pc, #84]	; (80063ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d10c      	bne.n	8006376 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006362:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	4313      	orrs	r3, r2
 800636c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	40010000 	.word	0x40010000
 8006398:	40010400 	.word	0x40010400
 800639c:	40000400 	.word	0x40000400
 80063a0:	40000800 	.word	0x40000800
 80063a4:	40000c00 	.word	0x40000c00
 80063a8:	40001800 	.word	0x40001800
 80063ac:	40014000 	.word	0x40014000

080063b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e042      	b.n	8006484 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006404:	2b00      	cmp	r3, #0
 8006406:	d106      	bne.n	8006416 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7fb f8f1 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2224      	movs	r2, #36	; 0x24
 800641a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0201 	bic.w	r2, r2, #1
 800642c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fce0 	bl	8006df4 <UART_SetConfig>
 8006434:	4603      	mov	r3, r0
 8006436:	2b01      	cmp	r3, #1
 8006438:	d101      	bne.n	800643e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e022      	b.n	8006484 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 fb40 	bl	8007acc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800645a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800646a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 fbc7 	bl	8007c10 <UART_CheckIdleState>
 8006482:	4603      	mov	r3, r0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b08a      	sub	sp, #40	; 0x28
 8006490:	af02      	add	r7, sp, #8
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	4613      	mov	r3, r2
 800649a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a2:	2b20      	cmp	r3, #32
 80064a4:	d17b      	bne.n	800659e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <HAL_UART_Transmit+0x26>
 80064ac:	88fb      	ldrh	r3, [r7, #6]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e074      	b.n	80065a0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2221      	movs	r2, #33	; 0x21
 80064c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064c6:	f7fb fbff 	bl	8001cc8 <HAL_GetTick>
 80064ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	88fa      	ldrh	r2, [r7, #6]
 80064d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	88fa      	ldrh	r2, [r7, #6]
 80064d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e4:	d108      	bne.n	80064f8 <HAL_UART_Transmit+0x6c>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d104      	bne.n	80064f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	e003      	b.n	8006500 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006500:	e030      	b.n	8006564 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2200      	movs	r2, #0
 800650a:	2180      	movs	r1, #128	; 0x80
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f001 fc29 	bl	8007d64 <UART_WaitOnFlagUntilTimeout>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d005      	beq.n	8006524 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2220      	movs	r2, #32
 800651c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e03d      	b.n	80065a0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10b      	bne.n	8006542 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006538:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	3302      	adds	r3, #2
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	e007      	b.n	8006552 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	781a      	ldrb	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	3301      	adds	r3, #1
 8006550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800656a:	b29b      	uxth	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1c8      	bne.n	8006502 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2200      	movs	r2, #0
 8006578:	2140      	movs	r1, #64	; 0x40
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f001 fbf2 	bl	8007d64 <UART_WaitOnFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d005      	beq.n	8006592 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2220      	movs	r2, #32
 800658a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e006      	b.n	80065a0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2220      	movs	r2, #32
 8006596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	e000      	b.n	80065a0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800659e:	2302      	movs	r3, #2
  }
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3720      	adds	r7, #32
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08a      	sub	sp, #40	; 0x28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	4613      	mov	r3, r2
 80065b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d137      	bne.n	8006630 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <HAL_UART_Receive_IT+0x24>
 80065c6:	88fb      	ldrh	r3, [r7, #6]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e030      	b.n	8006632 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a18      	ldr	r2, [pc, #96]	; (800663c <HAL_UART_Receive_IT+0x94>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d01f      	beq.n	8006620 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d018      	beq.n	8006620 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	e853 3f00 	ldrex	r3, [r3]
 80065fa:	613b      	str	r3, [r7, #16]
   return(result);
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	461a      	mov	r2, r3
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	623b      	str	r3, [r7, #32]
 800660e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006610:	69f9      	ldr	r1, [r7, #28]
 8006612:	6a3a      	ldr	r2, [r7, #32]
 8006614:	e841 2300 	strex	r3, r2, [r1]
 8006618:	61bb      	str	r3, [r7, #24]
   return(result);
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1e6      	bne.n	80065ee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006620:	88fb      	ldrh	r3, [r7, #6]
 8006622:	461a      	mov	r2, r3
 8006624:	68b9      	ldr	r1, [r7, #8]
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f001 fc04 	bl	8007e34 <UART_Start_Receive_IT>
 800662c:	4603      	mov	r3, r0
 800662e:	e000      	b.n	8006632 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006630:	2302      	movs	r3, #2
  }
}
 8006632:	4618      	mov	r0, r3
 8006634:	3728      	adds	r7, #40	; 0x28
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	58000c00 	.word	0x58000c00

08006640 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b0ba      	sub	sp, #232	; 0xe8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006666:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800666a:	f640 030f 	movw	r3, #2063	; 0x80f
 800666e:	4013      	ands	r3, r2
 8006670:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006678:	2b00      	cmp	r3, #0
 800667a:	d11b      	bne.n	80066b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800667c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006680:	f003 0320 	and.w	r3, r3, #32
 8006684:	2b00      	cmp	r3, #0
 8006686:	d015      	beq.n	80066b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b00      	cmp	r3, #0
 8006692:	d105      	bne.n	80066a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d009      	beq.n	80066b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8377 	beq.w	8006d98 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
      }
      return;
 80066b2:	e371      	b.n	8006d98 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 8123 	beq.w	8006904 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80066be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80066c2:	4b8d      	ldr	r3, [pc, #564]	; (80068f8 <HAL_UART_IRQHandler+0x2b8>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80066ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80066ce:	4b8b      	ldr	r3, [pc, #556]	; (80068fc <HAL_UART_IRQHandler+0x2bc>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 8116 	beq.w	8006904 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d011      	beq.n	8006708 <HAL_UART_IRQHandler+0xc8>
 80066e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2201      	movs	r2, #1
 80066f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fe:	f043 0201 	orr.w	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d011      	beq.n	8006738 <HAL_UART_IRQHandler+0xf8>
 8006714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00b      	beq.n	8006738 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2202      	movs	r2, #2
 8006726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800672e:	f043 0204 	orr.w	r2, r3, #4
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d011      	beq.n	8006768 <HAL_UART_IRQHandler+0x128>
 8006744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00b      	beq.n	8006768 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2204      	movs	r2, #4
 8006756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675e:	f043 0202 	orr.w	r2, r3, #2
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676c:	f003 0308 	and.w	r3, r3, #8
 8006770:	2b00      	cmp	r3, #0
 8006772:	d017      	beq.n	80067a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b00      	cmp	r3, #0
 800677e:	d105      	bne.n	800678c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006780:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006784:	4b5c      	ldr	r3, [pc, #368]	; (80068f8 <HAL_UART_IRQHandler+0x2b8>)
 8006786:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2208      	movs	r2, #8
 8006792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679a:	f043 0208 	orr.w	r2, r3, #8
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d012      	beq.n	80067d6 <HAL_UART_IRQHandler+0x196>
 80067b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00c      	beq.n	80067d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067cc:	f043 0220 	orr.w	r2, r3, #32
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 82dd 	beq.w	8006d9c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d013      	beq.n	8006816 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d105      	bne.n	8006806 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d007      	beq.n	8006816 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682a:	2b40      	cmp	r3, #64	; 0x40
 800682c:	d005      	beq.n	800683a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800682e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006832:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006836:	2b00      	cmp	r3, #0
 8006838:	d054      	beq.n	80068e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f001 fc1c 	bl	8008078 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684a:	2b40      	cmp	r3, #64	; 0x40
 800684c:	d146      	bne.n	80068dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3308      	adds	r3, #8
 8006854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006864:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800686c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3308      	adds	r3, #8
 8006876:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800687a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800687e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006886:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1d9      	bne.n	800684e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d017      	beq.n	80068d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068aa:	4a15      	ldr	r2, [pc, #84]	; (8006900 <HAL_UART_IRQHandler+0x2c0>)
 80068ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fb fe65 	bl	8002584 <HAL_DMA_Abort_IT>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d019      	beq.n	80068f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80068ce:	4610      	mov	r0, r2
 80068d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d2:	e00f      	b.n	80068f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fa77 	bl	8006dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068da:	e00b      	b.n	80068f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fa73 	bl	8006dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e2:	e007      	b.n	80068f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fa6f 	bl	8006dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80068f2:	e253      	b.n	8006d9c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f4:	bf00      	nop
    return;
 80068f6:	e251      	b.n	8006d9c <HAL_UART_IRQHandler+0x75c>
 80068f8:	10000001 	.word	0x10000001
 80068fc:	04000120 	.word	0x04000120
 8006900:	08008145 	.word	0x08008145

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006908:	2b01      	cmp	r3, #1
 800690a:	f040 81e7 	bne.w	8006cdc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800690e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006912:	f003 0310 	and.w	r3, r3, #16
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 81e0 	beq.w	8006cdc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800691c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006920:	f003 0310 	and.w	r3, r3, #16
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 81d9 	beq.w	8006cdc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2210      	movs	r2, #16
 8006930:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693c:	2b40      	cmp	r3, #64	; 0x40
 800693e:	f040 8151 	bne.w	8006be4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a96      	ldr	r2, [pc, #600]	; (8006ba4 <HAL_UART_IRQHandler+0x564>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d068      	beq.n	8006a22 <HAL_UART_IRQHandler+0x3e2>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a93      	ldr	r2, [pc, #588]	; (8006ba8 <HAL_UART_IRQHandler+0x568>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d061      	beq.n	8006a22 <HAL_UART_IRQHandler+0x3e2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a91      	ldr	r2, [pc, #580]	; (8006bac <HAL_UART_IRQHandler+0x56c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d05a      	beq.n	8006a22 <HAL_UART_IRQHandler+0x3e2>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a8e      	ldr	r2, [pc, #568]	; (8006bb0 <HAL_UART_IRQHandler+0x570>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d053      	beq.n	8006a22 <HAL_UART_IRQHandler+0x3e2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a8c      	ldr	r2, [pc, #560]	; (8006bb4 <HAL_UART_IRQHandler+0x574>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d04c      	beq.n	8006a22 <HAL_UART_IRQHandler+0x3e2>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a89      	ldr	r2, [pc, #548]	; (8006bb8 <HAL_UART_IRQHandler+0x578>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d045      	beq.n	8006a22 <HAL_UART_IRQHandler+0x3e2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a87      	ldr	r2, [pc, #540]	; (8006bbc <HAL_UART_IRQHandler+0x57c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d03e      	beq.n	8006a22 <HAL_UART_IRQHandler+0x3e2>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a84      	ldr	r2, [pc, #528]	; (8006bc0 <HAL_UART_IRQHandler+0x580>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d037      	beq.n	8006a22 <HAL_UART_IRQHandler+0x3e2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a82      	ldr	r2, [pc, #520]	; (8006bc4 <HAL_UART_IRQHandler+0x584>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d030      	beq.n	8006a22 <HAL_UART_IRQHandler+0x3e2>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a7f      	ldr	r2, [pc, #508]	; (8006bc8 <HAL_UART_IRQHandler+0x588>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d029      	beq.n	8006a22 <HAL_UART_IRQHandler+0x3e2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a7d      	ldr	r2, [pc, #500]	; (8006bcc <HAL_UART_IRQHandler+0x58c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d022      	beq.n	8006a22 <HAL_UART_IRQHandler+0x3e2>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a7a      	ldr	r2, [pc, #488]	; (8006bd0 <HAL_UART_IRQHandler+0x590>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d01b      	beq.n	8006a22 <HAL_UART_IRQHandler+0x3e2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a78      	ldr	r2, [pc, #480]	; (8006bd4 <HAL_UART_IRQHandler+0x594>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d014      	beq.n	8006a22 <HAL_UART_IRQHandler+0x3e2>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a75      	ldr	r2, [pc, #468]	; (8006bd8 <HAL_UART_IRQHandler+0x598>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00d      	beq.n	8006a22 <HAL_UART_IRQHandler+0x3e2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a73      	ldr	r2, [pc, #460]	; (8006bdc <HAL_UART_IRQHandler+0x59c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d006      	beq.n	8006a22 <HAL_UART_IRQHandler+0x3e2>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a70      	ldr	r2, [pc, #448]	; (8006be0 <HAL_UART_IRQHandler+0x5a0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d106      	bne.n	8006a30 <HAL_UART_IRQHandler+0x3f0>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	e005      	b.n	8006a3c <HAL_UART_IRQHandler+0x3fc>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 81ab 	beq.w	8006da0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a54:	429a      	cmp	r2, r3
 8006a56:	f080 81a3 	bcs.w	8006da0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a70:	f000 8087 	beq.w	8006b82 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006aa2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006aaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1da      	bne.n	8006a74 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ad0:	f023 0301 	bic.w	r3, r3, #1
 8006ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ae2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ae6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006aea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1e1      	bne.n	8006abe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3308      	adds	r3, #8
 8006b00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3308      	adds	r3, #8
 8006b1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e3      	bne.n	8006afa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b50:	f023 0310 	bic.w	r3, r3, #16
 8006b54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b62:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e4      	bne.n	8006b40 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fb f9e3 	bl	8001f48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2202      	movs	r2, #2
 8006b86:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f91d 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ba2:	e0fd      	b.n	8006da0 <HAL_UART_IRQHandler+0x760>
 8006ba4:	40020010 	.word	0x40020010
 8006ba8:	40020028 	.word	0x40020028
 8006bac:	40020040 	.word	0x40020040
 8006bb0:	40020058 	.word	0x40020058
 8006bb4:	40020070 	.word	0x40020070
 8006bb8:	40020088 	.word	0x40020088
 8006bbc:	400200a0 	.word	0x400200a0
 8006bc0:	400200b8 	.word	0x400200b8
 8006bc4:	40020410 	.word	0x40020410
 8006bc8:	40020428 	.word	0x40020428
 8006bcc:	40020440 	.word	0x40020440
 8006bd0:	40020458 	.word	0x40020458
 8006bd4:	40020470 	.word	0x40020470
 8006bd8:	40020488 	.word	0x40020488
 8006bdc:	400204a0 	.word	0x400204a0
 8006be0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 80cf 	beq.w	8006da4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006c06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 80ca 	beq.w	8006da4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	e853 3f00 	ldrex	r3, [r3]
 8006c1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c32:	647b      	str	r3, [r7, #68]	; 0x44
 8006c34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e4      	bne.n	8006c10 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	623b      	str	r3, [r7, #32]
   return(result);
 8006c56:	6a3a      	ldr	r2, [r7, #32]
 8006c58:	4b55      	ldr	r3, [pc, #340]	; (8006db0 <HAL_UART_IRQHandler+0x770>)
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3308      	adds	r3, #8
 8006c66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c6a:	633a      	str	r2, [r7, #48]	; 0x30
 8006c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e3      	bne.n	8006c46 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f023 0310 	bic.w	r3, r3, #16
 8006ca6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cb4:	61fb      	str	r3, [r7, #28]
 8006cb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	69b9      	ldr	r1, [r7, #24]
 8006cba:	69fa      	ldr	r2, [r7, #28]
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	617b      	str	r3, [r7, #20]
   return(result);
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e4      	bne.n	8006c92 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f881 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cda:	e063      	b.n	8006da4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00e      	beq.n	8006d06 <HAL_UART_IRQHandler+0x6c6>
 8006ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d008      	beq.n	8006d06 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006cfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 ff7e 	bl	8008c00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d04:	e051      	b.n	8006daa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d014      	beq.n	8006d3c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d105      	bne.n	8006d2a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d008      	beq.n	8006d3c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d03a      	beq.n	8006da8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
    }
    return;
 8006d3a:	e035      	b.n	8006da8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d009      	beq.n	8006d5c <HAL_UART_IRQHandler+0x71c>
 8006d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f001 fa0b 	bl	8008170 <UART_EndTransmit_IT>
    return;
 8006d5a:	e026      	b.n	8006daa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d009      	beq.n	8006d7c <HAL_UART_IRQHandler+0x73c>
 8006d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 ff57 	bl	8008c28 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d7a:	e016      	b.n	8006daa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d010      	beq.n	8006daa <HAL_UART_IRQHandler+0x76a>
 8006d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	da0c      	bge.n	8006daa <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 ff3f 	bl	8008c14 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d96:	e008      	b.n	8006daa <HAL_UART_IRQHandler+0x76a>
      return;
 8006d98:	bf00      	nop
 8006d9a:	e006      	b.n	8006daa <HAL_UART_IRQHandler+0x76a>
    return;
 8006d9c:	bf00      	nop
 8006d9e:	e004      	b.n	8006daa <HAL_UART_IRQHandler+0x76a>
      return;
 8006da0:	bf00      	nop
 8006da2:	e002      	b.n	8006daa <HAL_UART_IRQHandler+0x76a>
      return;
 8006da4:	bf00      	nop
 8006da6:	e000      	b.n	8006daa <HAL_UART_IRQHandler+0x76a>
    return;
 8006da8:	bf00      	nop
  }
}
 8006daa:	37e8      	adds	r7, #232	; 0xe8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	effffffe 	.word	0xeffffffe

08006db4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006df8:	b092      	sub	sp, #72	; 0x48
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	431a      	orrs	r2, r3
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	4bbe      	ldr	r3, [pc, #760]	; (800711c <UART_SetConfig+0x328>)
 8006e24:	4013      	ands	r3, r2
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	6812      	ldr	r2, [r2, #0]
 8006e2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4ab3      	ldr	r2, [pc, #716]	; (8007120 <UART_SetConfig+0x32c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	4baf      	ldr	r3, [pc, #700]	; (8007124 <UART_SetConfig+0x330>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	6812      	ldr	r2, [r2, #0]
 8006e6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e70:	430b      	orrs	r3, r1
 8006e72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	f023 010f 	bic.w	r1, r3, #15
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4aa6      	ldr	r2, [pc, #664]	; (8007128 <UART_SetConfig+0x334>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d177      	bne.n	8006f84 <UART_SetConfig+0x190>
 8006e94:	4ba5      	ldr	r3, [pc, #660]	; (800712c <UART_SetConfig+0x338>)
 8006e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e9c:	2b28      	cmp	r3, #40	; 0x28
 8006e9e:	d86d      	bhi.n	8006f7c <UART_SetConfig+0x188>
 8006ea0:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <UART_SetConfig+0xb4>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006f4d 	.word	0x08006f4d
 8006eac:	08006f7d 	.word	0x08006f7d
 8006eb0:	08006f7d 	.word	0x08006f7d
 8006eb4:	08006f7d 	.word	0x08006f7d
 8006eb8:	08006f7d 	.word	0x08006f7d
 8006ebc:	08006f7d 	.word	0x08006f7d
 8006ec0:	08006f7d 	.word	0x08006f7d
 8006ec4:	08006f7d 	.word	0x08006f7d
 8006ec8:	08006f55 	.word	0x08006f55
 8006ecc:	08006f7d 	.word	0x08006f7d
 8006ed0:	08006f7d 	.word	0x08006f7d
 8006ed4:	08006f7d 	.word	0x08006f7d
 8006ed8:	08006f7d 	.word	0x08006f7d
 8006edc:	08006f7d 	.word	0x08006f7d
 8006ee0:	08006f7d 	.word	0x08006f7d
 8006ee4:	08006f7d 	.word	0x08006f7d
 8006ee8:	08006f5d 	.word	0x08006f5d
 8006eec:	08006f7d 	.word	0x08006f7d
 8006ef0:	08006f7d 	.word	0x08006f7d
 8006ef4:	08006f7d 	.word	0x08006f7d
 8006ef8:	08006f7d 	.word	0x08006f7d
 8006efc:	08006f7d 	.word	0x08006f7d
 8006f00:	08006f7d 	.word	0x08006f7d
 8006f04:	08006f7d 	.word	0x08006f7d
 8006f08:	08006f65 	.word	0x08006f65
 8006f0c:	08006f7d 	.word	0x08006f7d
 8006f10:	08006f7d 	.word	0x08006f7d
 8006f14:	08006f7d 	.word	0x08006f7d
 8006f18:	08006f7d 	.word	0x08006f7d
 8006f1c:	08006f7d 	.word	0x08006f7d
 8006f20:	08006f7d 	.word	0x08006f7d
 8006f24:	08006f7d 	.word	0x08006f7d
 8006f28:	08006f6d 	.word	0x08006f6d
 8006f2c:	08006f7d 	.word	0x08006f7d
 8006f30:	08006f7d 	.word	0x08006f7d
 8006f34:	08006f7d 	.word	0x08006f7d
 8006f38:	08006f7d 	.word	0x08006f7d
 8006f3c:	08006f7d 	.word	0x08006f7d
 8006f40:	08006f7d 	.word	0x08006f7d
 8006f44:	08006f7d 	.word	0x08006f7d
 8006f48:	08006f75 	.word	0x08006f75
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f52:	e326      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8006f54:	2304      	movs	r3, #4
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f5a:	e322      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8006f5c:	2308      	movs	r3, #8
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f62:	e31e      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8006f64:	2310      	movs	r3, #16
 8006f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f6a:	e31a      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8006f6c:	2320      	movs	r3, #32
 8006f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f72:	e316      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8006f74:	2340      	movs	r3, #64	; 0x40
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7a:	e312      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8006f7c:	2380      	movs	r3, #128	; 0x80
 8006f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f82:	e30e      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a69      	ldr	r2, [pc, #420]	; (8007130 <UART_SetConfig+0x33c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d130      	bne.n	8006ff0 <UART_SetConfig+0x1fc>
 8006f8e:	4b67      	ldr	r3, [pc, #412]	; (800712c <UART_SetConfig+0x338>)
 8006f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	2b05      	cmp	r3, #5
 8006f98:	d826      	bhi.n	8006fe8 <UART_SetConfig+0x1f4>
 8006f9a:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <UART_SetConfig+0x1ac>)
 8006f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa0:	08006fb9 	.word	0x08006fb9
 8006fa4:	08006fc1 	.word	0x08006fc1
 8006fa8:	08006fc9 	.word	0x08006fc9
 8006fac:	08006fd1 	.word	0x08006fd1
 8006fb0:	08006fd9 	.word	0x08006fd9
 8006fb4:	08006fe1 	.word	0x08006fe1
 8006fb8:	2300      	movs	r3, #0
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fbe:	e2f0      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8006fc0:	2304      	movs	r3, #4
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc6:	e2ec      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8006fc8:	2308      	movs	r3, #8
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fce:	e2e8      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8006fd0:	2310      	movs	r3, #16
 8006fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd6:	e2e4      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8006fd8:	2320      	movs	r3, #32
 8006fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fde:	e2e0      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8006fe0:	2340      	movs	r3, #64	; 0x40
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe6:	e2dc      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8006fe8:	2380      	movs	r3, #128	; 0x80
 8006fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fee:	e2d8      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a4f      	ldr	r2, [pc, #316]	; (8007134 <UART_SetConfig+0x340>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d130      	bne.n	800705c <UART_SetConfig+0x268>
 8006ffa:	4b4c      	ldr	r3, [pc, #304]	; (800712c <UART_SetConfig+0x338>)
 8006ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffe:	f003 0307 	and.w	r3, r3, #7
 8007002:	2b05      	cmp	r3, #5
 8007004:	d826      	bhi.n	8007054 <UART_SetConfig+0x260>
 8007006:	a201      	add	r2, pc, #4	; (adr r2, 800700c <UART_SetConfig+0x218>)
 8007008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700c:	08007025 	.word	0x08007025
 8007010:	0800702d 	.word	0x0800702d
 8007014:	08007035 	.word	0x08007035
 8007018:	0800703d 	.word	0x0800703d
 800701c:	08007045 	.word	0x08007045
 8007020:	0800704d 	.word	0x0800704d
 8007024:	2300      	movs	r3, #0
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702a:	e2ba      	b.n	80075a2 <UART_SetConfig+0x7ae>
 800702c:	2304      	movs	r3, #4
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007032:	e2b6      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007034:	2308      	movs	r3, #8
 8007036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703a:	e2b2      	b.n	80075a2 <UART_SetConfig+0x7ae>
 800703c:	2310      	movs	r3, #16
 800703e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007042:	e2ae      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007044:	2320      	movs	r3, #32
 8007046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800704a:	e2aa      	b.n	80075a2 <UART_SetConfig+0x7ae>
 800704c:	2340      	movs	r3, #64	; 0x40
 800704e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007052:	e2a6      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007054:	2380      	movs	r3, #128	; 0x80
 8007056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705a:	e2a2      	b.n	80075a2 <UART_SetConfig+0x7ae>
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a35      	ldr	r2, [pc, #212]	; (8007138 <UART_SetConfig+0x344>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d130      	bne.n	80070c8 <UART_SetConfig+0x2d4>
 8007066:	4b31      	ldr	r3, [pc, #196]	; (800712c <UART_SetConfig+0x338>)
 8007068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706a:	f003 0307 	and.w	r3, r3, #7
 800706e:	2b05      	cmp	r3, #5
 8007070:	d826      	bhi.n	80070c0 <UART_SetConfig+0x2cc>
 8007072:	a201      	add	r2, pc, #4	; (adr r2, 8007078 <UART_SetConfig+0x284>)
 8007074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007078:	08007091 	.word	0x08007091
 800707c:	08007099 	.word	0x08007099
 8007080:	080070a1 	.word	0x080070a1
 8007084:	080070a9 	.word	0x080070a9
 8007088:	080070b1 	.word	0x080070b1
 800708c:	080070b9 	.word	0x080070b9
 8007090:	2300      	movs	r3, #0
 8007092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007096:	e284      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007098:	2304      	movs	r3, #4
 800709a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709e:	e280      	b.n	80075a2 <UART_SetConfig+0x7ae>
 80070a0:	2308      	movs	r3, #8
 80070a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a6:	e27c      	b.n	80075a2 <UART_SetConfig+0x7ae>
 80070a8:	2310      	movs	r3, #16
 80070aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ae:	e278      	b.n	80075a2 <UART_SetConfig+0x7ae>
 80070b0:	2320      	movs	r3, #32
 80070b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070b6:	e274      	b.n	80075a2 <UART_SetConfig+0x7ae>
 80070b8:	2340      	movs	r3, #64	; 0x40
 80070ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070be:	e270      	b.n	80075a2 <UART_SetConfig+0x7ae>
 80070c0:	2380      	movs	r3, #128	; 0x80
 80070c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070c6:	e26c      	b.n	80075a2 <UART_SetConfig+0x7ae>
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a1b      	ldr	r2, [pc, #108]	; (800713c <UART_SetConfig+0x348>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d142      	bne.n	8007158 <UART_SetConfig+0x364>
 80070d2:	4b16      	ldr	r3, [pc, #88]	; (800712c <UART_SetConfig+0x338>)
 80070d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	2b05      	cmp	r3, #5
 80070dc:	d838      	bhi.n	8007150 <UART_SetConfig+0x35c>
 80070de:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <UART_SetConfig+0x2f0>)
 80070e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e4:	080070fd 	.word	0x080070fd
 80070e8:	08007105 	.word	0x08007105
 80070ec:	0800710d 	.word	0x0800710d
 80070f0:	08007115 	.word	0x08007115
 80070f4:	08007141 	.word	0x08007141
 80070f8:	08007149 	.word	0x08007149
 80070fc:	2300      	movs	r3, #0
 80070fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007102:	e24e      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007104:	2304      	movs	r3, #4
 8007106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800710a:	e24a      	b.n	80075a2 <UART_SetConfig+0x7ae>
 800710c:	2308      	movs	r3, #8
 800710e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007112:	e246      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007114:	2310      	movs	r3, #16
 8007116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800711a:	e242      	b.n	80075a2 <UART_SetConfig+0x7ae>
 800711c:	cfff69f3 	.word	0xcfff69f3
 8007120:	58000c00 	.word	0x58000c00
 8007124:	11fff4ff 	.word	0x11fff4ff
 8007128:	40011000 	.word	0x40011000
 800712c:	58024400 	.word	0x58024400
 8007130:	40004400 	.word	0x40004400
 8007134:	40004800 	.word	0x40004800
 8007138:	40004c00 	.word	0x40004c00
 800713c:	40005000 	.word	0x40005000
 8007140:	2320      	movs	r3, #32
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007146:	e22c      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007148:	2340      	movs	r3, #64	; 0x40
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714e:	e228      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007150:	2380      	movs	r3, #128	; 0x80
 8007152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007156:	e224      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4ab1      	ldr	r2, [pc, #708]	; (8007424 <UART_SetConfig+0x630>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d176      	bne.n	8007250 <UART_SetConfig+0x45c>
 8007162:	4bb1      	ldr	r3, [pc, #708]	; (8007428 <UART_SetConfig+0x634>)
 8007164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800716a:	2b28      	cmp	r3, #40	; 0x28
 800716c:	d86c      	bhi.n	8007248 <UART_SetConfig+0x454>
 800716e:	a201      	add	r2, pc, #4	; (adr r2, 8007174 <UART_SetConfig+0x380>)
 8007170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007174:	08007219 	.word	0x08007219
 8007178:	08007249 	.word	0x08007249
 800717c:	08007249 	.word	0x08007249
 8007180:	08007249 	.word	0x08007249
 8007184:	08007249 	.word	0x08007249
 8007188:	08007249 	.word	0x08007249
 800718c:	08007249 	.word	0x08007249
 8007190:	08007249 	.word	0x08007249
 8007194:	08007221 	.word	0x08007221
 8007198:	08007249 	.word	0x08007249
 800719c:	08007249 	.word	0x08007249
 80071a0:	08007249 	.word	0x08007249
 80071a4:	08007249 	.word	0x08007249
 80071a8:	08007249 	.word	0x08007249
 80071ac:	08007249 	.word	0x08007249
 80071b0:	08007249 	.word	0x08007249
 80071b4:	08007229 	.word	0x08007229
 80071b8:	08007249 	.word	0x08007249
 80071bc:	08007249 	.word	0x08007249
 80071c0:	08007249 	.word	0x08007249
 80071c4:	08007249 	.word	0x08007249
 80071c8:	08007249 	.word	0x08007249
 80071cc:	08007249 	.word	0x08007249
 80071d0:	08007249 	.word	0x08007249
 80071d4:	08007231 	.word	0x08007231
 80071d8:	08007249 	.word	0x08007249
 80071dc:	08007249 	.word	0x08007249
 80071e0:	08007249 	.word	0x08007249
 80071e4:	08007249 	.word	0x08007249
 80071e8:	08007249 	.word	0x08007249
 80071ec:	08007249 	.word	0x08007249
 80071f0:	08007249 	.word	0x08007249
 80071f4:	08007239 	.word	0x08007239
 80071f8:	08007249 	.word	0x08007249
 80071fc:	08007249 	.word	0x08007249
 8007200:	08007249 	.word	0x08007249
 8007204:	08007249 	.word	0x08007249
 8007208:	08007249 	.word	0x08007249
 800720c:	08007249 	.word	0x08007249
 8007210:	08007249 	.word	0x08007249
 8007214:	08007241 	.word	0x08007241
 8007218:	2301      	movs	r3, #1
 800721a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800721e:	e1c0      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007220:	2304      	movs	r3, #4
 8007222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007226:	e1bc      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007228:	2308      	movs	r3, #8
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722e:	e1b8      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007230:	2310      	movs	r3, #16
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007236:	e1b4      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007238:	2320      	movs	r3, #32
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723e:	e1b0      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007240:	2340      	movs	r3, #64	; 0x40
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007246:	e1ac      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007248:	2380      	movs	r3, #128	; 0x80
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724e:	e1a8      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a75      	ldr	r2, [pc, #468]	; (800742c <UART_SetConfig+0x638>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d130      	bne.n	80072bc <UART_SetConfig+0x4c8>
 800725a:	4b73      	ldr	r3, [pc, #460]	; (8007428 <UART_SetConfig+0x634>)
 800725c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	2b05      	cmp	r3, #5
 8007264:	d826      	bhi.n	80072b4 <UART_SetConfig+0x4c0>
 8007266:	a201      	add	r2, pc, #4	; (adr r2, 800726c <UART_SetConfig+0x478>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	08007285 	.word	0x08007285
 8007270:	0800728d 	.word	0x0800728d
 8007274:	08007295 	.word	0x08007295
 8007278:	0800729d 	.word	0x0800729d
 800727c:	080072a5 	.word	0x080072a5
 8007280:	080072ad 	.word	0x080072ad
 8007284:	2300      	movs	r3, #0
 8007286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800728a:	e18a      	b.n	80075a2 <UART_SetConfig+0x7ae>
 800728c:	2304      	movs	r3, #4
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007292:	e186      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007294:	2308      	movs	r3, #8
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800729a:	e182      	b.n	80075a2 <UART_SetConfig+0x7ae>
 800729c:	2310      	movs	r3, #16
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072a2:	e17e      	b.n	80075a2 <UART_SetConfig+0x7ae>
 80072a4:	2320      	movs	r3, #32
 80072a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072aa:	e17a      	b.n	80075a2 <UART_SetConfig+0x7ae>
 80072ac:	2340      	movs	r3, #64	; 0x40
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b2:	e176      	b.n	80075a2 <UART_SetConfig+0x7ae>
 80072b4:	2380      	movs	r3, #128	; 0x80
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ba:	e172      	b.n	80075a2 <UART_SetConfig+0x7ae>
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a5b      	ldr	r2, [pc, #364]	; (8007430 <UART_SetConfig+0x63c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d130      	bne.n	8007328 <UART_SetConfig+0x534>
 80072c6:	4b58      	ldr	r3, [pc, #352]	; (8007428 <UART_SetConfig+0x634>)
 80072c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ca:	f003 0307 	and.w	r3, r3, #7
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	d826      	bhi.n	8007320 <UART_SetConfig+0x52c>
 80072d2:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <UART_SetConfig+0x4e4>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	080072f1 	.word	0x080072f1
 80072dc:	080072f9 	.word	0x080072f9
 80072e0:	08007301 	.word	0x08007301
 80072e4:	08007309 	.word	0x08007309
 80072e8:	08007311 	.word	0x08007311
 80072ec:	08007319 	.word	0x08007319
 80072f0:	2300      	movs	r3, #0
 80072f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072f6:	e154      	b.n	80075a2 <UART_SetConfig+0x7ae>
 80072f8:	2304      	movs	r3, #4
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072fe:	e150      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007300:	2308      	movs	r3, #8
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007306:	e14c      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007308:	2310      	movs	r3, #16
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730e:	e148      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007310:	2320      	movs	r3, #32
 8007312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007316:	e144      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007318:	2340      	movs	r3, #64	; 0x40
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731e:	e140      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007320:	2380      	movs	r3, #128	; 0x80
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007326:	e13c      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a41      	ldr	r2, [pc, #260]	; (8007434 <UART_SetConfig+0x640>)
 800732e:	4293      	cmp	r3, r2
 8007330:	f040 8082 	bne.w	8007438 <UART_SetConfig+0x644>
 8007334:	4b3c      	ldr	r3, [pc, #240]	; (8007428 <UART_SetConfig+0x634>)
 8007336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007338:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800733c:	2b28      	cmp	r3, #40	; 0x28
 800733e:	d86d      	bhi.n	800741c <UART_SetConfig+0x628>
 8007340:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <UART_SetConfig+0x554>)
 8007342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007346:	bf00      	nop
 8007348:	080073ed 	.word	0x080073ed
 800734c:	0800741d 	.word	0x0800741d
 8007350:	0800741d 	.word	0x0800741d
 8007354:	0800741d 	.word	0x0800741d
 8007358:	0800741d 	.word	0x0800741d
 800735c:	0800741d 	.word	0x0800741d
 8007360:	0800741d 	.word	0x0800741d
 8007364:	0800741d 	.word	0x0800741d
 8007368:	080073f5 	.word	0x080073f5
 800736c:	0800741d 	.word	0x0800741d
 8007370:	0800741d 	.word	0x0800741d
 8007374:	0800741d 	.word	0x0800741d
 8007378:	0800741d 	.word	0x0800741d
 800737c:	0800741d 	.word	0x0800741d
 8007380:	0800741d 	.word	0x0800741d
 8007384:	0800741d 	.word	0x0800741d
 8007388:	080073fd 	.word	0x080073fd
 800738c:	0800741d 	.word	0x0800741d
 8007390:	0800741d 	.word	0x0800741d
 8007394:	0800741d 	.word	0x0800741d
 8007398:	0800741d 	.word	0x0800741d
 800739c:	0800741d 	.word	0x0800741d
 80073a0:	0800741d 	.word	0x0800741d
 80073a4:	0800741d 	.word	0x0800741d
 80073a8:	08007405 	.word	0x08007405
 80073ac:	0800741d 	.word	0x0800741d
 80073b0:	0800741d 	.word	0x0800741d
 80073b4:	0800741d 	.word	0x0800741d
 80073b8:	0800741d 	.word	0x0800741d
 80073bc:	0800741d 	.word	0x0800741d
 80073c0:	0800741d 	.word	0x0800741d
 80073c4:	0800741d 	.word	0x0800741d
 80073c8:	0800740d 	.word	0x0800740d
 80073cc:	0800741d 	.word	0x0800741d
 80073d0:	0800741d 	.word	0x0800741d
 80073d4:	0800741d 	.word	0x0800741d
 80073d8:	0800741d 	.word	0x0800741d
 80073dc:	0800741d 	.word	0x0800741d
 80073e0:	0800741d 	.word	0x0800741d
 80073e4:	0800741d 	.word	0x0800741d
 80073e8:	08007415 	.word	0x08007415
 80073ec:	2301      	movs	r3, #1
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073f2:	e0d6      	b.n	80075a2 <UART_SetConfig+0x7ae>
 80073f4:	2304      	movs	r3, #4
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073fa:	e0d2      	b.n	80075a2 <UART_SetConfig+0x7ae>
 80073fc:	2308      	movs	r3, #8
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007402:	e0ce      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007404:	2310      	movs	r3, #16
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740a:	e0ca      	b.n	80075a2 <UART_SetConfig+0x7ae>
 800740c:	2320      	movs	r3, #32
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007412:	e0c6      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007414:	2340      	movs	r3, #64	; 0x40
 8007416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800741a:	e0c2      	b.n	80075a2 <UART_SetConfig+0x7ae>
 800741c:	2380      	movs	r3, #128	; 0x80
 800741e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007422:	e0be      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007424:	40011400 	.word	0x40011400
 8007428:	58024400 	.word	0x58024400
 800742c:	40007800 	.word	0x40007800
 8007430:	40007c00 	.word	0x40007c00
 8007434:	40011800 	.word	0x40011800
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4aad      	ldr	r2, [pc, #692]	; (80076f4 <UART_SetConfig+0x900>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d176      	bne.n	8007530 <UART_SetConfig+0x73c>
 8007442:	4bad      	ldr	r3, [pc, #692]	; (80076f8 <UART_SetConfig+0x904>)
 8007444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007446:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800744a:	2b28      	cmp	r3, #40	; 0x28
 800744c:	d86c      	bhi.n	8007528 <UART_SetConfig+0x734>
 800744e:	a201      	add	r2, pc, #4	; (adr r2, 8007454 <UART_SetConfig+0x660>)
 8007450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007454:	080074f9 	.word	0x080074f9
 8007458:	08007529 	.word	0x08007529
 800745c:	08007529 	.word	0x08007529
 8007460:	08007529 	.word	0x08007529
 8007464:	08007529 	.word	0x08007529
 8007468:	08007529 	.word	0x08007529
 800746c:	08007529 	.word	0x08007529
 8007470:	08007529 	.word	0x08007529
 8007474:	08007501 	.word	0x08007501
 8007478:	08007529 	.word	0x08007529
 800747c:	08007529 	.word	0x08007529
 8007480:	08007529 	.word	0x08007529
 8007484:	08007529 	.word	0x08007529
 8007488:	08007529 	.word	0x08007529
 800748c:	08007529 	.word	0x08007529
 8007490:	08007529 	.word	0x08007529
 8007494:	08007509 	.word	0x08007509
 8007498:	08007529 	.word	0x08007529
 800749c:	08007529 	.word	0x08007529
 80074a0:	08007529 	.word	0x08007529
 80074a4:	08007529 	.word	0x08007529
 80074a8:	08007529 	.word	0x08007529
 80074ac:	08007529 	.word	0x08007529
 80074b0:	08007529 	.word	0x08007529
 80074b4:	08007511 	.word	0x08007511
 80074b8:	08007529 	.word	0x08007529
 80074bc:	08007529 	.word	0x08007529
 80074c0:	08007529 	.word	0x08007529
 80074c4:	08007529 	.word	0x08007529
 80074c8:	08007529 	.word	0x08007529
 80074cc:	08007529 	.word	0x08007529
 80074d0:	08007529 	.word	0x08007529
 80074d4:	08007519 	.word	0x08007519
 80074d8:	08007529 	.word	0x08007529
 80074dc:	08007529 	.word	0x08007529
 80074e0:	08007529 	.word	0x08007529
 80074e4:	08007529 	.word	0x08007529
 80074e8:	08007529 	.word	0x08007529
 80074ec:	08007529 	.word	0x08007529
 80074f0:	08007529 	.word	0x08007529
 80074f4:	08007521 	.word	0x08007521
 80074f8:	2301      	movs	r3, #1
 80074fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074fe:	e050      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007500:	2304      	movs	r3, #4
 8007502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007506:	e04c      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007508:	2308      	movs	r3, #8
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750e:	e048      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007510:	2310      	movs	r3, #16
 8007512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007516:	e044      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007518:	2320      	movs	r3, #32
 800751a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751e:	e040      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007520:	2340      	movs	r3, #64	; 0x40
 8007522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007526:	e03c      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007528:	2380      	movs	r3, #128	; 0x80
 800752a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752e:	e038      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a71      	ldr	r2, [pc, #452]	; (80076fc <UART_SetConfig+0x908>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d130      	bne.n	800759c <UART_SetConfig+0x7a8>
 800753a:	4b6f      	ldr	r3, [pc, #444]	; (80076f8 <UART_SetConfig+0x904>)
 800753c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	2b05      	cmp	r3, #5
 8007544:	d826      	bhi.n	8007594 <UART_SetConfig+0x7a0>
 8007546:	a201      	add	r2, pc, #4	; (adr r2, 800754c <UART_SetConfig+0x758>)
 8007548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754c:	08007565 	.word	0x08007565
 8007550:	0800756d 	.word	0x0800756d
 8007554:	08007575 	.word	0x08007575
 8007558:	0800757d 	.word	0x0800757d
 800755c:	08007585 	.word	0x08007585
 8007560:	0800758d 	.word	0x0800758d
 8007564:	2302      	movs	r3, #2
 8007566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800756a:	e01a      	b.n	80075a2 <UART_SetConfig+0x7ae>
 800756c:	2304      	movs	r3, #4
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007572:	e016      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007574:	2308      	movs	r3, #8
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757a:	e012      	b.n	80075a2 <UART_SetConfig+0x7ae>
 800757c:	2310      	movs	r3, #16
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007582:	e00e      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007584:	2320      	movs	r3, #32
 8007586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800758a:	e00a      	b.n	80075a2 <UART_SetConfig+0x7ae>
 800758c:	2340      	movs	r3, #64	; 0x40
 800758e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007592:	e006      	b.n	80075a2 <UART_SetConfig+0x7ae>
 8007594:	2380      	movs	r3, #128	; 0x80
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800759a:	e002      	b.n	80075a2 <UART_SetConfig+0x7ae>
 800759c:	2380      	movs	r3, #128	; 0x80
 800759e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a55      	ldr	r2, [pc, #340]	; (80076fc <UART_SetConfig+0x908>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	f040 80f8 	bne.w	800779e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80075b2:	2b20      	cmp	r3, #32
 80075b4:	dc46      	bgt.n	8007644 <UART_SetConfig+0x850>
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	db75      	blt.n	80076a6 <UART_SetConfig+0x8b2>
 80075ba:	3b02      	subs	r3, #2
 80075bc:	2b1e      	cmp	r3, #30
 80075be:	d872      	bhi.n	80076a6 <UART_SetConfig+0x8b2>
 80075c0:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <UART_SetConfig+0x7d4>)
 80075c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c6:	bf00      	nop
 80075c8:	0800764b 	.word	0x0800764b
 80075cc:	080076a7 	.word	0x080076a7
 80075d0:	08007653 	.word	0x08007653
 80075d4:	080076a7 	.word	0x080076a7
 80075d8:	080076a7 	.word	0x080076a7
 80075dc:	080076a7 	.word	0x080076a7
 80075e0:	08007663 	.word	0x08007663
 80075e4:	080076a7 	.word	0x080076a7
 80075e8:	080076a7 	.word	0x080076a7
 80075ec:	080076a7 	.word	0x080076a7
 80075f0:	080076a7 	.word	0x080076a7
 80075f4:	080076a7 	.word	0x080076a7
 80075f8:	080076a7 	.word	0x080076a7
 80075fc:	080076a7 	.word	0x080076a7
 8007600:	08007673 	.word	0x08007673
 8007604:	080076a7 	.word	0x080076a7
 8007608:	080076a7 	.word	0x080076a7
 800760c:	080076a7 	.word	0x080076a7
 8007610:	080076a7 	.word	0x080076a7
 8007614:	080076a7 	.word	0x080076a7
 8007618:	080076a7 	.word	0x080076a7
 800761c:	080076a7 	.word	0x080076a7
 8007620:	080076a7 	.word	0x080076a7
 8007624:	080076a7 	.word	0x080076a7
 8007628:	080076a7 	.word	0x080076a7
 800762c:	080076a7 	.word	0x080076a7
 8007630:	080076a7 	.word	0x080076a7
 8007634:	080076a7 	.word	0x080076a7
 8007638:	080076a7 	.word	0x080076a7
 800763c:	080076a7 	.word	0x080076a7
 8007640:	08007699 	.word	0x08007699
 8007644:	2b40      	cmp	r3, #64	; 0x40
 8007646:	d02a      	beq.n	800769e <UART_SetConfig+0x8aa>
 8007648:	e02d      	b.n	80076a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800764a:	f7fd fd81 	bl	8005150 <HAL_RCCEx_GetD3PCLK1Freq>
 800764e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007650:	e02f      	b.n	80076b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007656:	4618      	mov	r0, r3
 8007658:	f7fd fd90 	bl	800517c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800765c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007660:	e027      	b.n	80076b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007662:	f107 0318 	add.w	r3, r7, #24
 8007666:	4618      	mov	r0, r3
 8007668:	f7fd fedc 	bl	8005424 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007670:	e01f      	b.n	80076b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007672:	4b21      	ldr	r3, [pc, #132]	; (80076f8 <UART_SetConfig+0x904>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d009      	beq.n	8007692 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800767e:	4b1e      	ldr	r3, [pc, #120]	; (80076f8 <UART_SetConfig+0x904>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	08db      	lsrs	r3, r3, #3
 8007684:	f003 0303 	and.w	r3, r3, #3
 8007688:	4a1d      	ldr	r2, [pc, #116]	; (8007700 <UART_SetConfig+0x90c>)
 800768a:	fa22 f303 	lsr.w	r3, r2, r3
 800768e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007690:	e00f      	b.n	80076b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007692:	4b1b      	ldr	r3, [pc, #108]	; (8007700 <UART_SetConfig+0x90c>)
 8007694:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007696:	e00c      	b.n	80076b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007698:	4b1a      	ldr	r3, [pc, #104]	; (8007704 <UART_SetConfig+0x910>)
 800769a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800769c:	e009      	b.n	80076b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800769e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80076a4:	e005      	b.n	80076b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80076b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 81ee 	beq.w	8007a96 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	4a12      	ldr	r2, [pc, #72]	; (8007708 <UART_SetConfig+0x914>)
 80076c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076c4:	461a      	mov	r2, r3
 80076c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80076cc:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	4613      	mov	r3, r2
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	4413      	add	r3, r2
 80076d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076da:	429a      	cmp	r2, r3
 80076dc:	d305      	bcc.n	80076ea <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d910      	bls.n	800770c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80076f0:	e1d1      	b.n	8007a96 <UART_SetConfig+0xca2>
 80076f2:	bf00      	nop
 80076f4:	40011c00 	.word	0x40011c00
 80076f8:	58024400 	.word	0x58024400
 80076fc:	58000c00 	.word	0x58000c00
 8007700:	03d09000 	.word	0x03d09000
 8007704:	003d0900 	.word	0x003d0900
 8007708:	080097b8 	.word	0x080097b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800770c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800770e:	2200      	movs	r2, #0
 8007710:	60bb      	str	r3, [r7, #8]
 8007712:	60fa      	str	r2, [r7, #12]
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	4ac0      	ldr	r2, [pc, #768]	; (8007a1c <UART_SetConfig+0xc28>)
 800771a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800771e:	b29b      	uxth	r3, r3
 8007720:	2200      	movs	r2, #0
 8007722:	603b      	str	r3, [r7, #0]
 8007724:	607a      	str	r2, [r7, #4]
 8007726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800772a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800772e:	f7f8 fe37 	bl	80003a0 <__aeabi_uldivmod>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	4610      	mov	r0, r2
 8007738:	4619      	mov	r1, r3
 800773a:	f04f 0200 	mov.w	r2, #0
 800773e:	f04f 0300 	mov.w	r3, #0
 8007742:	020b      	lsls	r3, r1, #8
 8007744:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007748:	0202      	lsls	r2, r0, #8
 800774a:	6979      	ldr	r1, [r7, #20]
 800774c:	6849      	ldr	r1, [r1, #4]
 800774e:	0849      	lsrs	r1, r1, #1
 8007750:	2000      	movs	r0, #0
 8007752:	460c      	mov	r4, r1
 8007754:	4605      	mov	r5, r0
 8007756:	eb12 0804 	adds.w	r8, r2, r4
 800775a:	eb43 0905 	adc.w	r9, r3, r5
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	469a      	mov	sl, r3
 8007766:	4693      	mov	fp, r2
 8007768:	4652      	mov	r2, sl
 800776a:	465b      	mov	r3, fp
 800776c:	4640      	mov	r0, r8
 800776e:	4649      	mov	r1, r9
 8007770:	f7f8 fe16 	bl	80003a0 <__aeabi_uldivmod>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	4613      	mov	r3, r2
 800777a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800777c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007782:	d308      	bcc.n	8007796 <UART_SetConfig+0x9a2>
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800778a:	d204      	bcs.n	8007796 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007792:	60da      	str	r2, [r3, #12]
 8007794:	e17f      	b.n	8007a96 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800779c:	e17b      	b.n	8007a96 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077a6:	f040 80bd 	bne.w	8007924 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80077aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	dc48      	bgt.n	8007844 <UART_SetConfig+0xa50>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	db7b      	blt.n	80078ae <UART_SetConfig+0xaba>
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d879      	bhi.n	80078ae <UART_SetConfig+0xaba>
 80077ba:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <UART_SetConfig+0x9cc>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	0800784b 	.word	0x0800784b
 80077c4:	08007853 	.word	0x08007853
 80077c8:	080078af 	.word	0x080078af
 80077cc:	080078af 	.word	0x080078af
 80077d0:	0800785b 	.word	0x0800785b
 80077d4:	080078af 	.word	0x080078af
 80077d8:	080078af 	.word	0x080078af
 80077dc:	080078af 	.word	0x080078af
 80077e0:	0800786b 	.word	0x0800786b
 80077e4:	080078af 	.word	0x080078af
 80077e8:	080078af 	.word	0x080078af
 80077ec:	080078af 	.word	0x080078af
 80077f0:	080078af 	.word	0x080078af
 80077f4:	080078af 	.word	0x080078af
 80077f8:	080078af 	.word	0x080078af
 80077fc:	080078af 	.word	0x080078af
 8007800:	0800787b 	.word	0x0800787b
 8007804:	080078af 	.word	0x080078af
 8007808:	080078af 	.word	0x080078af
 800780c:	080078af 	.word	0x080078af
 8007810:	080078af 	.word	0x080078af
 8007814:	080078af 	.word	0x080078af
 8007818:	080078af 	.word	0x080078af
 800781c:	080078af 	.word	0x080078af
 8007820:	080078af 	.word	0x080078af
 8007824:	080078af 	.word	0x080078af
 8007828:	080078af 	.word	0x080078af
 800782c:	080078af 	.word	0x080078af
 8007830:	080078af 	.word	0x080078af
 8007834:	080078af 	.word	0x080078af
 8007838:	080078af 	.word	0x080078af
 800783c:	080078af 	.word	0x080078af
 8007840:	080078a1 	.word	0x080078a1
 8007844:	2b40      	cmp	r3, #64	; 0x40
 8007846:	d02e      	beq.n	80078a6 <UART_SetConfig+0xab2>
 8007848:	e031      	b.n	80078ae <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800784a:	f7fc fa97 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 800784e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007850:	e033      	b.n	80078ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007852:	f7fc faa9 	bl	8003da8 <HAL_RCC_GetPCLK2Freq>
 8007856:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007858:	e02f      	b.n	80078ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800785a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800785e:	4618      	mov	r0, r3
 8007860:	f7fd fc8c 	bl	800517c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007868:	e027      	b.n	80078ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800786a:	f107 0318 	add.w	r3, r7, #24
 800786e:	4618      	mov	r0, r3
 8007870:	f7fd fdd8 	bl	8005424 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007878:	e01f      	b.n	80078ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800787a:	4b69      	ldr	r3, [pc, #420]	; (8007a20 <UART_SetConfig+0xc2c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	2b00      	cmp	r3, #0
 8007884:	d009      	beq.n	800789a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007886:	4b66      	ldr	r3, [pc, #408]	; (8007a20 <UART_SetConfig+0xc2c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	08db      	lsrs	r3, r3, #3
 800788c:	f003 0303 	and.w	r3, r3, #3
 8007890:	4a64      	ldr	r2, [pc, #400]	; (8007a24 <UART_SetConfig+0xc30>)
 8007892:	fa22 f303 	lsr.w	r3, r2, r3
 8007896:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007898:	e00f      	b.n	80078ba <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800789a:	4b62      	ldr	r3, [pc, #392]	; (8007a24 <UART_SetConfig+0xc30>)
 800789c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800789e:	e00c      	b.n	80078ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078a0:	4b61      	ldr	r3, [pc, #388]	; (8007a28 <UART_SetConfig+0xc34>)
 80078a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078a4:	e009      	b.n	80078ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078ac:	e005      	b.n	80078ba <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80078b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 80ea 	beq.w	8007a96 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c6:	4a55      	ldr	r2, [pc, #340]	; (8007a1c <UART_SetConfig+0xc28>)
 80078c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078cc:	461a      	mov	r2, r3
 80078ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80078d4:	005a      	lsls	r2, r3, #1
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	085b      	lsrs	r3, r3, #1
 80078dc:	441a      	add	r2, r3
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ea:	2b0f      	cmp	r3, #15
 80078ec:	d916      	bls.n	800791c <UART_SetConfig+0xb28>
 80078ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f4:	d212      	bcs.n	800791c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	f023 030f 	bic.w	r3, r3, #15
 80078fe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007902:	085b      	lsrs	r3, r3, #1
 8007904:	b29b      	uxth	r3, r3
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	b29a      	uxth	r2, r3
 800790c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800790e:	4313      	orrs	r3, r2
 8007910:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007918:	60da      	str	r2, [r3, #12]
 800791a:	e0bc      	b.n	8007a96 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007922:	e0b8      	b.n	8007a96 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007924:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007928:	2b20      	cmp	r3, #32
 800792a:	dc4b      	bgt.n	80079c4 <UART_SetConfig+0xbd0>
 800792c:	2b00      	cmp	r3, #0
 800792e:	f2c0 8087 	blt.w	8007a40 <UART_SetConfig+0xc4c>
 8007932:	2b20      	cmp	r3, #32
 8007934:	f200 8084 	bhi.w	8007a40 <UART_SetConfig+0xc4c>
 8007938:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <UART_SetConfig+0xb4c>)
 800793a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793e:	bf00      	nop
 8007940:	080079cb 	.word	0x080079cb
 8007944:	080079d3 	.word	0x080079d3
 8007948:	08007a41 	.word	0x08007a41
 800794c:	08007a41 	.word	0x08007a41
 8007950:	080079db 	.word	0x080079db
 8007954:	08007a41 	.word	0x08007a41
 8007958:	08007a41 	.word	0x08007a41
 800795c:	08007a41 	.word	0x08007a41
 8007960:	080079eb 	.word	0x080079eb
 8007964:	08007a41 	.word	0x08007a41
 8007968:	08007a41 	.word	0x08007a41
 800796c:	08007a41 	.word	0x08007a41
 8007970:	08007a41 	.word	0x08007a41
 8007974:	08007a41 	.word	0x08007a41
 8007978:	08007a41 	.word	0x08007a41
 800797c:	08007a41 	.word	0x08007a41
 8007980:	080079fb 	.word	0x080079fb
 8007984:	08007a41 	.word	0x08007a41
 8007988:	08007a41 	.word	0x08007a41
 800798c:	08007a41 	.word	0x08007a41
 8007990:	08007a41 	.word	0x08007a41
 8007994:	08007a41 	.word	0x08007a41
 8007998:	08007a41 	.word	0x08007a41
 800799c:	08007a41 	.word	0x08007a41
 80079a0:	08007a41 	.word	0x08007a41
 80079a4:	08007a41 	.word	0x08007a41
 80079a8:	08007a41 	.word	0x08007a41
 80079ac:	08007a41 	.word	0x08007a41
 80079b0:	08007a41 	.word	0x08007a41
 80079b4:	08007a41 	.word	0x08007a41
 80079b8:	08007a41 	.word	0x08007a41
 80079bc:	08007a41 	.word	0x08007a41
 80079c0:	08007a33 	.word	0x08007a33
 80079c4:	2b40      	cmp	r3, #64	; 0x40
 80079c6:	d037      	beq.n	8007a38 <UART_SetConfig+0xc44>
 80079c8:	e03a      	b.n	8007a40 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079ca:	f7fc f9d7 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 80079ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079d0:	e03c      	b.n	8007a4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079d2:	f7fc f9e9 	bl	8003da8 <HAL_RCC_GetPCLK2Freq>
 80079d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079d8:	e038      	b.n	8007a4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fd fbcc 	bl	800517c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079e8:	e030      	b.n	8007a4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079ea:	f107 0318 	add.w	r3, r7, #24
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fd fd18 	bl	8005424 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079f8:	e028      	b.n	8007a4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079fa:	4b09      	ldr	r3, [pc, #36]	; (8007a20 <UART_SetConfig+0xc2c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d012      	beq.n	8007a2c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a06:	4b06      	ldr	r3, [pc, #24]	; (8007a20 <UART_SetConfig+0xc2c>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	08db      	lsrs	r3, r3, #3
 8007a0c:	f003 0303 	and.w	r3, r3, #3
 8007a10:	4a04      	ldr	r2, [pc, #16]	; (8007a24 <UART_SetConfig+0xc30>)
 8007a12:	fa22 f303 	lsr.w	r3, r2, r3
 8007a16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a18:	e018      	b.n	8007a4c <UART_SetConfig+0xc58>
 8007a1a:	bf00      	nop
 8007a1c:	080097b8 	.word	0x080097b8
 8007a20:	58024400 	.word	0x58024400
 8007a24:	03d09000 	.word	0x03d09000
 8007a28:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007a2c:	4b24      	ldr	r3, [pc, #144]	; (8007ac0 <UART_SetConfig+0xccc>)
 8007a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a30:	e00c      	b.n	8007a4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a32:	4b24      	ldr	r3, [pc, #144]	; (8007ac4 <UART_SetConfig+0xcd0>)
 8007a34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a36:	e009      	b.n	8007a4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a3e:	e005      	b.n	8007a4c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007a4a:	bf00      	nop
    }

    if (pclk != 0U)
 8007a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d021      	beq.n	8007a96 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	4a1c      	ldr	r2, [pc, #112]	; (8007ac8 <UART_SetConfig+0xcd4>)
 8007a58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a60:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	085b      	lsrs	r3, r3, #1
 8007a6a:	441a      	add	r2, r3
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a74:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a78:	2b0f      	cmp	r3, #15
 8007a7a:	d909      	bls.n	8007a90 <UART_SetConfig+0xc9c>
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a82:	d205      	bcs.n	8007a90 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	60da      	str	r2, [r3, #12]
 8007a8e:	e002      	b.n	8007a96 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007ab2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3748      	adds	r7, #72	; 0x48
 8007aba:	46bd      	mov	sp, r7
 8007abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ac0:	03d09000 	.word	0x03d09000
 8007ac4:	003d0900 	.word	0x003d0900
 8007ac8:	080097b8 	.word	0x080097b8

08007acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1c:	f003 0304 	and.w	r3, r3, #4
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3e:	f003 0308 	and.w	r3, r3, #8
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b60:	f003 0310 	and.w	r3, r3, #16
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b82:	f003 0320 	and.w	r3, r3, #32
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d01a      	beq.n	8007be2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bca:	d10a      	bne.n	8007be2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]
  }
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b098      	sub	sp, #96	; 0x60
 8007c14:	af02      	add	r7, sp, #8
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c20:	f7fa f852 	bl	8001cc8 <HAL_GetTick>
 8007c24:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0308 	and.w	r3, r3, #8
 8007c30:	2b08      	cmp	r3, #8
 8007c32:	d12f      	bne.n	8007c94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f88e 	bl	8007d64 <UART_WaitOnFlagUntilTimeout>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d022      	beq.n	8007c94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c56:	e853 3f00 	ldrex	r3, [r3]
 8007c5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c62:	653b      	str	r3, [r7, #80]	; 0x50
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c74:	e841 2300 	strex	r3, r2, [r1]
 8007c78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e6      	bne.n	8007c4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2220      	movs	r2, #32
 8007c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e063      	b.n	8007d5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0304 	and.w	r3, r3, #4
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d149      	bne.n	8007d36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ca2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007caa:	2200      	movs	r2, #0
 8007cac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f857 	bl	8007d64 <UART_WaitOnFlagUntilTimeout>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d03c      	beq.n	8007d36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cda:	633b      	str	r3, [r7, #48]	; 0x30
 8007cdc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e6      	bne.n	8007cbc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3308      	adds	r3, #8
 8007cf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	e853 3f00 	ldrex	r3, [r3]
 8007cfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f023 0301 	bic.w	r3, r3, #1
 8007d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d0e:	61fa      	str	r2, [r7, #28]
 8007d10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d12:	69b9      	ldr	r1, [r7, #24]
 8007d14:	69fa      	ldr	r2, [r7, #28]
 8007d16:	e841 2300 	strex	r3, r2, [r1]
 8007d1a:	617b      	str	r3, [r7, #20]
   return(result);
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1e5      	bne.n	8007cee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e012      	b.n	8007d5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2220      	movs	r2, #32
 8007d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2220      	movs	r2, #32
 8007d42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3758      	adds	r7, #88	; 0x58
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	4613      	mov	r3, r2
 8007d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d74:	e049      	b.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7c:	d045      	beq.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d7e:	f7f9 ffa3 	bl	8001cc8 <HAL_GetTick>
 8007d82:	4602      	mov	r2, r0
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	69ba      	ldr	r2, [r7, #24]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d302      	bcc.n	8007d94 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e048      	b.n	8007e2a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0304 	and.w	r3, r3, #4
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d031      	beq.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	f003 0308 	and.w	r3, r3, #8
 8007db0:	2b08      	cmp	r3, #8
 8007db2:	d110      	bne.n	8007dd6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2208      	movs	r2, #8
 8007dba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f000 f95b 	bl	8008078 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2208      	movs	r2, #8
 8007dc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e029      	b.n	8007e2a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de4:	d111      	bne.n	8007e0a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 f941 	bl	8008078 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e00f      	b.n	8007e2a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	69da      	ldr	r2, [r3, #28]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4013      	ands	r3, r2
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	bf0c      	ite	eq
 8007e1a:	2301      	moveq	r3, #1
 8007e1c:	2300      	movne	r3, #0
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	461a      	mov	r2, r3
 8007e22:	79fb      	ldrb	r3, [r7, #7]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d0a6      	beq.n	8007d76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b0a3      	sub	sp, #140	; 0x8c
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	88fa      	ldrh	r2, [r7, #6]
 8007e4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	88fa      	ldrh	r2, [r7, #6]
 8007e54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e66:	d10e      	bne.n	8007e86 <UART_Start_Receive_IT+0x52>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d105      	bne.n	8007e7c <UART_Start_Receive_IT+0x48>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007e76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e7a:	e02d      	b.n	8007ed8 <UART_Start_Receive_IT+0xa4>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	22ff      	movs	r2, #255	; 0xff
 8007e80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e84:	e028      	b.n	8007ed8 <UART_Start_Receive_IT+0xa4>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10d      	bne.n	8007eaa <UART_Start_Receive_IT+0x76>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d104      	bne.n	8007ea0 <UART_Start_Receive_IT+0x6c>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	22ff      	movs	r2, #255	; 0xff
 8007e9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e9e:	e01b      	b.n	8007ed8 <UART_Start_Receive_IT+0xa4>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	227f      	movs	r2, #127	; 0x7f
 8007ea4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ea8:	e016      	b.n	8007ed8 <UART_Start_Receive_IT+0xa4>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eb2:	d10d      	bne.n	8007ed0 <UART_Start_Receive_IT+0x9c>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d104      	bne.n	8007ec6 <UART_Start_Receive_IT+0x92>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	227f      	movs	r2, #127	; 0x7f
 8007ec0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ec4:	e008      	b.n	8007ed8 <UART_Start_Receive_IT+0xa4>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	223f      	movs	r2, #63	; 0x3f
 8007eca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ece:	e003      	b.n	8007ed8 <UART_Start_Receive_IT+0xa4>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2222      	movs	r2, #34	; 0x22
 8007ee4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3308      	adds	r3, #8
 8007eee:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ef2:	e853 3f00 	ldrex	r3, [r3]
 8007ef6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007ef8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007efa:	f043 0301 	orr.w	r3, r3, #1
 8007efe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3308      	adds	r3, #8
 8007f08:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007f0c:	673a      	str	r2, [r7, #112]	; 0x70
 8007f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007f12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007f1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e3      	bne.n	8007ee8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f28:	d14f      	bne.n	8007fca <UART_Start_Receive_IT+0x196>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f30:	88fa      	ldrh	r2, [r7, #6]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d349      	bcc.n	8007fca <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f3e:	d107      	bne.n	8007f50 <UART_Start_Receive_IT+0x11c>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d103      	bne.n	8007f50 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4a47      	ldr	r2, [pc, #284]	; (8008068 <UART_Start_Receive_IT+0x234>)
 8007f4c:	675a      	str	r2, [r3, #116]	; 0x74
 8007f4e:	e002      	b.n	8007f56 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4a46      	ldr	r2, [pc, #280]	; (800806c <UART_Start_Receive_IT+0x238>)
 8007f54:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d01a      	beq.n	8007f94 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f66:	e853 3f00 	ldrex	r3, [r3]
 8007f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f82:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f88:	e841 2300 	strex	r3, r2, [r1]
 8007f8c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1e4      	bne.n	8007f5e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3308      	adds	r3, #8
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007faa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3308      	adds	r3, #8
 8007fb2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007fb4:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fb6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fbc:	e841 2300 	strex	r3, r2, [r1]
 8007fc0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e5      	bne.n	8007f94 <UART_Start_Receive_IT+0x160>
 8007fc8:	e046      	b.n	8008058 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fd2:	d107      	bne.n	8007fe4 <UART_Start_Receive_IT+0x1b0>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d103      	bne.n	8007fe4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4a24      	ldr	r2, [pc, #144]	; (8008070 <UART_Start_Receive_IT+0x23c>)
 8007fe0:	675a      	str	r2, [r3, #116]	; 0x74
 8007fe2:	e002      	b.n	8007fea <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4a23      	ldr	r2, [pc, #140]	; (8008074 <UART_Start_Receive_IT+0x240>)
 8007fe8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d019      	beq.n	8008026 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffa:	e853 3f00 	ldrex	r3, [r3]
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008006:	677b      	str	r3, [r7, #116]	; 0x74
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	461a      	mov	r2, r3
 800800e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008010:	637b      	str	r3, [r7, #52]	; 0x34
 8008012:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008014:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008018:	e841 2300 	strex	r3, r2, [r1]
 800801c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800801e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1e6      	bne.n	8007ff2 <UART_Start_Receive_IT+0x1be>
 8008024:	e018      	b.n	8008058 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	e853 3f00 	ldrex	r3, [r3]
 8008032:	613b      	str	r3, [r7, #16]
   return(result);
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	f043 0320 	orr.w	r3, r3, #32
 800803a:	67bb      	str	r3, [r7, #120]	; 0x78
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	461a      	mov	r2, r3
 8008042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008044:	623b      	str	r3, [r7, #32]
 8008046:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008048:	69f9      	ldr	r1, [r7, #28]
 800804a:	6a3a      	ldr	r2, [r7, #32]
 800804c:	e841 2300 	strex	r3, r2, [r1]
 8008050:	61bb      	str	r3, [r7, #24]
   return(result);
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1e6      	bne.n	8008026 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	378c      	adds	r7, #140	; 0x8c
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	08008899 	.word	0x08008899
 800806c:	08008539 	.word	0x08008539
 8008070:	08008381 	.word	0x08008381
 8008074:	080081c9 	.word	0x080081c9

08008078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008078:	b480      	push	{r7}
 800807a:	b095      	sub	sp, #84	; 0x54
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008088:	e853 3f00 	ldrex	r3, [r3]
 800808c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008094:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800809e:	643b      	str	r3, [r7, #64]	; 0x40
 80080a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080a6:	e841 2300 	strex	r3, r2, [r1]
 80080aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1e6      	bne.n	8008080 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3308      	adds	r3, #8
 80080b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80080c2:	69fa      	ldr	r2, [r7, #28]
 80080c4:	4b1e      	ldr	r3, [pc, #120]	; (8008140 <UART_EndRxTransfer+0xc8>)
 80080c6:	4013      	ands	r3, r2
 80080c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3308      	adds	r3, #8
 80080d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e5      	bne.n	80080b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d118      	bne.n	8008120 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	e853 3f00 	ldrex	r3, [r3]
 80080fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f023 0310 	bic.w	r3, r3, #16
 8008102:	647b      	str	r3, [r7, #68]	; 0x44
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	461a      	mov	r2, r3
 800810a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800810c:	61bb      	str	r3, [r7, #24]
 800810e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008110:	6979      	ldr	r1, [r7, #20]
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	e841 2300 	strex	r3, r2, [r1]
 8008118:	613b      	str	r3, [r7, #16]
   return(result);
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e6      	bne.n	80080ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2220      	movs	r2, #32
 8008124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008134:	bf00      	nop
 8008136:	3754      	adds	r7, #84	; 0x54
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	effffffe 	.word	0xeffffffe

08008144 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008150:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f7fe fe30 	bl	8006dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008168:	bf00      	nop
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	e853 3f00 	ldrex	r3, [r3]
 8008184:	60bb      	str	r3, [r7, #8]
   return(result);
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800818c:	61fb      	str	r3, [r7, #28]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	61bb      	str	r3, [r7, #24]
 8008198:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819a:	6979      	ldr	r1, [r7, #20]
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	e841 2300 	strex	r3, r2, [r1]
 80081a2:	613b      	str	r3, [r7, #16]
   return(result);
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1e6      	bne.n	8008178 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7fe fdfb 	bl	8006db4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081be:	bf00      	nop
 80081c0:	3720      	adds	r7, #32
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b09c      	sub	sp, #112	; 0x70
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081d6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081e0:	2b22      	cmp	r3, #34	; 0x22
 80081e2:	f040 80be 	bne.w	8008362 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80081f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80081f4:	b2d9      	uxtb	r1, r3
 80081f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008200:	400a      	ands	r2, r1
 8008202:	b2d2      	uxtb	r2, r2
 8008204:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008216:	b29b      	uxth	r3, r3
 8008218:	3b01      	subs	r3, #1
 800821a:	b29a      	uxth	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008228:	b29b      	uxth	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	f040 80a1 	bne.w	8008372 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008238:	e853 3f00 	ldrex	r3, [r3]
 800823c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800823e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008240:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008244:	66bb      	str	r3, [r7, #104]	; 0x68
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800824e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008250:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008254:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008256:	e841 2300 	strex	r3, r2, [r1]
 800825a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800825c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1e6      	bne.n	8008230 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	3308      	adds	r3, #8
 8008268:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826c:	e853 3f00 	ldrex	r3, [r3]
 8008270:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008274:	f023 0301 	bic.w	r3, r3, #1
 8008278:	667b      	str	r3, [r7, #100]	; 0x64
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3308      	adds	r3, #8
 8008280:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008282:	647a      	str	r2, [r7, #68]	; 0x44
 8008284:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008286:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008288:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800828a:	e841 2300 	strex	r3, r2, [r1]
 800828e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1e5      	bne.n	8008262 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2220      	movs	r2, #32
 800829a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a33      	ldr	r2, [pc, #204]	; (800837c <UART_RxISR_8BIT+0x1b4>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d01f      	beq.n	80082f4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d018      	beq.n	80082f4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	e853 3f00 	ldrex	r3, [r3]
 80082ce:	623b      	str	r3, [r7, #32]
   return(result);
 80082d0:	6a3b      	ldr	r3, [r7, #32]
 80082d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80082d6:	663b      	str	r3, [r7, #96]	; 0x60
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	461a      	mov	r2, r3
 80082de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082e0:	633b      	str	r3, [r7, #48]	; 0x30
 80082e2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082e8:	e841 2300 	strex	r3, r2, [r1]
 80082ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1e6      	bne.n	80082c2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d12e      	bne.n	800835a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	e853 3f00 	ldrex	r3, [r3]
 800830e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f023 0310 	bic.w	r3, r3, #16
 8008316:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	461a      	mov	r2, r3
 800831e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008320:	61fb      	str	r3, [r7, #28]
 8008322:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008324:	69b9      	ldr	r1, [r7, #24]
 8008326:	69fa      	ldr	r2, [r7, #28]
 8008328:	e841 2300 	strex	r3, r2, [r1]
 800832c:	617b      	str	r3, [r7, #20]
   return(result);
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1e6      	bne.n	8008302 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	f003 0310 	and.w	r3, r3, #16
 800833e:	2b10      	cmp	r3, #16
 8008340:	d103      	bne.n	800834a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2210      	movs	r2, #16
 8008348:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008350:	4619      	mov	r1, r3
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7fe fd42 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008358:	e00b      	b.n	8008372 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7f8 fae2 	bl	8000924 <HAL_UART_RxCpltCallback>
}
 8008360:	e007      	b.n	8008372 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	699a      	ldr	r2, [r3, #24]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f042 0208 	orr.w	r2, r2, #8
 8008370:	619a      	str	r2, [r3, #24]
}
 8008372:	bf00      	nop
 8008374:	3770      	adds	r7, #112	; 0x70
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	58000c00 	.word	0x58000c00

08008380 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b09c      	sub	sp, #112	; 0x70
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800838e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008398:	2b22      	cmp	r3, #34	; 0x22
 800839a:	f040 80be 	bne.w	800851a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ac:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80083ae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80083b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80083b6:	4013      	ands	r3, r2
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c2:	1c9a      	adds	r2, r3, #2
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	3b01      	subs	r3, #1
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f040 80a1 	bne.w	800852a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083f0:	e853 3f00 	ldrex	r3, [r3]
 80083f4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80083f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083fc:	667b      	str	r3, [r7, #100]	; 0x64
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008406:	657b      	str	r3, [r7, #84]	; 0x54
 8008408:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800840c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800840e:	e841 2300 	strex	r3, r2, [r1]
 8008412:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1e6      	bne.n	80083e8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3308      	adds	r3, #8
 8008420:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008424:	e853 3f00 	ldrex	r3, [r3]
 8008428:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	f023 0301 	bic.w	r3, r3, #1
 8008430:	663b      	str	r3, [r7, #96]	; 0x60
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	3308      	adds	r3, #8
 8008438:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800843a:	643a      	str	r2, [r7, #64]	; 0x40
 800843c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008440:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008442:	e841 2300 	strex	r3, r2, [r1]
 8008446:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1e5      	bne.n	800841a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2220      	movs	r2, #32
 8008452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a33      	ldr	r2, [pc, #204]	; (8008534 <UART_RxISR_16BIT+0x1b4>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d01f      	beq.n	80084ac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d018      	beq.n	80084ac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008480:	6a3b      	ldr	r3, [r7, #32]
 8008482:	e853 3f00 	ldrex	r3, [r3]
 8008486:	61fb      	str	r3, [r7, #28]
   return(result);
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800848e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	461a      	mov	r2, r3
 8008496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800849a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800849e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084a0:	e841 2300 	strex	r3, r2, [r1]
 80084a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1e6      	bne.n	800847a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d12e      	bne.n	8008512 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	e853 3f00 	ldrex	r3, [r3]
 80084c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f023 0310 	bic.w	r3, r3, #16
 80084ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084d8:	61bb      	str	r3, [r7, #24]
 80084da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	6979      	ldr	r1, [r7, #20]
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	e841 2300 	strex	r3, r2, [r1]
 80084e4:	613b      	str	r3, [r7, #16]
   return(result);
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1e6      	bne.n	80084ba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	f003 0310 	and.w	r3, r3, #16
 80084f6:	2b10      	cmp	r3, #16
 80084f8:	d103      	bne.n	8008502 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2210      	movs	r2, #16
 8008500:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008508:	4619      	mov	r1, r3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7fe fc66 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008510:	e00b      	b.n	800852a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7f8 fa06 	bl	8000924 <HAL_UART_RxCpltCallback>
}
 8008518:	e007      	b.n	800852a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	699a      	ldr	r2, [r3, #24]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f042 0208 	orr.w	r2, r2, #8
 8008528:	619a      	str	r2, [r3, #24]
}
 800852a:	bf00      	nop
 800852c:	3770      	adds	r7, #112	; 0x70
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	58000c00 	.word	0x58000c00

08008538 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b0ac      	sub	sp, #176	; 0xb0
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008546:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69db      	ldr	r3, [r3, #28]
 8008550:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800856e:	2b22      	cmp	r3, #34	; 0x22
 8008570:	f040 8180 	bne.w	8008874 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800857a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800857e:	e123      	b.n	80087c8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800858a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800858e:	b2d9      	uxtb	r1, r3
 8008590:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008594:	b2da      	uxtb	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800859a:	400a      	ands	r2, r1
 800859c:	b2d2      	uxtb	r2, r2
 800859e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a4:	1c5a      	adds	r2, r3, #1
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	3b01      	subs	r3, #1
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	69db      	ldr	r3, [r3, #28]
 80085c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80085c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085ca:	f003 0307 	and.w	r3, r3, #7
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d053      	beq.n	800867a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d011      	beq.n	8008602 <UART_RxISR_8BIT_FIFOEN+0xca>
 80085de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80085e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00b      	beq.n	8008602 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2201      	movs	r2, #1
 80085f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f8:	f043 0201 	orr.w	r2, r3, #1
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	2b00      	cmp	r3, #0
 800860c:	d011      	beq.n	8008632 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800860e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00b      	beq.n	8008632 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2202      	movs	r2, #2
 8008620:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008628:	f043 0204 	orr.w	r2, r3, #4
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008636:	f003 0304 	and.w	r3, r3, #4
 800863a:	2b00      	cmp	r3, #0
 800863c:	d011      	beq.n	8008662 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800863e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00b      	beq.n	8008662 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2204      	movs	r2, #4
 8008650:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008658:	f043 0202 	orr.w	r2, r3, #2
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008668:	2b00      	cmp	r3, #0
 800866a:	d006      	beq.n	800867a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7fe fbab 	bl	8006dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	f040 80a0 	bne.w	80087c8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008690:	e853 3f00 	ldrex	r3, [r3]
 8008694:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800869c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	461a      	mov	r2, r3
 80086a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80086ac:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80086b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80086b2:	e841 2300 	strex	r3, r2, [r1]
 80086b6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80086b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1e4      	bne.n	8008688 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3308      	adds	r3, #8
 80086c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80086ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086d0:	4b6e      	ldr	r3, [pc, #440]	; (800888c <UART_RxISR_8BIT_FIFOEN+0x354>)
 80086d2:	4013      	ands	r3, r2
 80086d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	3308      	adds	r3, #8
 80086de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086e2:	66ba      	str	r2, [r7, #104]	; 0x68
 80086e4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80086e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086ea:	e841 2300 	strex	r3, r2, [r1]
 80086ee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80086f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1e3      	bne.n	80086be <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2220      	movs	r2, #32
 80086fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a60      	ldr	r2, [pc, #384]	; (8008890 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d021      	beq.n	8008758 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d01a      	beq.n	8008758 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800872a:	e853 3f00 	ldrex	r3, [r3]
 800872e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008732:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008744:	657b      	str	r3, [r7, #84]	; 0x54
 8008746:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008748:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800874a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800874c:	e841 2300 	strex	r3, r2, [r1]
 8008750:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1e4      	bne.n	8008722 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800875c:	2b01      	cmp	r3, #1
 800875e:	d130      	bne.n	80087c2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800876e:	e853 3f00 	ldrex	r3, [r3]
 8008772:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008776:	f023 0310 	bic.w	r3, r3, #16
 800877a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008788:	643b      	str	r3, [r7, #64]	; 0x40
 800878a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800878e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008790:	e841 2300 	strex	r3, r2, [r1]
 8008794:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1e4      	bne.n	8008766 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	69db      	ldr	r3, [r3, #28]
 80087a2:	f003 0310 	and.w	r3, r3, #16
 80087a6:	2b10      	cmp	r3, #16
 80087a8:	d103      	bne.n	80087b2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2210      	movs	r2, #16
 80087b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7fe fb0e 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
 80087c0:	e002      	b.n	80087c8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7f8 f8ae 	bl	8000924 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80087c8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d006      	beq.n	80087de <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80087d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087d4:	f003 0320 	and.w	r3, r3, #32
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f47f aed1 	bne.w	8008580 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087e4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80087e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d049      	beq.n	8008884 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80087f6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d242      	bcs.n	8008884 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3308      	adds	r3, #8
 8008804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	6a3b      	ldr	r3, [r7, #32]
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	61fb      	str	r3, [r7, #28]
   return(result);
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3308      	adds	r3, #8
 800881e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008822:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008824:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008826:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800882a:	e841 2300 	strex	r3, r2, [r1]
 800882e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e3      	bne.n	80087fe <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a16      	ldr	r2, [pc, #88]	; (8008894 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800883a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	60bb      	str	r3, [r7, #8]
   return(result);
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f043 0320 	orr.w	r3, r3, #32
 8008850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	461a      	mov	r2, r3
 800885a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800885e:	61bb      	str	r3, [r7, #24]
 8008860:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	6979      	ldr	r1, [r7, #20]
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	613b      	str	r3, [r7, #16]
   return(result);
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e4      	bne.n	800883c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008872:	e007      	b.n	8008884 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	699a      	ldr	r2, [r3, #24]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f042 0208 	orr.w	r2, r2, #8
 8008882:	619a      	str	r2, [r3, #24]
}
 8008884:	bf00      	nop
 8008886:	37b0      	adds	r7, #176	; 0xb0
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	effffffe 	.word	0xeffffffe
 8008890:	58000c00 	.word	0x58000c00
 8008894:	080081c9 	.word	0x080081c9

08008898 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b0ae      	sub	sp, #184	; 0xb8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80088a6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	69db      	ldr	r3, [r3, #28]
 80088b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088ce:	2b22      	cmp	r3, #34	; 0x22
 80088d0:	f040 8184 	bne.w	8008bdc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80088da:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80088de:	e127      	b.n	8008b30 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80088f2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80088f6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80088fa:	4013      	ands	r3, r2
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008902:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008908:	1c9a      	adds	r2, r3, #2
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008914:	b29b      	uxth	r3, r3
 8008916:	3b01      	subs	r3, #1
 8008918:	b29a      	uxth	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800892a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800892e:	f003 0307 	and.w	r3, r3, #7
 8008932:	2b00      	cmp	r3, #0
 8008934:	d053      	beq.n	80089de <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008936:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	d011      	beq.n	8008966 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00b      	beq.n	8008966 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2201      	movs	r2, #1
 8008954:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800895c:	f043 0201 	orr.w	r2, r3, #1
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008966:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800896a:	f003 0302 	and.w	r3, r3, #2
 800896e:	2b00      	cmp	r3, #0
 8008970:	d011      	beq.n	8008996 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008972:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00b      	beq.n	8008996 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2202      	movs	r2, #2
 8008984:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800898c:	f043 0204 	orr.w	r2, r3, #4
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800899a:	f003 0304 	and.w	r3, r3, #4
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d011      	beq.n	80089c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80089a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00b      	beq.n	80089c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2204      	movs	r2, #4
 80089b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089bc:	f043 0202 	orr.w	r2, r3, #2
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d006      	beq.n	80089de <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7fe f9f9 	bl	8006dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f040 80a2 	bne.w	8008b30 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089f4:	e853 3f00 	ldrex	r3, [r3]
 80089f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80089fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	461a      	mov	r2, r3
 8008a0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a12:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a1a:	e841 2300 	strex	r3, r2, [r1]
 8008a1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1e2      	bne.n	80089ec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	3308      	adds	r3, #8
 8008a2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a38:	4b6e      	ldr	r3, [pc, #440]	; (8008bf4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3308      	adds	r3, #8
 8008a46:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008a4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1e3      	bne.n	8008a26 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2220      	movs	r2, #32
 8008a62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a60      	ldr	r2, [pc, #384]	; (8008bf8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d021      	beq.n	8008ac0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d01a      	beq.n	8008ac0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a92:	e853 3f00 	ldrex	r3, [r3]
 8008a96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008aac:	65bb      	str	r3, [r7, #88]	; 0x58
 8008aae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ab2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ab4:	e841 2300 	strex	r3, r2, [r1]
 8008ab8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1e4      	bne.n	8008a8a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d130      	bne.n	8008b2a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad6:	e853 3f00 	ldrex	r3, [r3]
 8008ada:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ade:	f023 0310 	bic.w	r3, r3, #16
 8008ae2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008af0:	647b      	str	r3, [r7, #68]	; 0x44
 8008af2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008af6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008af8:	e841 2300 	strex	r3, r2, [r1]
 8008afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1e4      	bne.n	8008ace <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	f003 0310 	and.w	r3, r3, #16
 8008b0e:	2b10      	cmp	r3, #16
 8008b10:	d103      	bne.n	8008b1a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2210      	movs	r2, #16
 8008b18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7fe f95a 	bl	8006ddc <HAL_UARTEx_RxEventCallback>
 8008b28:	e002      	b.n	8008b30 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7f7 fefa 	bl	8000924 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b30:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d006      	beq.n	8008b46 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008b38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f47f aecd 	bne.w	80088e0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b4c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008b50:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d049      	beq.n	8008bec <UART_RxISR_16BIT_FIFOEN+0x354>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b5e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d242      	bcs.n	8008bec <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3308      	adds	r3, #8
 8008b6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	623b      	str	r3, [r7, #32]
   return(result);
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3308      	adds	r3, #8
 8008b86:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008b8a:	633a      	str	r2, [r7, #48]	; 0x30
 8008b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b92:	e841 2300 	strex	r3, r2, [r1]
 8008b96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1e3      	bne.n	8008b66 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a16      	ldr	r2, [pc, #88]	; (8008bfc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008ba2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	e853 3f00 	ldrex	r3, [r3]
 8008bb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f043 0320 	orr.w	r3, r3, #32
 8008bb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bc6:	61fb      	str	r3, [r7, #28]
 8008bc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bca:	69b9      	ldr	r1, [r7, #24]
 8008bcc:	69fa      	ldr	r2, [r7, #28]
 8008bce:	e841 2300 	strex	r3, r2, [r1]
 8008bd2:	617b      	str	r3, [r7, #20]
   return(result);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1e4      	bne.n	8008ba4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bda:	e007      	b.n	8008bec <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	699a      	ldr	r2, [r3, #24]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f042 0208 	orr.w	r2, r2, #8
 8008bea:	619a      	str	r2, [r3, #24]
}
 8008bec:	bf00      	nop
 8008bee:	37b8      	adds	r7, #184	; 0xb8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	effffffe 	.word	0xeffffffe
 8008bf8:	58000c00 	.word	0x58000c00
 8008bfc:	08008381 	.word	0x08008381

08008c00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d101      	bne.n	8008c52 <HAL_UARTEx_DisableFifoMode+0x16>
 8008c4e:	2302      	movs	r3, #2
 8008c50:	e027      	b.n	8008ca2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2224      	movs	r2, #36	; 0x24
 8008c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f022 0201 	bic.w	r2, r2, #1
 8008c78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2220      	movs	r2, #32
 8008c94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d101      	bne.n	8008cc6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008cc2:	2302      	movs	r3, #2
 8008cc4:	e02d      	b.n	8008d22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2224      	movs	r2, #36	; 0x24
 8008cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f022 0201 	bic.w	r2, r2, #1
 8008cec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f850 	bl	8008da8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2220      	movs	r2, #32
 8008d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b084      	sub	sp, #16
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d101      	bne.n	8008d42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d3e:	2302      	movs	r3, #2
 8008d40:	e02d      	b.n	8008d9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2224      	movs	r2, #36	; 0x24
 8008d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f022 0201 	bic.w	r2, r2, #1
 8008d68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f812 	bl	8008da8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d108      	bne.n	8008dca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008dc8:	e031      	b.n	8008e2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008dca:	2310      	movs	r3, #16
 8008dcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008dce:	2310      	movs	r3, #16
 8008dd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	0e5b      	lsrs	r3, r3, #25
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	f003 0307 	and.w	r3, r3, #7
 8008de0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	0f5b      	lsrs	r3, r3, #29
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	f003 0307 	and.w	r3, r3, #7
 8008df0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008df2:	7bbb      	ldrb	r3, [r7, #14]
 8008df4:	7b3a      	ldrb	r2, [r7, #12]
 8008df6:	4911      	ldr	r1, [pc, #68]	; (8008e3c <UARTEx_SetNbDataToProcess+0x94>)
 8008df8:	5c8a      	ldrb	r2, [r1, r2]
 8008dfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008dfe:	7b3a      	ldrb	r2, [r7, #12]
 8008e00:	490f      	ldr	r1, [pc, #60]	; (8008e40 <UARTEx_SetNbDataToProcess+0x98>)
 8008e02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e04:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
 8008e12:	7b7a      	ldrb	r2, [r7, #13]
 8008e14:	4909      	ldr	r1, [pc, #36]	; (8008e3c <UARTEx_SetNbDataToProcess+0x94>)
 8008e16:	5c8a      	ldrb	r2, [r1, r2]
 8008e18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e1c:	7b7a      	ldrb	r2, [r7, #13]
 8008e1e:	4908      	ldr	r1, [pc, #32]	; (8008e40 <UARTEx_SetNbDataToProcess+0x98>)
 8008e20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e22:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e2e:	bf00      	nop
 8008e30:	3714      	adds	r7, #20
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	080097d0 	.word	0x080097d0
 8008e40:	080097d8 	.word	0x080097d8

08008e44 <siprintf>:
 8008e44:	b40e      	push	{r1, r2, r3}
 8008e46:	b500      	push	{lr}
 8008e48:	b09c      	sub	sp, #112	; 0x70
 8008e4a:	ab1d      	add	r3, sp, #116	; 0x74
 8008e4c:	9002      	str	r0, [sp, #8]
 8008e4e:	9006      	str	r0, [sp, #24]
 8008e50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e54:	4809      	ldr	r0, [pc, #36]	; (8008e7c <siprintf+0x38>)
 8008e56:	9107      	str	r1, [sp, #28]
 8008e58:	9104      	str	r1, [sp, #16]
 8008e5a:	4909      	ldr	r1, [pc, #36]	; (8008e80 <siprintf+0x3c>)
 8008e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e60:	9105      	str	r1, [sp, #20]
 8008e62:	6800      	ldr	r0, [r0, #0]
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	a902      	add	r1, sp, #8
 8008e68:	f000 f992 	bl	8009190 <_svfiprintf_r>
 8008e6c:	9b02      	ldr	r3, [sp, #8]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	701a      	strb	r2, [r3, #0]
 8008e72:	b01c      	add	sp, #112	; 0x70
 8008e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e78:	b003      	add	sp, #12
 8008e7a:	4770      	bx	lr
 8008e7c:	24000068 	.word	0x24000068
 8008e80:	ffff0208 	.word	0xffff0208

08008e84 <memset>:
 8008e84:	4402      	add	r2, r0
 8008e86:	4603      	mov	r3, r0
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d100      	bne.n	8008e8e <memset+0xa>
 8008e8c:	4770      	bx	lr
 8008e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e92:	e7f9      	b.n	8008e88 <memset+0x4>

08008e94 <__errno>:
 8008e94:	4b01      	ldr	r3, [pc, #4]	; (8008e9c <__errno+0x8>)
 8008e96:	6818      	ldr	r0, [r3, #0]
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	24000068 	.word	0x24000068

08008ea0 <__libc_init_array>:
 8008ea0:	b570      	push	{r4, r5, r6, lr}
 8008ea2:	4d0d      	ldr	r5, [pc, #52]	; (8008ed8 <__libc_init_array+0x38>)
 8008ea4:	4c0d      	ldr	r4, [pc, #52]	; (8008edc <__libc_init_array+0x3c>)
 8008ea6:	1b64      	subs	r4, r4, r5
 8008ea8:	10a4      	asrs	r4, r4, #2
 8008eaa:	2600      	movs	r6, #0
 8008eac:	42a6      	cmp	r6, r4
 8008eae:	d109      	bne.n	8008ec4 <__libc_init_array+0x24>
 8008eb0:	4d0b      	ldr	r5, [pc, #44]	; (8008ee0 <__libc_init_array+0x40>)
 8008eb2:	4c0c      	ldr	r4, [pc, #48]	; (8008ee4 <__libc_init_array+0x44>)
 8008eb4:	f000 fc6a 	bl	800978c <_init>
 8008eb8:	1b64      	subs	r4, r4, r5
 8008eba:	10a4      	asrs	r4, r4, #2
 8008ebc:	2600      	movs	r6, #0
 8008ebe:	42a6      	cmp	r6, r4
 8008ec0:	d105      	bne.n	8008ece <__libc_init_array+0x2e>
 8008ec2:	bd70      	pop	{r4, r5, r6, pc}
 8008ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ec8:	4798      	blx	r3
 8008eca:	3601      	adds	r6, #1
 8008ecc:	e7ee      	b.n	8008eac <__libc_init_array+0xc>
 8008ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ed2:	4798      	blx	r3
 8008ed4:	3601      	adds	r6, #1
 8008ed6:	e7f2      	b.n	8008ebe <__libc_init_array+0x1e>
 8008ed8:	0800981c 	.word	0x0800981c
 8008edc:	0800981c 	.word	0x0800981c
 8008ee0:	0800981c 	.word	0x0800981c
 8008ee4:	08009820 	.word	0x08009820

08008ee8 <__retarget_lock_acquire_recursive>:
 8008ee8:	4770      	bx	lr

08008eea <__retarget_lock_release_recursive>:
 8008eea:	4770      	bx	lr

08008eec <_free_r>:
 8008eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eee:	2900      	cmp	r1, #0
 8008ef0:	d044      	beq.n	8008f7c <_free_r+0x90>
 8008ef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef6:	9001      	str	r0, [sp, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f1a1 0404 	sub.w	r4, r1, #4
 8008efe:	bfb8      	it	lt
 8008f00:	18e4      	addlt	r4, r4, r3
 8008f02:	f000 f8df 	bl	80090c4 <__malloc_lock>
 8008f06:	4a1e      	ldr	r2, [pc, #120]	; (8008f80 <_free_r+0x94>)
 8008f08:	9801      	ldr	r0, [sp, #4]
 8008f0a:	6813      	ldr	r3, [r2, #0]
 8008f0c:	b933      	cbnz	r3, 8008f1c <_free_r+0x30>
 8008f0e:	6063      	str	r3, [r4, #4]
 8008f10:	6014      	str	r4, [r2, #0]
 8008f12:	b003      	add	sp, #12
 8008f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f18:	f000 b8da 	b.w	80090d0 <__malloc_unlock>
 8008f1c:	42a3      	cmp	r3, r4
 8008f1e:	d908      	bls.n	8008f32 <_free_r+0x46>
 8008f20:	6825      	ldr	r5, [r4, #0]
 8008f22:	1961      	adds	r1, r4, r5
 8008f24:	428b      	cmp	r3, r1
 8008f26:	bf01      	itttt	eq
 8008f28:	6819      	ldreq	r1, [r3, #0]
 8008f2a:	685b      	ldreq	r3, [r3, #4]
 8008f2c:	1949      	addeq	r1, r1, r5
 8008f2e:	6021      	streq	r1, [r4, #0]
 8008f30:	e7ed      	b.n	8008f0e <_free_r+0x22>
 8008f32:	461a      	mov	r2, r3
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	b10b      	cbz	r3, 8008f3c <_free_r+0x50>
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	d9fa      	bls.n	8008f32 <_free_r+0x46>
 8008f3c:	6811      	ldr	r1, [r2, #0]
 8008f3e:	1855      	adds	r5, r2, r1
 8008f40:	42a5      	cmp	r5, r4
 8008f42:	d10b      	bne.n	8008f5c <_free_r+0x70>
 8008f44:	6824      	ldr	r4, [r4, #0]
 8008f46:	4421      	add	r1, r4
 8008f48:	1854      	adds	r4, r2, r1
 8008f4a:	42a3      	cmp	r3, r4
 8008f4c:	6011      	str	r1, [r2, #0]
 8008f4e:	d1e0      	bne.n	8008f12 <_free_r+0x26>
 8008f50:	681c      	ldr	r4, [r3, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	6053      	str	r3, [r2, #4]
 8008f56:	440c      	add	r4, r1
 8008f58:	6014      	str	r4, [r2, #0]
 8008f5a:	e7da      	b.n	8008f12 <_free_r+0x26>
 8008f5c:	d902      	bls.n	8008f64 <_free_r+0x78>
 8008f5e:	230c      	movs	r3, #12
 8008f60:	6003      	str	r3, [r0, #0]
 8008f62:	e7d6      	b.n	8008f12 <_free_r+0x26>
 8008f64:	6825      	ldr	r5, [r4, #0]
 8008f66:	1961      	adds	r1, r4, r5
 8008f68:	428b      	cmp	r3, r1
 8008f6a:	bf04      	itt	eq
 8008f6c:	6819      	ldreq	r1, [r3, #0]
 8008f6e:	685b      	ldreq	r3, [r3, #4]
 8008f70:	6063      	str	r3, [r4, #4]
 8008f72:	bf04      	itt	eq
 8008f74:	1949      	addeq	r1, r1, r5
 8008f76:	6021      	streq	r1, [r4, #0]
 8008f78:	6054      	str	r4, [r2, #4]
 8008f7a:	e7ca      	b.n	8008f12 <_free_r+0x26>
 8008f7c:	b003      	add	sp, #12
 8008f7e:	bd30      	pop	{r4, r5, pc}
 8008f80:	2400ee5c 	.word	0x2400ee5c

08008f84 <sbrk_aligned>:
 8008f84:	b570      	push	{r4, r5, r6, lr}
 8008f86:	4e0e      	ldr	r6, [pc, #56]	; (8008fc0 <sbrk_aligned+0x3c>)
 8008f88:	460c      	mov	r4, r1
 8008f8a:	6831      	ldr	r1, [r6, #0]
 8008f8c:	4605      	mov	r5, r0
 8008f8e:	b911      	cbnz	r1, 8008f96 <sbrk_aligned+0x12>
 8008f90:	f000 fba6 	bl	80096e0 <_sbrk_r>
 8008f94:	6030      	str	r0, [r6, #0]
 8008f96:	4621      	mov	r1, r4
 8008f98:	4628      	mov	r0, r5
 8008f9a:	f000 fba1 	bl	80096e0 <_sbrk_r>
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	d00a      	beq.n	8008fb8 <sbrk_aligned+0x34>
 8008fa2:	1cc4      	adds	r4, r0, #3
 8008fa4:	f024 0403 	bic.w	r4, r4, #3
 8008fa8:	42a0      	cmp	r0, r4
 8008faa:	d007      	beq.n	8008fbc <sbrk_aligned+0x38>
 8008fac:	1a21      	subs	r1, r4, r0
 8008fae:	4628      	mov	r0, r5
 8008fb0:	f000 fb96 	bl	80096e0 <_sbrk_r>
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	d101      	bne.n	8008fbc <sbrk_aligned+0x38>
 8008fb8:	f04f 34ff 	mov.w	r4, #4294967295
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	bd70      	pop	{r4, r5, r6, pc}
 8008fc0:	2400ee60 	.word	0x2400ee60

08008fc4 <_malloc_r>:
 8008fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc8:	1ccd      	adds	r5, r1, #3
 8008fca:	f025 0503 	bic.w	r5, r5, #3
 8008fce:	3508      	adds	r5, #8
 8008fd0:	2d0c      	cmp	r5, #12
 8008fd2:	bf38      	it	cc
 8008fd4:	250c      	movcc	r5, #12
 8008fd6:	2d00      	cmp	r5, #0
 8008fd8:	4607      	mov	r7, r0
 8008fda:	db01      	blt.n	8008fe0 <_malloc_r+0x1c>
 8008fdc:	42a9      	cmp	r1, r5
 8008fde:	d905      	bls.n	8008fec <_malloc_r+0x28>
 8008fe0:	230c      	movs	r3, #12
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	2600      	movs	r6, #0
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80090c0 <_malloc_r+0xfc>
 8008ff0:	f000 f868 	bl	80090c4 <__malloc_lock>
 8008ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ff8:	461c      	mov	r4, r3
 8008ffa:	bb5c      	cbnz	r4, 8009054 <_malloc_r+0x90>
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	4638      	mov	r0, r7
 8009000:	f7ff ffc0 	bl	8008f84 <sbrk_aligned>
 8009004:	1c43      	adds	r3, r0, #1
 8009006:	4604      	mov	r4, r0
 8009008:	d155      	bne.n	80090b6 <_malloc_r+0xf2>
 800900a:	f8d8 4000 	ldr.w	r4, [r8]
 800900e:	4626      	mov	r6, r4
 8009010:	2e00      	cmp	r6, #0
 8009012:	d145      	bne.n	80090a0 <_malloc_r+0xdc>
 8009014:	2c00      	cmp	r4, #0
 8009016:	d048      	beq.n	80090aa <_malloc_r+0xe6>
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	4631      	mov	r1, r6
 800901c:	4638      	mov	r0, r7
 800901e:	eb04 0903 	add.w	r9, r4, r3
 8009022:	f000 fb5d 	bl	80096e0 <_sbrk_r>
 8009026:	4581      	cmp	r9, r0
 8009028:	d13f      	bne.n	80090aa <_malloc_r+0xe6>
 800902a:	6821      	ldr	r1, [r4, #0]
 800902c:	1a6d      	subs	r5, r5, r1
 800902e:	4629      	mov	r1, r5
 8009030:	4638      	mov	r0, r7
 8009032:	f7ff ffa7 	bl	8008f84 <sbrk_aligned>
 8009036:	3001      	adds	r0, #1
 8009038:	d037      	beq.n	80090aa <_malloc_r+0xe6>
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	442b      	add	r3, r5
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	f8d8 3000 	ldr.w	r3, [r8]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d038      	beq.n	80090ba <_malloc_r+0xf6>
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	42a2      	cmp	r2, r4
 800904c:	d12b      	bne.n	80090a6 <_malloc_r+0xe2>
 800904e:	2200      	movs	r2, #0
 8009050:	605a      	str	r2, [r3, #4]
 8009052:	e00f      	b.n	8009074 <_malloc_r+0xb0>
 8009054:	6822      	ldr	r2, [r4, #0]
 8009056:	1b52      	subs	r2, r2, r5
 8009058:	d41f      	bmi.n	800909a <_malloc_r+0xd6>
 800905a:	2a0b      	cmp	r2, #11
 800905c:	d917      	bls.n	800908e <_malloc_r+0xca>
 800905e:	1961      	adds	r1, r4, r5
 8009060:	42a3      	cmp	r3, r4
 8009062:	6025      	str	r5, [r4, #0]
 8009064:	bf18      	it	ne
 8009066:	6059      	strne	r1, [r3, #4]
 8009068:	6863      	ldr	r3, [r4, #4]
 800906a:	bf08      	it	eq
 800906c:	f8c8 1000 	streq.w	r1, [r8]
 8009070:	5162      	str	r2, [r4, r5]
 8009072:	604b      	str	r3, [r1, #4]
 8009074:	4638      	mov	r0, r7
 8009076:	f104 060b 	add.w	r6, r4, #11
 800907a:	f000 f829 	bl	80090d0 <__malloc_unlock>
 800907e:	f026 0607 	bic.w	r6, r6, #7
 8009082:	1d23      	adds	r3, r4, #4
 8009084:	1af2      	subs	r2, r6, r3
 8009086:	d0ae      	beq.n	8008fe6 <_malloc_r+0x22>
 8009088:	1b9b      	subs	r3, r3, r6
 800908a:	50a3      	str	r3, [r4, r2]
 800908c:	e7ab      	b.n	8008fe6 <_malloc_r+0x22>
 800908e:	42a3      	cmp	r3, r4
 8009090:	6862      	ldr	r2, [r4, #4]
 8009092:	d1dd      	bne.n	8009050 <_malloc_r+0x8c>
 8009094:	f8c8 2000 	str.w	r2, [r8]
 8009098:	e7ec      	b.n	8009074 <_malloc_r+0xb0>
 800909a:	4623      	mov	r3, r4
 800909c:	6864      	ldr	r4, [r4, #4]
 800909e:	e7ac      	b.n	8008ffa <_malloc_r+0x36>
 80090a0:	4634      	mov	r4, r6
 80090a2:	6876      	ldr	r6, [r6, #4]
 80090a4:	e7b4      	b.n	8009010 <_malloc_r+0x4c>
 80090a6:	4613      	mov	r3, r2
 80090a8:	e7cc      	b.n	8009044 <_malloc_r+0x80>
 80090aa:	230c      	movs	r3, #12
 80090ac:	603b      	str	r3, [r7, #0]
 80090ae:	4638      	mov	r0, r7
 80090b0:	f000 f80e 	bl	80090d0 <__malloc_unlock>
 80090b4:	e797      	b.n	8008fe6 <_malloc_r+0x22>
 80090b6:	6025      	str	r5, [r4, #0]
 80090b8:	e7dc      	b.n	8009074 <_malloc_r+0xb0>
 80090ba:	605b      	str	r3, [r3, #4]
 80090bc:	deff      	udf	#255	; 0xff
 80090be:	bf00      	nop
 80090c0:	2400ee5c 	.word	0x2400ee5c

080090c4 <__malloc_lock>:
 80090c4:	4801      	ldr	r0, [pc, #4]	; (80090cc <__malloc_lock+0x8>)
 80090c6:	f7ff bf0f 	b.w	8008ee8 <__retarget_lock_acquire_recursive>
 80090ca:	bf00      	nop
 80090cc:	2400ee58 	.word	0x2400ee58

080090d0 <__malloc_unlock>:
 80090d0:	4801      	ldr	r0, [pc, #4]	; (80090d8 <__malloc_unlock+0x8>)
 80090d2:	f7ff bf0a 	b.w	8008eea <__retarget_lock_release_recursive>
 80090d6:	bf00      	nop
 80090d8:	2400ee58 	.word	0x2400ee58

080090dc <__ssputs_r>:
 80090dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e0:	688e      	ldr	r6, [r1, #8]
 80090e2:	461f      	mov	r7, r3
 80090e4:	42be      	cmp	r6, r7
 80090e6:	680b      	ldr	r3, [r1, #0]
 80090e8:	4682      	mov	sl, r0
 80090ea:	460c      	mov	r4, r1
 80090ec:	4690      	mov	r8, r2
 80090ee:	d82c      	bhi.n	800914a <__ssputs_r+0x6e>
 80090f0:	898a      	ldrh	r2, [r1, #12]
 80090f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090f6:	d026      	beq.n	8009146 <__ssputs_r+0x6a>
 80090f8:	6965      	ldr	r5, [r4, #20]
 80090fa:	6909      	ldr	r1, [r1, #16]
 80090fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009100:	eba3 0901 	sub.w	r9, r3, r1
 8009104:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009108:	1c7b      	adds	r3, r7, #1
 800910a:	444b      	add	r3, r9
 800910c:	106d      	asrs	r5, r5, #1
 800910e:	429d      	cmp	r5, r3
 8009110:	bf38      	it	cc
 8009112:	461d      	movcc	r5, r3
 8009114:	0553      	lsls	r3, r2, #21
 8009116:	d527      	bpl.n	8009168 <__ssputs_r+0x8c>
 8009118:	4629      	mov	r1, r5
 800911a:	f7ff ff53 	bl	8008fc4 <_malloc_r>
 800911e:	4606      	mov	r6, r0
 8009120:	b360      	cbz	r0, 800917c <__ssputs_r+0xa0>
 8009122:	6921      	ldr	r1, [r4, #16]
 8009124:	464a      	mov	r2, r9
 8009126:	f000 faeb 	bl	8009700 <memcpy>
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009134:	81a3      	strh	r3, [r4, #12]
 8009136:	6126      	str	r6, [r4, #16]
 8009138:	6165      	str	r5, [r4, #20]
 800913a:	444e      	add	r6, r9
 800913c:	eba5 0509 	sub.w	r5, r5, r9
 8009140:	6026      	str	r6, [r4, #0]
 8009142:	60a5      	str	r5, [r4, #8]
 8009144:	463e      	mov	r6, r7
 8009146:	42be      	cmp	r6, r7
 8009148:	d900      	bls.n	800914c <__ssputs_r+0x70>
 800914a:	463e      	mov	r6, r7
 800914c:	6820      	ldr	r0, [r4, #0]
 800914e:	4632      	mov	r2, r6
 8009150:	4641      	mov	r1, r8
 8009152:	f000 faab 	bl	80096ac <memmove>
 8009156:	68a3      	ldr	r3, [r4, #8]
 8009158:	1b9b      	subs	r3, r3, r6
 800915a:	60a3      	str	r3, [r4, #8]
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	4433      	add	r3, r6
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	2000      	movs	r0, #0
 8009164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009168:	462a      	mov	r2, r5
 800916a:	f000 fad7 	bl	800971c <_realloc_r>
 800916e:	4606      	mov	r6, r0
 8009170:	2800      	cmp	r0, #0
 8009172:	d1e0      	bne.n	8009136 <__ssputs_r+0x5a>
 8009174:	6921      	ldr	r1, [r4, #16]
 8009176:	4650      	mov	r0, sl
 8009178:	f7ff feb8 	bl	8008eec <_free_r>
 800917c:	230c      	movs	r3, #12
 800917e:	f8ca 3000 	str.w	r3, [sl]
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009188:	81a3      	strh	r3, [r4, #12]
 800918a:	f04f 30ff 	mov.w	r0, #4294967295
 800918e:	e7e9      	b.n	8009164 <__ssputs_r+0x88>

08009190 <_svfiprintf_r>:
 8009190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009194:	4698      	mov	r8, r3
 8009196:	898b      	ldrh	r3, [r1, #12]
 8009198:	061b      	lsls	r3, r3, #24
 800919a:	b09d      	sub	sp, #116	; 0x74
 800919c:	4607      	mov	r7, r0
 800919e:	460d      	mov	r5, r1
 80091a0:	4614      	mov	r4, r2
 80091a2:	d50e      	bpl.n	80091c2 <_svfiprintf_r+0x32>
 80091a4:	690b      	ldr	r3, [r1, #16]
 80091a6:	b963      	cbnz	r3, 80091c2 <_svfiprintf_r+0x32>
 80091a8:	2140      	movs	r1, #64	; 0x40
 80091aa:	f7ff ff0b 	bl	8008fc4 <_malloc_r>
 80091ae:	6028      	str	r0, [r5, #0]
 80091b0:	6128      	str	r0, [r5, #16]
 80091b2:	b920      	cbnz	r0, 80091be <_svfiprintf_r+0x2e>
 80091b4:	230c      	movs	r3, #12
 80091b6:	603b      	str	r3, [r7, #0]
 80091b8:	f04f 30ff 	mov.w	r0, #4294967295
 80091bc:	e0d0      	b.n	8009360 <_svfiprintf_r+0x1d0>
 80091be:	2340      	movs	r3, #64	; 0x40
 80091c0:	616b      	str	r3, [r5, #20]
 80091c2:	2300      	movs	r3, #0
 80091c4:	9309      	str	r3, [sp, #36]	; 0x24
 80091c6:	2320      	movs	r3, #32
 80091c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80091d0:	2330      	movs	r3, #48	; 0x30
 80091d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009378 <_svfiprintf_r+0x1e8>
 80091d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091da:	f04f 0901 	mov.w	r9, #1
 80091de:	4623      	mov	r3, r4
 80091e0:	469a      	mov	sl, r3
 80091e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091e6:	b10a      	cbz	r2, 80091ec <_svfiprintf_r+0x5c>
 80091e8:	2a25      	cmp	r2, #37	; 0x25
 80091ea:	d1f9      	bne.n	80091e0 <_svfiprintf_r+0x50>
 80091ec:	ebba 0b04 	subs.w	fp, sl, r4
 80091f0:	d00b      	beq.n	800920a <_svfiprintf_r+0x7a>
 80091f2:	465b      	mov	r3, fp
 80091f4:	4622      	mov	r2, r4
 80091f6:	4629      	mov	r1, r5
 80091f8:	4638      	mov	r0, r7
 80091fa:	f7ff ff6f 	bl	80090dc <__ssputs_r>
 80091fe:	3001      	adds	r0, #1
 8009200:	f000 80a9 	beq.w	8009356 <_svfiprintf_r+0x1c6>
 8009204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009206:	445a      	add	r2, fp
 8009208:	9209      	str	r2, [sp, #36]	; 0x24
 800920a:	f89a 3000 	ldrb.w	r3, [sl]
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 80a1 	beq.w	8009356 <_svfiprintf_r+0x1c6>
 8009214:	2300      	movs	r3, #0
 8009216:	f04f 32ff 	mov.w	r2, #4294967295
 800921a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800921e:	f10a 0a01 	add.w	sl, sl, #1
 8009222:	9304      	str	r3, [sp, #16]
 8009224:	9307      	str	r3, [sp, #28]
 8009226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800922a:	931a      	str	r3, [sp, #104]	; 0x68
 800922c:	4654      	mov	r4, sl
 800922e:	2205      	movs	r2, #5
 8009230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009234:	4850      	ldr	r0, [pc, #320]	; (8009378 <_svfiprintf_r+0x1e8>)
 8009236:	f7f7 f863 	bl	8000300 <memchr>
 800923a:	9a04      	ldr	r2, [sp, #16]
 800923c:	b9d8      	cbnz	r0, 8009276 <_svfiprintf_r+0xe6>
 800923e:	06d0      	lsls	r0, r2, #27
 8009240:	bf44      	itt	mi
 8009242:	2320      	movmi	r3, #32
 8009244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009248:	0711      	lsls	r1, r2, #28
 800924a:	bf44      	itt	mi
 800924c:	232b      	movmi	r3, #43	; 0x2b
 800924e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009252:	f89a 3000 	ldrb.w	r3, [sl]
 8009256:	2b2a      	cmp	r3, #42	; 0x2a
 8009258:	d015      	beq.n	8009286 <_svfiprintf_r+0xf6>
 800925a:	9a07      	ldr	r2, [sp, #28]
 800925c:	4654      	mov	r4, sl
 800925e:	2000      	movs	r0, #0
 8009260:	f04f 0c0a 	mov.w	ip, #10
 8009264:	4621      	mov	r1, r4
 8009266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800926a:	3b30      	subs	r3, #48	; 0x30
 800926c:	2b09      	cmp	r3, #9
 800926e:	d94d      	bls.n	800930c <_svfiprintf_r+0x17c>
 8009270:	b1b0      	cbz	r0, 80092a0 <_svfiprintf_r+0x110>
 8009272:	9207      	str	r2, [sp, #28]
 8009274:	e014      	b.n	80092a0 <_svfiprintf_r+0x110>
 8009276:	eba0 0308 	sub.w	r3, r0, r8
 800927a:	fa09 f303 	lsl.w	r3, r9, r3
 800927e:	4313      	orrs	r3, r2
 8009280:	9304      	str	r3, [sp, #16]
 8009282:	46a2      	mov	sl, r4
 8009284:	e7d2      	b.n	800922c <_svfiprintf_r+0x9c>
 8009286:	9b03      	ldr	r3, [sp, #12]
 8009288:	1d19      	adds	r1, r3, #4
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	9103      	str	r1, [sp, #12]
 800928e:	2b00      	cmp	r3, #0
 8009290:	bfbb      	ittet	lt
 8009292:	425b      	neglt	r3, r3
 8009294:	f042 0202 	orrlt.w	r2, r2, #2
 8009298:	9307      	strge	r3, [sp, #28]
 800929a:	9307      	strlt	r3, [sp, #28]
 800929c:	bfb8      	it	lt
 800929e:	9204      	strlt	r2, [sp, #16]
 80092a0:	7823      	ldrb	r3, [r4, #0]
 80092a2:	2b2e      	cmp	r3, #46	; 0x2e
 80092a4:	d10c      	bne.n	80092c0 <_svfiprintf_r+0x130>
 80092a6:	7863      	ldrb	r3, [r4, #1]
 80092a8:	2b2a      	cmp	r3, #42	; 0x2a
 80092aa:	d134      	bne.n	8009316 <_svfiprintf_r+0x186>
 80092ac:	9b03      	ldr	r3, [sp, #12]
 80092ae:	1d1a      	adds	r2, r3, #4
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	9203      	str	r2, [sp, #12]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	bfb8      	it	lt
 80092b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80092bc:	3402      	adds	r4, #2
 80092be:	9305      	str	r3, [sp, #20]
 80092c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009388 <_svfiprintf_r+0x1f8>
 80092c4:	7821      	ldrb	r1, [r4, #0]
 80092c6:	2203      	movs	r2, #3
 80092c8:	4650      	mov	r0, sl
 80092ca:	f7f7 f819 	bl	8000300 <memchr>
 80092ce:	b138      	cbz	r0, 80092e0 <_svfiprintf_r+0x150>
 80092d0:	9b04      	ldr	r3, [sp, #16]
 80092d2:	eba0 000a 	sub.w	r0, r0, sl
 80092d6:	2240      	movs	r2, #64	; 0x40
 80092d8:	4082      	lsls	r2, r0
 80092da:	4313      	orrs	r3, r2
 80092dc:	3401      	adds	r4, #1
 80092de:	9304      	str	r3, [sp, #16]
 80092e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e4:	4825      	ldr	r0, [pc, #148]	; (800937c <_svfiprintf_r+0x1ec>)
 80092e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092ea:	2206      	movs	r2, #6
 80092ec:	f7f7 f808 	bl	8000300 <memchr>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d038      	beq.n	8009366 <_svfiprintf_r+0x1d6>
 80092f4:	4b22      	ldr	r3, [pc, #136]	; (8009380 <_svfiprintf_r+0x1f0>)
 80092f6:	bb1b      	cbnz	r3, 8009340 <_svfiprintf_r+0x1b0>
 80092f8:	9b03      	ldr	r3, [sp, #12]
 80092fa:	3307      	adds	r3, #7
 80092fc:	f023 0307 	bic.w	r3, r3, #7
 8009300:	3308      	adds	r3, #8
 8009302:	9303      	str	r3, [sp, #12]
 8009304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009306:	4433      	add	r3, r6
 8009308:	9309      	str	r3, [sp, #36]	; 0x24
 800930a:	e768      	b.n	80091de <_svfiprintf_r+0x4e>
 800930c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009310:	460c      	mov	r4, r1
 8009312:	2001      	movs	r0, #1
 8009314:	e7a6      	b.n	8009264 <_svfiprintf_r+0xd4>
 8009316:	2300      	movs	r3, #0
 8009318:	3401      	adds	r4, #1
 800931a:	9305      	str	r3, [sp, #20]
 800931c:	4619      	mov	r1, r3
 800931e:	f04f 0c0a 	mov.w	ip, #10
 8009322:	4620      	mov	r0, r4
 8009324:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009328:	3a30      	subs	r2, #48	; 0x30
 800932a:	2a09      	cmp	r2, #9
 800932c:	d903      	bls.n	8009336 <_svfiprintf_r+0x1a6>
 800932e:	2b00      	cmp	r3, #0
 8009330:	d0c6      	beq.n	80092c0 <_svfiprintf_r+0x130>
 8009332:	9105      	str	r1, [sp, #20]
 8009334:	e7c4      	b.n	80092c0 <_svfiprintf_r+0x130>
 8009336:	fb0c 2101 	mla	r1, ip, r1, r2
 800933a:	4604      	mov	r4, r0
 800933c:	2301      	movs	r3, #1
 800933e:	e7f0      	b.n	8009322 <_svfiprintf_r+0x192>
 8009340:	ab03      	add	r3, sp, #12
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	462a      	mov	r2, r5
 8009346:	4b0f      	ldr	r3, [pc, #60]	; (8009384 <_svfiprintf_r+0x1f4>)
 8009348:	a904      	add	r1, sp, #16
 800934a:	4638      	mov	r0, r7
 800934c:	f3af 8000 	nop.w
 8009350:	1c42      	adds	r2, r0, #1
 8009352:	4606      	mov	r6, r0
 8009354:	d1d6      	bne.n	8009304 <_svfiprintf_r+0x174>
 8009356:	89ab      	ldrh	r3, [r5, #12]
 8009358:	065b      	lsls	r3, r3, #25
 800935a:	f53f af2d 	bmi.w	80091b8 <_svfiprintf_r+0x28>
 800935e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009360:	b01d      	add	sp, #116	; 0x74
 8009362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009366:	ab03      	add	r3, sp, #12
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	462a      	mov	r2, r5
 800936c:	4b05      	ldr	r3, [pc, #20]	; (8009384 <_svfiprintf_r+0x1f4>)
 800936e:	a904      	add	r1, sp, #16
 8009370:	4638      	mov	r0, r7
 8009372:	f000 f879 	bl	8009468 <_printf_i>
 8009376:	e7eb      	b.n	8009350 <_svfiprintf_r+0x1c0>
 8009378:	080097e0 	.word	0x080097e0
 800937c:	080097ea 	.word	0x080097ea
 8009380:	00000000 	.word	0x00000000
 8009384:	080090dd 	.word	0x080090dd
 8009388:	080097e6 	.word	0x080097e6

0800938c <_printf_common>:
 800938c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009390:	4616      	mov	r6, r2
 8009392:	4699      	mov	r9, r3
 8009394:	688a      	ldr	r2, [r1, #8]
 8009396:	690b      	ldr	r3, [r1, #16]
 8009398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800939c:	4293      	cmp	r3, r2
 800939e:	bfb8      	it	lt
 80093a0:	4613      	movlt	r3, r2
 80093a2:	6033      	str	r3, [r6, #0]
 80093a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093a8:	4607      	mov	r7, r0
 80093aa:	460c      	mov	r4, r1
 80093ac:	b10a      	cbz	r2, 80093b2 <_printf_common+0x26>
 80093ae:	3301      	adds	r3, #1
 80093b0:	6033      	str	r3, [r6, #0]
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	0699      	lsls	r1, r3, #26
 80093b6:	bf42      	ittt	mi
 80093b8:	6833      	ldrmi	r3, [r6, #0]
 80093ba:	3302      	addmi	r3, #2
 80093bc:	6033      	strmi	r3, [r6, #0]
 80093be:	6825      	ldr	r5, [r4, #0]
 80093c0:	f015 0506 	ands.w	r5, r5, #6
 80093c4:	d106      	bne.n	80093d4 <_printf_common+0x48>
 80093c6:	f104 0a19 	add.w	sl, r4, #25
 80093ca:	68e3      	ldr	r3, [r4, #12]
 80093cc:	6832      	ldr	r2, [r6, #0]
 80093ce:	1a9b      	subs	r3, r3, r2
 80093d0:	42ab      	cmp	r3, r5
 80093d2:	dc26      	bgt.n	8009422 <_printf_common+0x96>
 80093d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093d8:	1e13      	subs	r3, r2, #0
 80093da:	6822      	ldr	r2, [r4, #0]
 80093dc:	bf18      	it	ne
 80093de:	2301      	movne	r3, #1
 80093e0:	0692      	lsls	r2, r2, #26
 80093e2:	d42b      	bmi.n	800943c <_printf_common+0xb0>
 80093e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093e8:	4649      	mov	r1, r9
 80093ea:	4638      	mov	r0, r7
 80093ec:	47c0      	blx	r8
 80093ee:	3001      	adds	r0, #1
 80093f0:	d01e      	beq.n	8009430 <_printf_common+0xa4>
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	6922      	ldr	r2, [r4, #16]
 80093f6:	f003 0306 	and.w	r3, r3, #6
 80093fa:	2b04      	cmp	r3, #4
 80093fc:	bf02      	ittt	eq
 80093fe:	68e5      	ldreq	r5, [r4, #12]
 8009400:	6833      	ldreq	r3, [r6, #0]
 8009402:	1aed      	subeq	r5, r5, r3
 8009404:	68a3      	ldr	r3, [r4, #8]
 8009406:	bf0c      	ite	eq
 8009408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800940c:	2500      	movne	r5, #0
 800940e:	4293      	cmp	r3, r2
 8009410:	bfc4      	itt	gt
 8009412:	1a9b      	subgt	r3, r3, r2
 8009414:	18ed      	addgt	r5, r5, r3
 8009416:	2600      	movs	r6, #0
 8009418:	341a      	adds	r4, #26
 800941a:	42b5      	cmp	r5, r6
 800941c:	d11a      	bne.n	8009454 <_printf_common+0xc8>
 800941e:	2000      	movs	r0, #0
 8009420:	e008      	b.n	8009434 <_printf_common+0xa8>
 8009422:	2301      	movs	r3, #1
 8009424:	4652      	mov	r2, sl
 8009426:	4649      	mov	r1, r9
 8009428:	4638      	mov	r0, r7
 800942a:	47c0      	blx	r8
 800942c:	3001      	adds	r0, #1
 800942e:	d103      	bne.n	8009438 <_printf_common+0xac>
 8009430:	f04f 30ff 	mov.w	r0, #4294967295
 8009434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009438:	3501      	adds	r5, #1
 800943a:	e7c6      	b.n	80093ca <_printf_common+0x3e>
 800943c:	18e1      	adds	r1, r4, r3
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	2030      	movs	r0, #48	; 0x30
 8009442:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009446:	4422      	add	r2, r4
 8009448:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800944c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009450:	3302      	adds	r3, #2
 8009452:	e7c7      	b.n	80093e4 <_printf_common+0x58>
 8009454:	2301      	movs	r3, #1
 8009456:	4622      	mov	r2, r4
 8009458:	4649      	mov	r1, r9
 800945a:	4638      	mov	r0, r7
 800945c:	47c0      	blx	r8
 800945e:	3001      	adds	r0, #1
 8009460:	d0e6      	beq.n	8009430 <_printf_common+0xa4>
 8009462:	3601      	adds	r6, #1
 8009464:	e7d9      	b.n	800941a <_printf_common+0x8e>
	...

08009468 <_printf_i>:
 8009468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800946c:	7e0f      	ldrb	r7, [r1, #24]
 800946e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009470:	2f78      	cmp	r7, #120	; 0x78
 8009472:	4691      	mov	r9, r2
 8009474:	4680      	mov	r8, r0
 8009476:	460c      	mov	r4, r1
 8009478:	469a      	mov	sl, r3
 800947a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800947e:	d807      	bhi.n	8009490 <_printf_i+0x28>
 8009480:	2f62      	cmp	r7, #98	; 0x62
 8009482:	d80a      	bhi.n	800949a <_printf_i+0x32>
 8009484:	2f00      	cmp	r7, #0
 8009486:	f000 80d4 	beq.w	8009632 <_printf_i+0x1ca>
 800948a:	2f58      	cmp	r7, #88	; 0x58
 800948c:	f000 80c0 	beq.w	8009610 <_printf_i+0x1a8>
 8009490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009498:	e03a      	b.n	8009510 <_printf_i+0xa8>
 800949a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800949e:	2b15      	cmp	r3, #21
 80094a0:	d8f6      	bhi.n	8009490 <_printf_i+0x28>
 80094a2:	a101      	add	r1, pc, #4	; (adr r1, 80094a8 <_printf_i+0x40>)
 80094a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094a8:	08009501 	.word	0x08009501
 80094ac:	08009515 	.word	0x08009515
 80094b0:	08009491 	.word	0x08009491
 80094b4:	08009491 	.word	0x08009491
 80094b8:	08009491 	.word	0x08009491
 80094bc:	08009491 	.word	0x08009491
 80094c0:	08009515 	.word	0x08009515
 80094c4:	08009491 	.word	0x08009491
 80094c8:	08009491 	.word	0x08009491
 80094cc:	08009491 	.word	0x08009491
 80094d0:	08009491 	.word	0x08009491
 80094d4:	08009619 	.word	0x08009619
 80094d8:	08009541 	.word	0x08009541
 80094dc:	080095d3 	.word	0x080095d3
 80094e0:	08009491 	.word	0x08009491
 80094e4:	08009491 	.word	0x08009491
 80094e8:	0800963b 	.word	0x0800963b
 80094ec:	08009491 	.word	0x08009491
 80094f0:	08009541 	.word	0x08009541
 80094f4:	08009491 	.word	0x08009491
 80094f8:	08009491 	.word	0x08009491
 80094fc:	080095db 	.word	0x080095db
 8009500:	682b      	ldr	r3, [r5, #0]
 8009502:	1d1a      	adds	r2, r3, #4
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	602a      	str	r2, [r5, #0]
 8009508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800950c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009510:	2301      	movs	r3, #1
 8009512:	e09f      	b.n	8009654 <_printf_i+0x1ec>
 8009514:	6820      	ldr	r0, [r4, #0]
 8009516:	682b      	ldr	r3, [r5, #0]
 8009518:	0607      	lsls	r7, r0, #24
 800951a:	f103 0104 	add.w	r1, r3, #4
 800951e:	6029      	str	r1, [r5, #0]
 8009520:	d501      	bpl.n	8009526 <_printf_i+0xbe>
 8009522:	681e      	ldr	r6, [r3, #0]
 8009524:	e003      	b.n	800952e <_printf_i+0xc6>
 8009526:	0646      	lsls	r6, r0, #25
 8009528:	d5fb      	bpl.n	8009522 <_printf_i+0xba>
 800952a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800952e:	2e00      	cmp	r6, #0
 8009530:	da03      	bge.n	800953a <_printf_i+0xd2>
 8009532:	232d      	movs	r3, #45	; 0x2d
 8009534:	4276      	negs	r6, r6
 8009536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800953a:	485a      	ldr	r0, [pc, #360]	; (80096a4 <_printf_i+0x23c>)
 800953c:	230a      	movs	r3, #10
 800953e:	e012      	b.n	8009566 <_printf_i+0xfe>
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	6820      	ldr	r0, [r4, #0]
 8009544:	1d19      	adds	r1, r3, #4
 8009546:	6029      	str	r1, [r5, #0]
 8009548:	0605      	lsls	r5, r0, #24
 800954a:	d501      	bpl.n	8009550 <_printf_i+0xe8>
 800954c:	681e      	ldr	r6, [r3, #0]
 800954e:	e002      	b.n	8009556 <_printf_i+0xee>
 8009550:	0641      	lsls	r1, r0, #25
 8009552:	d5fb      	bpl.n	800954c <_printf_i+0xe4>
 8009554:	881e      	ldrh	r6, [r3, #0]
 8009556:	4853      	ldr	r0, [pc, #332]	; (80096a4 <_printf_i+0x23c>)
 8009558:	2f6f      	cmp	r7, #111	; 0x6f
 800955a:	bf0c      	ite	eq
 800955c:	2308      	moveq	r3, #8
 800955e:	230a      	movne	r3, #10
 8009560:	2100      	movs	r1, #0
 8009562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009566:	6865      	ldr	r5, [r4, #4]
 8009568:	60a5      	str	r5, [r4, #8]
 800956a:	2d00      	cmp	r5, #0
 800956c:	bfa2      	ittt	ge
 800956e:	6821      	ldrge	r1, [r4, #0]
 8009570:	f021 0104 	bicge.w	r1, r1, #4
 8009574:	6021      	strge	r1, [r4, #0]
 8009576:	b90e      	cbnz	r6, 800957c <_printf_i+0x114>
 8009578:	2d00      	cmp	r5, #0
 800957a:	d04b      	beq.n	8009614 <_printf_i+0x1ac>
 800957c:	4615      	mov	r5, r2
 800957e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009582:	fb03 6711 	mls	r7, r3, r1, r6
 8009586:	5dc7      	ldrb	r7, [r0, r7]
 8009588:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800958c:	4637      	mov	r7, r6
 800958e:	42bb      	cmp	r3, r7
 8009590:	460e      	mov	r6, r1
 8009592:	d9f4      	bls.n	800957e <_printf_i+0x116>
 8009594:	2b08      	cmp	r3, #8
 8009596:	d10b      	bne.n	80095b0 <_printf_i+0x148>
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	07de      	lsls	r6, r3, #31
 800959c:	d508      	bpl.n	80095b0 <_printf_i+0x148>
 800959e:	6923      	ldr	r3, [r4, #16]
 80095a0:	6861      	ldr	r1, [r4, #4]
 80095a2:	4299      	cmp	r1, r3
 80095a4:	bfde      	ittt	le
 80095a6:	2330      	movle	r3, #48	; 0x30
 80095a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095b0:	1b52      	subs	r2, r2, r5
 80095b2:	6122      	str	r2, [r4, #16]
 80095b4:	f8cd a000 	str.w	sl, [sp]
 80095b8:	464b      	mov	r3, r9
 80095ba:	aa03      	add	r2, sp, #12
 80095bc:	4621      	mov	r1, r4
 80095be:	4640      	mov	r0, r8
 80095c0:	f7ff fee4 	bl	800938c <_printf_common>
 80095c4:	3001      	adds	r0, #1
 80095c6:	d14a      	bne.n	800965e <_printf_i+0x1f6>
 80095c8:	f04f 30ff 	mov.w	r0, #4294967295
 80095cc:	b004      	add	sp, #16
 80095ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	f043 0320 	orr.w	r3, r3, #32
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	4833      	ldr	r0, [pc, #204]	; (80096a8 <_printf_i+0x240>)
 80095dc:	2778      	movs	r7, #120	; 0x78
 80095de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	6829      	ldr	r1, [r5, #0]
 80095e6:	061f      	lsls	r7, r3, #24
 80095e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80095ec:	d402      	bmi.n	80095f4 <_printf_i+0x18c>
 80095ee:	065f      	lsls	r7, r3, #25
 80095f0:	bf48      	it	mi
 80095f2:	b2b6      	uxthmi	r6, r6
 80095f4:	07df      	lsls	r7, r3, #31
 80095f6:	bf48      	it	mi
 80095f8:	f043 0320 	orrmi.w	r3, r3, #32
 80095fc:	6029      	str	r1, [r5, #0]
 80095fe:	bf48      	it	mi
 8009600:	6023      	strmi	r3, [r4, #0]
 8009602:	b91e      	cbnz	r6, 800960c <_printf_i+0x1a4>
 8009604:	6823      	ldr	r3, [r4, #0]
 8009606:	f023 0320 	bic.w	r3, r3, #32
 800960a:	6023      	str	r3, [r4, #0]
 800960c:	2310      	movs	r3, #16
 800960e:	e7a7      	b.n	8009560 <_printf_i+0xf8>
 8009610:	4824      	ldr	r0, [pc, #144]	; (80096a4 <_printf_i+0x23c>)
 8009612:	e7e4      	b.n	80095de <_printf_i+0x176>
 8009614:	4615      	mov	r5, r2
 8009616:	e7bd      	b.n	8009594 <_printf_i+0x12c>
 8009618:	682b      	ldr	r3, [r5, #0]
 800961a:	6826      	ldr	r6, [r4, #0]
 800961c:	6961      	ldr	r1, [r4, #20]
 800961e:	1d18      	adds	r0, r3, #4
 8009620:	6028      	str	r0, [r5, #0]
 8009622:	0635      	lsls	r5, r6, #24
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	d501      	bpl.n	800962c <_printf_i+0x1c4>
 8009628:	6019      	str	r1, [r3, #0]
 800962a:	e002      	b.n	8009632 <_printf_i+0x1ca>
 800962c:	0670      	lsls	r0, r6, #25
 800962e:	d5fb      	bpl.n	8009628 <_printf_i+0x1c0>
 8009630:	8019      	strh	r1, [r3, #0]
 8009632:	2300      	movs	r3, #0
 8009634:	6123      	str	r3, [r4, #16]
 8009636:	4615      	mov	r5, r2
 8009638:	e7bc      	b.n	80095b4 <_printf_i+0x14c>
 800963a:	682b      	ldr	r3, [r5, #0]
 800963c:	1d1a      	adds	r2, r3, #4
 800963e:	602a      	str	r2, [r5, #0]
 8009640:	681d      	ldr	r5, [r3, #0]
 8009642:	6862      	ldr	r2, [r4, #4]
 8009644:	2100      	movs	r1, #0
 8009646:	4628      	mov	r0, r5
 8009648:	f7f6 fe5a 	bl	8000300 <memchr>
 800964c:	b108      	cbz	r0, 8009652 <_printf_i+0x1ea>
 800964e:	1b40      	subs	r0, r0, r5
 8009650:	6060      	str	r0, [r4, #4]
 8009652:	6863      	ldr	r3, [r4, #4]
 8009654:	6123      	str	r3, [r4, #16]
 8009656:	2300      	movs	r3, #0
 8009658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800965c:	e7aa      	b.n	80095b4 <_printf_i+0x14c>
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	462a      	mov	r2, r5
 8009662:	4649      	mov	r1, r9
 8009664:	4640      	mov	r0, r8
 8009666:	47d0      	blx	sl
 8009668:	3001      	adds	r0, #1
 800966a:	d0ad      	beq.n	80095c8 <_printf_i+0x160>
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	079b      	lsls	r3, r3, #30
 8009670:	d413      	bmi.n	800969a <_printf_i+0x232>
 8009672:	68e0      	ldr	r0, [r4, #12]
 8009674:	9b03      	ldr	r3, [sp, #12]
 8009676:	4298      	cmp	r0, r3
 8009678:	bfb8      	it	lt
 800967a:	4618      	movlt	r0, r3
 800967c:	e7a6      	b.n	80095cc <_printf_i+0x164>
 800967e:	2301      	movs	r3, #1
 8009680:	4632      	mov	r2, r6
 8009682:	4649      	mov	r1, r9
 8009684:	4640      	mov	r0, r8
 8009686:	47d0      	blx	sl
 8009688:	3001      	adds	r0, #1
 800968a:	d09d      	beq.n	80095c8 <_printf_i+0x160>
 800968c:	3501      	adds	r5, #1
 800968e:	68e3      	ldr	r3, [r4, #12]
 8009690:	9903      	ldr	r1, [sp, #12]
 8009692:	1a5b      	subs	r3, r3, r1
 8009694:	42ab      	cmp	r3, r5
 8009696:	dcf2      	bgt.n	800967e <_printf_i+0x216>
 8009698:	e7eb      	b.n	8009672 <_printf_i+0x20a>
 800969a:	2500      	movs	r5, #0
 800969c:	f104 0619 	add.w	r6, r4, #25
 80096a0:	e7f5      	b.n	800968e <_printf_i+0x226>
 80096a2:	bf00      	nop
 80096a4:	080097f1 	.word	0x080097f1
 80096a8:	08009802 	.word	0x08009802

080096ac <memmove>:
 80096ac:	4288      	cmp	r0, r1
 80096ae:	b510      	push	{r4, lr}
 80096b0:	eb01 0402 	add.w	r4, r1, r2
 80096b4:	d902      	bls.n	80096bc <memmove+0x10>
 80096b6:	4284      	cmp	r4, r0
 80096b8:	4623      	mov	r3, r4
 80096ba:	d807      	bhi.n	80096cc <memmove+0x20>
 80096bc:	1e43      	subs	r3, r0, #1
 80096be:	42a1      	cmp	r1, r4
 80096c0:	d008      	beq.n	80096d4 <memmove+0x28>
 80096c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096ca:	e7f8      	b.n	80096be <memmove+0x12>
 80096cc:	4402      	add	r2, r0
 80096ce:	4601      	mov	r1, r0
 80096d0:	428a      	cmp	r2, r1
 80096d2:	d100      	bne.n	80096d6 <memmove+0x2a>
 80096d4:	bd10      	pop	{r4, pc}
 80096d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096de:	e7f7      	b.n	80096d0 <memmove+0x24>

080096e0 <_sbrk_r>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	4d06      	ldr	r5, [pc, #24]	; (80096fc <_sbrk_r+0x1c>)
 80096e4:	2300      	movs	r3, #0
 80096e6:	4604      	mov	r4, r0
 80096e8:	4608      	mov	r0, r1
 80096ea:	602b      	str	r3, [r5, #0]
 80096ec:	f7f8 f98e 	bl	8001a0c <_sbrk>
 80096f0:	1c43      	adds	r3, r0, #1
 80096f2:	d102      	bne.n	80096fa <_sbrk_r+0x1a>
 80096f4:	682b      	ldr	r3, [r5, #0]
 80096f6:	b103      	cbz	r3, 80096fa <_sbrk_r+0x1a>
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	bd38      	pop	{r3, r4, r5, pc}
 80096fc:	2400ee54 	.word	0x2400ee54

08009700 <memcpy>:
 8009700:	440a      	add	r2, r1
 8009702:	4291      	cmp	r1, r2
 8009704:	f100 33ff 	add.w	r3, r0, #4294967295
 8009708:	d100      	bne.n	800970c <memcpy+0xc>
 800970a:	4770      	bx	lr
 800970c:	b510      	push	{r4, lr}
 800970e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009712:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009716:	4291      	cmp	r1, r2
 8009718:	d1f9      	bne.n	800970e <memcpy+0xe>
 800971a:	bd10      	pop	{r4, pc}

0800971c <_realloc_r>:
 800971c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009720:	4680      	mov	r8, r0
 8009722:	4614      	mov	r4, r2
 8009724:	460e      	mov	r6, r1
 8009726:	b921      	cbnz	r1, 8009732 <_realloc_r+0x16>
 8009728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800972c:	4611      	mov	r1, r2
 800972e:	f7ff bc49 	b.w	8008fc4 <_malloc_r>
 8009732:	b92a      	cbnz	r2, 8009740 <_realloc_r+0x24>
 8009734:	f7ff fbda 	bl	8008eec <_free_r>
 8009738:	4625      	mov	r5, r4
 800973a:	4628      	mov	r0, r5
 800973c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009740:	f000 f81b 	bl	800977a <_malloc_usable_size_r>
 8009744:	4284      	cmp	r4, r0
 8009746:	4607      	mov	r7, r0
 8009748:	d802      	bhi.n	8009750 <_realloc_r+0x34>
 800974a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800974e:	d812      	bhi.n	8009776 <_realloc_r+0x5a>
 8009750:	4621      	mov	r1, r4
 8009752:	4640      	mov	r0, r8
 8009754:	f7ff fc36 	bl	8008fc4 <_malloc_r>
 8009758:	4605      	mov	r5, r0
 800975a:	2800      	cmp	r0, #0
 800975c:	d0ed      	beq.n	800973a <_realloc_r+0x1e>
 800975e:	42bc      	cmp	r4, r7
 8009760:	4622      	mov	r2, r4
 8009762:	4631      	mov	r1, r6
 8009764:	bf28      	it	cs
 8009766:	463a      	movcs	r2, r7
 8009768:	f7ff ffca 	bl	8009700 <memcpy>
 800976c:	4631      	mov	r1, r6
 800976e:	4640      	mov	r0, r8
 8009770:	f7ff fbbc 	bl	8008eec <_free_r>
 8009774:	e7e1      	b.n	800973a <_realloc_r+0x1e>
 8009776:	4635      	mov	r5, r6
 8009778:	e7df      	b.n	800973a <_realloc_r+0x1e>

0800977a <_malloc_usable_size_r>:
 800977a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800977e:	1f18      	subs	r0, r3, #4
 8009780:	2b00      	cmp	r3, #0
 8009782:	bfbc      	itt	lt
 8009784:	580b      	ldrlt	r3, [r1, r0]
 8009786:	18c0      	addlt	r0, r0, r3
 8009788:	4770      	bx	lr
	...

0800978c <_init>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	bf00      	nop
 8009790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009792:	bc08      	pop	{r3}
 8009794:	469e      	mov	lr, r3
 8009796:	4770      	bx	lr

08009798 <_fini>:
 8009798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979a:	bf00      	nop
 800979c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979e:	bc08      	pop	{r3}
 80097a0:	469e      	mov	lr, r3
 80097a2:	4770      	bx	lr
