
PlungeCooler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f80c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  0800fac0  0800fac0  0001fac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fea4  0800fea4  0001fea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800feac  0800feac  0001feac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800feb0  0800feb0  0001feb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800feb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00061ea8  240001e0  08010094  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24062088  08010094  00022088  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001fcff  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003788  00000000  00000000  0003ff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001968  00000000  00000000  000436d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000013eb  00000000  00000000  00045040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000343c1  00000000  00000000  0004642b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000220f9  00000000  00000000  0007a7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015705f  00000000  00000000  0009c8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007e54  00000000  00000000  001f3944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001fb798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001e0 	.word	0x240001e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800faa4 	.word	0x0800faa4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e4 	.word	0x240001e4
 80002ec:	0800faa4 	.word	0x0800faa4

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <getCurrentTRH>:
#define SHT40_ADDRESS (0x44 << 1)
#include <stdint.h>
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart3;

void getCurrentTRH (float *values) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b08c      	sub	sp, #48	; 0x30
 80006a0:	af02      	add	r7, sp, #8
 80006a2:	6078      	str	r0, [r7, #4]
        HAL_StatusTypeDef ret;
	uint8_t data_tx[1] = {0xFD};
 80006a4:	23fd      	movs	r3, #253	; 0xfd
 80006a6:	753b      	strb	r3, [r7, #20]
	uint8_t data_rx[6];
	ret = HAL_I2C_Master_Transmit(&hi2c1, SHT40_ADDRESS, data_tx, 1, 1000);
 80006a8:	f107 0214 	add.w	r2, r7, #20
 80006ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	2301      	movs	r3, #1
 80006b4:	2188      	movs	r1, #136	; 0x88
 80006b6:	483a      	ldr	r0, [pc, #232]	; (80007a0 <getCurrentTRH+0x104>)
 80006b8:	f004 fa34 	bl	8004b24 <HAL_I2C_Master_Transmit>
 80006bc:	4603      	mov	r3, r0
 80006be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if ( ret != HAL_OK ) {
 80006c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d003      	beq.n	80006d2 <getCurrentTRH+0x36>
	  printf("Error Tx\r\n");
 80006ca:	4836      	ldr	r0, [pc, #216]	; (80007a4 <getCurrentTRH+0x108>)
 80006cc:	f00d f90a 	bl	800d8e4 <puts>

			 values[0] = -45 + 175 * t_ticks/65535;
			 values[1] = -6 + 125 * rh_ticks/65535;
		 }
	}
}
 80006d0:	e061      	b.n	8000796 <getCurrentTRH+0xfa>
		 HAL_Delay(10);
 80006d2:	200a      	movs	r0, #10
 80006d4:	f001 ff66 	bl	80025a4 <HAL_Delay>
		 ret =  HAL_I2C_Master_Receive(&hi2c1, SHT40_ADDRESS, (uint8_t*)&data_rx, 6,1000);
 80006d8:	f107 020c 	add.w	r2, r7, #12
 80006dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2306      	movs	r3, #6
 80006e4:	2188      	movs	r1, #136	; 0x88
 80006e6:	482e      	ldr	r0, [pc, #184]	; (80007a0 <getCurrentTRH+0x104>)
 80006e8:	f004 fb10 	bl	8004d0c <HAL_I2C_Master_Receive>
 80006ec:	4603      	mov	r3, r0
 80006ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		 if ( ret != HAL_OK ) {
 80006f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <getCurrentTRH+0x66>
			 printf("Error Rx\r\n");
 80006fa:	482b      	ldr	r0, [pc, #172]	; (80007a8 <getCurrentTRH+0x10c>)
 80006fc:	f00d f8f2 	bl	800d8e4 <puts>
}
 8000700:	e049      	b.n	8000796 <getCurrentTRH+0xfa>
			 for(int i = 0; i < 6 ; i++){
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
 8000706:	e00c      	b.n	8000722 <getCurrentTRH+0x86>
				 printf("data_rx[%i] = %u \n",i,data_rx[i]);
 8000708:	f107 020c 	add.w	r2, r7, #12
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	4413      	add	r3, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000716:	4825      	ldr	r0, [pc, #148]	; (80007ac <getCurrentTRH+0x110>)
 8000718:	f00d f87e 	bl	800d818 <iprintf>
			 for(int i = 0; i < 6 ; i++){
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	3301      	adds	r3, #1
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	2b05      	cmp	r3, #5
 8000726:	ddef      	ble.n	8000708 <getCurrentTRH+0x6c>
			 float t_ticks = data_rx[0] * 256 + data_rx[1];
 8000728:	7b3b      	ldrb	r3, [r7, #12]
 800072a:	021b      	lsls	r3, r3, #8
 800072c:	7b7a      	ldrb	r2, [r7, #13]
 800072e:	4413      	add	r3, r2
 8000730:	ee07 3a90 	vmov	s15, r3
 8000734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000738:	edc7 7a07 	vstr	s15, [r7, #28]
			 float rh_ticks = data_rx[3] * 256 + data_rx[4];
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	021b      	lsls	r3, r3, #8
 8000740:	7c3a      	ldrb	r2, [r7, #16]
 8000742:	4413      	add	r3, r2
 8000744:	ee07 3a90 	vmov	s15, r3
 8000748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800074c:	edc7 7a06 	vstr	s15, [r7, #24]
			 values[0] = -45 + 175 * t_ticks/65535;
 8000750:	edd7 7a07 	vldr	s15, [r7, #28]
 8000754:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80007b0 <getCurrentTRH+0x114>
 8000758:	ee27 7a87 	vmul.f32	s14, s15, s14
 800075c:	eddf 6a15 	vldr	s13, [pc, #84]	; 80007b4 <getCurrentTRH+0x118>
 8000760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000764:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80007b8 <getCurrentTRH+0x11c>
 8000768:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	edc3 7a00 	vstr	s15, [r3]
			 values[1] = -6 + 125 * rh_ticks/65535;
 8000772:	edd7 7a06 	vldr	s15, [r7, #24]
 8000776:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80007bc <getCurrentTRH+0x120>
 800077a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800077e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80007b4 <getCurrentTRH+0x118>
 8000782:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3304      	adds	r3, #4
 800078a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800078e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000792:	edc3 7a00 	vstr	s15, [r3]
}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	; 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	24000260 	.word	0x24000260
 80007a4:	0800fac0 	.word	0x0800fac0
 80007a8:	0800facc 	.word	0x0800facc
 80007ac:	0800fad8 	.word	0x0800fad8
 80007b0:	432f0000 	.word	0x432f0000
 80007b4:	477fff00 	.word	0x477fff00
 80007b8:	42340000 	.word	0x42340000
 80007bc:	42fa0000 	.word	0x42fa0000

080007c0 <map>:

int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	69b9      	ldr	r1, [r7, #24]
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	1a8a      	subs	r2, r1, r2
 80007da:	fb03 f202 	mul.w	r2, r3, r2
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1acb      	subs	r3, r1, r3
 80007e4:	fb92 f2f3 	sdiv	r2, r2, r3
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	4413      	add	r3, r2
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000806:	2b00      	cmp	r3, #0
 8000808:	db0b      	blt.n	8000822 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	f003 021f 	and.w	r2, r3, #31
 8000810:	4907      	ldr	r1, [pc, #28]	; (8000830 <__NVIC_EnableIRQ+0x38>)
 8000812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000816:	095b      	lsrs	r3, r3, #5
 8000818:	2001      	movs	r0, #1
 800081a:	fa00 f202 	lsl.w	r2, r0, r2
 800081e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000e100 	.word	0xe000e100

08000834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000844:	2b00      	cmp	r3, #0
 8000846:	db0a      	blt.n	800085e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	490c      	ldr	r1, [pc, #48]	; (8000880 <__NVIC_SetPriority+0x4c>)
 800084e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000852:	0112      	lsls	r2, r2, #4
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	440b      	add	r3, r1
 8000858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800085c:	e00a      	b.n	8000874 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4908      	ldr	r1, [pc, #32]	; (8000884 <__NVIC_SetPriority+0x50>)
 8000864:	88fb      	ldrh	r3, [r7, #6]
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	3b04      	subs	r3, #4
 800086c:	0112      	lsls	r2, r2, #4
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	440b      	add	r3, r1
 8000872:	761a      	strb	r2, [r3, #24]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000e100 	.word	0xe000e100
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <HAL_UART_RxCpltCallback>:
void bad(void) {
	HAL_UART_Transmit(&huart3, tx_bad, 3, HAL_MAX_DELAY);
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    rxBuffer[rxIndex] = received_character[0];
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_UART_RxCpltCallback+0x54>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_UART_RxCpltCallback+0x58>)
 8000898:	7819      	ldrb	r1, [r3, #0]
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_UART_RxCpltCallback+0x5c>)
 800089c:	5499      	strb	r1, [r3, r2]
	rxIndex++;
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_UART_RxCpltCallback+0x54>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	3301      	adds	r3, #1
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <HAL_UART_RxCpltCallback+0x54>)
 80008a8:	801a      	strh	r2, [r3, #0]

	if (received_character[0] == '\n' || received_character[0] == '\r') { //ie end of message, stop receiving. 
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <HAL_UART_RxCpltCallback+0x58>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b0a      	cmp	r3, #10
 80008b0:	d003      	beq.n	80008ba <HAL_UART_RxCpltCallback+0x32>
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <HAL_UART_RxCpltCallback+0x58>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b0d      	cmp	r3, #13
 80008b8:	d105      	bne.n	80008c6 <HAL_UART_RxCpltCallback+0x3e>
    	rxIndex = 0;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <HAL_UART_RxCpltCallback+0x54>)
 80008bc:	2200      	movs	r2, #0
 80008be:	801a      	strh	r2, [r3, #0]
    	rx_handle();
 80008c0:	f000 f814 	bl	80008ec <rx_handle>
 80008c4:	e005      	b.n	80008d2 <HAL_UART_RxCpltCallback+0x4a>
    } else {
        HAL_UART_Receive_IT(&huart3, received_character, 1);
 80008c6:	2201      	movs	r2, #1
 80008c8:	4905      	ldr	r1, [pc, #20]	; (80008e0 <HAL_UART_RxCpltCallback+0x58>)
 80008ca:	4807      	ldr	r0, [pc, #28]	; (80008e8 <HAL_UART_RxCpltCallback+0x60>)
 80008cc:	f009 fe5a 	bl	800a584 <HAL_UART_Receive_IT>
    }
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	24061f14 	.word	0x24061f14
 80008e0:	24061f18 	.word	0x24061f18
 80008e4:	24061eb0 	.word	0x24061eb0
 80008e8:	24000398 	.word	0x24000398

080008ec <rx_handle>:

void rx_handle(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, LD2_Pin, val);
 80008f2:	4b89      	ldr	r3, [pc, #548]	; (8000b18 <rx_handle+0x22c>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	2102      	movs	r1, #2
 80008fa:	4888      	ldr	r0, [pc, #544]	; (8000b1c <rx_handle+0x230>)
 80008fc:	f004 f868 	bl	80049d0 <HAL_GPIO_WritePin>
	if(val)
 8000900:	4b85      	ldr	r3, [pc, #532]	; (8000b18 <rx_handle+0x22c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d003      	beq.n	8000910 <rx_handle+0x24>
		val = 0;
 8000908:	4b83      	ldr	r3, [pc, #524]	; (8000b18 <rx_handle+0x22c>)
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	e002      	b.n	8000916 <rx_handle+0x2a>
	else
		val = 1;
 8000910:	4b81      	ldr	r3, [pc, #516]	; (8000b18 <rx_handle+0x22c>)
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
	//sprintf(num, "RX0: %d\r\n", rxBuffer[0]);
	//HAL_UART_Transmit(&huart3, (uint8_t*)num, strlen(num), HAL_MAX_DELAY);
	switch(rxBuffer[0]) {
 8000916:	4b82      	ldr	r3, [pc, #520]	; (8000b20 <rx_handle+0x234>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	3b32      	subs	r3, #50	; 0x32
 800091c:	2b05      	cmp	r3, #5
 800091e:	f200 80f1 	bhi.w	8000b04 <rx_handle+0x218>
 8000922:	a201      	add	r2, pc, #4	; (adr r2, 8000928 <rx_handle+0x3c>)
 8000924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000928:	08000941 	.word	0x08000941
 800092c:	08000abb 	.word	0x08000abb
 8000930:	08000987 	.word	0x08000987
 8000934:	08000aff 	.word	0x08000aff
 8000938:	080009f5 	.word	0x080009f5
 800093c:	08000a3b 	.word	0x08000a3b
		case PLUNGE: ;

			/* reset tracking variables */
			log_position = 0;
 8000940:	4b78      	ldr	r3, [pc, #480]	; (8000b24 <rx_handle+0x238>)
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
			memset(posLog, 0, sizeof(posLog));
 8000946:	4a78      	ldr	r2, [pc, #480]	; (8000b28 <rx_handle+0x23c>)
 8000948:	2100      	movs	r1, #0
 800094a:	4878      	ldr	r0, [pc, #480]	; (8000b2c <rx_handle+0x240>)
 800094c:	f00d f8ca 	bl	800dae4 <memset>
      memset(thermoLog, 0, sizeof(thermoLog));
 8000950:	4a75      	ldr	r2, [pc, #468]	; (8000b28 <rx_handle+0x23c>)
 8000952:	2100      	movs	r1, #0
 8000954:	4876      	ldr	r0, [pc, #472]	; (8000b30 <rx_handle+0x244>)
 8000956:	f00d f8c5 	bl	800dae4 <memset>

			TIM2->CR1  |=  TIM_CR1_CEN; 	//start counter for encoder 
 800095a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6013      	str	r3, [r2, #0]

			TIM5->CR1  |= TIM_CR1_CEN; // Start TIM5 to commence data collection
 800096a:	4b72      	ldr	r3, [pc, #456]	; (8000b34 <rx_handle+0x248>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a71      	ldr	r2, [pc, #452]	; (8000b34 <rx_handle+0x248>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6013      	str	r3, [r2, #0]

      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	2203      	movs	r2, #3
 800097c:	496e      	ldr	r1, [pc, #440]	; (8000b38 <rx_handle+0x24c>)
 800097e:	486f      	ldr	r0, [pc, #444]	; (8000b3c <rx_handle+0x250>)
 8000980:	f009 fd72 	bl	800a468 <HAL_UART_Transmit>

			break;
 8000984:	e0be      	b.n	8000b04 <rx_handle+0x218>

    case FETCH: ;
      HAL_ADC_Start(&hadc1);
 8000986:	486e      	ldr	r0, [pc, #440]	; (8000b40 <rx_handle+0x254>)
 8000988:	f002 f96c 	bl	8002c64 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800098c:	f04f 31ff 	mov.w	r1, #4294967295
 8000990:	486b      	ldr	r0, [pc, #428]	; (8000b40 <rx_handle+0x254>)
 8000992:	f002 fa21 	bl	8002dd8 <HAL_ADC_PollForConversion>
      nudge_temp = HAL_ADC_GetValue(&hadc1);
 8000996:	486a      	ldr	r0, [pc, #424]	; (8000b40 <rx_handle+0x254>)
 8000998:	f002 faf6 	bl	8002f88 <HAL_ADC_GetValue>
 800099c:	4603      	mov	r3, r0
 800099e:	b29a      	uxth	r2, r3
 80009a0:	4b68      	ldr	r3, [pc, #416]	; (8000b44 <rx_handle+0x258>)
 80009a2:	801a      	strh	r2, [r3, #0]
      char msg[10];
      sprintf(msg, "%u\n", nudge_temp);
 80009a4:	4b67      	ldr	r3, [pc, #412]	; (8000b44 <rx_handle+0x258>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4966      	ldr	r1, [pc, #408]	; (8000b48 <rx_handle+0x25c>)
 80009b0:	4618      	mov	r0, r3
 80009b2:	f00c ff9f 	bl	800d8f4 <siprintf>
      sprintf(msg, "%u\n", nudge_temp);
 80009b6:	4b63      	ldr	r3, [pc, #396]	; (8000b44 <rx_handle+0x258>)
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4961      	ldr	r1, [pc, #388]	; (8000b48 <rx_handle+0x25c>)
 80009c2:	4618      	mov	r0, r3
 80009c4:	f00c ff96 	bl	800d8f4 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fcdf 	bl	8000390 <strlen>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	f107 011c 	add.w	r1, r7, #28
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	4857      	ldr	r0, [pc, #348]	; (8000b3c <rx_handle+0x250>)
 80009e0:	f009 fd42 	bl	800a468 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 80009e4:	f04f 33ff 	mov.w	r3, #4294967295
 80009e8:	2203      	movs	r2, #3
 80009ea:	4953      	ldr	r1, [pc, #332]	; (8000b38 <rx_handle+0x24c>)
 80009ec:	4853      	ldr	r0, [pc, #332]	; (8000b3c <rx_handle+0x250>)
 80009ee:	f009 fd3b 	bl	800a468 <HAL_UART_Transmit>

      break;
 80009f2:	e087      	b.n	8000b04 <rx_handle+0x218>

    case UPDATERH: ; 
      if(rxBuffer[2] == '\r'){
 80009f4:	4b4a      	ldr	r3, [pc, #296]	; (8000b20 <rx_handle+0x234>)
 80009f6:	789b      	ldrb	r3, [r3, #2]
 80009f8:	2b0d      	cmp	r3, #13
 80009fa:	d106      	bne.n	8000a0a <rx_handle+0x11e>
    	  RhSetpoint = (rxBuffer[1]-'0');
 80009fc:	4b48      	ldr	r3, [pc, #288]	; (8000b20 <rx_handle+0x234>)
 80009fe:	785b      	ldrb	r3, [r3, #1]
 8000a00:	3b30      	subs	r3, #48	; 0x30
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b51      	ldr	r3, [pc, #324]	; (8000b4c <rx_handle+0x260>)
 8000a06:	701a      	strb	r2, [r3, #0]
      } else if (rxBuffer[3] == '\r'){
    	  RhSetpoint = (rxBuffer[1] - '0') * 10 + (rxBuffer[2] - '0');
      } else {
    	  RhSetpoint = 100;
      }
      break; 
 8000a08:	e07c      	b.n	8000b04 <rx_handle+0x218>
      } else if (rxBuffer[3] == '\r'){
 8000a0a:	4b45      	ldr	r3, [pc, #276]	; (8000b20 <rx_handle+0x234>)
 8000a0c:	78db      	ldrb	r3, [r3, #3]
 8000a0e:	2b0d      	cmp	r3, #13
 8000a10:	d10f      	bne.n	8000a32 <rx_handle+0x146>
    	  RhSetpoint = (rxBuffer[1] - '0') * 10 + (rxBuffer[2] - '0');
 8000a12:	4b43      	ldr	r3, [pc, #268]	; (8000b20 <rx_handle+0x234>)
 8000a14:	785b      	ldrb	r3, [r3, #1]
 8000a16:	461a      	mov	r2, r3
 8000a18:	0092      	lsls	r2, r2, #2
 8000a1a:	4413      	add	r3, r2
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b3f      	ldr	r3, [pc, #252]	; (8000b20 <rx_handle+0x234>)
 8000a22:	789b      	ldrb	r3, [r3, #2]
 8000a24:	4413      	add	r3, r2
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	3b10      	subs	r3, #16
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b47      	ldr	r3, [pc, #284]	; (8000b4c <rx_handle+0x260>)
 8000a2e:	701a      	strb	r2, [r3, #0]
      break; 
 8000a30:	e068      	b.n	8000b04 <rx_handle+0x218>
    	  RhSetpoint = 100;
 8000a32:	4b46      	ldr	r3, [pc, #280]	; (8000b4c <rx_handle+0x260>)
 8000a34:	2264      	movs	r2, #100	; 0x64
 8000a36:	701a      	strb	r2, [r3, #0]
      break; 
 8000a38:	e064      	b.n	8000b04 <rx_handle+0x218>

    case GETTRH: ; 
      //consider not having first ack
      char Tmsg[10];
      sprintf(Tmsg, "%.2f\n", SensorValues[0]);
 8000a3a:	4b45      	ldr	r3, [pc, #276]	; (8000b50 <rx_handle+0x264>)
 8000a3c:	edd3 7a00 	vldr	s15, [r3]
 8000a40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a44:	f107 0010 	add.w	r0, r7, #16
 8000a48:	ec53 2b17 	vmov	r2, r3, d7
 8000a4c:	4941      	ldr	r1, [pc, #260]	; (8000b54 <rx_handle+0x268>)
 8000a4e:	f00c ff51 	bl	800d8f4 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)Tmsg, strlen(Tmsg), HAL_MAX_DELAY);
 8000a52:	f107 0310 	add.w	r3, r7, #16
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fc9a 	bl	8000390 <strlen>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	f107 0110 	add.w	r1, r7, #16
 8000a64:	f04f 33ff 	mov.w	r3, #4294967295
 8000a68:	4834      	ldr	r0, [pc, #208]	; (8000b3c <rx_handle+0x250>)
 8000a6a:	f009 fcfd 	bl	800a468 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	2203      	movs	r2, #3
 8000a74:	4930      	ldr	r1, [pc, #192]	; (8000b38 <rx_handle+0x24c>)
 8000a76:	4831      	ldr	r0, [pc, #196]	; (8000b3c <rx_handle+0x250>)
 8000a78:	f009 fcf6 	bl	800a468 <HAL_UART_Transmit>
      char RHmsg[10];
      sprintf(RHmsg, "%.2f\n", SensorValues[1]);
 8000a7c:	4b34      	ldr	r3, [pc, #208]	; (8000b50 <rx_handle+0x264>)
 8000a7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000a82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a86:	1d38      	adds	r0, r7, #4
 8000a88:	ec53 2b17 	vmov	r2, r3, d7
 8000a8c:	4931      	ldr	r1, [pc, #196]	; (8000b54 <rx_handle+0x268>)
 8000a8e:	f00c ff31 	bl	800d8f4 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*)RHmsg, strlen(RHmsg), HAL_MAX_DELAY);
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fc7b 	bl	8000390 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	1d39      	adds	r1, r7, #4
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	4825      	ldr	r0, [pc, #148]	; (8000b3c <rx_handle+0x250>)
 8000aa6:	f009 fcdf 	bl	800a468 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	2203      	movs	r2, #3
 8000ab0:	4921      	ldr	r1, [pc, #132]	; (8000b38 <rx_handle+0x24c>)
 8000ab2:	4822      	ldr	r0, [pc, #136]	; (8000b3c <rx_handle+0x250>)
 8000ab4:	f009 fcd8 	bl	800a468 <HAL_UART_Transmit>

      break; 
 8000ab8:	e024      	b.n	8000b04 <rx_handle+0x218>

    case END: ;
	  TIM5->CR1  |= TIM_CR1_UDIS;	// make sure update is disabled
 8000aba:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <rx_handle+0x248>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a1d      	ldr	r2, [pc, #116]	; (8000b34 <rx_handle+0x248>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6013      	str	r3, [r2, #0]
	  TIM5->DIER &=  ~TIM_DIER_UIE; 	// update interrupt disabled
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <rx_handle+0x248>)
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <rx_handle+0x248>)
 8000acc:	f023 0301 	bic.w	r3, r3, #1
 8000ad0:	60d3      	str	r3, [r2, #12]
	  TIM2->CR1 &= ~TIM_CR1_CEN;		// disable tim2
 8000ad2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000adc:	f023 0301 	bic.w	r3, r3, #1
 8000ae0:	6013      	str	r3, [r2, #0]
	  TIM5->CR1  &= ~TIM_CR1_CEN; 	// disable tim5
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <rx_handle+0x248>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <rx_handle+0x248>)
 8000ae8:	f023 0301 	bic.w	r3, r3, #1
 8000aec:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	2203      	movs	r2, #3
 8000af4:	4910      	ldr	r1, [pc, #64]	; (8000b38 <rx_handle+0x24c>)
 8000af6:	4811      	ldr	r0, [pc, #68]	; (8000b3c <rx_handle+0x250>)
 8000af8:	f009 fcb6 	bl	800a468 <HAL_UART_Transmit>
	  break;
 8000afc:	e002      	b.n	8000b04 <rx_handle+0x218>

    case SEND: ;
    	plunge_done_flag = 1;
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <rx_handle+0x26c>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]


//	char b[] = "done handling\r\n";
//	HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);

    HAL_UART_Receive_IT(&huart3, received_character, 1);
 8000b04:	2201      	movs	r2, #1
 8000b06:	4915      	ldr	r1, [pc, #84]	; (8000b5c <rx_handle+0x270>)
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <rx_handle+0x250>)
 8000b0a:	f009 fd3b 	bl	800a584 <HAL_UART_Receive_IT>
}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	24000000 	.word	0x24000000
 8000b1c:	58021000 	.word	0x58021000
 8000b20:	24061eb0 	.word	0x24061eb0
 8000b24:	24061eac 	.word	0x24061eac
 8000b28:	00030d40 	.word	0x00030d40
 8000b2c:	2400042c 	.word	0x2400042c
 8000b30:	2403116c 	.word	0x2403116c
 8000b34:	40000c00 	.word	0x40000c00
 8000b38:	24000004 	.word	0x24000004
 8000b3c:	24000398 	.word	0x24000398
 8000b40:	240001fc 	.word	0x240001fc
 8000b44:	24061f1a 	.word	0x24061f1a
 8000b48:	0800faec 	.word	0x0800faec
 8000b4c:	24000007 	.word	0x24000007
 8000b50:	24061f1c 	.word	0x24061f1c
 8000b54:	0800faf0 	.word	0x0800faf0
 8000b58:	24061f19 	.word	0x24061f19
 8000b5c:	24061f18 	.word	0x24061f18

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b0b1      	sub	sp, #196	; 0xc4
 8000b64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f001 fc8b 	bl	8002480 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f9d1 	bl	8000f10 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f000 fc97 	bl	80014a0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b72:	f000 fafb 	bl	800116c <MX_TIM2_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b76:	f000 fc8b 	bl	8001490 <MX_USB_OTG_HS_USB_Init>
  MX_USART3_UART_Init();
 8000b7a:	f000 fc3d 	bl	80013f8 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8000b7e:	f000 fbed 	bl	800135c <MX_TIM5_Init>
  MX_ADC1_Init();
 8000b82:	f000 fa3b 	bl	8000ffc <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b86:	f000 fab1 	bl	80010ec <MX_I2C1_Init>
  MX_TIM3_Init();
 8000b8a:	f000 fb5b 	bl	8001244 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* configuring encoder counter */
  TIM2->CR1  &= ~TIM_CR1_CEN;
 8000b8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b98:	f023 0301 	bic.w	r3, r3, #1
 8000b9c:	6013      	str	r3, [r2, #0]

  TIM2->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000b9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ba2:	2264      	movs	r2, #100	; 0x64
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->ARR 	= 40000; 		// Counter will not roll over in entire plunge path, will be stopped and reset by usart interupt handler. 
 8000ba6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000baa:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000bb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bb4:	691b      	ldr	r3, [r3, #16]
 8000bb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bba:	f023 0301 	bic.w	r3, r3, #1
 8000bbe:	6113      	str	r3, [r2, #16]
  TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bca:	f023 0302 	bic.w	r3, r3, #2
 8000bce:	6013      	str	r3, [r2, #0]
  TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000bd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	60d3      	str	r3, [r2, #12]
  TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000be0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bee:	6013      	str	r3, [r2, #0]

    /* configuring data logging timer */
  TIM5->CR1  &= ~TIM_CR1_CEN; 
 8000bf0:	4bb7      	ldr	r3, [pc, #732]	; (8000ed0 <main+0x370>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4ab6      	ldr	r2, [pc, #728]	; (8000ed0 <main+0x370>)
 8000bf6:	f023 0301 	bic.w	r3, r3, #1
 8000bfa:	6013      	str	r3, [r2, #0]

  TIM5-> CNT  = 100;				//
 8000bfc:	4bb4      	ldr	r3, [pc, #720]	; (8000ed0 <main+0x370>)
 8000bfe:	2264      	movs	r2, #100	; 0x64
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
  TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 8000c02:	4bb3      	ldr	r3, [pc, #716]	; (8000ed0 <main+0x370>)
 8000c04:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000c0a:	4bb1      	ldr	r3, [pc, #708]	; (8000ed0 <main+0x370>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4ab0      	ldr	r2, [pc, #704]	; (8000ed0 <main+0x370>)
 8000c10:	f023 0302 	bic.w	r3, r3, #2
 8000c14:	6013      	str	r3, [r2, #0]
  TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000c16:	4bae      	ldr	r3, [pc, #696]	; (8000ed0 <main+0x370>)
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	4aad      	ldr	r2, [pc, #692]	; (8000ed0 <main+0x370>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	60d3      	str	r3, [r2, #12]
  TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000c22:	4bab      	ldr	r3, [pc, #684]	; (8000ed0 <main+0x370>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4aaa      	ldr	r2, [pc, #680]	; (8000ed0 <main+0x370>)
 8000c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2c:	6013      	str	r3, [r2, #0]
  TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000c2e:	4ba8      	ldr	r3, [pc, #672]	; (8000ed0 <main+0x370>)
 8000c30:	691b      	ldr	r3, [r3, #16]
 8000c32:	4aa7      	ldr	r2, [pc, #668]	; (8000ed0 <main+0x370>)
 8000c34:	f023 0301 	bic.w	r3, r3, #1
 8000c38:	6113      	str	r3, [r2, #16]


  HAL_UART_Receive_IT(&huart3, received_character, 1); // initialize interrupts
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	49a5      	ldr	r1, [pc, #660]	; (8000ed4 <main+0x374>)
 8000c3e:	48a6      	ldr	r0, [pc, #664]	; (8000ed8 <main+0x378>)
 8000c40:	f009 fca0 	bl	800a584 <HAL_UART_Receive_IT>

//  char msg[] = "program start \r\n";
//  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

  // TIM2 for encoder tick counting
  NVIC_SetPriority(TIM2_IRQn, 1); // Braking is priority as long as dispense isnt happening
 8000c44:	2101      	movs	r1, #1
 8000c46:	201c      	movs	r0, #28
 8000c48:	f7ff fdf4 	bl	8000834 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000c4c:	201c      	movs	r0, #28
 8000c4e:	f7ff fdd3 	bl	80007f8 <__NVIC_EnableIRQ>

  // TIM5 for logkeeping and speed calculations and TIM4 setup
  NVIC_SetPriority(TIM5_IRQn, 2); // Log keeping should be interruptable
 8000c52:	2102      	movs	r1, #2
 8000c54:	2032      	movs	r0, #50	; 0x32
 8000c56:	f7ff fded 	bl	8000834 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM5_IRQn);
 8000c5a:	2032      	movs	r0, #50	; 0x32
 8000c5c:	f7ff fdcc 	bl	80007f8 <__NVIC_EnableIRQ>

  PID_TypeDef TPID; 
  double Input, Output, Setpoint = DEFAULTRH;
 8000c60:	f04f 0200 	mov.w	r2, #0
 8000c64:	4b9d      	ldr	r3, [pc, #628]	; (8000edc <main+0x37c>)
 8000c66:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double Kp = KP, Ki = KI, Kd = KD; 
 8000c6a:	f04f 0200 	mov.w	r2, #0
 8000c6e:	4b9c      	ldr	r3, [pc, #624]	; (8000ee0 <main+0x380>)
 8000c70:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8000c74:	f04f 0200 	mov.w	r2, #0
 8000c78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c7c:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8000c80:	f04f 0200 	mov.w	r2, #0
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  PID(&TPID, &Input, &Output, &Setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	f107 0218 	add.w	r2, r7, #24
 8000c94:	f107 0120 	add.w	r1, r7, #32
 8000c98:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000c9c:	2400      	movs	r4, #0
 8000c9e:	9401      	str	r4, [sp, #4]
 8000ca0:	2401      	movs	r4, #1
 8000ca2:	9400      	str	r4, [sp, #0]
 8000ca4:	ed97 2b26 	vldr	d2, [r7, #152]	; 0x98
 8000ca8:	ed97 1b28 	vldr	d1, [r7, #160]	; 0xa0
 8000cac:	ed97 0b2a 	vldr	d0, [r7, #168]	; 0xa8
 8000cb0:	f000 fd52 	bl	8001758 <PID>
  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8000cb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb8:	2101      	movs	r1, #1
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 fe68 	bl	8001990 <PID_SetMode>
  PID_SetOutputLimits(&TPID, 1, 100);
 8000cc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc4:	ed9f 1b80 	vldr	d1, [pc, #512]	; 8000ec8 <main+0x368>
 8000cc8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 fe7d 	bl	80019cc <PID_SetOutputLimits>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
    getCurrentTRH(SensorValues);
 8000cd2:	4884      	ldr	r0, [pc, #528]	; (8000ee4 <main+0x384>)
 8000cd4:	f7ff fce2 	bl	800069c <getCurrentTRH>
    Input = SensorValues[1]; 
 8000cd8:	4b82      	ldr	r3, [pc, #520]	; (8000ee4 <main+0x384>)
 8000cda:	edd3 7a01 	vldr	s15, [r3, #4]
 8000cde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce2:	ed87 7b08 	vstr	d7, [r7, #32]
    Setpoint = RhSetpoint;
 8000ce6:	4b80      	ldr	r3, [pc, #512]	; (8000ee8 <main+0x388>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000cf2:	ed87 7b04 	vstr	d7, [r7, #16]
    PID_Compute(&TPID);
 8000cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fd78 	bl	80017f0 <PID_Compute>
    nitrogenPWM = map(Output, 0, 100, 255, 110);
 8000d00:	ed97 7b06 	vldr	d7, [r7, #24]
 8000d04:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d08:	236e      	movs	r3, #110	; 0x6e
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	23ff      	movs	r3, #255	; 0xff
 8000d0e:	2264      	movs	r2, #100	; 0x64
 8000d10:	2100      	movs	r1, #0
 8000d12:	ee17 0a90 	vmov	r0, s15
 8000d16:	f7ff fd53 	bl	80007c0 <map>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4a73      	ldr	r2, [pc, #460]	; (8000eec <main+0x38c>)
 8000d1e:	6013      	str	r3, [r2, #0]
    humidAirPWM = map(Output, 0, 100, 95, 255);
 8000d20:	ed97 7b06 	vldr	d7, [r7, #24]
 8000d24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d28:	23ff      	movs	r3, #255	; 0xff
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	235f      	movs	r3, #95	; 0x5f
 8000d2e:	2264      	movs	r2, #100	; 0x64
 8000d30:	2100      	movs	r1, #0
 8000d32:	ee17 0a90 	vmov	r0, s15
 8000d36:	f7ff fd43 	bl	80007c0 <map>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4a6c      	ldr	r2, [pc, #432]	; (8000ef0 <main+0x390>)
 8000d3e:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, nitrogenPWM);
 8000d40:	4b6a      	ldr	r3, [pc, #424]	; (8000eec <main+0x38c>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b6b      	ldr	r3, [pc, #428]	; (8000ef4 <main+0x394>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, humidAirPWM);
 8000d4a:	4b69      	ldr	r3, [pc, #420]	; (8000ef0 <main+0x390>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4b69      	ldr	r3, [pc, #420]	; (8000ef4 <main+0x394>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	639a      	str	r2, [r3, #56]	; 0x38
	  if(plunge_done_flag) {
 8000d54:	4b68      	ldr	r3, [pc, #416]	; (8000ef8 <main+0x398>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0ba      	beq.n	8000cd2 <main+0x172>
		  char msg[10];
		  for(int i=0 ; i<log_position; i++) {
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000d62:	e01b      	b.n	8000d9c <main+0x23c>
			  sprintf(msg, "%u\n", posLog[i]);
 8000d64:	4a65      	ldr	r2, [pc, #404]	; (8000efc <main+0x39c>)
 8000d66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	4963      	ldr	r1, [pc, #396]	; (8000f00 <main+0x3a0>)
 8000d74:	4618      	mov	r0, r3
 8000d76:	f00c fdbd 	bl	800d8f4 <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fb07 	bl	8000390 <strlen>
 8000d82:	4603      	mov	r3, r0
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	1d39      	adds	r1, r7, #4
 8000d88:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8c:	4852      	ldr	r0, [pc, #328]	; (8000ed8 <main+0x378>)
 8000d8e:	f009 fb6b 	bl	800a468 <HAL_UART_Transmit>
		  for(int i=0 ; i<log_position; i++) {
 8000d92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d96:	3301      	adds	r3, #1
 8000d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000d9c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000da0:	4b58      	ldr	r3, [pc, #352]	; (8000f04 <main+0x3a4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d3dd      	bcc.n	8000d64 <main+0x204>
		  }
		  HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dac:	2203      	movs	r2, #3
 8000dae:	4956      	ldr	r1, [pc, #344]	; (8000f08 <main+0x3a8>)
 8000db0:	4849      	ldr	r0, [pc, #292]	; (8000ed8 <main+0x378>)
 8000db2:	f009 fb59 	bl	800a468 <HAL_UART_Transmit>

      for(int i=0 ; i<log_position; i++) {
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000dbc:	e01b      	b.n	8000df6 <main+0x296>
			  sprintf(msg, "%u\n", thermoLog[i]);
 8000dbe:	4a53      	ldr	r2, [pc, #332]	; (8000f0c <main+0x3ac>)
 8000dc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	494c      	ldr	r1, [pc, #304]	; (8000f00 <main+0x3a0>)
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f00c fd90 	bl	800d8f4 <siprintf>
			  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fada 	bl	8000390 <strlen>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	1d39      	adds	r1, r7, #4
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	483c      	ldr	r0, [pc, #240]	; (8000ed8 <main+0x378>)
 8000de8:	f009 fb3e 	bl	800a468 <HAL_UART_Transmit>
      for(int i=0 ; i<log_position; i++) {
 8000dec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000df0:	3301      	adds	r3, #1
 8000df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000df6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000dfa:	4b42      	ldr	r3, [pc, #264]	; (8000f04 <main+0x3a4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d3dd      	bcc.n	8000dbe <main+0x25e>
		  }

      //Prepare timers for the next plunge, do not enable yet 
      TIM2->CR1  &= ~TIM_CR1_CEN;
 8000e02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e0c:	f023 0301 	bic.w	r3, r3, #1
 8000e10:	6013      	str	r3, [r2, #0]

      TIM2->CNT   =  100;				// 100 included here and in ARR to make sure it doesnt immediately underflow if it vibrates up
 8000e12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e16:	2264      	movs	r2, #100	; 0x64
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24
      TIM2->ARR 	= 40000; 		// Counter will not roll over in entire plunge path, will be stopped and reset by usart interupt handler. 
 8000e1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e1e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM2->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000e24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2e:	f023 0301 	bic.w	r3, r3, #1
 8000e32:	6113      	str	r3, [r2, #16]
      TIM2->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e3e:	f023 0302 	bic.w	r3, r3, #2
 8000e42:	6013      	str	r3, [r2, #0]
      TIM2->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000e44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	60d3      	str	r3, [r2, #12]
      TIM2->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e62:	6013      	str	r3, [r2, #0]

        /* configuring data logging timer */
      TIM5->CR1  &= ~TIM_CR1_CEN; 
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <main+0x370>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a19      	ldr	r2, [pc, #100]	; (8000ed0 <main+0x370>)
 8000e6a:	f023 0301 	bic.w	r3, r3, #1
 8000e6e:	6013      	str	r3, [r2, #0]

      TIM5-> CNT  = 100;				
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <main+0x370>)
 8000e72:	2264      	movs	r2, #100	; 0x64
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
      TIM5->ARR 	= CLOCKS_PER_LOG; 	// check positione interval
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <main+0x370>)
 8000e78:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000e7c:	62da      	str	r2, [r3, #44]	; 0x2c
      TIM5->CR1  &= ~TIM_CR1_UDIS;	// make sure update is enabled
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <main+0x370>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <main+0x370>)
 8000e84:	f023 0302 	bic.w	r3, r3, #2
 8000e88:	6013      	str	r3, [r2, #0]
      TIM5->DIER |=  TIM_DIER_UIE; 	// update interrupt enabled
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <main+0x370>)
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <main+0x370>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	60d3      	str	r3, [r2, #12]
      TIM5->CR1  |= TIM_CR1_ARPE;		// enable auto reload preload
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <main+0x370>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <main+0x370>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea0:	6013      	str	r3, [r2, #0]
      TIM5->SR   &= ~TIM_SR_UIF; 		// Clear the interrupt flag
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <main+0x370>)
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <main+0x370>)
 8000ea8:	f023 0301 	bic.w	r3, r3, #1
 8000eac:	6113      	str	r3, [r2, #16]

      HAL_UART_Transmit(&huart3, tx_ack, sizeof(tx_ack), HAL_MAX_DELAY);
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	4914      	ldr	r1, [pc, #80]	; (8000f08 <main+0x3a8>)
 8000eb6:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <main+0x378>)
 8000eb8:	f009 fad6 	bl	800a468 <HAL_UART_Transmit>
		  plunge_done_flag = 0;
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <main+0x398>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
    getCurrentTRH(SensorValues);
 8000ec2:	e706      	b.n	8000cd2 <main+0x172>
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	00000000 	.word	0x00000000
 8000ecc:	40590000 	.word	0x40590000
 8000ed0:	40000c00 	.word	0x40000c00
 8000ed4:	24061f18 	.word	0x24061f18
 8000ed8:	24000398 	.word	0x24000398
 8000edc:	40590000 	.word	0x40590000
 8000ee0:	40180000 	.word	0x40180000
 8000ee4:	24061f1c 	.word	0x24061f1c
 8000ee8:	24000007 	.word	0x24000007
 8000eec:	24061f24 	.word	0x24061f24
 8000ef0:	24061f28 	.word	0x24061f28
 8000ef4:	24000300 	.word	0x24000300
 8000ef8:	24061f19 	.word	0x24061f19
 8000efc:	2400042c 	.word	0x2400042c
 8000f00:	0800faec 	.word	0x0800faec
 8000f04:	24061eac 	.word	0x24061eac
 8000f08:	24000004 	.word	0x24000004
 8000f0c:	2403116c 	.word	0x2403116c

08000f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b09c      	sub	sp, #112	; 0x70
 8000f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	224c      	movs	r2, #76	; 0x4c
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f00c fde0 	bl	800dae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2220      	movs	r2, #32
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f00c fdda 	bl	800dae4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000f30:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <SystemClock_Config+0xe4>)
 8000f32:	f04f 32ff 	mov.w	r2, #4294967295
 8000f36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f3a:	2004      	movs	r0, #4
 8000f3c:	f004 fb06 	bl	800554c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f40:	2300      	movs	r3, #0
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <SystemClock_Config+0xe8>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a2b      	ldr	r2, [pc, #172]	; (8000ff8 <SystemClock_Config+0xe8>)
 8000f4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <SystemClock_Config+0xe8>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f5c:	bf00      	nop
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <SystemClock_Config+0xe8>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f6a:	d1f8      	bne.n	8000f5e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000f6c:	2321      	movs	r3, #33	; 0x21
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f70:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f76:	2301      	movs	r3, #1
 8000f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000f86:	2318      	movs	r3, #24
 8000f88:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f96:	230c      	movs	r3, #12
 8000f98:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f004 fb2a 	bl	8005600 <HAL_RCC_OscConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fb2:	f000 fb8f 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb6:	233f      	movs	r3, #63	; 0x3f
 8000fb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2102      	movs	r1, #2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 ff42 	bl	8005e64 <HAL_RCC_ClockConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000fe6:	f000 fb75 	bl	80016d4 <Error_Handler>
  }
}
 8000fea:	bf00      	nop
 8000fec:	3770      	adds	r7, #112	; 0x70
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	58024400 	.word	0x58024400
 8000ff8:	58024800 	.word	0x58024800

08000ffc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
 800101c:	615a      	str	r2, [r3, #20]
 800101e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001020:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <MX_ADC1_Init+0xe4>)
 8001022:	4a30      	ldr	r2, [pc, #192]	; (80010e4 <MX_ADC1_Init+0xe8>)
 8001024:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <MX_ADC1_Init+0xe4>)
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800102c:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <MX_ADC1_Init+0xe4>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001032:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <MX_ADC1_Init+0xe4>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001038:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <MX_ADC1_Init+0xe4>)
 800103a:	2204      	movs	r2, #4
 800103c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800103e:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <MX_ADC1_Init+0xe4>)
 8001040:	2200      	movs	r2, #0
 8001042:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001044:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <MX_ADC1_Init+0xe4>)
 8001046:	2200      	movs	r2, #0
 8001048:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800104a:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <MX_ADC1_Init+0xe4>)
 800104c:	2201      	movs	r2, #1
 800104e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <MX_ADC1_Init+0xe4>)
 8001052:	2200      	movs	r2, #0
 8001054:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <MX_ADC1_Init+0xe4>)
 8001058:	2200      	movs	r2, #0
 800105a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <MX_ADC1_Init+0xe4>)
 800105e:	2200      	movs	r2, #0
 8001060:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_ADC1_Init+0xe4>)
 8001064:	2200      	movs	r2, #0
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_ADC1_Init+0xe4>)
 800106a:	2200      	movs	r2, #0
 800106c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_ADC1_Init+0xe4>)
 8001070:	2200      	movs	r2, #0
 8001072:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_ADC1_Init+0xe4>)
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107c:	4818      	ldr	r0, [pc, #96]	; (80010e0 <MX_ADC1_Init+0xe4>)
 800107e:	f001 fc97 	bl	80029b0 <HAL_ADC_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001088:	f000 fb24 	bl	80016d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	4812      	ldr	r0, [pc, #72]	; (80010e0 <MX_ADC1_Init+0xe4>)
 8001098:	f002 fbda 	bl	8003850 <HAL_ADCEx_MultiModeConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80010a2:	f000 fb17 	bl	80016d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MX_ADC1_Init+0xec>)
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010aa:	2306      	movs	r3, #6
 80010ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010b6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010b8:	2304      	movs	r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_ADC1_Init+0xe4>)
 80010ca:	f001 ff6b 	bl	8002fa4 <HAL_ADC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80010d4:	f000 fafe 	bl	80016d4 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */
 // HAL_ADCEx_Calibration_Start(&hadc1,
		  //ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
  /* USER CODE END ADC1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	240001fc 	.word	0x240001fc
 80010e4:	40022000 	.word	0x40022000
 80010e8:	14f00020 	.word	0x14f00020

080010ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <MX_I2C1_Init+0x74>)
 80010f2:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <MX_I2C1_Init+0x78>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_I2C1_Init+0x74>)
 80010f8:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <MX_I2C1_Init+0x7c>)
 80010fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <MX_I2C1_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_I2C1_Init+0x74>)
 8001104:	2201      	movs	r2, #1
 8001106:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <MX_I2C1_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_I2C1_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_I2C1_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_I2C1_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_I2C1_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001126:	480e      	ldr	r0, [pc, #56]	; (8001160 <MX_I2C1_Init+0x74>)
 8001128:	f003 fc6c 	bl	8004a04 <HAL_I2C_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001132:	f000 facf 	bl	80016d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001136:	2100      	movs	r1, #0
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <MX_I2C1_Init+0x74>)
 800113a:	f004 f96f 	bl	800541c <HAL_I2CEx_ConfigAnalogFilter>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001144:	f000 fac6 	bl	80016d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001148:	2100      	movs	r1, #0
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_I2C1_Init+0x74>)
 800114c:	f004 f9b1 	bl	80054b2 <HAL_I2CEx_ConfigDigitalFilter>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001156:	f000 fabd 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	24000260 	.word	0x24000260
 8001164:	40005400 	.word	0x40005400
 8001168:	10b0dcfb 	.word	0x10b0dcfb

0800116c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	2224      	movs	r2, #36	; 0x24
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f00c fcb2 	bl	800dae4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800118a:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <MX_TIM2_Init+0xd4>)
 800118c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001190:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <MX_TIM2_Init+0xd4>)
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001198:	4b29      	ldr	r3, [pc, #164]	; (8001240 <MX_TIM2_Init+0xd4>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800119e:	4b28      	ldr	r3, [pc, #160]	; (8001240 <MX_TIM2_Init+0xd4>)
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <MX_TIM2_Init+0xd4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <MX_TIM2_Init+0xd4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011ba:	2301      	movs	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011ca:	2301      	movs	r3, #1
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	4619      	mov	r1, r3
 80011dc:	4818      	ldr	r0, [pc, #96]	; (8001240 <MX_TIM2_Init+0xd4>)
 80011de:	f008 f80f 	bl	8009200 <HAL_TIM_Encoder_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80011e8:	f000 fa74 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	4811      	ldr	r0, [pc, #68]	; (8001240 <MX_TIM2_Init+0xd4>)
 80011fa:	f009 f839 	bl	800a270 <HAL_TIMEx_MasterConfigSynchronization>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001204:	f000 fa66 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	TIM2->CR1  |= TIM_CR1_UDIS;	// make sure update is enabled
 8001208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001212:	f043 0302 	orr.w	r3, r3, #2
 8001216:	6013      	str	r3, [r2, #0]
	TIM2->DIER &=  ~TIM_DIER_UIE; 	// update interrupt enabled
 8001218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8001228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001232:	f023 0301 	bic.w	r3, r3, #1
 8001236:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3730      	adds	r7, #48	; 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	240002b4 	.word	0x240002b4

08001244 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08e      	sub	sp, #56	; 0x38
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001264:	463b      	mov	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]
 8001272:	615a      	str	r2, [r3, #20]
 8001274:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001276:	4b37      	ldr	r3, [pc, #220]	; (8001354 <MX_TIM3_Init+0x110>)
 8001278:	4a37      	ldr	r2, [pc, #220]	; (8001358 <MX_TIM3_Init+0x114>)
 800127a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6;
 800127c:	4b35      	ldr	r3, [pc, #212]	; (8001354 <MX_TIM3_Init+0x110>)
 800127e:	2206      	movs	r2, #6
 8001280:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001282:	4b34      	ldr	r3, [pc, #208]	; (8001354 <MX_TIM3_Init+0x110>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001288:	4b32      	ldr	r3, [pc, #200]	; (8001354 <MX_TIM3_Init+0x110>)
 800128a:	22ff      	movs	r2, #255	; 0xff
 800128c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128e:	4b31      	ldr	r3, [pc, #196]	; (8001354 <MX_TIM3_Init+0x110>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <MX_TIM3_Init+0x110>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800129a:	482e      	ldr	r0, [pc, #184]	; (8001354 <MX_TIM3_Init+0x110>)
 800129c:	f007 fd78 	bl	8008d90 <HAL_TIM_Base_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012a6:	f000 fa15 	bl	80016d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b4:	4619      	mov	r1, r3
 80012b6:	4827      	ldr	r0, [pc, #156]	; (8001354 <MX_TIM3_Init+0x110>)
 80012b8:	f008 fa7c 	bl	80097b4 <HAL_TIM_ConfigClockSource>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012c2:	f000 fa07 	bl	80016d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012c6:	4823      	ldr	r0, [pc, #140]	; (8001354 <MX_TIM3_Init+0x110>)
 80012c8:	f007 fe2a 	bl	8008f20 <HAL_TIM_PWM_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012d2:	f000 f9ff 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	481b      	ldr	r0, [pc, #108]	; (8001354 <MX_TIM3_Init+0x110>)
 80012e6:	f008 ffc3 	bl	800a270 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012f0:	f000 f9f0 	bl	80016d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f4:	2360      	movs	r3, #96	; 0x60
 80012f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	4619      	mov	r1, r3
 800130a:	4812      	ldr	r0, [pc, #72]	; (8001354 <MX_TIM3_Init+0x110>)
 800130c:	f008 f93e 	bl	800958c <HAL_TIM_PWM_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001316:	f000 f9dd 	bl	80016d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800131a:	463b      	mov	r3, r7
 800131c:	2204      	movs	r2, #4
 800131e:	4619      	mov	r1, r3
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <MX_TIM3_Init+0x110>)
 8001322:	f008 f933 	bl	800958c <HAL_TIM_PWM_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800132c:	f000 f9d2 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 8001330:	4808      	ldr	r0, [pc, #32]	; (8001354 <MX_TIM3_Init+0x110>)
 8001332:	f007 fd85 	bl	8008e40 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001336:	2100      	movs	r1, #0
 8001338:	4806      	ldr	r0, [pc, #24]	; (8001354 <MX_TIM3_Init+0x110>)
 800133a:	f007 fe53 	bl	8008fe4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800133e:	2104      	movs	r1, #4
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_TIM3_Init+0x110>)
 8001342:	f007 fe4f 	bl	8008fe4 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001346:	4803      	ldr	r0, [pc, #12]	; (8001354 <MX_TIM3_Init+0x110>)
 8001348:	f000 fe02 	bl	8001f50 <HAL_TIM_MspPostInit>
}
 800134c:	bf00      	nop
 800134e:	3738      	adds	r7, #56	; 0x38
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	24000300 	.word	0x24000300
 8001358:	40000400 	.word	0x40000400

0800135c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_TIM5_Init+0x94>)
 800137c:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <MX_TIM5_Init+0x98>)
 800137e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <MX_TIM5_Init+0x94>)
 8001382:	2200      	movs	r2, #0
 8001384:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <MX_TIM5_Init+0x94>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <MX_TIM5_Init+0x94>)
 800138e:	f04f 32ff 	mov.w	r2, #4294967295
 8001392:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <MX_TIM5_Init+0x94>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_TIM5_Init+0x94>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013a0:	4813      	ldr	r0, [pc, #76]	; (80013f0 <MX_TIM5_Init+0x94>)
 80013a2:	f007 fcf5 	bl	8008d90 <HAL_TIM_Base_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80013ac:	f000 f992 	bl	80016d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	4619      	mov	r1, r3
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <MX_TIM5_Init+0x94>)
 80013be:	f008 f9f9 	bl	80097b4 <HAL_TIM_ConfigClockSource>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80013c8:	f000 f984 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_TIM5_Init+0x94>)
 80013da:	f008 ff49 	bl	800a270 <HAL_TIMEx_MasterConfigSynchronization>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80013e4:	f000 f976 	bl	80016d4 <Error_Handler>
//  TIM5->DIER |= TIM_DIER_UIE; // Enable update interrupt
//  TIM5->ARR = ENC_DMA_POLL_FREQ; // Timebase

  /* USER CODE END TIM5_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	2400034c 	.word	0x2400034c
 80013f4:	40000c00 	.word	0x40000c00

080013f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <MX_USART3_UART_Init+0x90>)
 80013fe:	4a23      	ldr	r2, [pc, #140]	; (800148c <MX_USART3_UART_Init+0x94>)
 8001400:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001408:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <MX_USART3_UART_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_USART3_UART_Init+0x90>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MX_USART3_UART_Init+0x90>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001436:	2200      	movs	r2, #0
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <MX_USART3_UART_Init+0x90>)
 800143c:	2200      	movs	r2, #0
 800143e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001440:	4811      	ldr	r0, [pc, #68]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001442:	f008 ffc1 	bl	800a3c8 <HAL_UART_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800144c:	f000 f942 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001450:	2100      	movs	r1, #0
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001454:	f00b fc19 	bl	800cc8a <HAL_UARTEx_SetTxFifoThreshold>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800145e:	f000 f939 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001462:	2100      	movs	r1, #0
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001466:	f00b fc4e 	bl	800cd06 <HAL_UARTEx_SetRxFifoThreshold>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001470:	f000 f930 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <MX_USART3_UART_Init+0x90>)
 8001476:	f00b fbcf 	bl	800cc18 <HAL_UARTEx_DisableFifoMode>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001480:	f000 f928 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	24000398 	.word	0x24000398
 800148c:	40004800 	.word	0x40004800

08001490 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08e      	sub	sp, #56	; 0x38
 80014a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	4b80      	ldr	r3, [pc, #512]	; (80016b8 <MX_GPIO_Init+0x218>)
 80014b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014bc:	4a7e      	ldr	r2, [pc, #504]	; (80016b8 <MX_GPIO_Init+0x218>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014c6:	4b7c      	ldr	r3, [pc, #496]	; (80016b8 <MX_GPIO_Init+0x218>)
 80014c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	623b      	str	r3, [r7, #32]
 80014d2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014d4:	4b78      	ldr	r3, [pc, #480]	; (80016b8 <MX_GPIO_Init+0x218>)
 80014d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014da:	4a77      	ldr	r2, [pc, #476]	; (80016b8 <MX_GPIO_Init+0x218>)
 80014dc:	f043 0320 	orr.w	r3, r3, #32
 80014e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014e4:	4b74      	ldr	r3, [pc, #464]	; (80016b8 <MX_GPIO_Init+0x218>)
 80014e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014ea:	f003 0320 	and.w	r3, r3, #32
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f2:	4b71      	ldr	r3, [pc, #452]	; (80016b8 <MX_GPIO_Init+0x218>)
 80014f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014f8:	4a6f      	ldr	r2, [pc, #444]	; (80016b8 <MX_GPIO_Init+0x218>)
 80014fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001502:	4b6d      	ldr	r3, [pc, #436]	; (80016b8 <MX_GPIO_Init+0x218>)
 8001504:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b69      	ldr	r3, [pc, #420]	; (80016b8 <MX_GPIO_Init+0x218>)
 8001512:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001516:	4a68      	ldr	r2, [pc, #416]	; (80016b8 <MX_GPIO_Init+0x218>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001520:	4b65      	ldr	r3, [pc, #404]	; (80016b8 <MX_GPIO_Init+0x218>)
 8001522:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	4b62      	ldr	r3, [pc, #392]	; (80016b8 <MX_GPIO_Init+0x218>)
 8001530:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001534:	4a60      	ldr	r2, [pc, #384]	; (80016b8 <MX_GPIO_Init+0x218>)
 8001536:	f043 0302 	orr.w	r3, r3, #2
 800153a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800153e:	4b5e      	ldr	r3, [pc, #376]	; (80016b8 <MX_GPIO_Init+0x218>)
 8001540:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154c:	4b5a      	ldr	r3, [pc, #360]	; (80016b8 <MX_GPIO_Init+0x218>)
 800154e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001552:	4a59      	ldr	r2, [pc, #356]	; (80016b8 <MX_GPIO_Init+0x218>)
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800155c:	4b56      	ldr	r3, [pc, #344]	; (80016b8 <MX_GPIO_Init+0x218>)
 800155e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800156a:	4b53      	ldr	r3, [pc, #332]	; (80016b8 <MX_GPIO_Init+0x218>)
 800156c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001570:	4a51      	ldr	r2, [pc, #324]	; (80016b8 <MX_GPIO_Init+0x218>)
 8001572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001576:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800157a:	4b4f      	ldr	r3, [pc, #316]	; (80016b8 <MX_GPIO_Init+0x218>)
 800157c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001588:	4b4b      	ldr	r3, [pc, #300]	; (80016b8 <MX_GPIO_Init+0x218>)
 800158a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800158e:	4a4a      	ldr	r2, [pc, #296]	; (80016b8 <MX_GPIO_Init+0x218>)
 8001590:	f043 0310 	orr.w	r3, r3, #16
 8001594:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001598:	4b47      	ldr	r3, [pc, #284]	; (80016b8 <MX_GPIO_Init+0x218>)
 800159a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800159e:	f003 0310 	and.w	r3, r3, #16
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ac:	4843      	ldr	r0, [pc, #268]	; (80016bc <MX_GPIO_Init+0x21c>)
 80015ae:	f003 fa0f 	bl	80049d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b8:	4841      	ldr	r0, [pc, #260]	; (80016c0 <MX_GPIO_Init+0x220>)
 80015ba:	f003 fa09 	bl	80049d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2102      	movs	r1, #2
 80015c2:	4840      	ldr	r0, [pc, #256]	; (80016c4 <MX_GPIO_Init+0x224>)
 80015c4:	f003 fa04 	bl	80049d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	483a      	ldr	r0, [pc, #232]	; (80016c8 <MX_GPIO_Init+0x228>)
 80015de:	f003 f847 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80015e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f8:	4619      	mov	r1, r3
 80015fa:	4830      	ldr	r0, [pc, #192]	; (80016bc <MX_GPIO_Init+0x21c>)
 80015fc:	f003 f838 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001600:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	4829      	ldr	r0, [pc, #164]	; (80016c0 <MX_GPIO_Init+0x220>)
 800161a:	f003 f829 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001622:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	4826      	ldr	r0, [pc, #152]	; (80016cc <MX_GPIO_Init+0x22c>)
 8001634:	f003 f81c 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163e:	2300      	movs	r3, #0
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	4619      	mov	r1, r3
 800164c:	4820      	ldr	r0, [pc, #128]	; (80016d0 <MX_GPIO_Init+0x230>)
 800164e:	f003 f80f 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001664:	230a      	movs	r3, #10
 8001666:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166c:	4619      	mov	r1, r3
 800166e:	4818      	ldr	r0, [pc, #96]	; (80016d0 <MX_GPIO_Init+0x230>)
 8001670:	f002 fffe 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001674:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	4619      	mov	r1, r3
 800168c:	4810      	ldr	r0, [pc, #64]	; (80016d0 <MX_GPIO_Init+0x230>)
 800168e:	f002 ffef 	bl	8004670 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001692:	2302      	movs	r3, #2
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	4806      	ldr	r0, [pc, #24]	; (80016c4 <MX_GPIO_Init+0x224>)
 80016aa:	f002 ffe1 	bl	8004670 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ae:	bf00      	nop
 80016b0:	3738      	adds	r7, #56	; 0x38
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	58024400 	.word	0x58024400
 80016bc:	58021400 	.word	0x58021400
 80016c0:	58020400 	.word	0x58020400
 80016c4:	58021000 	.word	0x58021000
 80016c8:	58020800 	.word	0x58020800
 80016cc:	58021800 	.word	0x58021800
 80016d0:	58020000 	.word	0x58020000

080016d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016dc:	e7fe      	b.n	80016dc <Error_Handler+0x8>

080016de <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800170e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001716:	dd06      	ble.n	8001726 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8001724:	e011      	b.n	800174a <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001732:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173a:	d400      	bmi.n	800173e <PID_Init+0x60>
}
 800173c:	e005      	b.n	800174a <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6278      	str	r0, [r7, #36]	; 0x24
 8001760:	6239      	str	r1, [r7, #32]
 8001762:	61fa      	str	r2, [r7, #28]
 8001764:	61bb      	str	r3, [r7, #24]
 8001766:	ed87 0b04 	vstr	d0, [r7, #16]
 800176a:	ed87 1b02 	vstr	d1, [r7, #8]
 800176e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	6a3a      	ldr	r2, [r7, #32]
 800177c:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	2200      	movs	r2, #0
 8001788:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800178a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80017e0 <PID+0x88>
 800178e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80017e8 <PID+0x90>
 8001792:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001794:	f000 f91a 	bl	80019cc <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	2264      	movs	r2, #100	; 0x64
 800179c:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 800179e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80017a2:	4619      	mov	r1, r3
 80017a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017a6:	f000 fa13 	bl	8001bd0 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80017aa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017ae:	4619      	mov	r1, r3
 80017b0:	ed97 2b00 	vldr	d2, [r7]
 80017b4:	ed97 1b02 	vldr	d1, [r7, #8]
 80017b8:	ed97 0b04 	vldr	d0, [r7, #16]
 80017bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017be:	f000 f977 	bl	8001ab0 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 80017c2:	f000 fee3 	bl	800258c <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	1ad2      	subs	r2, r2, r3
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	605a      	str	r2, [r3, #4]
	
}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w
 80017e0:	00000000 	.word	0x00000000
 80017e4:	406fe000 	.word	0x406fe000
	...

080017f0 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	; 0x30
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	785b      	ldrb	r3, [r3, #1]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <PID_Compute+0x14>
	{
		return _FALSE;
 8001800:	2300      	movs	r3, #0
 8001802:	e0c1      	b.n	8001988 <PID_Compute+0x198>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8001804:	f000 fec2 	bl	800258c <HAL_GetTick>
 8001808:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	6a3a      	ldr	r2, [r7, #32]
 800181a:	429a      	cmp	r2, r3
 800181c:	f0c0 80b3 	bcc.w	8001986 <PID_Compute+0x196>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001830:	ed93 6b00 	vldr	d6, [r3]
 8001834:	ed97 7b06 	vldr	d7, [r7, #24]
 8001838:	ee36 7b47 	vsub.f64	d7, d6, d7
 800183c:	ed87 7b04 	vstr	d7, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8001846:	ed97 6b06 	vldr	d6, [r7, #24]
 800184a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800184e:	ed87 7b02 	vstr	d7, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 800185e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001862:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001866:	ee36 7b07 	vadd.f64	d7, d6, d7
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10e      	bne.n	8001896 <PID_Compute+0xa6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8001884:	ed97 7b02 	vldr	d7, [r7, #8]
 8001888:	ee25 7b07 	vmul.f64	d7, d5, d7
 800188c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80018a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80018a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018aa:	dd06      	ble.n	80018ba <PID_Compute+0xca>
		{
			uPID->OutputSum = uPID->OutMax;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80018b8:	e010      	b.n	80018dc <PID_Compute+0xec>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80018c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80018ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ce:	d505      	bpl.n	80018dc <PID_Compute+0xec>
		{
			uPID->OutputSum = uPID->OutMin;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d009      	beq.n	80018f8 <PID_Compute+0x108>
		{
			output = uPID->Kp * error;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80018ea:	ed97 6b04 	vldr	d6, [r7, #16]
 80018ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018f2:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
 80018f6:	e005      	b.n	8001904 <PID_Compute+0x114>
		}
		else
		{
			output = 0;
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8001910:	ed97 7b02 	vldr	d7, [r7, #8]
 8001914:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001918:	ee36 7b47 	vsub.f64	d7, d6, d7
 800191c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001920:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001924:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800192e:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001932:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193a:	dd05      	ble.n	8001948 <PID_Compute+0x158>
		{
			output = uPID->OutMax;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001942:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001946:	e00e      	b.n	8001966 <PID_Compute+0x176>
		}
		else if (output < uPID->OutMin)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800194e:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8001952:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195a:	d504      	bpl.n	8001966 <PID_Compute+0x176>
		{
			output = uPID->OutMin;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001962:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800196a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800196e:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001978:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001980:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <PID_Compute+0x198>
		
	}
	else
	{
		return _FALSE;
 8001986:	2300      	movs	r3, #0
	}
	
}
 8001988:	4618      	mov	r0, r3
 800198a:	3730      	adds	r7, #48	; 0x30
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	bf0c      	ite	eq
 80019a2:	2301      	moveq	r3, #1
 80019a4:	2300      	movne	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <PID_SetMode+0x2e>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	785b      	ldrb	r3, [r3, #1]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff fe90 	bl	80016de <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	705a      	strb	r2, [r3, #1]
	
}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6178      	str	r0, [r7, #20]
 80019d4:	ed87 0b02 	vstr	d0, [r7, #8]
 80019d8:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80019dc:	ed97 6b02 	vldr	d6, [r7, #8]
 80019e0:	ed97 7b00 	vldr	d7, [r7]
 80019e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80019e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ec:	da58      	bge.n	8001aa0 <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 80019ee:	6979      	ldr	r1, [r7, #20]
 80019f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019f4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 80019f8:	6979      	ldr	r1, [r7, #20]
 80019fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019fe:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	785b      	ldrb	r3, [r3, #1]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d04b      	beq.n	8001aa2 <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	ed93 6b00 	vldr	d6, [r3]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001a18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a20:	dd07      	ble.n	8001a32 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001a2c:	e9c1 2300 	strd	r2, r3, [r1]
 8001a30:	e012      	b.n	8001a58 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	ed93 6b00 	vldr	d6, [r3]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001a40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a48:	d506      	bpl.n	8001a58 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001a54:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001a64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6c:	dd06      	ble.n	8001a7c <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001a74:	6979      	ldr	r1, [r7, #20]
 8001a76:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001a7a:	e012      	b.n	8001aa2 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8001a88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a90:	d507      	bpl.n	8001aa2 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001a98:	6979      	ldr	r1, [r7, #20]
 8001a9a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001a9e:	e000      	b.n	8001aa2 <PID_SetOutputLimits+0xd6>
		return;
 8001aa0:	bf00      	nop
		}
		else { }
		
	}
	
}
 8001aa2:	371c      	adds	r7, #28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	0000      	movs	r0, r0
	...

08001ab0 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b08b      	sub	sp, #44	; 0x2c
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	61f8      	str	r0, [r7, #28]
 8001ab8:	ed87 0b04 	vstr	d0, [r7, #16]
 8001abc:	ed87 1b02 	vstr	d1, [r7, #8]
 8001ac0:	ed87 2b00 	vstr	d2, [r7]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001ac8:	ed97 7b04 	vldr	d7, [r7, #16]
 8001acc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad4:	d46e      	bmi.n	8001bb4 <PID_SetTunings2+0x104>
 8001ad6:	ed97 7b02 	vldr	d7, [r7, #8]
 8001ada:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae2:	d467      	bmi.n	8001bb4 <PID_SetTunings2+0x104>
 8001ae4:	ed97 7b00 	vldr	d7, [r7]
 8001ae8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af0:	d460      	bmi.n	8001bb4 <PID_SetTunings2+0x104>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	7efa      	ldrb	r2, [r7, #27]
 8001af6:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001af8:	7efb      	ldrb	r3, [r7, #27]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	bf0c      	ite	eq
 8001afe:	2301      	moveq	r3, #1
 8001b00:	2300      	movne	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001b0a:	69f9      	ldr	r1, [r7, #28]
 8001b0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b10:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8001b14:	69f9      	ldr	r1, [r7, #28]
 8001b16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b1a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001b1e:	69f9      	ldr	r1, [r7, #28]
 8001b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b24:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001b34:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8001bc0 <PID_SetTunings2+0x110>
 8001b38:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b3c:	ed87 7b08 	vstr	d7, [r7, #32]
	
	uPID->Kp = Kp;
 8001b40:	69f9      	ldr	r1, [r7, #28]
 8001b42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b46:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001b4a:	ed97 6b02 	vldr	d6, [r7, #8]
 8001b4e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001b52:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001b5c:	ed97 5b00 	vldr	d5, [r7]
 8001b60:	ed97 6b08 	vldr	d6, [r7, #32]
 8001b64:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	78db      	ldrb	r3, [r3, #3]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d11f      	bne.n	8001bb6 <PID_SetTunings2+0x106>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001b7c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001bc8 <PID_SetTunings2+0x118>
 8001b80:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001b90:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001bc8 <PID_SetTunings2+0x118>
 8001b94:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001ba4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001bc8 <PID_SetTunings2+0x118>
 8001ba8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
 8001bb2:	e000      	b.n	8001bb6 <PID_SetTunings2+0x106>
		return;
 8001bb4:	bf00      	nop
		
	}
	
}
 8001bb6:	372c      	adds	r7, #44	; 0x2c
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	408f4000 	.word	0x408f4000
	...

08001bd0 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	785b      	ldrb	r3, [r3, #1]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d022      	beq.n	8001c2a <PID_SetControllerDirection+0x5a>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	78db      	ldrb	r3, [r3, #3]
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d01d      	beq.n	8001c2a <PID_SetControllerDirection+0x5a>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001bf4:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001c40 <PID_SetControllerDirection+0x70>
 8001bf8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001c08:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001c40 <PID_SetControllerDirection+0x70>
 8001c0c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001c1c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001c40 <PID_SetControllerDirection+0x70>
 8001c20:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	70da      	strb	r2, [r3, #3]
	
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	f3af 8000 	nop.w
	...

08001c48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_MspInit+0x30>)
 8001c50:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001c54:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <HAL_MspInit+0x30>)
 8001c56:	f043 0302 	orr.w	r3, r3, #2
 8001c5a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_MspInit+0x30>)
 8001c60:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	58024400 	.word	0x58024400

08001c7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b0ba      	sub	sp, #232	; 0xe8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	22c0      	movs	r2, #192	; 0xc0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f00b ff21 	bl	800dae4 <memset>
  if(hadc->Instance==ADC1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a2b      	ldr	r2, [pc, #172]	; (8001d54 <HAL_ADC_MspInit+0xd8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d14f      	bne.n	8001d4c <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001cbc:	2310      	movs	r3, #16
 8001cbe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001ccc:	23c0      	movs	r3, #192	; 0xc0
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f004 fc4a 	bl	800657c <HAL_RCCEx_PeriphCLKConfig>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8001cee:	f7ff fcf1 	bl	80016d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_ADC_MspInit+0xdc>)
 8001cf4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001cf8:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <HAL_ADC_MspInit+0xdc>)
 8001cfa:	f043 0320 	orr.w	r3, r3, #32
 8001cfe:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <HAL_ADC_MspInit+0xdc>)
 8001d04:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001d08:	f003 0320 	and.w	r3, r3, #32
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_ADC_MspInit+0xdc>)
 8001d12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d16:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <HAL_ADC_MspInit+0xdc>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_ADC_MspInit+0xdc>)
 8001d22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = THERMOCOUPLE_Pin;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d34:	2303      	movs	r3, #3
 8001d36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(THERMOCOUPLE_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4805      	ldr	r0, [pc, #20]	; (8001d5c <HAL_ADC_MspInit+0xe0>)
 8001d48:	f002 fc92 	bl	8004670 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d4c:	bf00      	nop
 8001d4e:	37e8      	adds	r7, #232	; 0xe8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40022000 	.word	0x40022000
 8001d58:	58024400 	.word	0x58024400
 8001d5c:	58020400 	.word	0x58020400

08001d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b0ba      	sub	sp, #232	; 0xe8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d78:	f107 0310 	add.w	r3, r7, #16
 8001d7c:	22c0      	movs	r2, #192	; 0xc0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f00b feaf 	bl	800dae4 <memset>
  if(hi2c->Instance==I2C1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a26      	ldr	r2, [pc, #152]	; (8001e24 <HAL_I2C_MspInit+0xc4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d145      	bne.n	8001e1c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d90:	f04f 0208 	mov.w	r2, #8
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da2:	f107 0310 	add.w	r3, r7, #16
 8001da6:	4618      	mov	r0, r3
 8001da8:	f004 fbe8 	bl	800657c <HAL_RCCEx_PeriphCLKConfig>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001db2:	f7ff fc8f 	bl	80016d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <HAL_I2C_MspInit+0xc8>)
 8001db8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001dbc:	4a1a      	ldr	r2, [pc, #104]	; (8001e28 <HAL_I2C_MspInit+0xc8>)
 8001dbe:	f043 0302 	orr.w	r3, r3, #2
 8001dc2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001dc6:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_I2C_MspInit+0xc8>)
 8001dc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dd4:	23c0      	movs	r3, #192	; 0xc0
 8001dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dda:	2312      	movs	r3, #18
 8001ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dec:	2304      	movs	r3, #4
 8001dee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001df6:	4619      	mov	r1, r3
 8001df8:	480c      	ldr	r0, [pc, #48]	; (8001e2c <HAL_I2C_MspInit+0xcc>)
 8001dfa:	f002 fc39 	bl	8004670 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_I2C_MspInit+0xc8>)
 8001e00:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001e04:	4a08      	ldr	r2, [pc, #32]	; (8001e28 <HAL_I2C_MspInit+0xc8>)
 8001e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e0a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_I2C_MspInit+0xc8>)
 8001e10:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	37e8      	adds	r7, #232	; 0xe8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40005400 	.word	0x40005400
 8001e28:	58024400 	.word	0x58024400
 8001e2c:	58020400 	.word	0x58020400

08001e30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e50:	d135      	bne.n	8001ebe <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e52:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001e54:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001e58:	4a1b      	ldr	r2, [pc, #108]	; (8001ec8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001e62:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001e64:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001e72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e76:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001e82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PLUNGE_ENC_A_Pin|PLUNGE_ENC_B_Pin;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4808      	ldr	r0, [pc, #32]	; (8001ecc <HAL_TIM_Encoder_MspInit+0x9c>)
 8001eaa:	f002 fbe1 	bl	8004670 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	201c      	movs	r0, #28
 8001eb4:	f001 fe43 	bl	8003b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001eb8:	201c      	movs	r0, #28
 8001eba:	f001 fe5a 	bl	8003b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ebe:	bf00      	nop
 8001ec0:	3728      	adds	r7, #40	; 0x28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	58024400 	.word	0x58024400
 8001ecc:	58020000 	.word	0x58020000

08001ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a19      	ldr	r2, [pc, #100]	; (8001f44 <HAL_TIM_Base_MspInit+0x74>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d10f      	bne.n	8001f02 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_TIM_Base_MspInit+0x78>)
 8001ee4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ee8:	4a17      	ldr	r2, [pc, #92]	; (8001f48 <HAL_TIM_Base_MspInit+0x78>)
 8001eea:	f043 0302 	orr.w	r3, r3, #2
 8001eee:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_TIM_Base_MspInit+0x78>)
 8001ef4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f00:	e01b      	b.n	8001f3a <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM5)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <HAL_TIM_Base_MspInit+0x7c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d116      	bne.n	8001f3a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_TIM_Base_MspInit+0x78>)
 8001f0e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001f12:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <HAL_TIM_Base_MspInit+0x78>)
 8001f14:	f043 0308 	orr.w	r3, r3, #8
 8001f18:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_TIM_Base_MspInit+0x78>)
 8001f1e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2032      	movs	r0, #50	; 0x32
 8001f30:	f001 fe05 	bl	8003b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001f34:	2032      	movs	r0, #50	; 0x32
 8001f36:	f001 fe1c 	bl	8003b72 <HAL_NVIC_EnableIRQ>
}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40000400 	.word	0x40000400
 8001f48:	58024400 	.word	0x58024400
 8001f4c:	40000c00 	.word	0x40000c00

08001f50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <HAL_TIM_MspPostInit+0x68>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d11e      	bne.n	8001fb0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_TIM_MspPostInit+0x6c>)
 8001f74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001f78:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <HAL_TIM_MspPostInit+0x6c>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <HAL_TIM_MspPostInit+0x6c>)
 8001f84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f90:	23c0      	movs	r3, #192	; 0xc0
 8001f92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <HAL_TIM_MspPostInit+0x70>)
 8001fac:	f002 fb60 	bl	8004670 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fb0:	bf00      	nop
 8001fb2:	3720      	adds	r7, #32
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40000400 	.word	0x40000400
 8001fbc:	58024400 	.word	0x58024400
 8001fc0:	58020000 	.word	0x58020000

08001fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b0ba      	sub	sp, #232	; 0xe8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fdc:	f107 0310 	add.w	r3, r7, #16
 8001fe0:	22c0      	movs	r2, #192	; 0xc0
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f00b fd7d 	bl	800dae4 <memset>
  if(huart->Instance==USART3)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a2b      	ldr	r2, [pc, #172]	; (800209c <HAL_UART_MspInit+0xd8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d14e      	bne.n	8002092 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ff4:	f04f 0202 	mov.w	r2, #2
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002000:	2300      	movs	r3, #0
 8002002:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002006:	f107 0310 	add.w	r3, r7, #16
 800200a:	4618      	mov	r0, r3
 800200c:	f004 fab6 	bl	800657c <HAL_RCCEx_PeriphCLKConfig>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002016:	f7ff fb5d 	bl	80016d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800201a:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_UART_MspInit+0xdc>)
 800201c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002020:	4a1f      	ldr	r2, [pc, #124]	; (80020a0 <HAL_UART_MspInit+0xdc>)
 8002022:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002026:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800202a:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_UART_MspInit+0xdc>)
 800202c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_UART_MspInit+0xdc>)
 800203a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800203e:	4a18      	ldr	r2, [pc, #96]	; (80020a0 <HAL_UART_MspInit+0xdc>)
 8002040:	f043 0308 	orr.w	r3, r3, #8
 8002044:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002048:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_UART_MspInit+0xdc>)
 800204a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8002056:	f44f 7340 	mov.w	r3, #768	; 0x300
 800205a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002070:	2307      	movs	r3, #7
 8002072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002076:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800207a:	4619      	mov	r1, r3
 800207c:	4809      	ldr	r0, [pc, #36]	; (80020a4 <HAL_UART_MspInit+0xe0>)
 800207e:	f002 faf7 	bl	8004670 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	2027      	movs	r0, #39	; 0x27
 8002088:	f001 fd59 	bl	8003b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800208c:	2027      	movs	r0, #39	; 0x27
 800208e:	f001 fd70 	bl	8003b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002092:	bf00      	nop
 8002094:	37e8      	adds	r7, #232	; 0xe8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40004800 	.word	0x40004800
 80020a0:	58024400 	.word	0x58024400
 80020a4:	58020c00 	.word	0x58020c00

080020a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <NMI_Handler+0x4>

080020ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b2:	e7fe      	b.n	80020b2 <HardFault_Handler+0x4>

080020b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <MemManage_Handler+0x4>

080020ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020be:	e7fe      	b.n	80020be <BusFault_Handler+0x4>

080020c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <UsageFault_Handler+0x4>

080020c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f4:	f000 fa36 	bl	8002564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}

080020fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <TIM2_IRQHandler+0x10>)
 8002102:	f007 f923 	bl	800934c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	240002b4 	.word	0x240002b4

08002110 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002114:	4802      	ldr	r0, [pc, #8]	; (8002120 <USART3_IRQHandler+0x10>)
 8002116:	f008 fa81 	bl	800a61c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	24000398 	.word	0x24000398

08002124 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  /* always do the logging portion */
  /* TODO: Convert this datalogging to DMA to speed it up. actually a priority I think it would have big performance gains*/
  log_position += 1; // increment number of data points taken
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <TIM5_IRQHandler+0x6c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	3301      	adds	r3, #1
 800212e:	4a18      	ldr	r2, [pc, #96]	; (8002190 <TIM5_IRQHandler+0x6c>)
 8002130:	6013      	str	r3, [r2, #0]
  current_pos = TIM2->CNT;
 8002132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	4a16      	ldr	r2, [pc, #88]	; (8002194 <TIM5_IRQHandler+0x70>)
 800213a:	6013      	str	r3, [r2, #0]
  HAL_ADC_Start(&hadc1);
 800213c:	4816      	ldr	r0, [pc, #88]	; (8002198 <TIM5_IRQHandler+0x74>)
 800213e:	f000 fd91 	bl	8002c64 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002142:	f04f 31ff 	mov.w	r1, #4294967295
 8002146:	4814      	ldr	r0, [pc, #80]	; (8002198 <TIM5_IRQHandler+0x74>)
 8002148:	f000 fe46 	bl	8002dd8 <HAL_ADC_PollForConversion>
  current_temp = HAL_ADC_GetValue(&hadc1);
 800214c:	4812      	ldr	r0, [pc, #72]	; (8002198 <TIM5_IRQHandler+0x74>)
 800214e:	f000 ff1b 	bl	8002f88 <HAL_ADC_GetValue>
 8002152:	4603      	mov	r3, r0
 8002154:	4a11      	ldr	r2, [pc, #68]	; (800219c <TIM5_IRQHandler+0x78>)
 8002156:	6013      	str	r3, [r2, #0]
  posLog[log_position] = current_pos; // update log of positions
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <TIM5_IRQHandler+0x70>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <TIM5_IRQHandler+0x6c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	b291      	uxth	r1, r2
 8002162:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <TIM5_IRQHandler+0x7c>)
 8002164:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  thermoLog[log_position] = current_temp; 
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <TIM5_IRQHandler+0x78>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <TIM5_IRQHandler+0x6c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b291      	uxth	r1, r2
 8002172:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <TIM5_IRQHandler+0x80>)
 8002174:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

  TIM5->SR &= ~TIM_SR_UIF; // Clear the TIM5 update flag
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <TIM5_IRQHandler+0x84>)
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <TIM5_IRQHandler+0x84>)
 800217e:	f023 0301 	bic.w	r3, r3, #1
 8002182:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002184:	4809      	ldr	r0, [pc, #36]	; (80021ac <TIM5_IRQHandler+0x88>)
 8002186:	f007 f8e1 	bl	800934c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	24061eac 	.word	0x24061eac
 8002194:	24061f2c 	.word	0x24061f2c
 8002198:	240001fc 	.word	0x240001fc
 800219c:	24061f30 	.word	0x24061f30
 80021a0:	2400042c 	.word	0x2400042c
 80021a4:	2403116c 	.word	0x2403116c
 80021a8:	40000c00 	.word	0x40000c00
 80021ac:	2400034c 	.word	0x2400034c

080021b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return 1;
 80021b4:	2301      	movs	r3, #1
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_kill>:

int _kill(int pid, int sig)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021ca:	f00b fcdd 	bl	800db88 <__errno>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2216      	movs	r2, #22
 80021d2:	601a      	str	r2, [r3, #0]
  return -1;
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_exit>:

void _exit (int status)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ffe7 	bl	80021c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021f2:	e7fe      	b.n	80021f2 <_exit+0x12>

080021f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	e00a      	b.n	800221c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002206:	f3af 8000 	nop.w
 800220a:	4601      	mov	r1, r0
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	60ba      	str	r2, [r7, #8]
 8002212:	b2ca      	uxtb	r2, r1
 8002214:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	3301      	adds	r3, #1
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	dbf0      	blt.n	8002206 <_read+0x12>
  }

  return len;
 8002224:	687b      	ldr	r3, [r7, #4]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	e009      	b.n	8002254 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	60ba      	str	r2, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3301      	adds	r3, #1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	dbf1      	blt.n	8002240 <_write+0x12>
  }
  return len;
 800225c:	687b      	ldr	r3, [r7, #4]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_close>:

int _close(int file)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800228e:	605a      	str	r2, [r3, #4]
  return 0;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <_isatty>:

int _isatty(int file)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022a6:	2301      	movs	r3, #1
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d8:	4a14      	ldr	r2, [pc, #80]	; (800232c <_sbrk+0x5c>)
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <_sbrk+0x60>)
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d102      	bne.n	80022f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <_sbrk+0x64>)
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <_sbrk+0x68>)
 80022f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <_sbrk+0x64>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d207      	bcs.n	8002310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002300:	f00b fc42 	bl	800db88 <__errno>
 8002304:	4603      	mov	r3, r0
 8002306:	220c      	movs	r2, #12
 8002308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
 800230e:	e009      	b.n	8002324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <_sbrk+0x64>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	4a05      	ldr	r2, [pc, #20]	; (8002334 <_sbrk+0x64>)
 8002320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002322:	68fb      	ldr	r3, [r7, #12]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	24100000 	.word	0x24100000
 8002330:	00000400 	.word	0x00000400
 8002334:	24061f34 	.word	0x24061f34
 8002338:	24062088 	.word	0x24062088

0800233c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002340:	4b32      	ldr	r3, [pc, #200]	; (800240c <SystemInit+0xd0>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	4a31      	ldr	r2, [pc, #196]	; (800240c <SystemInit+0xd0>)
 8002348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800234c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002350:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <SystemInit+0xd4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	2b02      	cmp	r3, #2
 800235a:	d807      	bhi.n	800236c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800235c:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <SystemInit+0xd4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 030f 	bic.w	r3, r3, #15
 8002364:	4a2a      	ldr	r2, [pc, #168]	; (8002410 <SystemInit+0xd4>)
 8002366:	f043 0303 	orr.w	r3, r3, #3
 800236a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800236c:	4b29      	ldr	r3, [pc, #164]	; (8002414 <SystemInit+0xd8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a28      	ldr	r2, [pc, #160]	; (8002414 <SystemInit+0xd8>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002378:	4b26      	ldr	r3, [pc, #152]	; (8002414 <SystemInit+0xd8>)
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800237e:	4b25      	ldr	r3, [pc, #148]	; (8002414 <SystemInit+0xd8>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4924      	ldr	r1, [pc, #144]	; (8002414 <SystemInit+0xd8>)
 8002384:	4b24      	ldr	r3, [pc, #144]	; (8002418 <SystemInit+0xdc>)
 8002386:	4013      	ands	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800238a:	4b21      	ldr	r3, [pc, #132]	; (8002410 <SystemInit+0xd4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b00      	cmp	r3, #0
 8002394:	d007      	beq.n	80023a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <SystemInit+0xd4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 030f 	bic.w	r3, r3, #15
 800239e:	4a1c      	ldr	r2, [pc, #112]	; (8002410 <SystemInit+0xd4>)
 80023a0:	f043 0303 	orr.w	r3, r3, #3
 80023a4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <SystemInit+0xd8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80023ac:	4b19      	ldr	r3, [pc, #100]	; (8002414 <SystemInit+0xd8>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80023b2:	4b18      	ldr	r3, [pc, #96]	; (8002414 <SystemInit+0xd8>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80023b8:	4b16      	ldr	r3, [pc, #88]	; (8002414 <SystemInit+0xd8>)
 80023ba:	4a18      	ldr	r2, [pc, #96]	; (800241c <SystemInit+0xe0>)
 80023bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <SystemInit+0xd8>)
 80023c0:	4a17      	ldr	r2, [pc, #92]	; (8002420 <SystemInit+0xe4>)
 80023c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <SystemInit+0xd8>)
 80023c6:	4a17      	ldr	r2, [pc, #92]	; (8002424 <SystemInit+0xe8>)
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <SystemInit+0xd8>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80023d0:	4b10      	ldr	r3, [pc, #64]	; (8002414 <SystemInit+0xd8>)
 80023d2:	4a14      	ldr	r2, [pc, #80]	; (8002424 <SystemInit+0xe8>)
 80023d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <SystemInit+0xd8>)
 80023d8:	2200      	movs	r2, #0
 80023da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023dc:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <SystemInit+0xd8>)
 80023de:	4a11      	ldr	r2, [pc, #68]	; (8002424 <SystemInit+0xe8>)
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <SystemInit+0xd8>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <SystemInit+0xd8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a09      	ldr	r2, [pc, #36]	; (8002414 <SystemInit+0xd8>)
 80023ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <SystemInit+0xd8>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <SystemInit+0xec>)
 80023fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002400:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00
 8002410:	52002000 	.word	0x52002000
 8002414:	58024400 	.word	0x58024400
 8002418:	eaf6ed7f 	.word	0xeaf6ed7f
 800241c:	02020200 	.word	0x02020200
 8002420:	01ff0000 	.word	0x01ff0000
 8002424:	01010280 	.word	0x01010280
 8002428:	52004000 	.word	0x52004000

0800242c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800242c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002464 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002430:	f7ff ff84 	bl	800233c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002436:	490d      	ldr	r1, [pc, #52]	; (800246c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002438:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800243c:	e002      	b.n	8002444 <LoopCopyDataInit>

0800243e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002442:	3304      	adds	r3, #4

08002444 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002448:	d3f9      	bcc.n	800243e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800244c:	4c0a      	ldr	r4, [pc, #40]	; (8002478 <LoopFillZerobss+0x22>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002450:	e001      	b.n	8002456 <LoopFillZerobss>

08002452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002454:	3204      	adds	r2, #4

08002456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002458:	d3fb      	bcc.n	8002452 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800245a:	f00b fb9b 	bl	800db94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800245e:	f7fe fb7f 	bl	8000b60 <main>
  bx  lr
 8002462:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002464:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002468:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800246c:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8002470:	0800feb4 	.word	0x0800feb4
  ldr r2, =_sbss
 8002474:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002478:	24062088 	.word	0x24062088

0800247c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800247c:	e7fe      	b.n	800247c <ADC_IRQHandler>
	...

08002480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002486:	2003      	movs	r0, #3
 8002488:	f001 fb4e 	bl	8003b28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800248c:	f003 fea0 	bl	80061d0 <HAL_RCC_GetSysClockFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <HAL_Init+0x68>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	0a1b      	lsrs	r3, r3, #8
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	4913      	ldr	r1, [pc, #76]	; (80024ec <HAL_Init+0x6c>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
 80024a8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <HAL_Init+0x68>)
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <HAL_Init+0x6c>)
 80024b4:	5cd3      	ldrb	r3, [r2, r3]
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <HAL_Init+0x70>)
 80024c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024c4:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <HAL_Init+0x74>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024ca:	2000      	movs	r0, #0
 80024cc:	f000 f814 	bl	80024f8 <HAL_InitTick>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e002      	b.n	80024e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024da:	f7ff fbb5 	bl	8001c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	58024400 	.word	0x58024400
 80024ec:	0800faf8 	.word	0x0800faf8
 80024f0:	2400000c 	.word	0x2400000c
 80024f4:	24000008 	.word	0x24000008

080024f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002500:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_InitTick+0x60>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e021      	b.n	8002550 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <HAL_InitTick+0x64>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_InitTick+0x60>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800251a:	fbb3 f3f1 	udiv	r3, r3, r1
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	4618      	mov	r0, r3
 8002524:	f001 fb33 	bl	8003b8e <HAL_SYSTICK_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e00e      	b.n	8002550 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b0f      	cmp	r3, #15
 8002536:	d80a      	bhi.n	800254e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002538:	2200      	movs	r2, #0
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f001 fafd 	bl	8003b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002544:	4a06      	ldr	r2, [pc, #24]	; (8002560 <HAL_InitTick+0x68>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	24000014 	.word	0x24000014
 800255c:	24000008 	.word	0x24000008
 8002560:	24000010 	.word	0x24000010

08002564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_IncTick+0x20>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_IncTick+0x24>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4413      	add	r3, r2
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <HAL_IncTick+0x24>)
 8002576:	6013      	str	r3, [r2, #0]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	24000014 	.word	0x24000014
 8002588:	24061f38 	.word	0x24061f38

0800258c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return uwTick;
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <HAL_GetTick+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	24061f38 	.word	0x24061f38

080025a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff ffee 	bl	800258c <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d005      	beq.n	80025ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_Delay+0x44>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ca:	bf00      	nop
 80025cc:	f7ff ffde 	bl	800258c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d8f7      	bhi.n	80025cc <HAL_Delay+0x28>
  {
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	24000014 	.word	0x24000014

080025ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	609a      	str	r2, [r3, #8]
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	609a      	str	r2, [r3, #8]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002654:	b480      	push	{r7}
 8002656:	b087      	sub	sp, #28
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	3360      	adds	r3, #96	; 0x60
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	430b      	orrs	r3, r1
 8002682:	431a      	orrs	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002688:	bf00      	nop
 800268a:	371c      	adds	r7, #28
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	431a      	orrs	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	611a      	str	r2, [r3, #16]
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b087      	sub	sp, #28
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3360      	adds	r3, #96	; 0x60
 80026d6:	461a      	mov	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	601a      	str	r2, [r3, #0]
  }
}
 80026f0:	bf00      	nop
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002722:	b480      	push	{r7}
 8002724:	b087      	sub	sp, #28
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3330      	adds	r3, #48	; 0x30
 8002732:	461a      	mov	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	4413      	add	r3, r2
 8002740:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	211f      	movs	r1, #31
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	401a      	ands	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	0e9b      	lsrs	r3, r3, #26
 800275a:	f003 011f 	and.w	r1, r3, #31
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	431a      	orrs	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800277a:	b480      	push	{r7}
 800277c:	b087      	sub	sp, #28
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	3314      	adds	r3, #20
 800278a:	461a      	mov	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	0e5b      	lsrs	r3, r3, #25
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	4413      	add	r3, r2
 8002798:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	0d1b      	lsrs	r3, r3, #20
 80027a2:	f003 031f 	and.w	r3, r3, #31
 80027a6:	2107      	movs	r1, #7
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	401a      	ands	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	0d1b      	lsrs	r3, r3, #20
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	431a      	orrs	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027c4:	bf00      	nop
 80027c6:	371c      	adds	r7, #28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027e8:	43db      	mvns	r3, r3
 80027ea:	401a      	ands	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 0318 	and.w	r3, r3, #24
 80027f2:	4908      	ldr	r1, [pc, #32]	; (8002814 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027f4:	40d9      	lsrs	r1, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	400b      	ands	r3, r1
 80027fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027fe:	431a      	orrs	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	000fffff 	.word	0x000fffff

08002818 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 031f 	and.w	r3, r3, #31
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <LL_ADC_DisableDeepPowerDown+0x20>)
 800285e:	4013      	ands	r3, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6093      	str	r3, [r2, #8]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	5fffffc0 	.word	0x5fffffc0

08002874 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002888:	d101      	bne.n	800288e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	6fffffc0 	.word	0x6fffffc0

080028c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028d8:	d101      	bne.n	80028de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <LL_ADC_Enable+0x24>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	7fffffc0 	.word	0x7fffffc0

08002914 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <LL_ADC_IsEnabled+0x18>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <LL_ADC_IsEnabled+0x1a>
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <LL_ADC_REG_StartConversion+0x24>)
 800294a:	4013      	ands	r3, r2
 800294c:	f043 0204 	orr.w	r2, r3, #4
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	7fffffc0 	.word	0x7fffffc0

08002964 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d101      	bne.n	800297c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b08      	cmp	r3, #8
 800299c:	d101      	bne.n	80029a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e138      	b.n	8002c3c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff f94f 	bl	8001c7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff3f 	bl	8002874 <LL_ADC_IsDeepPowerDownEnabled>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff25 	bl	8002850 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ff5a 	bl	80028c4 <LL_ADC_IsInternalRegulatorEnabled>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d114      	bne.n	8002a40 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff3e 	bl	800289c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a20:	4b88      	ldr	r3, [pc, #544]	; (8002c44 <HAL_ADC_Init+0x294>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	4a88      	ldr	r2, [pc, #544]	; (8002c48 <HAL_ADC_Init+0x298>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	099b      	lsrs	r3, r3, #6
 8002a2e:	3301      	adds	r3, #1
 8002a30:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a32:	e002      	b.n	8002a3a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f9      	bne.n	8002a34 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff3d 	bl	80028c4 <LL_ADC_IsInternalRegulatorEnabled>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10d      	bne.n	8002a6c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a54:	f043 0210 	orr.w	r2, r3, #16
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff77 	bl	8002964 <LL_ADC_REG_IsConversionOngoing>
 8002a76:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f040 80d2 	bne.w	8002c2a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f040 80ce 	bne.w	8002c2a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a92:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a96:	f043 0202 	orr.w	r2, r3, #2
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ff36 	bl	8002914 <LL_ADC_IsEnabled>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d110      	bne.n	8002ad0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aae:	4867      	ldr	r0, [pc, #412]	; (8002c4c <HAL_ADC_Init+0x29c>)
 8002ab0:	f7ff ff30 	bl	8002914 <LL_ADC_IsEnabled>
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	4866      	ldr	r0, [pc, #408]	; (8002c50 <HAL_ADC_Init+0x2a0>)
 8002ab8:	f7ff ff2c 	bl	8002914 <LL_ADC_IsEnabled>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4323      	orrs	r3, r4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4862      	ldr	r0, [pc, #392]	; (8002c54 <HAL_ADC_Init+0x2a4>)
 8002acc:	f7ff fd8e 	bl	80025ec <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	7d5b      	ldrb	r3, [r3, #21]
 8002ad4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ada:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002ae0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	7f1b      	ldrb	r3, [r3, #28]
 8002ae6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7f1b      	ldrb	r3, [r3, #28]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d106      	bne.n	8002b02 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	045b      	lsls	r3, r3, #17
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b16:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	4b4c      	ldr	r3, [pc, #304]	; (8002c58 <HAL_ADC_Init+0x2a8>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	69b9      	ldr	r1, [r7, #24]
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff14 	bl	8002964 <LL_ADC_REG_IsConversionOngoing>
 8002b3c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ff21 	bl	800298a <LL_ADC_INJ_IsConversionOngoing>
 8002b48:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d14a      	bne.n	8002be6 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d147      	bne.n	8002be6 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	7d1b      	ldrb	r3, [r3, #20]
 8002b5a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	4b3c      	ldr	r3, [pc, #240]	; (8002c5c <HAL_ADC_Init+0x2ac>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	69b9      	ldr	r1, [r7, #24]
 8002b74:	430b      	orrs	r3, r1
 8002b76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d11b      	bne.n	8002bba <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	4b34      	ldr	r3, [pc, #208]	; (8002c60 <HAL_ADC_Init+0x2b0>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b96:	3a01      	subs	r2, #1
 8002b98:	0411      	lsls	r1, r2, #16
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b9e:	4311      	orrs	r1, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ba4:	4311      	orrs	r1, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002baa:	430a      	orrs	r2, r1
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	611a      	str	r2, [r3, #16]
 8002bb8:	e007      	b.n	8002bca <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0201 	bic.w	r2, r2, #1
 8002bc8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fd41 	bl	8003668 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d10c      	bne.n	8002c08 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	f023 010f 	bic.w	r1, r3, #15
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	1e5a      	subs	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
 8002c06:	e007      	b.n	8002c18 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 020f 	bic.w	r2, r2, #15
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1c:	f023 0303 	bic.w	r3, r3, #3
 8002c20:	f043 0201 	orr.w	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	655a      	str	r2, [r3, #84]	; 0x54
 8002c28:	e007      	b.n	8002c3a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	f043 0210 	orr.w	r2, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3724      	adds	r7, #36	; 0x24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd90      	pop	{r4, r7, pc}
 8002c44:	24000008 	.word	0x24000008
 8002c48:	053e2d63 	.word	0x053e2d63
 8002c4c:	40022000 	.word	0x40022000
 8002c50:	40022100 	.word	0x40022100
 8002c54:	40022300 	.word	0x40022300
 8002c58:	fff0c003 	.word	0xfff0c003
 8002c5c:	ffffbffc 	.word	0xffffbffc
 8002c60:	fc00f81e 	.word	0xfc00f81e

08002c64 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c6c:	4856      	ldr	r0, [pc, #344]	; (8002dc8 <HAL_ADC_Start+0x164>)
 8002c6e:	f7ff fdd3 	bl	8002818 <LL_ADC_GetMultimode>
 8002c72:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fe73 	bl	8002964 <LL_ADC_REG_IsConversionOngoing>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f040 809a 	bne.w	8002dba <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_ADC_Start+0x30>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e095      	b.n	8002dc0 <HAL_ADC_Start+0x15c>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fc67 	bl	8003570 <ADC_Enable>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f040 8081 	bne.w	8002db0 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cb2:	4b46      	ldr	r3, [pc, #280]	; (8002dcc <HAL_ADC_Start+0x168>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a43      	ldr	r2, [pc, #268]	; (8002dd0 <HAL_ADC_Start+0x16c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d002      	beq.n	8002cce <HAL_ADC_Start+0x6a>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	e000      	b.n	8002cd0 <HAL_ADC_Start+0x6c>
 8002cce:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <HAL_ADC_Start+0x170>)
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d002      	beq.n	8002cde <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d105      	bne.n	8002cea <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf6:	d106      	bne.n	8002d06 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	f023 0206 	bic.w	r2, r3, #6
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	659a      	str	r2, [r3, #88]	; 0x58
 8002d04:	e002      	b.n	8002d0c <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	221c      	movs	r2, #28
 8002d12:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a2b      	ldr	r2, [pc, #172]	; (8002dd0 <HAL_ADC_Start+0x16c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d002      	beq.n	8002d2c <HAL_ADC_Start+0xc8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	e000      	b.n	8002d2e <HAL_ADC_Start+0xca>
 8002d2c:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <HAL_ADC_Start+0x170>)
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d008      	beq.n	8002d48 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d002      	beq.n	8002d48 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b09      	cmp	r3, #9
 8002d46:	d114      	bne.n	8002d72 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fde6 	bl	800293c <LL_ADC_REG_StartConversion>
 8002d70:	e025      	b.n	8002dbe <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <HAL_ADC_Start+0x16c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d002      	beq.n	8002d8e <HAL_ADC_Start+0x12a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	e000      	b.n	8002d90 <HAL_ADC_Start+0x12c>
 8002d8e:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <HAL_ADC_Start+0x170>)
 8002d90:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00f      	beq.n	8002dbe <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002da6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
 8002dae:	e006      	b.n	8002dbe <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002db8:	e001      	b.n	8002dbe <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40022300 	.word	0x40022300
 8002dcc:	fffff0fe 	.word	0xfffff0fe
 8002dd0:	40022100 	.word	0x40022100
 8002dd4:	40022000 	.word	0x40022000

08002dd8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002de2:	4866      	ldr	r0, [pc, #408]	; (8002f7c <HAL_ADC_PollForConversion+0x1a4>)
 8002de4:	f7ff fd18 	bl	8002818 <LL_ADC_GetMultimode>
 8002de8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d102      	bne.n	8002df8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002df2:	2308      	movs	r3, #8
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	e02a      	b.n	8002e4e <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b05      	cmp	r3, #5
 8002e02:	d002      	beq.n	8002e0a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2b09      	cmp	r3, #9
 8002e08:	d111      	bne.n	8002e2e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d007      	beq.n	8002e28 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0a4      	b.n	8002f72 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002e28:	2304      	movs	r3, #4
 8002e2a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002e2c:	e00f      	b.n	8002e4e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002e2e:	4853      	ldr	r0, [pc, #332]	; (8002f7c <HAL_ADC_PollForConversion+0x1a4>)
 8002e30:	f7ff fd00 	bl	8002834 <LL_ADC_GetMultiDMATransfer>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3e:	f043 0220 	orr.w	r2, r3, #32
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e093      	b.n	8002f72 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e4e:	f7ff fb9d 	bl	800258c <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e54:	e021      	b.n	8002e9a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d01d      	beq.n	8002e9a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002e5e:	f7ff fb95 	bl	800258c <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d302      	bcc.n	8002e74 <HAL_ADC_PollForConversion+0x9c>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d112      	bne.n	8002e9a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10b      	bne.n	8002e9a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	f043 0204 	orr.w	r2, r3, #4
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e06b      	b.n	8002f72 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0d6      	beq.n	8002e56 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fc1f 	bl	80026fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d01c      	beq.n	8002efe <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7d5b      	ldrb	r3, [r3, #21]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d118      	bne.n	8002efe <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d111      	bne.n	8002efe <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d105      	bne.n	8002efe <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	f043 0201 	orr.w	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <HAL_ADC_PollForConversion+0x1a8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d002      	beq.n	8002f0e <HAL_ADC_PollForConversion+0x136>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	e000      	b.n	8002f10 <HAL_ADC_PollForConversion+0x138>
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <HAL_ADC_PollForConversion+0x1ac>)
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d008      	beq.n	8002f2a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d005      	beq.n	8002f2a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	d002      	beq.n	8002f2a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2b09      	cmp	r3, #9
 8002f28:	d104      	bne.n	8002f34 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	e00c      	b.n	8002f4e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a11      	ldr	r2, [pc, #68]	; (8002f80 <HAL_ADC_PollForConversion+0x1a8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d002      	beq.n	8002f44 <HAL_ADC_PollForConversion+0x16c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	e000      	b.n	8002f46 <HAL_ADC_PollForConversion+0x16e>
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <HAL_ADC_PollForConversion+0x1ac>)
 8002f46:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d104      	bne.n	8002f5e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2208      	movs	r2, #8
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	e008      	b.n	8002f70 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d103      	bne.n	8002f70 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	220c      	movs	r2, #12
 8002f6e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40022300 	.word	0x40022300
 8002f80:	40022100 	.word	0x40022100
 8002f84:	40022000 	.word	0x40022000

08002f88 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fa4:	b590      	push	{r4, r7, lr}
 8002fa6:	b0a1      	sub	sp, #132	; 0x84
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4a9a      	ldr	r2, [pc, #616]	; (8003228 <HAL_ADC_ConfigChannel+0x284>)
 8002fbe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x2a>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e2bc      	b.n	8003548 <HAL_ADC_ConfigChannel+0x5a4>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fcc2 	bl	8002964 <LL_ADC_REG_IsConversionOngoing>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f040 82a1 	bne.w	800352a <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d108      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x62>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	0e9b      	lsrs	r3, r3, #26
 8002ffa:	f003 031f 	and.w	r3, r3, #31
 8002ffe:	2201      	movs	r2, #1
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	e016      	b.n	8003034 <HAL_ADC_ConfigChannel+0x90>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003016:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800301e:	2320      	movs	r3, #32
 8003020:	e003      	b.n	800302a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	2201      	movs	r2, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	69d1      	ldr	r1, [r2, #28]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	430b      	orrs	r3, r1
 8003040:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6859      	ldr	r1, [r3, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	f7ff fb67 	bl	8002722 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fc83 	bl	8002964 <LL_ADC_REG_IsConversionOngoing>
 800305e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fc90 	bl	800298a <LL_ADC_INJ_IsConversionOngoing>
 800306a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800306c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800306e:	2b00      	cmp	r3, #0
 8003070:	f040 80a0 	bne.w	80031b4 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003076:	2b00      	cmp	r3, #0
 8003078:	f040 809c 	bne.w	80031b4 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	6819      	ldr	r1, [r3, #0]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	461a      	mov	r2, r3
 800308a:	f7ff fb76 	bl	800277a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10b      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x110>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	e00a      	b.n	80030ca <HAL_ADC_ConfigChannel+0x126>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d027      	beq.n	8003124 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6919      	ldr	r1, [r3, #16]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030e2:	f7ff fab7 	bl	8002654 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6919      	ldr	r1, [r3, #16]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	7e5b      	ldrb	r3, [r3, #25]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d102      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x158>
 80030f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80030fa:	e000      	b.n	80030fe <HAL_ADC_ConfigChannel+0x15a>
 80030fc:	2300      	movs	r3, #0
 80030fe:	461a      	mov	r2, r3
 8003100:	f7ff fae1 	bl	80026c6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6919      	ldr	r1, [r3, #16]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	7e1b      	ldrb	r3, [r3, #24]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d102      	bne.n	800311a <HAL_ADC_ConfigChannel+0x176>
 8003114:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003118:	e000      	b.n	800311c <HAL_ADC_ConfigChannel+0x178>
 800311a:	2300      	movs	r3, #0
 800311c:	461a      	mov	r2, r3
 800311e:	f7ff fab9 	bl	8002694 <LL_ADC_SetDataRightShift>
 8003122:	e047      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	069b      	lsls	r3, r3, #26
 8003134:	429a      	cmp	r2, r3
 8003136:	d107      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003146:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800314e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	069b      	lsls	r3, r3, #26
 8003158:	429a      	cmp	r2, r3
 800315a:	d107      	bne.n	800316c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800316a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003172:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	069b      	lsls	r3, r3, #26
 800317c:	429a      	cmp	r2, r3
 800317e:	d107      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800318e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003196:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	069b      	lsls	r3, r3, #26
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d107      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031b2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fbab 	bl	8002914 <LL_ADC_IsEnabled>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f040 81bb 	bne.w	800353c <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6819      	ldr	r1, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f7ff fafc 	bl	80027d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4a12      	ldr	r2, [pc, #72]	; (8003228 <HAL_ADC_ConfigChannel+0x284>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	f040 8130 	bne.w	8003444 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10b      	bne.n	800320c <HAL_ADC_ConfigChannel+0x268>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	0e9b      	lsrs	r3, r3, #26
 80031fa:	3301      	adds	r3, #1
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	2b09      	cmp	r3, #9
 8003202:	bf94      	ite	ls
 8003204:	2301      	movls	r3, #1
 8003206:	2300      	movhi	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	e01b      	b.n	8003244 <HAL_ADC_ConfigChannel+0x2a0>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003214:	fa93 f3a3 	rbit	r3, r3
 8003218:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800321a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800321c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800321e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d103      	bne.n	800322c <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8003224:	2320      	movs	r3, #32
 8003226:	e005      	b.n	8003234 <HAL_ADC_ConfigChannel+0x290>
 8003228:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 800322c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	3301      	adds	r3, #1
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	2b09      	cmp	r3, #9
 800323c:	bf94      	ite	ls
 800323e:	2301      	movls	r3, #1
 8003240:	2300      	movhi	r3, #0
 8003242:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003244:	2b00      	cmp	r3, #0
 8003246:	d079      	beq.n	800333c <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003250:	2b00      	cmp	r3, #0
 8003252:	d107      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x2c0>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	0e9b      	lsrs	r3, r3, #26
 800325a:	3301      	adds	r3, #1
 800325c:	069b      	lsls	r3, r3, #26
 800325e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003262:	e015      	b.n	8003290 <HAL_ADC_ConfigChannel+0x2ec>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003274:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800327c:	2320      	movs	r3, #32
 800327e:	e003      	b.n	8003288 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003282:	fab3 f383 	clz	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	3301      	adds	r3, #1
 800328a:	069b      	lsls	r3, r3, #26
 800328c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003298:	2b00      	cmp	r3, #0
 800329a:	d109      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x30c>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	0e9b      	lsrs	r3, r3, #26
 80032a2:	3301      	adds	r3, #1
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f303 	lsl.w	r3, r1, r3
 80032ae:	e017      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x33c>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b8:	fa93 f3a3 	rbit	r3, r3
 80032bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80032be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80032c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80032c8:	2320      	movs	r3, #32
 80032ca:	e003      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80032cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ce:	fab3 f383 	clz	r3, r3
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	3301      	adds	r3, #1
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f303 	lsl.w	r3, r1, r3
 80032e0:	ea42 0103 	orr.w	r1, r2, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10a      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x362>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	0e9b      	lsrs	r3, r3, #26
 80032f6:	3301      	adds	r3, #1
 80032f8:	f003 021f 	and.w	r2, r3, #31
 80032fc:	4613      	mov	r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4413      	add	r3, r2
 8003302:	051b      	lsls	r3, r3, #20
 8003304:	e018      	b.n	8003338 <HAL_ADC_ConfigChannel+0x394>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800331e:	2320      	movs	r3, #32
 8003320:	e003      	b.n	800332a <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8003322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	b2db      	uxtb	r3, r3
 800332a:	3301      	adds	r3, #1
 800332c:	f003 021f 	and.w	r2, r3, #31
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003338:	430b      	orrs	r3, r1
 800333a:	e07e      	b.n	800343a <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003344:	2b00      	cmp	r3, #0
 8003346:	d107      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x3b4>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	0e9b      	lsrs	r3, r3, #26
 800334e:	3301      	adds	r3, #1
 8003350:	069b      	lsls	r3, r3, #26
 8003352:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003356:	e015      	b.n	8003384 <HAL_ADC_ConfigChannel+0x3e0>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	fa93 f3a3 	rbit	r3, r3
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003370:	2320      	movs	r3, #32
 8003372:	e003      	b.n	800337c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	3301      	adds	r3, #1
 800337e:	069b      	lsls	r3, r3, #26
 8003380:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800338c:	2b00      	cmp	r3, #0
 800338e:	d109      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x400>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	0e9b      	lsrs	r3, r3, #26
 8003396:	3301      	adds	r3, #1
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	2101      	movs	r1, #1
 800339e:	fa01 f303 	lsl.w	r3, r1, r3
 80033a2:	e017      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x430>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	61bb      	str	r3, [r7, #24]
  return result;
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80033bc:	2320      	movs	r3, #32
 80033be:	e003      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	3301      	adds	r3, #1
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	2101      	movs	r1, #1
 80033d0:	fa01 f303 	lsl.w	r3, r1, r3
 80033d4:	ea42 0103 	orr.w	r1, r2, r3
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10d      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x45c>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	0e9b      	lsrs	r3, r3, #26
 80033ea:	3301      	adds	r3, #1
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	4613      	mov	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	4413      	add	r3, r2
 80033f6:	3b1e      	subs	r3, #30
 80033f8:	051b      	lsls	r3, r3, #20
 80033fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033fe:	e01b      	b.n	8003438 <HAL_ADC_ConfigChannel+0x494>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	60fb      	str	r3, [r7, #12]
  return result;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8003418:	2320      	movs	r3, #32
 800341a:	e003      	b.n	8003424 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	3301      	adds	r3, #1
 8003426:	f003 021f 	and.w	r2, r3, #31
 800342a:	4613      	mov	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4413      	add	r3, r2
 8003430:	3b1e      	subs	r3, #30
 8003432:	051b      	lsls	r3, r3, #20
 8003434:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003438:	430b      	orrs	r3, r1
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	6892      	ldr	r2, [r2, #8]
 800343e:	4619      	mov	r1, r3
 8003440:	f7ff f99b 	bl	800277a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	da77      	bge.n	800353c <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800344c:	4840      	ldr	r0, [pc, #256]	; (8003550 <HAL_ADC_ConfigChannel+0x5ac>)
 800344e:	f7ff f8f3 	bl	8002638 <LL_ADC_GetCommonPathInternalCh>
 8003452:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003454:	483f      	ldr	r0, [pc, #252]	; (8003554 <HAL_ADC_ConfigChannel+0x5b0>)
 8003456:	f7ff fa5d 	bl	8002914 <LL_ADC_IsEnabled>
 800345a:	4604      	mov	r4, r0
 800345c:	483e      	ldr	r0, [pc, #248]	; (8003558 <HAL_ADC_ConfigChannel+0x5b4>)
 800345e:	f7ff fa59 	bl	8002914 <LL_ADC_IsEnabled>
 8003462:	4603      	mov	r3, r0
 8003464:	4323      	orrs	r3, r4
 8003466:	2b00      	cmp	r3, #0
 8003468:	d155      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a3b      	ldr	r2, [pc, #236]	; (800355c <HAL_ADC_ConfigChannel+0x5b8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d122      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x516>
 8003474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003476:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d11d      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a35      	ldr	r2, [pc, #212]	; (8003558 <HAL_ADC_ConfigChannel+0x5b4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d159      	bne.n	800353c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800348e:	4619      	mov	r1, r3
 8003490:	482f      	ldr	r0, [pc, #188]	; (8003550 <HAL_ADC_ConfigChannel+0x5ac>)
 8003492:	f7ff f8be 	bl	8002612 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003496:	4b32      	ldr	r3, [pc, #200]	; (8003560 <HAL_ADC_ConfigChannel+0x5bc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	099b      	lsrs	r3, r3, #6
 800349c:	4a31      	ldr	r2, [pc, #196]	; (8003564 <HAL_ADC_ConfigChannel+0x5c0>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	099b      	lsrs	r3, r3, #6
 80034a4:	3301      	adds	r3, #1
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80034aa:	e002      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f9      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034b8:	e040      	b.n	800353c <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a2a      	ldr	r2, [pc, #168]	; (8003568 <HAL_ADC_ConfigChannel+0x5c4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d111      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x544>
 80034c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10c      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a21      	ldr	r2, [pc, #132]	; (8003558 <HAL_ADC_ConfigChannel+0x5b4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d131      	bne.n	800353c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80034d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034de:	4619      	mov	r1, r3
 80034e0:	481b      	ldr	r0, [pc, #108]	; (8003550 <HAL_ADC_ConfigChannel+0x5ac>)
 80034e2:	f7ff f896 	bl	8002612 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034e6:	e029      	b.n	800353c <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1f      	ldr	r2, [pc, #124]	; (800356c <HAL_ADC_ConfigChannel+0x5c8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d124      	bne.n	800353c <HAL_ADC_ConfigChannel+0x598>
 80034f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d11f      	bne.n	800353c <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a15      	ldr	r2, [pc, #84]	; (8003558 <HAL_ADC_ConfigChannel+0x5b4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d11a      	bne.n	800353c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003508:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800350c:	4619      	mov	r1, r3
 800350e:	4810      	ldr	r0, [pc, #64]	; (8003550 <HAL_ADC_ConfigChannel+0x5ac>)
 8003510:	f7ff f87f 	bl	8002612 <LL_ADC_SetCommonPathInternalCh>
 8003514:	e012      	b.n	800353c <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	f043 0220 	orr.w	r2, r3, #32
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003528:	e008      	b.n	800353c <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352e:	f043 0220 	orr.w	r2, r3, #32
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003544:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003548:	4618      	mov	r0, r3
 800354a:	3784      	adds	r7, #132	; 0x84
 800354c:	46bd      	mov	sp, r7
 800354e:	bd90      	pop	{r4, r7, pc}
 8003550:	40022300 	.word	0x40022300
 8003554:	40022000 	.word	0x40022000
 8003558:	40022100 	.word	0x40022100
 800355c:	cb840000 	.word	0xcb840000
 8003560:	24000008 	.word	0x24000008
 8003564:	053e2d63 	.word	0x053e2d63
 8003568:	bac04000 	.word	0xbac04000
 800356c:	cfb80000 	.word	0xcfb80000

08003570 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff f9c9 	bl	8002914 <LL_ADC_IsEnabled>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d161      	bne.n	800364c <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	4b32      	ldr	r3, [pc, #200]	; (8003658 <ADC_Enable+0xe8>)
 8003590:	4013      	ands	r3, r2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00d      	beq.n	80035b2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359a:	f043 0210 	orr.w	r2, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a6:	f043 0201 	orr.w	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e04d      	b.n	800364e <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff f998 	bl	80028ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035bc:	f7fe ffe6 	bl	800258c <HAL_GetTick>
 80035c0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035c2:	4826      	ldr	r0, [pc, #152]	; (800365c <ADC_Enable+0xec>)
 80035c4:	f7ff f928 	bl	8002818 <LL_ADC_GetMultimode>
 80035c8:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a24      	ldr	r2, [pc, #144]	; (8003660 <ADC_Enable+0xf0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d002      	beq.n	80035da <ADC_Enable+0x6a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	e000      	b.n	80035dc <ADC_Enable+0x6c>
 80035da:	4b22      	ldr	r3, [pc, #136]	; (8003664 <ADC_Enable+0xf4>)
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d02c      	beq.n	800363e <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d130      	bne.n	800364c <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035ea:	e028      	b.n	800363e <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff f98f 	bl	8002914 <LL_ADC_IsEnabled>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d104      	bne.n	8003606 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff f973 	bl	80028ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003606:	f7fe ffc1 	bl	800258c <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d914      	bls.n	800363e <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d00d      	beq.n	800363e <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003626:	f043 0210 	orr.w	r2, r3, #16
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003632:	f043 0201 	orr.w	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e007      	b.n	800364e <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b01      	cmp	r3, #1
 800364a:	d1cf      	bne.n	80035ec <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	8000003f 	.word	0x8000003f
 800365c:	40022300 	.word	0x40022300
 8003660:	40022100 	.word	0x40022100
 8003664:	40022000 	.word	0x40022000

08003668 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003670:	4b60      	ldr	r3, [pc, #384]	; (80037f4 <ADC_ConfigureBoostMode+0x18c>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01c      	beq.n	80036b6 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800367c:	f002 ff22 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 8003680:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800368a:	d010      	beq.n	80036ae <ADC_ConfigureBoostMode+0x46>
 800368c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003690:	d873      	bhi.n	800377a <ADC_ConfigureBoostMode+0x112>
 8003692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003696:	d002      	beq.n	800369e <ADC_ConfigureBoostMode+0x36>
 8003698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800369c:	d16d      	bne.n	800377a <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	0c1b      	lsrs	r3, r3, #16
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036aa:	60fb      	str	r3, [r7, #12]
        break;
 80036ac:	e068      	b.n	8003780 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	089b      	lsrs	r3, r3, #2
 80036b2:	60fb      	str	r3, [r7, #12]
        break;
 80036b4:	e064      	b.n	8003780 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80036b6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80036ba:	f04f 0100 	mov.w	r1, #0
 80036be:	f004 f91b 	bl	80078f8 <HAL_RCCEx_GetPeriphCLKFreq>
 80036c2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80036cc:	d051      	beq.n	8003772 <ADC_ConfigureBoostMode+0x10a>
 80036ce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80036d2:	d854      	bhi.n	800377e <ADC_ConfigureBoostMode+0x116>
 80036d4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80036d8:	d047      	beq.n	800376a <ADC_ConfigureBoostMode+0x102>
 80036da:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80036de:	d84e      	bhi.n	800377e <ADC_ConfigureBoostMode+0x116>
 80036e0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80036e4:	d03d      	beq.n	8003762 <ADC_ConfigureBoostMode+0xfa>
 80036e6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80036ea:	d848      	bhi.n	800377e <ADC_ConfigureBoostMode+0x116>
 80036ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036f0:	d033      	beq.n	800375a <ADC_ConfigureBoostMode+0xf2>
 80036f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036f6:	d842      	bhi.n	800377e <ADC_ConfigureBoostMode+0x116>
 80036f8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80036fc:	d029      	beq.n	8003752 <ADC_ConfigureBoostMode+0xea>
 80036fe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003702:	d83c      	bhi.n	800377e <ADC_ConfigureBoostMode+0x116>
 8003704:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003708:	d01a      	beq.n	8003740 <ADC_ConfigureBoostMode+0xd8>
 800370a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800370e:	d836      	bhi.n	800377e <ADC_ConfigureBoostMode+0x116>
 8003710:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003714:	d014      	beq.n	8003740 <ADC_ConfigureBoostMode+0xd8>
 8003716:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800371a:	d830      	bhi.n	800377e <ADC_ConfigureBoostMode+0x116>
 800371c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003720:	d00e      	beq.n	8003740 <ADC_ConfigureBoostMode+0xd8>
 8003722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003726:	d82a      	bhi.n	800377e <ADC_ConfigureBoostMode+0x116>
 8003728:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800372c:	d008      	beq.n	8003740 <ADC_ConfigureBoostMode+0xd8>
 800372e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003732:	d824      	bhi.n	800377e <ADC_ConfigureBoostMode+0x116>
 8003734:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003738:	d002      	beq.n	8003740 <ADC_ConfigureBoostMode+0xd8>
 800373a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800373e:	d11e      	bne.n	800377e <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	0c9b      	lsrs	r3, r3, #18
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	fbb2 f3f3 	udiv	r3, r2, r3
 800374e:	60fb      	str	r3, [r7, #12]
        break;
 8003750:	e016      	b.n	8003780 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	60fb      	str	r3, [r7, #12]
        break;
 8003758:	e012      	b.n	8003780 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	60fb      	str	r3, [r7, #12]
        break;
 8003760:	e00e      	b.n	8003780 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	099b      	lsrs	r3, r3, #6
 8003766:	60fb      	str	r3, [r7, #12]
        break;
 8003768:	e00a      	b.n	8003780 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	09db      	lsrs	r3, r3, #7
 800376e:	60fb      	str	r3, [r7, #12]
        break;
 8003770:	e006      	b.n	8003780 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	60fb      	str	r3, [r7, #12]
        break;
 8003778:	e002      	b.n	8003780 <ADC_ConfigureBoostMode+0x118>
        break;
 800377a:	bf00      	nop
 800377c:	e000      	b.n	8003780 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 800377e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	085b      	lsrs	r3, r3, #1
 8003784:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	4a1b      	ldr	r2, [pc, #108]	; (80037f8 <ADC_ConfigureBoostMode+0x190>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d808      	bhi.n	80037a0 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800379c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800379e:	e025      	b.n	80037ec <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4a16      	ldr	r2, [pc, #88]	; (80037fc <ADC_ConfigureBoostMode+0x194>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d80a      	bhi.n	80037be <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ba:	609a      	str	r2, [r3, #8]
}
 80037bc:	e016      	b.n	80037ec <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4a0f      	ldr	r2, [pc, #60]	; (8003800 <ADC_ConfigureBoostMode+0x198>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d80a      	bhi.n	80037dc <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d8:	609a      	str	r2, [r3, #8]
}
 80037da:	e007      	b.n	80037ec <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80037ea:	609a      	str	r2, [r3, #8]
}
 80037ec:	bf00      	nop
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40022300 	.word	0x40022300
 80037f8:	005f5e10 	.word	0x005f5e10
 80037fc:	00bebc20 	.word	0x00bebc20
 8003800:	017d7840 	.word	0x017d7840

08003804 <LL_ADC_IsEnabled>:
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <LL_ADC_IsEnabled+0x18>
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <LL_ADC_IsEnabled+0x1a>
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <LL_ADC_REG_IsConversionOngoing>:
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d101      	bne.n	8003842 <LL_ADC_REG_IsConversionOngoing+0x18>
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003850:	b590      	push	{r4, r7, lr}
 8003852:	b09f      	sub	sp, #124	; 0x7c
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800386a:	2302      	movs	r3, #2
 800386c:	e080      	b.n	8003970 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003876:	2300      	movs	r3, #0
 8003878:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800387a:	2300      	movs	r3, #0
 800387c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a3d      	ldr	r2, [pc, #244]	; (8003978 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d102      	bne.n	800388e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003888:	4b3c      	ldr	r3, [pc, #240]	; (800397c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	e001      	b.n	8003892 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10b      	bne.n	80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389c:	f043 0220 	orr.w	r2, r3, #32
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e05f      	b.n	8003970 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff ffb9 	bl	800382a <LL_ADC_REG_IsConversionOngoing>
 80038b8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff ffb3 	bl	800382a <LL_ADC_REG_IsConversionOngoing>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d141      	bne.n	800394e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80038ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d13e      	bne.n	800394e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038d0:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80038d2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d020      	beq.n	800391e <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80038dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ec:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038ee:	4822      	ldr	r0, [pc, #136]	; (8003978 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80038f0:	f7ff ff88 	bl	8003804 <LL_ADC_IsEnabled>
 80038f4:	4604      	mov	r4, r0
 80038f6:	4821      	ldr	r0, [pc, #132]	; (800397c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80038f8:	f7ff ff84 	bl	8003804 <LL_ADC_IsEnabled>
 80038fc:	4603      	mov	r3, r0
 80038fe:	4323      	orrs	r3, r4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d12e      	bne.n	8003962 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	4b1e      	ldr	r3, [pc, #120]	; (8003984 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800390a:	4013      	ands	r3, r2
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	6811      	ldr	r1, [r2, #0]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	6892      	ldr	r2, [r2, #8]
 8003914:	430a      	orrs	r2, r1
 8003916:	431a      	orrs	r2, r3
 8003918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800391c:	e021      	b.n	8003962 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800391e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003928:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800392a:	4813      	ldr	r0, [pc, #76]	; (8003978 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800392c:	f7ff ff6a 	bl	8003804 <LL_ADC_IsEnabled>
 8003930:	4604      	mov	r4, r0
 8003932:	4812      	ldr	r0, [pc, #72]	; (800397c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003934:	f7ff ff66 	bl	8003804 <LL_ADC_IsEnabled>
 8003938:	4603      	mov	r3, r0
 800393a:	4323      	orrs	r3, r4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d110      	bne.n	8003962 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003946:	4013      	ands	r3, r2
 8003948:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800394a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800394c:	e009      	b.n	8003962 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003952:	f043 0220 	orr.w	r2, r3, #32
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003960:	e000      	b.n	8003964 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003962:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800396c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003970:	4618      	mov	r0, r3
 8003972:	377c      	adds	r7, #124	; 0x7c
 8003974:	46bd      	mov	sp, r7
 8003976:	bd90      	pop	{r4, r7, pc}
 8003978:	40022000 	.word	0x40022000
 800397c:	40022100 	.word	0x40022100
 8003980:	40022300 	.word	0x40022300
 8003984:	fffff0e0 	.word	0xfffff0e0

08003988 <__NVIC_SetPriorityGrouping>:
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <__NVIC_SetPriorityGrouping+0x40>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039a4:	4013      	ands	r3, r2
 80039a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <__NVIC_SetPriorityGrouping+0x44>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039b6:	4a04      	ldr	r2, [pc, #16]	; (80039c8 <__NVIC_SetPriorityGrouping+0x40>)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	60d3      	str	r3, [r2, #12]
}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	e000ed00 	.word	0xe000ed00
 80039cc:	05fa0000 	.word	0x05fa0000

080039d0 <__NVIC_GetPriorityGrouping>:
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <__NVIC_GetPriorityGrouping+0x18>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	0a1b      	lsrs	r3, r3, #8
 80039da:	f003 0307 	and.w	r3, r3, #7
}
 80039de:	4618      	mov	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	e000ed00 	.word	0xe000ed00

080039ec <__NVIC_EnableIRQ>:
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	db0b      	blt.n	8003a16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	f003 021f 	and.w	r2, r3, #31
 8003a04:	4907      	ldr	r1, [pc, #28]	; (8003a24 <__NVIC_EnableIRQ+0x38>)
 8003a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	2001      	movs	r0, #1
 8003a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	e000e100 	.word	0xe000e100

08003a28 <__NVIC_SetPriority>:
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	6039      	str	r1, [r7, #0]
 8003a32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	db0a      	blt.n	8003a52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	490c      	ldr	r1, [pc, #48]	; (8003a74 <__NVIC_SetPriority+0x4c>)
 8003a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a46:	0112      	lsls	r2, r2, #4
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a50:	e00a      	b.n	8003a68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	4908      	ldr	r1, [pc, #32]	; (8003a78 <__NVIC_SetPriority+0x50>)
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	3b04      	subs	r3, #4
 8003a60:	0112      	lsls	r2, r2, #4
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	440b      	add	r3, r1
 8003a66:	761a      	strb	r2, [r3, #24]
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000e100 	.word	0xe000e100
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b089      	sub	sp, #36	; 0x24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f1c3 0307 	rsb	r3, r3, #7
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	bf28      	it	cs
 8003a9a:	2304      	movcs	r3, #4
 8003a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	d902      	bls.n	8003aac <NVIC_EncodePriority+0x30>
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3b03      	subs	r3, #3
 8003aaa:	e000      	b.n	8003aae <NVIC_EncodePriority+0x32>
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43da      	mvns	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	401a      	ands	r2, r3
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ace:	43d9      	mvns	r1, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad4:	4313      	orrs	r3, r2
         );
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3724      	adds	r7, #36	; 0x24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
	...

08003ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003af4:	d301      	bcc.n	8003afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003af6:	2301      	movs	r3, #1
 8003af8:	e00f      	b.n	8003b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003afa:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <SysTick_Config+0x40>)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b02:	210f      	movs	r1, #15
 8003b04:	f04f 30ff 	mov.w	r0, #4294967295
 8003b08:	f7ff ff8e 	bl	8003a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <SysTick_Config+0x40>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b12:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <SysTick_Config+0x40>)
 8003b14:	2207      	movs	r2, #7
 8003b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	e000e010 	.word	0xe000e010

08003b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff ff29 	bl	8003988 <__NVIC_SetPriorityGrouping>
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b086      	sub	sp, #24
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	4603      	mov	r3, r0
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b4c:	f7ff ff40 	bl	80039d0 <__NVIC_GetPriorityGrouping>
 8003b50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	68b9      	ldr	r1, [r7, #8]
 8003b56:	6978      	ldr	r0, [r7, #20]
 8003b58:	f7ff ff90 	bl	8003a7c <NVIC_EncodePriority>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b62:	4611      	mov	r1, r2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff ff5f 	bl	8003a28 <__NVIC_SetPriority>
}
 8003b6a:	bf00      	nop
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b082      	sub	sp, #8
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	4603      	mov	r3, r0
 8003b7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ff33 	bl	80039ec <__NVIC_EnableIRQ>
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff ffa4 	bl	8003ae4 <SysTick_Config>
 8003b9c:	4603      	mov	r3, r0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003bb0:	f7fe fcec 	bl	800258c <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e2dc      	b.n	800417a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d008      	beq.n	8003bde <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2280      	movs	r2, #128	; 0x80
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e2cd      	b.n	800417a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a76      	ldr	r2, [pc, #472]	; (8003dbc <HAL_DMA_Abort+0x214>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d04a      	beq.n	8003c7e <HAL_DMA_Abort+0xd6>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a74      	ldr	r2, [pc, #464]	; (8003dc0 <HAL_DMA_Abort+0x218>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d045      	beq.n	8003c7e <HAL_DMA_Abort+0xd6>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a73      	ldr	r2, [pc, #460]	; (8003dc4 <HAL_DMA_Abort+0x21c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d040      	beq.n	8003c7e <HAL_DMA_Abort+0xd6>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a71      	ldr	r2, [pc, #452]	; (8003dc8 <HAL_DMA_Abort+0x220>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d03b      	beq.n	8003c7e <HAL_DMA_Abort+0xd6>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a70      	ldr	r2, [pc, #448]	; (8003dcc <HAL_DMA_Abort+0x224>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d036      	beq.n	8003c7e <HAL_DMA_Abort+0xd6>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a6e      	ldr	r2, [pc, #440]	; (8003dd0 <HAL_DMA_Abort+0x228>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d031      	beq.n	8003c7e <HAL_DMA_Abort+0xd6>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a6d      	ldr	r2, [pc, #436]	; (8003dd4 <HAL_DMA_Abort+0x22c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d02c      	beq.n	8003c7e <HAL_DMA_Abort+0xd6>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a6b      	ldr	r2, [pc, #428]	; (8003dd8 <HAL_DMA_Abort+0x230>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d027      	beq.n	8003c7e <HAL_DMA_Abort+0xd6>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a6a      	ldr	r2, [pc, #424]	; (8003ddc <HAL_DMA_Abort+0x234>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d022      	beq.n	8003c7e <HAL_DMA_Abort+0xd6>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a68      	ldr	r2, [pc, #416]	; (8003de0 <HAL_DMA_Abort+0x238>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d01d      	beq.n	8003c7e <HAL_DMA_Abort+0xd6>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a67      	ldr	r2, [pc, #412]	; (8003de4 <HAL_DMA_Abort+0x23c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d018      	beq.n	8003c7e <HAL_DMA_Abort+0xd6>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a65      	ldr	r2, [pc, #404]	; (8003de8 <HAL_DMA_Abort+0x240>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <HAL_DMA_Abort+0xd6>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a64      	ldr	r2, [pc, #400]	; (8003dec <HAL_DMA_Abort+0x244>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00e      	beq.n	8003c7e <HAL_DMA_Abort+0xd6>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a62      	ldr	r2, [pc, #392]	; (8003df0 <HAL_DMA_Abort+0x248>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d009      	beq.n	8003c7e <HAL_DMA_Abort+0xd6>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a61      	ldr	r2, [pc, #388]	; (8003df4 <HAL_DMA_Abort+0x24c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d004      	beq.n	8003c7e <HAL_DMA_Abort+0xd6>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a5f      	ldr	r2, [pc, #380]	; (8003df8 <HAL_DMA_Abort+0x250>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d101      	bne.n	8003c82 <HAL_DMA_Abort+0xda>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <HAL_DMA_Abort+0xdc>
 8003c82:	2300      	movs	r3, #0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d013      	beq.n	8003cb0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 021e 	bic.w	r2, r2, #30
 8003c96:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695a      	ldr	r2, [r3, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ca6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	e00a      	b.n	8003cc6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 020e 	bic.w	r2, r2, #14
 8003cbe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a3c      	ldr	r2, [pc, #240]	; (8003dbc <HAL_DMA_Abort+0x214>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d072      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a3a      	ldr	r2, [pc, #232]	; (8003dc0 <HAL_DMA_Abort+0x218>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d06d      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a39      	ldr	r2, [pc, #228]	; (8003dc4 <HAL_DMA_Abort+0x21c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d068      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a37      	ldr	r2, [pc, #220]	; (8003dc8 <HAL_DMA_Abort+0x220>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d063      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a36      	ldr	r2, [pc, #216]	; (8003dcc <HAL_DMA_Abort+0x224>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d05e      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a34      	ldr	r2, [pc, #208]	; (8003dd0 <HAL_DMA_Abort+0x228>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d059      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a33      	ldr	r2, [pc, #204]	; (8003dd4 <HAL_DMA_Abort+0x22c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d054      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a31      	ldr	r2, [pc, #196]	; (8003dd8 <HAL_DMA_Abort+0x230>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d04f      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a30      	ldr	r2, [pc, #192]	; (8003ddc <HAL_DMA_Abort+0x234>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d04a      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a2e      	ldr	r2, [pc, #184]	; (8003de0 <HAL_DMA_Abort+0x238>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d045      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a2d      	ldr	r2, [pc, #180]	; (8003de4 <HAL_DMA_Abort+0x23c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d040      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a2b      	ldr	r2, [pc, #172]	; (8003de8 <HAL_DMA_Abort+0x240>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d03b      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a2a      	ldr	r2, [pc, #168]	; (8003dec <HAL_DMA_Abort+0x244>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d036      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a28      	ldr	r2, [pc, #160]	; (8003df0 <HAL_DMA_Abort+0x248>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d031      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a27      	ldr	r2, [pc, #156]	; (8003df4 <HAL_DMA_Abort+0x24c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d02c      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a25      	ldr	r2, [pc, #148]	; (8003df8 <HAL_DMA_Abort+0x250>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d027      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a24      	ldr	r2, [pc, #144]	; (8003dfc <HAL_DMA_Abort+0x254>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d022      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a22      	ldr	r2, [pc, #136]	; (8003e00 <HAL_DMA_Abort+0x258>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d01d      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a21      	ldr	r2, [pc, #132]	; (8003e04 <HAL_DMA_Abort+0x25c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d018      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a1f      	ldr	r2, [pc, #124]	; (8003e08 <HAL_DMA_Abort+0x260>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d013      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1e      	ldr	r2, [pc, #120]	; (8003e0c <HAL_DMA_Abort+0x264>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00e      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1c      	ldr	r2, [pc, #112]	; (8003e10 <HAL_DMA_Abort+0x268>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d009      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1b      	ldr	r2, [pc, #108]	; (8003e14 <HAL_DMA_Abort+0x26c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d004      	beq.n	8003db6 <HAL_DMA_Abort+0x20e>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a19      	ldr	r2, [pc, #100]	; (8003e18 <HAL_DMA_Abort+0x270>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d132      	bne.n	8003e1c <HAL_DMA_Abort+0x274>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e031      	b.n	8003e1e <HAL_DMA_Abort+0x276>
 8003dba:	bf00      	nop
 8003dbc:	40020010 	.word	0x40020010
 8003dc0:	40020028 	.word	0x40020028
 8003dc4:	40020040 	.word	0x40020040
 8003dc8:	40020058 	.word	0x40020058
 8003dcc:	40020070 	.word	0x40020070
 8003dd0:	40020088 	.word	0x40020088
 8003dd4:	400200a0 	.word	0x400200a0
 8003dd8:	400200b8 	.word	0x400200b8
 8003ddc:	40020410 	.word	0x40020410
 8003de0:	40020428 	.word	0x40020428
 8003de4:	40020440 	.word	0x40020440
 8003de8:	40020458 	.word	0x40020458
 8003dec:	40020470 	.word	0x40020470
 8003df0:	40020488 	.word	0x40020488
 8003df4:	400204a0 	.word	0x400204a0
 8003df8:	400204b8 	.word	0x400204b8
 8003dfc:	58025408 	.word	0x58025408
 8003e00:	5802541c 	.word	0x5802541c
 8003e04:	58025430 	.word	0x58025430
 8003e08:	58025444 	.word	0x58025444
 8003e0c:	58025458 	.word	0x58025458
 8003e10:	5802546c 	.word	0x5802546c
 8003e14:	58025480 	.word	0x58025480
 8003e18:	58025494 	.word	0x58025494
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e30:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a6d      	ldr	r2, [pc, #436]	; (8003fec <HAL_DMA_Abort+0x444>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d04a      	beq.n	8003ed2 <HAL_DMA_Abort+0x32a>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a6b      	ldr	r2, [pc, #428]	; (8003ff0 <HAL_DMA_Abort+0x448>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d045      	beq.n	8003ed2 <HAL_DMA_Abort+0x32a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a6a      	ldr	r2, [pc, #424]	; (8003ff4 <HAL_DMA_Abort+0x44c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d040      	beq.n	8003ed2 <HAL_DMA_Abort+0x32a>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a68      	ldr	r2, [pc, #416]	; (8003ff8 <HAL_DMA_Abort+0x450>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d03b      	beq.n	8003ed2 <HAL_DMA_Abort+0x32a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a67      	ldr	r2, [pc, #412]	; (8003ffc <HAL_DMA_Abort+0x454>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d036      	beq.n	8003ed2 <HAL_DMA_Abort+0x32a>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a65      	ldr	r2, [pc, #404]	; (8004000 <HAL_DMA_Abort+0x458>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d031      	beq.n	8003ed2 <HAL_DMA_Abort+0x32a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a64      	ldr	r2, [pc, #400]	; (8004004 <HAL_DMA_Abort+0x45c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d02c      	beq.n	8003ed2 <HAL_DMA_Abort+0x32a>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a62      	ldr	r2, [pc, #392]	; (8004008 <HAL_DMA_Abort+0x460>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d027      	beq.n	8003ed2 <HAL_DMA_Abort+0x32a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a61      	ldr	r2, [pc, #388]	; (800400c <HAL_DMA_Abort+0x464>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d022      	beq.n	8003ed2 <HAL_DMA_Abort+0x32a>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a5f      	ldr	r2, [pc, #380]	; (8004010 <HAL_DMA_Abort+0x468>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01d      	beq.n	8003ed2 <HAL_DMA_Abort+0x32a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a5e      	ldr	r2, [pc, #376]	; (8004014 <HAL_DMA_Abort+0x46c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d018      	beq.n	8003ed2 <HAL_DMA_Abort+0x32a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a5c      	ldr	r2, [pc, #368]	; (8004018 <HAL_DMA_Abort+0x470>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <HAL_DMA_Abort+0x32a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a5b      	ldr	r2, [pc, #364]	; (800401c <HAL_DMA_Abort+0x474>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00e      	beq.n	8003ed2 <HAL_DMA_Abort+0x32a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a59      	ldr	r2, [pc, #356]	; (8004020 <HAL_DMA_Abort+0x478>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d009      	beq.n	8003ed2 <HAL_DMA_Abort+0x32a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a58      	ldr	r2, [pc, #352]	; (8004024 <HAL_DMA_Abort+0x47c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_DMA_Abort+0x32a>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a56      	ldr	r2, [pc, #344]	; (8004028 <HAL_DMA_Abort+0x480>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d108      	bne.n	8003ee4 <HAL_DMA_Abort+0x33c>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0201 	bic.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	e007      	b.n	8003ef4 <HAL_DMA_Abort+0x34c>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003ef4:	e013      	b.n	8003f1e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ef6:	f7fe fb49 	bl	800258c <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b05      	cmp	r3, #5
 8003f02:	d90c      	bls.n	8003f1e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e12d      	b.n	800417a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e5      	bne.n	8003ef6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a2f      	ldr	r2, [pc, #188]	; (8003fec <HAL_DMA_Abort+0x444>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d04a      	beq.n	8003fca <HAL_DMA_Abort+0x422>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a2d      	ldr	r2, [pc, #180]	; (8003ff0 <HAL_DMA_Abort+0x448>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d045      	beq.n	8003fca <HAL_DMA_Abort+0x422>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2c      	ldr	r2, [pc, #176]	; (8003ff4 <HAL_DMA_Abort+0x44c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d040      	beq.n	8003fca <HAL_DMA_Abort+0x422>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2a      	ldr	r2, [pc, #168]	; (8003ff8 <HAL_DMA_Abort+0x450>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d03b      	beq.n	8003fca <HAL_DMA_Abort+0x422>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a29      	ldr	r2, [pc, #164]	; (8003ffc <HAL_DMA_Abort+0x454>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d036      	beq.n	8003fca <HAL_DMA_Abort+0x422>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a27      	ldr	r2, [pc, #156]	; (8004000 <HAL_DMA_Abort+0x458>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d031      	beq.n	8003fca <HAL_DMA_Abort+0x422>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a26      	ldr	r2, [pc, #152]	; (8004004 <HAL_DMA_Abort+0x45c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d02c      	beq.n	8003fca <HAL_DMA_Abort+0x422>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a24      	ldr	r2, [pc, #144]	; (8004008 <HAL_DMA_Abort+0x460>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d027      	beq.n	8003fca <HAL_DMA_Abort+0x422>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a23      	ldr	r2, [pc, #140]	; (800400c <HAL_DMA_Abort+0x464>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d022      	beq.n	8003fca <HAL_DMA_Abort+0x422>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a21      	ldr	r2, [pc, #132]	; (8004010 <HAL_DMA_Abort+0x468>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d01d      	beq.n	8003fca <HAL_DMA_Abort+0x422>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a20      	ldr	r2, [pc, #128]	; (8004014 <HAL_DMA_Abort+0x46c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d018      	beq.n	8003fca <HAL_DMA_Abort+0x422>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1e      	ldr	r2, [pc, #120]	; (8004018 <HAL_DMA_Abort+0x470>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <HAL_DMA_Abort+0x422>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1d      	ldr	r2, [pc, #116]	; (800401c <HAL_DMA_Abort+0x474>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00e      	beq.n	8003fca <HAL_DMA_Abort+0x422>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1b      	ldr	r2, [pc, #108]	; (8004020 <HAL_DMA_Abort+0x478>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d009      	beq.n	8003fca <HAL_DMA_Abort+0x422>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1a      	ldr	r2, [pc, #104]	; (8004024 <HAL_DMA_Abort+0x47c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d004      	beq.n	8003fca <HAL_DMA_Abort+0x422>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a18      	ldr	r2, [pc, #96]	; (8004028 <HAL_DMA_Abort+0x480>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d101      	bne.n	8003fce <HAL_DMA_Abort+0x426>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <HAL_DMA_Abort+0x428>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d02b      	beq.n	800402c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	223f      	movs	r2, #63	; 0x3f
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	609a      	str	r2, [r3, #8]
 8003fea:	e02a      	b.n	8004042 <HAL_DMA_Abort+0x49a>
 8003fec:	40020010 	.word	0x40020010
 8003ff0:	40020028 	.word	0x40020028
 8003ff4:	40020040 	.word	0x40020040
 8003ff8:	40020058 	.word	0x40020058
 8003ffc:	40020070 	.word	0x40020070
 8004000:	40020088 	.word	0x40020088
 8004004:	400200a0 	.word	0x400200a0
 8004008:	400200b8 	.word	0x400200b8
 800400c:	40020410 	.word	0x40020410
 8004010:	40020428 	.word	0x40020428
 8004014:	40020440 	.word	0x40020440
 8004018:	40020458 	.word	0x40020458
 800401c:	40020470 	.word	0x40020470
 8004020:	40020488 	.word	0x40020488
 8004024:	400204a0 	.word	0x400204a0
 8004028:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004030:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	2201      	movs	r2, #1
 800403c:	409a      	lsls	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a4f      	ldr	r2, [pc, #316]	; (8004184 <HAL_DMA_Abort+0x5dc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d072      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a4d      	ldr	r2, [pc, #308]	; (8004188 <HAL_DMA_Abort+0x5e0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d06d      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a4c      	ldr	r2, [pc, #304]	; (800418c <HAL_DMA_Abort+0x5e4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d068      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a4a      	ldr	r2, [pc, #296]	; (8004190 <HAL_DMA_Abort+0x5e8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d063      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a49      	ldr	r2, [pc, #292]	; (8004194 <HAL_DMA_Abort+0x5ec>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d05e      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a47      	ldr	r2, [pc, #284]	; (8004198 <HAL_DMA_Abort+0x5f0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d059      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a46      	ldr	r2, [pc, #280]	; (800419c <HAL_DMA_Abort+0x5f4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d054      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a44      	ldr	r2, [pc, #272]	; (80041a0 <HAL_DMA_Abort+0x5f8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d04f      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a43      	ldr	r2, [pc, #268]	; (80041a4 <HAL_DMA_Abort+0x5fc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d04a      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a41      	ldr	r2, [pc, #260]	; (80041a8 <HAL_DMA_Abort+0x600>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d045      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a40      	ldr	r2, [pc, #256]	; (80041ac <HAL_DMA_Abort+0x604>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d040      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a3e      	ldr	r2, [pc, #248]	; (80041b0 <HAL_DMA_Abort+0x608>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d03b      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a3d      	ldr	r2, [pc, #244]	; (80041b4 <HAL_DMA_Abort+0x60c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d036      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a3b      	ldr	r2, [pc, #236]	; (80041b8 <HAL_DMA_Abort+0x610>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d031      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a3a      	ldr	r2, [pc, #232]	; (80041bc <HAL_DMA_Abort+0x614>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d02c      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a38      	ldr	r2, [pc, #224]	; (80041c0 <HAL_DMA_Abort+0x618>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d027      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a37      	ldr	r2, [pc, #220]	; (80041c4 <HAL_DMA_Abort+0x61c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d022      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a35      	ldr	r2, [pc, #212]	; (80041c8 <HAL_DMA_Abort+0x620>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d01d      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a34      	ldr	r2, [pc, #208]	; (80041cc <HAL_DMA_Abort+0x624>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d018      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a32      	ldr	r2, [pc, #200]	; (80041d0 <HAL_DMA_Abort+0x628>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a31      	ldr	r2, [pc, #196]	; (80041d4 <HAL_DMA_Abort+0x62c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00e      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a2f      	ldr	r2, [pc, #188]	; (80041d8 <HAL_DMA_Abort+0x630>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d009      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a2e      	ldr	r2, [pc, #184]	; (80041dc <HAL_DMA_Abort+0x634>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d004      	beq.n	8004132 <HAL_DMA_Abort+0x58a>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a2c      	ldr	r2, [pc, #176]	; (80041e0 <HAL_DMA_Abort+0x638>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d101      	bne.n	8004136 <HAL_DMA_Abort+0x58e>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <HAL_DMA_Abort+0x590>
 8004136:	2300      	movs	r3, #0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d015      	beq.n	8004168 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004144:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800415c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004166:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40020010 	.word	0x40020010
 8004188:	40020028 	.word	0x40020028
 800418c:	40020040 	.word	0x40020040
 8004190:	40020058 	.word	0x40020058
 8004194:	40020070 	.word	0x40020070
 8004198:	40020088 	.word	0x40020088
 800419c:	400200a0 	.word	0x400200a0
 80041a0:	400200b8 	.word	0x400200b8
 80041a4:	40020410 	.word	0x40020410
 80041a8:	40020428 	.word	0x40020428
 80041ac:	40020440 	.word	0x40020440
 80041b0:	40020458 	.word	0x40020458
 80041b4:	40020470 	.word	0x40020470
 80041b8:	40020488 	.word	0x40020488
 80041bc:	400204a0 	.word	0x400204a0
 80041c0:	400204b8 	.word	0x400204b8
 80041c4:	58025408 	.word	0x58025408
 80041c8:	5802541c 	.word	0x5802541c
 80041cc:	58025430 	.word	0x58025430
 80041d0:	58025444 	.word	0x58025444
 80041d4:	58025458 	.word	0x58025458
 80041d8:	5802546c 	.word	0x5802546c
 80041dc:	58025480 	.word	0x58025480
 80041e0:	58025494 	.word	0x58025494

080041e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e237      	b.n	8004666 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d004      	beq.n	800420c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2280      	movs	r2, #128	; 0x80
 8004206:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e22c      	b.n	8004666 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a5c      	ldr	r2, [pc, #368]	; (8004384 <HAL_DMA_Abort_IT+0x1a0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d04a      	beq.n	80042ac <HAL_DMA_Abort_IT+0xc8>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a5b      	ldr	r2, [pc, #364]	; (8004388 <HAL_DMA_Abort_IT+0x1a4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d045      	beq.n	80042ac <HAL_DMA_Abort_IT+0xc8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a59      	ldr	r2, [pc, #356]	; (800438c <HAL_DMA_Abort_IT+0x1a8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d040      	beq.n	80042ac <HAL_DMA_Abort_IT+0xc8>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a58      	ldr	r2, [pc, #352]	; (8004390 <HAL_DMA_Abort_IT+0x1ac>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d03b      	beq.n	80042ac <HAL_DMA_Abort_IT+0xc8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a56      	ldr	r2, [pc, #344]	; (8004394 <HAL_DMA_Abort_IT+0x1b0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d036      	beq.n	80042ac <HAL_DMA_Abort_IT+0xc8>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a55      	ldr	r2, [pc, #340]	; (8004398 <HAL_DMA_Abort_IT+0x1b4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d031      	beq.n	80042ac <HAL_DMA_Abort_IT+0xc8>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a53      	ldr	r2, [pc, #332]	; (800439c <HAL_DMA_Abort_IT+0x1b8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d02c      	beq.n	80042ac <HAL_DMA_Abort_IT+0xc8>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a52      	ldr	r2, [pc, #328]	; (80043a0 <HAL_DMA_Abort_IT+0x1bc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d027      	beq.n	80042ac <HAL_DMA_Abort_IT+0xc8>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a50      	ldr	r2, [pc, #320]	; (80043a4 <HAL_DMA_Abort_IT+0x1c0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d022      	beq.n	80042ac <HAL_DMA_Abort_IT+0xc8>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a4f      	ldr	r2, [pc, #316]	; (80043a8 <HAL_DMA_Abort_IT+0x1c4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d01d      	beq.n	80042ac <HAL_DMA_Abort_IT+0xc8>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a4d      	ldr	r2, [pc, #308]	; (80043ac <HAL_DMA_Abort_IT+0x1c8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d018      	beq.n	80042ac <HAL_DMA_Abort_IT+0xc8>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a4c      	ldr	r2, [pc, #304]	; (80043b0 <HAL_DMA_Abort_IT+0x1cc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d013      	beq.n	80042ac <HAL_DMA_Abort_IT+0xc8>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a4a      	ldr	r2, [pc, #296]	; (80043b4 <HAL_DMA_Abort_IT+0x1d0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00e      	beq.n	80042ac <HAL_DMA_Abort_IT+0xc8>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a49      	ldr	r2, [pc, #292]	; (80043b8 <HAL_DMA_Abort_IT+0x1d4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d009      	beq.n	80042ac <HAL_DMA_Abort_IT+0xc8>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a47      	ldr	r2, [pc, #284]	; (80043bc <HAL_DMA_Abort_IT+0x1d8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <HAL_DMA_Abort_IT+0xc8>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a46      	ldr	r2, [pc, #280]	; (80043c0 <HAL_DMA_Abort_IT+0x1dc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d101      	bne.n	80042b0 <HAL_DMA_Abort_IT+0xcc>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <HAL_DMA_Abort_IT+0xce>
 80042b0:	2300      	movs	r3, #0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8086 	beq.w	80043c4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2204      	movs	r2, #4
 80042bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a2f      	ldr	r2, [pc, #188]	; (8004384 <HAL_DMA_Abort_IT+0x1a0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d04a      	beq.n	8004360 <HAL_DMA_Abort_IT+0x17c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a2e      	ldr	r2, [pc, #184]	; (8004388 <HAL_DMA_Abort_IT+0x1a4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d045      	beq.n	8004360 <HAL_DMA_Abort_IT+0x17c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a2c      	ldr	r2, [pc, #176]	; (800438c <HAL_DMA_Abort_IT+0x1a8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d040      	beq.n	8004360 <HAL_DMA_Abort_IT+0x17c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a2b      	ldr	r2, [pc, #172]	; (8004390 <HAL_DMA_Abort_IT+0x1ac>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d03b      	beq.n	8004360 <HAL_DMA_Abort_IT+0x17c>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a29      	ldr	r2, [pc, #164]	; (8004394 <HAL_DMA_Abort_IT+0x1b0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d036      	beq.n	8004360 <HAL_DMA_Abort_IT+0x17c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a28      	ldr	r2, [pc, #160]	; (8004398 <HAL_DMA_Abort_IT+0x1b4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d031      	beq.n	8004360 <HAL_DMA_Abort_IT+0x17c>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a26      	ldr	r2, [pc, #152]	; (800439c <HAL_DMA_Abort_IT+0x1b8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d02c      	beq.n	8004360 <HAL_DMA_Abort_IT+0x17c>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a25      	ldr	r2, [pc, #148]	; (80043a0 <HAL_DMA_Abort_IT+0x1bc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d027      	beq.n	8004360 <HAL_DMA_Abort_IT+0x17c>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a23      	ldr	r2, [pc, #140]	; (80043a4 <HAL_DMA_Abort_IT+0x1c0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d022      	beq.n	8004360 <HAL_DMA_Abort_IT+0x17c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a22      	ldr	r2, [pc, #136]	; (80043a8 <HAL_DMA_Abort_IT+0x1c4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d01d      	beq.n	8004360 <HAL_DMA_Abort_IT+0x17c>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a20      	ldr	r2, [pc, #128]	; (80043ac <HAL_DMA_Abort_IT+0x1c8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d018      	beq.n	8004360 <HAL_DMA_Abort_IT+0x17c>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1f      	ldr	r2, [pc, #124]	; (80043b0 <HAL_DMA_Abort_IT+0x1cc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d013      	beq.n	8004360 <HAL_DMA_Abort_IT+0x17c>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1d      	ldr	r2, [pc, #116]	; (80043b4 <HAL_DMA_Abort_IT+0x1d0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00e      	beq.n	8004360 <HAL_DMA_Abort_IT+0x17c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1c      	ldr	r2, [pc, #112]	; (80043b8 <HAL_DMA_Abort_IT+0x1d4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d009      	beq.n	8004360 <HAL_DMA_Abort_IT+0x17c>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1a      	ldr	r2, [pc, #104]	; (80043bc <HAL_DMA_Abort_IT+0x1d8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d004      	beq.n	8004360 <HAL_DMA_Abort_IT+0x17c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a19      	ldr	r2, [pc, #100]	; (80043c0 <HAL_DMA_Abort_IT+0x1dc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d108      	bne.n	8004372 <HAL_DMA_Abort_IT+0x18e>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	e178      	b.n	8004664 <HAL_DMA_Abort_IT+0x480>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0201 	bic.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	e16f      	b.n	8004664 <HAL_DMA_Abort_IT+0x480>
 8004384:	40020010 	.word	0x40020010
 8004388:	40020028 	.word	0x40020028
 800438c:	40020040 	.word	0x40020040
 8004390:	40020058 	.word	0x40020058
 8004394:	40020070 	.word	0x40020070
 8004398:	40020088 	.word	0x40020088
 800439c:	400200a0 	.word	0x400200a0
 80043a0:	400200b8 	.word	0x400200b8
 80043a4:	40020410 	.word	0x40020410
 80043a8:	40020428 	.word	0x40020428
 80043ac:	40020440 	.word	0x40020440
 80043b0:	40020458 	.word	0x40020458
 80043b4:	40020470 	.word	0x40020470
 80043b8:	40020488 	.word	0x40020488
 80043bc:	400204a0 	.word	0x400204a0
 80043c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 020e 	bic.w	r2, r2, #14
 80043d2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a6c      	ldr	r2, [pc, #432]	; (800458c <HAL_DMA_Abort_IT+0x3a8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d04a      	beq.n	8004474 <HAL_DMA_Abort_IT+0x290>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a6b      	ldr	r2, [pc, #428]	; (8004590 <HAL_DMA_Abort_IT+0x3ac>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d045      	beq.n	8004474 <HAL_DMA_Abort_IT+0x290>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a69      	ldr	r2, [pc, #420]	; (8004594 <HAL_DMA_Abort_IT+0x3b0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d040      	beq.n	8004474 <HAL_DMA_Abort_IT+0x290>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a68      	ldr	r2, [pc, #416]	; (8004598 <HAL_DMA_Abort_IT+0x3b4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d03b      	beq.n	8004474 <HAL_DMA_Abort_IT+0x290>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a66      	ldr	r2, [pc, #408]	; (800459c <HAL_DMA_Abort_IT+0x3b8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d036      	beq.n	8004474 <HAL_DMA_Abort_IT+0x290>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a65      	ldr	r2, [pc, #404]	; (80045a0 <HAL_DMA_Abort_IT+0x3bc>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d031      	beq.n	8004474 <HAL_DMA_Abort_IT+0x290>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a63      	ldr	r2, [pc, #396]	; (80045a4 <HAL_DMA_Abort_IT+0x3c0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d02c      	beq.n	8004474 <HAL_DMA_Abort_IT+0x290>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a62      	ldr	r2, [pc, #392]	; (80045a8 <HAL_DMA_Abort_IT+0x3c4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d027      	beq.n	8004474 <HAL_DMA_Abort_IT+0x290>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a60      	ldr	r2, [pc, #384]	; (80045ac <HAL_DMA_Abort_IT+0x3c8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d022      	beq.n	8004474 <HAL_DMA_Abort_IT+0x290>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a5f      	ldr	r2, [pc, #380]	; (80045b0 <HAL_DMA_Abort_IT+0x3cc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d01d      	beq.n	8004474 <HAL_DMA_Abort_IT+0x290>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a5d      	ldr	r2, [pc, #372]	; (80045b4 <HAL_DMA_Abort_IT+0x3d0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d018      	beq.n	8004474 <HAL_DMA_Abort_IT+0x290>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a5c      	ldr	r2, [pc, #368]	; (80045b8 <HAL_DMA_Abort_IT+0x3d4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d013      	beq.n	8004474 <HAL_DMA_Abort_IT+0x290>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a5a      	ldr	r2, [pc, #360]	; (80045bc <HAL_DMA_Abort_IT+0x3d8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00e      	beq.n	8004474 <HAL_DMA_Abort_IT+0x290>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a59      	ldr	r2, [pc, #356]	; (80045c0 <HAL_DMA_Abort_IT+0x3dc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d009      	beq.n	8004474 <HAL_DMA_Abort_IT+0x290>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a57      	ldr	r2, [pc, #348]	; (80045c4 <HAL_DMA_Abort_IT+0x3e0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_DMA_Abort_IT+0x290>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a56      	ldr	r2, [pc, #344]	; (80045c8 <HAL_DMA_Abort_IT+0x3e4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d108      	bne.n	8004486 <HAL_DMA_Abort_IT+0x2a2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0201 	bic.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	e007      	b.n	8004496 <HAL_DMA_Abort_IT+0x2b2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0201 	bic.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a3c      	ldr	r2, [pc, #240]	; (800458c <HAL_DMA_Abort_IT+0x3a8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d072      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a3a      	ldr	r2, [pc, #232]	; (8004590 <HAL_DMA_Abort_IT+0x3ac>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d06d      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a39      	ldr	r2, [pc, #228]	; (8004594 <HAL_DMA_Abort_IT+0x3b0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d068      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a37      	ldr	r2, [pc, #220]	; (8004598 <HAL_DMA_Abort_IT+0x3b4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d063      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a36      	ldr	r2, [pc, #216]	; (800459c <HAL_DMA_Abort_IT+0x3b8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d05e      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a34      	ldr	r2, [pc, #208]	; (80045a0 <HAL_DMA_Abort_IT+0x3bc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d059      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a33      	ldr	r2, [pc, #204]	; (80045a4 <HAL_DMA_Abort_IT+0x3c0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d054      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a31      	ldr	r2, [pc, #196]	; (80045a8 <HAL_DMA_Abort_IT+0x3c4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d04f      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a30      	ldr	r2, [pc, #192]	; (80045ac <HAL_DMA_Abort_IT+0x3c8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d04a      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a2e      	ldr	r2, [pc, #184]	; (80045b0 <HAL_DMA_Abort_IT+0x3cc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d045      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a2d      	ldr	r2, [pc, #180]	; (80045b4 <HAL_DMA_Abort_IT+0x3d0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d040      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a2b      	ldr	r2, [pc, #172]	; (80045b8 <HAL_DMA_Abort_IT+0x3d4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d03b      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a2a      	ldr	r2, [pc, #168]	; (80045bc <HAL_DMA_Abort_IT+0x3d8>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d036      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a28      	ldr	r2, [pc, #160]	; (80045c0 <HAL_DMA_Abort_IT+0x3dc>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d031      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a27      	ldr	r2, [pc, #156]	; (80045c4 <HAL_DMA_Abort_IT+0x3e0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d02c      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a25      	ldr	r2, [pc, #148]	; (80045c8 <HAL_DMA_Abort_IT+0x3e4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d027      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a24      	ldr	r2, [pc, #144]	; (80045cc <HAL_DMA_Abort_IT+0x3e8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d022      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a22      	ldr	r2, [pc, #136]	; (80045d0 <HAL_DMA_Abort_IT+0x3ec>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d01d      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a21      	ldr	r2, [pc, #132]	; (80045d4 <HAL_DMA_Abort_IT+0x3f0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d018      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1f      	ldr	r2, [pc, #124]	; (80045d8 <HAL_DMA_Abort_IT+0x3f4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d013      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1e      	ldr	r2, [pc, #120]	; (80045dc <HAL_DMA_Abort_IT+0x3f8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00e      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1c      	ldr	r2, [pc, #112]	; (80045e0 <HAL_DMA_Abort_IT+0x3fc>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d009      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1b      	ldr	r2, [pc, #108]	; (80045e4 <HAL_DMA_Abort_IT+0x400>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d004      	beq.n	8004586 <HAL_DMA_Abort_IT+0x3a2>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a19      	ldr	r2, [pc, #100]	; (80045e8 <HAL_DMA_Abort_IT+0x404>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d132      	bne.n	80045ec <HAL_DMA_Abort_IT+0x408>
 8004586:	2301      	movs	r3, #1
 8004588:	e031      	b.n	80045ee <HAL_DMA_Abort_IT+0x40a>
 800458a:	bf00      	nop
 800458c:	40020010 	.word	0x40020010
 8004590:	40020028 	.word	0x40020028
 8004594:	40020040 	.word	0x40020040
 8004598:	40020058 	.word	0x40020058
 800459c:	40020070 	.word	0x40020070
 80045a0:	40020088 	.word	0x40020088
 80045a4:	400200a0 	.word	0x400200a0
 80045a8:	400200b8 	.word	0x400200b8
 80045ac:	40020410 	.word	0x40020410
 80045b0:	40020428 	.word	0x40020428
 80045b4:	40020440 	.word	0x40020440
 80045b8:	40020458 	.word	0x40020458
 80045bc:	40020470 	.word	0x40020470
 80045c0:	40020488 	.word	0x40020488
 80045c4:	400204a0 	.word	0x400204a0
 80045c8:	400204b8 	.word	0x400204b8
 80045cc:	58025408 	.word	0x58025408
 80045d0:	5802541c 	.word	0x5802541c
 80045d4:	58025430 	.word	0x58025430
 80045d8:	58025444 	.word	0x58025444
 80045dc:	58025458 	.word	0x58025458
 80045e0:	5802546c 	.word	0x5802546c
 80045e4:	58025480 	.word	0x58025480
 80045e8:	58025494 	.word	0x58025494
 80045ec:	2300      	movs	r3, #0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d028      	beq.n	8004644 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004600:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004606:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2201      	movs	r2, #1
 8004612:	409a      	lsls	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004620:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00c      	beq.n	8004644 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004634:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004638:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004642:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop

08004670 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004670:	b480      	push	{r7}
 8004672:	b089      	sub	sp, #36	; 0x24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800467a:	2300      	movs	r3, #0
 800467c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800467e:	4b89      	ldr	r3, [pc, #548]	; (80048a4 <HAL_GPIO_Init+0x234>)
 8004680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004682:	e194      	b.n	80049ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	2101      	movs	r1, #1
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	fa01 f303 	lsl.w	r3, r1, r3
 8004690:	4013      	ands	r3, r2
 8004692:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 8186 	beq.w	80049a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 0303 	and.w	r3, r3, #3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d005      	beq.n	80046b4 <HAL_GPIO_Init+0x44>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 0303 	and.w	r3, r3, #3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d130      	bne.n	8004716 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	2203      	movs	r2, #3
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4013      	ands	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046ea:	2201      	movs	r2, #1
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4013      	ands	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	091b      	lsrs	r3, r3, #4
 8004700:	f003 0201 	and.w	r2, r3, #1
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4313      	orrs	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	2b03      	cmp	r3, #3
 8004720:	d017      	beq.n	8004752 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	2203      	movs	r2, #3
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43db      	mvns	r3, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4013      	ands	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d123      	bne.n	80047a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	08da      	lsrs	r2, r3, #3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3208      	adds	r2, #8
 8004766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800476a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	220f      	movs	r2, #15
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43db      	mvns	r3, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4013      	ands	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4313      	orrs	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	08da      	lsrs	r2, r3, #3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3208      	adds	r2, #8
 80047a0:	69b9      	ldr	r1, [r7, #24]
 80047a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	2203      	movs	r2, #3
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	43db      	mvns	r3, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4013      	ands	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f003 0203 	and.w	r2, r3, #3
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 80e0 	beq.w	80049a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047e8:	4b2f      	ldr	r3, [pc, #188]	; (80048a8 <HAL_GPIO_Init+0x238>)
 80047ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80047ee:	4a2e      	ldr	r2, [pc, #184]	; (80048a8 <HAL_GPIO_Init+0x238>)
 80047f0:	f043 0302 	orr.w	r3, r3, #2
 80047f4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80047f8:	4b2b      	ldr	r3, [pc, #172]	; (80048a8 <HAL_GPIO_Init+0x238>)
 80047fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004806:	4a29      	ldr	r2, [pc, #164]	; (80048ac <HAL_GPIO_Init+0x23c>)
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	089b      	lsrs	r3, r3, #2
 800480c:	3302      	adds	r3, #2
 800480e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	220f      	movs	r2, #15
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a20      	ldr	r2, [pc, #128]	; (80048b0 <HAL_GPIO_Init+0x240>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d052      	beq.n	80048d8 <HAL_GPIO_Init+0x268>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a1f      	ldr	r2, [pc, #124]	; (80048b4 <HAL_GPIO_Init+0x244>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d031      	beq.n	800489e <HAL_GPIO_Init+0x22e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a1e      	ldr	r2, [pc, #120]	; (80048b8 <HAL_GPIO_Init+0x248>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d02b      	beq.n	800489a <HAL_GPIO_Init+0x22a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a1d      	ldr	r2, [pc, #116]	; (80048bc <HAL_GPIO_Init+0x24c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d025      	beq.n	8004896 <HAL_GPIO_Init+0x226>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a1c      	ldr	r2, [pc, #112]	; (80048c0 <HAL_GPIO_Init+0x250>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d01f      	beq.n	8004892 <HAL_GPIO_Init+0x222>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a1b      	ldr	r2, [pc, #108]	; (80048c4 <HAL_GPIO_Init+0x254>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d019      	beq.n	800488e <HAL_GPIO_Init+0x21e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a1a      	ldr	r2, [pc, #104]	; (80048c8 <HAL_GPIO_Init+0x258>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <HAL_GPIO_Init+0x21a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a19      	ldr	r2, [pc, #100]	; (80048cc <HAL_GPIO_Init+0x25c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00d      	beq.n	8004886 <HAL_GPIO_Init+0x216>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a18      	ldr	r2, [pc, #96]	; (80048d0 <HAL_GPIO_Init+0x260>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d007      	beq.n	8004882 <HAL_GPIO_Init+0x212>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <HAL_GPIO_Init+0x264>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d101      	bne.n	800487e <HAL_GPIO_Init+0x20e>
 800487a:	2309      	movs	r3, #9
 800487c:	e02d      	b.n	80048da <HAL_GPIO_Init+0x26a>
 800487e:	230a      	movs	r3, #10
 8004880:	e02b      	b.n	80048da <HAL_GPIO_Init+0x26a>
 8004882:	2308      	movs	r3, #8
 8004884:	e029      	b.n	80048da <HAL_GPIO_Init+0x26a>
 8004886:	2307      	movs	r3, #7
 8004888:	e027      	b.n	80048da <HAL_GPIO_Init+0x26a>
 800488a:	2306      	movs	r3, #6
 800488c:	e025      	b.n	80048da <HAL_GPIO_Init+0x26a>
 800488e:	2305      	movs	r3, #5
 8004890:	e023      	b.n	80048da <HAL_GPIO_Init+0x26a>
 8004892:	2304      	movs	r3, #4
 8004894:	e021      	b.n	80048da <HAL_GPIO_Init+0x26a>
 8004896:	2303      	movs	r3, #3
 8004898:	e01f      	b.n	80048da <HAL_GPIO_Init+0x26a>
 800489a:	2302      	movs	r3, #2
 800489c:	e01d      	b.n	80048da <HAL_GPIO_Init+0x26a>
 800489e:	2301      	movs	r3, #1
 80048a0:	e01b      	b.n	80048da <HAL_GPIO_Init+0x26a>
 80048a2:	bf00      	nop
 80048a4:	58000080 	.word	0x58000080
 80048a8:	58024400 	.word	0x58024400
 80048ac:	58000400 	.word	0x58000400
 80048b0:	58020000 	.word	0x58020000
 80048b4:	58020400 	.word	0x58020400
 80048b8:	58020800 	.word	0x58020800
 80048bc:	58020c00 	.word	0x58020c00
 80048c0:	58021000 	.word	0x58021000
 80048c4:	58021400 	.word	0x58021400
 80048c8:	58021800 	.word	0x58021800
 80048cc:	58021c00 	.word	0x58021c00
 80048d0:	58022000 	.word	0x58022000
 80048d4:	58022400 	.word	0x58022400
 80048d8:	2300      	movs	r3, #0
 80048da:	69fa      	ldr	r2, [r7, #28]
 80048dc:	f002 0203 	and.w	r2, r2, #3
 80048e0:	0092      	lsls	r2, r2, #2
 80048e2:	4093      	lsls	r3, r2
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048ea:	4938      	ldr	r1, [pc, #224]	; (80049cc <HAL_GPIO_Init+0x35c>)
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	089b      	lsrs	r3, r3, #2
 80048f0:	3302      	adds	r3, #2
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	43db      	mvns	r3, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4013      	ands	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800491e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	43db      	mvns	r3, r3
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	4013      	ands	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800494c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	43db      	mvns	r3, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	43db      	mvns	r3, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4013      	ands	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	3301      	adds	r3, #1
 80049ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f47f ae63 	bne.w	8004684 <HAL_GPIO_Init+0x14>
  }
}
 80049be:	bf00      	nop
 80049c0:	bf00      	nop
 80049c2:	3724      	adds	r7, #36	; 0x24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	58000400 	.word	0x58000400

080049d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	807b      	strh	r3, [r7, #2]
 80049dc:	4613      	mov	r3, r2
 80049de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049e0:	787b      	ldrb	r3, [r7, #1]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049e6:	887a      	ldrh	r2, [r7, #2]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80049ec:	e003      	b.n	80049f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80049ee:	887b      	ldrh	r3, [r7, #2]
 80049f0:	041a      	lsls	r2, r3, #16
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	619a      	str	r2, [r3, #24]
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e07f      	b.n	8004b16 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fd f998 	bl	8001d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2224      	movs	r2, #36	; 0x24
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0201 	bic.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d107      	bne.n	8004a7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a7a:	609a      	str	r2, [r3, #8]
 8004a7c:	e006      	b.n	8004a8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d104      	bne.n	8004a9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6859      	ldr	r1, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4b1d      	ldr	r3, [pc, #116]	; (8004b20 <HAL_I2C_Init+0x11c>)
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004abc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69d9      	ldr	r1, [r3, #28]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1a      	ldr	r2, [r3, #32]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	02008000 	.word	0x02008000

08004b24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	460b      	mov	r3, r1
 8004b32:	817b      	strh	r3, [r7, #10]
 8004b34:	4613      	mov	r3, r2
 8004b36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	f040 80da 	bne.w	8004cfa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_I2C_Master_Transmit+0x30>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e0d3      	b.n	8004cfc <HAL_I2C_Master_Transmit+0x1d8>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b5c:	f7fd fd16 	bl	800258c <HAL_GetTick>
 8004b60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	2319      	movs	r3, #25
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f9e6 	bl	8004f40 <I2C_WaitOnFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e0be      	b.n	8004cfc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2221      	movs	r2, #33	; 0x21
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2210      	movs	r2, #16
 8004b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	893a      	ldrh	r2, [r7, #8]
 8004b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2bff      	cmp	r3, #255	; 0xff
 8004bae:	d90e      	bls.n	8004bce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	22ff      	movs	r2, #255	; 0xff
 8004bb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	8979      	ldrh	r1, [r7, #10]
 8004bbe:	4b51      	ldr	r3, [pc, #324]	; (8004d04 <HAL_I2C_Master_Transmit+0x1e0>)
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fbf6 	bl	80053b8 <I2C_TransferConfig>
 8004bcc:	e06c      	b.n	8004ca8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	8979      	ldrh	r1, [r7, #10]
 8004be0:	4b48      	ldr	r3, [pc, #288]	; (8004d04 <HAL_I2C_Master_Transmit+0x1e0>)
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fbe5 	bl	80053b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004bee:	e05b      	b.n	8004ca8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	6a39      	ldr	r1, [r7, #32]
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 f9f2 	bl	8004fde <I2C_WaitOnTXISFlagUntilTimeout>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e07b      	b.n	8004cfc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	781a      	ldrb	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d034      	beq.n	8004ca8 <HAL_I2C_Master_Transmit+0x184>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d130      	bne.n	8004ca8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2180      	movs	r1, #128	; 0x80
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f975 	bl	8004f40 <I2C_WaitOnFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e04d      	b.n	8004cfc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2bff      	cmp	r3, #255	; 0xff
 8004c68:	d90e      	bls.n	8004c88 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	22ff      	movs	r2, #255	; 0xff
 8004c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	8979      	ldrh	r1, [r7, #10]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 fb99 	bl	80053b8 <I2C_TransferConfig>
 8004c86:	e00f      	b.n	8004ca8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	8979      	ldrh	r1, [r7, #10]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 fb88 	bl	80053b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d19e      	bne.n	8004bf0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	6a39      	ldr	r1, [r7, #32]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f9d8 	bl	800506c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e01a      	b.n	8004cfc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6859      	ldr	r1, [r3, #4]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <HAL_I2C_Master_Transmit+0x1e4>)
 8004cda:	400b      	ands	r3, r1
 8004cdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	e000      	b.n	8004cfc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004cfa:	2302      	movs	r3, #2
  }
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	80002000 	.word	0x80002000
 8004d08:	fe00e800 	.word	0xfe00e800

08004d0c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	461a      	mov	r2, r3
 8004d18:	460b      	mov	r3, r1
 8004d1a:	817b      	strh	r3, [r7, #10]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	f040 80db 	bne.w	8004ee4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_I2C_Master_Receive+0x30>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e0d4      	b.n	8004ee6 <HAL_I2C_Master_Receive+0x1da>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d44:	f7fd fc22 	bl	800258c <HAL_GetTick>
 8004d48:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	2319      	movs	r3, #25
 8004d50:	2201      	movs	r2, #1
 8004d52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 f8f2 	bl	8004f40 <I2C_WaitOnFlagUntilTimeout>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e0bf      	b.n	8004ee6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2222      	movs	r2, #34	; 0x22
 8004d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2210      	movs	r2, #16
 8004d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	893a      	ldrh	r2, [r7, #8]
 8004d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2bff      	cmp	r3, #255	; 0xff
 8004d96:	d90e      	bls.n	8004db6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	22ff      	movs	r2, #255	; 0xff
 8004d9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	8979      	ldrh	r1, [r7, #10]
 8004da6:	4b52      	ldr	r3, [pc, #328]	; (8004ef0 <HAL_I2C_Master_Receive+0x1e4>)
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 fb02 	bl	80053b8 <I2C_TransferConfig>
 8004db4:	e06d      	b.n	8004e92 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	8979      	ldrh	r1, [r7, #10]
 8004dc8:	4b49      	ldr	r3, [pc, #292]	; (8004ef0 <HAL_I2C_Master_Receive+0x1e4>)
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 faf1 	bl	80053b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004dd6:	e05c      	b.n	8004e92 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	6a39      	ldr	r1, [r7, #32]
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f989 	bl	80050f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e07c      	b.n	8004ee6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d034      	beq.n	8004e92 <HAL_I2C_Master_Receive+0x186>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d130      	bne.n	8004e92 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	2200      	movs	r2, #0
 8004e38:	2180      	movs	r1, #128	; 0x80
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f880 	bl	8004f40 <I2C_WaitOnFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e04d      	b.n	8004ee6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2bff      	cmp	r3, #255	; 0xff
 8004e52:	d90e      	bls.n	8004e72 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	22ff      	movs	r2, #255	; 0xff
 8004e58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	8979      	ldrh	r1, [r7, #10]
 8004e62:	2300      	movs	r3, #0
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 faa4 	bl	80053b8 <I2C_TransferConfig>
 8004e70:	e00f      	b.n	8004e92 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	8979      	ldrh	r1, [r7, #10]
 8004e84:	2300      	movs	r3, #0
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fa93 	bl	80053b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d19d      	bne.n	8004dd8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	6a39      	ldr	r1, [r7, #32]
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 f8e3 	bl	800506c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e01a      	b.n	8004ee6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6859      	ldr	r1, [r3, #4]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <HAL_I2C_Master_Receive+0x1e8>)
 8004ec4:	400b      	ands	r3, r1
 8004ec6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e000      	b.n	8004ee6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004ee4:	2302      	movs	r3, #2
  }
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	80002400 	.word	0x80002400
 8004ef4:	fe00e800 	.word	0xfe00e800

08004ef8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d103      	bne.n	8004f16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2200      	movs	r2, #0
 8004f14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d007      	beq.n	8004f34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0201 	orr.w	r2, r2, #1
 8004f32:	619a      	str	r2, [r3, #24]
  }
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f50:	e031      	b.n	8004fb6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f58:	d02d      	beq.n	8004fb6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f5a:	f7fd fb17 	bl	800258c <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d302      	bcc.n	8004f70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d122      	bne.n	8004fb6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	bf0c      	ite	eq
 8004f80:	2301      	moveq	r3, #1
 8004f82:	2300      	movne	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d113      	bne.n	8004fb6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f92:	f043 0220 	orr.w	r2, r3, #32
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e00f      	b.n	8004fd6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699a      	ldr	r2, [r3, #24]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	bf0c      	ite	eq
 8004fc6:	2301      	moveq	r3, #1
 8004fc8:	2300      	movne	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	461a      	mov	r2, r3
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d0be      	beq.n	8004f52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fea:	e033      	b.n	8005054 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	68b9      	ldr	r1, [r7, #8]
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f901 	bl	80051f8 <I2C_IsErrorOccurred>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e031      	b.n	8005064 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005006:	d025      	beq.n	8005054 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005008:	f7fd fac0 	bl	800258c <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	429a      	cmp	r2, r3
 8005016:	d302      	bcc.n	800501e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d11a      	bne.n	8005054 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b02      	cmp	r3, #2
 800502a:	d013      	beq.n	8005054 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005030:	f043 0220 	orr.w	r2, r3, #32
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e007      	b.n	8005064 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b02      	cmp	r3, #2
 8005060:	d1c4      	bne.n	8004fec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005078:	e02f      	b.n	80050da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f8ba 	bl	80051f8 <I2C_IsErrorOccurred>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e02d      	b.n	80050ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508e:	f7fd fa7d 	bl	800258c <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d11a      	bne.n	80050da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	d013      	beq.n	80050da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b6:	f043 0220 	orr.w	r2, r3, #32
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e007      	b.n	80050ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d1c8      	bne.n	800507a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005100:	e06b      	b.n	80051da <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 f876 	bl	80051f8 <I2C_IsErrorOccurred>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e069      	b.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b20      	cmp	r3, #32
 8005122:	d138      	bne.n	8005196 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b04      	cmp	r3, #4
 8005130:	d105      	bne.n	800513e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	e055      	b.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	2b10      	cmp	r3, #16
 800514a:	d107      	bne.n	800515c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2210      	movs	r2, #16
 8005152:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2204      	movs	r2, #4
 8005158:	645a      	str	r2, [r3, #68]	; 0x44
 800515a:	e002      	b.n	8005162 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2220      	movs	r2, #32
 8005168:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6859      	ldr	r1, [r3, #4]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	4b1f      	ldr	r3, [pc, #124]	; (80051f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005176:	400b      	ands	r3, r1
 8005178:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2220      	movs	r2, #32
 800517e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e029      	b.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005196:	f7fd f9f9 	bl	800258c <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d302      	bcc.n	80051ac <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d116      	bne.n	80051da <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d00f      	beq.n	80051da <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051be:	f043 0220 	orr.w	r2, r3, #32
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e007      	b.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d18c      	bne.n	8005102 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	fe00e800 	.word	0xfe00e800

080051f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08a      	sub	sp, #40	; 0x28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	2b00      	cmp	r3, #0
 8005222:	d068      	beq.n	80052f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2210      	movs	r2, #16
 800522a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800522c:	e049      	b.n	80052c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005234:	d045      	beq.n	80052c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005236:	f7fd f9a9 	bl	800258c <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	429a      	cmp	r2, r3
 8005244:	d302      	bcc.n	800524c <I2C_IsErrorOccurred+0x54>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d13a      	bne.n	80052c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005256:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800525e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800526a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800526e:	d121      	bne.n	80052b4 <I2C_IsErrorOccurred+0xbc>
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005276:	d01d      	beq.n	80052b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005278:	7cfb      	ldrb	r3, [r7, #19]
 800527a:	2b20      	cmp	r3, #32
 800527c:	d01a      	beq.n	80052b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800528c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800528e:	f7fd f97d 	bl	800258c <HAL_GetTick>
 8005292:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005294:	e00e      	b.n	80052b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005296:	f7fd f979 	bl	800258c <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b19      	cmp	r3, #25
 80052a2:	d907      	bls.n	80052b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	f043 0320 	orr.w	r3, r3, #32
 80052aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80052b2:	e006      	b.n	80052c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d1e9      	bne.n	8005296 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b20      	cmp	r3, #32
 80052ce:	d003      	beq.n	80052d8 <I2C_IsErrorOccurred+0xe0>
 80052d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0aa      	beq.n	800522e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80052d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d103      	bne.n	80052e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2220      	movs	r2, #32
 80052e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	f043 0304 	orr.w	r3, r3, #4
 80052ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00b      	beq.n	8005320 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	f043 0301 	orr.w	r3, r3, #1
 800530e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005318:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00b      	beq.n	8005342 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	f043 0308 	orr.w	r3, r3, #8
 8005330:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800533a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00b      	beq.n	8005364 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	f043 0302 	orr.w	r3, r3, #2
 8005352:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800535c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01c      	beq.n	80053a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff fdc3 	bl	8004ef8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6859      	ldr	r1, [r3, #4]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4b0d      	ldr	r3, [pc, #52]	; (80053b4 <I2C_IsErrorOccurred+0x1bc>)
 800537e:	400b      	ands	r3, r1
 8005380:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	431a      	orrs	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80053a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3728      	adds	r7, #40	; 0x28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	fe00e800 	.word	0xfe00e800

080053b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	607b      	str	r3, [r7, #4]
 80053c2:	460b      	mov	r3, r1
 80053c4:	817b      	strh	r3, [r7, #10]
 80053c6:	4613      	mov	r3, r2
 80053c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053ca:	897b      	ldrh	r3, [r7, #10]
 80053cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053d0:	7a7b      	ldrb	r3, [r7, #9]
 80053d2:	041b      	lsls	r3, r3, #16
 80053d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	0d5b      	lsrs	r3, r3, #21
 80053f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80053f6:	4b08      	ldr	r3, [pc, #32]	; (8005418 <I2C_TransferConfig+0x60>)
 80053f8:	430b      	orrs	r3, r1
 80053fa:	43db      	mvns	r3, r3
 80053fc:	ea02 0103 	and.w	r1, r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	430a      	orrs	r2, r1
 8005408:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800540a:	bf00      	nop
 800540c:	371c      	adds	r7, #28
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	03ff63ff 	.word	0x03ff63ff

0800541c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b20      	cmp	r3, #32
 8005430:	d138      	bne.n	80054a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800543c:	2302      	movs	r3, #2
 800543e:	e032      	b.n	80054a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2224      	movs	r2, #36	; 0x24
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0201 	bic.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800546e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6819      	ldr	r1, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0201 	orr.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	e000      	b.n	80054a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054a4:	2302      	movs	r3, #2
  }
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d139      	bne.n	800553c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e033      	b.n	800553e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2224      	movs	r2, #36	; 0x24
 80054e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0201 	bic.w	r2, r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005504:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2220      	movs	r2, #32
 800552c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	e000      	b.n	800553e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800553c:	2302      	movs	r3, #2
  }
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
	...

0800554c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005554:	4b29      	ldr	r3, [pc, #164]	; (80055fc <HAL_PWREx_ConfigSupply+0xb0>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	2b06      	cmp	r3, #6
 800555e:	d00a      	beq.n	8005576 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005560:	4b26      	ldr	r3, [pc, #152]	; (80055fc <HAL_PWREx_ConfigSupply+0xb0>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	429a      	cmp	r2, r3
 800556c:	d001      	beq.n	8005572 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e040      	b.n	80055f4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	e03e      	b.n	80055f4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005576:	4b21      	ldr	r3, [pc, #132]	; (80055fc <HAL_PWREx_ConfigSupply+0xb0>)
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800557e:	491f      	ldr	r1, [pc, #124]	; (80055fc <HAL_PWREx_ConfigSupply+0xb0>)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4313      	orrs	r3, r2
 8005584:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005586:	f7fd f801 	bl	800258c <HAL_GetTick>
 800558a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800558c:	e009      	b.n	80055a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800558e:	f7fc fffd 	bl	800258c <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800559c:	d901      	bls.n	80055a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e028      	b.n	80055f4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80055a2:	4b16      	ldr	r3, [pc, #88]	; (80055fc <HAL_PWREx_ConfigSupply+0xb0>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ae:	d1ee      	bne.n	800558e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b1e      	cmp	r3, #30
 80055b4:	d008      	beq.n	80055c8 <HAL_PWREx_ConfigSupply+0x7c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b2e      	cmp	r3, #46	; 0x2e
 80055ba:	d005      	beq.n	80055c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b1d      	cmp	r3, #29
 80055c0:	d002      	beq.n	80055c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b2d      	cmp	r3, #45	; 0x2d
 80055c6:	d114      	bne.n	80055f2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80055c8:	f7fc ffe0 	bl	800258c <HAL_GetTick>
 80055cc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80055ce:	e009      	b.n	80055e4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80055d0:	f7fc ffdc 	bl	800258c <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055de:	d901      	bls.n	80055e4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e007      	b.n	80055f4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80055e4:	4b05      	ldr	r3, [pc, #20]	; (80055fc <HAL_PWREx_ConfigSupply+0xb0>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f0:	d1ee      	bne.n	80055d0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	58024800 	.word	0x58024800

08005600 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08c      	sub	sp, #48	; 0x30
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	f000 bc1f 	b.w	8005e52 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 80b3 	beq.w	8005788 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005622:	4b95      	ldr	r3, [pc, #596]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800562a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800562c:	4b92      	ldr	r3, [pc, #584]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	2b10      	cmp	r3, #16
 8005636:	d007      	beq.n	8005648 <HAL_RCC_OscConfig+0x48>
 8005638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563a:	2b18      	cmp	r3, #24
 800563c:	d112      	bne.n	8005664 <HAL_RCC_OscConfig+0x64>
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	f003 0303 	and.w	r3, r3, #3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d10d      	bne.n	8005664 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005648:	4b8b      	ldr	r3, [pc, #556]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8098 	beq.w	8005786 <HAL_RCC_OscConfig+0x186>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f040 8093 	bne.w	8005786 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e3f6      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800566c:	d106      	bne.n	800567c <HAL_RCC_OscConfig+0x7c>
 800566e:	4b82      	ldr	r3, [pc, #520]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a81      	ldr	r2, [pc, #516]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	e058      	b.n	800572e <HAL_RCC_OscConfig+0x12e>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d112      	bne.n	80056aa <HAL_RCC_OscConfig+0xaa>
 8005684:	4b7c      	ldr	r3, [pc, #496]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a7b      	ldr	r2, [pc, #492]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 800568a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	4b79      	ldr	r3, [pc, #484]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a78      	ldr	r2, [pc, #480]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005696:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	4b76      	ldr	r3, [pc, #472]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a75      	ldr	r2, [pc, #468]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 80056a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	e041      	b.n	800572e <HAL_RCC_OscConfig+0x12e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056b2:	d112      	bne.n	80056da <HAL_RCC_OscConfig+0xda>
 80056b4:	4b70      	ldr	r3, [pc, #448]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a6f      	ldr	r2, [pc, #444]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 80056ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	4b6d      	ldr	r3, [pc, #436]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a6c      	ldr	r2, [pc, #432]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 80056c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	4b6a      	ldr	r3, [pc, #424]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a69      	ldr	r2, [pc, #420]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 80056d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	e029      	b.n	800572e <HAL_RCC_OscConfig+0x12e>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80056e2:	d112      	bne.n	800570a <HAL_RCC_OscConfig+0x10a>
 80056e4:	4b64      	ldr	r3, [pc, #400]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a63      	ldr	r2, [pc, #396]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 80056ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	4b61      	ldr	r3, [pc, #388]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a60      	ldr	r2, [pc, #384]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 80056f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	4b5e      	ldr	r3, [pc, #376]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a5d      	ldr	r2, [pc, #372]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	e011      	b.n	800572e <HAL_RCC_OscConfig+0x12e>
 800570a:	4b5b      	ldr	r3, [pc, #364]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a5a      	ldr	r2, [pc, #360]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	4b58      	ldr	r3, [pc, #352]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a57      	ldr	r2, [pc, #348]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 800571c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	4b55      	ldr	r3, [pc, #340]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a54      	ldr	r2, [pc, #336]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005728:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800572c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d013      	beq.n	800575e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005736:	f7fc ff29 	bl	800258c <HAL_GetTick>
 800573a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800573e:	f7fc ff25 	bl	800258c <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b64      	cmp	r3, #100	; 0x64
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e380      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005750:	4b49      	ldr	r3, [pc, #292]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0f0      	beq.n	800573e <HAL_RCC_OscConfig+0x13e>
 800575c:	e014      	b.n	8005788 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575e:	f7fc ff15 	bl	800258c <HAL_GetTick>
 8005762:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005766:	f7fc ff11 	bl	800258c <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b64      	cmp	r3, #100	; 0x64
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e36c      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005778:	4b3f      	ldr	r3, [pc, #252]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f0      	bne.n	8005766 <HAL_RCC_OscConfig+0x166>
 8005784:	e000      	b.n	8005788 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005786:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 808c 	beq.w	80058ae <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005796:	4b38      	ldr	r3, [pc, #224]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800579e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057a0:	4b35      	ldr	r3, [pc, #212]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 80057a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d007      	beq.n	80057bc <HAL_RCC_OscConfig+0x1bc>
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	2b18      	cmp	r3, #24
 80057b0:	d137      	bne.n	8005822 <HAL_RCC_OscConfig+0x222>
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	f003 0303 	and.w	r3, r3, #3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d132      	bne.n	8005822 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057bc:	4b2e      	ldr	r3, [pc, #184]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d005      	beq.n	80057d4 <HAL_RCC_OscConfig+0x1d4>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e33e      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80057d4:	4b28      	ldr	r3, [pc, #160]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f023 0219 	bic.w	r2, r3, #25
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	4925      	ldr	r1, [pc, #148]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e6:	f7fc fed1 	bl	800258c <HAL_GetTick>
 80057ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ee:	f7fc fecd 	bl	800258c <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e328      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005800:	4b1d      	ldr	r3, [pc, #116]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0f0      	beq.n	80057ee <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800580c:	4b1a      	ldr	r3, [pc, #104]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	061b      	lsls	r3, r3, #24
 800581a:	4917      	ldr	r1, [pc, #92]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 800581c:	4313      	orrs	r3, r2
 800581e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005820:	e045      	b.n	80058ae <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d028      	beq.n	800587c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800582a:	4b13      	ldr	r3, [pc, #76]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f023 0219 	bic.w	r2, r3, #25
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	4910      	ldr	r1, [pc, #64]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005838:	4313      	orrs	r3, r2
 800583a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fc fea6 	bl	800258c <HAL_GetTick>
 8005840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005844:	f7fc fea2 	bl	800258c <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e2fd      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005856:	4b08      	ldr	r3, [pc, #32]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0304 	and.w	r3, r3, #4
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0f0      	beq.n	8005844 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005862:	4b05      	ldr	r3, [pc, #20]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	061b      	lsls	r3, r3, #24
 8005870:	4901      	ldr	r1, [pc, #4]	; (8005878 <HAL_RCC_OscConfig+0x278>)
 8005872:	4313      	orrs	r3, r2
 8005874:	604b      	str	r3, [r1, #4]
 8005876:	e01a      	b.n	80058ae <HAL_RCC_OscConfig+0x2ae>
 8005878:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800587c:	4b97      	ldr	r3, [pc, #604]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a96      	ldr	r2, [pc, #600]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 8005882:	f023 0301 	bic.w	r3, r3, #1
 8005886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fc fe80 	bl	800258c <HAL_GetTick>
 800588c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005890:	f7fc fe7c 	bl	800258c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e2d7      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058a2:	4b8e      	ldr	r3, [pc, #568]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0310 	and.w	r3, r3, #16
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d06a      	beq.n	8005990 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ba:	4b88      	ldr	r3, [pc, #544]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058c4:	4b85      	ldr	r3, [pc, #532]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d007      	beq.n	80058e0 <HAL_RCC_OscConfig+0x2e0>
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b18      	cmp	r3, #24
 80058d4:	d11b      	bne.n	800590e <HAL_RCC_OscConfig+0x30e>
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f003 0303 	and.w	r3, r3, #3
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d116      	bne.n	800590e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058e0:	4b7e      	ldr	r3, [pc, #504]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_RCC_OscConfig+0x2f8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	2b80      	cmp	r3, #128	; 0x80
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e2ac      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058f8:	4b78      	ldr	r3, [pc, #480]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	061b      	lsls	r3, r3, #24
 8005906:	4975      	ldr	r1, [pc, #468]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 8005908:	4313      	orrs	r3, r2
 800590a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800590c:	e040      	b.n	8005990 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d023      	beq.n	800595e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005916:	4b71      	ldr	r3, [pc, #452]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a70      	ldr	r2, [pc, #448]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 800591c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005922:	f7fc fe33 	bl	800258c <HAL_GetTick>
 8005926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800592a:	f7fc fe2f 	bl	800258c <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e28a      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800593c:	4b67      	ldr	r3, [pc, #412]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f0      	beq.n	800592a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005948:	4b64      	ldr	r3, [pc, #400]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	061b      	lsls	r3, r3, #24
 8005956:	4961      	ldr	r1, [pc, #388]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 8005958:	4313      	orrs	r3, r2
 800595a:	60cb      	str	r3, [r1, #12]
 800595c:	e018      	b.n	8005990 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800595e:	4b5f      	ldr	r3, [pc, #380]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a5e      	ldr	r2, [pc, #376]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 8005964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596a:	f7fc fe0f 	bl	800258c <HAL_GetTick>
 800596e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005972:	f7fc fe0b 	bl	800258c <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e266      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005984:	4b55      	ldr	r3, [pc, #340]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1f0      	bne.n	8005972 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0308 	and.w	r3, r3, #8
 8005998:	2b00      	cmp	r3, #0
 800599a:	d036      	beq.n	8005a0a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d019      	beq.n	80059d8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059a4:	4b4d      	ldr	r3, [pc, #308]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 80059a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a8:	4a4c      	ldr	r2, [pc, #304]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 80059aa:	f043 0301 	orr.w	r3, r3, #1
 80059ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b0:	f7fc fdec 	bl	800258c <HAL_GetTick>
 80059b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059b6:	e008      	b.n	80059ca <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059b8:	f7fc fde8 	bl	800258c <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e243      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059ca:	4b44      	ldr	r3, [pc, #272]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 80059cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0f0      	beq.n	80059b8 <HAL_RCC_OscConfig+0x3b8>
 80059d6:	e018      	b.n	8005a0a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059d8:	4b40      	ldr	r3, [pc, #256]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 80059da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059dc:	4a3f      	ldr	r2, [pc, #252]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 80059de:	f023 0301 	bic.w	r3, r3, #1
 80059e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e4:	f7fc fdd2 	bl	800258c <HAL_GetTick>
 80059e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ec:	f7fc fdce 	bl	800258c <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e229      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059fe:	4b37      	ldr	r3, [pc, #220]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 8005a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f0      	bne.n	80059ec <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d036      	beq.n	8005a84 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d019      	beq.n	8005a52 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a1e:	4b2f      	ldr	r3, [pc, #188]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a2e      	ldr	r2, [pc, #184]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 8005a24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a2a:	f7fc fdaf 	bl	800258c <HAL_GetTick>
 8005a2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a30:	e008      	b.n	8005a44 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a32:	f7fc fdab 	bl	800258c <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d901      	bls.n	8005a44 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e206      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a44:	4b25      	ldr	r3, [pc, #148]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0f0      	beq.n	8005a32 <HAL_RCC_OscConfig+0x432>
 8005a50:	e018      	b.n	8005a84 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a52:	4b22      	ldr	r3, [pc, #136]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a21      	ldr	r2, [pc, #132]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 8005a58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a5e:	f7fc fd95 	bl	800258c <HAL_GetTick>
 8005a62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a66:	f7fc fd91 	bl	800258c <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e1ec      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a78:	4b18      	ldr	r3, [pc, #96]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f0      	bne.n	8005a66 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 80af 	beq.w	8005bf0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a92:	4b13      	ldr	r3, [pc, #76]	; (8005ae0 <HAL_RCC_OscConfig+0x4e0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a12      	ldr	r2, [pc, #72]	; (8005ae0 <HAL_RCC_OscConfig+0x4e0>)
 8005a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a9e:	f7fc fd75 	bl	800258c <HAL_GetTick>
 8005aa2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa6:	f7fc fd71 	bl	800258c <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b64      	cmp	r3, #100	; 0x64
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e1cc      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ab8:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <HAL_RCC_OscConfig+0x4e0>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d10b      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x4e4>
 8005acc:	4b03      	ldr	r3, [pc, #12]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 8005ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad0:	4a02      	ldr	r2, [pc, #8]	; (8005adc <HAL_RCC_OscConfig+0x4dc>)
 8005ad2:	f043 0301 	orr.w	r3, r3, #1
 8005ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad8:	e05b      	b.n	8005b92 <HAL_RCC_OscConfig+0x592>
 8005ada:	bf00      	nop
 8005adc:	58024400 	.word	0x58024400
 8005ae0:	58024800 	.word	0x58024800
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d112      	bne.n	8005b12 <HAL_RCC_OscConfig+0x512>
 8005aec:	4b9d      	ldr	r3, [pc, #628]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af0:	4a9c      	ldr	r2, [pc, #624]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005af2:	f023 0301 	bic.w	r3, r3, #1
 8005af6:	6713      	str	r3, [r2, #112]	; 0x70
 8005af8:	4b9a      	ldr	r3, [pc, #616]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afc:	4a99      	ldr	r2, [pc, #612]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b02:	6713      	str	r3, [r2, #112]	; 0x70
 8005b04:	4b97      	ldr	r3, [pc, #604]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b08:	4a96      	ldr	r2, [pc, #600]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b0a:	f023 0304 	bic.w	r3, r3, #4
 8005b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b10:	e03f      	b.n	8005b92 <HAL_RCC_OscConfig+0x592>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	2b05      	cmp	r3, #5
 8005b18:	d112      	bne.n	8005b40 <HAL_RCC_OscConfig+0x540>
 8005b1a:	4b92      	ldr	r3, [pc, #584]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	4a91      	ldr	r2, [pc, #580]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b20:	f043 0304 	orr.w	r3, r3, #4
 8005b24:	6713      	str	r3, [r2, #112]	; 0x70
 8005b26:	4b8f      	ldr	r3, [pc, #572]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2a:	4a8e      	ldr	r2, [pc, #568]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b30:	6713      	str	r3, [r2, #112]	; 0x70
 8005b32:	4b8c      	ldr	r3, [pc, #560]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b36:	4a8b      	ldr	r2, [pc, #556]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b38:	f043 0301 	orr.w	r3, r3, #1
 8005b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b3e:	e028      	b.n	8005b92 <HAL_RCC_OscConfig+0x592>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b85      	cmp	r3, #133	; 0x85
 8005b46:	d112      	bne.n	8005b6e <HAL_RCC_OscConfig+0x56e>
 8005b48:	4b86      	ldr	r3, [pc, #536]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4c:	4a85      	ldr	r2, [pc, #532]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b4e:	f043 0304 	orr.w	r3, r3, #4
 8005b52:	6713      	str	r3, [r2, #112]	; 0x70
 8005b54:	4b83      	ldr	r3, [pc, #524]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b58:	4a82      	ldr	r2, [pc, #520]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b60:	4b80      	ldr	r3, [pc, #512]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b64:	4a7f      	ldr	r2, [pc, #508]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b66:	f043 0301 	orr.w	r3, r3, #1
 8005b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b6c:	e011      	b.n	8005b92 <HAL_RCC_OscConfig+0x592>
 8005b6e:	4b7d      	ldr	r3, [pc, #500]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b72:	4a7c      	ldr	r2, [pc, #496]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b74:	f023 0301 	bic.w	r3, r3, #1
 8005b78:	6713      	str	r3, [r2, #112]	; 0x70
 8005b7a:	4b7a      	ldr	r3, [pc, #488]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7e:	4a79      	ldr	r2, [pc, #484]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b80:	f023 0304 	bic.w	r3, r3, #4
 8005b84:	6713      	str	r3, [r2, #112]	; 0x70
 8005b86:	4b77      	ldr	r3, [pc, #476]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8a:	4a76      	ldr	r2, [pc, #472]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005b8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d015      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9a:	f7fc fcf7 	bl	800258c <HAL_GetTick>
 8005b9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ba0:	e00a      	b.n	8005bb8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba2:	f7fc fcf3 	bl	800258c <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e14c      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bb8:	4b6a      	ldr	r3, [pc, #424]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0ee      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x5a2>
 8005bc4:	e014      	b.n	8005bf0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc6:	f7fc fce1 	bl	800258c <HAL_GetTick>
 8005bca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005bcc:	e00a      	b.n	8005be4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bce:	f7fc fcdd 	bl	800258c <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e136      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005be4:	4b5f      	ldr	r3, [pc, #380]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1ee      	bne.n	8005bce <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 812b 	beq.w	8005e50 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005bfa:	4b5a      	ldr	r3, [pc, #360]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c02:	2b18      	cmp	r3, #24
 8005c04:	f000 80bb 	beq.w	8005d7e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	f040 8095 	bne.w	8005d3c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c12:	4b54      	ldr	r3, [pc, #336]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a53      	ldr	r2, [pc, #332]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005c18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1e:	f7fc fcb5 	bl	800258c <HAL_GetTick>
 8005c22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c26:	f7fc fcb1 	bl	800258c <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e10c      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c38:	4b4a      	ldr	r3, [pc, #296]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1f0      	bne.n	8005c26 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c44:	4b47      	ldr	r3, [pc, #284]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005c46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c48:	4b47      	ldr	r3, [pc, #284]	; (8005d68 <HAL_RCC_OscConfig+0x768>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c54:	0112      	lsls	r2, r2, #4
 8005c56:	430a      	orrs	r2, r1
 8005c58:	4942      	ldr	r1, [pc, #264]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	628b      	str	r3, [r1, #40]	; 0x28
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c62:	3b01      	subs	r3, #1
 8005c64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	025b      	lsls	r3, r3, #9
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	041b      	lsls	r3, r3, #16
 8005c7c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c80:	431a      	orrs	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c86:	3b01      	subs	r3, #1
 8005c88:	061b      	lsls	r3, r3, #24
 8005c8a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c8e:	4935      	ldr	r1, [pc, #212]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005c94:	4b33      	ldr	r3, [pc, #204]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	4a32      	ldr	r2, [pc, #200]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005c9a:	f023 0301 	bic.w	r3, r3, #1
 8005c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ca0:	4b30      	ldr	r3, [pc, #192]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ca4:	4b31      	ldr	r3, [pc, #196]	; (8005d6c <HAL_RCC_OscConfig+0x76c>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005cac:	00d2      	lsls	r2, r2, #3
 8005cae:	492d      	ldr	r1, [pc, #180]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005cb4:	4b2b      	ldr	r3, [pc, #172]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	f023 020c 	bic.w	r2, r3, #12
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc0:	4928      	ldr	r1, [pc, #160]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005cc6:	4b27      	ldr	r3, [pc, #156]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cca:	f023 0202 	bic.w	r2, r3, #2
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd2:	4924      	ldr	r1, [pc, #144]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005cd8:	4b22      	ldr	r3, [pc, #136]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	4a21      	ldr	r2, [pc, #132]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ce4:	4b1f      	ldr	r3, [pc, #124]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	4a1e      	ldr	r2, [pc, #120]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005cf0:	4b1c      	ldr	r3, [pc, #112]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	4a1b      	ldr	r2, [pc, #108]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005cf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005cfc:	4b19      	ldr	r3, [pc, #100]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d00:	4a18      	ldr	r2, [pc, #96]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d08:	4b16      	ldr	r3, [pc, #88]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a15      	ldr	r2, [pc, #84]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d14:	f7fc fc3a 	bl	800258c <HAL_GetTick>
 8005d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1c:	f7fc fc36 	bl	800258c <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e091      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d2e:	4b0d      	ldr	r3, [pc, #52]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f0      	beq.n	8005d1c <HAL_RCC_OscConfig+0x71c>
 8005d3a:	e089      	b.n	8005e50 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d3c:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a08      	ldr	r2, [pc, #32]	; (8005d64 <HAL_RCC_OscConfig+0x764>)
 8005d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d48:	f7fc fc20 	bl	800258c <HAL_GetTick>
 8005d4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d4e:	e00f      	b.n	8005d70 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d50:	f7fc fc1c 	bl	800258c <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d908      	bls.n	8005d70 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e077      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
 8005d62:	bf00      	nop
 8005d64:	58024400 	.word	0x58024400
 8005d68:	fffffc0c 	.word	0xfffffc0c
 8005d6c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d70:	4b3a      	ldr	r3, [pc, #232]	; (8005e5c <HAL_RCC_OscConfig+0x85c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1e9      	bne.n	8005d50 <HAL_RCC_OscConfig+0x750>
 8005d7c:	e068      	b.n	8005e50 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005d7e:	4b37      	ldr	r3, [pc, #220]	; (8005e5c <HAL_RCC_OscConfig+0x85c>)
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d84:	4b35      	ldr	r3, [pc, #212]	; (8005e5c <HAL_RCC_OscConfig+0x85c>)
 8005d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d88:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d031      	beq.n	8005df6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f003 0203 	and.w	r2, r3, #3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d12a      	bne.n	8005df6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	091b      	lsrs	r3, r3, #4
 8005da4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d122      	bne.n	8005df6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dba:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d11a      	bne.n	8005df6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	0a5b      	lsrs	r3, r3, #9
 8005dc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dcc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d111      	bne.n	8005df6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	0c1b      	lsrs	r3, r3, #16
 8005dd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dde:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d108      	bne.n	8005df6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	0e1b      	lsrs	r3, r3, #24
 8005de8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d001      	beq.n	8005dfa <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e02b      	b.n	8005e52 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005dfa:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <HAL_RCC_OscConfig+0x85c>)
 8005dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfe:	08db      	lsrs	r3, r3, #3
 8005e00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e04:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d01f      	beq.n	8005e50 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005e10:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <HAL_RCC_OscConfig+0x85c>)
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	4a11      	ldr	r2, [pc, #68]	; (8005e5c <HAL_RCC_OscConfig+0x85c>)
 8005e16:	f023 0301 	bic.w	r3, r3, #1
 8005e1a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e1c:	f7fc fbb6 	bl	800258c <HAL_GetTick>
 8005e20:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005e22:	bf00      	nop
 8005e24:	f7fc fbb2 	bl	800258c <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d0f9      	beq.n	8005e24 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e30:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <HAL_RCC_OscConfig+0x85c>)
 8005e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e34:	4b0a      	ldr	r3, [pc, #40]	; (8005e60 <HAL_RCC_OscConfig+0x860>)
 8005e36:	4013      	ands	r3, r2
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e3c:	00d2      	lsls	r2, r2, #3
 8005e3e:	4907      	ldr	r1, [pc, #28]	; (8005e5c <HAL_RCC_OscConfig+0x85c>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005e44:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <HAL_RCC_OscConfig+0x85c>)
 8005e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e48:	4a04      	ldr	r2, [pc, #16]	; (8005e5c <HAL_RCC_OscConfig+0x85c>)
 8005e4a:	f043 0301 	orr.w	r3, r3, #1
 8005e4e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3730      	adds	r7, #48	; 0x30
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	58024400 	.word	0x58024400
 8005e60:	ffff0007 	.word	0xffff0007

08005e64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e19c      	b.n	80061b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e78:	4b8a      	ldr	r3, [pc, #552]	; (80060a4 <HAL_RCC_ClockConfig+0x240>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d910      	bls.n	8005ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e86:	4b87      	ldr	r3, [pc, #540]	; (80060a4 <HAL_RCC_ClockConfig+0x240>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f023 020f 	bic.w	r2, r3, #15
 8005e8e:	4985      	ldr	r1, [pc, #532]	; (80060a4 <HAL_RCC_ClockConfig+0x240>)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e96:	4b83      	ldr	r3, [pc, #524]	; (80060a4 <HAL_RCC_ClockConfig+0x240>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d001      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e184      	b.n	80061b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d010      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691a      	ldr	r2, [r3, #16]
 8005eb8:	4b7b      	ldr	r3, [pc, #492]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d908      	bls.n	8005ed6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ec4:	4b78      	ldr	r3, [pc, #480]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	4975      	ldr	r1, [pc, #468]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d010      	beq.n	8005f04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	695a      	ldr	r2, [r3, #20]
 8005ee6:	4b70      	ldr	r3, [pc, #448]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d908      	bls.n	8005f04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ef2:	4b6d      	ldr	r3, [pc, #436]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	496a      	ldr	r1, [pc, #424]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d010      	beq.n	8005f32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699a      	ldr	r2, [r3, #24]
 8005f14:	4b64      	ldr	r3, [pc, #400]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d908      	bls.n	8005f32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f20:	4b61      	ldr	r3, [pc, #388]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	495e      	ldr	r1, [pc, #376]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d010      	beq.n	8005f60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69da      	ldr	r2, [r3, #28]
 8005f42:	4b59      	ldr	r3, [pc, #356]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d908      	bls.n	8005f60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005f4e:	4b56      	ldr	r3, [pc, #344]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	4953      	ldr	r1, [pc, #332]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d010      	beq.n	8005f8e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	4b4d      	ldr	r3, [pc, #308]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	f003 030f 	and.w	r3, r3, #15
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d908      	bls.n	8005f8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f7c:	4b4a      	ldr	r3, [pc, #296]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	f023 020f 	bic.w	r2, r3, #15
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	4947      	ldr	r1, [pc, #284]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d055      	beq.n	8006046 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005f9a:	4b43      	ldr	r3, [pc, #268]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	4940      	ldr	r1, [pc, #256]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d107      	bne.n	8005fc4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fb4:	4b3c      	ldr	r3, [pc, #240]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d121      	bne.n	8006004 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e0f6      	b.n	80061b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d107      	bne.n	8005fdc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fcc:	4b36      	ldr	r3, [pc, #216]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d115      	bne.n	8006004 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e0ea      	b.n	80061b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d107      	bne.n	8005ff4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fe4:	4b30      	ldr	r3, [pc, #192]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d109      	bne.n	8006004 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e0de      	b.n	80061b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ff4:	4b2c      	ldr	r3, [pc, #176]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e0d6      	b.n	80061b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006004:	4b28      	ldr	r3, [pc, #160]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f023 0207 	bic.w	r2, r3, #7
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	4925      	ldr	r1, [pc, #148]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8006012:	4313      	orrs	r3, r2
 8006014:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006016:	f7fc fab9 	bl	800258c <HAL_GetTick>
 800601a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800601c:	e00a      	b.n	8006034 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800601e:	f7fc fab5 	bl	800258c <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	f241 3288 	movw	r2, #5000	; 0x1388
 800602c:	4293      	cmp	r3, r2
 800602e:	d901      	bls.n	8006034 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e0be      	b.n	80061b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006034:	4b1c      	ldr	r3, [pc, #112]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	429a      	cmp	r2, r3
 8006044:	d1eb      	bne.n	800601e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d010      	beq.n	8006074 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	4b14      	ldr	r3, [pc, #80]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	f003 030f 	and.w	r3, r3, #15
 800605e:	429a      	cmp	r2, r3
 8006060:	d208      	bcs.n	8006074 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006062:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	f023 020f 	bic.w	r2, r3, #15
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	490e      	ldr	r1, [pc, #56]	; (80060a8 <HAL_RCC_ClockConfig+0x244>)
 8006070:	4313      	orrs	r3, r2
 8006072:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006074:	4b0b      	ldr	r3, [pc, #44]	; (80060a4 <HAL_RCC_ClockConfig+0x240>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 030f 	and.w	r3, r3, #15
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d214      	bcs.n	80060ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006082:	4b08      	ldr	r3, [pc, #32]	; (80060a4 <HAL_RCC_ClockConfig+0x240>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f023 020f 	bic.w	r2, r3, #15
 800608a:	4906      	ldr	r1, [pc, #24]	; (80060a4 <HAL_RCC_ClockConfig+0x240>)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	4313      	orrs	r3, r2
 8006090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006092:	4b04      	ldr	r3, [pc, #16]	; (80060a4 <HAL_RCC_ClockConfig+0x240>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 030f 	and.w	r3, r3, #15
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	429a      	cmp	r2, r3
 800609e:	d005      	beq.n	80060ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e086      	b.n	80061b2 <HAL_RCC_ClockConfig+0x34e>
 80060a4:	52002000 	.word	0x52002000
 80060a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d010      	beq.n	80060da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	4b3f      	ldr	r3, [pc, #252]	; (80061bc <HAL_RCC_ClockConfig+0x358>)
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d208      	bcs.n	80060da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80060c8:	4b3c      	ldr	r3, [pc, #240]	; (80061bc <HAL_RCC_ClockConfig+0x358>)
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	4939      	ldr	r1, [pc, #228]	; (80061bc <HAL_RCC_ClockConfig+0x358>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0308 	and.w	r3, r3, #8
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d010      	beq.n	8006108 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	695a      	ldr	r2, [r3, #20]
 80060ea:	4b34      	ldr	r3, [pc, #208]	; (80061bc <HAL_RCC_ClockConfig+0x358>)
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d208      	bcs.n	8006108 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060f6:	4b31      	ldr	r3, [pc, #196]	; (80061bc <HAL_RCC_ClockConfig+0x358>)
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	492e      	ldr	r1, [pc, #184]	; (80061bc <HAL_RCC_ClockConfig+0x358>)
 8006104:	4313      	orrs	r3, r2
 8006106:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	2b00      	cmp	r3, #0
 8006112:	d010      	beq.n	8006136 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	699a      	ldr	r2, [r3, #24]
 8006118:	4b28      	ldr	r3, [pc, #160]	; (80061bc <HAL_RCC_ClockConfig+0x358>)
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006120:	429a      	cmp	r2, r3
 8006122:	d208      	bcs.n	8006136 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006124:	4b25      	ldr	r3, [pc, #148]	; (80061bc <HAL_RCC_ClockConfig+0x358>)
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	4922      	ldr	r1, [pc, #136]	; (80061bc <HAL_RCC_ClockConfig+0x358>)
 8006132:	4313      	orrs	r3, r2
 8006134:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b00      	cmp	r3, #0
 8006140:	d010      	beq.n	8006164 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	69da      	ldr	r2, [r3, #28]
 8006146:	4b1d      	ldr	r3, [pc, #116]	; (80061bc <HAL_RCC_ClockConfig+0x358>)
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800614e:	429a      	cmp	r2, r3
 8006150:	d208      	bcs.n	8006164 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006152:	4b1a      	ldr	r3, [pc, #104]	; (80061bc <HAL_RCC_ClockConfig+0x358>)
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	4917      	ldr	r1, [pc, #92]	; (80061bc <HAL_RCC_ClockConfig+0x358>)
 8006160:	4313      	orrs	r3, r2
 8006162:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006164:	f000 f834 	bl	80061d0 <HAL_RCC_GetSysClockFreq>
 8006168:	4602      	mov	r2, r0
 800616a:	4b14      	ldr	r3, [pc, #80]	; (80061bc <HAL_RCC_ClockConfig+0x358>)
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	0a1b      	lsrs	r3, r3, #8
 8006170:	f003 030f 	and.w	r3, r3, #15
 8006174:	4912      	ldr	r1, [pc, #72]	; (80061c0 <HAL_RCC_ClockConfig+0x35c>)
 8006176:	5ccb      	ldrb	r3, [r1, r3]
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	fa22 f303 	lsr.w	r3, r2, r3
 8006180:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006182:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <HAL_RCC_ClockConfig+0x358>)
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	4a0d      	ldr	r2, [pc, #52]	; (80061c0 <HAL_RCC_ClockConfig+0x35c>)
 800618c:	5cd3      	ldrb	r3, [r2, r3]
 800618e:	f003 031f 	and.w	r3, r3, #31
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	fa22 f303 	lsr.w	r3, r2, r3
 8006198:	4a0a      	ldr	r2, [pc, #40]	; (80061c4 <HAL_RCC_ClockConfig+0x360>)
 800619a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800619c:	4a0a      	ldr	r2, [pc, #40]	; (80061c8 <HAL_RCC_ClockConfig+0x364>)
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80061a2:	4b0a      	ldr	r3, [pc, #40]	; (80061cc <HAL_RCC_ClockConfig+0x368>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fc f9a6 	bl	80024f8 <HAL_InitTick>
 80061ac:	4603      	mov	r3, r0
 80061ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	58024400 	.word	0x58024400
 80061c0:	0800faf8 	.word	0x0800faf8
 80061c4:	2400000c 	.word	0x2400000c
 80061c8:	24000008 	.word	0x24000008
 80061cc:	24000010 	.word	0x24000010

080061d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b089      	sub	sp, #36	; 0x24
 80061d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061d6:	4bb3      	ldr	r3, [pc, #716]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061de:	2b18      	cmp	r3, #24
 80061e0:	f200 8155 	bhi.w	800648e <HAL_RCC_GetSysClockFreq+0x2be>
 80061e4:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80061e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	08006251 	.word	0x08006251
 80061f0:	0800648f 	.word	0x0800648f
 80061f4:	0800648f 	.word	0x0800648f
 80061f8:	0800648f 	.word	0x0800648f
 80061fc:	0800648f 	.word	0x0800648f
 8006200:	0800648f 	.word	0x0800648f
 8006204:	0800648f 	.word	0x0800648f
 8006208:	0800648f 	.word	0x0800648f
 800620c:	08006277 	.word	0x08006277
 8006210:	0800648f 	.word	0x0800648f
 8006214:	0800648f 	.word	0x0800648f
 8006218:	0800648f 	.word	0x0800648f
 800621c:	0800648f 	.word	0x0800648f
 8006220:	0800648f 	.word	0x0800648f
 8006224:	0800648f 	.word	0x0800648f
 8006228:	0800648f 	.word	0x0800648f
 800622c:	0800627d 	.word	0x0800627d
 8006230:	0800648f 	.word	0x0800648f
 8006234:	0800648f 	.word	0x0800648f
 8006238:	0800648f 	.word	0x0800648f
 800623c:	0800648f 	.word	0x0800648f
 8006240:	0800648f 	.word	0x0800648f
 8006244:	0800648f 	.word	0x0800648f
 8006248:	0800648f 	.word	0x0800648f
 800624c:	08006283 	.word	0x08006283
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006250:	4b94      	ldr	r3, [pc, #592]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	2b00      	cmp	r3, #0
 800625a:	d009      	beq.n	8006270 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800625c:	4b91      	ldr	r3, [pc, #580]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	08db      	lsrs	r3, r3, #3
 8006262:	f003 0303 	and.w	r3, r3, #3
 8006266:	4a90      	ldr	r2, [pc, #576]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006268:	fa22 f303 	lsr.w	r3, r2, r3
 800626c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800626e:	e111      	b.n	8006494 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006270:	4b8d      	ldr	r3, [pc, #564]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006272:	61bb      	str	r3, [r7, #24]
      break;
 8006274:	e10e      	b.n	8006494 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006276:	4b8d      	ldr	r3, [pc, #564]	; (80064ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006278:	61bb      	str	r3, [r7, #24]
      break;
 800627a:	e10b      	b.n	8006494 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800627c:	4b8c      	ldr	r3, [pc, #560]	; (80064b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800627e:	61bb      	str	r3, [r7, #24]
      break;
 8006280:	e108      	b.n	8006494 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006282:	4b88      	ldr	r3, [pc, #544]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800628c:	4b85      	ldr	r3, [pc, #532]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800628e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006290:	091b      	lsrs	r3, r3, #4
 8006292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006296:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006298:	4b82      	ldr	r3, [pc, #520]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80062a2:	4b80      	ldr	r3, [pc, #512]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a6:	08db      	lsrs	r3, r3, #3
 80062a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	fb02 f303 	mul.w	r3, r2, r3
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 80e1 	beq.w	8006488 <HAL_RCC_GetSysClockFreq+0x2b8>
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	f000 8083 	beq.w	80063d4 <HAL_RCC_GetSysClockFreq+0x204>
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	f200 80a1 	bhi.w	8006418 <HAL_RCC_GetSysClockFreq+0x248>
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <HAL_RCC_GetSysClockFreq+0x114>
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d056      	beq.n	8006390 <HAL_RCC_GetSysClockFreq+0x1c0>
 80062e2:	e099      	b.n	8006418 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062e4:	4b6f      	ldr	r3, [pc, #444]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d02d      	beq.n	800634c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062f0:	4b6c      	ldr	r3, [pc, #432]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	08db      	lsrs	r3, r3, #3
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	4a6b      	ldr	r2, [pc, #428]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006300:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	ee07 3a90 	vmov	s15, r3
 8006308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800631a:	4b62      	ldr	r3, [pc, #392]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632a:	ed97 6a02 	vldr	s12, [r7, #8]
 800632e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80064b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800633a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800633e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006346:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800634a:	e087      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	ee07 3a90 	vmov	s15, r3
 8006352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006356:	eddf 6a58 	vldr	s13, [pc, #352]	; 80064b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800635a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800635e:	4b51      	ldr	r3, [pc, #324]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800636e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006372:	eddf 5a50 	vldr	s11, [pc, #320]	; 80064b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800637e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800638e:	e065      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	ee07 3a90 	vmov	s15, r3
 8006396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80064bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800639e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a2:	4b40      	ldr	r3, [pc, #256]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80063b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80064b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063d2:	e043      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80064c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80063e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063e6:	4b2f      	ldr	r3, [pc, #188]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80063fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80064b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800640a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800640e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006412:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006416:	e021      	b.n	800645c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	ee07 3a90 	vmov	s15, r3
 800641e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006422:	eddf 6a26 	vldr	s13, [pc, #152]	; 80064bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800642a:	4b1e      	ldr	r3, [pc, #120]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800642c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800643a:	ed97 6a02 	vldr	s12, [r7, #8]
 800643e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80064b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800644a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800644e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006456:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800645a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800645c:	4b11      	ldr	r3, [pc, #68]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800645e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006460:	0a5b      	lsrs	r3, r3, #9
 8006462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006466:	3301      	adds	r3, #1
 8006468:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	ee07 3a90 	vmov	s15, r3
 8006470:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006474:	edd7 6a07 	vldr	s13, [r7, #28]
 8006478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800647c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006480:	ee17 3a90 	vmov	r3, s15
 8006484:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006486:	e005      	b.n	8006494 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	61bb      	str	r3, [r7, #24]
      break;
 800648c:	e002      	b.n	8006494 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800648e:	4b07      	ldr	r3, [pc, #28]	; (80064ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006490:	61bb      	str	r3, [r7, #24]
      break;
 8006492:	bf00      	nop
  }

  return sysclockfreq;
 8006494:	69bb      	ldr	r3, [r7, #24]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3724      	adds	r7, #36	; 0x24
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	58024400 	.word	0x58024400
 80064a8:	03d09000 	.word	0x03d09000
 80064ac:	003d0900 	.word	0x003d0900
 80064b0:	007a1200 	.word	0x007a1200
 80064b4:	46000000 	.word	0x46000000
 80064b8:	4c742400 	.word	0x4c742400
 80064bc:	4a742400 	.word	0x4a742400
 80064c0:	4af42400 	.word	0x4af42400

080064c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80064ca:	f7ff fe81 	bl	80061d0 <HAL_RCC_GetSysClockFreq>
 80064ce:	4602      	mov	r2, r0
 80064d0:	4b10      	ldr	r3, [pc, #64]	; (8006514 <HAL_RCC_GetHCLKFreq+0x50>)
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	0a1b      	lsrs	r3, r3, #8
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	490f      	ldr	r1, [pc, #60]	; (8006518 <HAL_RCC_GetHCLKFreq+0x54>)
 80064dc:	5ccb      	ldrb	r3, [r1, r3]
 80064de:	f003 031f 	and.w	r3, r3, #31
 80064e2:	fa22 f303 	lsr.w	r3, r2, r3
 80064e6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80064e8:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <HAL_RCC_GetHCLKFreq+0x50>)
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	f003 030f 	and.w	r3, r3, #15
 80064f0:	4a09      	ldr	r2, [pc, #36]	; (8006518 <HAL_RCC_GetHCLKFreq+0x54>)
 80064f2:	5cd3      	ldrb	r3, [r2, r3]
 80064f4:	f003 031f 	and.w	r3, r3, #31
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	fa22 f303 	lsr.w	r3, r2, r3
 80064fe:	4a07      	ldr	r2, [pc, #28]	; (800651c <HAL_RCC_GetHCLKFreq+0x58>)
 8006500:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006502:	4a07      	ldr	r2, [pc, #28]	; (8006520 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006508:	4b04      	ldr	r3, [pc, #16]	; (800651c <HAL_RCC_GetHCLKFreq+0x58>)
 800650a:	681b      	ldr	r3, [r3, #0]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	58024400 	.word	0x58024400
 8006518:	0800faf8 	.word	0x0800faf8
 800651c:	2400000c 	.word	0x2400000c
 8006520:	24000008 	.word	0x24000008

08006524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006528:	f7ff ffcc 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 800652c:	4602      	mov	r2, r0
 800652e:	4b06      	ldr	r3, [pc, #24]	; (8006548 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	091b      	lsrs	r3, r3, #4
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	4904      	ldr	r1, [pc, #16]	; (800654c <HAL_RCC_GetPCLK1Freq+0x28>)
 800653a:	5ccb      	ldrb	r3, [r1, r3]
 800653c:	f003 031f 	and.w	r3, r3, #31
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006544:	4618      	mov	r0, r3
 8006546:	bd80      	pop	{r7, pc}
 8006548:	58024400 	.word	0x58024400
 800654c:	0800faf8 	.word	0x0800faf8

08006550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006554:	f7ff ffb6 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 8006558:	4602      	mov	r2, r0
 800655a:	4b06      	ldr	r3, [pc, #24]	; (8006574 <HAL_RCC_GetPCLK2Freq+0x24>)
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	0a1b      	lsrs	r3, r3, #8
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	4904      	ldr	r1, [pc, #16]	; (8006578 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006566:	5ccb      	ldrb	r3, [r1, r3]
 8006568:	f003 031f 	and.w	r3, r3, #31
 800656c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006570:	4618      	mov	r0, r3
 8006572:	bd80      	pop	{r7, pc}
 8006574:	58024400 	.word	0x58024400
 8006578:	0800faf8 	.word	0x0800faf8

0800657c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800657c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006580:	b0c8      	sub	sp, #288	; 0x120
 8006582:	af00      	add	r7, sp, #0
 8006584:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006588:	2300      	movs	r3, #0
 800658a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800658e:	2300      	movs	r3, #0
 8006590:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80065a0:	2500      	movs	r5, #0
 80065a2:	ea54 0305 	orrs.w	r3, r4, r5
 80065a6:	d049      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80065a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065b2:	d02f      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80065b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065b8:	d828      	bhi.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80065ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065be:	d01a      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80065c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065c4:	d822      	bhi.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80065ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ce:	d007      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80065d0:	e01c      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d2:	4ba7      	ldr	r3, [pc, #668]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d6:	4aa6      	ldr	r2, [pc, #664]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065de:	e01a      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065e4:	3308      	adds	r3, #8
 80065e6:	2102      	movs	r1, #2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f002 fa6d 	bl	8008ac8 <RCCEx_PLL2_Config>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065f4:	e00f      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065fa:	3328      	adds	r3, #40	; 0x28
 80065fc:	2102      	movs	r1, #2
 80065fe:	4618      	mov	r0, r3
 8006600:	f002 fb14 	bl	8008c2c <RCCEx_PLL3_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800660a:	e004      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006612:	e000      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006616:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800661e:	4b94      	ldr	r3, [pc, #592]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006622:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800662a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800662c:	4a90      	ldr	r2, [pc, #576]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800662e:	430b      	orrs	r3, r1
 8006630:	6513      	str	r3, [r2, #80]	; 0x50
 8006632:	e003      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006634:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006638:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800663c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006648:	f04f 0900 	mov.w	r9, #0
 800664c:	ea58 0309 	orrs.w	r3, r8, r9
 8006650:	d047      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006658:	2b04      	cmp	r3, #4
 800665a:	d82a      	bhi.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800665c:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	08006679 	.word	0x08006679
 8006668:	08006687 	.word	0x08006687
 800666c:	0800669d 	.word	0x0800669d
 8006670:	080066bb 	.word	0x080066bb
 8006674:	080066bb 	.word	0x080066bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006678:	4b7d      	ldr	r3, [pc, #500]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	4a7c      	ldr	r2, [pc, #496]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800667e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006682:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006684:	e01a      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800668a:	3308      	adds	r3, #8
 800668c:	2100      	movs	r1, #0
 800668e:	4618      	mov	r0, r3
 8006690:	f002 fa1a 	bl	8008ac8 <RCCEx_PLL2_Config>
 8006694:	4603      	mov	r3, r0
 8006696:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800669a:	e00f      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800669c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066a0:	3328      	adds	r3, #40	; 0x28
 80066a2:	2100      	movs	r1, #0
 80066a4:	4618      	mov	r0, r3
 80066a6:	f002 fac1 	bl	8008c2c <RCCEx_PLL3_Config>
 80066aa:	4603      	mov	r3, r0
 80066ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066b0:	e004      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80066b8:	e000      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80066ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066c4:	4b6a      	ldr	r3, [pc, #424]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c8:	f023 0107 	bic.w	r1, r3, #7
 80066cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d2:	4a67      	ldr	r2, [pc, #412]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066d4:	430b      	orrs	r3, r1
 80066d6:	6513      	str	r3, [r2, #80]	; 0x50
 80066d8:	e003      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80066e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80066ee:	f04f 0b00 	mov.w	fp, #0
 80066f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80066f6:	d054      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80066f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066fe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006702:	d036      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006704:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006708:	d82f      	bhi.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800670a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800670e:	d032      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006714:	d829      	bhi.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006716:	2bc0      	cmp	r3, #192	; 0xc0
 8006718:	d02f      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800671a:	2bc0      	cmp	r3, #192	; 0xc0
 800671c:	d825      	bhi.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800671e:	2b80      	cmp	r3, #128	; 0x80
 8006720:	d018      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006722:	2b80      	cmp	r3, #128	; 0x80
 8006724:	d821      	bhi.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800672a:	2b40      	cmp	r3, #64	; 0x40
 800672c:	d007      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800672e:	e01c      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006730:	4b4f      	ldr	r3, [pc, #316]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	4a4e      	ldr	r2, [pc, #312]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800673a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800673c:	e01e      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800673e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006742:	3308      	adds	r3, #8
 8006744:	2100      	movs	r1, #0
 8006746:	4618      	mov	r0, r3
 8006748:	f002 f9be 	bl	8008ac8 <RCCEx_PLL2_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006752:	e013      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006758:	3328      	adds	r3, #40	; 0x28
 800675a:	2100      	movs	r1, #0
 800675c:	4618      	mov	r0, r3
 800675e:	f002 fa65 	bl	8008c2c <RCCEx_PLL3_Config>
 8006762:	4603      	mov	r3, r0
 8006764:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8006768:	e008      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006770:	e004      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006772:	bf00      	nop
 8006774:	e002      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8006776:	bf00      	nop
 8006778:	e000      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800677a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800677c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006784:	4b3a      	ldr	r3, [pc, #232]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006788:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800678c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006792:	4a37      	ldr	r2, [pc, #220]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006794:	430b      	orrs	r3, r1
 8006796:	6513      	str	r3, [r2, #80]	; 0x50
 8006798:	e003      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800679e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80067a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80067ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067b2:	2300      	movs	r3, #0
 80067b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80067bc:	460b      	mov	r3, r1
 80067be:	4313      	orrs	r3, r2
 80067c0:	d05c      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80067c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80067cc:	d03b      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80067ce:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80067d2:	d834      	bhi.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80067d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d8:	d037      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80067da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067de:	d82e      	bhi.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80067e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80067e4:	d033      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80067e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80067ea:	d828      	bhi.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80067ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f0:	d01a      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80067f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f6:	d822      	bhi.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80067fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006800:	d007      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006802:	e01c      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006804:	4b1a      	ldr	r3, [pc, #104]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	4a19      	ldr	r2, [pc, #100]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800680a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800680e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006810:	e01e      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006816:	3308      	adds	r3, #8
 8006818:	2100      	movs	r1, #0
 800681a:	4618      	mov	r0, r3
 800681c:	f002 f954 	bl	8008ac8 <RCCEx_PLL2_Config>
 8006820:	4603      	mov	r3, r0
 8006822:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006826:	e013      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800682c:	3328      	adds	r3, #40	; 0x28
 800682e:	2100      	movs	r1, #0
 8006830:	4618      	mov	r0, r3
 8006832:	f002 f9fb 	bl	8008c2c <RCCEx_PLL3_Config>
 8006836:	4603      	mov	r3, r0
 8006838:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800683c:	e008      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006844:	e004      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006846:	bf00      	nop
 8006848:	e002      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800684a:	bf00      	nop
 800684c:	e000      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800684e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006850:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10d      	bne.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006858:	4b05      	ldr	r3, [pc, #20]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800685a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800685c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8006860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006866:	4a02      	ldr	r2, [pc, #8]	; (8006870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006868:	430b      	orrs	r3, r1
 800686a:	6513      	str	r3, [r2, #80]	; 0x50
 800686c:	e006      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800686e:	bf00      	nop
 8006870:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006874:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006878:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800687c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006888:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800688c:	2300      	movs	r3, #0
 800688e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006892:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006896:	460b      	mov	r3, r1
 8006898:	4313      	orrs	r3, r2
 800689a:	d03a      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800689c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a2:	2b30      	cmp	r3, #48	; 0x30
 80068a4:	d01f      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80068a6:	2b30      	cmp	r3, #48	; 0x30
 80068a8:	d819      	bhi.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x362>
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d00c      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80068ae:	2b20      	cmp	r3, #32
 80068b0:	d815      	bhi.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x362>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d019      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80068b6:	2b10      	cmp	r3, #16
 80068b8:	d111      	bne.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ba:	4bae      	ldr	r3, [pc, #696]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068be:	4aad      	ldr	r2, [pc, #692]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80068c6:	e011      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068cc:	3308      	adds	r3, #8
 80068ce:	2102      	movs	r1, #2
 80068d0:	4618      	mov	r0, r3
 80068d2:	f002 f8f9 	bl	8008ac8 <RCCEx_PLL2_Config>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80068dc:	e006      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80068e4:	e002      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80068e6:	bf00      	nop
 80068e8:	e000      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80068ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80068f4:	4b9f      	ldr	r3, [pc, #636]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80068fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006902:	4a9c      	ldr	r2, [pc, #624]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006904:	430b      	orrs	r3, r1
 8006906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006908:	e003      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800690e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800691e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006922:	2300      	movs	r3, #0
 8006924:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006928:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800692c:	460b      	mov	r3, r1
 800692e:	4313      	orrs	r3, r2
 8006930:	d051      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800693c:	d035      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800693e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006942:	d82e      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006944:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006948:	d031      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x432>
 800694a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800694e:	d828      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006954:	d01a      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800695a:	d822      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006964:	d007      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006966:	e01c      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006968:	4b82      	ldr	r3, [pc, #520]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696c:	4a81      	ldr	r2, [pc, #516]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800696e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006972:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006974:	e01c      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800697a:	3308      	adds	r3, #8
 800697c:	2100      	movs	r1, #0
 800697e:	4618      	mov	r0, r3
 8006980:	f002 f8a2 	bl	8008ac8 <RCCEx_PLL2_Config>
 8006984:	4603      	mov	r3, r0
 8006986:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800698a:	e011      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800698c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006990:	3328      	adds	r3, #40	; 0x28
 8006992:	2100      	movs	r1, #0
 8006994:	4618      	mov	r0, r3
 8006996:	f002 f949 	bl	8008c2c <RCCEx_PLL3_Config>
 800699a:	4603      	mov	r3, r0
 800699c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069a0:	e006      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80069a8:	e002      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80069aa:	bf00      	nop
 80069ac:	e000      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80069ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80069b8:	4b6e      	ldr	r3, [pc, #440]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069bc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80069c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069c6:	4a6b      	ldr	r2, [pc, #428]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069c8:	430b      	orrs	r3, r1
 80069ca:	6513      	str	r3, [r2, #80]	; 0x50
 80069cc:	e003      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80069d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80069d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069de:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80069e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069e6:	2300      	movs	r3, #0
 80069e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80069ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80069f0:	460b      	mov	r3, r1
 80069f2:	4313      	orrs	r3, r2
 80069f4:	d053      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80069f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a00:	d033      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006a02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a06:	d82c      	bhi.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006a08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a0c:	d02f      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006a0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a12:	d826      	bhi.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006a14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a18:	d02b      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006a1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a1e:	d820      	bhi.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006a20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a24:	d012      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006a26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a2a:	d81a      	bhi.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d022      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a34:	d115      	bne.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f002 f842 	bl	8008ac8 <RCCEx_PLL2_Config>
 8006a44:	4603      	mov	r3, r0
 8006a46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006a4a:	e015      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a50:	3328      	adds	r3, #40	; 0x28
 8006a52:	2101      	movs	r1, #1
 8006a54:	4618      	mov	r0, r3
 8006a56:	f002 f8e9 	bl	8008c2c <RCCEx_PLL3_Config>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006a60:	e00a      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006a68:	e006      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006a6a:	bf00      	nop
 8006a6c:	e004      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006a6e:	bf00      	nop
 8006a70:	e002      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006a72:	bf00      	nop
 8006a74:	e000      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10a      	bne.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006a80:	4b3c      	ldr	r3, [pc, #240]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a84:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a8e:	4a39      	ldr	r2, [pc, #228]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a90:	430b      	orrs	r3, r1
 8006a92:	6513      	str	r3, [r2, #80]	; 0x50
 8006a94:	e003      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a9a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006aaa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ab4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4313      	orrs	r3, r2
 8006abc:	d060      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ac2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ac6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006aca:	d039      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006acc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006ad0:	d832      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ad6:	d035      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006adc:	d82c      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae2:	d031      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae8:	d826      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006aea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006aee:	d02d      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006af0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006af4:	d820      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006af6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006afa:	d012      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b00:	d81a      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d024      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b0a:	d115      	bne.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b10:	3308      	adds	r3, #8
 8006b12:	2101      	movs	r1, #1
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 ffd7 	bl	8008ac8 <RCCEx_PLL2_Config>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b20:	e017      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b26:	3328      	adds	r3, #40	; 0x28
 8006b28:	2101      	movs	r1, #1
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f002 f87e 	bl	8008c2c <RCCEx_PLL3_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b36:	e00c      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006b3e:	e008      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b40:	bf00      	nop
 8006b42:	e006      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b44:	bf00      	nop
 8006b46:	e004      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b48:	bf00      	nop
 8006b4a:	e002      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b4c:	bf00      	nop
 8006b4e:	e000      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10e      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006b5a:	4b06      	ldr	r3, [pc, #24]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b5e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b6a:	4a02      	ldr	r2, [pc, #8]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b6c:	430b      	orrs	r3, r1
 8006b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8006b70:	e006      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006b72:	bf00      	nop
 8006b74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b90:	2300      	movs	r3, #0
 8006b92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	d037      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006baa:	d00e      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bb0:	d816      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d018      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bba:	d111      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bbc:	4bc4      	ldr	r3, [pc, #784]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	4ac3      	ldr	r2, [pc, #780]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006bc8:	e00f      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bce:	3308      	adds	r3, #8
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 ff78 	bl	8008ac8 <RCCEx_PLL2_Config>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006bde:	e004      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006be6:	e000      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006bf2:	4bb7      	ldr	r3, [pc, #732]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c00:	4ab3      	ldr	r2, [pc, #716]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c02:	430b      	orrs	r3, r1
 8006c04:	6513      	str	r3, [r2, #80]	; 0x50
 8006c06:	e003      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c20:	2300      	movs	r3, #0
 8006c22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c26:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	d039      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d81c      	bhi.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006c3a:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c40:	08006c7d 	.word	0x08006c7d
 8006c44:	08006c51 	.word	0x08006c51
 8006c48:	08006c5f 	.word	0x08006c5f
 8006c4c:	08006c7d 	.word	0x08006c7d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c50:	4b9f      	ldr	r3, [pc, #636]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	4a9e      	ldr	r2, [pc, #632]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c5c:	e00f      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c62:	3308      	adds	r3, #8
 8006c64:	2102      	movs	r1, #2
 8006c66:	4618      	mov	r0, r3
 8006c68:	f001 ff2e 	bl	8008ac8 <RCCEx_PLL2_Config>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c72:	e004      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006c7a:	e000      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10a      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006c86:	4b92      	ldr	r3, [pc, #584]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8a:	f023 0103 	bic.w	r1, r3, #3
 8006c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c94:	4a8e      	ldr	r2, [pc, #568]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c96:	430b      	orrs	r3, r1
 8006c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c9a:	e003      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ca0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	f000 8099 	beq.w	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cc6:	4b83      	ldr	r3, [pc, #524]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a82      	ldr	r2, [pc, #520]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cd2:	f7fb fc5b 	bl	800258c <HAL_GetTick>
 8006cd6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cda:	e00b      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cdc:	f7fb fc56 	bl	800258c <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b64      	cmp	r3, #100	; 0x64
 8006cea:	d903      	bls.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006cf2:	e005      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cf4:	4b77      	ldr	r3, [pc, #476]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0ed      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006d00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d173      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d08:	4b71      	ldr	r3, [pc, #452]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d14:	4053      	eors	r3, r2
 8006d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d015      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d1e:	4b6c      	ldr	r3, [pc, #432]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d26:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d2a:	4b69      	ldr	r3, [pc, #420]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2e:	4a68      	ldr	r2, [pc, #416]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d34:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d36:	4b66      	ldr	r3, [pc, #408]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3a:	4a65      	ldr	r2, [pc, #404]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d40:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d42:	4a63      	ldr	r2, [pc, #396]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d48:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d56:	d118      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d58:	f7fb fc18 	bl	800258c <HAL_GetTick>
 8006d5c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d60:	e00d      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d62:	f7fb fc13 	bl	800258c <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006d6c:	1ad2      	subs	r2, r2, r3
 8006d6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d903      	bls.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8006d7c:	e005      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d7e:	4b54      	ldr	r3, [pc, #336]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0eb      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006d8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d129      	bne.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006da2:	d10e      	bne.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006da4:	4b4a      	ldr	r3, [pc, #296]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006db0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006db4:	091a      	lsrs	r2, r3, #4
 8006db6:	4b48      	ldr	r3, [pc, #288]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006db8:	4013      	ands	r3, r2
 8006dba:	4a45      	ldr	r2, [pc, #276]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	6113      	str	r3, [r2, #16]
 8006dc0:	e005      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006dc2:	4b43      	ldr	r3, [pc, #268]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	4a42      	ldr	r2, [pc, #264]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006dcc:	6113      	str	r3, [r2, #16]
 8006dce:	4b40      	ldr	r3, [pc, #256]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dd0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dde:	4a3c      	ldr	r2, [pc, #240]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006de0:	430b      	orrs	r3, r1
 8006de2:	6713      	str	r3, [r2, #112]	; 0x70
 8006de4:	e008      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006de6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006dea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8006dee:	e003      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006df4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f002 0301 	and.w	r3, r2, #1
 8006e04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e12:	460b      	mov	r3, r1
 8006e14:	4313      	orrs	r3, r2
 8006e16:	f000 8090 	beq.w	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e22:	2b28      	cmp	r3, #40	; 0x28
 8006e24:	d870      	bhi.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006e26:	a201      	add	r2, pc, #4	; (adr r2, 8006e2c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2c:	08006f11 	.word	0x08006f11
 8006e30:	08006f09 	.word	0x08006f09
 8006e34:	08006f09 	.word	0x08006f09
 8006e38:	08006f09 	.word	0x08006f09
 8006e3c:	08006f09 	.word	0x08006f09
 8006e40:	08006f09 	.word	0x08006f09
 8006e44:	08006f09 	.word	0x08006f09
 8006e48:	08006f09 	.word	0x08006f09
 8006e4c:	08006edd 	.word	0x08006edd
 8006e50:	08006f09 	.word	0x08006f09
 8006e54:	08006f09 	.word	0x08006f09
 8006e58:	08006f09 	.word	0x08006f09
 8006e5c:	08006f09 	.word	0x08006f09
 8006e60:	08006f09 	.word	0x08006f09
 8006e64:	08006f09 	.word	0x08006f09
 8006e68:	08006f09 	.word	0x08006f09
 8006e6c:	08006ef3 	.word	0x08006ef3
 8006e70:	08006f09 	.word	0x08006f09
 8006e74:	08006f09 	.word	0x08006f09
 8006e78:	08006f09 	.word	0x08006f09
 8006e7c:	08006f09 	.word	0x08006f09
 8006e80:	08006f09 	.word	0x08006f09
 8006e84:	08006f09 	.word	0x08006f09
 8006e88:	08006f09 	.word	0x08006f09
 8006e8c:	08006f11 	.word	0x08006f11
 8006e90:	08006f09 	.word	0x08006f09
 8006e94:	08006f09 	.word	0x08006f09
 8006e98:	08006f09 	.word	0x08006f09
 8006e9c:	08006f09 	.word	0x08006f09
 8006ea0:	08006f09 	.word	0x08006f09
 8006ea4:	08006f09 	.word	0x08006f09
 8006ea8:	08006f09 	.word	0x08006f09
 8006eac:	08006f11 	.word	0x08006f11
 8006eb0:	08006f09 	.word	0x08006f09
 8006eb4:	08006f09 	.word	0x08006f09
 8006eb8:	08006f09 	.word	0x08006f09
 8006ebc:	08006f09 	.word	0x08006f09
 8006ec0:	08006f09 	.word	0x08006f09
 8006ec4:	08006f09 	.word	0x08006f09
 8006ec8:	08006f09 	.word	0x08006f09
 8006ecc:	08006f11 	.word	0x08006f11
 8006ed0:	58024400 	.word	0x58024400
 8006ed4:	58024800 	.word	0x58024800
 8006ed8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f001 fdef 	bl	8008ac8 <RCCEx_PLL2_Config>
 8006eea:	4603      	mov	r3, r0
 8006eec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ef0:	e00f      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ef6:	3328      	adds	r3, #40	; 0x28
 8006ef8:	2101      	movs	r1, #1
 8006efa:	4618      	mov	r0, r3
 8006efc:	f001 fe96 	bl	8008c2c <RCCEx_PLL3_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f06:	e004      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006f0e:	e000      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10b      	bne.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006f1a:	4bc0      	ldr	r3, [pc, #768]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f2a:	4abc      	ldr	r2, [pc, #752]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006f2c:	430b      	orrs	r3, r1
 8006f2e:	6553      	str	r3, [r2, #84]	; 0x54
 8006f30:	e003      	b.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	f002 0302 	and.w	r3, r2, #2
 8006f46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f50:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006f54:	460b      	mov	r3, r1
 8006f56:	4313      	orrs	r3, r2
 8006f58:	d043      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f62:	2b05      	cmp	r3, #5
 8006f64:	d824      	bhi.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006f66:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6c:	08006fb9 	.word	0x08006fb9
 8006f70:	08006f85 	.word	0x08006f85
 8006f74:	08006f9b 	.word	0x08006f9b
 8006f78:	08006fb9 	.word	0x08006fb9
 8006f7c:	08006fb9 	.word	0x08006fb9
 8006f80:	08006fb9 	.word	0x08006fb9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f88:	3308      	adds	r3, #8
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f001 fd9b 	bl	8008ac8 <RCCEx_PLL2_Config>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006f98:	e00f      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f9e:	3328      	adds	r3, #40	; 0x28
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f001 fe42 	bl	8008c2c <RCCEx_PLL3_Config>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006fae:	e004      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006fb6:	e000      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10b      	bne.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006fc2:	4b96      	ldr	r3, [pc, #600]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc6:	f023 0107 	bic.w	r1, r3, #7
 8006fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fd2:	4a92      	ldr	r2, [pc, #584]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	6553      	str	r3, [r2, #84]	; 0x54
 8006fd8:	e003      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fde:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	f002 0304 	and.w	r3, r2, #4
 8006fee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ff8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4313      	orrs	r3, r2
 8007000:	d043      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007006:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800700a:	2b05      	cmp	r3, #5
 800700c:	d824      	bhi.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	08007061 	.word	0x08007061
 8007018:	0800702d 	.word	0x0800702d
 800701c:	08007043 	.word	0x08007043
 8007020:	08007061 	.word	0x08007061
 8007024:	08007061 	.word	0x08007061
 8007028:	08007061 	.word	0x08007061
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800702c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007030:	3308      	adds	r3, #8
 8007032:	2101      	movs	r1, #1
 8007034:	4618      	mov	r0, r3
 8007036:	f001 fd47 	bl	8008ac8 <RCCEx_PLL2_Config>
 800703a:	4603      	mov	r3, r0
 800703c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007040:	e00f      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007046:	3328      	adds	r3, #40	; 0x28
 8007048:	2101      	movs	r1, #1
 800704a:	4618      	mov	r0, r3
 800704c:	f001 fdee 	bl	8008c2c <RCCEx_PLL3_Config>
 8007050:	4603      	mov	r3, r0
 8007052:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007056:	e004      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800705e:	e000      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007062:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10b      	bne.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800706a:	4b6c      	ldr	r3, [pc, #432]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800706c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706e:	f023 0107 	bic.w	r1, r3, #7
 8007072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800707a:	4a68      	ldr	r2, [pc, #416]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800707c:	430b      	orrs	r3, r1
 800707e:	6593      	str	r3, [r2, #88]	; 0x58
 8007080:	e003      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007082:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007086:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800708a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800708e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007092:	f002 0320 	and.w	r3, r2, #32
 8007096:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800709a:	2300      	movs	r3, #0
 800709c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80070a4:	460b      	mov	r3, r1
 80070a6:	4313      	orrs	r3, r2
 80070a8:	d055      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80070aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070b6:	d033      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80070b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070bc:	d82c      	bhi.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80070be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c2:	d02f      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80070c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c8:	d826      	bhi.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80070ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070ce:	d02b      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80070d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070d4:	d820      	bhi.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80070d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070da:	d012      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80070dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070e0:	d81a      	bhi.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d022      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80070e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070ea:	d115      	bne.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070f0:	3308      	adds	r3, #8
 80070f2:	2100      	movs	r1, #0
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 fce7 	bl	8008ac8 <RCCEx_PLL2_Config>
 80070fa:	4603      	mov	r3, r0
 80070fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007100:	e015      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007106:	3328      	adds	r3, #40	; 0x28
 8007108:	2102      	movs	r1, #2
 800710a:	4618      	mov	r0, r3
 800710c:	f001 fd8e 	bl	8008c2c <RCCEx_PLL3_Config>
 8007110:	4603      	mov	r3, r0
 8007112:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007116:	e00a      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800711e:	e006      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007120:	bf00      	nop
 8007122:	e004      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007124:	bf00      	nop
 8007126:	e002      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007128:	bf00      	nop
 800712a:	e000      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800712c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800712e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10b      	bne.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007136:	4b39      	ldr	r3, [pc, #228]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800713a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800713e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007142:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007146:	4a35      	ldr	r2, [pc, #212]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007148:	430b      	orrs	r3, r1
 800714a:	6553      	str	r3, [r2, #84]	; 0x54
 800714c:	e003      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800714e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007152:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007162:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007166:	2300      	movs	r3, #0
 8007168:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800716c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007170:	460b      	mov	r3, r1
 8007172:	4313      	orrs	r3, r2
 8007174:	d058      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800717a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800717e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007182:	d033      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007184:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007188:	d82c      	bhi.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800718a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718e:	d02f      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007194:	d826      	bhi.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007196:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800719a:	d02b      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800719c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071a0:	d820      	bhi.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80071a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071a6:	d012      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80071a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ac:	d81a      	bhi.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d022      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80071b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071b6:	d115      	bne.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071bc:	3308      	adds	r3, #8
 80071be:	2100      	movs	r1, #0
 80071c0:	4618      	mov	r0, r3
 80071c2:	f001 fc81 	bl	8008ac8 <RCCEx_PLL2_Config>
 80071c6:	4603      	mov	r3, r0
 80071c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80071cc:	e015      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071d2:	3328      	adds	r3, #40	; 0x28
 80071d4:	2102      	movs	r1, #2
 80071d6:	4618      	mov	r0, r3
 80071d8:	f001 fd28 	bl	8008c2c <RCCEx_PLL3_Config>
 80071dc:	4603      	mov	r3, r0
 80071de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80071e2:	e00a      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80071ea:	e006      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80071ec:	bf00      	nop
 80071ee:	e004      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80071f0:	bf00      	nop
 80071f2:	e002      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80071f4:	bf00      	nop
 80071f6:	e000      	b.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80071f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10e      	bne.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007202:	4b06      	ldr	r3, [pc, #24]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007206:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800720a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800720e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007212:	4a02      	ldr	r2, [pc, #8]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007214:	430b      	orrs	r3, r1
 8007216:	6593      	str	r3, [r2, #88]	; 0x58
 8007218:	e006      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800721a:	bf00      	nop
 800721c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007220:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007224:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007238:	2300      	movs	r3, #0
 800723a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800723e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007242:	460b      	mov	r3, r1
 8007244:	4313      	orrs	r3, r2
 8007246:	d055      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800724c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007250:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007254:	d033      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007256:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800725a:	d82c      	bhi.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800725c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007260:	d02f      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007266:	d826      	bhi.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007268:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800726c:	d02b      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800726e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007272:	d820      	bhi.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007278:	d012      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800727a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800727e:	d81a      	bhi.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007280:	2b00      	cmp	r3, #0
 8007282:	d022      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007288:	d115      	bne.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800728a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800728e:	3308      	adds	r3, #8
 8007290:	2100      	movs	r1, #0
 8007292:	4618      	mov	r0, r3
 8007294:	f001 fc18 	bl	8008ac8 <RCCEx_PLL2_Config>
 8007298:	4603      	mov	r3, r0
 800729a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800729e:	e015      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072a4:	3328      	adds	r3, #40	; 0x28
 80072a6:	2102      	movs	r1, #2
 80072a8:	4618      	mov	r0, r3
 80072aa:	f001 fcbf 	bl	8008c2c <RCCEx_PLL3_Config>
 80072ae:	4603      	mov	r3, r0
 80072b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80072b4:	e00a      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80072bc:	e006      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80072be:	bf00      	nop
 80072c0:	e004      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80072c2:	bf00      	nop
 80072c4:	e002      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80072c6:	bf00      	nop
 80072c8:	e000      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80072ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10b      	bne.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80072d4:	4ba1      	ldr	r3, [pc, #644]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80072d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80072dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80072e4:	4a9d      	ldr	r2, [pc, #628]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80072e6:	430b      	orrs	r3, r1
 80072e8:	6593      	str	r3, [r2, #88]	; 0x58
 80072ea:	e003      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80072f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80072f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fc:	f002 0308 	and.w	r3, r2, #8
 8007300:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007304:	2300      	movs	r3, #0
 8007306:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800730a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800730e:	460b      	mov	r3, r1
 8007310:	4313      	orrs	r3, r2
 8007312:	d01e      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800731c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007320:	d10c      	bne.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007322:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007326:	3328      	adds	r3, #40	; 0x28
 8007328:	2102      	movs	r1, #2
 800732a:	4618      	mov	r0, r3
 800732c:	f001 fc7e 	bl	8008c2c <RCCEx_PLL3_Config>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800733c:	4b87      	ldr	r3, [pc, #540]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800733e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007340:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800734c:	4a83      	ldr	r2, [pc, #524]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800734e:	430b      	orrs	r3, r1
 8007350:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	f002 0310 	and.w	r3, r2, #16
 800735e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007362:	2300      	movs	r3, #0
 8007364:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007368:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800736c:	460b      	mov	r3, r1
 800736e:	4313      	orrs	r3, r2
 8007370:	d01e      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007376:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800737a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800737e:	d10c      	bne.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007384:	3328      	adds	r3, #40	; 0x28
 8007386:	2102      	movs	r1, #2
 8007388:	4618      	mov	r0, r3
 800738a:	f001 fc4f 	bl	8008c2c <RCCEx_PLL3_Config>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800739a:	4b70      	ldr	r3, [pc, #448]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800739c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800739e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073aa:	4a6c      	ldr	r2, [pc, #432]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80073ac:	430b      	orrs	r3, r1
 80073ae:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80073bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073c0:	2300      	movs	r3, #0
 80073c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80073ca:	460b      	mov	r3, r1
 80073cc:	4313      	orrs	r3, r2
 80073ce:	d03e      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80073d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80073d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073dc:	d022      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80073de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073e2:	d81b      	bhi.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d003      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80073e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ec:	d00b      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80073ee:	e015      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073f4:	3308      	adds	r3, #8
 80073f6:	2100      	movs	r1, #0
 80073f8:	4618      	mov	r0, r3
 80073fa:	f001 fb65 	bl	8008ac8 <RCCEx_PLL2_Config>
 80073fe:	4603      	mov	r3, r0
 8007400:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007404:	e00f      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800740a:	3328      	adds	r3, #40	; 0x28
 800740c:	2102      	movs	r1, #2
 800740e:	4618      	mov	r0, r3
 8007410:	f001 fc0c 	bl	8008c2c <RCCEx_PLL3_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800741a:	e004      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8007422:	e000      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8007424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007426:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10b      	bne.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800742e:	4b4b      	ldr	r3, [pc, #300]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007432:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800743a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800743e:	4a47      	ldr	r2, [pc, #284]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007440:	430b      	orrs	r3, r1
 8007442:	6593      	str	r3, [r2, #88]	; 0x58
 8007444:	e003      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007446:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800744a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800744e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007456:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800745a:	67bb      	str	r3, [r7, #120]	; 0x78
 800745c:	2300      	movs	r3, #0
 800745e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007460:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007464:	460b      	mov	r3, r1
 8007466:	4313      	orrs	r3, r2
 8007468:	d03b      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800746a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800746e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007472:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007476:	d01f      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007478:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800747c:	d818      	bhi.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800747e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007482:	d003      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007484:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007488:	d007      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800748a:	e011      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800748c:	4b33      	ldr	r3, [pc, #204]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800748e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007490:	4a32      	ldr	r2, [pc, #200]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007496:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007498:	e00f      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800749a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800749e:	3328      	adds	r3, #40	; 0x28
 80074a0:	2101      	movs	r1, #1
 80074a2:	4618      	mov	r0, r3
 80074a4:	f001 fbc2 	bl	8008c2c <RCCEx_PLL3_Config>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80074ae:	e004      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80074b6:	e000      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80074b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10b      	bne.n	80074da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074c2:	4b26      	ldr	r3, [pc, #152]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80074c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80074ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d2:	4a22      	ldr	r2, [pc, #136]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80074d4:	430b      	orrs	r3, r1
 80074d6:	6553      	str	r3, [r2, #84]	; 0x54
 80074d8:	e003      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80074de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80074e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80074ee:	673b      	str	r3, [r7, #112]	; 0x70
 80074f0:	2300      	movs	r3, #0
 80074f2:	677b      	str	r3, [r7, #116]	; 0x74
 80074f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80074f8:	460b      	mov	r3, r1
 80074fa:	4313      	orrs	r3, r2
 80074fc:	d034      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80074fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007504:	2b00      	cmp	r3, #0
 8007506:	d003      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800750c:	d007      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800750e:	e011      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007510:	4b12      	ldr	r3, [pc, #72]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	4a11      	ldr	r2, [pc, #68]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800751a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800751c:	e00e      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800751e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007522:	3308      	adds	r3, #8
 8007524:	2102      	movs	r1, #2
 8007526:	4618      	mov	r0, r3
 8007528:	f001 face 	bl	8008ac8 <RCCEx_PLL2_Config>
 800752c:	4603      	mov	r3, r0
 800752e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007532:	e003      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800753a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800753c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10d      	bne.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007544:	4b05      	ldr	r3, [pc, #20]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007548:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800754c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007552:	4a02      	ldr	r2, [pc, #8]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007554:	430b      	orrs	r3, r1
 8007556:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007558:	e006      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800755a:	bf00      	nop
 800755c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007560:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007564:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007568:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800756c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007570:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007574:	66bb      	str	r3, [r7, #104]	; 0x68
 8007576:	2300      	movs	r3, #0
 8007578:	66fb      	str	r3, [r7, #108]	; 0x6c
 800757a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800757e:	460b      	mov	r3, r1
 8007580:	4313      	orrs	r3, r2
 8007582:	d00c      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007588:	3328      	adds	r3, #40	; 0x28
 800758a:	2102      	movs	r1, #2
 800758c:	4618      	mov	r0, r3
 800758e:	f001 fb4d 	bl	8008c2c <RCCEx_PLL3_Config>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800759e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80075aa:	663b      	str	r3, [r7, #96]	; 0x60
 80075ac:	2300      	movs	r3, #0
 80075ae:	667b      	str	r3, [r7, #100]	; 0x64
 80075b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80075b4:	460b      	mov	r3, r1
 80075b6:	4313      	orrs	r3, r2
 80075b8:	d038      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80075ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075c6:	d018      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80075c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075cc:	d811      	bhi.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80075ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075d2:	d014      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80075d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075d8:	d80b      	bhi.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d011      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80075de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e2:	d106      	bne.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075e4:	4bc3      	ldr	r3, [pc, #780]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e8:	4ac2      	ldr	r2, [pc, #776]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80075ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80075f0:	e008      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80075f8:	e004      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80075fa:	bf00      	nop
 80075fc:	e002      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80075fe:	bf00      	nop
 8007600:	e000      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8007602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007604:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10b      	bne.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800760c:	4bb9      	ldr	r3, [pc, #740]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800760e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007610:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800761c:	4ab5      	ldr	r2, [pc, #724]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800761e:	430b      	orrs	r3, r1
 8007620:	6553      	str	r3, [r2, #84]	; 0x54
 8007622:	e003      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007624:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007628:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800762c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007634:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007638:	65bb      	str	r3, [r7, #88]	; 0x58
 800763a:	2300      	movs	r3, #0
 800763c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800763e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007642:	460b      	mov	r3, r1
 8007644:	4313      	orrs	r3, r2
 8007646:	d009      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007648:	4baa      	ldr	r3, [pc, #680]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800764a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007650:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007656:	4aa7      	ldr	r2, [pc, #668]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007658:	430b      	orrs	r3, r1
 800765a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800765c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007664:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007668:	653b      	str	r3, [r7, #80]	; 0x50
 800766a:	2300      	movs	r3, #0
 800766c:	657b      	str	r3, [r7, #84]	; 0x54
 800766e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007672:	460b      	mov	r3, r1
 8007674:	4313      	orrs	r3, r2
 8007676:	d009      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007678:	4b9e      	ldr	r3, [pc, #632]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800767a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007686:	4a9b      	ldr	r2, [pc, #620]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007688:	430b      	orrs	r3, r1
 800768a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800768c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007694:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007698:	64bb      	str	r3, [r7, #72]	; 0x48
 800769a:	2300      	movs	r3, #0
 800769c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800769e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80076a2:	460b      	mov	r3, r1
 80076a4:	4313      	orrs	r3, r2
 80076a6:	d009      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80076a8:	4b92      	ldr	r3, [pc, #584]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ac:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80076b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b6:	4a8f      	ldr	r2, [pc, #572]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076b8:	430b      	orrs	r3, r1
 80076ba:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80076bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80076c8:	643b      	str	r3, [r7, #64]	; 0x40
 80076ca:	2300      	movs	r3, #0
 80076cc:	647b      	str	r3, [r7, #68]	; 0x44
 80076ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80076d2:	460b      	mov	r3, r1
 80076d4:	4313      	orrs	r3, r2
 80076d6:	d00e      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076d8:	4b86      	ldr	r3, [pc, #536]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	4a85      	ldr	r2, [pc, #532]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076e2:	6113      	str	r3, [r2, #16]
 80076e4:	4b83      	ldr	r3, [pc, #524]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076e6:	6919      	ldr	r1, [r3, #16]
 80076e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80076f0:	4a80      	ldr	r2, [pc, #512]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80076f2:	430b      	orrs	r3, r1
 80076f4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80076f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fe:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007702:	63bb      	str	r3, [r7, #56]	; 0x38
 8007704:	2300      	movs	r3, #0
 8007706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007708:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800770c:	460b      	mov	r3, r1
 800770e:	4313      	orrs	r3, r2
 8007710:	d009      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007712:	4b78      	ldr	r3, [pc, #480]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007716:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800771a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800771e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007720:	4a74      	ldr	r2, [pc, #464]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007722:	430b      	orrs	r3, r1
 8007724:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007732:	633b      	str	r3, [r7, #48]	; 0x30
 8007734:	2300      	movs	r3, #0
 8007736:	637b      	str	r3, [r7, #52]	; 0x34
 8007738:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800773c:	460b      	mov	r3, r1
 800773e:	4313      	orrs	r3, r2
 8007740:	d00a      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007742:	4b6c      	ldr	r3, [pc, #432]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007746:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800774a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800774e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007752:	4a68      	ldr	r2, [pc, #416]	; (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8007754:	430b      	orrs	r3, r1
 8007756:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	2100      	movs	r1, #0
 8007762:	62b9      	str	r1, [r7, #40]	; 0x28
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800776a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800776e:	460b      	mov	r3, r1
 8007770:	4313      	orrs	r3, r2
 8007772:	d011      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007778:	3308      	adds	r3, #8
 800777a:	2100      	movs	r1, #0
 800777c:	4618      	mov	r0, r3
 800777e:	f001 f9a3 	bl	8008ac8 <RCCEx_PLL2_Config>
 8007782:	4603      	mov	r3, r0
 8007784:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007788:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007790:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007794:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800779c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a0:	2100      	movs	r1, #0
 80077a2:	6239      	str	r1, [r7, #32]
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24
 80077aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80077ae:	460b      	mov	r3, r1
 80077b0:	4313      	orrs	r3, r2
 80077b2:	d011      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077b8:	3308      	adds	r3, #8
 80077ba:	2101      	movs	r1, #1
 80077bc:	4618      	mov	r0, r3
 80077be:	f001 f983 	bl	8008ac8 <RCCEx_PLL2_Config>
 80077c2:	4603      	mov	r3, r0
 80077c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80077c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80077d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80077d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	2100      	movs	r1, #0
 80077e2:	61b9      	str	r1, [r7, #24]
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	61fb      	str	r3, [r7, #28]
 80077ea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80077ee:	460b      	mov	r3, r1
 80077f0:	4313      	orrs	r3, r2
 80077f2:	d011      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077f8:	3308      	adds	r3, #8
 80077fa:	2102      	movs	r1, #2
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 f963 	bl	8008ac8 <RCCEx_PLL2_Config>
 8007802:	4603      	mov	r3, r0
 8007804:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007808:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007810:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007814:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800781c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007820:	2100      	movs	r1, #0
 8007822:	6139      	str	r1, [r7, #16]
 8007824:	f003 0308 	and.w	r3, r3, #8
 8007828:	617b      	str	r3, [r7, #20]
 800782a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800782e:	460b      	mov	r3, r1
 8007830:	4313      	orrs	r3, r2
 8007832:	d011      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007838:	3328      	adds	r3, #40	; 0x28
 800783a:	2100      	movs	r1, #0
 800783c:	4618      	mov	r0, r3
 800783e:	f001 f9f5 	bl	8008c2c <RCCEx_PLL3_Config>
 8007842:	4603      	mov	r3, r0
 8007844:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8007848:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007850:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007854:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800785c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007860:	2100      	movs	r1, #0
 8007862:	60b9      	str	r1, [r7, #8]
 8007864:	f003 0310 	and.w	r3, r3, #16
 8007868:	60fb      	str	r3, [r7, #12]
 800786a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800786e:	460b      	mov	r3, r1
 8007870:	4313      	orrs	r3, r2
 8007872:	d011      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007878:	3328      	adds	r3, #40	; 0x28
 800787a:	2101      	movs	r1, #1
 800787c:	4618      	mov	r0, r3
 800787e:	f001 f9d5 	bl	8008c2c <RCCEx_PLL3_Config>
 8007882:	4603      	mov	r3, r0
 8007884:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007888:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007890:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007894:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	2100      	movs	r1, #0
 80078a2:	6039      	str	r1, [r7, #0]
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	607b      	str	r3, [r7, #4]
 80078aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80078ae:	460b      	mov	r3, r1
 80078b0:	4313      	orrs	r3, r2
 80078b2:	d011      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078b8:	3328      	adds	r3, #40	; 0x28
 80078ba:	2102      	movs	r1, #2
 80078bc:	4618      	mov	r0, r3
 80078be:	f001 f9b5 	bl	8008c2c <RCCEx_PLL3_Config>
 80078c2:	4603      	mov	r3, r0
 80078c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80078c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80078d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80078d8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	e000      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80078ec:	46bd      	mov	sp, r7
 80078ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078f2:	bf00      	nop
 80078f4:	58024400 	.word	0x58024400

080078f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b090      	sub	sp, #64	; 0x40
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007902:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007906:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800790a:	430b      	orrs	r3, r1
 800790c:	f040 8094 	bne.w	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007910:	4b97      	ldr	r3, [pc, #604]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007914:	f003 0307 	and.w	r3, r3, #7
 8007918:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791c:	2b04      	cmp	r3, #4
 800791e:	f200 8087 	bhi.w	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007922:	a201      	add	r2, pc, #4	; (adr r2, 8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007928:	0800793d 	.word	0x0800793d
 800792c:	08007965 	.word	0x08007965
 8007930:	0800798d 	.word	0x0800798d
 8007934:	08007a29 	.word	0x08007a29
 8007938:	080079b5 	.word	0x080079b5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800793c:	4b8c      	ldr	r3, [pc, #560]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007944:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007948:	d108      	bne.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800794a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800794e:	4618      	mov	r0, r3
 8007950:	f000 ff68 	bl	8008824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007956:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007958:	f000 bc97 	b.w	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007960:	f000 bc93 	b.w	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007964:	4b82      	ldr	r3, [pc, #520]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800796c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007970:	d108      	bne.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007972:	f107 0318 	add.w	r3, r7, #24
 8007976:	4618      	mov	r0, r3
 8007978:	f000 fcac 	bl	80082d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007980:	f000 bc83 	b.w	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007984:	2300      	movs	r3, #0
 8007986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007988:	f000 bc7f 	b.w	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800798c:	4b78      	ldr	r3, [pc, #480]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007998:	d108      	bne.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800799a:	f107 030c 	add.w	r3, r7, #12
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 fdec 	bl	800857c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079a8:	f000 bc6f 	b.w	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079b0:	f000 bc6b 	b.w	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079b4:	4b6e      	ldr	r3, [pc, #440]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80079b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079be:	4b6c      	ldr	r3, [pc, #432]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0304 	and.w	r3, r3, #4
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	d10c      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80079ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d109      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079d0:	4b67      	ldr	r3, [pc, #412]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	08db      	lsrs	r3, r3, #3
 80079d6:	f003 0303 	and.w	r3, r3, #3
 80079da:	4a66      	ldr	r2, [pc, #408]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80079dc:	fa22 f303 	lsr.w	r3, r2, r3
 80079e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079e2:	e01f      	b.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079e4:	4b62      	ldr	r3, [pc, #392]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f0:	d106      	bne.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80079f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079f8:	d102      	bne.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80079fa:	4b5f      	ldr	r3, [pc, #380]	; (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80079fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079fe:	e011      	b.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a00:	4b5b      	ldr	r3, [pc, #364]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a0c:	d106      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a14:	d102      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a16:	4b59      	ldr	r3, [pc, #356]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a1a:	e003      	b.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007a20:	f000 bc33 	b.w	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007a24:	f000 bc31 	b.w	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a28:	4b55      	ldr	r3, [pc, #340]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a2c:	f000 bc2d 	b.w	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007a30:	2300      	movs	r3, #0
 8007a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a34:	f000 bc29 	b.w	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a3c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007a40:	430b      	orrs	r3, r1
 8007a42:	f040 809f 	bne.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8007a46:	4b4a      	ldr	r3, [pc, #296]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007a4e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a56:	d04d      	beq.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a5e:	f200 8084 	bhi.w	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	2bc0      	cmp	r3, #192	; 0xc0
 8007a66:	d07d      	beq.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8007a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a6c:	d87d      	bhi.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	2b80      	cmp	r3, #128	; 0x80
 8007a72:	d02d      	beq.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	2b80      	cmp	r3, #128	; 0x80
 8007a78:	d877      	bhi.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d003      	beq.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	2b40      	cmp	r3, #64	; 0x40
 8007a84:	d012      	beq.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007a86:	e070      	b.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a88:	4b39      	ldr	r3, [pc, #228]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a94:	d107      	bne.n	8007aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fec2 	bl	8008824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aa4:	e3f1      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007aaa:	e3ee      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007aac:	4b30      	ldr	r3, [pc, #192]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ab4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ab8:	d107      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aba:	f107 0318 	add.w	r3, r7, #24
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 fc08 	bl	80082d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ac8:	e3df      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007aca:	2300      	movs	r3, #0
 8007acc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ace:	e3dc      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ad0:	4b27      	ldr	r3, [pc, #156]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007adc:	d107      	bne.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ade:	f107 030c 	add.w	r3, r7, #12
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 fd4a 	bl	800857c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aec:	e3cd      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007af2:	e3ca      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007af4:	4b1e      	ldr	r3, [pc, #120]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007af8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007afc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007afe:	4b1c      	ldr	r3, [pc, #112]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0304 	and.w	r3, r3, #4
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	d10c      	bne.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8007b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d109      	bne.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b10:	4b17      	ldr	r3, [pc, #92]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	08db      	lsrs	r3, r3, #3
 8007b16:	f003 0303 	and.w	r3, r3, #3
 8007b1a:	4a16      	ldr	r2, [pc, #88]	; (8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b22:	e01e      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b24:	4b12      	ldr	r3, [pc, #72]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b30:	d106      	bne.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8007b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b38:	d102      	bne.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b3a:	4b0f      	ldr	r3, [pc, #60]	; (8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b3e:	e010      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b40:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b4c:	d106      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b54:	d102      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b56:	4b09      	ldr	r3, [pc, #36]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007b58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b5a:	e002      	b.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007b60:	e393      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007b62:	e392      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b64:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b68:	e38f      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b6e:	e38c      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007b70:	58024400 	.word	0x58024400
 8007b74:	03d09000 	.word	0x03d09000
 8007b78:	003d0900 	.word	0x003d0900
 8007b7c:	007a1200 	.word	0x007a1200
 8007b80:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b88:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007b8c:	430b      	orrs	r3, r1
 8007b8e:	f040 809c 	bne.w	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8007b92:	4b9e      	ldr	r3, [pc, #632]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b96:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007b9a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ba2:	d054      	beq.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007baa:	f200 808b 	bhi.w	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007bb4:	f000 8083 	beq.w	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007bbe:	f200 8081 	bhi.w	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bc8:	d02f      	beq.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bd0:	d878      	bhi.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d004      	beq.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bde:	d012      	beq.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8007be0:	e070      	b.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007be2:	4b8a      	ldr	r3, [pc, #552]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bee:	d107      	bne.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f000 fe15 	bl	8008824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bfe:	e344      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007c00:	2300      	movs	r3, #0
 8007c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c04:	e341      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c06:	4b81      	ldr	r3, [pc, #516]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c12:	d107      	bne.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c14:	f107 0318 	add.w	r3, r7, #24
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 fb5b 	bl	80082d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c22:	e332      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007c24:	2300      	movs	r3, #0
 8007c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c28:	e32f      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c2a:	4b78      	ldr	r3, [pc, #480]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c36:	d107      	bne.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c38:	f107 030c 	add.w	r3, r7, #12
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 fc9d 	bl	800857c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c46:	e320      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c4c:	e31d      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c4e:	4b6f      	ldr	r3, [pc, #444]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c56:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c58:	4b6c      	ldr	r3, [pc, #432]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	d10c      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8007c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d109      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c6a:	4b68      	ldr	r3, [pc, #416]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	08db      	lsrs	r3, r3, #3
 8007c70:	f003 0303 	and.w	r3, r3, #3
 8007c74:	4a66      	ldr	r2, [pc, #408]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8007c76:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c7c:	e01e      	b.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c7e:	4b63      	ldr	r3, [pc, #396]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c8a:	d106      	bne.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c92:	d102      	bne.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c94:	4b5f      	ldr	r3, [pc, #380]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c98:	e010      	b.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c9a:	4b5c      	ldr	r3, [pc, #368]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ca6:	d106      	bne.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cae:	d102      	bne.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007cb0:	4b59      	ldr	r3, [pc, #356]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8007cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cb4:	e002      	b.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8007cba:	e2e6      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007cbc:	e2e5      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007cbe:	4b57      	ldr	r3, [pc, #348]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cc2:	e2e2      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cc8:	e2df      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cce:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007cd2:	430b      	orrs	r3, r1
 8007cd4:	f040 80a7 	bne.w	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007cd8:	4b4c      	ldr	r3, [pc, #304]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cdc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007ce0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ce8:	d055      	beq.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8007cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cf0:	f200 8096 	bhi.w	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cfa:	f000 8084 	beq.w	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d04:	f200 808c 	bhi.w	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d0e:	d030      	beq.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d16:	f200 8083 	bhi.w	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d004      	beq.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d26:	d012      	beq.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8007d28:	e07a      	b.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d2a:	4b38      	ldr	r3, [pc, #224]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d36:	d107      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 fd71 	bl	8008824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d46:	e2a0      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d4c:	e29d      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d4e:	4b2f      	ldr	r3, [pc, #188]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d5a:	d107      	bne.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d5c:	f107 0318 	add.w	r3, r7, #24
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 fab7 	bl	80082d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d6a:	e28e      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d70:	e28b      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d72:	4b26      	ldr	r3, [pc, #152]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d7e:	d107      	bne.n	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d80:	f107 030c 	add.w	r3, r7, #12
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 fbf9 	bl	800857c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d8e:	e27c      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007d90:	2300      	movs	r3, #0
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d94:	e279      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d96:	4b1d      	ldr	r3, [pc, #116]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d9e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007da0:	4b1a      	ldr	r3, [pc, #104]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	2b04      	cmp	r3, #4
 8007daa:	d10c      	bne.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8007dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d109      	bne.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007db2:	4b16      	ldr	r3, [pc, #88]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	08db      	lsrs	r3, r3, #3
 8007db8:	f003 0303 	and.w	r3, r3, #3
 8007dbc:	4a14      	ldr	r2, [pc, #80]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8007dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dc4:	e01e      	b.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dc6:	4b11      	ldr	r3, [pc, #68]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dd2:	d106      	bne.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dda:	d102      	bne.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ddc:	4b0d      	ldr	r3, [pc, #52]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007de0:	e010      	b.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007de2:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dee:	d106      	bne.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007df6:	d102      	bne.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007df8:	4b07      	ldr	r3, [pc, #28]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8007dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dfc:	e002      	b.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007e02:	e242      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007e04:	e241      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e06:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007e08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e0a:	e23e      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8007e0c:	58024400 	.word	0x58024400
 8007e10:	03d09000 	.word	0x03d09000
 8007e14:	003d0900 	.word	0x003d0900
 8007e18:	007a1200 	.word	0x007a1200
 8007e1c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007e20:	2300      	movs	r3, #0
 8007e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e24:	e231      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e2a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007e2e:	430b      	orrs	r3, r1
 8007e30:	f040 8085 	bne.w	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007e34:	4b9c      	ldr	r3, [pc, #624]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e38:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007e3c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e44:	d06b      	beq.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e4c:	d874      	bhi.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e54:	d056      	beq.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8007e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e5c:	d86c      	bhi.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e64:	d03b      	beq.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8007e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e6c:	d864      	bhi.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e74:	d021      	beq.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e7c:	d85c      	bhi.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8007e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e8a:	d004      	beq.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8007e8c:	e054      	b.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007e8e:	f7fe fb49 	bl	8006524 <HAL_RCC_GetPCLK1Freq>
 8007e92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e94:	e1f9      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e96:	4b84      	ldr	r3, [pc, #528]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ea2:	d107      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea4:	f107 0318 	add.w	r3, r7, #24
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 fa13 	bl	80082d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eb2:	e1ea      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb8:	e1e7      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007eba:	4b7b      	ldr	r3, [pc, #492]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ec6:	d107      	bne.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ec8:	f107 030c 	add.w	r3, r7, #12
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fb55 	bl	800857c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ed6:	e1d8      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007edc:	e1d5      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ede:	4b72      	ldr	r3, [pc, #456]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0304 	and.w	r3, r3, #4
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	d109      	bne.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007eea:	4b6f      	ldr	r3, [pc, #444]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	08db      	lsrs	r3, r3, #3
 8007ef0:	f003 0303 	and.w	r3, r3, #3
 8007ef4:	4a6d      	ldr	r2, [pc, #436]	; (80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8007efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007efc:	e1c5      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007efe:	2300      	movs	r3, #0
 8007f00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f02:	e1c2      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007f04:	4b68      	ldr	r3, [pc, #416]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f10:	d102      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8007f12:	4b67      	ldr	r3, [pc, #412]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f16:	e1b8      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f1c:	e1b5      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f1e:	4b62      	ldr	r3, [pc, #392]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f2a:	d102      	bne.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8007f2c:	4b61      	ldr	r3, [pc, #388]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f30:	e1ab      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f32:	2300      	movs	r3, #0
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f36:	e1a8      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f3c:	e1a5      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f42:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007f46:	430b      	orrs	r3, r1
 8007f48:	d173      	bne.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007f4a:	4b57      	ldr	r3, [pc, #348]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f52:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f5a:	d02f      	beq.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f62:	d863      	bhi.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d004      	beq.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f70:	d012      	beq.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8007f72:	e05b      	b.n	800802c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f74:	4b4c      	ldr	r3, [pc, #304]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f80:	d107      	bne.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f82:	f107 0318 	add.w	r3, r7, #24
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 f9a4 	bl	80082d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f90:	e17b      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f96:	e178      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f98:	4b43      	ldr	r3, [pc, #268]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fa4:	d107      	bne.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fa6:	f107 030c 	add.w	r3, r7, #12
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fae6 	bl	800857c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fb4:	e169      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fba:	e166      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fbc:	4b3a      	ldr	r3, [pc, #232]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fc4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fc6:	4b38      	ldr	r3, [pc, #224]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0304 	and.w	r3, r3, #4
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d10c      	bne.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8007fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d109      	bne.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fd8:	4b33      	ldr	r3, [pc, #204]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	08db      	lsrs	r3, r3, #3
 8007fde:	f003 0303 	and.w	r3, r3, #3
 8007fe2:	4a32      	ldr	r2, [pc, #200]	; (80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fea:	e01e      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fec:	4b2e      	ldr	r3, [pc, #184]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ff8:	d106      	bne.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008000:	d102      	bne.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008002:	4b2b      	ldr	r3, [pc, #172]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008006:	e010      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008008:	4b27      	ldr	r3, [pc, #156]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008014:	d106      	bne.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8008016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800801c:	d102      	bne.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800801e:	4b25      	ldr	r3, [pc, #148]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008022:	e002      	b.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008028:	e12f      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800802a:	e12e      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008030:	e12b      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008036:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800803a:	430b      	orrs	r3, r1
 800803c:	d13c      	bne.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800803e:	4b1a      	ldr	r3, [pc, #104]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008046:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804a:	2b00      	cmp	r3, #0
 800804c:	d004      	beq.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008054:	d012      	beq.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8008056:	e023      	b.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008058:	4b13      	ldr	r3, [pc, #76]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008060:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008064:	d107      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fbda 	bl	8008824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008074:	e109      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800807a:	e106      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800807c:	4b0a      	ldr	r3, [pc, #40]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008084:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008088:	d107      	bne.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800808a:	f107 0318 	add.w	r3, r7, #24
 800808e:	4618      	mov	r0, r3
 8008090:	f000 f920 	bl	80082d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008098:	e0f7      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800809a:	2300      	movs	r3, #0
 800809c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800809e:	e0f4      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080a4:	e0f1      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80080a6:	bf00      	nop
 80080a8:	58024400 	.word	0x58024400
 80080ac:	03d09000 	.word	0x03d09000
 80080b0:	003d0900 	.word	0x003d0900
 80080b4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80080b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080bc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80080c0:	430b      	orrs	r3, r1
 80080c2:	f040 8091 	bne.w	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80080c6:	4b73      	ldr	r3, [pc, #460]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80080c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ca:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80080ce:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80080d6:	f000 8081 	beq.w	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80080da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080dc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80080e0:	d87f      	bhi.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80080e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080e8:	d06b      	beq.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80080ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080f0:	d877      	bhi.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80080f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f8:	d056      	beq.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80080fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008100:	d86f      	bhi.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008104:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008108:	d03b      	beq.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800810a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008110:	d867      	bhi.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008118:	d021      	beq.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800811a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008120:	d85f      	bhi.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008124:	2b00      	cmp	r3, #0
 8008126:	d004      	beq.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800812e:	d004      	beq.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8008130:	e057      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008132:	f000 f8b9 	bl	80082a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008136:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008138:	e0a7      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800813a:	4b56      	ldr	r3, [pc, #344]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008146:	d107      	bne.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008148:	f107 0318 	add.w	r3, r7, #24
 800814c:	4618      	mov	r0, r3
 800814e:	f000 f8c1 	bl	80082d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008156:	e098      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800815c:	e095      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800815e:	4b4d      	ldr	r3, [pc, #308]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800816a:	d107      	bne.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800816c:	f107 030c 	add.w	r3, r7, #12
 8008170:	4618      	mov	r0, r3
 8008172:	f000 fa03 	bl	800857c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800817a:	e086      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800817c:	2300      	movs	r3, #0
 800817e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008180:	e083      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008182:	4b44      	ldr	r3, [pc, #272]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0304 	and.w	r3, r3, #4
 800818a:	2b04      	cmp	r3, #4
 800818c:	d109      	bne.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800818e:	4b41      	ldr	r3, [pc, #260]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	08db      	lsrs	r3, r3, #3
 8008194:	f003 0303 	and.w	r3, r3, #3
 8008198:	4a3f      	ldr	r2, [pc, #252]	; (8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800819a:	fa22 f303 	lsr.w	r3, r2, r3
 800819e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081a0:	e073      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80081a2:	2300      	movs	r3, #0
 80081a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081a6:	e070      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80081a8:	4b3a      	ldr	r3, [pc, #232]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081b4:	d102      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80081b6:	4b39      	ldr	r3, [pc, #228]	; (800829c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80081b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081ba:	e066      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081c0:	e063      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80081c2:	4b34      	ldr	r3, [pc, #208]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ce:	d102      	bne.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 80081d0:	4b33      	ldr	r3, [pc, #204]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80081d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081d4:	e059      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80081d6:	2300      	movs	r3, #0
 80081d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081da:	e056      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081dc:	4b31      	ldr	r3, [pc, #196]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80081de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e0:	e053      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e6:	e050      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80081e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ec:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80081f0:	430b      	orrs	r3, r1
 80081f2:	d148      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80081f4:	4b27      	ldr	r3, [pc, #156]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80081f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80081fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008204:	d02a      	beq.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800820c:	d838      	bhi.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800820e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8008214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800821a:	d00d      	beq.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800821c:	e030      	b.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800821e:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008226:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800822a:	d102      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800822c:	4b1c      	ldr	r3, [pc, #112]	; (80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800822e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008230:	e02b      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008236:	e028      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008238:	4b16      	ldr	r3, [pc, #88]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008240:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008244:	d107      	bne.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800824a:	4618      	mov	r0, r3
 800824c:	f000 faea 	bl	8008824 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008254:	e019      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008256:	2300      	movs	r3, #0
 8008258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800825a:	e016      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800825c:	4b0d      	ldr	r3, [pc, #52]	; (8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008268:	d107      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800826a:	f107 0318 	add.w	r3, r7, #24
 800826e:	4618      	mov	r0, r3
 8008270:	f000 f830 	bl	80082d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008278:	e007      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800827e:	e004      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008284:	e001      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8008286:	2300      	movs	r3, #0
 8008288:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800828a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800828c:	4618      	mov	r0, r3
 800828e:	3740      	adds	r7, #64	; 0x40
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	58024400 	.word	0x58024400
 8008298:	03d09000 	.word	0x03d09000
 800829c:	003d0900 	.word	0x003d0900
 80082a0:	007a1200 	.word	0x007a1200
 80082a4:	00bb8000 	.word	0x00bb8000

080082a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80082ac:	f7fe f90a 	bl	80064c4 <HAL_RCC_GetHCLKFreq>
 80082b0:	4602      	mov	r2, r0
 80082b2:	4b06      	ldr	r3, [pc, #24]	; (80082cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	091b      	lsrs	r3, r3, #4
 80082b8:	f003 0307 	and.w	r3, r3, #7
 80082bc:	4904      	ldr	r1, [pc, #16]	; (80082d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80082be:	5ccb      	ldrb	r3, [r1, r3]
 80082c0:	f003 031f 	and.w	r3, r3, #31
 80082c4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	58024400 	.word	0x58024400
 80082d0:	0800faf8 	.word	0x0800faf8

080082d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b089      	sub	sp, #36	; 0x24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082dc:	4ba1      	ldr	r3, [pc, #644]	; (8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e0:	f003 0303 	and.w	r3, r3, #3
 80082e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80082e6:	4b9f      	ldr	r3, [pc, #636]	; (8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	0b1b      	lsrs	r3, r3, #12
 80082ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80082f2:	4b9c      	ldr	r3, [pc, #624]	; (8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f6:	091b      	lsrs	r3, r3, #4
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80082fe:	4b99      	ldr	r3, [pc, #612]	; (8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008302:	08db      	lsrs	r3, r3, #3
 8008304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	fb02 f303 	mul.w	r3, r2, r3
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008316:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 8111 	beq.w	8008544 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	2b02      	cmp	r3, #2
 8008326:	f000 8083 	beq.w	8008430 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	2b02      	cmp	r3, #2
 800832e:	f200 80a1 	bhi.w	8008474 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d003      	beq.n	8008340 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d056      	beq.n	80083ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800833e:	e099      	b.n	8008474 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008340:	4b88      	ldr	r3, [pc, #544]	; (8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0320 	and.w	r3, r3, #32
 8008348:	2b00      	cmp	r3, #0
 800834a:	d02d      	beq.n	80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800834c:	4b85      	ldr	r3, [pc, #532]	; (8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	08db      	lsrs	r3, r3, #3
 8008352:	f003 0303 	and.w	r3, r3, #3
 8008356:	4a84      	ldr	r2, [pc, #528]	; (8008568 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008358:	fa22 f303 	lsr.w	r3, r2, r3
 800835c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	ee07 3a90 	vmov	s15, r3
 8008364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	ee07 3a90 	vmov	s15, r3
 800836e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008376:	4b7b      	ldr	r3, [pc, #492]	; (8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800837e:	ee07 3a90 	vmov	s15, r3
 8008382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008386:	ed97 6a03 	vldr	s12, [r7, #12]
 800838a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800856c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800838e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800839a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800839e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80083a6:	e087      	b.n	80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	ee07 3a90 	vmov	s15, r3
 80083ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80083b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ba:	4b6a      	ldr	r3, [pc, #424]	; (8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c2:	ee07 3a90 	vmov	s15, r3
 80083c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800856c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083ea:	e065      	b.n	80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	ee07 3a90 	vmov	s15, r3
 80083f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083fe:	4b59      	ldr	r3, [pc, #356]	; (8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008406:	ee07 3a90 	vmov	s15, r3
 800840a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800840e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008412:	eddf 5a56 	vldr	s11, [pc, #344]	; 800856c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800841a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800841e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800842a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800842e:	e043      	b.n	80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	ee07 3a90 	vmov	s15, r3
 8008436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800843e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008442:	4b48      	ldr	r3, [pc, #288]	; (8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800844a:	ee07 3a90 	vmov	s15, r3
 800844e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008452:	ed97 6a03 	vldr	s12, [r7, #12]
 8008456:	eddf 5a45 	vldr	s11, [pc, #276]	; 800856c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800845a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800845e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800846a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800846e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008472:	e021      	b.n	80084b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	ee07 3a90 	vmov	s15, r3
 800847a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008486:	4b37      	ldr	r3, [pc, #220]	; (8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800848e:	ee07 3a90 	vmov	s15, r3
 8008492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008496:	ed97 6a03 	vldr	s12, [r7, #12]
 800849a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800856c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800849e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80084b8:	4b2a      	ldr	r3, [pc, #168]	; (8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	0a5b      	lsrs	r3, r3, #9
 80084be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80084d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084de:	ee17 2a90 	vmov	r2, s15
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80084e6:	4b1f      	ldr	r3, [pc, #124]	; (8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ea:	0c1b      	lsrs	r3, r3, #16
 80084ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f0:	ee07 3a90 	vmov	s15, r3
 80084f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008500:	edd7 6a07 	vldr	s13, [r7, #28]
 8008504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800850c:	ee17 2a90 	vmov	r2, s15
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008514:	4b13      	ldr	r3, [pc, #76]	; (8008564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	0e1b      	lsrs	r3, r3, #24
 800851a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800851e:	ee07 3a90 	vmov	s15, r3
 8008522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800852a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800852e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800853a:	ee17 2a90 	vmov	r2, s15
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008542:	e008      	b.n	8008556 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	609a      	str	r2, [r3, #8]
}
 8008556:	bf00      	nop
 8008558:	3724      	adds	r7, #36	; 0x24
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	58024400 	.word	0x58024400
 8008568:	03d09000 	.word	0x03d09000
 800856c:	46000000 	.word	0x46000000
 8008570:	4c742400 	.word	0x4c742400
 8008574:	4a742400 	.word	0x4a742400
 8008578:	4af42400 	.word	0x4af42400

0800857c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800857c:	b480      	push	{r7}
 800857e:	b089      	sub	sp, #36	; 0x24
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008584:	4ba1      	ldr	r3, [pc, #644]	; (800880c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008588:	f003 0303 	and.w	r3, r3, #3
 800858c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800858e:	4b9f      	ldr	r3, [pc, #636]	; (800880c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008592:	0d1b      	lsrs	r3, r3, #20
 8008594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008598:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800859a:	4b9c      	ldr	r3, [pc, #624]	; (800880c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800859c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859e:	0a1b      	lsrs	r3, r3, #8
 80085a0:	f003 0301 	and.w	r3, r3, #1
 80085a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80085a6:	4b99      	ldr	r3, [pc, #612]	; (800880c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085aa:	08db      	lsrs	r3, r3, #3
 80085ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	fb02 f303 	mul.w	r3, r2, r3
 80085b6:	ee07 3a90 	vmov	s15, r3
 80085ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f000 8111 	beq.w	80087ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	f000 8083 	beq.w	80086d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	f200 80a1 	bhi.w	800871c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d003      	beq.n	80085e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d056      	beq.n	8008694 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80085e6:	e099      	b.n	800871c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085e8:	4b88      	ldr	r3, [pc, #544]	; (800880c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0320 	and.w	r3, r3, #32
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d02d      	beq.n	8008650 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085f4:	4b85      	ldr	r3, [pc, #532]	; (800880c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	08db      	lsrs	r3, r3, #3
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	4a84      	ldr	r2, [pc, #528]	; (8008810 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008600:	fa22 f303 	lsr.w	r3, r2, r3
 8008604:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	ee07 3a90 	vmov	s15, r3
 800860c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800861a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800861e:	4b7b      	ldr	r3, [pc, #492]	; (800880c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800862e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008632:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800863a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800863e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800864a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800864e:	e087      	b.n	8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	ee07 3a90 	vmov	s15, r3
 8008656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800865a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800865e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008662:	4b6a      	ldr	r3, [pc, #424]	; (800880c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008672:	ed97 6a03 	vldr	s12, [r7, #12]
 8008676:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800867a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800867e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800868a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800868e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008692:	e065      	b.n	8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	ee07 3a90 	vmov	s15, r3
 800869a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800881c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086a6:	4b59      	ldr	r3, [pc, #356]	; (800880c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ae:	ee07 3a90 	vmov	s15, r3
 80086b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086d6:	e043      	b.n	8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80086e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ea:	4b48      	ldr	r3, [pc, #288]	; (800880c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f2:	ee07 3a90 	vmov	s15, r3
 80086f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80086fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800870a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800870e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800871a:	e021      	b.n	8008760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	ee07 3a90 	vmov	s15, r3
 8008722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008726:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800881c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800872a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800872e:	4b37      	ldr	r3, [pc, #220]	; (800880c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008736:	ee07 3a90 	vmov	s15, r3
 800873a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800873e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008742:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800874a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800874e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800875a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800875e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008760:	4b2a      	ldr	r3, [pc, #168]	; (800880c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008764:	0a5b      	lsrs	r3, r3, #9
 8008766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800876a:	ee07 3a90 	vmov	s15, r3
 800876e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800877a:	edd7 6a07 	vldr	s13, [r7, #28]
 800877e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008786:	ee17 2a90 	vmov	r2, s15
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800878e:	4b1f      	ldr	r3, [pc, #124]	; (800880c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008792:	0c1b      	lsrs	r3, r3, #16
 8008794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008798:	ee07 3a90 	vmov	s15, r3
 800879c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80087ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087b4:	ee17 2a90 	vmov	r2, s15
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80087bc:	4b13      	ldr	r3, [pc, #76]	; (800880c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c0:	0e1b      	lsrs	r3, r3, #24
 80087c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087c6:	ee07 3a90 	vmov	s15, r3
 80087ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80087da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087e2:	ee17 2a90 	vmov	r2, s15
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80087ea:	e008      	b.n	80087fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	609a      	str	r2, [r3, #8]
}
 80087fe:	bf00      	nop
 8008800:	3724      	adds	r7, #36	; 0x24
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	58024400 	.word	0x58024400
 8008810:	03d09000 	.word	0x03d09000
 8008814:	46000000 	.word	0x46000000
 8008818:	4c742400 	.word	0x4c742400
 800881c:	4a742400 	.word	0x4a742400
 8008820:	4af42400 	.word	0x4af42400

08008824 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008824:	b480      	push	{r7}
 8008826:	b089      	sub	sp, #36	; 0x24
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800882c:	4ba0      	ldr	r3, [pc, #640]	; (8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800882e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008830:	f003 0303 	and.w	r3, r3, #3
 8008834:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008836:	4b9e      	ldr	r3, [pc, #632]	; (8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883a:	091b      	lsrs	r3, r3, #4
 800883c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008840:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008842:	4b9b      	ldr	r3, [pc, #620]	; (8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800884c:	4b98      	ldr	r3, [pc, #608]	; (8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800884e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008850:	08db      	lsrs	r3, r3, #3
 8008852:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	fb02 f303 	mul.w	r3, r2, r3
 800885c:	ee07 3a90 	vmov	s15, r3
 8008860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008864:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 8111 	beq.w	8008a92 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	2b02      	cmp	r3, #2
 8008874:	f000 8083 	beq.w	800897e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	2b02      	cmp	r3, #2
 800887c:	f200 80a1 	bhi.w	80089c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d003      	beq.n	800888e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d056      	beq.n	800893a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800888c:	e099      	b.n	80089c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800888e:	4b88      	ldr	r3, [pc, #544]	; (8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 0320 	and.w	r3, r3, #32
 8008896:	2b00      	cmp	r3, #0
 8008898:	d02d      	beq.n	80088f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800889a:	4b85      	ldr	r3, [pc, #532]	; (8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	08db      	lsrs	r3, r3, #3
 80088a0:	f003 0303 	and.w	r3, r3, #3
 80088a4:	4a83      	ldr	r2, [pc, #524]	; (8008ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80088a6:	fa22 f303 	lsr.w	r3, r2, r3
 80088aa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	ee07 3a90 	vmov	s15, r3
 80088b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	ee07 3a90 	vmov	s15, r3
 80088bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088c4:	4b7a      	ldr	r3, [pc, #488]	; (8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088cc:	ee07 3a90 	vmov	s15, r3
 80088d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80088d8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80088f4:	e087      	b.n	8008a06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	ee07 3a90 	vmov	s15, r3
 80088fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008900:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008908:	4b69      	ldr	r3, [pc, #420]	; (8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800890a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008910:	ee07 3a90 	vmov	s15, r3
 8008914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008918:	ed97 6a03 	vldr	s12, [r7, #12]
 800891c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008920:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008928:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800892c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008934:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008938:	e065      	b.n	8008a06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	ee07 3a90 	vmov	s15, r3
 8008940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008944:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800894c:	4b58      	ldr	r3, [pc, #352]	; (8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800894e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008954:	ee07 3a90 	vmov	s15, r3
 8008958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800895c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008960:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008964:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800896c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008978:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800897c:	e043      	b.n	8008a06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	ee07 3a90 	vmov	s15, r3
 8008984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008988:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800898c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008990:	4b47      	ldr	r3, [pc, #284]	; (8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008998:	ee07 3a90 	vmov	s15, r3
 800899c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80089a4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089c0:	e021      	b.n	8008a06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	ee07 3a90 	vmov	s15, r3
 80089c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089cc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80089d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089d4:	4b36      	ldr	r3, [pc, #216]	; (8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089dc:	ee07 3a90 	vmov	s15, r3
 80089e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80089e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a04:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008a06:	4b2a      	ldr	r3, [pc, #168]	; (8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0a:	0a5b      	lsrs	r3, r3, #9
 8008a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a10:	ee07 3a90 	vmov	s15, r3
 8008a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a20:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a2c:	ee17 2a90 	vmov	r2, s15
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008a34:	4b1e      	ldr	r3, [pc, #120]	; (8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a38:	0c1b      	lsrs	r3, r3, #16
 8008a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a3e:	ee07 3a90 	vmov	s15, r3
 8008a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a5a:	ee17 2a90 	vmov	r2, s15
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008a62:	4b13      	ldr	r3, [pc, #76]	; (8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a66:	0e1b      	lsrs	r3, r3, #24
 8008a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a6c:	ee07 3a90 	vmov	s15, r3
 8008a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a88:	ee17 2a90 	vmov	r2, s15
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008a90:	e008      	b.n	8008aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	609a      	str	r2, [r3, #8]
}
 8008aa4:	bf00      	nop
 8008aa6:	3724      	adds	r7, #36	; 0x24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	58024400 	.word	0x58024400
 8008ab4:	03d09000 	.word	0x03d09000
 8008ab8:	46000000 	.word	0x46000000
 8008abc:	4c742400 	.word	0x4c742400
 8008ac0:	4a742400 	.word	0x4a742400
 8008ac4:	4af42400 	.word	0x4af42400

08008ac8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ad6:	4b53      	ldr	r3, [pc, #332]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ada:	f003 0303 	and.w	r3, r3, #3
 8008ade:	2b03      	cmp	r3, #3
 8008ae0:	d101      	bne.n	8008ae6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e099      	b.n	8008c1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008ae6:	4b4f      	ldr	r3, [pc, #316]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a4e      	ldr	r2, [pc, #312]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008aec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008af2:	f7f9 fd4b 	bl	800258c <HAL_GetTick>
 8008af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008af8:	e008      	b.n	8008b0c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008afa:	f7f9 fd47 	bl	800258c <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d901      	bls.n	8008b0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e086      	b.n	8008c1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b0c:	4b45      	ldr	r3, [pc, #276]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1f0      	bne.n	8008afa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b18:	4b42      	ldr	r3, [pc, #264]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	031b      	lsls	r3, r3, #12
 8008b26:	493f      	ldr	r1, [pc, #252]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	628b      	str	r3, [r1, #40]	; 0x28
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	025b      	lsls	r3, r3, #9
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	431a      	orrs	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	041b      	lsls	r3, r3, #16
 8008b4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b4e:	431a      	orrs	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	3b01      	subs	r3, #1
 8008b56:	061b      	lsls	r3, r3, #24
 8008b58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b5c:	4931      	ldr	r1, [pc, #196]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b62:	4b30      	ldr	r3, [pc, #192]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	492d      	ldr	r1, [pc, #180]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b70:	4313      	orrs	r3, r2
 8008b72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b74:	4b2b      	ldr	r3, [pc, #172]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b78:	f023 0220 	bic.w	r2, r3, #32
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	4928      	ldr	r1, [pc, #160]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b86:	4b27      	ldr	r3, [pc, #156]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8a:	4a26      	ldr	r2, [pc, #152]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b8c:	f023 0310 	bic.w	r3, r3, #16
 8008b90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b92:	4b24      	ldr	r3, [pc, #144]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008b94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b96:	4b24      	ldr	r3, [pc, #144]	; (8008c28 <RCCEx_PLL2_Config+0x160>)
 8008b98:	4013      	ands	r3, r2
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	69d2      	ldr	r2, [r2, #28]
 8008b9e:	00d2      	lsls	r2, r2, #3
 8008ba0:	4920      	ldr	r1, [pc, #128]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008ba6:	4b1f      	ldr	r3, [pc, #124]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008baa:	4a1e      	ldr	r2, [pc, #120]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008bac:	f043 0310 	orr.w	r3, r3, #16
 8008bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d106      	bne.n	8008bc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008bb8:	4b1a      	ldr	r3, [pc, #104]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbc:	4a19      	ldr	r2, [pc, #100]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008bbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bc4:	e00f      	b.n	8008be6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d106      	bne.n	8008bda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008bcc:	4b15      	ldr	r3, [pc, #84]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd0:	4a14      	ldr	r2, [pc, #80]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bd8:	e005      	b.n	8008be6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008bda:	4b12      	ldr	r3, [pc, #72]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bde:	4a11      	ldr	r2, [pc, #68]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008be4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008be6:	4b0f      	ldr	r3, [pc, #60]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a0e      	ldr	r2, [pc, #56]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008bec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bf2:	f7f9 fccb 	bl	800258c <HAL_GetTick>
 8008bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bf8:	e008      	b.n	8008c0c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008bfa:	f7f9 fcc7 	bl	800258c <HAL_GetTick>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d901      	bls.n	8008c0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e006      	b.n	8008c1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c0c:	4b05      	ldr	r3, [pc, #20]	; (8008c24 <RCCEx_PLL2_Config+0x15c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d0f0      	beq.n	8008bfa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	58024400 	.word	0x58024400
 8008c28:	ffff0007 	.word	0xffff0007

08008c2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c3a:	4b53      	ldr	r3, [pc, #332]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3e:	f003 0303 	and.w	r3, r3, #3
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d101      	bne.n	8008c4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e099      	b.n	8008d7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c4a:	4b4f      	ldr	r3, [pc, #316]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a4e      	ldr	r2, [pc, #312]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c56:	f7f9 fc99 	bl	800258c <HAL_GetTick>
 8008c5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c5c:	e008      	b.n	8008c70 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c5e:	f7f9 fc95 	bl	800258c <HAL_GetTick>
 8008c62:	4602      	mov	r2, r0
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d901      	bls.n	8008c70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e086      	b.n	8008d7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c70:	4b45      	ldr	r3, [pc, #276]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1f0      	bne.n	8008c5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c7c:	4b42      	ldr	r3, [pc, #264]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	051b      	lsls	r3, r3, #20
 8008c8a:	493f      	ldr	r1, [pc, #252]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	628b      	str	r3, [r1, #40]	; 0x28
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	025b      	lsls	r3, r3, #9
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	3b01      	subs	r3, #1
 8008cac:	041b      	lsls	r3, r3, #16
 8008cae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	061b      	lsls	r3, r3, #24
 8008cbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008cc0:	4931      	ldr	r1, [pc, #196]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008cc6:	4b30      	ldr	r3, [pc, #192]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	492d      	ldr	r1, [pc, #180]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008cd8:	4b2b      	ldr	r3, [pc, #172]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cdc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	4928      	ldr	r1, [pc, #160]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008cea:	4b27      	ldr	r3, [pc, #156]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cee:	4a26      	ldr	r2, [pc, #152]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008cf6:	4b24      	ldr	r3, [pc, #144]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cfa:	4b24      	ldr	r3, [pc, #144]	; (8008d8c <RCCEx_PLL3_Config+0x160>)
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	69d2      	ldr	r2, [r2, #28]
 8008d02:	00d2      	lsls	r2, r2, #3
 8008d04:	4920      	ldr	r1, [pc, #128]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d0a:	4b1f      	ldr	r3, [pc, #124]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0e:	4a1e      	ldr	r2, [pc, #120]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d106      	bne.n	8008d2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d1c:	4b1a      	ldr	r3, [pc, #104]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	4a19      	ldr	r2, [pc, #100]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d28:	e00f      	b.n	8008d4a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d106      	bne.n	8008d3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d30:	4b15      	ldr	r3, [pc, #84]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d34:	4a14      	ldr	r2, [pc, #80]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d3c:	e005      	b.n	8008d4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d3e:	4b12      	ldr	r3, [pc, #72]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d42:	4a11      	ldr	r2, [pc, #68]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d4a:	4b0f      	ldr	r3, [pc, #60]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a0e      	ldr	r2, [pc, #56]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d56:	f7f9 fc19 	bl	800258c <HAL_GetTick>
 8008d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d5c:	e008      	b.n	8008d70 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d5e:	f7f9 fc15 	bl	800258c <HAL_GetTick>
 8008d62:	4602      	mov	r2, r0
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d901      	bls.n	8008d70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e006      	b.n	8008d7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d70:	4b05      	ldr	r3, [pc, #20]	; (8008d88 <RCCEx_PLL3_Config+0x15c>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d0f0      	beq.n	8008d5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	58024400 	.word	0x58024400
 8008d8c:	ffff0007 	.word	0xffff0007

08008d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d101      	bne.n	8008da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e049      	b.n	8008e36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d106      	bne.n	8008dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7f9 f88a 	bl	8001ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3304      	adds	r3, #4
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4610      	mov	r0, r2
 8008dd0:	f000 fe1a 	bl	8009a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d001      	beq.n	8008e58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e04c      	b.n	8008ef2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a26      	ldr	r2, [pc, #152]	; (8008f00 <HAL_TIM_Base_Start+0xc0>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d022      	beq.n	8008eb0 <HAL_TIM_Base_Start+0x70>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e72:	d01d      	beq.n	8008eb0 <HAL_TIM_Base_Start+0x70>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a22      	ldr	r2, [pc, #136]	; (8008f04 <HAL_TIM_Base_Start+0xc4>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d018      	beq.n	8008eb0 <HAL_TIM_Base_Start+0x70>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a21      	ldr	r2, [pc, #132]	; (8008f08 <HAL_TIM_Base_Start+0xc8>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d013      	beq.n	8008eb0 <HAL_TIM_Base_Start+0x70>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a1f      	ldr	r2, [pc, #124]	; (8008f0c <HAL_TIM_Base_Start+0xcc>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d00e      	beq.n	8008eb0 <HAL_TIM_Base_Start+0x70>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a1e      	ldr	r2, [pc, #120]	; (8008f10 <HAL_TIM_Base_Start+0xd0>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d009      	beq.n	8008eb0 <HAL_TIM_Base_Start+0x70>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a1c      	ldr	r2, [pc, #112]	; (8008f14 <HAL_TIM_Base_Start+0xd4>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d004      	beq.n	8008eb0 <HAL_TIM_Base_Start+0x70>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a1b      	ldr	r2, [pc, #108]	; (8008f18 <HAL_TIM_Base_Start+0xd8>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d115      	bne.n	8008edc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	689a      	ldr	r2, [r3, #8]
 8008eb6:	4b19      	ldr	r3, [pc, #100]	; (8008f1c <HAL_TIM_Base_Start+0xdc>)
 8008eb8:	4013      	ands	r3, r2
 8008eba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2b06      	cmp	r3, #6
 8008ec0:	d015      	beq.n	8008eee <HAL_TIM_Base_Start+0xae>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ec8:	d011      	beq.n	8008eee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f042 0201 	orr.w	r2, r2, #1
 8008ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eda:	e008      	b.n	8008eee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f042 0201 	orr.w	r2, r2, #1
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	e000      	b.n	8008ef0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3714      	adds	r7, #20
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	40010000 	.word	0x40010000
 8008f04:	40000400 	.word	0x40000400
 8008f08:	40000800 	.word	0x40000800
 8008f0c:	40000c00 	.word	0x40000c00
 8008f10:	40010400 	.word	0x40010400
 8008f14:	40001800 	.word	0x40001800
 8008f18:	40014000 	.word	0x40014000
 8008f1c:	00010007 	.word	0x00010007

08008f20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e049      	b.n	8008fc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d106      	bne.n	8008f4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f841 	bl	8008fce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3304      	adds	r3, #4
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4610      	mov	r0, r2
 8008f60:	f000 fd52 	bl	8009a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b083      	sub	sp, #12
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008fd6:	bf00      	nop
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
	...

08008fe4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d109      	bne.n	8009008 <HAL_TIM_PWM_Start+0x24>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	bf14      	ite	ne
 8009000:	2301      	movne	r3, #1
 8009002:	2300      	moveq	r3, #0
 8009004:	b2db      	uxtb	r3, r3
 8009006:	e03c      	b.n	8009082 <HAL_TIM_PWM_Start+0x9e>
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	2b04      	cmp	r3, #4
 800900c:	d109      	bne.n	8009022 <HAL_TIM_PWM_Start+0x3e>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b01      	cmp	r3, #1
 8009018:	bf14      	ite	ne
 800901a:	2301      	movne	r3, #1
 800901c:	2300      	moveq	r3, #0
 800901e:	b2db      	uxtb	r3, r3
 8009020:	e02f      	b.n	8009082 <HAL_TIM_PWM_Start+0x9e>
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b08      	cmp	r3, #8
 8009026:	d109      	bne.n	800903c <HAL_TIM_PWM_Start+0x58>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b01      	cmp	r3, #1
 8009032:	bf14      	ite	ne
 8009034:	2301      	movne	r3, #1
 8009036:	2300      	moveq	r3, #0
 8009038:	b2db      	uxtb	r3, r3
 800903a:	e022      	b.n	8009082 <HAL_TIM_PWM_Start+0x9e>
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2b0c      	cmp	r3, #12
 8009040:	d109      	bne.n	8009056 <HAL_TIM_PWM_Start+0x72>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b01      	cmp	r3, #1
 800904c:	bf14      	ite	ne
 800904e:	2301      	movne	r3, #1
 8009050:	2300      	moveq	r3, #0
 8009052:	b2db      	uxtb	r3, r3
 8009054:	e015      	b.n	8009082 <HAL_TIM_PWM_Start+0x9e>
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b10      	cmp	r3, #16
 800905a:	d109      	bne.n	8009070 <HAL_TIM_PWM_Start+0x8c>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b01      	cmp	r3, #1
 8009066:	bf14      	ite	ne
 8009068:	2301      	movne	r3, #1
 800906a:	2300      	moveq	r3, #0
 800906c:	b2db      	uxtb	r3, r3
 800906e:	e008      	b.n	8009082 <HAL_TIM_PWM_Start+0x9e>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009076:	b2db      	uxtb	r3, r3
 8009078:	2b01      	cmp	r3, #1
 800907a:	bf14      	ite	ne
 800907c:	2301      	movne	r3, #1
 800907e:	2300      	moveq	r3, #0
 8009080:	b2db      	uxtb	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e0a1      	b.n	80091ce <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d104      	bne.n	800909a <HAL_TIM_PWM_Start+0xb6>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2202      	movs	r2, #2
 8009094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009098:	e023      	b.n	80090e2 <HAL_TIM_PWM_Start+0xfe>
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	2b04      	cmp	r3, #4
 800909e:	d104      	bne.n	80090aa <HAL_TIM_PWM_Start+0xc6>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2202      	movs	r2, #2
 80090a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090a8:	e01b      	b.n	80090e2 <HAL_TIM_PWM_Start+0xfe>
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b08      	cmp	r3, #8
 80090ae:	d104      	bne.n	80090ba <HAL_TIM_PWM_Start+0xd6>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2202      	movs	r2, #2
 80090b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090b8:	e013      	b.n	80090e2 <HAL_TIM_PWM_Start+0xfe>
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	2b0c      	cmp	r3, #12
 80090be:	d104      	bne.n	80090ca <HAL_TIM_PWM_Start+0xe6>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2202      	movs	r2, #2
 80090c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090c8:	e00b      	b.n	80090e2 <HAL_TIM_PWM_Start+0xfe>
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2b10      	cmp	r3, #16
 80090ce:	d104      	bne.n	80090da <HAL_TIM_PWM_Start+0xf6>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2202      	movs	r2, #2
 80090d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090d8:	e003      	b.n	80090e2 <HAL_TIM_PWM_Start+0xfe>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2202      	movs	r2, #2
 80090de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2201      	movs	r2, #1
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f001 f89a 	bl	800a224 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a38      	ldr	r2, [pc, #224]	; (80091d8 <HAL_TIM_PWM_Start+0x1f4>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d013      	beq.n	8009122 <HAL_TIM_PWM_Start+0x13e>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a37      	ldr	r2, [pc, #220]	; (80091dc <HAL_TIM_PWM_Start+0x1f8>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d00e      	beq.n	8009122 <HAL_TIM_PWM_Start+0x13e>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a35      	ldr	r2, [pc, #212]	; (80091e0 <HAL_TIM_PWM_Start+0x1fc>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d009      	beq.n	8009122 <HAL_TIM_PWM_Start+0x13e>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a34      	ldr	r2, [pc, #208]	; (80091e4 <HAL_TIM_PWM_Start+0x200>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d004      	beq.n	8009122 <HAL_TIM_PWM_Start+0x13e>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a32      	ldr	r2, [pc, #200]	; (80091e8 <HAL_TIM_PWM_Start+0x204>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d101      	bne.n	8009126 <HAL_TIM_PWM_Start+0x142>
 8009122:	2301      	movs	r3, #1
 8009124:	e000      	b.n	8009128 <HAL_TIM_PWM_Start+0x144>
 8009126:	2300      	movs	r3, #0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d007      	beq.n	800913c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800913a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a25      	ldr	r2, [pc, #148]	; (80091d8 <HAL_TIM_PWM_Start+0x1f4>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d022      	beq.n	800918c <HAL_TIM_PWM_Start+0x1a8>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800914e:	d01d      	beq.n	800918c <HAL_TIM_PWM_Start+0x1a8>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a25      	ldr	r2, [pc, #148]	; (80091ec <HAL_TIM_PWM_Start+0x208>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d018      	beq.n	800918c <HAL_TIM_PWM_Start+0x1a8>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a24      	ldr	r2, [pc, #144]	; (80091f0 <HAL_TIM_PWM_Start+0x20c>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d013      	beq.n	800918c <HAL_TIM_PWM_Start+0x1a8>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a22      	ldr	r2, [pc, #136]	; (80091f4 <HAL_TIM_PWM_Start+0x210>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d00e      	beq.n	800918c <HAL_TIM_PWM_Start+0x1a8>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a1a      	ldr	r2, [pc, #104]	; (80091dc <HAL_TIM_PWM_Start+0x1f8>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d009      	beq.n	800918c <HAL_TIM_PWM_Start+0x1a8>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a1e      	ldr	r2, [pc, #120]	; (80091f8 <HAL_TIM_PWM_Start+0x214>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d004      	beq.n	800918c <HAL_TIM_PWM_Start+0x1a8>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a16      	ldr	r2, [pc, #88]	; (80091e0 <HAL_TIM_PWM_Start+0x1fc>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d115      	bne.n	80091b8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689a      	ldr	r2, [r3, #8]
 8009192:	4b1a      	ldr	r3, [pc, #104]	; (80091fc <HAL_TIM_PWM_Start+0x218>)
 8009194:	4013      	ands	r3, r2
 8009196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b06      	cmp	r3, #6
 800919c:	d015      	beq.n	80091ca <HAL_TIM_PWM_Start+0x1e6>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091a4:	d011      	beq.n	80091ca <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f042 0201 	orr.w	r2, r2, #1
 80091b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091b6:	e008      	b.n	80091ca <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f042 0201 	orr.w	r2, r2, #1
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	e000      	b.n	80091cc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	40010000 	.word	0x40010000
 80091dc:	40010400 	.word	0x40010400
 80091e0:	40014000 	.word	0x40014000
 80091e4:	40014400 	.word	0x40014400
 80091e8:	40014800 	.word	0x40014800
 80091ec:	40000400 	.word	0x40000400
 80091f0:	40000800 	.word	0x40000800
 80091f4:	40000c00 	.word	0x40000c00
 80091f8:	40001800 	.word	0x40001800
 80091fc:	00010007 	.word	0x00010007

08009200 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e08f      	b.n	8009334 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b00      	cmp	r3, #0
 800921e:	d106      	bne.n	800922e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7f8 fe01 	bl	8001e30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2202      	movs	r2, #2
 8009232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6899      	ldr	r1, [r3, #8]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	4b3e      	ldr	r3, [pc, #248]	; (800933c <HAL_TIM_Encoder_Init+0x13c>)
 8009242:	400b      	ands	r3, r1
 8009244:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	3304      	adds	r3, #4
 800924e:	4619      	mov	r1, r3
 8009250:	4610      	mov	r0, r2
 8009252:	f000 fbd9 	bl	8009a08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	4313      	orrs	r3, r2
 8009276:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	4b31      	ldr	r3, [pc, #196]	; (8009340 <HAL_TIM_Encoder_Init+0x140>)
 800927c:	4013      	ands	r3, r2
 800927e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	689a      	ldr	r2, [r3, #8]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	021b      	lsls	r3, r3, #8
 800928a:	4313      	orrs	r3, r2
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	4313      	orrs	r3, r2
 8009290:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	4b2b      	ldr	r3, [pc, #172]	; (8009344 <HAL_TIM_Encoder_Init+0x144>)
 8009296:	4013      	ands	r3, r2
 8009298:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	4b2a      	ldr	r3, [pc, #168]	; (8009348 <HAL_TIM_Encoder_Init+0x148>)
 800929e:	4013      	ands	r3, r2
 80092a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	68da      	ldr	r2, [r3, #12]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	021b      	lsls	r3, r3, #8
 80092ac:	4313      	orrs	r3, r2
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	011a      	lsls	r2, r3, #4
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	031b      	lsls	r3, r3, #12
 80092c0:	4313      	orrs	r3, r2
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80092ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80092d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	695b      	ldr	r3, [r3, #20]
 80092e0:	011b      	lsls	r3, r3, #4
 80092e2:	4313      	orrs	r3, r2
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3718      	adds	r7, #24
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	fffebff8 	.word	0xfffebff8
 8009340:	fffffcfc 	.word	0xfffffcfc
 8009344:	fffff3f3 	.word	0xfffff3f3
 8009348:	ffff0f0f 	.word	0xffff0f0f

0800934c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	f003 0302 	and.w	r3, r3, #2
 800935e:	2b02      	cmp	r3, #2
 8009360:	d122      	bne.n	80093a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	f003 0302 	and.w	r3, r3, #2
 800936c:	2b02      	cmp	r3, #2
 800936e:	d11b      	bne.n	80093a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f06f 0202 	mvn.w	r2, #2
 8009378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	f003 0303 	and.w	r3, r3, #3
 800938a:	2b00      	cmp	r3, #0
 800938c:	d003      	beq.n	8009396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fb1c 	bl	80099cc <HAL_TIM_IC_CaptureCallback>
 8009394:	e005      	b.n	80093a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fb0e 	bl	80099b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fb1f 	bl	80099e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	f003 0304 	and.w	r3, r3, #4
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	d122      	bne.n	80093fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	f003 0304 	and.w	r3, r3, #4
 80093c0:	2b04      	cmp	r3, #4
 80093c2:	d11b      	bne.n	80093fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f06f 0204 	mvn.w	r2, #4
 80093cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2202      	movs	r2, #2
 80093d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d003      	beq.n	80093ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 faf2 	bl	80099cc <HAL_TIM_IC_CaptureCallback>
 80093e8:	e005      	b.n	80093f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fae4 	bl	80099b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 faf5 	bl	80099e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	f003 0308 	and.w	r3, r3, #8
 8009406:	2b08      	cmp	r3, #8
 8009408:	d122      	bne.n	8009450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	f003 0308 	and.w	r3, r3, #8
 8009414:	2b08      	cmp	r3, #8
 8009416:	d11b      	bne.n	8009450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f06f 0208 	mvn.w	r2, #8
 8009420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2204      	movs	r2, #4
 8009426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	f003 0303 	and.w	r3, r3, #3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fac8 	bl	80099cc <HAL_TIM_IC_CaptureCallback>
 800943c:	e005      	b.n	800944a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 faba 	bl	80099b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 facb 	bl	80099e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	f003 0310 	and.w	r3, r3, #16
 800945a:	2b10      	cmp	r3, #16
 800945c:	d122      	bne.n	80094a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	f003 0310 	and.w	r3, r3, #16
 8009468:	2b10      	cmp	r3, #16
 800946a:	d11b      	bne.n	80094a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f06f 0210 	mvn.w	r2, #16
 8009474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2208      	movs	r2, #8
 800947a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	69db      	ldr	r3, [r3, #28]
 8009482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009486:	2b00      	cmp	r3, #0
 8009488:	d003      	beq.n	8009492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fa9e 	bl	80099cc <HAL_TIM_IC_CaptureCallback>
 8009490:	e005      	b.n	800949e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fa90 	bl	80099b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 faa1 	bl	80099e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d10e      	bne.n	80094d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	f003 0301 	and.w	r3, r3, #1
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d107      	bne.n	80094d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f06f 0201 	mvn.w	r2, #1
 80094c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fa6a 	bl	80099a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094da:	2b80      	cmp	r3, #128	; 0x80
 80094dc:	d10e      	bne.n	80094fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e8:	2b80      	cmp	r3, #128	; 0x80
 80094ea:	d107      	bne.n	80094fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 ff52 	bl	800a3a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800950a:	d10e      	bne.n	800952a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009516:	2b80      	cmp	r3, #128	; 0x80
 8009518:	d107      	bne.n	800952a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 ff45 	bl	800a3b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009534:	2b40      	cmp	r3, #64	; 0x40
 8009536:	d10e      	bne.n	8009556 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009542:	2b40      	cmp	r3, #64	; 0x40
 8009544:	d107      	bne.n	8009556 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800954e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fa4f 	bl	80099f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	f003 0320 	and.w	r3, r3, #32
 8009560:	2b20      	cmp	r3, #32
 8009562:	d10e      	bne.n	8009582 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	f003 0320 	and.w	r3, r3, #32
 800956e:	2b20      	cmp	r3, #32
 8009570:	d107      	bne.n	8009582 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f06f 0220 	mvn.w	r2, #32
 800957a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 ff05 	bl	800a38c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009582:	bf00      	nop
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
	...

0800958c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d101      	bne.n	80095aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80095a6:	2302      	movs	r3, #2
 80095a8:	e0ff      	b.n	80097aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2b14      	cmp	r3, #20
 80095b6:	f200 80f0 	bhi.w	800979a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80095ba:	a201      	add	r2, pc, #4	; (adr r2, 80095c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80095bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c0:	08009615 	.word	0x08009615
 80095c4:	0800979b 	.word	0x0800979b
 80095c8:	0800979b 	.word	0x0800979b
 80095cc:	0800979b 	.word	0x0800979b
 80095d0:	08009655 	.word	0x08009655
 80095d4:	0800979b 	.word	0x0800979b
 80095d8:	0800979b 	.word	0x0800979b
 80095dc:	0800979b 	.word	0x0800979b
 80095e0:	08009697 	.word	0x08009697
 80095e4:	0800979b 	.word	0x0800979b
 80095e8:	0800979b 	.word	0x0800979b
 80095ec:	0800979b 	.word	0x0800979b
 80095f0:	080096d7 	.word	0x080096d7
 80095f4:	0800979b 	.word	0x0800979b
 80095f8:	0800979b 	.word	0x0800979b
 80095fc:	0800979b 	.word	0x0800979b
 8009600:	08009719 	.word	0x08009719
 8009604:	0800979b 	.word	0x0800979b
 8009608:	0800979b 	.word	0x0800979b
 800960c:	0800979b 	.word	0x0800979b
 8009610:	08009759 	.word	0x08009759
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68b9      	ldr	r1, [r7, #8]
 800961a:	4618      	mov	r0, r3
 800961c:	f000 fa8e 	bl	8009b3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	699a      	ldr	r2, [r3, #24]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f042 0208 	orr.w	r2, r2, #8
 800962e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	699a      	ldr	r2, [r3, #24]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f022 0204 	bic.w	r2, r2, #4
 800963e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6999      	ldr	r1, [r3, #24]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	691a      	ldr	r2, [r3, #16]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	619a      	str	r2, [r3, #24]
      break;
 8009652:	e0a5      	b.n	80097a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68b9      	ldr	r1, [r7, #8]
 800965a:	4618      	mov	r0, r3
 800965c:	f000 fafe 	bl	8009c5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	699a      	ldr	r2, [r3, #24]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800966e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	699a      	ldr	r2, [r3, #24]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800967e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6999      	ldr	r1, [r3, #24]
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	021a      	lsls	r2, r3, #8
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	430a      	orrs	r2, r1
 8009692:	619a      	str	r2, [r3, #24]
      break;
 8009694:	e084      	b.n	80097a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68b9      	ldr	r1, [r7, #8]
 800969c:	4618      	mov	r0, r3
 800969e:	f000 fb67 	bl	8009d70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	69da      	ldr	r2, [r3, #28]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f042 0208 	orr.w	r2, r2, #8
 80096b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	69da      	ldr	r2, [r3, #28]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f022 0204 	bic.w	r2, r2, #4
 80096c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	69d9      	ldr	r1, [r3, #28]
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	691a      	ldr	r2, [r3, #16]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	430a      	orrs	r2, r1
 80096d2:	61da      	str	r2, [r3, #28]
      break;
 80096d4:	e064      	b.n	80097a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68b9      	ldr	r1, [r7, #8]
 80096dc:	4618      	mov	r0, r3
 80096de:	f000 fbcf 	bl	8009e80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	69da      	ldr	r2, [r3, #28]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	69da      	ldr	r2, [r3, #28]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	69d9      	ldr	r1, [r3, #28]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	021a      	lsls	r2, r3, #8
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	61da      	str	r2, [r3, #28]
      break;
 8009716:	e043      	b.n	80097a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68b9      	ldr	r1, [r7, #8]
 800971e:	4618      	mov	r0, r3
 8009720:	f000 fc18 	bl	8009f54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f042 0208 	orr.w	r2, r2, #8
 8009732:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f022 0204 	bic.w	r2, r2, #4
 8009742:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	691a      	ldr	r2, [r3, #16]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	430a      	orrs	r2, r1
 8009754:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009756:	e023      	b.n	80097a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68b9      	ldr	r1, [r7, #8]
 800975e:	4618      	mov	r0, r3
 8009760:	f000 fc5c 	bl	800a01c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009772:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009782:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	021a      	lsls	r2, r3, #8
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	430a      	orrs	r2, r1
 8009796:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009798:	e002      	b.n	80097a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	75fb      	strb	r3, [r7, #23]
      break;
 800979e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3718      	adds	r7, #24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop

080097b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d101      	bne.n	80097d0 <HAL_TIM_ConfigClockSource+0x1c>
 80097cc:	2302      	movs	r3, #2
 80097ce:	e0dc      	b.n	800998a <HAL_TIM_ConfigClockSource+0x1d6>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2202      	movs	r2, #2
 80097dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	4b6a      	ldr	r3, [pc, #424]	; (8009994 <HAL_TIM_ConfigClockSource+0x1e0>)
 80097ec:	4013      	ands	r3, r2
 80097ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a64      	ldr	r2, [pc, #400]	; (8009998 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009806:	4293      	cmp	r3, r2
 8009808:	f000 80a9 	beq.w	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 800980c:	4a62      	ldr	r2, [pc, #392]	; (8009998 <HAL_TIM_ConfigClockSource+0x1e4>)
 800980e:	4293      	cmp	r3, r2
 8009810:	f200 80ae 	bhi.w	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009814:	4a61      	ldr	r2, [pc, #388]	; (800999c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009816:	4293      	cmp	r3, r2
 8009818:	f000 80a1 	beq.w	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 800981c:	4a5f      	ldr	r2, [pc, #380]	; (800999c <HAL_TIM_ConfigClockSource+0x1e8>)
 800981e:	4293      	cmp	r3, r2
 8009820:	f200 80a6 	bhi.w	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009824:	4a5e      	ldr	r2, [pc, #376]	; (80099a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009826:	4293      	cmp	r3, r2
 8009828:	f000 8099 	beq.w	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 800982c:	4a5c      	ldr	r2, [pc, #368]	; (80099a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800982e:	4293      	cmp	r3, r2
 8009830:	f200 809e 	bhi.w	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009834:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009838:	f000 8091 	beq.w	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 800983c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009840:	f200 8096 	bhi.w	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009848:	f000 8089 	beq.w	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 800984c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009850:	f200 808e 	bhi.w	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009858:	d03e      	beq.n	80098d8 <HAL_TIM_ConfigClockSource+0x124>
 800985a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800985e:	f200 8087 	bhi.w	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009866:	f000 8086 	beq.w	8009976 <HAL_TIM_ConfigClockSource+0x1c2>
 800986a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800986e:	d87f      	bhi.n	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009870:	2b70      	cmp	r3, #112	; 0x70
 8009872:	d01a      	beq.n	80098aa <HAL_TIM_ConfigClockSource+0xf6>
 8009874:	2b70      	cmp	r3, #112	; 0x70
 8009876:	d87b      	bhi.n	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009878:	2b60      	cmp	r3, #96	; 0x60
 800987a:	d050      	beq.n	800991e <HAL_TIM_ConfigClockSource+0x16a>
 800987c:	2b60      	cmp	r3, #96	; 0x60
 800987e:	d877      	bhi.n	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009880:	2b50      	cmp	r3, #80	; 0x50
 8009882:	d03c      	beq.n	80098fe <HAL_TIM_ConfigClockSource+0x14a>
 8009884:	2b50      	cmp	r3, #80	; 0x50
 8009886:	d873      	bhi.n	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009888:	2b40      	cmp	r3, #64	; 0x40
 800988a:	d058      	beq.n	800993e <HAL_TIM_ConfigClockSource+0x18a>
 800988c:	2b40      	cmp	r3, #64	; 0x40
 800988e:	d86f      	bhi.n	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009890:	2b30      	cmp	r3, #48	; 0x30
 8009892:	d064      	beq.n	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 8009894:	2b30      	cmp	r3, #48	; 0x30
 8009896:	d86b      	bhi.n	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009898:	2b20      	cmp	r3, #32
 800989a:	d060      	beq.n	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 800989c:	2b20      	cmp	r3, #32
 800989e:	d867      	bhi.n	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d05c      	beq.n	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 80098a4:	2b10      	cmp	r3, #16
 80098a6:	d05a      	beq.n	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 80098a8:	e062      	b.n	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098ba:	f000 fc93 	bl	800a1e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80098cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	609a      	str	r2, [r3, #8]
      break;
 80098d6:	e04f      	b.n	8009978 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098e8:	f000 fc7c 	bl	800a1e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	689a      	ldr	r2, [r3, #8]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098fa:	609a      	str	r2, [r3, #8]
      break;
 80098fc:	e03c      	b.n	8009978 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800990a:	461a      	mov	r2, r3
 800990c:	f000 fbec 	bl	800a0e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2150      	movs	r1, #80	; 0x50
 8009916:	4618      	mov	r0, r3
 8009918:	f000 fc46 	bl	800a1a8 <TIM_ITRx_SetConfig>
      break;
 800991c:	e02c      	b.n	8009978 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800992a:	461a      	mov	r2, r3
 800992c:	f000 fc0b 	bl	800a146 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2160      	movs	r1, #96	; 0x60
 8009936:	4618      	mov	r0, r3
 8009938:	f000 fc36 	bl	800a1a8 <TIM_ITRx_SetConfig>
      break;
 800993c:	e01c      	b.n	8009978 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800994a:	461a      	mov	r2, r3
 800994c:	f000 fbcc 	bl	800a0e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2140      	movs	r1, #64	; 0x40
 8009956:	4618      	mov	r0, r3
 8009958:	f000 fc26 	bl	800a1a8 <TIM_ITRx_SetConfig>
      break;
 800995c:	e00c      	b.n	8009978 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4619      	mov	r1, r3
 8009968:	4610      	mov	r0, r2
 800996a:	f000 fc1d 	bl	800a1a8 <TIM_ITRx_SetConfig>
      break;
 800996e:	e003      	b.n	8009978 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	73fb      	strb	r3, [r7, #15]
      break;
 8009974:	e000      	b.n	8009978 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009976:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009988:	7bfb      	ldrb	r3, [r7, #15]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	ffceff88 	.word	0xffceff88
 8009998:	00100040 	.word	0x00100040
 800999c:	00100030 	.word	0x00100030
 80099a0:	00100020 	.word	0x00100020

080099a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a40      	ldr	r2, [pc, #256]	; (8009b1c <TIM_Base_SetConfig+0x114>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d013      	beq.n	8009a48 <TIM_Base_SetConfig+0x40>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a26:	d00f      	beq.n	8009a48 <TIM_Base_SetConfig+0x40>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a3d      	ldr	r2, [pc, #244]	; (8009b20 <TIM_Base_SetConfig+0x118>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d00b      	beq.n	8009a48 <TIM_Base_SetConfig+0x40>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a3c      	ldr	r2, [pc, #240]	; (8009b24 <TIM_Base_SetConfig+0x11c>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d007      	beq.n	8009a48 <TIM_Base_SetConfig+0x40>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a3b      	ldr	r2, [pc, #236]	; (8009b28 <TIM_Base_SetConfig+0x120>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d003      	beq.n	8009a48 <TIM_Base_SetConfig+0x40>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a3a      	ldr	r2, [pc, #232]	; (8009b2c <TIM_Base_SetConfig+0x124>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d108      	bne.n	8009a5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a2f      	ldr	r2, [pc, #188]	; (8009b1c <TIM_Base_SetConfig+0x114>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d01f      	beq.n	8009aa2 <TIM_Base_SetConfig+0x9a>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a68:	d01b      	beq.n	8009aa2 <TIM_Base_SetConfig+0x9a>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a2c      	ldr	r2, [pc, #176]	; (8009b20 <TIM_Base_SetConfig+0x118>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d017      	beq.n	8009aa2 <TIM_Base_SetConfig+0x9a>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a2b      	ldr	r2, [pc, #172]	; (8009b24 <TIM_Base_SetConfig+0x11c>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d013      	beq.n	8009aa2 <TIM_Base_SetConfig+0x9a>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a2a      	ldr	r2, [pc, #168]	; (8009b28 <TIM_Base_SetConfig+0x120>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d00f      	beq.n	8009aa2 <TIM_Base_SetConfig+0x9a>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a29      	ldr	r2, [pc, #164]	; (8009b2c <TIM_Base_SetConfig+0x124>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d00b      	beq.n	8009aa2 <TIM_Base_SetConfig+0x9a>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a28      	ldr	r2, [pc, #160]	; (8009b30 <TIM_Base_SetConfig+0x128>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d007      	beq.n	8009aa2 <TIM_Base_SetConfig+0x9a>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a27      	ldr	r2, [pc, #156]	; (8009b34 <TIM_Base_SetConfig+0x12c>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d003      	beq.n	8009aa2 <TIM_Base_SetConfig+0x9a>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a26      	ldr	r2, [pc, #152]	; (8009b38 <TIM_Base_SetConfig+0x130>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d108      	bne.n	8009ab4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	695b      	ldr	r3, [r3, #20]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	689a      	ldr	r2, [r3, #8]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a10      	ldr	r2, [pc, #64]	; (8009b1c <TIM_Base_SetConfig+0x114>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d00f      	beq.n	8009b00 <TIM_Base_SetConfig+0xf8>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a12      	ldr	r2, [pc, #72]	; (8009b2c <TIM_Base_SetConfig+0x124>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d00b      	beq.n	8009b00 <TIM_Base_SetConfig+0xf8>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a11      	ldr	r2, [pc, #68]	; (8009b30 <TIM_Base_SetConfig+0x128>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d007      	beq.n	8009b00 <TIM_Base_SetConfig+0xf8>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a10      	ldr	r2, [pc, #64]	; (8009b34 <TIM_Base_SetConfig+0x12c>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d003      	beq.n	8009b00 <TIM_Base_SetConfig+0xf8>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a0f      	ldr	r2, [pc, #60]	; (8009b38 <TIM_Base_SetConfig+0x130>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d103      	bne.n	8009b08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	691a      	ldr	r2, [r3, #16]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	615a      	str	r2, [r3, #20]
}
 8009b0e:	bf00      	nop
 8009b10:	3714      	adds	r7, #20
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	40010000 	.word	0x40010000
 8009b20:	40000400 	.word	0x40000400
 8009b24:	40000800 	.word	0x40000800
 8009b28:	40000c00 	.word	0x40000c00
 8009b2c:	40010400 	.word	0x40010400
 8009b30:	40014000 	.word	0x40014000
 8009b34:	40014400 	.word	0x40014400
 8009b38:	40014800 	.word	0x40014800

08009b3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	f023 0201 	bic.w	r2, r3, #1
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a1b      	ldr	r3, [r3, #32]
 8009b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	4b37      	ldr	r3, [pc, #220]	; (8009c44 <TIM_OC1_SetConfig+0x108>)
 8009b68:	4013      	ands	r3, r2
 8009b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f023 0303 	bic.w	r3, r3, #3
 8009b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f023 0302 	bic.w	r3, r3, #2
 8009b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a2d      	ldr	r2, [pc, #180]	; (8009c48 <TIM_OC1_SetConfig+0x10c>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d00f      	beq.n	8009bb8 <TIM_OC1_SetConfig+0x7c>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a2c      	ldr	r2, [pc, #176]	; (8009c4c <TIM_OC1_SetConfig+0x110>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d00b      	beq.n	8009bb8 <TIM_OC1_SetConfig+0x7c>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a2b      	ldr	r2, [pc, #172]	; (8009c50 <TIM_OC1_SetConfig+0x114>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d007      	beq.n	8009bb8 <TIM_OC1_SetConfig+0x7c>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a2a      	ldr	r2, [pc, #168]	; (8009c54 <TIM_OC1_SetConfig+0x118>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d003      	beq.n	8009bb8 <TIM_OC1_SetConfig+0x7c>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a29      	ldr	r2, [pc, #164]	; (8009c58 <TIM_OC1_SetConfig+0x11c>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d10c      	bne.n	8009bd2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	f023 0308 	bic.w	r3, r3, #8
 8009bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	697a      	ldr	r2, [r7, #20]
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	f023 0304 	bic.w	r3, r3, #4
 8009bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a1c      	ldr	r2, [pc, #112]	; (8009c48 <TIM_OC1_SetConfig+0x10c>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d00f      	beq.n	8009bfa <TIM_OC1_SetConfig+0xbe>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a1b      	ldr	r2, [pc, #108]	; (8009c4c <TIM_OC1_SetConfig+0x110>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d00b      	beq.n	8009bfa <TIM_OC1_SetConfig+0xbe>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a1a      	ldr	r2, [pc, #104]	; (8009c50 <TIM_OC1_SetConfig+0x114>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d007      	beq.n	8009bfa <TIM_OC1_SetConfig+0xbe>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a19      	ldr	r2, [pc, #100]	; (8009c54 <TIM_OC1_SetConfig+0x118>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d003      	beq.n	8009bfa <TIM_OC1_SetConfig+0xbe>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4a18      	ldr	r2, [pc, #96]	; (8009c58 <TIM_OC1_SetConfig+0x11c>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d111      	bne.n	8009c1e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	695b      	ldr	r3, [r3, #20]
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	693a      	ldr	r2, [r7, #16]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	693a      	ldr	r2, [r7, #16]
 8009c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	621a      	str	r2, [r3, #32]
}
 8009c38:	bf00      	nop
 8009c3a:	371c      	adds	r7, #28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	fffeff8f 	.word	0xfffeff8f
 8009c48:	40010000 	.word	0x40010000
 8009c4c:	40010400 	.word	0x40010400
 8009c50:	40014000 	.word	0x40014000
 8009c54:	40014400 	.word	0x40014400
 8009c58:	40014800 	.word	0x40014800

08009c5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b087      	sub	sp, #28
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	f023 0210 	bic.w	r2, r3, #16
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	4b34      	ldr	r3, [pc, #208]	; (8009d58 <TIM_OC2_SetConfig+0xfc>)
 8009c88:	4013      	ands	r3, r2
 8009c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	021b      	lsls	r3, r3, #8
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	f023 0320 	bic.w	r3, r3, #32
 8009ca6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	011b      	lsls	r3, r3, #4
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a29      	ldr	r2, [pc, #164]	; (8009d5c <TIM_OC2_SetConfig+0x100>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d003      	beq.n	8009cc4 <TIM_OC2_SetConfig+0x68>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a28      	ldr	r2, [pc, #160]	; (8009d60 <TIM_OC2_SetConfig+0x104>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d10d      	bne.n	8009ce0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	011b      	lsls	r3, r3, #4
 8009cd2:	697a      	ldr	r2, [r7, #20]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a1e      	ldr	r2, [pc, #120]	; (8009d5c <TIM_OC2_SetConfig+0x100>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d00f      	beq.n	8009d08 <TIM_OC2_SetConfig+0xac>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a1d      	ldr	r2, [pc, #116]	; (8009d60 <TIM_OC2_SetConfig+0x104>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d00b      	beq.n	8009d08 <TIM_OC2_SetConfig+0xac>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a1c      	ldr	r2, [pc, #112]	; (8009d64 <TIM_OC2_SetConfig+0x108>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d007      	beq.n	8009d08 <TIM_OC2_SetConfig+0xac>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a1b      	ldr	r2, [pc, #108]	; (8009d68 <TIM_OC2_SetConfig+0x10c>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d003      	beq.n	8009d08 <TIM_OC2_SetConfig+0xac>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a1a      	ldr	r2, [pc, #104]	; (8009d6c <TIM_OC2_SetConfig+0x110>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d113      	bne.n	8009d30 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	695b      	ldr	r3, [r3, #20]
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	699b      	ldr	r3, [r3, #24]
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	693a      	ldr	r2, [r7, #16]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	685a      	ldr	r2, [r3, #4]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	621a      	str	r2, [r3, #32]
}
 8009d4a:	bf00      	nop
 8009d4c:	371c      	adds	r7, #28
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	feff8fff 	.word	0xfeff8fff
 8009d5c:	40010000 	.word	0x40010000
 8009d60:	40010400 	.word	0x40010400
 8009d64:	40014000 	.word	0x40014000
 8009d68:	40014400 	.word	0x40014400
 8009d6c:	40014800 	.word	0x40014800

08009d70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b087      	sub	sp, #28
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6a1b      	ldr	r3, [r3, #32]
 8009d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	69db      	ldr	r3, [r3, #28]
 8009d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	4b33      	ldr	r3, [pc, #204]	; (8009e68 <TIM_OC3_SetConfig+0xf8>)
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f023 0303 	bic.w	r3, r3, #3
 8009da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	021b      	lsls	r3, r3, #8
 8009dc0:	697a      	ldr	r2, [r7, #20]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4a28      	ldr	r2, [pc, #160]	; (8009e6c <TIM_OC3_SetConfig+0xfc>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d003      	beq.n	8009dd6 <TIM_OC3_SetConfig+0x66>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a27      	ldr	r2, [pc, #156]	; (8009e70 <TIM_OC3_SetConfig+0x100>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d10d      	bne.n	8009df2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	021b      	lsls	r3, r3, #8
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a1d      	ldr	r2, [pc, #116]	; (8009e6c <TIM_OC3_SetConfig+0xfc>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d00f      	beq.n	8009e1a <TIM_OC3_SetConfig+0xaa>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a1c      	ldr	r2, [pc, #112]	; (8009e70 <TIM_OC3_SetConfig+0x100>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d00b      	beq.n	8009e1a <TIM_OC3_SetConfig+0xaa>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a1b      	ldr	r2, [pc, #108]	; (8009e74 <TIM_OC3_SetConfig+0x104>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d007      	beq.n	8009e1a <TIM_OC3_SetConfig+0xaa>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a1a      	ldr	r2, [pc, #104]	; (8009e78 <TIM_OC3_SetConfig+0x108>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d003      	beq.n	8009e1a <TIM_OC3_SetConfig+0xaa>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a19      	ldr	r2, [pc, #100]	; (8009e7c <TIM_OC3_SetConfig+0x10c>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d113      	bne.n	8009e42 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	695b      	ldr	r3, [r3, #20]
 8009e2e:	011b      	lsls	r3, r3, #4
 8009e30:	693a      	ldr	r2, [r7, #16]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	699b      	ldr	r3, [r3, #24]
 8009e3a:	011b      	lsls	r3, r3, #4
 8009e3c:	693a      	ldr	r2, [r7, #16]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	685a      	ldr	r2, [r3, #4]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	697a      	ldr	r2, [r7, #20]
 8009e5a:	621a      	str	r2, [r3, #32]
}
 8009e5c:	bf00      	nop
 8009e5e:	371c      	adds	r7, #28
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr
 8009e68:	fffeff8f 	.word	0xfffeff8f
 8009e6c:	40010000 	.word	0x40010000
 8009e70:	40010400 	.word	0x40010400
 8009e74:	40014000 	.word	0x40014000
 8009e78:	40014400 	.word	0x40014400
 8009e7c:	40014800 	.word	0x40014800

08009e80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a1b      	ldr	r3, [r3, #32]
 8009e9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	69db      	ldr	r3, [r3, #28]
 8009ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	4b24      	ldr	r3, [pc, #144]	; (8009f3c <TIM_OC4_SetConfig+0xbc>)
 8009eac:	4013      	ands	r3, r2
 8009eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	021b      	lsls	r3, r3, #8
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009eca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	031b      	lsls	r3, r3, #12
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a19      	ldr	r2, [pc, #100]	; (8009f40 <TIM_OC4_SetConfig+0xc0>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d00f      	beq.n	8009f00 <TIM_OC4_SetConfig+0x80>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a18      	ldr	r2, [pc, #96]	; (8009f44 <TIM_OC4_SetConfig+0xc4>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d00b      	beq.n	8009f00 <TIM_OC4_SetConfig+0x80>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a17      	ldr	r2, [pc, #92]	; (8009f48 <TIM_OC4_SetConfig+0xc8>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d007      	beq.n	8009f00 <TIM_OC4_SetConfig+0x80>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a16      	ldr	r2, [pc, #88]	; (8009f4c <TIM_OC4_SetConfig+0xcc>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d003      	beq.n	8009f00 <TIM_OC4_SetConfig+0x80>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a15      	ldr	r2, [pc, #84]	; (8009f50 <TIM_OC4_SetConfig+0xd0>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d109      	bne.n	8009f14 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	695b      	ldr	r3, [r3, #20]
 8009f0c:	019b      	lsls	r3, r3, #6
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	697a      	ldr	r2, [r7, #20]
 8009f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	693a      	ldr	r2, [r7, #16]
 8009f2c:	621a      	str	r2, [r3, #32]
}
 8009f2e:	bf00      	nop
 8009f30:	371c      	adds	r7, #28
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	feff8fff 	.word	0xfeff8fff
 8009f40:	40010000 	.word	0x40010000
 8009f44:	40010400 	.word	0x40010400
 8009f48:	40014000 	.word	0x40014000
 8009f4c:	40014400 	.word	0x40014400
 8009f50:	40014800 	.word	0x40014800

08009f54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b087      	sub	sp, #28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a1b      	ldr	r3, [r3, #32]
 8009f6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	4b21      	ldr	r3, [pc, #132]	; (800a004 <TIM_OC5_SetConfig+0xb0>)
 8009f80:	4013      	ands	r3, r2
 8009f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009f94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	041b      	lsls	r3, r3, #16
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a18      	ldr	r2, [pc, #96]	; (800a008 <TIM_OC5_SetConfig+0xb4>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d00f      	beq.n	8009fca <TIM_OC5_SetConfig+0x76>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a17      	ldr	r2, [pc, #92]	; (800a00c <TIM_OC5_SetConfig+0xb8>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d00b      	beq.n	8009fca <TIM_OC5_SetConfig+0x76>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a16      	ldr	r2, [pc, #88]	; (800a010 <TIM_OC5_SetConfig+0xbc>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d007      	beq.n	8009fca <TIM_OC5_SetConfig+0x76>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a15      	ldr	r2, [pc, #84]	; (800a014 <TIM_OC5_SetConfig+0xc0>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d003      	beq.n	8009fca <TIM_OC5_SetConfig+0x76>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4a14      	ldr	r2, [pc, #80]	; (800a018 <TIM_OC5_SetConfig+0xc4>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d109      	bne.n	8009fde <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	695b      	ldr	r3, [r3, #20]
 8009fd6:	021b      	lsls	r3, r3, #8
 8009fd8:	697a      	ldr	r2, [r7, #20]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	685a      	ldr	r2, [r3, #4]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	693a      	ldr	r2, [r7, #16]
 8009ff6:	621a      	str	r2, [r3, #32]
}
 8009ff8:	bf00      	nop
 8009ffa:	371c      	adds	r7, #28
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr
 800a004:	fffeff8f 	.word	0xfffeff8f
 800a008:	40010000 	.word	0x40010000
 800a00c:	40010400 	.word	0x40010400
 800a010:	40014000 	.word	0x40014000
 800a014:	40014400 	.word	0x40014400
 800a018:	40014800 	.word	0x40014800

0800a01c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b087      	sub	sp, #28
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	4b22      	ldr	r3, [pc, #136]	; (800a0d0 <TIM_OC6_SetConfig+0xb4>)
 800a048:	4013      	ands	r3, r2
 800a04a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	021b      	lsls	r3, r3, #8
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	4313      	orrs	r3, r2
 800a056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a05e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	051b      	lsls	r3, r3, #20
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	4313      	orrs	r3, r2
 800a06a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a19      	ldr	r2, [pc, #100]	; (800a0d4 <TIM_OC6_SetConfig+0xb8>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d00f      	beq.n	800a094 <TIM_OC6_SetConfig+0x78>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a18      	ldr	r2, [pc, #96]	; (800a0d8 <TIM_OC6_SetConfig+0xbc>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d00b      	beq.n	800a094 <TIM_OC6_SetConfig+0x78>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4a17      	ldr	r2, [pc, #92]	; (800a0dc <TIM_OC6_SetConfig+0xc0>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d007      	beq.n	800a094 <TIM_OC6_SetConfig+0x78>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a16      	ldr	r2, [pc, #88]	; (800a0e0 <TIM_OC6_SetConfig+0xc4>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d003      	beq.n	800a094 <TIM_OC6_SetConfig+0x78>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a15      	ldr	r2, [pc, #84]	; (800a0e4 <TIM_OC6_SetConfig+0xc8>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d109      	bne.n	800a0a8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a09a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	029b      	lsls	r3, r3, #10
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	685a      	ldr	r2, [r3, #4]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	693a      	ldr	r2, [r7, #16]
 800a0c0:	621a      	str	r2, [r3, #32]
}
 800a0c2:	bf00      	nop
 800a0c4:	371c      	adds	r7, #28
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	feff8fff 	.word	0xfeff8fff
 800a0d4:	40010000 	.word	0x40010000
 800a0d8:	40010400 	.word	0x40010400
 800a0dc:	40014000 	.word	0x40014000
 800a0e0:	40014400 	.word	0x40014400
 800a0e4:	40014800 	.word	0x40014800

0800a0e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b087      	sub	sp, #28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6a1b      	ldr	r3, [r3, #32]
 800a0f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6a1b      	ldr	r3, [r3, #32]
 800a0fe:	f023 0201 	bic.w	r2, r3, #1
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	011b      	lsls	r3, r3, #4
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f023 030a 	bic.w	r3, r3, #10
 800a124:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a126:	697a      	ldr	r2, [r7, #20]
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	697a      	ldr	r2, [r7, #20]
 800a138:	621a      	str	r2, [r3, #32]
}
 800a13a:	bf00      	nop
 800a13c:	371c      	adds	r7, #28
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a146:	b480      	push	{r7}
 800a148:	b087      	sub	sp, #28
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	60f8      	str	r0, [r7, #12]
 800a14e:	60b9      	str	r1, [r7, #8]
 800a150:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	f023 0210 	bic.w	r2, r3, #16
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6a1b      	ldr	r3, [r3, #32]
 800a168:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a170:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	031b      	lsls	r3, r3, #12
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	4313      	orrs	r3, r2
 800a17a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a182:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	011b      	lsls	r3, r3, #4
 800a188:	693a      	ldr	r2, [r7, #16]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	697a      	ldr	r2, [r7, #20]
 800a192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	621a      	str	r2, [r3, #32]
}
 800a19a:	bf00      	nop
 800a19c:	371c      	adds	r7, #28
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
	...

0800a1a8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	4b09      	ldr	r3, [pc, #36]	; (800a1e0 <TIM_ITRx_SetConfig+0x38>)
 800a1bc:	4013      	ands	r3, r2
 800a1be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1c0:	683a      	ldr	r2, [r7, #0]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	f043 0307 	orr.w	r3, r3, #7
 800a1ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	609a      	str	r2, [r3, #8]
}
 800a1d2:	bf00      	nop
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	ffcfff8f 	.word	0xffcfff8f

0800a1e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b087      	sub	sp, #28
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	607a      	str	r2, [r7, #4]
 800a1f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	021a      	lsls	r2, r3, #8
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	431a      	orrs	r2, r3
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	4313      	orrs	r3, r2
 800a210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	697a      	ldr	r2, [r7, #20]
 800a216:	609a      	str	r2, [r3, #8]
}
 800a218:	bf00      	nop
 800a21a:	371c      	adds	r7, #28
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a224:	b480      	push	{r7}
 800a226:	b087      	sub	sp, #28
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	f003 031f 	and.w	r3, r3, #31
 800a236:	2201      	movs	r2, #1
 800a238:	fa02 f303 	lsl.w	r3, r2, r3
 800a23c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6a1a      	ldr	r2, [r3, #32]
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	43db      	mvns	r3, r3
 800a246:	401a      	ands	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6a1a      	ldr	r2, [r3, #32]
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	f003 031f 	and.w	r3, r3, #31
 800a256:	6879      	ldr	r1, [r7, #4]
 800a258:	fa01 f303 	lsl.w	r3, r1, r3
 800a25c:	431a      	orrs	r2, r3
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	621a      	str	r2, [r3, #32]
}
 800a262:	bf00      	nop
 800a264:	371c      	adds	r7, #28
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
	...

0800a270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a280:	2b01      	cmp	r3, #1
 800a282:	d101      	bne.n	800a288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a284:	2302      	movs	r3, #2
 800a286:	e06d      	b.n	800a364 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2202      	movs	r2, #2
 800a294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a30      	ldr	r2, [pc, #192]	; (800a370 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d004      	beq.n	800a2bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a2f      	ldr	r2, [pc, #188]	; (800a374 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d108      	bne.n	800a2ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a2c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a20      	ldr	r2, [pc, #128]	; (800a370 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d022      	beq.n	800a338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2fa:	d01d      	beq.n	800a338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a1d      	ldr	r2, [pc, #116]	; (800a378 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d018      	beq.n	800a338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a1c      	ldr	r2, [pc, #112]	; (800a37c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d013      	beq.n	800a338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a1a      	ldr	r2, [pc, #104]	; (800a380 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d00e      	beq.n	800a338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a15      	ldr	r2, [pc, #84]	; (800a374 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d009      	beq.n	800a338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a16      	ldr	r2, [pc, #88]	; (800a384 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d004      	beq.n	800a338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a15      	ldr	r2, [pc, #84]	; (800a388 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d10c      	bne.n	800a352 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a33e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	4313      	orrs	r3, r2
 800a348:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68ba      	ldr	r2, [r7, #8]
 800a350:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3714      	adds	r7, #20
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	40010000 	.word	0x40010000
 800a374:	40010400 	.word	0x40010400
 800a378:	40000400 	.word	0x40000400
 800a37c:	40000800 	.word	0x40000800
 800a380:	40000c00 	.word	0x40000c00
 800a384:	40001800 	.word	0x40001800
 800a388:	40014000 	.word	0x40014000

0800a38c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d101      	bne.n	800a3da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e042      	b.n	800a460 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d106      	bne.n	800a3f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f7f7 fde9 	bl	8001fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2224      	movs	r2, #36	; 0x24
 800a3f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f022 0201 	bic.w	r2, r2, #1
 800a408:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fce0 	bl	800add0 <UART_SetConfig>
 800a410:	4603      	mov	r3, r0
 800a412:	2b01      	cmp	r3, #1
 800a414:	d101      	bne.n	800a41a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e022      	b.n	800a460 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d002      	beq.n	800a428 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f001 fb40 	bl	800baa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	685a      	ldr	r2, [r3, #4]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	689a      	ldr	r2, [r3, #8]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f042 0201 	orr.w	r2, r2, #1
 800a456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f001 fbc7 	bl	800bbec <UART_CheckIdleState>
 800a45e:	4603      	mov	r3, r0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b08a      	sub	sp, #40	; 0x28
 800a46c:	af02      	add	r7, sp, #8
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	603b      	str	r3, [r7, #0]
 800a474:	4613      	mov	r3, r2
 800a476:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a47e:	2b20      	cmp	r3, #32
 800a480:	d17b      	bne.n	800a57a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d002      	beq.n	800a48e <HAL_UART_Transmit+0x26>
 800a488:	88fb      	ldrh	r3, [r7, #6]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d101      	bne.n	800a492 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	e074      	b.n	800a57c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2221      	movs	r2, #33	; 0x21
 800a49e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a4a2:	f7f8 f873 	bl	800258c <HAL_GetTick>
 800a4a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	88fa      	ldrh	r2, [r7, #6]
 800a4ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	88fa      	ldrh	r2, [r7, #6]
 800a4b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4c0:	d108      	bne.n	800a4d4 <HAL_UART_Transmit+0x6c>
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d104      	bne.n	800a4d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	61bb      	str	r3, [r7, #24]
 800a4d2:	e003      	b.n	800a4dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a4dc:	e030      	b.n	800a540 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	2180      	movs	r1, #128	; 0x80
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f001 fc29 	bl	800bd40 <UART_WaitOnFlagUntilTimeout>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d005      	beq.n	800a500 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	e03d      	b.n	800a57c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10b      	bne.n	800a51e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	881b      	ldrh	r3, [r3, #0]
 800a50a:	461a      	mov	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a514:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	3302      	adds	r3, #2
 800a51a:	61bb      	str	r3, [r7, #24]
 800a51c:	e007      	b.n	800a52e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	781a      	ldrb	r2, [r3, #0]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	3301      	adds	r3, #1
 800a52c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a534:	b29b      	uxth	r3, r3
 800a536:	3b01      	subs	r3, #1
 800a538:	b29a      	uxth	r2, r3
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a546:	b29b      	uxth	r3, r3
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1c8      	bne.n	800a4de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	2200      	movs	r2, #0
 800a554:	2140      	movs	r1, #64	; 0x40
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f001 fbf2 	bl	800bd40 <UART_WaitOnFlagUntilTimeout>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d005      	beq.n	800a56e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2220      	movs	r2, #32
 800a566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a56a:	2303      	movs	r3, #3
 800a56c:	e006      	b.n	800a57c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2220      	movs	r2, #32
 800a572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a576:	2300      	movs	r3, #0
 800a578:	e000      	b.n	800a57c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a57a:	2302      	movs	r3, #2
  }
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3720      	adds	r7, #32
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b08a      	sub	sp, #40	; 0x28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	4613      	mov	r3, r2
 800a590:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a598:	2b20      	cmp	r3, #32
 800a59a:	d137      	bne.n	800a60c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d002      	beq.n	800a5a8 <HAL_UART_Receive_IT+0x24>
 800a5a2:	88fb      	ldrh	r3, [r7, #6]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d101      	bne.n	800a5ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e030      	b.n	800a60e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a18      	ldr	r2, [pc, #96]	; (800a618 <HAL_UART_Receive_IT+0x94>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d01f      	beq.n	800a5fc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d018      	beq.n	800a5fc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	e853 3f00 	ldrex	r3, [r3]
 800a5d6:	613b      	str	r3, [r7, #16]
   return(result);
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a5de:	627b      	str	r3, [r7, #36]	; 0x24
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e8:	623b      	str	r3, [r7, #32]
 800a5ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ec:	69f9      	ldr	r1, [r7, #28]
 800a5ee:	6a3a      	ldr	r2, [r7, #32]
 800a5f0:	e841 2300 	strex	r3, r2, [r1]
 800a5f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1e6      	bne.n	800a5ca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a5fc:	88fb      	ldrh	r3, [r7, #6]
 800a5fe:	461a      	mov	r2, r3
 800a600:	68b9      	ldr	r1, [r7, #8]
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f001 fc04 	bl	800be10 <UART_Start_Receive_IT>
 800a608:	4603      	mov	r3, r0
 800a60a:	e000      	b.n	800a60e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a60c:	2302      	movs	r3, #2
  }
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3728      	adds	r7, #40	; 0x28
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	58000c00 	.word	0x58000c00

0800a61c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b0ba      	sub	sp, #232	; 0xe8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	69db      	ldr	r3, [r3, #28]
 800a62a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a642:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a646:	f640 030f 	movw	r3, #2063	; 0x80f
 800a64a:	4013      	ands	r3, r2
 800a64c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a654:	2b00      	cmp	r3, #0
 800a656:	d11b      	bne.n	800a690 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a65c:	f003 0320 	and.w	r3, r3, #32
 800a660:	2b00      	cmp	r3, #0
 800a662:	d015      	beq.n	800a690 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a668:	f003 0320 	and.w	r3, r3, #32
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d105      	bne.n	800a67c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d009      	beq.n	800a690 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 8377 	beq.w	800ad74 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	4798      	blx	r3
      }
      return;
 800a68e:	e371      	b.n	800ad74 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a690:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a694:	2b00      	cmp	r3, #0
 800a696:	f000 8123 	beq.w	800a8e0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a69a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a69e:	4b8d      	ldr	r3, [pc, #564]	; (800a8d4 <HAL_UART_IRQHandler+0x2b8>)
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d106      	bne.n	800a6b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a6a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a6aa:	4b8b      	ldr	r3, [pc, #556]	; (800a8d8 <HAL_UART_IRQHandler+0x2bc>)
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f000 8116 	beq.w	800a8e0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a6b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6b8:	f003 0301 	and.w	r3, r3, #1
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d011      	beq.n	800a6e4 <HAL_UART_IRQHandler+0xc8>
 800a6c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00b      	beq.n	800a6e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6da:	f043 0201 	orr.w	r2, r3, #1
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6e8:	f003 0302 	and.w	r3, r3, #2
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d011      	beq.n	800a714 <HAL_UART_IRQHandler+0xf8>
 800a6f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00b      	beq.n	800a714 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2202      	movs	r2, #2
 800a702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a70a:	f043 0204 	orr.w	r2, r3, #4
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a718:	f003 0304 	and.w	r3, r3, #4
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d011      	beq.n	800a744 <HAL_UART_IRQHandler+0x128>
 800a720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a724:	f003 0301 	and.w	r3, r3, #1
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d00b      	beq.n	800a744 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2204      	movs	r2, #4
 800a732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a73a:	f043 0202 	orr.w	r2, r3, #2
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a748:	f003 0308 	and.w	r3, r3, #8
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d017      	beq.n	800a780 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a754:	f003 0320 	and.w	r3, r3, #32
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d105      	bne.n	800a768 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a75c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a760:	4b5c      	ldr	r3, [pc, #368]	; (800a8d4 <HAL_UART_IRQHandler+0x2b8>)
 800a762:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00b      	beq.n	800a780 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2208      	movs	r2, #8
 800a76e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a776:	f043 0208 	orr.w	r2, r3, #8
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d012      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x196>
 800a78c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a790:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00c      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7a8:	f043 0220 	orr.w	r2, r3, #32
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 82dd 	beq.w	800ad78 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7c2:	f003 0320 	and.w	r3, r3, #32
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d013      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a7ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7ce:	f003 0320 	and.w	r3, r3, #32
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d105      	bne.n	800a7e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a7d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d007      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d003      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a806:	2b40      	cmp	r3, #64	; 0x40
 800a808:	d005      	beq.n	800a816 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a80a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a80e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a812:	2b00      	cmp	r3, #0
 800a814:	d054      	beq.n	800a8c0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f001 fc1c 	bl	800c054 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a826:	2b40      	cmp	r3, #64	; 0x40
 800a828:	d146      	bne.n	800a8b8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	3308      	adds	r3, #8
 800a830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a834:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a838:	e853 3f00 	ldrex	r3, [r3]
 800a83c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a840:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	3308      	adds	r3, #8
 800a852:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a856:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a85a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a862:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a866:	e841 2300 	strex	r3, r2, [r1]
 800a86a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a86e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1d9      	bne.n	800a82a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d017      	beq.n	800a8b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a886:	4a15      	ldr	r2, [pc, #84]	; (800a8dc <HAL_UART_IRQHandler+0x2c0>)
 800a888:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a890:	4618      	mov	r0, r3
 800a892:	f7f9 fca7 	bl	80041e4 <HAL_DMA_Abort_IT>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d019      	beq.n	800a8d0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a8aa:	4610      	mov	r0, r2
 800a8ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8ae:	e00f      	b.n	800a8d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fa77 	bl	800ada4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8b6:	e00b      	b.n	800a8d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fa73 	bl	800ada4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8be:	e007      	b.n	800a8d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 fa6f 	bl	800ada4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a8ce:	e253      	b.n	800ad78 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8d0:	bf00      	nop
    return;
 800a8d2:	e251      	b.n	800ad78 <HAL_UART_IRQHandler+0x75c>
 800a8d4:	10000001 	.word	0x10000001
 800a8d8:	04000120 	.word	0x04000120
 800a8dc:	0800c121 	.word	0x0800c121

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	f040 81e7 	bne.w	800acb8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a8ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ee:	f003 0310 	and.w	r3, r3, #16
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f000 81e0 	beq.w	800acb8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a8f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8fc:	f003 0310 	and.w	r3, r3, #16
 800a900:	2b00      	cmp	r3, #0
 800a902:	f000 81d9 	beq.w	800acb8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2210      	movs	r2, #16
 800a90c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a918:	2b40      	cmp	r3, #64	; 0x40
 800a91a:	f040 8151 	bne.w	800abc0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a96      	ldr	r2, [pc, #600]	; (800ab80 <HAL_UART_IRQHandler+0x564>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d068      	beq.n	800a9fe <HAL_UART_IRQHandler+0x3e2>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a93      	ldr	r2, [pc, #588]	; (800ab84 <HAL_UART_IRQHandler+0x568>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d061      	beq.n	800a9fe <HAL_UART_IRQHandler+0x3e2>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a91      	ldr	r2, [pc, #580]	; (800ab88 <HAL_UART_IRQHandler+0x56c>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d05a      	beq.n	800a9fe <HAL_UART_IRQHandler+0x3e2>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a8e      	ldr	r2, [pc, #568]	; (800ab8c <HAL_UART_IRQHandler+0x570>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d053      	beq.n	800a9fe <HAL_UART_IRQHandler+0x3e2>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a8c      	ldr	r2, [pc, #560]	; (800ab90 <HAL_UART_IRQHandler+0x574>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d04c      	beq.n	800a9fe <HAL_UART_IRQHandler+0x3e2>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a89      	ldr	r2, [pc, #548]	; (800ab94 <HAL_UART_IRQHandler+0x578>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d045      	beq.n	800a9fe <HAL_UART_IRQHandler+0x3e2>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a87      	ldr	r2, [pc, #540]	; (800ab98 <HAL_UART_IRQHandler+0x57c>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d03e      	beq.n	800a9fe <HAL_UART_IRQHandler+0x3e2>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a84      	ldr	r2, [pc, #528]	; (800ab9c <HAL_UART_IRQHandler+0x580>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d037      	beq.n	800a9fe <HAL_UART_IRQHandler+0x3e2>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a82      	ldr	r2, [pc, #520]	; (800aba0 <HAL_UART_IRQHandler+0x584>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d030      	beq.n	800a9fe <HAL_UART_IRQHandler+0x3e2>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a7f      	ldr	r2, [pc, #508]	; (800aba4 <HAL_UART_IRQHandler+0x588>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d029      	beq.n	800a9fe <HAL_UART_IRQHandler+0x3e2>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a7d      	ldr	r2, [pc, #500]	; (800aba8 <HAL_UART_IRQHandler+0x58c>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d022      	beq.n	800a9fe <HAL_UART_IRQHandler+0x3e2>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a7a      	ldr	r2, [pc, #488]	; (800abac <HAL_UART_IRQHandler+0x590>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d01b      	beq.n	800a9fe <HAL_UART_IRQHandler+0x3e2>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a78      	ldr	r2, [pc, #480]	; (800abb0 <HAL_UART_IRQHandler+0x594>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d014      	beq.n	800a9fe <HAL_UART_IRQHandler+0x3e2>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a75      	ldr	r2, [pc, #468]	; (800abb4 <HAL_UART_IRQHandler+0x598>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d00d      	beq.n	800a9fe <HAL_UART_IRQHandler+0x3e2>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a73      	ldr	r2, [pc, #460]	; (800abb8 <HAL_UART_IRQHandler+0x59c>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d006      	beq.n	800a9fe <HAL_UART_IRQHandler+0x3e2>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a70      	ldr	r2, [pc, #448]	; (800abbc <HAL_UART_IRQHandler+0x5a0>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d106      	bne.n	800aa0c <HAL_UART_IRQHandler+0x3f0>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	e005      	b.n	800aa18 <HAL_UART_IRQHandler+0x3fc>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f000 81ab 	beq.w	800ad7c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa30:	429a      	cmp	r2, r3
 800aa32:	f080 81a3 	bcs.w	800ad7c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa46:	69db      	ldr	r3, [r3, #28]
 800aa48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa4c:	f000 8087 	beq.w	800ab5e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa5c:	e853 3f00 	ldrex	r3, [r3]
 800aa60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aa64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	461a      	mov	r2, r3
 800aa76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aa7e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aa86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aa8a:	e841 2300 	strex	r3, r2, [r1]
 800aa8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aa92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1da      	bne.n	800aa50 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	3308      	adds	r3, #8
 800aaa0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaa4:	e853 3f00 	ldrex	r3, [r3]
 800aaa8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aaaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aaac:	f023 0301 	bic.w	r3, r3, #1
 800aab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	3308      	adds	r3, #8
 800aaba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aabe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aac2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aac6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aaca:	e841 2300 	strex	r3, r2, [r1]
 800aace:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1e1      	bne.n	800aa9a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	3308      	adds	r3, #8
 800aadc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aae0:	e853 3f00 	ldrex	r3, [r3]
 800aae4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	3308      	adds	r3, #8
 800aaf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aafa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aafc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ab00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ab02:	e841 2300 	strex	r3, r2, [r1]
 800ab06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ab08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d1e3      	bne.n	800aad6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2220      	movs	r2, #32
 800ab12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab24:	e853 3f00 	ldrex	r3, [r3]
 800ab28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab2c:	f023 0310 	bic.w	r3, r3, #16
 800ab30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	461a      	mov	r2, r3
 800ab3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab3e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab40:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab46:	e841 2300 	strex	r3, r2, [r1]
 800ab4a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1e4      	bne.n	800ab1c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7f9 f825 	bl	8003ba8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2202      	movs	r2, #2
 800ab62:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	4619      	mov	r1, r3
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f91d 	bl	800adb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab7e:	e0fd      	b.n	800ad7c <HAL_UART_IRQHandler+0x760>
 800ab80:	40020010 	.word	0x40020010
 800ab84:	40020028 	.word	0x40020028
 800ab88:	40020040 	.word	0x40020040
 800ab8c:	40020058 	.word	0x40020058
 800ab90:	40020070 	.word	0x40020070
 800ab94:	40020088 	.word	0x40020088
 800ab98:	400200a0 	.word	0x400200a0
 800ab9c:	400200b8 	.word	0x400200b8
 800aba0:	40020410 	.word	0x40020410
 800aba4:	40020428 	.word	0x40020428
 800aba8:	40020440 	.word	0x40020440
 800abac:	40020458 	.word	0x40020458
 800abb0:	40020470 	.word	0x40020470
 800abb4:	40020488 	.word	0x40020488
 800abb8:	400204a0 	.word	0x400204a0
 800abbc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800abcc:	b29b      	uxth	r3, r3
 800abce:	1ad3      	subs	r3, r2, r3
 800abd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800abda:	b29b      	uxth	r3, r3
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f000 80cf 	beq.w	800ad80 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800abe2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f000 80ca 	beq.w	800ad80 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf4:	e853 3f00 	ldrex	r3, [r3]
 800abf8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800abfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	461a      	mov	r2, r3
 800ac0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ac0e:	647b      	str	r3, [r7, #68]	; 0x44
 800ac10:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac16:	e841 2300 	strex	r3, r2, [r1]
 800ac1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1e4      	bne.n	800abec <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	3308      	adds	r3, #8
 800ac28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2c:	e853 3f00 	ldrex	r3, [r3]
 800ac30:	623b      	str	r3, [r7, #32]
   return(result);
 800ac32:	6a3a      	ldr	r2, [r7, #32]
 800ac34:	4b55      	ldr	r3, [pc, #340]	; (800ad8c <HAL_UART_IRQHandler+0x770>)
 800ac36:	4013      	ands	r3, r2
 800ac38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	3308      	adds	r3, #8
 800ac42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ac46:	633a      	str	r2, [r7, #48]	; 0x30
 800ac48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac4e:	e841 2300 	strex	r3, r2, [r1]
 800ac52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1e3      	bne.n	800ac22 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2220      	movs	r2, #32
 800ac5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	e853 3f00 	ldrex	r3, [r3]
 800ac7a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f023 0310 	bic.w	r3, r3, #16
 800ac82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ac90:	61fb      	str	r3, [r7, #28]
 800ac92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac94:	69b9      	ldr	r1, [r7, #24]
 800ac96:	69fa      	ldr	r2, [r7, #28]
 800ac98:	e841 2300 	strex	r3, r2, [r1]
 800ac9c:	617b      	str	r3, [r7, #20]
   return(result);
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1e4      	bne.n	800ac6e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2202      	movs	r2, #2
 800aca8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800acaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800acae:	4619      	mov	r1, r3
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 f881 	bl	800adb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800acb6:	e063      	b.n	800ad80 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800acb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00e      	beq.n	800ace2 <HAL_UART_IRQHandler+0x6c6>
 800acc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d008      	beq.n	800ace2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800acd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f001 ff7e 	bl	800cbdc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ace0:	e051      	b.n	800ad86 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ace2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ace6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acea:	2b00      	cmp	r3, #0
 800acec:	d014      	beq.n	800ad18 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800acee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d105      	bne.n	800ad06 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800acfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d008      	beq.n	800ad18 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d03a      	beq.n	800ad84 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	4798      	blx	r3
    }
    return;
 800ad16:	e035      	b.n	800ad84 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ad18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d009      	beq.n	800ad38 <HAL_UART_IRQHandler+0x71c>
 800ad24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d003      	beq.n	800ad38 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f001 fa0b 	bl	800c14c <UART_EndTransmit_IT>
    return;
 800ad36:	e026      	b.n	800ad86 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ad38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d009      	beq.n	800ad58 <HAL_UART_IRQHandler+0x73c>
 800ad44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d003      	beq.n	800ad58 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f001 ff57 	bl	800cc04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad56:	e016      	b.n	800ad86 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ad58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d010      	beq.n	800ad86 <HAL_UART_IRQHandler+0x76a>
 800ad64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	da0c      	bge.n	800ad86 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f001 ff3f 	bl	800cbf0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad72:	e008      	b.n	800ad86 <HAL_UART_IRQHandler+0x76a>
      return;
 800ad74:	bf00      	nop
 800ad76:	e006      	b.n	800ad86 <HAL_UART_IRQHandler+0x76a>
    return;
 800ad78:	bf00      	nop
 800ad7a:	e004      	b.n	800ad86 <HAL_UART_IRQHandler+0x76a>
      return;
 800ad7c:	bf00      	nop
 800ad7e:	e002      	b.n	800ad86 <HAL_UART_IRQHandler+0x76a>
      return;
 800ad80:	bf00      	nop
 800ad82:	e000      	b.n	800ad86 <HAL_UART_IRQHandler+0x76a>
    return;
 800ad84:	bf00      	nop
  }
}
 800ad86:	37e8      	adds	r7, #232	; 0xe8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	effffffe 	.word	0xeffffffe

0800ad90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ad98:	bf00      	nop
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800adac:	bf00      	nop
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	460b      	mov	r3, r1
 800adc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800adc4:	bf00      	nop
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800add0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800add4:	b092      	sub	sp, #72	; 0x48
 800add6:	af00      	add	r7, sp, #0
 800add8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	689a      	ldr	r2, [r3, #8]
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	431a      	orrs	r2, r3
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	695b      	ldr	r3, [r3, #20]
 800adee:	431a      	orrs	r2, r3
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	69db      	ldr	r3, [r3, #28]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	4bbe      	ldr	r3, [pc, #760]	; (800b0f8 <UART_SetConfig+0x328>)
 800ae00:	4013      	ands	r3, r2
 800ae02:	697a      	ldr	r2, [r7, #20]
 800ae04:	6812      	ldr	r2, [r2, #0]
 800ae06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae08:	430b      	orrs	r3, r1
 800ae0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	68da      	ldr	r2, [r3, #12]
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	430a      	orrs	r2, r1
 800ae20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	699b      	ldr	r3, [r3, #24]
 800ae26:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4ab3      	ldr	r2, [pc, #716]	; (800b0fc <UART_SetConfig+0x32c>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d004      	beq.n	800ae3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	6a1b      	ldr	r3, [r3, #32]
 800ae36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	689a      	ldr	r2, [r3, #8]
 800ae42:	4baf      	ldr	r3, [pc, #700]	; (800b100 <UART_SetConfig+0x330>)
 800ae44:	4013      	ands	r3, r2
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	6812      	ldr	r2, [r2, #0]
 800ae4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae4c:	430b      	orrs	r3, r1
 800ae4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae56:	f023 010f 	bic.w	r1, r3, #15
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	430a      	orrs	r2, r1
 800ae64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4aa6      	ldr	r2, [pc, #664]	; (800b104 <UART_SetConfig+0x334>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d177      	bne.n	800af60 <UART_SetConfig+0x190>
 800ae70:	4ba5      	ldr	r3, [pc, #660]	; (800b108 <UART_SetConfig+0x338>)
 800ae72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae78:	2b28      	cmp	r3, #40	; 0x28
 800ae7a:	d86d      	bhi.n	800af58 <UART_SetConfig+0x188>
 800ae7c:	a201      	add	r2, pc, #4	; (adr r2, 800ae84 <UART_SetConfig+0xb4>)
 800ae7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae82:	bf00      	nop
 800ae84:	0800af29 	.word	0x0800af29
 800ae88:	0800af59 	.word	0x0800af59
 800ae8c:	0800af59 	.word	0x0800af59
 800ae90:	0800af59 	.word	0x0800af59
 800ae94:	0800af59 	.word	0x0800af59
 800ae98:	0800af59 	.word	0x0800af59
 800ae9c:	0800af59 	.word	0x0800af59
 800aea0:	0800af59 	.word	0x0800af59
 800aea4:	0800af31 	.word	0x0800af31
 800aea8:	0800af59 	.word	0x0800af59
 800aeac:	0800af59 	.word	0x0800af59
 800aeb0:	0800af59 	.word	0x0800af59
 800aeb4:	0800af59 	.word	0x0800af59
 800aeb8:	0800af59 	.word	0x0800af59
 800aebc:	0800af59 	.word	0x0800af59
 800aec0:	0800af59 	.word	0x0800af59
 800aec4:	0800af39 	.word	0x0800af39
 800aec8:	0800af59 	.word	0x0800af59
 800aecc:	0800af59 	.word	0x0800af59
 800aed0:	0800af59 	.word	0x0800af59
 800aed4:	0800af59 	.word	0x0800af59
 800aed8:	0800af59 	.word	0x0800af59
 800aedc:	0800af59 	.word	0x0800af59
 800aee0:	0800af59 	.word	0x0800af59
 800aee4:	0800af41 	.word	0x0800af41
 800aee8:	0800af59 	.word	0x0800af59
 800aeec:	0800af59 	.word	0x0800af59
 800aef0:	0800af59 	.word	0x0800af59
 800aef4:	0800af59 	.word	0x0800af59
 800aef8:	0800af59 	.word	0x0800af59
 800aefc:	0800af59 	.word	0x0800af59
 800af00:	0800af59 	.word	0x0800af59
 800af04:	0800af49 	.word	0x0800af49
 800af08:	0800af59 	.word	0x0800af59
 800af0c:	0800af59 	.word	0x0800af59
 800af10:	0800af59 	.word	0x0800af59
 800af14:	0800af59 	.word	0x0800af59
 800af18:	0800af59 	.word	0x0800af59
 800af1c:	0800af59 	.word	0x0800af59
 800af20:	0800af59 	.word	0x0800af59
 800af24:	0800af51 	.word	0x0800af51
 800af28:	2301      	movs	r3, #1
 800af2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af2e:	e326      	b.n	800b57e <UART_SetConfig+0x7ae>
 800af30:	2304      	movs	r3, #4
 800af32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af36:	e322      	b.n	800b57e <UART_SetConfig+0x7ae>
 800af38:	2308      	movs	r3, #8
 800af3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af3e:	e31e      	b.n	800b57e <UART_SetConfig+0x7ae>
 800af40:	2310      	movs	r3, #16
 800af42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af46:	e31a      	b.n	800b57e <UART_SetConfig+0x7ae>
 800af48:	2320      	movs	r3, #32
 800af4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af4e:	e316      	b.n	800b57e <UART_SetConfig+0x7ae>
 800af50:	2340      	movs	r3, #64	; 0x40
 800af52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af56:	e312      	b.n	800b57e <UART_SetConfig+0x7ae>
 800af58:	2380      	movs	r3, #128	; 0x80
 800af5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af5e:	e30e      	b.n	800b57e <UART_SetConfig+0x7ae>
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a69      	ldr	r2, [pc, #420]	; (800b10c <UART_SetConfig+0x33c>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d130      	bne.n	800afcc <UART_SetConfig+0x1fc>
 800af6a:	4b67      	ldr	r3, [pc, #412]	; (800b108 <UART_SetConfig+0x338>)
 800af6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af6e:	f003 0307 	and.w	r3, r3, #7
 800af72:	2b05      	cmp	r3, #5
 800af74:	d826      	bhi.n	800afc4 <UART_SetConfig+0x1f4>
 800af76:	a201      	add	r2, pc, #4	; (adr r2, 800af7c <UART_SetConfig+0x1ac>)
 800af78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af7c:	0800af95 	.word	0x0800af95
 800af80:	0800af9d 	.word	0x0800af9d
 800af84:	0800afa5 	.word	0x0800afa5
 800af88:	0800afad 	.word	0x0800afad
 800af8c:	0800afb5 	.word	0x0800afb5
 800af90:	0800afbd 	.word	0x0800afbd
 800af94:	2300      	movs	r3, #0
 800af96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af9a:	e2f0      	b.n	800b57e <UART_SetConfig+0x7ae>
 800af9c:	2304      	movs	r3, #4
 800af9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afa2:	e2ec      	b.n	800b57e <UART_SetConfig+0x7ae>
 800afa4:	2308      	movs	r3, #8
 800afa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afaa:	e2e8      	b.n	800b57e <UART_SetConfig+0x7ae>
 800afac:	2310      	movs	r3, #16
 800afae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afb2:	e2e4      	b.n	800b57e <UART_SetConfig+0x7ae>
 800afb4:	2320      	movs	r3, #32
 800afb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afba:	e2e0      	b.n	800b57e <UART_SetConfig+0x7ae>
 800afbc:	2340      	movs	r3, #64	; 0x40
 800afbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afc2:	e2dc      	b.n	800b57e <UART_SetConfig+0x7ae>
 800afc4:	2380      	movs	r3, #128	; 0x80
 800afc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afca:	e2d8      	b.n	800b57e <UART_SetConfig+0x7ae>
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a4f      	ldr	r2, [pc, #316]	; (800b110 <UART_SetConfig+0x340>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d130      	bne.n	800b038 <UART_SetConfig+0x268>
 800afd6:	4b4c      	ldr	r3, [pc, #304]	; (800b108 <UART_SetConfig+0x338>)
 800afd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afda:	f003 0307 	and.w	r3, r3, #7
 800afde:	2b05      	cmp	r3, #5
 800afe0:	d826      	bhi.n	800b030 <UART_SetConfig+0x260>
 800afe2:	a201      	add	r2, pc, #4	; (adr r2, 800afe8 <UART_SetConfig+0x218>)
 800afe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe8:	0800b001 	.word	0x0800b001
 800afec:	0800b009 	.word	0x0800b009
 800aff0:	0800b011 	.word	0x0800b011
 800aff4:	0800b019 	.word	0x0800b019
 800aff8:	0800b021 	.word	0x0800b021
 800affc:	0800b029 	.word	0x0800b029
 800b000:	2300      	movs	r3, #0
 800b002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b006:	e2ba      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b008:	2304      	movs	r3, #4
 800b00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b00e:	e2b6      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b010:	2308      	movs	r3, #8
 800b012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b016:	e2b2      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b018:	2310      	movs	r3, #16
 800b01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b01e:	e2ae      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b020:	2320      	movs	r3, #32
 800b022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b026:	e2aa      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b028:	2340      	movs	r3, #64	; 0x40
 800b02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b02e:	e2a6      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b030:	2380      	movs	r3, #128	; 0x80
 800b032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b036:	e2a2      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a35      	ldr	r2, [pc, #212]	; (800b114 <UART_SetConfig+0x344>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d130      	bne.n	800b0a4 <UART_SetConfig+0x2d4>
 800b042:	4b31      	ldr	r3, [pc, #196]	; (800b108 <UART_SetConfig+0x338>)
 800b044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b046:	f003 0307 	and.w	r3, r3, #7
 800b04a:	2b05      	cmp	r3, #5
 800b04c:	d826      	bhi.n	800b09c <UART_SetConfig+0x2cc>
 800b04e:	a201      	add	r2, pc, #4	; (adr r2, 800b054 <UART_SetConfig+0x284>)
 800b050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b054:	0800b06d 	.word	0x0800b06d
 800b058:	0800b075 	.word	0x0800b075
 800b05c:	0800b07d 	.word	0x0800b07d
 800b060:	0800b085 	.word	0x0800b085
 800b064:	0800b08d 	.word	0x0800b08d
 800b068:	0800b095 	.word	0x0800b095
 800b06c:	2300      	movs	r3, #0
 800b06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b072:	e284      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b074:	2304      	movs	r3, #4
 800b076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b07a:	e280      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b07c:	2308      	movs	r3, #8
 800b07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b082:	e27c      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b084:	2310      	movs	r3, #16
 800b086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b08a:	e278      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b08c:	2320      	movs	r3, #32
 800b08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b092:	e274      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b094:	2340      	movs	r3, #64	; 0x40
 800b096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b09a:	e270      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b09c:	2380      	movs	r3, #128	; 0x80
 800b09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0a2:	e26c      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a1b      	ldr	r2, [pc, #108]	; (800b118 <UART_SetConfig+0x348>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d142      	bne.n	800b134 <UART_SetConfig+0x364>
 800b0ae:	4b16      	ldr	r3, [pc, #88]	; (800b108 <UART_SetConfig+0x338>)
 800b0b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0b2:	f003 0307 	and.w	r3, r3, #7
 800b0b6:	2b05      	cmp	r3, #5
 800b0b8:	d838      	bhi.n	800b12c <UART_SetConfig+0x35c>
 800b0ba:	a201      	add	r2, pc, #4	; (adr r2, 800b0c0 <UART_SetConfig+0x2f0>)
 800b0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c0:	0800b0d9 	.word	0x0800b0d9
 800b0c4:	0800b0e1 	.word	0x0800b0e1
 800b0c8:	0800b0e9 	.word	0x0800b0e9
 800b0cc:	0800b0f1 	.word	0x0800b0f1
 800b0d0:	0800b11d 	.word	0x0800b11d
 800b0d4:	0800b125 	.word	0x0800b125
 800b0d8:	2300      	movs	r3, #0
 800b0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0de:	e24e      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b0e0:	2304      	movs	r3, #4
 800b0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0e6:	e24a      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b0e8:	2308      	movs	r3, #8
 800b0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ee:	e246      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b0f0:	2310      	movs	r3, #16
 800b0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0f6:	e242      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b0f8:	cfff69f3 	.word	0xcfff69f3
 800b0fc:	58000c00 	.word	0x58000c00
 800b100:	11fff4ff 	.word	0x11fff4ff
 800b104:	40011000 	.word	0x40011000
 800b108:	58024400 	.word	0x58024400
 800b10c:	40004400 	.word	0x40004400
 800b110:	40004800 	.word	0x40004800
 800b114:	40004c00 	.word	0x40004c00
 800b118:	40005000 	.word	0x40005000
 800b11c:	2320      	movs	r3, #32
 800b11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b122:	e22c      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b124:	2340      	movs	r3, #64	; 0x40
 800b126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b12a:	e228      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b12c:	2380      	movs	r3, #128	; 0x80
 800b12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b132:	e224      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4ab1      	ldr	r2, [pc, #708]	; (800b400 <UART_SetConfig+0x630>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d176      	bne.n	800b22c <UART_SetConfig+0x45c>
 800b13e:	4bb1      	ldr	r3, [pc, #708]	; (800b404 <UART_SetConfig+0x634>)
 800b140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b146:	2b28      	cmp	r3, #40	; 0x28
 800b148:	d86c      	bhi.n	800b224 <UART_SetConfig+0x454>
 800b14a:	a201      	add	r2, pc, #4	; (adr r2, 800b150 <UART_SetConfig+0x380>)
 800b14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b150:	0800b1f5 	.word	0x0800b1f5
 800b154:	0800b225 	.word	0x0800b225
 800b158:	0800b225 	.word	0x0800b225
 800b15c:	0800b225 	.word	0x0800b225
 800b160:	0800b225 	.word	0x0800b225
 800b164:	0800b225 	.word	0x0800b225
 800b168:	0800b225 	.word	0x0800b225
 800b16c:	0800b225 	.word	0x0800b225
 800b170:	0800b1fd 	.word	0x0800b1fd
 800b174:	0800b225 	.word	0x0800b225
 800b178:	0800b225 	.word	0x0800b225
 800b17c:	0800b225 	.word	0x0800b225
 800b180:	0800b225 	.word	0x0800b225
 800b184:	0800b225 	.word	0x0800b225
 800b188:	0800b225 	.word	0x0800b225
 800b18c:	0800b225 	.word	0x0800b225
 800b190:	0800b205 	.word	0x0800b205
 800b194:	0800b225 	.word	0x0800b225
 800b198:	0800b225 	.word	0x0800b225
 800b19c:	0800b225 	.word	0x0800b225
 800b1a0:	0800b225 	.word	0x0800b225
 800b1a4:	0800b225 	.word	0x0800b225
 800b1a8:	0800b225 	.word	0x0800b225
 800b1ac:	0800b225 	.word	0x0800b225
 800b1b0:	0800b20d 	.word	0x0800b20d
 800b1b4:	0800b225 	.word	0x0800b225
 800b1b8:	0800b225 	.word	0x0800b225
 800b1bc:	0800b225 	.word	0x0800b225
 800b1c0:	0800b225 	.word	0x0800b225
 800b1c4:	0800b225 	.word	0x0800b225
 800b1c8:	0800b225 	.word	0x0800b225
 800b1cc:	0800b225 	.word	0x0800b225
 800b1d0:	0800b215 	.word	0x0800b215
 800b1d4:	0800b225 	.word	0x0800b225
 800b1d8:	0800b225 	.word	0x0800b225
 800b1dc:	0800b225 	.word	0x0800b225
 800b1e0:	0800b225 	.word	0x0800b225
 800b1e4:	0800b225 	.word	0x0800b225
 800b1e8:	0800b225 	.word	0x0800b225
 800b1ec:	0800b225 	.word	0x0800b225
 800b1f0:	0800b21d 	.word	0x0800b21d
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1fa:	e1c0      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b1fc:	2304      	movs	r3, #4
 800b1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b202:	e1bc      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b204:	2308      	movs	r3, #8
 800b206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b20a:	e1b8      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b20c:	2310      	movs	r3, #16
 800b20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b212:	e1b4      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b214:	2320      	movs	r3, #32
 800b216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b21a:	e1b0      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b21c:	2340      	movs	r3, #64	; 0x40
 800b21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b222:	e1ac      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b224:	2380      	movs	r3, #128	; 0x80
 800b226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b22a:	e1a8      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a75      	ldr	r2, [pc, #468]	; (800b408 <UART_SetConfig+0x638>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d130      	bne.n	800b298 <UART_SetConfig+0x4c8>
 800b236:	4b73      	ldr	r3, [pc, #460]	; (800b404 <UART_SetConfig+0x634>)
 800b238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b23a:	f003 0307 	and.w	r3, r3, #7
 800b23e:	2b05      	cmp	r3, #5
 800b240:	d826      	bhi.n	800b290 <UART_SetConfig+0x4c0>
 800b242:	a201      	add	r2, pc, #4	; (adr r2, 800b248 <UART_SetConfig+0x478>)
 800b244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b248:	0800b261 	.word	0x0800b261
 800b24c:	0800b269 	.word	0x0800b269
 800b250:	0800b271 	.word	0x0800b271
 800b254:	0800b279 	.word	0x0800b279
 800b258:	0800b281 	.word	0x0800b281
 800b25c:	0800b289 	.word	0x0800b289
 800b260:	2300      	movs	r3, #0
 800b262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b266:	e18a      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b268:	2304      	movs	r3, #4
 800b26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b26e:	e186      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b270:	2308      	movs	r3, #8
 800b272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b276:	e182      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b278:	2310      	movs	r3, #16
 800b27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b27e:	e17e      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b280:	2320      	movs	r3, #32
 800b282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b286:	e17a      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b288:	2340      	movs	r3, #64	; 0x40
 800b28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b28e:	e176      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b290:	2380      	movs	r3, #128	; 0x80
 800b292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b296:	e172      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a5b      	ldr	r2, [pc, #364]	; (800b40c <UART_SetConfig+0x63c>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d130      	bne.n	800b304 <UART_SetConfig+0x534>
 800b2a2:	4b58      	ldr	r3, [pc, #352]	; (800b404 <UART_SetConfig+0x634>)
 800b2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a6:	f003 0307 	and.w	r3, r3, #7
 800b2aa:	2b05      	cmp	r3, #5
 800b2ac:	d826      	bhi.n	800b2fc <UART_SetConfig+0x52c>
 800b2ae:	a201      	add	r2, pc, #4	; (adr r2, 800b2b4 <UART_SetConfig+0x4e4>)
 800b2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b4:	0800b2cd 	.word	0x0800b2cd
 800b2b8:	0800b2d5 	.word	0x0800b2d5
 800b2bc:	0800b2dd 	.word	0x0800b2dd
 800b2c0:	0800b2e5 	.word	0x0800b2e5
 800b2c4:	0800b2ed 	.word	0x0800b2ed
 800b2c8:	0800b2f5 	.word	0x0800b2f5
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2d2:	e154      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b2d4:	2304      	movs	r3, #4
 800b2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2da:	e150      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b2dc:	2308      	movs	r3, #8
 800b2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2e2:	e14c      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b2e4:	2310      	movs	r3, #16
 800b2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ea:	e148      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b2ec:	2320      	movs	r3, #32
 800b2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2f2:	e144      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b2f4:	2340      	movs	r3, #64	; 0x40
 800b2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2fa:	e140      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b2fc:	2380      	movs	r3, #128	; 0x80
 800b2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b302:	e13c      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a41      	ldr	r2, [pc, #260]	; (800b410 <UART_SetConfig+0x640>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	f040 8082 	bne.w	800b414 <UART_SetConfig+0x644>
 800b310:	4b3c      	ldr	r3, [pc, #240]	; (800b404 <UART_SetConfig+0x634>)
 800b312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b314:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b318:	2b28      	cmp	r3, #40	; 0x28
 800b31a:	d86d      	bhi.n	800b3f8 <UART_SetConfig+0x628>
 800b31c:	a201      	add	r2, pc, #4	; (adr r2, 800b324 <UART_SetConfig+0x554>)
 800b31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b322:	bf00      	nop
 800b324:	0800b3c9 	.word	0x0800b3c9
 800b328:	0800b3f9 	.word	0x0800b3f9
 800b32c:	0800b3f9 	.word	0x0800b3f9
 800b330:	0800b3f9 	.word	0x0800b3f9
 800b334:	0800b3f9 	.word	0x0800b3f9
 800b338:	0800b3f9 	.word	0x0800b3f9
 800b33c:	0800b3f9 	.word	0x0800b3f9
 800b340:	0800b3f9 	.word	0x0800b3f9
 800b344:	0800b3d1 	.word	0x0800b3d1
 800b348:	0800b3f9 	.word	0x0800b3f9
 800b34c:	0800b3f9 	.word	0x0800b3f9
 800b350:	0800b3f9 	.word	0x0800b3f9
 800b354:	0800b3f9 	.word	0x0800b3f9
 800b358:	0800b3f9 	.word	0x0800b3f9
 800b35c:	0800b3f9 	.word	0x0800b3f9
 800b360:	0800b3f9 	.word	0x0800b3f9
 800b364:	0800b3d9 	.word	0x0800b3d9
 800b368:	0800b3f9 	.word	0x0800b3f9
 800b36c:	0800b3f9 	.word	0x0800b3f9
 800b370:	0800b3f9 	.word	0x0800b3f9
 800b374:	0800b3f9 	.word	0x0800b3f9
 800b378:	0800b3f9 	.word	0x0800b3f9
 800b37c:	0800b3f9 	.word	0x0800b3f9
 800b380:	0800b3f9 	.word	0x0800b3f9
 800b384:	0800b3e1 	.word	0x0800b3e1
 800b388:	0800b3f9 	.word	0x0800b3f9
 800b38c:	0800b3f9 	.word	0x0800b3f9
 800b390:	0800b3f9 	.word	0x0800b3f9
 800b394:	0800b3f9 	.word	0x0800b3f9
 800b398:	0800b3f9 	.word	0x0800b3f9
 800b39c:	0800b3f9 	.word	0x0800b3f9
 800b3a0:	0800b3f9 	.word	0x0800b3f9
 800b3a4:	0800b3e9 	.word	0x0800b3e9
 800b3a8:	0800b3f9 	.word	0x0800b3f9
 800b3ac:	0800b3f9 	.word	0x0800b3f9
 800b3b0:	0800b3f9 	.word	0x0800b3f9
 800b3b4:	0800b3f9 	.word	0x0800b3f9
 800b3b8:	0800b3f9 	.word	0x0800b3f9
 800b3bc:	0800b3f9 	.word	0x0800b3f9
 800b3c0:	0800b3f9 	.word	0x0800b3f9
 800b3c4:	0800b3f1 	.word	0x0800b3f1
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ce:	e0d6      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b3d0:	2304      	movs	r3, #4
 800b3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3d6:	e0d2      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b3d8:	2308      	movs	r3, #8
 800b3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3de:	e0ce      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b3e0:	2310      	movs	r3, #16
 800b3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3e6:	e0ca      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b3e8:	2320      	movs	r3, #32
 800b3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ee:	e0c6      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b3f0:	2340      	movs	r3, #64	; 0x40
 800b3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3f6:	e0c2      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b3f8:	2380      	movs	r3, #128	; 0x80
 800b3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3fe:	e0be      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b400:	40011400 	.word	0x40011400
 800b404:	58024400 	.word	0x58024400
 800b408:	40007800 	.word	0x40007800
 800b40c:	40007c00 	.word	0x40007c00
 800b410:	40011800 	.word	0x40011800
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4aad      	ldr	r2, [pc, #692]	; (800b6d0 <UART_SetConfig+0x900>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d176      	bne.n	800b50c <UART_SetConfig+0x73c>
 800b41e:	4bad      	ldr	r3, [pc, #692]	; (800b6d4 <UART_SetConfig+0x904>)
 800b420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b426:	2b28      	cmp	r3, #40	; 0x28
 800b428:	d86c      	bhi.n	800b504 <UART_SetConfig+0x734>
 800b42a:	a201      	add	r2, pc, #4	; (adr r2, 800b430 <UART_SetConfig+0x660>)
 800b42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b430:	0800b4d5 	.word	0x0800b4d5
 800b434:	0800b505 	.word	0x0800b505
 800b438:	0800b505 	.word	0x0800b505
 800b43c:	0800b505 	.word	0x0800b505
 800b440:	0800b505 	.word	0x0800b505
 800b444:	0800b505 	.word	0x0800b505
 800b448:	0800b505 	.word	0x0800b505
 800b44c:	0800b505 	.word	0x0800b505
 800b450:	0800b4dd 	.word	0x0800b4dd
 800b454:	0800b505 	.word	0x0800b505
 800b458:	0800b505 	.word	0x0800b505
 800b45c:	0800b505 	.word	0x0800b505
 800b460:	0800b505 	.word	0x0800b505
 800b464:	0800b505 	.word	0x0800b505
 800b468:	0800b505 	.word	0x0800b505
 800b46c:	0800b505 	.word	0x0800b505
 800b470:	0800b4e5 	.word	0x0800b4e5
 800b474:	0800b505 	.word	0x0800b505
 800b478:	0800b505 	.word	0x0800b505
 800b47c:	0800b505 	.word	0x0800b505
 800b480:	0800b505 	.word	0x0800b505
 800b484:	0800b505 	.word	0x0800b505
 800b488:	0800b505 	.word	0x0800b505
 800b48c:	0800b505 	.word	0x0800b505
 800b490:	0800b4ed 	.word	0x0800b4ed
 800b494:	0800b505 	.word	0x0800b505
 800b498:	0800b505 	.word	0x0800b505
 800b49c:	0800b505 	.word	0x0800b505
 800b4a0:	0800b505 	.word	0x0800b505
 800b4a4:	0800b505 	.word	0x0800b505
 800b4a8:	0800b505 	.word	0x0800b505
 800b4ac:	0800b505 	.word	0x0800b505
 800b4b0:	0800b4f5 	.word	0x0800b4f5
 800b4b4:	0800b505 	.word	0x0800b505
 800b4b8:	0800b505 	.word	0x0800b505
 800b4bc:	0800b505 	.word	0x0800b505
 800b4c0:	0800b505 	.word	0x0800b505
 800b4c4:	0800b505 	.word	0x0800b505
 800b4c8:	0800b505 	.word	0x0800b505
 800b4cc:	0800b505 	.word	0x0800b505
 800b4d0:	0800b4fd 	.word	0x0800b4fd
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4da:	e050      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b4dc:	2304      	movs	r3, #4
 800b4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4e2:	e04c      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b4e4:	2308      	movs	r3, #8
 800b4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4ea:	e048      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b4ec:	2310      	movs	r3, #16
 800b4ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4f2:	e044      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b4f4:	2320      	movs	r3, #32
 800b4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b4fa:	e040      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b4fc:	2340      	movs	r3, #64	; 0x40
 800b4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b502:	e03c      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b504:	2380      	movs	r3, #128	; 0x80
 800b506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b50a:	e038      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a71      	ldr	r2, [pc, #452]	; (800b6d8 <UART_SetConfig+0x908>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d130      	bne.n	800b578 <UART_SetConfig+0x7a8>
 800b516:	4b6f      	ldr	r3, [pc, #444]	; (800b6d4 <UART_SetConfig+0x904>)
 800b518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b51a:	f003 0307 	and.w	r3, r3, #7
 800b51e:	2b05      	cmp	r3, #5
 800b520:	d826      	bhi.n	800b570 <UART_SetConfig+0x7a0>
 800b522:	a201      	add	r2, pc, #4	; (adr r2, 800b528 <UART_SetConfig+0x758>)
 800b524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b528:	0800b541 	.word	0x0800b541
 800b52c:	0800b549 	.word	0x0800b549
 800b530:	0800b551 	.word	0x0800b551
 800b534:	0800b559 	.word	0x0800b559
 800b538:	0800b561 	.word	0x0800b561
 800b53c:	0800b569 	.word	0x0800b569
 800b540:	2302      	movs	r3, #2
 800b542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b546:	e01a      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b548:	2304      	movs	r3, #4
 800b54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b54e:	e016      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b550:	2308      	movs	r3, #8
 800b552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b556:	e012      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b558:	2310      	movs	r3, #16
 800b55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b55e:	e00e      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b560:	2320      	movs	r3, #32
 800b562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b566:	e00a      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b568:	2340      	movs	r3, #64	; 0x40
 800b56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b56e:	e006      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b570:	2380      	movs	r3, #128	; 0x80
 800b572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b576:	e002      	b.n	800b57e <UART_SetConfig+0x7ae>
 800b578:	2380      	movs	r3, #128	; 0x80
 800b57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a55      	ldr	r2, [pc, #340]	; (800b6d8 <UART_SetConfig+0x908>)
 800b584:	4293      	cmp	r3, r2
 800b586:	f040 80f8 	bne.w	800b77a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b58a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b58e:	2b20      	cmp	r3, #32
 800b590:	dc46      	bgt.n	800b620 <UART_SetConfig+0x850>
 800b592:	2b02      	cmp	r3, #2
 800b594:	db75      	blt.n	800b682 <UART_SetConfig+0x8b2>
 800b596:	3b02      	subs	r3, #2
 800b598:	2b1e      	cmp	r3, #30
 800b59a:	d872      	bhi.n	800b682 <UART_SetConfig+0x8b2>
 800b59c:	a201      	add	r2, pc, #4	; (adr r2, 800b5a4 <UART_SetConfig+0x7d4>)
 800b59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a2:	bf00      	nop
 800b5a4:	0800b627 	.word	0x0800b627
 800b5a8:	0800b683 	.word	0x0800b683
 800b5ac:	0800b62f 	.word	0x0800b62f
 800b5b0:	0800b683 	.word	0x0800b683
 800b5b4:	0800b683 	.word	0x0800b683
 800b5b8:	0800b683 	.word	0x0800b683
 800b5bc:	0800b63f 	.word	0x0800b63f
 800b5c0:	0800b683 	.word	0x0800b683
 800b5c4:	0800b683 	.word	0x0800b683
 800b5c8:	0800b683 	.word	0x0800b683
 800b5cc:	0800b683 	.word	0x0800b683
 800b5d0:	0800b683 	.word	0x0800b683
 800b5d4:	0800b683 	.word	0x0800b683
 800b5d8:	0800b683 	.word	0x0800b683
 800b5dc:	0800b64f 	.word	0x0800b64f
 800b5e0:	0800b683 	.word	0x0800b683
 800b5e4:	0800b683 	.word	0x0800b683
 800b5e8:	0800b683 	.word	0x0800b683
 800b5ec:	0800b683 	.word	0x0800b683
 800b5f0:	0800b683 	.word	0x0800b683
 800b5f4:	0800b683 	.word	0x0800b683
 800b5f8:	0800b683 	.word	0x0800b683
 800b5fc:	0800b683 	.word	0x0800b683
 800b600:	0800b683 	.word	0x0800b683
 800b604:	0800b683 	.word	0x0800b683
 800b608:	0800b683 	.word	0x0800b683
 800b60c:	0800b683 	.word	0x0800b683
 800b610:	0800b683 	.word	0x0800b683
 800b614:	0800b683 	.word	0x0800b683
 800b618:	0800b683 	.word	0x0800b683
 800b61c:	0800b675 	.word	0x0800b675
 800b620:	2b40      	cmp	r3, #64	; 0x40
 800b622:	d02a      	beq.n	800b67a <UART_SetConfig+0x8aa>
 800b624:	e02d      	b.n	800b682 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b626:	f7fc fe3f 	bl	80082a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b62a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b62c:	e02f      	b.n	800b68e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b62e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b632:	4618      	mov	r0, r3
 800b634:	f7fc fe4e 	bl	80082d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b63c:	e027      	b.n	800b68e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b63e:	f107 0318 	add.w	r3, r7, #24
 800b642:	4618      	mov	r0, r3
 800b644:	f7fc ff9a 	bl	800857c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b64c:	e01f      	b.n	800b68e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b64e:	4b21      	ldr	r3, [pc, #132]	; (800b6d4 <UART_SetConfig+0x904>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f003 0320 	and.w	r3, r3, #32
 800b656:	2b00      	cmp	r3, #0
 800b658:	d009      	beq.n	800b66e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b65a:	4b1e      	ldr	r3, [pc, #120]	; (800b6d4 <UART_SetConfig+0x904>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	08db      	lsrs	r3, r3, #3
 800b660:	f003 0303 	and.w	r3, r3, #3
 800b664:	4a1d      	ldr	r2, [pc, #116]	; (800b6dc <UART_SetConfig+0x90c>)
 800b666:	fa22 f303 	lsr.w	r3, r2, r3
 800b66a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b66c:	e00f      	b.n	800b68e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b66e:	4b1b      	ldr	r3, [pc, #108]	; (800b6dc <UART_SetConfig+0x90c>)
 800b670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b672:	e00c      	b.n	800b68e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b674:	4b1a      	ldr	r3, [pc, #104]	; (800b6e0 <UART_SetConfig+0x910>)
 800b676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b678:	e009      	b.n	800b68e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b67a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b67e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b680:	e005      	b.n	800b68e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b682:	2300      	movs	r3, #0
 800b684:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b686:	2301      	movs	r3, #1
 800b688:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b68c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b68e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b690:	2b00      	cmp	r3, #0
 800b692:	f000 81ee 	beq.w	800ba72 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69a:	4a12      	ldr	r2, [pc, #72]	; (800b6e4 <UART_SetConfig+0x914>)
 800b69c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6a8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	685a      	ldr	r2, [r3, #4]
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	005b      	lsls	r3, r3, #1
 800b6b2:	4413      	add	r3, r2
 800b6b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d305      	bcc.n	800b6c6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d910      	bls.n	800b6e8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b6cc:	e1d1      	b.n	800ba72 <UART_SetConfig+0xca2>
 800b6ce:	bf00      	nop
 800b6d0:	40011c00 	.word	0x40011c00
 800b6d4:	58024400 	.word	0x58024400
 800b6d8:	58000c00 	.word	0x58000c00
 800b6dc:	03d09000 	.word	0x03d09000
 800b6e0:	003d0900 	.word	0x003d0900
 800b6e4:	0800fb08 	.word	0x0800fb08
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	60bb      	str	r3, [r7, #8]
 800b6ee:	60fa      	str	r2, [r7, #12]
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f4:	4ac0      	ldr	r2, [pc, #768]	; (800b9f8 <UART_SetConfig+0xc28>)
 800b6f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	603b      	str	r3, [r7, #0]
 800b700:	607a      	str	r2, [r7, #4]
 800b702:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b706:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b70a:	f7f4 fe49 	bl	80003a0 <__aeabi_uldivmod>
 800b70e:	4602      	mov	r2, r0
 800b710:	460b      	mov	r3, r1
 800b712:	4610      	mov	r0, r2
 800b714:	4619      	mov	r1, r3
 800b716:	f04f 0200 	mov.w	r2, #0
 800b71a:	f04f 0300 	mov.w	r3, #0
 800b71e:	020b      	lsls	r3, r1, #8
 800b720:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b724:	0202      	lsls	r2, r0, #8
 800b726:	6979      	ldr	r1, [r7, #20]
 800b728:	6849      	ldr	r1, [r1, #4]
 800b72a:	0849      	lsrs	r1, r1, #1
 800b72c:	2000      	movs	r0, #0
 800b72e:	460c      	mov	r4, r1
 800b730:	4605      	mov	r5, r0
 800b732:	eb12 0804 	adds.w	r8, r2, r4
 800b736:	eb43 0905 	adc.w	r9, r3, r5
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	469a      	mov	sl, r3
 800b742:	4693      	mov	fp, r2
 800b744:	4652      	mov	r2, sl
 800b746:	465b      	mov	r3, fp
 800b748:	4640      	mov	r0, r8
 800b74a:	4649      	mov	r1, r9
 800b74c:	f7f4 fe28 	bl	80003a0 <__aeabi_uldivmod>
 800b750:	4602      	mov	r2, r0
 800b752:	460b      	mov	r3, r1
 800b754:	4613      	mov	r3, r2
 800b756:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b75e:	d308      	bcc.n	800b772 <UART_SetConfig+0x9a2>
 800b760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b766:	d204      	bcs.n	800b772 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b76e:	60da      	str	r2, [r3, #12]
 800b770:	e17f      	b.n	800ba72 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b778:	e17b      	b.n	800ba72 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	69db      	ldr	r3, [r3, #28]
 800b77e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b782:	f040 80bd 	bne.w	800b900 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b786:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b78a:	2b20      	cmp	r3, #32
 800b78c:	dc48      	bgt.n	800b820 <UART_SetConfig+0xa50>
 800b78e:	2b00      	cmp	r3, #0
 800b790:	db7b      	blt.n	800b88a <UART_SetConfig+0xaba>
 800b792:	2b20      	cmp	r3, #32
 800b794:	d879      	bhi.n	800b88a <UART_SetConfig+0xaba>
 800b796:	a201      	add	r2, pc, #4	; (adr r2, 800b79c <UART_SetConfig+0x9cc>)
 800b798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b79c:	0800b827 	.word	0x0800b827
 800b7a0:	0800b82f 	.word	0x0800b82f
 800b7a4:	0800b88b 	.word	0x0800b88b
 800b7a8:	0800b88b 	.word	0x0800b88b
 800b7ac:	0800b837 	.word	0x0800b837
 800b7b0:	0800b88b 	.word	0x0800b88b
 800b7b4:	0800b88b 	.word	0x0800b88b
 800b7b8:	0800b88b 	.word	0x0800b88b
 800b7bc:	0800b847 	.word	0x0800b847
 800b7c0:	0800b88b 	.word	0x0800b88b
 800b7c4:	0800b88b 	.word	0x0800b88b
 800b7c8:	0800b88b 	.word	0x0800b88b
 800b7cc:	0800b88b 	.word	0x0800b88b
 800b7d0:	0800b88b 	.word	0x0800b88b
 800b7d4:	0800b88b 	.word	0x0800b88b
 800b7d8:	0800b88b 	.word	0x0800b88b
 800b7dc:	0800b857 	.word	0x0800b857
 800b7e0:	0800b88b 	.word	0x0800b88b
 800b7e4:	0800b88b 	.word	0x0800b88b
 800b7e8:	0800b88b 	.word	0x0800b88b
 800b7ec:	0800b88b 	.word	0x0800b88b
 800b7f0:	0800b88b 	.word	0x0800b88b
 800b7f4:	0800b88b 	.word	0x0800b88b
 800b7f8:	0800b88b 	.word	0x0800b88b
 800b7fc:	0800b88b 	.word	0x0800b88b
 800b800:	0800b88b 	.word	0x0800b88b
 800b804:	0800b88b 	.word	0x0800b88b
 800b808:	0800b88b 	.word	0x0800b88b
 800b80c:	0800b88b 	.word	0x0800b88b
 800b810:	0800b88b 	.word	0x0800b88b
 800b814:	0800b88b 	.word	0x0800b88b
 800b818:	0800b88b 	.word	0x0800b88b
 800b81c:	0800b87d 	.word	0x0800b87d
 800b820:	2b40      	cmp	r3, #64	; 0x40
 800b822:	d02e      	beq.n	800b882 <UART_SetConfig+0xab2>
 800b824:	e031      	b.n	800b88a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b826:	f7fa fe7d 	bl	8006524 <HAL_RCC_GetPCLK1Freq>
 800b82a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b82c:	e033      	b.n	800b896 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b82e:	f7fa fe8f 	bl	8006550 <HAL_RCC_GetPCLK2Freq>
 800b832:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b834:	e02f      	b.n	800b896 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fc fd4a 	bl	80082d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b844:	e027      	b.n	800b896 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b846:	f107 0318 	add.w	r3, r7, #24
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7fc fe96 	bl	800857c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b854:	e01f      	b.n	800b896 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b856:	4b69      	ldr	r3, [pc, #420]	; (800b9fc <UART_SetConfig+0xc2c>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f003 0320 	and.w	r3, r3, #32
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d009      	beq.n	800b876 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b862:	4b66      	ldr	r3, [pc, #408]	; (800b9fc <UART_SetConfig+0xc2c>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	08db      	lsrs	r3, r3, #3
 800b868:	f003 0303 	and.w	r3, r3, #3
 800b86c:	4a64      	ldr	r2, [pc, #400]	; (800ba00 <UART_SetConfig+0xc30>)
 800b86e:	fa22 f303 	lsr.w	r3, r2, r3
 800b872:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b874:	e00f      	b.n	800b896 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b876:	4b62      	ldr	r3, [pc, #392]	; (800ba00 <UART_SetConfig+0xc30>)
 800b878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b87a:	e00c      	b.n	800b896 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b87c:	4b61      	ldr	r3, [pc, #388]	; (800ba04 <UART_SetConfig+0xc34>)
 800b87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b880:	e009      	b.n	800b896 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b888:	e005      	b.n	800b896 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b88a:	2300      	movs	r3, #0
 800b88c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b88e:	2301      	movs	r3, #1
 800b890:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b894:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f000 80ea 	beq.w	800ba72 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a2:	4a55      	ldr	r2, [pc, #340]	; (800b9f8 <UART_SetConfig+0xc28>)
 800b8a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8b0:	005a      	lsls	r2, r3, #1
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	085b      	lsrs	r3, r3, #1
 800b8b8:	441a      	add	r2, r3
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c6:	2b0f      	cmp	r3, #15
 800b8c8:	d916      	bls.n	800b8f8 <UART_SetConfig+0xb28>
 800b8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8d0:	d212      	bcs.n	800b8f8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	f023 030f 	bic.w	r3, r3, #15
 800b8da:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8de:	085b      	lsrs	r3, r3, #1
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	f003 0307 	and.w	r3, r3, #7
 800b8e6:	b29a      	uxth	r2, r3
 800b8e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b8f4:	60da      	str	r2, [r3, #12]
 800b8f6:	e0bc      	b.n	800ba72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b8fe:	e0b8      	b.n	800ba72 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b900:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b904:	2b20      	cmp	r3, #32
 800b906:	dc4b      	bgt.n	800b9a0 <UART_SetConfig+0xbd0>
 800b908:	2b00      	cmp	r3, #0
 800b90a:	f2c0 8087 	blt.w	800ba1c <UART_SetConfig+0xc4c>
 800b90e:	2b20      	cmp	r3, #32
 800b910:	f200 8084 	bhi.w	800ba1c <UART_SetConfig+0xc4c>
 800b914:	a201      	add	r2, pc, #4	; (adr r2, 800b91c <UART_SetConfig+0xb4c>)
 800b916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b91a:	bf00      	nop
 800b91c:	0800b9a7 	.word	0x0800b9a7
 800b920:	0800b9af 	.word	0x0800b9af
 800b924:	0800ba1d 	.word	0x0800ba1d
 800b928:	0800ba1d 	.word	0x0800ba1d
 800b92c:	0800b9b7 	.word	0x0800b9b7
 800b930:	0800ba1d 	.word	0x0800ba1d
 800b934:	0800ba1d 	.word	0x0800ba1d
 800b938:	0800ba1d 	.word	0x0800ba1d
 800b93c:	0800b9c7 	.word	0x0800b9c7
 800b940:	0800ba1d 	.word	0x0800ba1d
 800b944:	0800ba1d 	.word	0x0800ba1d
 800b948:	0800ba1d 	.word	0x0800ba1d
 800b94c:	0800ba1d 	.word	0x0800ba1d
 800b950:	0800ba1d 	.word	0x0800ba1d
 800b954:	0800ba1d 	.word	0x0800ba1d
 800b958:	0800ba1d 	.word	0x0800ba1d
 800b95c:	0800b9d7 	.word	0x0800b9d7
 800b960:	0800ba1d 	.word	0x0800ba1d
 800b964:	0800ba1d 	.word	0x0800ba1d
 800b968:	0800ba1d 	.word	0x0800ba1d
 800b96c:	0800ba1d 	.word	0x0800ba1d
 800b970:	0800ba1d 	.word	0x0800ba1d
 800b974:	0800ba1d 	.word	0x0800ba1d
 800b978:	0800ba1d 	.word	0x0800ba1d
 800b97c:	0800ba1d 	.word	0x0800ba1d
 800b980:	0800ba1d 	.word	0x0800ba1d
 800b984:	0800ba1d 	.word	0x0800ba1d
 800b988:	0800ba1d 	.word	0x0800ba1d
 800b98c:	0800ba1d 	.word	0x0800ba1d
 800b990:	0800ba1d 	.word	0x0800ba1d
 800b994:	0800ba1d 	.word	0x0800ba1d
 800b998:	0800ba1d 	.word	0x0800ba1d
 800b99c:	0800ba0f 	.word	0x0800ba0f
 800b9a0:	2b40      	cmp	r3, #64	; 0x40
 800b9a2:	d037      	beq.n	800ba14 <UART_SetConfig+0xc44>
 800b9a4:	e03a      	b.n	800ba1c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9a6:	f7fa fdbd 	bl	8006524 <HAL_RCC_GetPCLK1Freq>
 800b9aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b9ac:	e03c      	b.n	800ba28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9ae:	f7fa fdcf 	bl	8006550 <HAL_RCC_GetPCLK2Freq>
 800b9b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b9b4:	e038      	b.n	800ba28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fc fc8a 	bl	80082d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9c4:	e030      	b.n	800ba28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9c6:	f107 0318 	add.w	r3, r7, #24
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7fc fdd6 	bl	800857c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9d4:	e028      	b.n	800ba28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9d6:	4b09      	ldr	r3, [pc, #36]	; (800b9fc <UART_SetConfig+0xc2c>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 0320 	and.w	r3, r3, #32
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d012      	beq.n	800ba08 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b9e2:	4b06      	ldr	r3, [pc, #24]	; (800b9fc <UART_SetConfig+0xc2c>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	08db      	lsrs	r3, r3, #3
 800b9e8:	f003 0303 	and.w	r3, r3, #3
 800b9ec:	4a04      	ldr	r2, [pc, #16]	; (800ba00 <UART_SetConfig+0xc30>)
 800b9ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b9f4:	e018      	b.n	800ba28 <UART_SetConfig+0xc58>
 800b9f6:	bf00      	nop
 800b9f8:	0800fb08 	.word	0x0800fb08
 800b9fc:	58024400 	.word	0x58024400
 800ba00:	03d09000 	.word	0x03d09000
 800ba04:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ba08:	4b24      	ldr	r3, [pc, #144]	; (800ba9c <UART_SetConfig+0xccc>)
 800ba0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba0c:	e00c      	b.n	800ba28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba0e:	4b24      	ldr	r3, [pc, #144]	; (800baa0 <UART_SetConfig+0xcd0>)
 800ba10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba12:	e009      	b.n	800ba28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba1a:	e005      	b.n	800ba28 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ba20:	2301      	movs	r3, #1
 800ba22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ba26:	bf00      	nop
    }

    if (pclk != 0U)
 800ba28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d021      	beq.n	800ba72 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba32:	4a1c      	ldr	r2, [pc, #112]	; (800baa4 <UART_SetConfig+0xcd4>)
 800ba34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba38:	461a      	mov	r2, r3
 800ba3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba3c:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	085b      	lsrs	r3, r3, #1
 800ba46:	441a      	add	r2, r3
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba50:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba54:	2b0f      	cmp	r3, #15
 800ba56:	d909      	bls.n	800ba6c <UART_SetConfig+0xc9c>
 800ba58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba5e:	d205      	bcs.n	800ba6c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba62:	b29a      	uxth	r2, r3
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	60da      	str	r2, [r3, #12]
 800ba6a:	e002      	b.n	800ba72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	2201      	movs	r2, #1
 800ba76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	2200      	movs	r2, #0
 800ba86:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ba8e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3748      	adds	r7, #72	; 0x48
 800ba96:	46bd      	mov	sp, r7
 800ba98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba9c:	03d09000 	.word	0x03d09000
 800baa0:	003d0900 	.word	0x003d0900
 800baa4:	0800fb08 	.word	0x0800fb08

0800baa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab4:	f003 0301 	and.w	r3, r3, #1
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00a      	beq.n	800bad2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	430a      	orrs	r2, r1
 800bad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad6:	f003 0302 	and.w	r3, r3, #2
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00a      	beq.n	800baf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	430a      	orrs	r2, r1
 800baf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf8:	f003 0304 	and.w	r3, r3, #4
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d00a      	beq.n	800bb16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	430a      	orrs	r2, r1
 800bb14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb1a:	f003 0308 	and.w	r3, r3, #8
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00a      	beq.n	800bb38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	430a      	orrs	r2, r1
 800bb36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb3c:	f003 0310 	and.w	r3, r3, #16
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00a      	beq.n	800bb5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	430a      	orrs	r2, r1
 800bb58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb5e:	f003 0320 	and.w	r3, r3, #32
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00a      	beq.n	800bb7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	430a      	orrs	r2, r1
 800bb7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d01a      	beq.n	800bbbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	430a      	orrs	r2, r1
 800bb9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bba6:	d10a      	bne.n	800bbbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	430a      	orrs	r2, r1
 800bbbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00a      	beq.n	800bbe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	430a      	orrs	r2, r1
 800bbde:	605a      	str	r2, [r3, #4]
  }
}
 800bbe0:	bf00      	nop
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b098      	sub	sp, #96	; 0x60
 800bbf0:	af02      	add	r7, sp, #8
 800bbf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bbfc:	f7f6 fcc6 	bl	800258c <HAL_GetTick>
 800bc00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f003 0308 	and.w	r3, r3, #8
 800bc0c:	2b08      	cmp	r3, #8
 800bc0e:	d12f      	bne.n	800bc70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 f88e 	bl	800bd40 <UART_WaitOnFlagUntilTimeout>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d022      	beq.n	800bc70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc32:	e853 3f00 	ldrex	r3, [r3]
 800bc36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc3e:	653b      	str	r3, [r7, #80]	; 0x50
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	461a      	mov	r2, r3
 800bc46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc48:	647b      	str	r3, [r7, #68]	; 0x44
 800bc4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc50:	e841 2300 	strex	r3, r2, [r1]
 800bc54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1e6      	bne.n	800bc2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2220      	movs	r2, #32
 800bc60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc6c:	2303      	movs	r3, #3
 800bc6e:	e063      	b.n	800bd38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f003 0304 	and.w	r3, r3, #4
 800bc7a:	2b04      	cmp	r3, #4
 800bc7c:	d149      	bne.n	800bd12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc86:	2200      	movs	r2, #0
 800bc88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 f857 	bl	800bd40 <UART_WaitOnFlagUntilTimeout>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d03c      	beq.n	800bd12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca0:	e853 3f00 	ldrex	r3, [r3]
 800bca4:	623b      	str	r3, [r7, #32]
   return(result);
 800bca6:	6a3b      	ldr	r3, [r7, #32]
 800bca8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bcac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcb6:	633b      	str	r3, [r7, #48]	; 0x30
 800bcb8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcbe:	e841 2300 	strex	r3, r2, [r1]
 800bcc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1e6      	bne.n	800bc98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	3308      	adds	r3, #8
 800bcd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	e853 3f00 	ldrex	r3, [r3]
 800bcd8:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f023 0301 	bic.w	r3, r3, #1
 800bce0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3308      	adds	r3, #8
 800bce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcea:	61fa      	str	r2, [r7, #28]
 800bcec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcee:	69b9      	ldr	r1, [r7, #24]
 800bcf0:	69fa      	ldr	r2, [r7, #28]
 800bcf2:	e841 2300 	strex	r3, r2, [r1]
 800bcf6:	617b      	str	r3, [r7, #20]
   return(result);
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1e5      	bne.n	800bcca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2220      	movs	r2, #32
 800bd02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd0e:	2303      	movs	r3, #3
 800bd10:	e012      	b.n	800bd38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2220      	movs	r2, #32
 800bd16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2220      	movs	r2, #32
 800bd1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2200      	movs	r2, #0
 800bd32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3758      	adds	r7, #88	; 0x58
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	603b      	str	r3, [r7, #0]
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd50:	e049      	b.n	800bde6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd58:	d045      	beq.n	800bde6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd5a:	f7f6 fc17 	bl	800258c <HAL_GetTick>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	1ad3      	subs	r3, r2, r3
 800bd64:	69ba      	ldr	r2, [r7, #24]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d302      	bcc.n	800bd70 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d101      	bne.n	800bd74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bd70:	2303      	movs	r3, #3
 800bd72:	e048      	b.n	800be06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f003 0304 	and.w	r3, r3, #4
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d031      	beq.n	800bde6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	69db      	ldr	r3, [r3, #28]
 800bd88:	f003 0308 	and.w	r3, r3, #8
 800bd8c:	2b08      	cmp	r3, #8
 800bd8e:	d110      	bne.n	800bdb2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2208      	movs	r2, #8
 800bd96:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f000 f95b 	bl	800c054 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2208      	movs	r2, #8
 800bda2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e029      	b.n	800be06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	69db      	ldr	r3, [r3, #28]
 800bdb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdc0:	d111      	bne.n	800bde6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bdca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f000 f941 	bl	800c054 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2220      	movs	r2, #32
 800bdd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2200      	movs	r2, #0
 800bdde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bde2:	2303      	movs	r3, #3
 800bde4:	e00f      	b.n	800be06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	69da      	ldr	r2, [r3, #28]
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	4013      	ands	r3, r2
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	bf0c      	ite	eq
 800bdf6:	2301      	moveq	r3, #1
 800bdf8:	2300      	movne	r3, #0
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	79fb      	ldrb	r3, [r7, #7]
 800be00:	429a      	cmp	r2, r3
 800be02:	d0a6      	beq.n	800bd52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3710      	adds	r7, #16
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
	...

0800be10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be10:	b480      	push	{r7}
 800be12:	b0a3      	sub	sp, #140	; 0x8c
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	4613      	mov	r3, r2
 800be1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	88fa      	ldrh	r2, [r7, #6]
 800be28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	88fa      	ldrh	r2, [r7, #6]
 800be30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2200      	movs	r2, #0
 800be38:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be42:	d10e      	bne.n	800be62 <UART_Start_Receive_IT+0x52>
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d105      	bne.n	800be58 <UART_Start_Receive_IT+0x48>
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800be52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be56:	e02d      	b.n	800beb4 <UART_Start_Receive_IT+0xa4>
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	22ff      	movs	r2, #255	; 0xff
 800be5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be60:	e028      	b.n	800beb4 <UART_Start_Receive_IT+0xa4>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10d      	bne.n	800be86 <UART_Start_Receive_IT+0x76>
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	691b      	ldr	r3, [r3, #16]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d104      	bne.n	800be7c <UART_Start_Receive_IT+0x6c>
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	22ff      	movs	r2, #255	; 0xff
 800be76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be7a:	e01b      	b.n	800beb4 <UART_Start_Receive_IT+0xa4>
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	227f      	movs	r2, #127	; 0x7f
 800be80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be84:	e016      	b.n	800beb4 <UART_Start_Receive_IT+0xa4>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be8e:	d10d      	bne.n	800beac <UART_Start_Receive_IT+0x9c>
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	691b      	ldr	r3, [r3, #16]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d104      	bne.n	800bea2 <UART_Start_Receive_IT+0x92>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	227f      	movs	r2, #127	; 0x7f
 800be9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bea0:	e008      	b.n	800beb4 <UART_Start_Receive_IT+0xa4>
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	223f      	movs	r2, #63	; 0x3f
 800bea6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800beaa:	e003      	b.n	800beb4 <UART_Start_Receive_IT+0xa4>
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2200      	movs	r2, #0
 800beb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2222      	movs	r2, #34	; 0x22
 800bec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	3308      	adds	r3, #8
 800beca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800becc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bece:	e853 3f00 	ldrex	r3, [r3]
 800bed2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bed6:	f043 0301 	orr.w	r3, r3, #1
 800beda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	3308      	adds	r3, #8
 800bee4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bee8:	673a      	str	r2, [r7, #112]	; 0x70
 800beea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800beee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bef0:	e841 2300 	strex	r3, r2, [r1]
 800bef4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800bef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1e3      	bne.n	800bec4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf04:	d14f      	bne.n	800bfa6 <UART_Start_Receive_IT+0x196>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bf0c:	88fa      	ldrh	r2, [r7, #6]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d349      	bcc.n	800bfa6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf1a:	d107      	bne.n	800bf2c <UART_Start_Receive_IT+0x11c>
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d103      	bne.n	800bf2c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	4a47      	ldr	r2, [pc, #284]	; (800c044 <UART_Start_Receive_IT+0x234>)
 800bf28:	675a      	str	r2, [r3, #116]	; 0x74
 800bf2a:	e002      	b.n	800bf32 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	4a46      	ldr	r2, [pc, #280]	; (800c048 <UART_Start_Receive_IT+0x238>)
 800bf30:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d01a      	beq.n	800bf70 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf42:	e853 3f00 	ldrex	r3, [r3]
 800bf46:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bf48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	461a      	mov	r2, r3
 800bf58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bf5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf5e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf64:	e841 2300 	strex	r3, r2, [r1]
 800bf68:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bf6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1e4      	bne.n	800bf3a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	3308      	adds	r3, #8
 800bf76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf7a:	e853 3f00 	ldrex	r3, [r3]
 800bf7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf86:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	3308      	adds	r3, #8
 800bf8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bf90:	64ba      	str	r2, [r7, #72]	; 0x48
 800bf92:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf98:	e841 2300 	strex	r3, r2, [r1]
 800bf9c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bf9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1e5      	bne.n	800bf70 <UART_Start_Receive_IT+0x160>
 800bfa4:	e046      	b.n	800c034 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfae:	d107      	bne.n	800bfc0 <UART_Start_Receive_IT+0x1b0>
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d103      	bne.n	800bfc0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	4a24      	ldr	r2, [pc, #144]	; (800c04c <UART_Start_Receive_IT+0x23c>)
 800bfbc:	675a      	str	r2, [r3, #116]	; 0x74
 800bfbe:	e002      	b.n	800bfc6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	4a23      	ldr	r2, [pc, #140]	; (800c050 <UART_Start_Receive_IT+0x240>)
 800bfc4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	691b      	ldr	r3, [r3, #16]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d019      	beq.n	800c002 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd6:	e853 3f00 	ldrex	r3, [r3]
 800bfda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfde:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bfe2:	677b      	str	r3, [r7, #116]	; 0x74
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	461a      	mov	r2, r3
 800bfea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bfec:	637b      	str	r3, [r7, #52]	; 0x34
 800bfee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bff4:	e841 2300 	strex	r3, r2, [r1]
 800bff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d1e6      	bne.n	800bfce <UART_Start_Receive_IT+0x1be>
 800c000:	e018      	b.n	800c034 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	e853 3f00 	ldrex	r3, [r3]
 800c00e:	613b      	str	r3, [r7, #16]
   return(result);
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	f043 0320 	orr.w	r3, r3, #32
 800c016:	67bb      	str	r3, [r7, #120]	; 0x78
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	461a      	mov	r2, r3
 800c01e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c020:	623b      	str	r3, [r7, #32]
 800c022:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c024:	69f9      	ldr	r1, [r7, #28]
 800c026:	6a3a      	ldr	r2, [r7, #32]
 800c028:	e841 2300 	strex	r3, r2, [r1]
 800c02c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1e6      	bne.n	800c002 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c034:	2300      	movs	r3, #0
}
 800c036:	4618      	mov	r0, r3
 800c038:	378c      	adds	r7, #140	; 0x8c
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	0800c875 	.word	0x0800c875
 800c048:	0800c515 	.word	0x0800c515
 800c04c:	0800c35d 	.word	0x0800c35d
 800c050:	0800c1a5 	.word	0x0800c1a5

0800c054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c054:	b480      	push	{r7}
 800c056:	b095      	sub	sp, #84	; 0x54
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c064:	e853 3f00 	ldrex	r3, [r3]
 800c068:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c070:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	461a      	mov	r2, r3
 800c078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c07a:	643b      	str	r3, [r7, #64]	; 0x40
 800c07c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c080:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c082:	e841 2300 	strex	r3, r2, [r1]
 800c086:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d1e6      	bne.n	800c05c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	3308      	adds	r3, #8
 800c094:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c096:	6a3b      	ldr	r3, [r7, #32]
 800c098:	e853 3f00 	ldrex	r3, [r3]
 800c09c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c09e:	69fa      	ldr	r2, [r7, #28]
 800c0a0:	4b1e      	ldr	r3, [pc, #120]	; (800c11c <UART_EndRxTransfer+0xc8>)
 800c0a2:	4013      	ands	r3, r2
 800c0a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	3308      	adds	r3, #8
 800c0ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0b6:	e841 2300 	strex	r3, r2, [r1]
 800c0ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1e5      	bne.n	800c08e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d118      	bne.n	800c0fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	e853 3f00 	ldrex	r3, [r3]
 800c0d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	f023 0310 	bic.w	r3, r3, #16
 800c0de:	647b      	str	r3, [r7, #68]	; 0x44
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0e8:	61bb      	str	r3, [r7, #24]
 800c0ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ec:	6979      	ldr	r1, [r7, #20]
 800c0ee:	69ba      	ldr	r2, [r7, #24]
 800c0f0:	e841 2300 	strex	r3, r2, [r1]
 800c0f4:	613b      	str	r3, [r7, #16]
   return(result);
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1e6      	bne.n	800c0ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2220      	movs	r2, #32
 800c100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c110:	bf00      	nop
 800c112:	3754      	adds	r7, #84	; 0x54
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr
 800c11c:	effffffe 	.word	0xeffffffe

0800c120 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c12c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2200      	movs	r2, #0
 800c132:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2200      	movs	r2, #0
 800c13a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c13e:	68f8      	ldr	r0, [r7, #12]
 800c140:	f7fe fe30 	bl	800ada4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c144:	bf00      	nop
 800c146:	3710      	adds	r7, #16
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b088      	sub	sp, #32
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	e853 3f00 	ldrex	r3, [r3]
 800c160:	60bb      	str	r3, [r7, #8]
   return(result);
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c168:	61fb      	str	r3, [r7, #28]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	461a      	mov	r2, r3
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	61bb      	str	r3, [r7, #24]
 800c174:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c176:	6979      	ldr	r1, [r7, #20]
 800c178:	69ba      	ldr	r2, [r7, #24]
 800c17a:	e841 2300 	strex	r3, r2, [r1]
 800c17e:	613b      	str	r3, [r7, #16]
   return(result);
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d1e6      	bne.n	800c154 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2220      	movs	r2, #32
 800c18a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f7fe fdfb 	bl	800ad90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c19a:	bf00      	nop
 800c19c:	3720      	adds	r7, #32
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
	...

0800c1a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b09c      	sub	sp, #112	; 0x70
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c1b2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1bc:	2b22      	cmp	r3, #34	; 0x22
 800c1be:	f040 80be 	bne.w	800c33e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c1cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c1d0:	b2d9      	uxtb	r1, r3
 800c1d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1dc:	400a      	ands	r2, r1
 800c1de:	b2d2      	uxtb	r2, r2
 800c1e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1e6:	1c5a      	adds	r2, r3, #1
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	b29a      	uxth	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c204:	b29b      	uxth	r3, r3
 800c206:	2b00      	cmp	r3, #0
 800c208:	f040 80a1 	bne.w	800c34e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c214:	e853 3f00 	ldrex	r3, [r3]
 800c218:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c21a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c21c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c220:	66bb      	str	r3, [r7, #104]	; 0x68
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	461a      	mov	r2, r3
 800c228:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c22a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c22c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c22e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c232:	e841 2300 	strex	r3, r2, [r1]
 800c236:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d1e6      	bne.n	800c20c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	3308      	adds	r3, #8
 800c244:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c248:	e853 3f00 	ldrex	r3, [r3]
 800c24c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c250:	f023 0301 	bic.w	r3, r3, #1
 800c254:	667b      	str	r3, [r7, #100]	; 0x64
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	3308      	adds	r3, #8
 800c25c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c25e:	647a      	str	r2, [r7, #68]	; 0x44
 800c260:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c262:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c264:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c266:	e841 2300 	strex	r3, r2, [r1]
 800c26a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d1e5      	bne.n	800c23e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2220      	movs	r2, #32
 800c276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a33      	ldr	r2, [pc, #204]	; (800c358 <UART_RxISR_8BIT+0x1b4>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d01f      	beq.n	800c2d0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d018      	beq.n	800c2d0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a6:	e853 3f00 	ldrex	r3, [r3]
 800c2aa:	623b      	str	r3, [r7, #32]
   return(result);
 800c2ac:	6a3b      	ldr	r3, [r7, #32]
 800c2ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c2b2:	663b      	str	r3, [r7, #96]	; 0x60
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2bc:	633b      	str	r3, [r7, #48]	; 0x30
 800c2be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2c4:	e841 2300 	strex	r3, r2, [r1]
 800c2c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1e6      	bne.n	800c29e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d12e      	bne.n	800c336 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	e853 3f00 	ldrex	r3, [r3]
 800c2ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f023 0310 	bic.w	r3, r3, #16
 800c2f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2fc:	61fb      	str	r3, [r7, #28]
 800c2fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c300:	69b9      	ldr	r1, [r7, #24]
 800c302:	69fa      	ldr	r2, [r7, #28]
 800c304:	e841 2300 	strex	r3, r2, [r1]
 800c308:	617b      	str	r3, [r7, #20]
   return(result);
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1e6      	bne.n	800c2de <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	69db      	ldr	r3, [r3, #28]
 800c316:	f003 0310 	and.w	r3, r3, #16
 800c31a:	2b10      	cmp	r3, #16
 800c31c:	d103      	bne.n	800c326 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2210      	movs	r2, #16
 800c324:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c32c:	4619      	mov	r1, r3
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f7fe fd42 	bl	800adb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c334:	e00b      	b.n	800c34e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f7f4 faa6 	bl	8000888 <HAL_UART_RxCpltCallback>
}
 800c33c:	e007      	b.n	800c34e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	699a      	ldr	r2, [r3, #24]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f042 0208 	orr.w	r2, r2, #8
 800c34c:	619a      	str	r2, [r3, #24]
}
 800c34e:	bf00      	nop
 800c350:	3770      	adds	r7, #112	; 0x70
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	58000c00 	.word	0x58000c00

0800c35c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b09c      	sub	sp, #112	; 0x70
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c36a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c374:	2b22      	cmp	r3, #34	; 0x22
 800c376:	f040 80be 	bne.w	800c4f6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c380:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c388:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c38a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c38e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c392:	4013      	ands	r3, r2
 800c394:	b29a      	uxth	r2, r3
 800c396:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c398:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c39e:	1c9a      	adds	r2, r3, #2
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	b29a      	uxth	r2, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	f040 80a1 	bne.w	800c506 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3cc:	e853 3f00 	ldrex	r3, [r3]
 800c3d0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c3d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3d8:	667b      	str	r3, [r7, #100]	; 0x64
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3e2:	657b      	str	r3, [r7, #84]	; 0x54
 800c3e4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c3e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3ea:	e841 2300 	strex	r3, r2, [r1]
 800c3ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c3f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1e6      	bne.n	800c3c4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	3308      	adds	r3, #8
 800c3fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c400:	e853 3f00 	ldrex	r3, [r3]
 800c404:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c408:	f023 0301 	bic.w	r3, r3, #1
 800c40c:	663b      	str	r3, [r7, #96]	; 0x60
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	3308      	adds	r3, #8
 800c414:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c416:	643a      	str	r2, [r7, #64]	; 0x40
 800c418:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c41a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c41c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c41e:	e841 2300 	strex	r3, r2, [r1]
 800c422:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c426:	2b00      	cmp	r3, #0
 800c428:	d1e5      	bne.n	800c3f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2220      	movs	r2, #32
 800c42e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2200      	movs	r2, #0
 800c436:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a33      	ldr	r2, [pc, #204]	; (800c510 <UART_RxISR_16BIT+0x1b4>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d01f      	beq.n	800c488 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c452:	2b00      	cmp	r3, #0
 800c454:	d018      	beq.n	800c488 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45c:	6a3b      	ldr	r3, [r7, #32]
 800c45e:	e853 3f00 	ldrex	r3, [r3]
 800c462:	61fb      	str	r3, [r7, #28]
   return(result);
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c46a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	461a      	mov	r2, r3
 800c472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c474:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c476:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c47a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c47c:	e841 2300 	strex	r3, r2, [r1]
 800c480:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1e6      	bne.n	800c456 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d12e      	bne.n	800c4ee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	e853 3f00 	ldrex	r3, [r3]
 800c4a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	f023 0310 	bic.w	r3, r3, #16
 800c4aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4b4:	61bb      	str	r3, [r7, #24]
 800c4b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b8:	6979      	ldr	r1, [r7, #20]
 800c4ba:	69ba      	ldr	r2, [r7, #24]
 800c4bc:	e841 2300 	strex	r3, r2, [r1]
 800c4c0:	613b      	str	r3, [r7, #16]
   return(result);
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1e6      	bne.n	800c496 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	69db      	ldr	r3, [r3, #28]
 800c4ce:	f003 0310 	and.w	r3, r3, #16
 800c4d2:	2b10      	cmp	r3, #16
 800c4d4:	d103      	bne.n	800c4de <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2210      	movs	r2, #16
 800c4dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f7fe fc66 	bl	800adb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c4ec:	e00b      	b.n	800c506 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f7f4 f9ca 	bl	8000888 <HAL_UART_RxCpltCallback>
}
 800c4f4:	e007      	b.n	800c506 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	699a      	ldr	r2, [r3, #24]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f042 0208 	orr.w	r2, r2, #8
 800c504:	619a      	str	r2, [r3, #24]
}
 800c506:	bf00      	nop
 800c508:	3770      	adds	r7, #112	; 0x70
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	58000c00 	.word	0x58000c00

0800c514 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b0ac      	sub	sp, #176	; 0xb0
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c522:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	69db      	ldr	r3, [r3, #28]
 800c52c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c54a:	2b22      	cmp	r3, #34	; 0x22
 800c54c:	f040 8180 	bne.w	800c850 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c556:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c55a:	e123      	b.n	800c7a4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c562:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c566:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c56a:	b2d9      	uxtb	r1, r3
 800c56c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c570:	b2da      	uxtb	r2, r3
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c576:	400a      	ands	r2, r1
 800c578:	b2d2      	uxtb	r2, r2
 800c57a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c580:	1c5a      	adds	r2, r3, #1
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	3b01      	subs	r3, #1
 800c590:	b29a      	uxth	r2, r3
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	69db      	ldr	r3, [r3, #28]
 800c59e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c5a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5a6:	f003 0307 	and.w	r3, r3, #7
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d053      	beq.n	800c656 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c5ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5b2:	f003 0301 	and.w	r3, r3, #1
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d011      	beq.n	800c5de <UART_RxISR_8BIT_FIFOEN+0xca>
 800c5ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c5be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d00b      	beq.n	800c5de <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5d4:	f043 0201 	orr.w	r2, r3, #1
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5e2:	f003 0302 	and.w	r3, r3, #2
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d011      	beq.n	800c60e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c5ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5ee:	f003 0301 	and.w	r3, r3, #1
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00b      	beq.n	800c60e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	2202      	movs	r2, #2
 800c5fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c604:	f043 0204 	orr.w	r2, r3, #4
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c60e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c612:	f003 0304 	and.w	r3, r3, #4
 800c616:	2b00      	cmp	r3, #0
 800c618:	d011      	beq.n	800c63e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c61a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c61e:	f003 0301 	and.w	r3, r3, #1
 800c622:	2b00      	cmp	r3, #0
 800c624:	d00b      	beq.n	800c63e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2204      	movs	r2, #4
 800c62c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c634:	f043 0202 	orr.w	r2, r3, #2
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c644:	2b00      	cmp	r3, #0
 800c646:	d006      	beq.n	800c656 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7fe fbab 	bl	800ada4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f040 80a0 	bne.w	800c7a4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c66a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c66c:	e853 3f00 	ldrex	r3, [r3]
 800c670:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	461a      	mov	r2, r3
 800c682:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c686:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c688:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c68c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c68e:	e841 2300 	strex	r3, r2, [r1]
 800c692:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c696:	2b00      	cmp	r3, #0
 800c698:	d1e4      	bne.n	800c664 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	3308      	adds	r3, #8
 800c6a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6a4:	e853 3f00 	ldrex	r3, [r3]
 800c6a8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c6aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c6ac:	4b6e      	ldr	r3, [pc, #440]	; (800c868 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800c6ae:	4013      	ands	r3, r2
 800c6b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	3308      	adds	r3, #8
 800c6ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c6be:	66ba      	str	r2, [r7, #104]	; 0x68
 800c6c0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6c2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c6c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c6c6:	e841 2300 	strex	r3, r2, [r1]
 800c6ca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c6cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d1e3      	bne.n	800c69a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2220      	movs	r2, #32
 800c6d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a60      	ldr	r2, [pc, #384]	; (800c86c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d021      	beq.n	800c734 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d01a      	beq.n	800c734 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c706:	e853 3f00 	ldrex	r3, [r3]
 800c70a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c70c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c70e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c712:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c720:	657b      	str	r3, [r7, #84]	; 0x54
 800c722:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c724:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c726:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c728:	e841 2300 	strex	r3, r2, [r1]
 800c72c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c72e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c730:	2b00      	cmp	r3, #0
 800c732:	d1e4      	bne.n	800c6fe <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d130      	bne.n	800c79e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c74a:	e853 3f00 	ldrex	r3, [r3]
 800c74e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c752:	f023 0310 	bic.w	r3, r3, #16
 800c756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	461a      	mov	r2, r3
 800c760:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c764:	643b      	str	r3, [r7, #64]	; 0x40
 800c766:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c768:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c76a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c76c:	e841 2300 	strex	r3, r2, [r1]
 800c770:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c774:	2b00      	cmp	r3, #0
 800c776:	d1e4      	bne.n	800c742 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	f003 0310 	and.w	r3, r3, #16
 800c782:	2b10      	cmp	r3, #16
 800c784:	d103      	bne.n	800c78e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2210      	movs	r2, #16
 800c78c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c794:	4619      	mov	r1, r3
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f7fe fb0e 	bl	800adb8 <HAL_UARTEx_RxEventCallback>
 800c79c:	e002      	b.n	800c7a4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f7f4 f872 	bl	8000888 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c7a4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d006      	beq.n	800c7ba <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800c7ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c7b0:	f003 0320 	and.w	r3, r3, #32
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f47f aed1 	bne.w	800c55c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7c0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c7c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d049      	beq.n	800c860 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c7d2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d242      	bcs.n	800c860 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	3308      	adds	r3, #8
 800c7e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e2:	6a3b      	ldr	r3, [r7, #32]
 800c7e4:	e853 3f00 	ldrex	r3, [r3]
 800c7e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	3308      	adds	r3, #8
 800c7fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c7fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c800:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c806:	e841 2300 	strex	r3, r2, [r1]
 800c80a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1e3      	bne.n	800c7da <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4a16      	ldr	r2, [pc, #88]	; (800c870 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c816:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	e853 3f00 	ldrex	r3, [r3]
 800c824:	60bb      	str	r3, [r7, #8]
   return(result);
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	f043 0320 	orr.w	r3, r3, #32
 800c82c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	461a      	mov	r2, r3
 800c836:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c83a:	61bb      	str	r3, [r7, #24]
 800c83c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83e:	6979      	ldr	r1, [r7, #20]
 800c840:	69ba      	ldr	r2, [r7, #24]
 800c842:	e841 2300 	strex	r3, r2, [r1]
 800c846:	613b      	str	r3, [r7, #16]
   return(result);
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d1e4      	bne.n	800c818 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c84e:	e007      	b.n	800c860 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	699a      	ldr	r2, [r3, #24]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f042 0208 	orr.w	r2, r2, #8
 800c85e:	619a      	str	r2, [r3, #24]
}
 800c860:	bf00      	nop
 800c862:	37b0      	adds	r7, #176	; 0xb0
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	effffffe 	.word	0xeffffffe
 800c86c:	58000c00 	.word	0x58000c00
 800c870:	0800c1a5 	.word	0x0800c1a5

0800c874 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b0ae      	sub	sp, #184	; 0xb8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c882:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	69db      	ldr	r3, [r3, #28]
 800c88c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8aa:	2b22      	cmp	r3, #34	; 0x22
 800c8ac:	f040 8184 	bne.w	800cbb8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c8b6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c8ba:	e127      	b.n	800cb0c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c8ce:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c8d2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c8d6:	4013      	ands	r3, r2
 800c8d8:	b29a      	uxth	r2, r3
 800c8da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c8de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8e4:	1c9a      	adds	r2, r3, #2
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	3b01      	subs	r3, #1
 800c8f4:	b29a      	uxth	r2, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	69db      	ldr	r3, [r3, #28]
 800c902:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c906:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c90a:	f003 0307 	and.w	r3, r3, #7
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d053      	beq.n	800c9ba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c912:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c916:	f003 0301 	and.w	r3, r3, #1
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d011      	beq.n	800c942 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c91e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c926:	2b00      	cmp	r3, #0
 800c928:	d00b      	beq.n	800c942 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2201      	movs	r2, #1
 800c930:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c938:	f043 0201 	orr.w	r2, r3, #1
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c942:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c946:	f003 0302 	and.w	r3, r3, #2
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d011      	beq.n	800c972 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c94e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c952:	f003 0301 	and.w	r3, r3, #1
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00b      	beq.n	800c972 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2202      	movs	r2, #2
 800c960:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c968:	f043 0204 	orr.w	r2, r3, #4
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c972:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c976:	f003 0304 	and.w	r3, r3, #4
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d011      	beq.n	800c9a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c97e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c982:	f003 0301 	and.w	r3, r3, #1
 800c986:	2b00      	cmp	r3, #0
 800c988:	d00b      	beq.n	800c9a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2204      	movs	r2, #4
 800c990:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c998:	f043 0202 	orr.w	r2, r3, #2
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d006      	beq.n	800c9ba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f7fe f9f9 	bl	800ada4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	f040 80a2 	bne.w	800cb0c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9d0:	e853 3f00 	ldrex	r3, [r3]
 800c9d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c9d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c9ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c9ee:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c9f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c9f6:	e841 2300 	strex	r3, r2, [r1]
 800c9fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c9fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d1e2      	bne.n	800c9c8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	3308      	adds	r3, #8
 800ca08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca0c:	e853 3f00 	ldrex	r3, [r3]
 800ca10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ca12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ca14:	4b6e      	ldr	r3, [pc, #440]	; (800cbd0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800ca16:	4013      	ands	r3, r2
 800ca18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	3308      	adds	r3, #8
 800ca22:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ca26:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ca28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ca2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ca2e:	e841 2300 	strex	r3, r2, [r1]
 800ca32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ca34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1e3      	bne.n	800ca02 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2220      	movs	r2, #32
 800ca3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4a60      	ldr	r2, [pc, #384]	; (800cbd4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d021      	beq.n	800ca9c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d01a      	beq.n	800ca9c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca6e:	e853 3f00 	ldrex	r3, [r3]
 800ca72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ca74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	461a      	mov	r2, r3
 800ca84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca88:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca8a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca90:	e841 2300 	strex	r3, r2, [r1]
 800ca94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ca96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d1e4      	bne.n	800ca66 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d130      	bne.n	800cb06 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab2:	e853 3f00 	ldrex	r3, [r3]
 800cab6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caba:	f023 0310 	bic.w	r3, r3, #16
 800cabe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	461a      	mov	r2, r3
 800cac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cacc:	647b      	str	r3, [r7, #68]	; 0x44
 800cace:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cad2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cad4:	e841 2300 	strex	r3, r2, [r1]
 800cad8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d1e4      	bne.n	800caaa <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	69db      	ldr	r3, [r3, #28]
 800cae6:	f003 0310 	and.w	r3, r3, #16
 800caea:	2b10      	cmp	r3, #16
 800caec:	d103      	bne.n	800caf6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2210      	movs	r2, #16
 800caf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cafc:	4619      	mov	r1, r3
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f7fe f95a 	bl	800adb8 <HAL_UARTEx_RxEventCallback>
 800cb04:	e002      	b.n	800cb0c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f7f3 febe 	bl	8000888 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cb0c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d006      	beq.n	800cb22 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800cb14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cb18:	f003 0320 	and.w	r3, r3, #32
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f47f aecd 	bne.w	800c8bc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb28:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cb2c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d049      	beq.n	800cbc8 <UART_RxISR_16BIT_FIFOEN+0x354>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb3a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d242      	bcs.n	800cbc8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	3308      	adds	r3, #8
 800cb48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4c:	e853 3f00 	ldrex	r3, [r3]
 800cb50:	623b      	str	r3, [r7, #32]
   return(result);
 800cb52:	6a3b      	ldr	r3, [r7, #32]
 800cb54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	3308      	adds	r3, #8
 800cb62:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cb66:	633a      	str	r2, [r7, #48]	; 0x30
 800cb68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb6e:	e841 2300 	strex	r3, r2, [r1]
 800cb72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d1e3      	bne.n	800cb42 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4a16      	ldr	r2, [pc, #88]	; (800cbd8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800cb7e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	e853 3f00 	ldrex	r3, [r3]
 800cb8c:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f043 0320 	orr.w	r3, r3, #32
 800cb94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cba2:	61fb      	str	r3, [r7, #28]
 800cba4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba6:	69b9      	ldr	r1, [r7, #24]
 800cba8:	69fa      	ldr	r2, [r7, #28]
 800cbaa:	e841 2300 	strex	r3, r2, [r1]
 800cbae:	617b      	str	r3, [r7, #20]
   return(result);
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d1e4      	bne.n	800cb80 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cbb6:	e007      	b.n	800cbc8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	699a      	ldr	r2, [r3, #24]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f042 0208 	orr.w	r2, r2, #8
 800cbc6:	619a      	str	r2, [r3, #24]
}
 800cbc8:	bf00      	nop
 800cbca:	37b8      	adds	r7, #184	; 0xb8
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	effffffe 	.word	0xeffffffe
 800cbd4:	58000c00 	.word	0x58000c00
 800cbd8:	0800c35d 	.word	0x0800c35d

0800cbdc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cbe4:	bf00      	nop
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cbf8:	bf00      	nop
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cc0c:	bf00      	nop
 800cc0e:	370c      	adds	r7, #12
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d101      	bne.n	800cc2e <HAL_UARTEx_DisableFifoMode+0x16>
 800cc2a:	2302      	movs	r3, #2
 800cc2c:	e027      	b.n	800cc7e <HAL_UARTEx_DisableFifoMode+0x66>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2201      	movs	r2, #1
 800cc32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2224      	movs	r2, #36	; 0x24
 800cc3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f022 0201 	bic.w	r2, r2, #1
 800cc54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cc5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2220      	movs	r2, #32
 800cc70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cc7c:	2300      	movs	r3, #0
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3714      	adds	r7, #20
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr

0800cc8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b084      	sub	sp, #16
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
 800cc92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d101      	bne.n	800cca2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cc9e:	2302      	movs	r3, #2
 800cca0:	e02d      	b.n	800ccfe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2201      	movs	r2, #1
 800cca6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2224      	movs	r2, #36	; 0x24
 800ccae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	681a      	ldr	r2, [r3, #0]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f022 0201 	bic.w	r2, r2, #1
 800ccc8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	689b      	ldr	r3, [r3, #8]
 800ccd0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	683a      	ldr	r2, [r7, #0]
 800ccda:	430a      	orrs	r2, r1
 800ccdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 f850 	bl	800cd84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	68fa      	ldr	r2, [r7, #12]
 800ccea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2220      	movs	r2, #32
 800ccf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ccfc:	2300      	movs	r3, #0
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b084      	sub	sp, #16
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
 800cd0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cd16:	2b01      	cmp	r3, #1
 800cd18:	d101      	bne.n	800cd1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cd1a:	2302      	movs	r3, #2
 800cd1c:	e02d      	b.n	800cd7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2201      	movs	r2, #1
 800cd22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2224      	movs	r2, #36	; 0x24
 800cd2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f022 0201 	bic.w	r2, r2, #1
 800cd44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	683a      	ldr	r2, [r7, #0]
 800cd56:	430a      	orrs	r2, r1
 800cd58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 f812 	bl	800cd84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2220      	movs	r2, #32
 800cd6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
	...

0800cd84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d108      	bne.n	800cda6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2201      	movs	r2, #1
 800cd98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2201      	movs	r2, #1
 800cda0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cda4:	e031      	b.n	800ce0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cda6:	2310      	movs	r3, #16
 800cda8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cdaa:	2310      	movs	r3, #16
 800cdac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	0e5b      	lsrs	r3, r3, #25
 800cdb6:	b2db      	uxtb	r3, r3
 800cdb8:	f003 0307 	and.w	r3, r3, #7
 800cdbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	0f5b      	lsrs	r3, r3, #29
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	f003 0307 	and.w	r3, r3, #7
 800cdcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cdce:	7bbb      	ldrb	r3, [r7, #14]
 800cdd0:	7b3a      	ldrb	r2, [r7, #12]
 800cdd2:	4911      	ldr	r1, [pc, #68]	; (800ce18 <UARTEx_SetNbDataToProcess+0x94>)
 800cdd4:	5c8a      	ldrb	r2, [r1, r2]
 800cdd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cdda:	7b3a      	ldrb	r2, [r7, #12]
 800cddc:	490f      	ldr	r1, [pc, #60]	; (800ce1c <UARTEx_SetNbDataToProcess+0x98>)
 800cdde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cde0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cde4:	b29a      	uxth	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
 800cdee:	7b7a      	ldrb	r2, [r7, #13]
 800cdf0:	4909      	ldr	r1, [pc, #36]	; (800ce18 <UARTEx_SetNbDataToProcess+0x94>)
 800cdf2:	5c8a      	ldrb	r2, [r1, r2]
 800cdf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cdf8:	7b7a      	ldrb	r2, [r7, #13]
 800cdfa:	4908      	ldr	r1, [pc, #32]	; (800ce1c <UARTEx_SetNbDataToProcess+0x98>)
 800cdfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdfe:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce02:	b29a      	uxth	r2, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ce0a:	bf00      	nop
 800ce0c:	3714      	adds	r7, #20
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	0800fb20 	.word	0x0800fb20
 800ce1c:	0800fb28 	.word	0x0800fb28

0800ce20 <__cvt>:
 800ce20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce22:	ed2d 8b02 	vpush	{d8}
 800ce26:	eeb0 8b40 	vmov.f64	d8, d0
 800ce2a:	b085      	sub	sp, #20
 800ce2c:	4617      	mov	r7, r2
 800ce2e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ce30:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ce32:	ee18 2a90 	vmov	r2, s17
 800ce36:	f025 0520 	bic.w	r5, r5, #32
 800ce3a:	2a00      	cmp	r2, #0
 800ce3c:	bfb6      	itet	lt
 800ce3e:	222d      	movlt	r2, #45	; 0x2d
 800ce40:	2200      	movge	r2, #0
 800ce42:	eeb1 8b40 	vneglt.f64	d8, d0
 800ce46:	2d46      	cmp	r5, #70	; 0x46
 800ce48:	460c      	mov	r4, r1
 800ce4a:	701a      	strb	r2, [r3, #0]
 800ce4c:	d004      	beq.n	800ce58 <__cvt+0x38>
 800ce4e:	2d45      	cmp	r5, #69	; 0x45
 800ce50:	d100      	bne.n	800ce54 <__cvt+0x34>
 800ce52:	3401      	adds	r4, #1
 800ce54:	2102      	movs	r1, #2
 800ce56:	e000      	b.n	800ce5a <__cvt+0x3a>
 800ce58:	2103      	movs	r1, #3
 800ce5a:	ab03      	add	r3, sp, #12
 800ce5c:	9301      	str	r3, [sp, #4]
 800ce5e:	ab02      	add	r3, sp, #8
 800ce60:	9300      	str	r3, [sp, #0]
 800ce62:	4622      	mov	r2, r4
 800ce64:	4633      	mov	r3, r6
 800ce66:	eeb0 0b48 	vmov.f64	d0, d8
 800ce6a:	f000 ff45 	bl	800dcf8 <_dtoa_r>
 800ce6e:	2d47      	cmp	r5, #71	; 0x47
 800ce70:	d101      	bne.n	800ce76 <__cvt+0x56>
 800ce72:	07fb      	lsls	r3, r7, #31
 800ce74:	d51a      	bpl.n	800ceac <__cvt+0x8c>
 800ce76:	2d46      	cmp	r5, #70	; 0x46
 800ce78:	eb00 0204 	add.w	r2, r0, r4
 800ce7c:	d10c      	bne.n	800ce98 <__cvt+0x78>
 800ce7e:	7803      	ldrb	r3, [r0, #0]
 800ce80:	2b30      	cmp	r3, #48	; 0x30
 800ce82:	d107      	bne.n	800ce94 <__cvt+0x74>
 800ce84:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ce88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce8c:	bf1c      	itt	ne
 800ce8e:	f1c4 0401 	rsbne	r4, r4, #1
 800ce92:	6034      	strne	r4, [r6, #0]
 800ce94:	6833      	ldr	r3, [r6, #0]
 800ce96:	441a      	add	r2, r3
 800ce98:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ce9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea0:	bf08      	it	eq
 800cea2:	9203      	streq	r2, [sp, #12]
 800cea4:	2130      	movs	r1, #48	; 0x30
 800cea6:	9b03      	ldr	r3, [sp, #12]
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d307      	bcc.n	800cebc <__cvt+0x9c>
 800ceac:	9b03      	ldr	r3, [sp, #12]
 800ceae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ceb0:	1a1b      	subs	r3, r3, r0
 800ceb2:	6013      	str	r3, [r2, #0]
 800ceb4:	b005      	add	sp, #20
 800ceb6:	ecbd 8b02 	vpop	{d8}
 800ceba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cebc:	1c5c      	adds	r4, r3, #1
 800cebe:	9403      	str	r4, [sp, #12]
 800cec0:	7019      	strb	r1, [r3, #0]
 800cec2:	e7f0      	b.n	800cea6 <__cvt+0x86>

0800cec4 <__exponent>:
 800cec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cec6:	4603      	mov	r3, r0
 800cec8:	2900      	cmp	r1, #0
 800ceca:	bfb8      	it	lt
 800cecc:	4249      	neglt	r1, r1
 800cece:	f803 2b02 	strb.w	r2, [r3], #2
 800ced2:	bfb4      	ite	lt
 800ced4:	222d      	movlt	r2, #45	; 0x2d
 800ced6:	222b      	movge	r2, #43	; 0x2b
 800ced8:	2909      	cmp	r1, #9
 800ceda:	7042      	strb	r2, [r0, #1]
 800cedc:	dd2a      	ble.n	800cf34 <__exponent+0x70>
 800cede:	f10d 0207 	add.w	r2, sp, #7
 800cee2:	4617      	mov	r7, r2
 800cee4:	260a      	movs	r6, #10
 800cee6:	4694      	mov	ip, r2
 800cee8:	fb91 f5f6 	sdiv	r5, r1, r6
 800ceec:	fb06 1415 	mls	r4, r6, r5, r1
 800cef0:	3430      	adds	r4, #48	; 0x30
 800cef2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cef6:	460c      	mov	r4, r1
 800cef8:	2c63      	cmp	r4, #99	; 0x63
 800cefa:	f102 32ff 	add.w	r2, r2, #4294967295
 800cefe:	4629      	mov	r1, r5
 800cf00:	dcf1      	bgt.n	800cee6 <__exponent+0x22>
 800cf02:	3130      	adds	r1, #48	; 0x30
 800cf04:	f1ac 0402 	sub.w	r4, ip, #2
 800cf08:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cf0c:	1c41      	adds	r1, r0, #1
 800cf0e:	4622      	mov	r2, r4
 800cf10:	42ba      	cmp	r2, r7
 800cf12:	d30a      	bcc.n	800cf2a <__exponent+0x66>
 800cf14:	f10d 0209 	add.w	r2, sp, #9
 800cf18:	eba2 020c 	sub.w	r2, r2, ip
 800cf1c:	42bc      	cmp	r4, r7
 800cf1e:	bf88      	it	hi
 800cf20:	2200      	movhi	r2, #0
 800cf22:	4413      	add	r3, r2
 800cf24:	1a18      	subs	r0, r3, r0
 800cf26:	b003      	add	sp, #12
 800cf28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf2a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cf2e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cf32:	e7ed      	b.n	800cf10 <__exponent+0x4c>
 800cf34:	2330      	movs	r3, #48	; 0x30
 800cf36:	3130      	adds	r1, #48	; 0x30
 800cf38:	7083      	strb	r3, [r0, #2]
 800cf3a:	70c1      	strb	r1, [r0, #3]
 800cf3c:	1d03      	adds	r3, r0, #4
 800cf3e:	e7f1      	b.n	800cf24 <__exponent+0x60>

0800cf40 <_printf_float>:
 800cf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf44:	b08b      	sub	sp, #44	; 0x2c
 800cf46:	460c      	mov	r4, r1
 800cf48:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800cf4c:	4616      	mov	r6, r2
 800cf4e:	461f      	mov	r7, r3
 800cf50:	4605      	mov	r5, r0
 800cf52:	f000 fdcf 	bl	800daf4 <_localeconv_r>
 800cf56:	f8d0 b000 	ldr.w	fp, [r0]
 800cf5a:	4658      	mov	r0, fp
 800cf5c:	f7f3 fa18 	bl	8000390 <strlen>
 800cf60:	2300      	movs	r3, #0
 800cf62:	9308      	str	r3, [sp, #32]
 800cf64:	f8d8 3000 	ldr.w	r3, [r8]
 800cf68:	f894 9018 	ldrb.w	r9, [r4, #24]
 800cf6c:	6822      	ldr	r2, [r4, #0]
 800cf6e:	3307      	adds	r3, #7
 800cf70:	f023 0307 	bic.w	r3, r3, #7
 800cf74:	f103 0108 	add.w	r1, r3, #8
 800cf78:	f8c8 1000 	str.w	r1, [r8]
 800cf7c:	ed93 0b00 	vldr	d0, [r3]
 800cf80:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800d1e0 <_printf_float+0x2a0>
 800cf84:	eeb0 7bc0 	vabs.f64	d7, d0
 800cf88:	eeb4 7b46 	vcmp.f64	d7, d6
 800cf8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf90:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800cf94:	4682      	mov	sl, r0
 800cf96:	dd24      	ble.n	800cfe2 <_printf_float+0xa2>
 800cf98:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cf9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa0:	d502      	bpl.n	800cfa8 <_printf_float+0x68>
 800cfa2:	232d      	movs	r3, #45	; 0x2d
 800cfa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfa8:	498f      	ldr	r1, [pc, #572]	; (800d1e8 <_printf_float+0x2a8>)
 800cfaa:	4b90      	ldr	r3, [pc, #576]	; (800d1ec <_printf_float+0x2ac>)
 800cfac:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800cfb0:	bf94      	ite	ls
 800cfb2:	4688      	movls	r8, r1
 800cfb4:	4698      	movhi	r8, r3
 800cfb6:	2303      	movs	r3, #3
 800cfb8:	6123      	str	r3, [r4, #16]
 800cfba:	f022 0204 	bic.w	r2, r2, #4
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	6022      	str	r2, [r4, #0]
 800cfc2:	9304      	str	r3, [sp, #16]
 800cfc4:	9700      	str	r7, [sp, #0]
 800cfc6:	4633      	mov	r3, r6
 800cfc8:	aa09      	add	r2, sp, #36	; 0x24
 800cfca:	4621      	mov	r1, r4
 800cfcc:	4628      	mov	r0, r5
 800cfce:	f000 f9d1 	bl	800d374 <_printf_common>
 800cfd2:	3001      	adds	r0, #1
 800cfd4:	f040 808a 	bne.w	800d0ec <_printf_float+0x1ac>
 800cfd8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfdc:	b00b      	add	sp, #44	; 0x2c
 800cfde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe2:	eeb4 0b40 	vcmp.f64	d0, d0
 800cfe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfea:	d709      	bvc.n	800d000 <_printf_float+0xc0>
 800cfec:	ee10 3a90 	vmov	r3, s1
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	bfbc      	itt	lt
 800cff4:	232d      	movlt	r3, #45	; 0x2d
 800cff6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cffa:	497d      	ldr	r1, [pc, #500]	; (800d1f0 <_printf_float+0x2b0>)
 800cffc:	4b7d      	ldr	r3, [pc, #500]	; (800d1f4 <_printf_float+0x2b4>)
 800cffe:	e7d5      	b.n	800cfac <_printf_float+0x6c>
 800d000:	6863      	ldr	r3, [r4, #4]
 800d002:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d006:	9104      	str	r1, [sp, #16]
 800d008:	1c59      	adds	r1, r3, #1
 800d00a:	d13c      	bne.n	800d086 <_printf_float+0x146>
 800d00c:	2306      	movs	r3, #6
 800d00e:	6063      	str	r3, [r4, #4]
 800d010:	2300      	movs	r3, #0
 800d012:	9303      	str	r3, [sp, #12]
 800d014:	ab08      	add	r3, sp, #32
 800d016:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d01a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d01e:	ab07      	add	r3, sp, #28
 800d020:	6861      	ldr	r1, [r4, #4]
 800d022:	9300      	str	r3, [sp, #0]
 800d024:	6022      	str	r2, [r4, #0]
 800d026:	f10d 031b 	add.w	r3, sp, #27
 800d02a:	4628      	mov	r0, r5
 800d02c:	f7ff fef8 	bl	800ce20 <__cvt>
 800d030:	9b04      	ldr	r3, [sp, #16]
 800d032:	9907      	ldr	r1, [sp, #28]
 800d034:	2b47      	cmp	r3, #71	; 0x47
 800d036:	4680      	mov	r8, r0
 800d038:	d108      	bne.n	800d04c <_printf_float+0x10c>
 800d03a:	1cc8      	adds	r0, r1, #3
 800d03c:	db02      	blt.n	800d044 <_printf_float+0x104>
 800d03e:	6863      	ldr	r3, [r4, #4]
 800d040:	4299      	cmp	r1, r3
 800d042:	dd41      	ble.n	800d0c8 <_printf_float+0x188>
 800d044:	f1a9 0902 	sub.w	r9, r9, #2
 800d048:	fa5f f989 	uxtb.w	r9, r9
 800d04c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d050:	d820      	bhi.n	800d094 <_printf_float+0x154>
 800d052:	3901      	subs	r1, #1
 800d054:	464a      	mov	r2, r9
 800d056:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d05a:	9107      	str	r1, [sp, #28]
 800d05c:	f7ff ff32 	bl	800cec4 <__exponent>
 800d060:	9a08      	ldr	r2, [sp, #32]
 800d062:	9004      	str	r0, [sp, #16]
 800d064:	1813      	adds	r3, r2, r0
 800d066:	2a01      	cmp	r2, #1
 800d068:	6123      	str	r3, [r4, #16]
 800d06a:	dc02      	bgt.n	800d072 <_printf_float+0x132>
 800d06c:	6822      	ldr	r2, [r4, #0]
 800d06e:	07d2      	lsls	r2, r2, #31
 800d070:	d501      	bpl.n	800d076 <_printf_float+0x136>
 800d072:	3301      	adds	r3, #1
 800d074:	6123      	str	r3, [r4, #16]
 800d076:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d0a2      	beq.n	800cfc4 <_printf_float+0x84>
 800d07e:	232d      	movs	r3, #45	; 0x2d
 800d080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d084:	e79e      	b.n	800cfc4 <_printf_float+0x84>
 800d086:	9904      	ldr	r1, [sp, #16]
 800d088:	2947      	cmp	r1, #71	; 0x47
 800d08a:	d1c1      	bne.n	800d010 <_printf_float+0xd0>
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d1bf      	bne.n	800d010 <_printf_float+0xd0>
 800d090:	2301      	movs	r3, #1
 800d092:	e7bc      	b.n	800d00e <_printf_float+0xce>
 800d094:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d098:	d118      	bne.n	800d0cc <_printf_float+0x18c>
 800d09a:	2900      	cmp	r1, #0
 800d09c:	6863      	ldr	r3, [r4, #4]
 800d09e:	dd0b      	ble.n	800d0b8 <_printf_float+0x178>
 800d0a0:	6121      	str	r1, [r4, #16]
 800d0a2:	b913      	cbnz	r3, 800d0aa <_printf_float+0x16a>
 800d0a4:	6822      	ldr	r2, [r4, #0]
 800d0a6:	07d0      	lsls	r0, r2, #31
 800d0a8:	d502      	bpl.n	800d0b0 <_printf_float+0x170>
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	440b      	add	r3, r1
 800d0ae:	6123      	str	r3, [r4, #16]
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800d0b4:	9304      	str	r3, [sp, #16]
 800d0b6:	e7de      	b.n	800d076 <_printf_float+0x136>
 800d0b8:	b913      	cbnz	r3, 800d0c0 <_printf_float+0x180>
 800d0ba:	6822      	ldr	r2, [r4, #0]
 800d0bc:	07d2      	lsls	r2, r2, #31
 800d0be:	d501      	bpl.n	800d0c4 <_printf_float+0x184>
 800d0c0:	3302      	adds	r3, #2
 800d0c2:	e7f4      	b.n	800d0ae <_printf_float+0x16e>
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	e7f2      	b.n	800d0ae <_printf_float+0x16e>
 800d0c8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d0cc:	9b08      	ldr	r3, [sp, #32]
 800d0ce:	4299      	cmp	r1, r3
 800d0d0:	db05      	blt.n	800d0de <_printf_float+0x19e>
 800d0d2:	6823      	ldr	r3, [r4, #0]
 800d0d4:	6121      	str	r1, [r4, #16]
 800d0d6:	07d8      	lsls	r0, r3, #31
 800d0d8:	d5ea      	bpl.n	800d0b0 <_printf_float+0x170>
 800d0da:	1c4b      	adds	r3, r1, #1
 800d0dc:	e7e7      	b.n	800d0ae <_printf_float+0x16e>
 800d0de:	2900      	cmp	r1, #0
 800d0e0:	bfd4      	ite	le
 800d0e2:	f1c1 0202 	rsble	r2, r1, #2
 800d0e6:	2201      	movgt	r2, #1
 800d0e8:	4413      	add	r3, r2
 800d0ea:	e7e0      	b.n	800d0ae <_printf_float+0x16e>
 800d0ec:	6823      	ldr	r3, [r4, #0]
 800d0ee:	055a      	lsls	r2, r3, #21
 800d0f0:	d407      	bmi.n	800d102 <_printf_float+0x1c2>
 800d0f2:	6923      	ldr	r3, [r4, #16]
 800d0f4:	4642      	mov	r2, r8
 800d0f6:	4631      	mov	r1, r6
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	47b8      	blx	r7
 800d0fc:	3001      	adds	r0, #1
 800d0fe:	d12a      	bne.n	800d156 <_printf_float+0x216>
 800d100:	e76a      	b.n	800cfd8 <_printf_float+0x98>
 800d102:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d106:	f240 80e0 	bls.w	800d2ca <_printf_float+0x38a>
 800d10a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d10e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d116:	d133      	bne.n	800d180 <_printf_float+0x240>
 800d118:	4a37      	ldr	r2, [pc, #220]	; (800d1f8 <_printf_float+0x2b8>)
 800d11a:	2301      	movs	r3, #1
 800d11c:	4631      	mov	r1, r6
 800d11e:	4628      	mov	r0, r5
 800d120:	47b8      	blx	r7
 800d122:	3001      	adds	r0, #1
 800d124:	f43f af58 	beq.w	800cfd8 <_printf_float+0x98>
 800d128:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d12c:	429a      	cmp	r2, r3
 800d12e:	db02      	blt.n	800d136 <_printf_float+0x1f6>
 800d130:	6823      	ldr	r3, [r4, #0]
 800d132:	07d8      	lsls	r0, r3, #31
 800d134:	d50f      	bpl.n	800d156 <_printf_float+0x216>
 800d136:	4653      	mov	r3, sl
 800d138:	465a      	mov	r2, fp
 800d13a:	4631      	mov	r1, r6
 800d13c:	4628      	mov	r0, r5
 800d13e:	47b8      	blx	r7
 800d140:	3001      	adds	r0, #1
 800d142:	f43f af49 	beq.w	800cfd8 <_printf_float+0x98>
 800d146:	f04f 0800 	mov.w	r8, #0
 800d14a:	f104 091a 	add.w	r9, r4, #26
 800d14e:	9b08      	ldr	r3, [sp, #32]
 800d150:	3b01      	subs	r3, #1
 800d152:	4543      	cmp	r3, r8
 800d154:	dc09      	bgt.n	800d16a <_printf_float+0x22a>
 800d156:	6823      	ldr	r3, [r4, #0]
 800d158:	079b      	lsls	r3, r3, #30
 800d15a:	f100 8106 	bmi.w	800d36a <_printf_float+0x42a>
 800d15e:	68e0      	ldr	r0, [r4, #12]
 800d160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d162:	4298      	cmp	r0, r3
 800d164:	bfb8      	it	lt
 800d166:	4618      	movlt	r0, r3
 800d168:	e738      	b.n	800cfdc <_printf_float+0x9c>
 800d16a:	2301      	movs	r3, #1
 800d16c:	464a      	mov	r2, r9
 800d16e:	4631      	mov	r1, r6
 800d170:	4628      	mov	r0, r5
 800d172:	47b8      	blx	r7
 800d174:	3001      	adds	r0, #1
 800d176:	f43f af2f 	beq.w	800cfd8 <_printf_float+0x98>
 800d17a:	f108 0801 	add.w	r8, r8, #1
 800d17e:	e7e6      	b.n	800d14e <_printf_float+0x20e>
 800d180:	9b07      	ldr	r3, [sp, #28]
 800d182:	2b00      	cmp	r3, #0
 800d184:	dc3a      	bgt.n	800d1fc <_printf_float+0x2bc>
 800d186:	4a1c      	ldr	r2, [pc, #112]	; (800d1f8 <_printf_float+0x2b8>)
 800d188:	2301      	movs	r3, #1
 800d18a:	4631      	mov	r1, r6
 800d18c:	4628      	mov	r0, r5
 800d18e:	47b8      	blx	r7
 800d190:	3001      	adds	r0, #1
 800d192:	f43f af21 	beq.w	800cfd8 <_printf_float+0x98>
 800d196:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800d19a:	4313      	orrs	r3, r2
 800d19c:	d102      	bne.n	800d1a4 <_printf_float+0x264>
 800d19e:	6823      	ldr	r3, [r4, #0]
 800d1a0:	07d9      	lsls	r1, r3, #31
 800d1a2:	d5d8      	bpl.n	800d156 <_printf_float+0x216>
 800d1a4:	4653      	mov	r3, sl
 800d1a6:	465a      	mov	r2, fp
 800d1a8:	4631      	mov	r1, r6
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	47b8      	blx	r7
 800d1ae:	3001      	adds	r0, #1
 800d1b0:	f43f af12 	beq.w	800cfd8 <_printf_float+0x98>
 800d1b4:	f04f 0900 	mov.w	r9, #0
 800d1b8:	f104 0a1a 	add.w	sl, r4, #26
 800d1bc:	9b07      	ldr	r3, [sp, #28]
 800d1be:	425b      	negs	r3, r3
 800d1c0:	454b      	cmp	r3, r9
 800d1c2:	dc01      	bgt.n	800d1c8 <_printf_float+0x288>
 800d1c4:	9b08      	ldr	r3, [sp, #32]
 800d1c6:	e795      	b.n	800d0f4 <_printf_float+0x1b4>
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	4652      	mov	r2, sl
 800d1cc:	4631      	mov	r1, r6
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	47b8      	blx	r7
 800d1d2:	3001      	adds	r0, #1
 800d1d4:	f43f af00 	beq.w	800cfd8 <_printf_float+0x98>
 800d1d8:	f109 0901 	add.w	r9, r9, #1
 800d1dc:	e7ee      	b.n	800d1bc <_printf_float+0x27c>
 800d1de:	bf00      	nop
 800d1e0:	ffffffff 	.word	0xffffffff
 800d1e4:	7fefffff 	.word	0x7fefffff
 800d1e8:	0800fb30 	.word	0x0800fb30
 800d1ec:	0800fb34 	.word	0x0800fb34
 800d1f0:	0800fb38 	.word	0x0800fb38
 800d1f4:	0800fb3c 	.word	0x0800fb3c
 800d1f8:	0800fb40 	.word	0x0800fb40
 800d1fc:	9a08      	ldr	r2, [sp, #32]
 800d1fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d200:	429a      	cmp	r2, r3
 800d202:	bfa8      	it	ge
 800d204:	461a      	movge	r2, r3
 800d206:	2a00      	cmp	r2, #0
 800d208:	4691      	mov	r9, r2
 800d20a:	dc38      	bgt.n	800d27e <_printf_float+0x33e>
 800d20c:	2300      	movs	r3, #0
 800d20e:	9305      	str	r3, [sp, #20]
 800d210:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d214:	f104 021a 	add.w	r2, r4, #26
 800d218:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d21a:	9905      	ldr	r1, [sp, #20]
 800d21c:	9304      	str	r3, [sp, #16]
 800d21e:	eba3 0309 	sub.w	r3, r3, r9
 800d222:	428b      	cmp	r3, r1
 800d224:	dc33      	bgt.n	800d28e <_printf_float+0x34e>
 800d226:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	db3c      	blt.n	800d2a8 <_printf_float+0x368>
 800d22e:	6823      	ldr	r3, [r4, #0]
 800d230:	07da      	lsls	r2, r3, #31
 800d232:	d439      	bmi.n	800d2a8 <_printf_float+0x368>
 800d234:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800d238:	eba2 0903 	sub.w	r9, r2, r3
 800d23c:	9b04      	ldr	r3, [sp, #16]
 800d23e:	1ad2      	subs	r2, r2, r3
 800d240:	4591      	cmp	r9, r2
 800d242:	bfa8      	it	ge
 800d244:	4691      	movge	r9, r2
 800d246:	f1b9 0f00 	cmp.w	r9, #0
 800d24a:	dc35      	bgt.n	800d2b8 <_printf_float+0x378>
 800d24c:	f04f 0800 	mov.w	r8, #0
 800d250:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d254:	f104 0a1a 	add.w	sl, r4, #26
 800d258:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d25c:	1a9b      	subs	r3, r3, r2
 800d25e:	eba3 0309 	sub.w	r3, r3, r9
 800d262:	4543      	cmp	r3, r8
 800d264:	f77f af77 	ble.w	800d156 <_printf_float+0x216>
 800d268:	2301      	movs	r3, #1
 800d26a:	4652      	mov	r2, sl
 800d26c:	4631      	mov	r1, r6
 800d26e:	4628      	mov	r0, r5
 800d270:	47b8      	blx	r7
 800d272:	3001      	adds	r0, #1
 800d274:	f43f aeb0 	beq.w	800cfd8 <_printf_float+0x98>
 800d278:	f108 0801 	add.w	r8, r8, #1
 800d27c:	e7ec      	b.n	800d258 <_printf_float+0x318>
 800d27e:	4613      	mov	r3, r2
 800d280:	4631      	mov	r1, r6
 800d282:	4642      	mov	r2, r8
 800d284:	4628      	mov	r0, r5
 800d286:	47b8      	blx	r7
 800d288:	3001      	adds	r0, #1
 800d28a:	d1bf      	bne.n	800d20c <_printf_float+0x2cc>
 800d28c:	e6a4      	b.n	800cfd8 <_printf_float+0x98>
 800d28e:	2301      	movs	r3, #1
 800d290:	4631      	mov	r1, r6
 800d292:	4628      	mov	r0, r5
 800d294:	9204      	str	r2, [sp, #16]
 800d296:	47b8      	blx	r7
 800d298:	3001      	adds	r0, #1
 800d29a:	f43f ae9d 	beq.w	800cfd8 <_printf_float+0x98>
 800d29e:	9b05      	ldr	r3, [sp, #20]
 800d2a0:	9a04      	ldr	r2, [sp, #16]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	9305      	str	r3, [sp, #20]
 800d2a6:	e7b7      	b.n	800d218 <_printf_float+0x2d8>
 800d2a8:	4653      	mov	r3, sl
 800d2aa:	465a      	mov	r2, fp
 800d2ac:	4631      	mov	r1, r6
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	47b8      	blx	r7
 800d2b2:	3001      	adds	r0, #1
 800d2b4:	d1be      	bne.n	800d234 <_printf_float+0x2f4>
 800d2b6:	e68f      	b.n	800cfd8 <_printf_float+0x98>
 800d2b8:	9a04      	ldr	r2, [sp, #16]
 800d2ba:	464b      	mov	r3, r9
 800d2bc:	4442      	add	r2, r8
 800d2be:	4631      	mov	r1, r6
 800d2c0:	4628      	mov	r0, r5
 800d2c2:	47b8      	blx	r7
 800d2c4:	3001      	adds	r0, #1
 800d2c6:	d1c1      	bne.n	800d24c <_printf_float+0x30c>
 800d2c8:	e686      	b.n	800cfd8 <_printf_float+0x98>
 800d2ca:	9a08      	ldr	r2, [sp, #32]
 800d2cc:	2a01      	cmp	r2, #1
 800d2ce:	dc01      	bgt.n	800d2d4 <_printf_float+0x394>
 800d2d0:	07db      	lsls	r3, r3, #31
 800d2d2:	d537      	bpl.n	800d344 <_printf_float+0x404>
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	4642      	mov	r2, r8
 800d2d8:	4631      	mov	r1, r6
 800d2da:	4628      	mov	r0, r5
 800d2dc:	47b8      	blx	r7
 800d2de:	3001      	adds	r0, #1
 800d2e0:	f43f ae7a 	beq.w	800cfd8 <_printf_float+0x98>
 800d2e4:	4653      	mov	r3, sl
 800d2e6:	465a      	mov	r2, fp
 800d2e8:	4631      	mov	r1, r6
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	47b8      	blx	r7
 800d2ee:	3001      	adds	r0, #1
 800d2f0:	f43f ae72 	beq.w	800cfd8 <_printf_float+0x98>
 800d2f4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d2f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d300:	9b08      	ldr	r3, [sp, #32]
 800d302:	d01a      	beq.n	800d33a <_printf_float+0x3fa>
 800d304:	3b01      	subs	r3, #1
 800d306:	f108 0201 	add.w	r2, r8, #1
 800d30a:	4631      	mov	r1, r6
 800d30c:	4628      	mov	r0, r5
 800d30e:	47b8      	blx	r7
 800d310:	3001      	adds	r0, #1
 800d312:	d10e      	bne.n	800d332 <_printf_float+0x3f2>
 800d314:	e660      	b.n	800cfd8 <_printf_float+0x98>
 800d316:	2301      	movs	r3, #1
 800d318:	464a      	mov	r2, r9
 800d31a:	4631      	mov	r1, r6
 800d31c:	4628      	mov	r0, r5
 800d31e:	47b8      	blx	r7
 800d320:	3001      	adds	r0, #1
 800d322:	f43f ae59 	beq.w	800cfd8 <_printf_float+0x98>
 800d326:	f108 0801 	add.w	r8, r8, #1
 800d32a:	9b08      	ldr	r3, [sp, #32]
 800d32c:	3b01      	subs	r3, #1
 800d32e:	4543      	cmp	r3, r8
 800d330:	dcf1      	bgt.n	800d316 <_printf_float+0x3d6>
 800d332:	9b04      	ldr	r3, [sp, #16]
 800d334:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d338:	e6dd      	b.n	800d0f6 <_printf_float+0x1b6>
 800d33a:	f04f 0800 	mov.w	r8, #0
 800d33e:	f104 091a 	add.w	r9, r4, #26
 800d342:	e7f2      	b.n	800d32a <_printf_float+0x3ea>
 800d344:	2301      	movs	r3, #1
 800d346:	4642      	mov	r2, r8
 800d348:	e7df      	b.n	800d30a <_printf_float+0x3ca>
 800d34a:	2301      	movs	r3, #1
 800d34c:	464a      	mov	r2, r9
 800d34e:	4631      	mov	r1, r6
 800d350:	4628      	mov	r0, r5
 800d352:	47b8      	blx	r7
 800d354:	3001      	adds	r0, #1
 800d356:	f43f ae3f 	beq.w	800cfd8 <_printf_float+0x98>
 800d35a:	f108 0801 	add.w	r8, r8, #1
 800d35e:	68e3      	ldr	r3, [r4, #12]
 800d360:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d362:	1a5b      	subs	r3, r3, r1
 800d364:	4543      	cmp	r3, r8
 800d366:	dcf0      	bgt.n	800d34a <_printf_float+0x40a>
 800d368:	e6f9      	b.n	800d15e <_printf_float+0x21e>
 800d36a:	f04f 0800 	mov.w	r8, #0
 800d36e:	f104 0919 	add.w	r9, r4, #25
 800d372:	e7f4      	b.n	800d35e <_printf_float+0x41e>

0800d374 <_printf_common>:
 800d374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d378:	4616      	mov	r6, r2
 800d37a:	4699      	mov	r9, r3
 800d37c:	688a      	ldr	r2, [r1, #8]
 800d37e:	690b      	ldr	r3, [r1, #16]
 800d380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d384:	4293      	cmp	r3, r2
 800d386:	bfb8      	it	lt
 800d388:	4613      	movlt	r3, r2
 800d38a:	6033      	str	r3, [r6, #0]
 800d38c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d390:	4607      	mov	r7, r0
 800d392:	460c      	mov	r4, r1
 800d394:	b10a      	cbz	r2, 800d39a <_printf_common+0x26>
 800d396:	3301      	adds	r3, #1
 800d398:	6033      	str	r3, [r6, #0]
 800d39a:	6823      	ldr	r3, [r4, #0]
 800d39c:	0699      	lsls	r1, r3, #26
 800d39e:	bf42      	ittt	mi
 800d3a0:	6833      	ldrmi	r3, [r6, #0]
 800d3a2:	3302      	addmi	r3, #2
 800d3a4:	6033      	strmi	r3, [r6, #0]
 800d3a6:	6825      	ldr	r5, [r4, #0]
 800d3a8:	f015 0506 	ands.w	r5, r5, #6
 800d3ac:	d106      	bne.n	800d3bc <_printf_common+0x48>
 800d3ae:	f104 0a19 	add.w	sl, r4, #25
 800d3b2:	68e3      	ldr	r3, [r4, #12]
 800d3b4:	6832      	ldr	r2, [r6, #0]
 800d3b6:	1a9b      	subs	r3, r3, r2
 800d3b8:	42ab      	cmp	r3, r5
 800d3ba:	dc26      	bgt.n	800d40a <_printf_common+0x96>
 800d3bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d3c0:	1e13      	subs	r3, r2, #0
 800d3c2:	6822      	ldr	r2, [r4, #0]
 800d3c4:	bf18      	it	ne
 800d3c6:	2301      	movne	r3, #1
 800d3c8:	0692      	lsls	r2, r2, #26
 800d3ca:	d42b      	bmi.n	800d424 <_printf_common+0xb0>
 800d3cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d3d0:	4649      	mov	r1, r9
 800d3d2:	4638      	mov	r0, r7
 800d3d4:	47c0      	blx	r8
 800d3d6:	3001      	adds	r0, #1
 800d3d8:	d01e      	beq.n	800d418 <_printf_common+0xa4>
 800d3da:	6823      	ldr	r3, [r4, #0]
 800d3dc:	6922      	ldr	r2, [r4, #16]
 800d3de:	f003 0306 	and.w	r3, r3, #6
 800d3e2:	2b04      	cmp	r3, #4
 800d3e4:	bf02      	ittt	eq
 800d3e6:	68e5      	ldreq	r5, [r4, #12]
 800d3e8:	6833      	ldreq	r3, [r6, #0]
 800d3ea:	1aed      	subeq	r5, r5, r3
 800d3ec:	68a3      	ldr	r3, [r4, #8]
 800d3ee:	bf0c      	ite	eq
 800d3f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3f4:	2500      	movne	r5, #0
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	bfc4      	itt	gt
 800d3fa:	1a9b      	subgt	r3, r3, r2
 800d3fc:	18ed      	addgt	r5, r5, r3
 800d3fe:	2600      	movs	r6, #0
 800d400:	341a      	adds	r4, #26
 800d402:	42b5      	cmp	r5, r6
 800d404:	d11a      	bne.n	800d43c <_printf_common+0xc8>
 800d406:	2000      	movs	r0, #0
 800d408:	e008      	b.n	800d41c <_printf_common+0xa8>
 800d40a:	2301      	movs	r3, #1
 800d40c:	4652      	mov	r2, sl
 800d40e:	4649      	mov	r1, r9
 800d410:	4638      	mov	r0, r7
 800d412:	47c0      	blx	r8
 800d414:	3001      	adds	r0, #1
 800d416:	d103      	bne.n	800d420 <_printf_common+0xac>
 800d418:	f04f 30ff 	mov.w	r0, #4294967295
 800d41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d420:	3501      	adds	r5, #1
 800d422:	e7c6      	b.n	800d3b2 <_printf_common+0x3e>
 800d424:	18e1      	adds	r1, r4, r3
 800d426:	1c5a      	adds	r2, r3, #1
 800d428:	2030      	movs	r0, #48	; 0x30
 800d42a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d42e:	4422      	add	r2, r4
 800d430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d438:	3302      	adds	r3, #2
 800d43a:	e7c7      	b.n	800d3cc <_printf_common+0x58>
 800d43c:	2301      	movs	r3, #1
 800d43e:	4622      	mov	r2, r4
 800d440:	4649      	mov	r1, r9
 800d442:	4638      	mov	r0, r7
 800d444:	47c0      	blx	r8
 800d446:	3001      	adds	r0, #1
 800d448:	d0e6      	beq.n	800d418 <_printf_common+0xa4>
 800d44a:	3601      	adds	r6, #1
 800d44c:	e7d9      	b.n	800d402 <_printf_common+0x8e>
	...

0800d450 <_printf_i>:
 800d450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d454:	7e0f      	ldrb	r7, [r1, #24]
 800d456:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d458:	2f78      	cmp	r7, #120	; 0x78
 800d45a:	4691      	mov	r9, r2
 800d45c:	4680      	mov	r8, r0
 800d45e:	460c      	mov	r4, r1
 800d460:	469a      	mov	sl, r3
 800d462:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d466:	d807      	bhi.n	800d478 <_printf_i+0x28>
 800d468:	2f62      	cmp	r7, #98	; 0x62
 800d46a:	d80a      	bhi.n	800d482 <_printf_i+0x32>
 800d46c:	2f00      	cmp	r7, #0
 800d46e:	f000 80d4 	beq.w	800d61a <_printf_i+0x1ca>
 800d472:	2f58      	cmp	r7, #88	; 0x58
 800d474:	f000 80c0 	beq.w	800d5f8 <_printf_i+0x1a8>
 800d478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d47c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d480:	e03a      	b.n	800d4f8 <_printf_i+0xa8>
 800d482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d486:	2b15      	cmp	r3, #21
 800d488:	d8f6      	bhi.n	800d478 <_printf_i+0x28>
 800d48a:	a101      	add	r1, pc, #4	; (adr r1, 800d490 <_printf_i+0x40>)
 800d48c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d490:	0800d4e9 	.word	0x0800d4e9
 800d494:	0800d4fd 	.word	0x0800d4fd
 800d498:	0800d479 	.word	0x0800d479
 800d49c:	0800d479 	.word	0x0800d479
 800d4a0:	0800d479 	.word	0x0800d479
 800d4a4:	0800d479 	.word	0x0800d479
 800d4a8:	0800d4fd 	.word	0x0800d4fd
 800d4ac:	0800d479 	.word	0x0800d479
 800d4b0:	0800d479 	.word	0x0800d479
 800d4b4:	0800d479 	.word	0x0800d479
 800d4b8:	0800d479 	.word	0x0800d479
 800d4bc:	0800d601 	.word	0x0800d601
 800d4c0:	0800d529 	.word	0x0800d529
 800d4c4:	0800d5bb 	.word	0x0800d5bb
 800d4c8:	0800d479 	.word	0x0800d479
 800d4cc:	0800d479 	.word	0x0800d479
 800d4d0:	0800d623 	.word	0x0800d623
 800d4d4:	0800d479 	.word	0x0800d479
 800d4d8:	0800d529 	.word	0x0800d529
 800d4dc:	0800d479 	.word	0x0800d479
 800d4e0:	0800d479 	.word	0x0800d479
 800d4e4:	0800d5c3 	.word	0x0800d5c3
 800d4e8:	682b      	ldr	r3, [r5, #0]
 800d4ea:	1d1a      	adds	r2, r3, #4
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	602a      	str	r2, [r5, #0]
 800d4f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e09f      	b.n	800d63c <_printf_i+0x1ec>
 800d4fc:	6820      	ldr	r0, [r4, #0]
 800d4fe:	682b      	ldr	r3, [r5, #0]
 800d500:	0607      	lsls	r7, r0, #24
 800d502:	f103 0104 	add.w	r1, r3, #4
 800d506:	6029      	str	r1, [r5, #0]
 800d508:	d501      	bpl.n	800d50e <_printf_i+0xbe>
 800d50a:	681e      	ldr	r6, [r3, #0]
 800d50c:	e003      	b.n	800d516 <_printf_i+0xc6>
 800d50e:	0646      	lsls	r6, r0, #25
 800d510:	d5fb      	bpl.n	800d50a <_printf_i+0xba>
 800d512:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d516:	2e00      	cmp	r6, #0
 800d518:	da03      	bge.n	800d522 <_printf_i+0xd2>
 800d51a:	232d      	movs	r3, #45	; 0x2d
 800d51c:	4276      	negs	r6, r6
 800d51e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d522:	485a      	ldr	r0, [pc, #360]	; (800d68c <_printf_i+0x23c>)
 800d524:	230a      	movs	r3, #10
 800d526:	e012      	b.n	800d54e <_printf_i+0xfe>
 800d528:	682b      	ldr	r3, [r5, #0]
 800d52a:	6820      	ldr	r0, [r4, #0]
 800d52c:	1d19      	adds	r1, r3, #4
 800d52e:	6029      	str	r1, [r5, #0]
 800d530:	0605      	lsls	r5, r0, #24
 800d532:	d501      	bpl.n	800d538 <_printf_i+0xe8>
 800d534:	681e      	ldr	r6, [r3, #0]
 800d536:	e002      	b.n	800d53e <_printf_i+0xee>
 800d538:	0641      	lsls	r1, r0, #25
 800d53a:	d5fb      	bpl.n	800d534 <_printf_i+0xe4>
 800d53c:	881e      	ldrh	r6, [r3, #0]
 800d53e:	4853      	ldr	r0, [pc, #332]	; (800d68c <_printf_i+0x23c>)
 800d540:	2f6f      	cmp	r7, #111	; 0x6f
 800d542:	bf0c      	ite	eq
 800d544:	2308      	moveq	r3, #8
 800d546:	230a      	movne	r3, #10
 800d548:	2100      	movs	r1, #0
 800d54a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d54e:	6865      	ldr	r5, [r4, #4]
 800d550:	60a5      	str	r5, [r4, #8]
 800d552:	2d00      	cmp	r5, #0
 800d554:	bfa2      	ittt	ge
 800d556:	6821      	ldrge	r1, [r4, #0]
 800d558:	f021 0104 	bicge.w	r1, r1, #4
 800d55c:	6021      	strge	r1, [r4, #0]
 800d55e:	b90e      	cbnz	r6, 800d564 <_printf_i+0x114>
 800d560:	2d00      	cmp	r5, #0
 800d562:	d04b      	beq.n	800d5fc <_printf_i+0x1ac>
 800d564:	4615      	mov	r5, r2
 800d566:	fbb6 f1f3 	udiv	r1, r6, r3
 800d56a:	fb03 6711 	mls	r7, r3, r1, r6
 800d56e:	5dc7      	ldrb	r7, [r0, r7]
 800d570:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d574:	4637      	mov	r7, r6
 800d576:	42bb      	cmp	r3, r7
 800d578:	460e      	mov	r6, r1
 800d57a:	d9f4      	bls.n	800d566 <_printf_i+0x116>
 800d57c:	2b08      	cmp	r3, #8
 800d57e:	d10b      	bne.n	800d598 <_printf_i+0x148>
 800d580:	6823      	ldr	r3, [r4, #0]
 800d582:	07de      	lsls	r6, r3, #31
 800d584:	d508      	bpl.n	800d598 <_printf_i+0x148>
 800d586:	6923      	ldr	r3, [r4, #16]
 800d588:	6861      	ldr	r1, [r4, #4]
 800d58a:	4299      	cmp	r1, r3
 800d58c:	bfde      	ittt	le
 800d58e:	2330      	movle	r3, #48	; 0x30
 800d590:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d594:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d598:	1b52      	subs	r2, r2, r5
 800d59a:	6122      	str	r2, [r4, #16]
 800d59c:	f8cd a000 	str.w	sl, [sp]
 800d5a0:	464b      	mov	r3, r9
 800d5a2:	aa03      	add	r2, sp, #12
 800d5a4:	4621      	mov	r1, r4
 800d5a6:	4640      	mov	r0, r8
 800d5a8:	f7ff fee4 	bl	800d374 <_printf_common>
 800d5ac:	3001      	adds	r0, #1
 800d5ae:	d14a      	bne.n	800d646 <_printf_i+0x1f6>
 800d5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b4:	b004      	add	sp, #16
 800d5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ba:	6823      	ldr	r3, [r4, #0]
 800d5bc:	f043 0320 	orr.w	r3, r3, #32
 800d5c0:	6023      	str	r3, [r4, #0]
 800d5c2:	4833      	ldr	r0, [pc, #204]	; (800d690 <_printf_i+0x240>)
 800d5c4:	2778      	movs	r7, #120	; 0x78
 800d5c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d5ca:	6823      	ldr	r3, [r4, #0]
 800d5cc:	6829      	ldr	r1, [r5, #0]
 800d5ce:	061f      	lsls	r7, r3, #24
 800d5d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d5d4:	d402      	bmi.n	800d5dc <_printf_i+0x18c>
 800d5d6:	065f      	lsls	r7, r3, #25
 800d5d8:	bf48      	it	mi
 800d5da:	b2b6      	uxthmi	r6, r6
 800d5dc:	07df      	lsls	r7, r3, #31
 800d5de:	bf48      	it	mi
 800d5e0:	f043 0320 	orrmi.w	r3, r3, #32
 800d5e4:	6029      	str	r1, [r5, #0]
 800d5e6:	bf48      	it	mi
 800d5e8:	6023      	strmi	r3, [r4, #0]
 800d5ea:	b91e      	cbnz	r6, 800d5f4 <_printf_i+0x1a4>
 800d5ec:	6823      	ldr	r3, [r4, #0]
 800d5ee:	f023 0320 	bic.w	r3, r3, #32
 800d5f2:	6023      	str	r3, [r4, #0]
 800d5f4:	2310      	movs	r3, #16
 800d5f6:	e7a7      	b.n	800d548 <_printf_i+0xf8>
 800d5f8:	4824      	ldr	r0, [pc, #144]	; (800d68c <_printf_i+0x23c>)
 800d5fa:	e7e4      	b.n	800d5c6 <_printf_i+0x176>
 800d5fc:	4615      	mov	r5, r2
 800d5fe:	e7bd      	b.n	800d57c <_printf_i+0x12c>
 800d600:	682b      	ldr	r3, [r5, #0]
 800d602:	6826      	ldr	r6, [r4, #0]
 800d604:	6961      	ldr	r1, [r4, #20]
 800d606:	1d18      	adds	r0, r3, #4
 800d608:	6028      	str	r0, [r5, #0]
 800d60a:	0635      	lsls	r5, r6, #24
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	d501      	bpl.n	800d614 <_printf_i+0x1c4>
 800d610:	6019      	str	r1, [r3, #0]
 800d612:	e002      	b.n	800d61a <_printf_i+0x1ca>
 800d614:	0670      	lsls	r0, r6, #25
 800d616:	d5fb      	bpl.n	800d610 <_printf_i+0x1c0>
 800d618:	8019      	strh	r1, [r3, #0]
 800d61a:	2300      	movs	r3, #0
 800d61c:	6123      	str	r3, [r4, #16]
 800d61e:	4615      	mov	r5, r2
 800d620:	e7bc      	b.n	800d59c <_printf_i+0x14c>
 800d622:	682b      	ldr	r3, [r5, #0]
 800d624:	1d1a      	adds	r2, r3, #4
 800d626:	602a      	str	r2, [r5, #0]
 800d628:	681d      	ldr	r5, [r3, #0]
 800d62a:	6862      	ldr	r2, [r4, #4]
 800d62c:	2100      	movs	r1, #0
 800d62e:	4628      	mov	r0, r5
 800d630:	f7f2 fe5e 	bl	80002f0 <memchr>
 800d634:	b108      	cbz	r0, 800d63a <_printf_i+0x1ea>
 800d636:	1b40      	subs	r0, r0, r5
 800d638:	6060      	str	r0, [r4, #4]
 800d63a:	6863      	ldr	r3, [r4, #4]
 800d63c:	6123      	str	r3, [r4, #16]
 800d63e:	2300      	movs	r3, #0
 800d640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d644:	e7aa      	b.n	800d59c <_printf_i+0x14c>
 800d646:	6923      	ldr	r3, [r4, #16]
 800d648:	462a      	mov	r2, r5
 800d64a:	4649      	mov	r1, r9
 800d64c:	4640      	mov	r0, r8
 800d64e:	47d0      	blx	sl
 800d650:	3001      	adds	r0, #1
 800d652:	d0ad      	beq.n	800d5b0 <_printf_i+0x160>
 800d654:	6823      	ldr	r3, [r4, #0]
 800d656:	079b      	lsls	r3, r3, #30
 800d658:	d413      	bmi.n	800d682 <_printf_i+0x232>
 800d65a:	68e0      	ldr	r0, [r4, #12]
 800d65c:	9b03      	ldr	r3, [sp, #12]
 800d65e:	4298      	cmp	r0, r3
 800d660:	bfb8      	it	lt
 800d662:	4618      	movlt	r0, r3
 800d664:	e7a6      	b.n	800d5b4 <_printf_i+0x164>
 800d666:	2301      	movs	r3, #1
 800d668:	4632      	mov	r2, r6
 800d66a:	4649      	mov	r1, r9
 800d66c:	4640      	mov	r0, r8
 800d66e:	47d0      	blx	sl
 800d670:	3001      	adds	r0, #1
 800d672:	d09d      	beq.n	800d5b0 <_printf_i+0x160>
 800d674:	3501      	adds	r5, #1
 800d676:	68e3      	ldr	r3, [r4, #12]
 800d678:	9903      	ldr	r1, [sp, #12]
 800d67a:	1a5b      	subs	r3, r3, r1
 800d67c:	42ab      	cmp	r3, r5
 800d67e:	dcf2      	bgt.n	800d666 <_printf_i+0x216>
 800d680:	e7eb      	b.n	800d65a <_printf_i+0x20a>
 800d682:	2500      	movs	r5, #0
 800d684:	f104 0619 	add.w	r6, r4, #25
 800d688:	e7f5      	b.n	800d676 <_printf_i+0x226>
 800d68a:	bf00      	nop
 800d68c:	0800fb42 	.word	0x0800fb42
 800d690:	0800fb53 	.word	0x0800fb53

0800d694 <std>:
 800d694:	2300      	movs	r3, #0
 800d696:	b510      	push	{r4, lr}
 800d698:	4604      	mov	r4, r0
 800d69a:	e9c0 3300 	strd	r3, r3, [r0]
 800d69e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d6a2:	6083      	str	r3, [r0, #8]
 800d6a4:	8181      	strh	r1, [r0, #12]
 800d6a6:	6643      	str	r3, [r0, #100]	; 0x64
 800d6a8:	81c2      	strh	r2, [r0, #14]
 800d6aa:	6183      	str	r3, [r0, #24]
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	2208      	movs	r2, #8
 800d6b0:	305c      	adds	r0, #92	; 0x5c
 800d6b2:	f000 fa17 	bl	800dae4 <memset>
 800d6b6:	4b0d      	ldr	r3, [pc, #52]	; (800d6ec <std+0x58>)
 800d6b8:	6263      	str	r3, [r4, #36]	; 0x24
 800d6ba:	4b0d      	ldr	r3, [pc, #52]	; (800d6f0 <std+0x5c>)
 800d6bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d6be:	4b0d      	ldr	r3, [pc, #52]	; (800d6f4 <std+0x60>)
 800d6c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d6c2:	4b0d      	ldr	r3, [pc, #52]	; (800d6f8 <std+0x64>)
 800d6c4:	6323      	str	r3, [r4, #48]	; 0x30
 800d6c6:	4b0d      	ldr	r3, [pc, #52]	; (800d6fc <std+0x68>)
 800d6c8:	6224      	str	r4, [r4, #32]
 800d6ca:	429c      	cmp	r4, r3
 800d6cc:	d006      	beq.n	800d6dc <std+0x48>
 800d6ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d6d2:	4294      	cmp	r4, r2
 800d6d4:	d002      	beq.n	800d6dc <std+0x48>
 800d6d6:	33d0      	adds	r3, #208	; 0xd0
 800d6d8:	429c      	cmp	r4, r3
 800d6da:	d105      	bne.n	800d6e8 <std+0x54>
 800d6dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6e4:	f000 ba7a 	b.w	800dbdc <__retarget_lock_init_recursive>
 800d6e8:	bd10      	pop	{r4, pc}
 800d6ea:	bf00      	nop
 800d6ec:	0800d935 	.word	0x0800d935
 800d6f0:	0800d957 	.word	0x0800d957
 800d6f4:	0800d98f 	.word	0x0800d98f
 800d6f8:	0800d9b3 	.word	0x0800d9b3
 800d6fc:	24061f3c 	.word	0x24061f3c

0800d700 <stdio_exit_handler>:
 800d700:	4a02      	ldr	r2, [pc, #8]	; (800d70c <stdio_exit_handler+0xc>)
 800d702:	4903      	ldr	r1, [pc, #12]	; (800d710 <stdio_exit_handler+0x10>)
 800d704:	4803      	ldr	r0, [pc, #12]	; (800d714 <stdio_exit_handler+0x14>)
 800d706:	f000 b869 	b.w	800d7dc <_fwalk_sglue>
 800d70a:	bf00      	nop
 800d70c:	24000018 	.word	0x24000018
 800d710:	0800f70d 	.word	0x0800f70d
 800d714:	24000024 	.word	0x24000024

0800d718 <cleanup_stdio>:
 800d718:	6841      	ldr	r1, [r0, #4]
 800d71a:	4b0c      	ldr	r3, [pc, #48]	; (800d74c <cleanup_stdio+0x34>)
 800d71c:	4299      	cmp	r1, r3
 800d71e:	b510      	push	{r4, lr}
 800d720:	4604      	mov	r4, r0
 800d722:	d001      	beq.n	800d728 <cleanup_stdio+0x10>
 800d724:	f001 fff2 	bl	800f70c <_fflush_r>
 800d728:	68a1      	ldr	r1, [r4, #8]
 800d72a:	4b09      	ldr	r3, [pc, #36]	; (800d750 <cleanup_stdio+0x38>)
 800d72c:	4299      	cmp	r1, r3
 800d72e:	d002      	beq.n	800d736 <cleanup_stdio+0x1e>
 800d730:	4620      	mov	r0, r4
 800d732:	f001 ffeb 	bl	800f70c <_fflush_r>
 800d736:	68e1      	ldr	r1, [r4, #12]
 800d738:	4b06      	ldr	r3, [pc, #24]	; (800d754 <cleanup_stdio+0x3c>)
 800d73a:	4299      	cmp	r1, r3
 800d73c:	d004      	beq.n	800d748 <cleanup_stdio+0x30>
 800d73e:	4620      	mov	r0, r4
 800d740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d744:	f001 bfe2 	b.w	800f70c <_fflush_r>
 800d748:	bd10      	pop	{r4, pc}
 800d74a:	bf00      	nop
 800d74c:	24061f3c 	.word	0x24061f3c
 800d750:	24061fa4 	.word	0x24061fa4
 800d754:	2406200c 	.word	0x2406200c

0800d758 <global_stdio_init.part.0>:
 800d758:	b510      	push	{r4, lr}
 800d75a:	4b0b      	ldr	r3, [pc, #44]	; (800d788 <global_stdio_init.part.0+0x30>)
 800d75c:	4c0b      	ldr	r4, [pc, #44]	; (800d78c <global_stdio_init.part.0+0x34>)
 800d75e:	4a0c      	ldr	r2, [pc, #48]	; (800d790 <global_stdio_init.part.0+0x38>)
 800d760:	601a      	str	r2, [r3, #0]
 800d762:	4620      	mov	r0, r4
 800d764:	2200      	movs	r2, #0
 800d766:	2104      	movs	r1, #4
 800d768:	f7ff ff94 	bl	800d694 <std>
 800d76c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d770:	2201      	movs	r2, #1
 800d772:	2109      	movs	r1, #9
 800d774:	f7ff ff8e 	bl	800d694 <std>
 800d778:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d77c:	2202      	movs	r2, #2
 800d77e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d782:	2112      	movs	r1, #18
 800d784:	f7ff bf86 	b.w	800d694 <std>
 800d788:	24062074 	.word	0x24062074
 800d78c:	24061f3c 	.word	0x24061f3c
 800d790:	0800d701 	.word	0x0800d701

0800d794 <__sfp_lock_acquire>:
 800d794:	4801      	ldr	r0, [pc, #4]	; (800d79c <__sfp_lock_acquire+0x8>)
 800d796:	f000 ba22 	b.w	800dbde <__retarget_lock_acquire_recursive>
 800d79a:	bf00      	nop
 800d79c:	2406207d 	.word	0x2406207d

0800d7a0 <__sfp_lock_release>:
 800d7a0:	4801      	ldr	r0, [pc, #4]	; (800d7a8 <__sfp_lock_release+0x8>)
 800d7a2:	f000 ba1d 	b.w	800dbe0 <__retarget_lock_release_recursive>
 800d7a6:	bf00      	nop
 800d7a8:	2406207d 	.word	0x2406207d

0800d7ac <__sinit>:
 800d7ac:	b510      	push	{r4, lr}
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	f7ff fff0 	bl	800d794 <__sfp_lock_acquire>
 800d7b4:	6a23      	ldr	r3, [r4, #32]
 800d7b6:	b11b      	cbz	r3, 800d7c0 <__sinit+0x14>
 800d7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7bc:	f7ff bff0 	b.w	800d7a0 <__sfp_lock_release>
 800d7c0:	4b04      	ldr	r3, [pc, #16]	; (800d7d4 <__sinit+0x28>)
 800d7c2:	6223      	str	r3, [r4, #32]
 800d7c4:	4b04      	ldr	r3, [pc, #16]	; (800d7d8 <__sinit+0x2c>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1f5      	bne.n	800d7b8 <__sinit+0xc>
 800d7cc:	f7ff ffc4 	bl	800d758 <global_stdio_init.part.0>
 800d7d0:	e7f2      	b.n	800d7b8 <__sinit+0xc>
 800d7d2:	bf00      	nop
 800d7d4:	0800d719 	.word	0x0800d719
 800d7d8:	24062074 	.word	0x24062074

0800d7dc <_fwalk_sglue>:
 800d7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7e0:	4607      	mov	r7, r0
 800d7e2:	4688      	mov	r8, r1
 800d7e4:	4614      	mov	r4, r2
 800d7e6:	2600      	movs	r6, #0
 800d7e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d7ec:	f1b9 0901 	subs.w	r9, r9, #1
 800d7f0:	d505      	bpl.n	800d7fe <_fwalk_sglue+0x22>
 800d7f2:	6824      	ldr	r4, [r4, #0]
 800d7f4:	2c00      	cmp	r4, #0
 800d7f6:	d1f7      	bne.n	800d7e8 <_fwalk_sglue+0xc>
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7fe:	89ab      	ldrh	r3, [r5, #12]
 800d800:	2b01      	cmp	r3, #1
 800d802:	d907      	bls.n	800d814 <_fwalk_sglue+0x38>
 800d804:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d808:	3301      	adds	r3, #1
 800d80a:	d003      	beq.n	800d814 <_fwalk_sglue+0x38>
 800d80c:	4629      	mov	r1, r5
 800d80e:	4638      	mov	r0, r7
 800d810:	47c0      	blx	r8
 800d812:	4306      	orrs	r6, r0
 800d814:	3568      	adds	r5, #104	; 0x68
 800d816:	e7e9      	b.n	800d7ec <_fwalk_sglue+0x10>

0800d818 <iprintf>:
 800d818:	b40f      	push	{r0, r1, r2, r3}
 800d81a:	b507      	push	{r0, r1, r2, lr}
 800d81c:	4906      	ldr	r1, [pc, #24]	; (800d838 <iprintf+0x20>)
 800d81e:	ab04      	add	r3, sp, #16
 800d820:	6808      	ldr	r0, [r1, #0]
 800d822:	f853 2b04 	ldr.w	r2, [r3], #4
 800d826:	6881      	ldr	r1, [r0, #8]
 800d828:	9301      	str	r3, [sp, #4]
 800d82a:	f001 fdcf 	bl	800f3cc <_vfiprintf_r>
 800d82e:	b003      	add	sp, #12
 800d830:	f85d eb04 	ldr.w	lr, [sp], #4
 800d834:	b004      	add	sp, #16
 800d836:	4770      	bx	lr
 800d838:	24000070 	.word	0x24000070

0800d83c <_puts_r>:
 800d83c:	6a03      	ldr	r3, [r0, #32]
 800d83e:	b570      	push	{r4, r5, r6, lr}
 800d840:	6884      	ldr	r4, [r0, #8]
 800d842:	4605      	mov	r5, r0
 800d844:	460e      	mov	r6, r1
 800d846:	b90b      	cbnz	r3, 800d84c <_puts_r+0x10>
 800d848:	f7ff ffb0 	bl	800d7ac <__sinit>
 800d84c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d84e:	07db      	lsls	r3, r3, #31
 800d850:	d405      	bmi.n	800d85e <_puts_r+0x22>
 800d852:	89a3      	ldrh	r3, [r4, #12]
 800d854:	0598      	lsls	r0, r3, #22
 800d856:	d402      	bmi.n	800d85e <_puts_r+0x22>
 800d858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d85a:	f000 f9c0 	bl	800dbde <__retarget_lock_acquire_recursive>
 800d85e:	89a3      	ldrh	r3, [r4, #12]
 800d860:	0719      	lsls	r1, r3, #28
 800d862:	d513      	bpl.n	800d88c <_puts_r+0x50>
 800d864:	6923      	ldr	r3, [r4, #16]
 800d866:	b18b      	cbz	r3, 800d88c <_puts_r+0x50>
 800d868:	3e01      	subs	r6, #1
 800d86a:	68a3      	ldr	r3, [r4, #8]
 800d86c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d870:	3b01      	subs	r3, #1
 800d872:	60a3      	str	r3, [r4, #8]
 800d874:	b9e9      	cbnz	r1, 800d8b2 <_puts_r+0x76>
 800d876:	2b00      	cmp	r3, #0
 800d878:	da2e      	bge.n	800d8d8 <_puts_r+0x9c>
 800d87a:	4622      	mov	r2, r4
 800d87c:	210a      	movs	r1, #10
 800d87e:	4628      	mov	r0, r5
 800d880:	f000 f89b 	bl	800d9ba <__swbuf_r>
 800d884:	3001      	adds	r0, #1
 800d886:	d007      	beq.n	800d898 <_puts_r+0x5c>
 800d888:	250a      	movs	r5, #10
 800d88a:	e007      	b.n	800d89c <_puts_r+0x60>
 800d88c:	4621      	mov	r1, r4
 800d88e:	4628      	mov	r0, r5
 800d890:	f000 f8d0 	bl	800da34 <__swsetup_r>
 800d894:	2800      	cmp	r0, #0
 800d896:	d0e7      	beq.n	800d868 <_puts_r+0x2c>
 800d898:	f04f 35ff 	mov.w	r5, #4294967295
 800d89c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d89e:	07da      	lsls	r2, r3, #31
 800d8a0:	d405      	bmi.n	800d8ae <_puts_r+0x72>
 800d8a2:	89a3      	ldrh	r3, [r4, #12]
 800d8a4:	059b      	lsls	r3, r3, #22
 800d8a6:	d402      	bmi.n	800d8ae <_puts_r+0x72>
 800d8a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8aa:	f000 f999 	bl	800dbe0 <__retarget_lock_release_recursive>
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	bd70      	pop	{r4, r5, r6, pc}
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	da04      	bge.n	800d8c0 <_puts_r+0x84>
 800d8b6:	69a2      	ldr	r2, [r4, #24]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	dc06      	bgt.n	800d8ca <_puts_r+0x8e>
 800d8bc:	290a      	cmp	r1, #10
 800d8be:	d004      	beq.n	800d8ca <_puts_r+0x8e>
 800d8c0:	6823      	ldr	r3, [r4, #0]
 800d8c2:	1c5a      	adds	r2, r3, #1
 800d8c4:	6022      	str	r2, [r4, #0]
 800d8c6:	7019      	strb	r1, [r3, #0]
 800d8c8:	e7cf      	b.n	800d86a <_puts_r+0x2e>
 800d8ca:	4622      	mov	r2, r4
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	f000 f874 	bl	800d9ba <__swbuf_r>
 800d8d2:	3001      	adds	r0, #1
 800d8d4:	d1c9      	bne.n	800d86a <_puts_r+0x2e>
 800d8d6:	e7df      	b.n	800d898 <_puts_r+0x5c>
 800d8d8:	6823      	ldr	r3, [r4, #0]
 800d8da:	250a      	movs	r5, #10
 800d8dc:	1c5a      	adds	r2, r3, #1
 800d8de:	6022      	str	r2, [r4, #0]
 800d8e0:	701d      	strb	r5, [r3, #0]
 800d8e2:	e7db      	b.n	800d89c <_puts_r+0x60>

0800d8e4 <puts>:
 800d8e4:	4b02      	ldr	r3, [pc, #8]	; (800d8f0 <puts+0xc>)
 800d8e6:	4601      	mov	r1, r0
 800d8e8:	6818      	ldr	r0, [r3, #0]
 800d8ea:	f7ff bfa7 	b.w	800d83c <_puts_r>
 800d8ee:	bf00      	nop
 800d8f0:	24000070 	.word	0x24000070

0800d8f4 <siprintf>:
 800d8f4:	b40e      	push	{r1, r2, r3}
 800d8f6:	b500      	push	{lr}
 800d8f8:	b09c      	sub	sp, #112	; 0x70
 800d8fa:	ab1d      	add	r3, sp, #116	; 0x74
 800d8fc:	9002      	str	r0, [sp, #8]
 800d8fe:	9006      	str	r0, [sp, #24]
 800d900:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d904:	4809      	ldr	r0, [pc, #36]	; (800d92c <siprintf+0x38>)
 800d906:	9107      	str	r1, [sp, #28]
 800d908:	9104      	str	r1, [sp, #16]
 800d90a:	4909      	ldr	r1, [pc, #36]	; (800d930 <siprintf+0x3c>)
 800d90c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d910:	9105      	str	r1, [sp, #20]
 800d912:	6800      	ldr	r0, [r0, #0]
 800d914:	9301      	str	r3, [sp, #4]
 800d916:	a902      	add	r1, sp, #8
 800d918:	f001 fc30 	bl	800f17c <_svfiprintf_r>
 800d91c:	9b02      	ldr	r3, [sp, #8]
 800d91e:	2200      	movs	r2, #0
 800d920:	701a      	strb	r2, [r3, #0]
 800d922:	b01c      	add	sp, #112	; 0x70
 800d924:	f85d eb04 	ldr.w	lr, [sp], #4
 800d928:	b003      	add	sp, #12
 800d92a:	4770      	bx	lr
 800d92c:	24000070 	.word	0x24000070
 800d930:	ffff0208 	.word	0xffff0208

0800d934 <__sread>:
 800d934:	b510      	push	{r4, lr}
 800d936:	460c      	mov	r4, r1
 800d938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d93c:	f000 f900 	bl	800db40 <_read_r>
 800d940:	2800      	cmp	r0, #0
 800d942:	bfab      	itete	ge
 800d944:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d946:	89a3      	ldrhlt	r3, [r4, #12]
 800d948:	181b      	addge	r3, r3, r0
 800d94a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d94e:	bfac      	ite	ge
 800d950:	6563      	strge	r3, [r4, #84]	; 0x54
 800d952:	81a3      	strhlt	r3, [r4, #12]
 800d954:	bd10      	pop	{r4, pc}

0800d956 <__swrite>:
 800d956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d95a:	461f      	mov	r7, r3
 800d95c:	898b      	ldrh	r3, [r1, #12]
 800d95e:	05db      	lsls	r3, r3, #23
 800d960:	4605      	mov	r5, r0
 800d962:	460c      	mov	r4, r1
 800d964:	4616      	mov	r6, r2
 800d966:	d505      	bpl.n	800d974 <__swrite+0x1e>
 800d968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d96c:	2302      	movs	r3, #2
 800d96e:	2200      	movs	r2, #0
 800d970:	f000 f8d4 	bl	800db1c <_lseek_r>
 800d974:	89a3      	ldrh	r3, [r4, #12]
 800d976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d97a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d97e:	81a3      	strh	r3, [r4, #12]
 800d980:	4632      	mov	r2, r6
 800d982:	463b      	mov	r3, r7
 800d984:	4628      	mov	r0, r5
 800d986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d98a:	f000 b8eb 	b.w	800db64 <_write_r>

0800d98e <__sseek>:
 800d98e:	b510      	push	{r4, lr}
 800d990:	460c      	mov	r4, r1
 800d992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d996:	f000 f8c1 	bl	800db1c <_lseek_r>
 800d99a:	1c43      	adds	r3, r0, #1
 800d99c:	89a3      	ldrh	r3, [r4, #12]
 800d99e:	bf15      	itete	ne
 800d9a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d9a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d9a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d9aa:	81a3      	strheq	r3, [r4, #12]
 800d9ac:	bf18      	it	ne
 800d9ae:	81a3      	strhne	r3, [r4, #12]
 800d9b0:	bd10      	pop	{r4, pc}

0800d9b2 <__sclose>:
 800d9b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9b6:	f000 b8a1 	b.w	800dafc <_close_r>

0800d9ba <__swbuf_r>:
 800d9ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9bc:	460e      	mov	r6, r1
 800d9be:	4614      	mov	r4, r2
 800d9c0:	4605      	mov	r5, r0
 800d9c2:	b118      	cbz	r0, 800d9cc <__swbuf_r+0x12>
 800d9c4:	6a03      	ldr	r3, [r0, #32]
 800d9c6:	b90b      	cbnz	r3, 800d9cc <__swbuf_r+0x12>
 800d9c8:	f7ff fef0 	bl	800d7ac <__sinit>
 800d9cc:	69a3      	ldr	r3, [r4, #24]
 800d9ce:	60a3      	str	r3, [r4, #8]
 800d9d0:	89a3      	ldrh	r3, [r4, #12]
 800d9d2:	071a      	lsls	r2, r3, #28
 800d9d4:	d525      	bpl.n	800da22 <__swbuf_r+0x68>
 800d9d6:	6923      	ldr	r3, [r4, #16]
 800d9d8:	b31b      	cbz	r3, 800da22 <__swbuf_r+0x68>
 800d9da:	6823      	ldr	r3, [r4, #0]
 800d9dc:	6922      	ldr	r2, [r4, #16]
 800d9de:	1a98      	subs	r0, r3, r2
 800d9e0:	6963      	ldr	r3, [r4, #20]
 800d9e2:	b2f6      	uxtb	r6, r6
 800d9e4:	4283      	cmp	r3, r0
 800d9e6:	4637      	mov	r7, r6
 800d9e8:	dc04      	bgt.n	800d9f4 <__swbuf_r+0x3a>
 800d9ea:	4621      	mov	r1, r4
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	f001 fe8d 	bl	800f70c <_fflush_r>
 800d9f2:	b9e0      	cbnz	r0, 800da2e <__swbuf_r+0x74>
 800d9f4:	68a3      	ldr	r3, [r4, #8]
 800d9f6:	3b01      	subs	r3, #1
 800d9f8:	60a3      	str	r3, [r4, #8]
 800d9fa:	6823      	ldr	r3, [r4, #0]
 800d9fc:	1c5a      	adds	r2, r3, #1
 800d9fe:	6022      	str	r2, [r4, #0]
 800da00:	701e      	strb	r6, [r3, #0]
 800da02:	6962      	ldr	r2, [r4, #20]
 800da04:	1c43      	adds	r3, r0, #1
 800da06:	429a      	cmp	r2, r3
 800da08:	d004      	beq.n	800da14 <__swbuf_r+0x5a>
 800da0a:	89a3      	ldrh	r3, [r4, #12]
 800da0c:	07db      	lsls	r3, r3, #31
 800da0e:	d506      	bpl.n	800da1e <__swbuf_r+0x64>
 800da10:	2e0a      	cmp	r6, #10
 800da12:	d104      	bne.n	800da1e <__swbuf_r+0x64>
 800da14:	4621      	mov	r1, r4
 800da16:	4628      	mov	r0, r5
 800da18:	f001 fe78 	bl	800f70c <_fflush_r>
 800da1c:	b938      	cbnz	r0, 800da2e <__swbuf_r+0x74>
 800da1e:	4638      	mov	r0, r7
 800da20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da22:	4621      	mov	r1, r4
 800da24:	4628      	mov	r0, r5
 800da26:	f000 f805 	bl	800da34 <__swsetup_r>
 800da2a:	2800      	cmp	r0, #0
 800da2c:	d0d5      	beq.n	800d9da <__swbuf_r+0x20>
 800da2e:	f04f 37ff 	mov.w	r7, #4294967295
 800da32:	e7f4      	b.n	800da1e <__swbuf_r+0x64>

0800da34 <__swsetup_r>:
 800da34:	b538      	push	{r3, r4, r5, lr}
 800da36:	4b2a      	ldr	r3, [pc, #168]	; (800dae0 <__swsetup_r+0xac>)
 800da38:	4605      	mov	r5, r0
 800da3a:	6818      	ldr	r0, [r3, #0]
 800da3c:	460c      	mov	r4, r1
 800da3e:	b118      	cbz	r0, 800da48 <__swsetup_r+0x14>
 800da40:	6a03      	ldr	r3, [r0, #32]
 800da42:	b90b      	cbnz	r3, 800da48 <__swsetup_r+0x14>
 800da44:	f7ff feb2 	bl	800d7ac <__sinit>
 800da48:	89a3      	ldrh	r3, [r4, #12]
 800da4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da4e:	0718      	lsls	r0, r3, #28
 800da50:	d422      	bmi.n	800da98 <__swsetup_r+0x64>
 800da52:	06d9      	lsls	r1, r3, #27
 800da54:	d407      	bmi.n	800da66 <__swsetup_r+0x32>
 800da56:	2309      	movs	r3, #9
 800da58:	602b      	str	r3, [r5, #0]
 800da5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800da5e:	81a3      	strh	r3, [r4, #12]
 800da60:	f04f 30ff 	mov.w	r0, #4294967295
 800da64:	e034      	b.n	800dad0 <__swsetup_r+0x9c>
 800da66:	0758      	lsls	r0, r3, #29
 800da68:	d512      	bpl.n	800da90 <__swsetup_r+0x5c>
 800da6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da6c:	b141      	cbz	r1, 800da80 <__swsetup_r+0x4c>
 800da6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da72:	4299      	cmp	r1, r3
 800da74:	d002      	beq.n	800da7c <__swsetup_r+0x48>
 800da76:	4628      	mov	r0, r5
 800da78:	f000 feaa 	bl	800e7d0 <_free_r>
 800da7c:	2300      	movs	r3, #0
 800da7e:	6363      	str	r3, [r4, #52]	; 0x34
 800da80:	89a3      	ldrh	r3, [r4, #12]
 800da82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da86:	81a3      	strh	r3, [r4, #12]
 800da88:	2300      	movs	r3, #0
 800da8a:	6063      	str	r3, [r4, #4]
 800da8c:	6923      	ldr	r3, [r4, #16]
 800da8e:	6023      	str	r3, [r4, #0]
 800da90:	89a3      	ldrh	r3, [r4, #12]
 800da92:	f043 0308 	orr.w	r3, r3, #8
 800da96:	81a3      	strh	r3, [r4, #12]
 800da98:	6923      	ldr	r3, [r4, #16]
 800da9a:	b94b      	cbnz	r3, 800dab0 <__swsetup_r+0x7c>
 800da9c:	89a3      	ldrh	r3, [r4, #12]
 800da9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800daa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800daa6:	d003      	beq.n	800dab0 <__swsetup_r+0x7c>
 800daa8:	4621      	mov	r1, r4
 800daaa:	4628      	mov	r0, r5
 800daac:	f001 fe7c 	bl	800f7a8 <__smakebuf_r>
 800dab0:	89a0      	ldrh	r0, [r4, #12]
 800dab2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dab6:	f010 0301 	ands.w	r3, r0, #1
 800daba:	d00a      	beq.n	800dad2 <__swsetup_r+0x9e>
 800dabc:	2300      	movs	r3, #0
 800dabe:	60a3      	str	r3, [r4, #8]
 800dac0:	6963      	ldr	r3, [r4, #20]
 800dac2:	425b      	negs	r3, r3
 800dac4:	61a3      	str	r3, [r4, #24]
 800dac6:	6923      	ldr	r3, [r4, #16]
 800dac8:	b943      	cbnz	r3, 800dadc <__swsetup_r+0xa8>
 800daca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dace:	d1c4      	bne.n	800da5a <__swsetup_r+0x26>
 800dad0:	bd38      	pop	{r3, r4, r5, pc}
 800dad2:	0781      	lsls	r1, r0, #30
 800dad4:	bf58      	it	pl
 800dad6:	6963      	ldrpl	r3, [r4, #20]
 800dad8:	60a3      	str	r3, [r4, #8]
 800dada:	e7f4      	b.n	800dac6 <__swsetup_r+0x92>
 800dadc:	2000      	movs	r0, #0
 800dade:	e7f7      	b.n	800dad0 <__swsetup_r+0x9c>
 800dae0:	24000070 	.word	0x24000070

0800dae4 <memset>:
 800dae4:	4402      	add	r2, r0
 800dae6:	4603      	mov	r3, r0
 800dae8:	4293      	cmp	r3, r2
 800daea:	d100      	bne.n	800daee <memset+0xa>
 800daec:	4770      	bx	lr
 800daee:	f803 1b01 	strb.w	r1, [r3], #1
 800daf2:	e7f9      	b.n	800dae8 <memset+0x4>

0800daf4 <_localeconv_r>:
 800daf4:	4800      	ldr	r0, [pc, #0]	; (800daf8 <_localeconv_r+0x4>)
 800daf6:	4770      	bx	lr
 800daf8:	24000164 	.word	0x24000164

0800dafc <_close_r>:
 800dafc:	b538      	push	{r3, r4, r5, lr}
 800dafe:	4d06      	ldr	r5, [pc, #24]	; (800db18 <_close_r+0x1c>)
 800db00:	2300      	movs	r3, #0
 800db02:	4604      	mov	r4, r0
 800db04:	4608      	mov	r0, r1
 800db06:	602b      	str	r3, [r5, #0]
 800db08:	f7f4 fbad 	bl	8002266 <_close>
 800db0c:	1c43      	adds	r3, r0, #1
 800db0e:	d102      	bne.n	800db16 <_close_r+0x1a>
 800db10:	682b      	ldr	r3, [r5, #0]
 800db12:	b103      	cbz	r3, 800db16 <_close_r+0x1a>
 800db14:	6023      	str	r3, [r4, #0]
 800db16:	bd38      	pop	{r3, r4, r5, pc}
 800db18:	24062078 	.word	0x24062078

0800db1c <_lseek_r>:
 800db1c:	b538      	push	{r3, r4, r5, lr}
 800db1e:	4d07      	ldr	r5, [pc, #28]	; (800db3c <_lseek_r+0x20>)
 800db20:	4604      	mov	r4, r0
 800db22:	4608      	mov	r0, r1
 800db24:	4611      	mov	r1, r2
 800db26:	2200      	movs	r2, #0
 800db28:	602a      	str	r2, [r5, #0]
 800db2a:	461a      	mov	r2, r3
 800db2c:	f7f4 fbc2 	bl	80022b4 <_lseek>
 800db30:	1c43      	adds	r3, r0, #1
 800db32:	d102      	bne.n	800db3a <_lseek_r+0x1e>
 800db34:	682b      	ldr	r3, [r5, #0]
 800db36:	b103      	cbz	r3, 800db3a <_lseek_r+0x1e>
 800db38:	6023      	str	r3, [r4, #0]
 800db3a:	bd38      	pop	{r3, r4, r5, pc}
 800db3c:	24062078 	.word	0x24062078

0800db40 <_read_r>:
 800db40:	b538      	push	{r3, r4, r5, lr}
 800db42:	4d07      	ldr	r5, [pc, #28]	; (800db60 <_read_r+0x20>)
 800db44:	4604      	mov	r4, r0
 800db46:	4608      	mov	r0, r1
 800db48:	4611      	mov	r1, r2
 800db4a:	2200      	movs	r2, #0
 800db4c:	602a      	str	r2, [r5, #0]
 800db4e:	461a      	mov	r2, r3
 800db50:	f7f4 fb50 	bl	80021f4 <_read>
 800db54:	1c43      	adds	r3, r0, #1
 800db56:	d102      	bne.n	800db5e <_read_r+0x1e>
 800db58:	682b      	ldr	r3, [r5, #0]
 800db5a:	b103      	cbz	r3, 800db5e <_read_r+0x1e>
 800db5c:	6023      	str	r3, [r4, #0]
 800db5e:	bd38      	pop	{r3, r4, r5, pc}
 800db60:	24062078 	.word	0x24062078

0800db64 <_write_r>:
 800db64:	b538      	push	{r3, r4, r5, lr}
 800db66:	4d07      	ldr	r5, [pc, #28]	; (800db84 <_write_r+0x20>)
 800db68:	4604      	mov	r4, r0
 800db6a:	4608      	mov	r0, r1
 800db6c:	4611      	mov	r1, r2
 800db6e:	2200      	movs	r2, #0
 800db70:	602a      	str	r2, [r5, #0]
 800db72:	461a      	mov	r2, r3
 800db74:	f7f4 fb5b 	bl	800222e <_write>
 800db78:	1c43      	adds	r3, r0, #1
 800db7a:	d102      	bne.n	800db82 <_write_r+0x1e>
 800db7c:	682b      	ldr	r3, [r5, #0]
 800db7e:	b103      	cbz	r3, 800db82 <_write_r+0x1e>
 800db80:	6023      	str	r3, [r4, #0]
 800db82:	bd38      	pop	{r3, r4, r5, pc}
 800db84:	24062078 	.word	0x24062078

0800db88 <__errno>:
 800db88:	4b01      	ldr	r3, [pc, #4]	; (800db90 <__errno+0x8>)
 800db8a:	6818      	ldr	r0, [r3, #0]
 800db8c:	4770      	bx	lr
 800db8e:	bf00      	nop
 800db90:	24000070 	.word	0x24000070

0800db94 <__libc_init_array>:
 800db94:	b570      	push	{r4, r5, r6, lr}
 800db96:	4d0d      	ldr	r5, [pc, #52]	; (800dbcc <__libc_init_array+0x38>)
 800db98:	4c0d      	ldr	r4, [pc, #52]	; (800dbd0 <__libc_init_array+0x3c>)
 800db9a:	1b64      	subs	r4, r4, r5
 800db9c:	10a4      	asrs	r4, r4, #2
 800db9e:	2600      	movs	r6, #0
 800dba0:	42a6      	cmp	r6, r4
 800dba2:	d109      	bne.n	800dbb8 <__libc_init_array+0x24>
 800dba4:	4d0b      	ldr	r5, [pc, #44]	; (800dbd4 <__libc_init_array+0x40>)
 800dba6:	4c0c      	ldr	r4, [pc, #48]	; (800dbd8 <__libc_init_array+0x44>)
 800dba8:	f001 ff7c 	bl	800faa4 <_init>
 800dbac:	1b64      	subs	r4, r4, r5
 800dbae:	10a4      	asrs	r4, r4, #2
 800dbb0:	2600      	movs	r6, #0
 800dbb2:	42a6      	cmp	r6, r4
 800dbb4:	d105      	bne.n	800dbc2 <__libc_init_array+0x2e>
 800dbb6:	bd70      	pop	{r4, r5, r6, pc}
 800dbb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbbc:	4798      	blx	r3
 800dbbe:	3601      	adds	r6, #1
 800dbc0:	e7ee      	b.n	800dba0 <__libc_init_array+0xc>
 800dbc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbc6:	4798      	blx	r3
 800dbc8:	3601      	adds	r6, #1
 800dbca:	e7f2      	b.n	800dbb2 <__libc_init_array+0x1e>
 800dbcc:	0800feac 	.word	0x0800feac
 800dbd0:	0800feac 	.word	0x0800feac
 800dbd4:	0800feac 	.word	0x0800feac
 800dbd8:	0800feb0 	.word	0x0800feb0

0800dbdc <__retarget_lock_init_recursive>:
 800dbdc:	4770      	bx	lr

0800dbde <__retarget_lock_acquire_recursive>:
 800dbde:	4770      	bx	lr

0800dbe0 <__retarget_lock_release_recursive>:
 800dbe0:	4770      	bx	lr

0800dbe2 <quorem>:
 800dbe2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe6:	6903      	ldr	r3, [r0, #16]
 800dbe8:	690c      	ldr	r4, [r1, #16]
 800dbea:	42a3      	cmp	r3, r4
 800dbec:	4607      	mov	r7, r0
 800dbee:	db7e      	blt.n	800dcee <quorem+0x10c>
 800dbf0:	3c01      	subs	r4, #1
 800dbf2:	f101 0814 	add.w	r8, r1, #20
 800dbf6:	f100 0514 	add.w	r5, r0, #20
 800dbfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbfe:	9301      	str	r3, [sp, #4]
 800dc00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc08:	3301      	adds	r3, #1
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dc10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc14:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc18:	d331      	bcc.n	800dc7e <quorem+0x9c>
 800dc1a:	f04f 0e00 	mov.w	lr, #0
 800dc1e:	4640      	mov	r0, r8
 800dc20:	46ac      	mov	ip, r5
 800dc22:	46f2      	mov	sl, lr
 800dc24:	f850 2b04 	ldr.w	r2, [r0], #4
 800dc28:	b293      	uxth	r3, r2
 800dc2a:	fb06 e303 	mla	r3, r6, r3, lr
 800dc2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dc32:	0c1a      	lsrs	r2, r3, #16
 800dc34:	b29b      	uxth	r3, r3
 800dc36:	ebaa 0303 	sub.w	r3, sl, r3
 800dc3a:	f8dc a000 	ldr.w	sl, [ip]
 800dc3e:	fa13 f38a 	uxtah	r3, r3, sl
 800dc42:	fb06 220e 	mla	r2, r6, lr, r2
 800dc46:	9300      	str	r3, [sp, #0]
 800dc48:	9b00      	ldr	r3, [sp, #0]
 800dc4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dc4e:	b292      	uxth	r2, r2
 800dc50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dc54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc58:	f8bd 3000 	ldrh.w	r3, [sp]
 800dc5c:	4581      	cmp	r9, r0
 800dc5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc62:	f84c 3b04 	str.w	r3, [ip], #4
 800dc66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dc6a:	d2db      	bcs.n	800dc24 <quorem+0x42>
 800dc6c:	f855 300b 	ldr.w	r3, [r5, fp]
 800dc70:	b92b      	cbnz	r3, 800dc7e <quorem+0x9c>
 800dc72:	9b01      	ldr	r3, [sp, #4]
 800dc74:	3b04      	subs	r3, #4
 800dc76:	429d      	cmp	r5, r3
 800dc78:	461a      	mov	r2, r3
 800dc7a:	d32c      	bcc.n	800dcd6 <quorem+0xf4>
 800dc7c:	613c      	str	r4, [r7, #16]
 800dc7e:	4638      	mov	r0, r7
 800dc80:	f001 f922 	bl	800eec8 <__mcmp>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	db22      	blt.n	800dcce <quorem+0xec>
 800dc88:	3601      	adds	r6, #1
 800dc8a:	4629      	mov	r1, r5
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc92:	f8d1 c000 	ldr.w	ip, [r1]
 800dc96:	b293      	uxth	r3, r2
 800dc98:	1ac3      	subs	r3, r0, r3
 800dc9a:	0c12      	lsrs	r2, r2, #16
 800dc9c:	fa13 f38c 	uxtah	r3, r3, ip
 800dca0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800dca4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcae:	45c1      	cmp	r9, r8
 800dcb0:	f841 3b04 	str.w	r3, [r1], #4
 800dcb4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dcb8:	d2e9      	bcs.n	800dc8e <quorem+0xac>
 800dcba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dcbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dcc2:	b922      	cbnz	r2, 800dcce <quorem+0xec>
 800dcc4:	3b04      	subs	r3, #4
 800dcc6:	429d      	cmp	r5, r3
 800dcc8:	461a      	mov	r2, r3
 800dcca:	d30a      	bcc.n	800dce2 <quorem+0x100>
 800dccc:	613c      	str	r4, [r7, #16]
 800dcce:	4630      	mov	r0, r6
 800dcd0:	b003      	add	sp, #12
 800dcd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd6:	6812      	ldr	r2, [r2, #0]
 800dcd8:	3b04      	subs	r3, #4
 800dcda:	2a00      	cmp	r2, #0
 800dcdc:	d1ce      	bne.n	800dc7c <quorem+0x9a>
 800dcde:	3c01      	subs	r4, #1
 800dce0:	e7c9      	b.n	800dc76 <quorem+0x94>
 800dce2:	6812      	ldr	r2, [r2, #0]
 800dce4:	3b04      	subs	r3, #4
 800dce6:	2a00      	cmp	r2, #0
 800dce8:	d1f0      	bne.n	800dccc <quorem+0xea>
 800dcea:	3c01      	subs	r4, #1
 800dcec:	e7eb      	b.n	800dcc6 <quorem+0xe4>
 800dcee:	2000      	movs	r0, #0
 800dcf0:	e7ee      	b.n	800dcd0 <quorem+0xee>
 800dcf2:	0000      	movs	r0, r0
 800dcf4:	0000      	movs	r0, r0
	...

0800dcf8 <_dtoa_r>:
 800dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfc:	ed2d 8b02 	vpush	{d8}
 800dd00:	69c5      	ldr	r5, [r0, #28]
 800dd02:	b091      	sub	sp, #68	; 0x44
 800dd04:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dd08:	ec59 8b10 	vmov	r8, r9, d0
 800dd0c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800dd0e:	9106      	str	r1, [sp, #24]
 800dd10:	4606      	mov	r6, r0
 800dd12:	9208      	str	r2, [sp, #32]
 800dd14:	930c      	str	r3, [sp, #48]	; 0x30
 800dd16:	b975      	cbnz	r5, 800dd36 <_dtoa_r+0x3e>
 800dd18:	2010      	movs	r0, #16
 800dd1a:	f000 fda5 	bl	800e868 <malloc>
 800dd1e:	4602      	mov	r2, r0
 800dd20:	61f0      	str	r0, [r6, #28]
 800dd22:	b920      	cbnz	r0, 800dd2e <_dtoa_r+0x36>
 800dd24:	4ba6      	ldr	r3, [pc, #664]	; (800dfc0 <_dtoa_r+0x2c8>)
 800dd26:	21ef      	movs	r1, #239	; 0xef
 800dd28:	48a6      	ldr	r0, [pc, #664]	; (800dfc4 <_dtoa_r+0x2cc>)
 800dd2a:	f001 fdd3 	bl	800f8d4 <__assert_func>
 800dd2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dd32:	6005      	str	r5, [r0, #0]
 800dd34:	60c5      	str	r5, [r0, #12]
 800dd36:	69f3      	ldr	r3, [r6, #28]
 800dd38:	6819      	ldr	r1, [r3, #0]
 800dd3a:	b151      	cbz	r1, 800dd52 <_dtoa_r+0x5a>
 800dd3c:	685a      	ldr	r2, [r3, #4]
 800dd3e:	604a      	str	r2, [r1, #4]
 800dd40:	2301      	movs	r3, #1
 800dd42:	4093      	lsls	r3, r2
 800dd44:	608b      	str	r3, [r1, #8]
 800dd46:	4630      	mov	r0, r6
 800dd48:	f000 fe82 	bl	800ea50 <_Bfree>
 800dd4c:	69f3      	ldr	r3, [r6, #28]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	601a      	str	r2, [r3, #0]
 800dd52:	f1b9 0300 	subs.w	r3, r9, #0
 800dd56:	bfbb      	ittet	lt
 800dd58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dd5c:	9303      	strlt	r3, [sp, #12]
 800dd5e:	2300      	movge	r3, #0
 800dd60:	2201      	movlt	r2, #1
 800dd62:	bfac      	ite	ge
 800dd64:	6023      	strge	r3, [r4, #0]
 800dd66:	6022      	strlt	r2, [r4, #0]
 800dd68:	4b97      	ldr	r3, [pc, #604]	; (800dfc8 <_dtoa_r+0x2d0>)
 800dd6a:	9c03      	ldr	r4, [sp, #12]
 800dd6c:	43a3      	bics	r3, r4
 800dd6e:	d11c      	bne.n	800ddaa <_dtoa_r+0xb2>
 800dd70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd72:	f242 730f 	movw	r3, #9999	; 0x270f
 800dd76:	6013      	str	r3, [r2, #0]
 800dd78:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800dd7c:	ea53 0308 	orrs.w	r3, r3, r8
 800dd80:	f000 84fb 	beq.w	800e77a <_dtoa_r+0xa82>
 800dd84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd86:	b963      	cbnz	r3, 800dda2 <_dtoa_r+0xaa>
 800dd88:	4b90      	ldr	r3, [pc, #576]	; (800dfcc <_dtoa_r+0x2d4>)
 800dd8a:	e020      	b.n	800ddce <_dtoa_r+0xd6>
 800dd8c:	4b90      	ldr	r3, [pc, #576]	; (800dfd0 <_dtoa_r+0x2d8>)
 800dd8e:	9301      	str	r3, [sp, #4]
 800dd90:	3308      	adds	r3, #8
 800dd92:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800dd94:	6013      	str	r3, [r2, #0]
 800dd96:	9801      	ldr	r0, [sp, #4]
 800dd98:	b011      	add	sp, #68	; 0x44
 800dd9a:	ecbd 8b02 	vpop	{d8}
 800dd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda2:	4b8a      	ldr	r3, [pc, #552]	; (800dfcc <_dtoa_r+0x2d4>)
 800dda4:	9301      	str	r3, [sp, #4]
 800dda6:	3303      	adds	r3, #3
 800dda8:	e7f3      	b.n	800dd92 <_dtoa_r+0x9a>
 800ddaa:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ddae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ddb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb6:	d10c      	bne.n	800ddd2 <_dtoa_r+0xda>
 800ddb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ddba:	2301      	movs	r3, #1
 800ddbc:	6013      	str	r3, [r2, #0]
 800ddbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	f000 84d7 	beq.w	800e774 <_dtoa_r+0xa7c>
 800ddc6:	4b83      	ldr	r3, [pc, #524]	; (800dfd4 <_dtoa_r+0x2dc>)
 800ddc8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ddca:	6013      	str	r3, [r2, #0]
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	9301      	str	r3, [sp, #4]
 800ddd0:	e7e1      	b.n	800dd96 <_dtoa_r+0x9e>
 800ddd2:	aa0e      	add	r2, sp, #56	; 0x38
 800ddd4:	a90f      	add	r1, sp, #60	; 0x3c
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	eeb0 0b48 	vmov.f64	d0, d8
 800dddc:	f001 f91a 	bl	800f014 <__d2b>
 800dde0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800dde4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dde6:	4605      	mov	r5, r0
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d046      	beq.n	800de7a <_dtoa_r+0x182>
 800ddec:	eeb0 7b48 	vmov.f64	d7, d8
 800ddf0:	ee18 1a90 	vmov	r1, s17
 800ddf4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ddf8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800ddfc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800de00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800de04:	2000      	movs	r0, #0
 800de06:	ee07 1a90 	vmov	s15, r1
 800de0a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800de0e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800dfa8 <_dtoa_r+0x2b0>
 800de12:	ee37 7b46 	vsub.f64	d7, d7, d6
 800de16:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800dfb0 <_dtoa_r+0x2b8>
 800de1a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800de1e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800dfb8 <_dtoa_r+0x2c0>
 800de22:	ee07 3a90 	vmov	s15, r3
 800de26:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800de2a:	eeb0 7b46 	vmov.f64	d7, d6
 800de2e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800de32:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800de36:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800de3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de3e:	ee16 ba90 	vmov	fp, s13
 800de42:	9009      	str	r0, [sp, #36]	; 0x24
 800de44:	d508      	bpl.n	800de58 <_dtoa_r+0x160>
 800de46:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800de4a:	eeb4 6b47 	vcmp.f64	d6, d7
 800de4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de52:	bf18      	it	ne
 800de54:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800de58:	f1bb 0f16 	cmp.w	fp, #22
 800de5c:	d82b      	bhi.n	800deb6 <_dtoa_r+0x1be>
 800de5e:	495e      	ldr	r1, [pc, #376]	; (800dfd8 <_dtoa_r+0x2e0>)
 800de60:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800de64:	ed91 7b00 	vldr	d7, [r1]
 800de68:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800de6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de70:	d501      	bpl.n	800de76 <_dtoa_r+0x17e>
 800de72:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de76:	2100      	movs	r1, #0
 800de78:	e01e      	b.n	800deb8 <_dtoa_r+0x1c0>
 800de7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de7c:	4413      	add	r3, r2
 800de7e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800de82:	2920      	cmp	r1, #32
 800de84:	bfc1      	itttt	gt
 800de86:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800de8a:	408c      	lslgt	r4, r1
 800de8c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800de90:	fa28 f101 	lsrgt.w	r1, r8, r1
 800de94:	bfd6      	itet	le
 800de96:	f1c1 0120 	rsble	r1, r1, #32
 800de9a:	4321      	orrgt	r1, r4
 800de9c:	fa08 f101 	lslle.w	r1, r8, r1
 800dea0:	ee07 1a90 	vmov	s15, r1
 800dea4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dea8:	3b01      	subs	r3, #1
 800deaa:	ee17 1a90 	vmov	r1, s15
 800deae:	2001      	movs	r0, #1
 800deb0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800deb4:	e7a7      	b.n	800de06 <_dtoa_r+0x10e>
 800deb6:	2101      	movs	r1, #1
 800deb8:	1ad2      	subs	r2, r2, r3
 800deba:	1e53      	subs	r3, r2, #1
 800debc:	9305      	str	r3, [sp, #20]
 800debe:	bf45      	ittet	mi
 800dec0:	f1c2 0301 	rsbmi	r3, r2, #1
 800dec4:	9304      	strmi	r3, [sp, #16]
 800dec6:	2300      	movpl	r3, #0
 800dec8:	2300      	movmi	r3, #0
 800deca:	bf4c      	ite	mi
 800decc:	9305      	strmi	r3, [sp, #20]
 800dece:	9304      	strpl	r3, [sp, #16]
 800ded0:	f1bb 0f00 	cmp.w	fp, #0
 800ded4:	910b      	str	r1, [sp, #44]	; 0x2c
 800ded6:	db18      	blt.n	800df0a <_dtoa_r+0x212>
 800ded8:	9b05      	ldr	r3, [sp, #20]
 800deda:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800dede:	445b      	add	r3, fp
 800dee0:	9305      	str	r3, [sp, #20]
 800dee2:	2300      	movs	r3, #0
 800dee4:	9a06      	ldr	r2, [sp, #24]
 800dee6:	2a09      	cmp	r2, #9
 800dee8:	d848      	bhi.n	800df7c <_dtoa_r+0x284>
 800deea:	2a05      	cmp	r2, #5
 800deec:	bfc4      	itt	gt
 800deee:	3a04      	subgt	r2, #4
 800def0:	9206      	strgt	r2, [sp, #24]
 800def2:	9a06      	ldr	r2, [sp, #24]
 800def4:	f1a2 0202 	sub.w	r2, r2, #2
 800def8:	bfcc      	ite	gt
 800defa:	2400      	movgt	r4, #0
 800defc:	2401      	movle	r4, #1
 800defe:	2a03      	cmp	r2, #3
 800df00:	d847      	bhi.n	800df92 <_dtoa_r+0x29a>
 800df02:	e8df f002 	tbb	[pc, r2]
 800df06:	2d0b      	.short	0x2d0b
 800df08:	392b      	.short	0x392b
 800df0a:	9b04      	ldr	r3, [sp, #16]
 800df0c:	2200      	movs	r2, #0
 800df0e:	eba3 030b 	sub.w	r3, r3, fp
 800df12:	9304      	str	r3, [sp, #16]
 800df14:	920a      	str	r2, [sp, #40]	; 0x28
 800df16:	f1cb 0300 	rsb	r3, fp, #0
 800df1a:	e7e3      	b.n	800dee4 <_dtoa_r+0x1ec>
 800df1c:	2200      	movs	r2, #0
 800df1e:	9207      	str	r2, [sp, #28]
 800df20:	9a08      	ldr	r2, [sp, #32]
 800df22:	2a00      	cmp	r2, #0
 800df24:	dc38      	bgt.n	800df98 <_dtoa_r+0x2a0>
 800df26:	f04f 0a01 	mov.w	sl, #1
 800df2a:	46d1      	mov	r9, sl
 800df2c:	4652      	mov	r2, sl
 800df2e:	f8cd a020 	str.w	sl, [sp, #32]
 800df32:	69f7      	ldr	r7, [r6, #28]
 800df34:	2100      	movs	r1, #0
 800df36:	2004      	movs	r0, #4
 800df38:	f100 0c14 	add.w	ip, r0, #20
 800df3c:	4594      	cmp	ip, r2
 800df3e:	d930      	bls.n	800dfa2 <_dtoa_r+0x2aa>
 800df40:	6079      	str	r1, [r7, #4]
 800df42:	4630      	mov	r0, r6
 800df44:	930d      	str	r3, [sp, #52]	; 0x34
 800df46:	f000 fd43 	bl	800e9d0 <_Balloc>
 800df4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df4c:	9001      	str	r0, [sp, #4]
 800df4e:	4602      	mov	r2, r0
 800df50:	2800      	cmp	r0, #0
 800df52:	d145      	bne.n	800dfe0 <_dtoa_r+0x2e8>
 800df54:	4b21      	ldr	r3, [pc, #132]	; (800dfdc <_dtoa_r+0x2e4>)
 800df56:	f240 11af 	movw	r1, #431	; 0x1af
 800df5a:	e6e5      	b.n	800dd28 <_dtoa_r+0x30>
 800df5c:	2201      	movs	r2, #1
 800df5e:	e7de      	b.n	800df1e <_dtoa_r+0x226>
 800df60:	2200      	movs	r2, #0
 800df62:	9207      	str	r2, [sp, #28]
 800df64:	9a08      	ldr	r2, [sp, #32]
 800df66:	eb0b 0a02 	add.w	sl, fp, r2
 800df6a:	f10a 0901 	add.w	r9, sl, #1
 800df6e:	464a      	mov	r2, r9
 800df70:	2a01      	cmp	r2, #1
 800df72:	bfb8      	it	lt
 800df74:	2201      	movlt	r2, #1
 800df76:	e7dc      	b.n	800df32 <_dtoa_r+0x23a>
 800df78:	2201      	movs	r2, #1
 800df7a:	e7f2      	b.n	800df62 <_dtoa_r+0x26a>
 800df7c:	2401      	movs	r4, #1
 800df7e:	2200      	movs	r2, #0
 800df80:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800df84:	f04f 3aff 	mov.w	sl, #4294967295
 800df88:	2100      	movs	r1, #0
 800df8a:	46d1      	mov	r9, sl
 800df8c:	2212      	movs	r2, #18
 800df8e:	9108      	str	r1, [sp, #32]
 800df90:	e7cf      	b.n	800df32 <_dtoa_r+0x23a>
 800df92:	2201      	movs	r2, #1
 800df94:	9207      	str	r2, [sp, #28]
 800df96:	e7f5      	b.n	800df84 <_dtoa_r+0x28c>
 800df98:	f8dd a020 	ldr.w	sl, [sp, #32]
 800df9c:	46d1      	mov	r9, sl
 800df9e:	4652      	mov	r2, sl
 800dfa0:	e7c7      	b.n	800df32 <_dtoa_r+0x23a>
 800dfa2:	3101      	adds	r1, #1
 800dfa4:	0040      	lsls	r0, r0, #1
 800dfa6:	e7c7      	b.n	800df38 <_dtoa_r+0x240>
 800dfa8:	636f4361 	.word	0x636f4361
 800dfac:	3fd287a7 	.word	0x3fd287a7
 800dfb0:	8b60c8b3 	.word	0x8b60c8b3
 800dfb4:	3fc68a28 	.word	0x3fc68a28
 800dfb8:	509f79fb 	.word	0x509f79fb
 800dfbc:	3fd34413 	.word	0x3fd34413
 800dfc0:	0800fb71 	.word	0x0800fb71
 800dfc4:	0800fb88 	.word	0x0800fb88
 800dfc8:	7ff00000 	.word	0x7ff00000
 800dfcc:	0800fb6d 	.word	0x0800fb6d
 800dfd0:	0800fb64 	.word	0x0800fb64
 800dfd4:	0800fb41 	.word	0x0800fb41
 800dfd8:	0800fc78 	.word	0x0800fc78
 800dfdc:	0800fbe0 	.word	0x0800fbe0
 800dfe0:	69f2      	ldr	r2, [r6, #28]
 800dfe2:	9901      	ldr	r1, [sp, #4]
 800dfe4:	6011      	str	r1, [r2, #0]
 800dfe6:	f1b9 0f0e 	cmp.w	r9, #14
 800dfea:	d86c      	bhi.n	800e0c6 <_dtoa_r+0x3ce>
 800dfec:	2c00      	cmp	r4, #0
 800dfee:	d06a      	beq.n	800e0c6 <_dtoa_r+0x3ce>
 800dff0:	f1bb 0f00 	cmp.w	fp, #0
 800dff4:	f340 80a0 	ble.w	800e138 <_dtoa_r+0x440>
 800dff8:	4ac1      	ldr	r2, [pc, #772]	; (800e300 <_dtoa_r+0x608>)
 800dffa:	f00b 010f 	and.w	r1, fp, #15
 800dffe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e002:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e006:	ed92 7b00 	vldr	d7, [r2]
 800e00a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800e00e:	f000 8087 	beq.w	800e120 <_dtoa_r+0x428>
 800e012:	49bc      	ldr	r1, [pc, #752]	; (800e304 <_dtoa_r+0x60c>)
 800e014:	ed91 6b08 	vldr	d6, [r1, #32]
 800e018:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800e01c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e020:	f002 020f 	and.w	r2, r2, #15
 800e024:	2103      	movs	r1, #3
 800e026:	48b7      	ldr	r0, [pc, #732]	; (800e304 <_dtoa_r+0x60c>)
 800e028:	2a00      	cmp	r2, #0
 800e02a:	d17b      	bne.n	800e124 <_dtoa_r+0x42c>
 800e02c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e030:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e034:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e03a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e03e:	2a00      	cmp	r2, #0
 800e040:	f000 80a0 	beq.w	800e184 <_dtoa_r+0x48c>
 800e044:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e048:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e050:	f140 8098 	bpl.w	800e184 <_dtoa_r+0x48c>
 800e054:	f1b9 0f00 	cmp.w	r9, #0
 800e058:	f000 8094 	beq.w	800e184 <_dtoa_r+0x48c>
 800e05c:	f1ba 0f00 	cmp.w	sl, #0
 800e060:	dd2f      	ble.n	800e0c2 <_dtoa_r+0x3ca>
 800e062:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e066:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e06a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e06e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e072:	3101      	adds	r1, #1
 800e074:	4654      	mov	r4, sl
 800e076:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e07a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e07e:	ee07 1a90 	vmov	s15, r1
 800e082:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e086:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e08a:	ee15 7a90 	vmov	r7, s11
 800e08e:	ec51 0b15 	vmov	r0, r1, d5
 800e092:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800e096:	2c00      	cmp	r4, #0
 800e098:	d177      	bne.n	800e18a <_dtoa_r+0x492>
 800e09a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e09e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e0a2:	ec41 0b17 	vmov	d7, r0, r1
 800e0a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ae:	f300 826a 	bgt.w	800e586 <_dtoa_r+0x88e>
 800e0b2:	eeb1 7b47 	vneg.f64	d7, d7
 800e0b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0be:	f100 8260 	bmi.w	800e582 <_dtoa_r+0x88a>
 800e0c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e0c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e0c8:	2a00      	cmp	r2, #0
 800e0ca:	f2c0 811d 	blt.w	800e308 <_dtoa_r+0x610>
 800e0ce:	f1bb 0f0e 	cmp.w	fp, #14
 800e0d2:	f300 8119 	bgt.w	800e308 <_dtoa_r+0x610>
 800e0d6:	4b8a      	ldr	r3, [pc, #552]	; (800e300 <_dtoa_r+0x608>)
 800e0d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e0dc:	ed93 6b00 	vldr	d6, [r3]
 800e0e0:	9b08      	ldr	r3, [sp, #32]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	f280 80b7 	bge.w	800e256 <_dtoa_r+0x55e>
 800e0e8:	f1b9 0f00 	cmp.w	r9, #0
 800e0ec:	f300 80b3 	bgt.w	800e256 <_dtoa_r+0x55e>
 800e0f0:	f040 8246 	bne.w	800e580 <_dtoa_r+0x888>
 800e0f4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e0f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e0fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e100:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e108:	464c      	mov	r4, r9
 800e10a:	464f      	mov	r7, r9
 800e10c:	f280 821c 	bge.w	800e548 <_dtoa_r+0x850>
 800e110:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e114:	2331      	movs	r3, #49	; 0x31
 800e116:	f808 3b01 	strb.w	r3, [r8], #1
 800e11a:	f10b 0b01 	add.w	fp, fp, #1
 800e11e:	e218      	b.n	800e552 <_dtoa_r+0x85a>
 800e120:	2102      	movs	r1, #2
 800e122:	e780      	b.n	800e026 <_dtoa_r+0x32e>
 800e124:	07d4      	lsls	r4, r2, #31
 800e126:	d504      	bpl.n	800e132 <_dtoa_r+0x43a>
 800e128:	ed90 6b00 	vldr	d6, [r0]
 800e12c:	3101      	adds	r1, #1
 800e12e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e132:	1052      	asrs	r2, r2, #1
 800e134:	3008      	adds	r0, #8
 800e136:	e777      	b.n	800e028 <_dtoa_r+0x330>
 800e138:	d022      	beq.n	800e180 <_dtoa_r+0x488>
 800e13a:	f1cb 0200 	rsb	r2, fp, #0
 800e13e:	4970      	ldr	r1, [pc, #448]	; (800e300 <_dtoa_r+0x608>)
 800e140:	f002 000f 	and.w	r0, r2, #15
 800e144:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e148:	ed91 7b00 	vldr	d7, [r1]
 800e14c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800e150:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e154:	486b      	ldr	r0, [pc, #428]	; (800e304 <_dtoa_r+0x60c>)
 800e156:	1112      	asrs	r2, r2, #4
 800e158:	2400      	movs	r4, #0
 800e15a:	2102      	movs	r1, #2
 800e15c:	b92a      	cbnz	r2, 800e16a <_dtoa_r+0x472>
 800e15e:	2c00      	cmp	r4, #0
 800e160:	f43f af6a 	beq.w	800e038 <_dtoa_r+0x340>
 800e164:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e168:	e766      	b.n	800e038 <_dtoa_r+0x340>
 800e16a:	07d7      	lsls	r7, r2, #31
 800e16c:	d505      	bpl.n	800e17a <_dtoa_r+0x482>
 800e16e:	ed90 6b00 	vldr	d6, [r0]
 800e172:	3101      	adds	r1, #1
 800e174:	2401      	movs	r4, #1
 800e176:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e17a:	1052      	asrs	r2, r2, #1
 800e17c:	3008      	adds	r0, #8
 800e17e:	e7ed      	b.n	800e15c <_dtoa_r+0x464>
 800e180:	2102      	movs	r1, #2
 800e182:	e759      	b.n	800e038 <_dtoa_r+0x340>
 800e184:	465a      	mov	r2, fp
 800e186:	464c      	mov	r4, r9
 800e188:	e775      	b.n	800e076 <_dtoa_r+0x37e>
 800e18a:	ec41 0b17 	vmov	d7, r0, r1
 800e18e:	495c      	ldr	r1, [pc, #368]	; (800e300 <_dtoa_r+0x608>)
 800e190:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800e194:	ed11 4b02 	vldr	d4, [r1, #-8]
 800e198:	9901      	ldr	r1, [sp, #4]
 800e19a:	440c      	add	r4, r1
 800e19c:	9907      	ldr	r1, [sp, #28]
 800e19e:	b351      	cbz	r1, 800e1f6 <_dtoa_r+0x4fe>
 800e1a0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e1a4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e1a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e1ac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e1b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e1b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e1b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e1bc:	ee14 1a90 	vmov	r1, s9
 800e1c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e1c4:	3130      	adds	r1, #48	; 0x30
 800e1c6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e1ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d2:	f808 1b01 	strb.w	r1, [r8], #1
 800e1d6:	d439      	bmi.n	800e24c <_dtoa_r+0x554>
 800e1d8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e1dc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e4:	d472      	bmi.n	800e2cc <_dtoa_r+0x5d4>
 800e1e6:	45a0      	cmp	r8, r4
 800e1e8:	f43f af6b 	beq.w	800e0c2 <_dtoa_r+0x3ca>
 800e1ec:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e1f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e1f4:	e7e0      	b.n	800e1b8 <_dtoa_r+0x4c0>
 800e1f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e1fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e1fe:	4620      	mov	r0, r4
 800e200:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e204:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e208:	ee14 1a90 	vmov	r1, s9
 800e20c:	3130      	adds	r1, #48	; 0x30
 800e20e:	f808 1b01 	strb.w	r1, [r8], #1
 800e212:	45a0      	cmp	r8, r4
 800e214:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e218:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e21c:	d118      	bne.n	800e250 <_dtoa_r+0x558>
 800e21e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e222:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e226:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e22e:	dc4d      	bgt.n	800e2cc <_dtoa_r+0x5d4>
 800e230:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e234:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800e238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e23c:	f57f af41 	bpl.w	800e0c2 <_dtoa_r+0x3ca>
 800e240:	4680      	mov	r8, r0
 800e242:	3801      	subs	r0, #1
 800e244:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e248:	2b30      	cmp	r3, #48	; 0x30
 800e24a:	d0f9      	beq.n	800e240 <_dtoa_r+0x548>
 800e24c:	4693      	mov	fp, r2
 800e24e:	e02a      	b.n	800e2a6 <_dtoa_r+0x5ae>
 800e250:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e254:	e7d6      	b.n	800e204 <_dtoa_r+0x50c>
 800e256:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e25a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e25e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e262:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e266:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e26a:	ee15 3a10 	vmov	r3, s10
 800e26e:	3330      	adds	r3, #48	; 0x30
 800e270:	f808 3b01 	strb.w	r3, [r8], #1
 800e274:	9b01      	ldr	r3, [sp, #4]
 800e276:	eba8 0303 	sub.w	r3, r8, r3
 800e27a:	4599      	cmp	r9, r3
 800e27c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e280:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e284:	d133      	bne.n	800e2ee <_dtoa_r+0x5f6>
 800e286:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e28a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e292:	dc1a      	bgt.n	800e2ca <_dtoa_r+0x5d2>
 800e294:	eeb4 7b46 	vcmp.f64	d7, d6
 800e298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e29c:	d103      	bne.n	800e2a6 <_dtoa_r+0x5ae>
 800e29e:	ee15 3a10 	vmov	r3, s10
 800e2a2:	07d9      	lsls	r1, r3, #31
 800e2a4:	d411      	bmi.n	800e2ca <_dtoa_r+0x5d2>
 800e2a6:	4629      	mov	r1, r5
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	f000 fbd1 	bl	800ea50 <_Bfree>
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2b2:	f888 3000 	strb.w	r3, [r8]
 800e2b6:	f10b 0301 	add.w	r3, fp, #1
 800e2ba:	6013      	str	r3, [r2, #0]
 800e2bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	f43f ad69 	beq.w	800dd96 <_dtoa_r+0x9e>
 800e2c4:	f8c3 8000 	str.w	r8, [r3]
 800e2c8:	e565      	b.n	800dd96 <_dtoa_r+0x9e>
 800e2ca:	465a      	mov	r2, fp
 800e2cc:	4643      	mov	r3, r8
 800e2ce:	4698      	mov	r8, r3
 800e2d0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800e2d4:	2939      	cmp	r1, #57	; 0x39
 800e2d6:	d106      	bne.n	800e2e6 <_dtoa_r+0x5ee>
 800e2d8:	9901      	ldr	r1, [sp, #4]
 800e2da:	4299      	cmp	r1, r3
 800e2dc:	d1f7      	bne.n	800e2ce <_dtoa_r+0x5d6>
 800e2de:	9801      	ldr	r0, [sp, #4]
 800e2e0:	2130      	movs	r1, #48	; 0x30
 800e2e2:	3201      	adds	r2, #1
 800e2e4:	7001      	strb	r1, [r0, #0]
 800e2e6:	7819      	ldrb	r1, [r3, #0]
 800e2e8:	3101      	adds	r1, #1
 800e2ea:	7019      	strb	r1, [r3, #0]
 800e2ec:	e7ae      	b.n	800e24c <_dtoa_r+0x554>
 800e2ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e2f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2fa:	d1b2      	bne.n	800e262 <_dtoa_r+0x56a>
 800e2fc:	e7d3      	b.n	800e2a6 <_dtoa_r+0x5ae>
 800e2fe:	bf00      	nop
 800e300:	0800fc78 	.word	0x0800fc78
 800e304:	0800fc50 	.word	0x0800fc50
 800e308:	9907      	ldr	r1, [sp, #28]
 800e30a:	2900      	cmp	r1, #0
 800e30c:	f000 80d0 	beq.w	800e4b0 <_dtoa_r+0x7b8>
 800e310:	9906      	ldr	r1, [sp, #24]
 800e312:	2901      	cmp	r1, #1
 800e314:	f300 80b4 	bgt.w	800e480 <_dtoa_r+0x788>
 800e318:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e31a:	2900      	cmp	r1, #0
 800e31c:	f000 80ac 	beq.w	800e478 <_dtoa_r+0x780>
 800e320:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e324:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e328:	461c      	mov	r4, r3
 800e32a:	9309      	str	r3, [sp, #36]	; 0x24
 800e32c:	9b04      	ldr	r3, [sp, #16]
 800e32e:	4413      	add	r3, r2
 800e330:	9304      	str	r3, [sp, #16]
 800e332:	9b05      	ldr	r3, [sp, #20]
 800e334:	2101      	movs	r1, #1
 800e336:	4413      	add	r3, r2
 800e338:	4630      	mov	r0, r6
 800e33a:	9305      	str	r3, [sp, #20]
 800e33c:	f000 fc3e 	bl	800ebbc <__i2b>
 800e340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e342:	4607      	mov	r7, r0
 800e344:	f1b8 0f00 	cmp.w	r8, #0
 800e348:	d00d      	beq.n	800e366 <_dtoa_r+0x66e>
 800e34a:	9a05      	ldr	r2, [sp, #20]
 800e34c:	2a00      	cmp	r2, #0
 800e34e:	dd0a      	ble.n	800e366 <_dtoa_r+0x66e>
 800e350:	4542      	cmp	r2, r8
 800e352:	9904      	ldr	r1, [sp, #16]
 800e354:	bfa8      	it	ge
 800e356:	4642      	movge	r2, r8
 800e358:	1a89      	subs	r1, r1, r2
 800e35a:	9104      	str	r1, [sp, #16]
 800e35c:	9905      	ldr	r1, [sp, #20]
 800e35e:	eba8 0802 	sub.w	r8, r8, r2
 800e362:	1a8a      	subs	r2, r1, r2
 800e364:	9205      	str	r2, [sp, #20]
 800e366:	b303      	cbz	r3, 800e3aa <_dtoa_r+0x6b2>
 800e368:	9a07      	ldr	r2, [sp, #28]
 800e36a:	2a00      	cmp	r2, #0
 800e36c:	f000 80a5 	beq.w	800e4ba <_dtoa_r+0x7c2>
 800e370:	2c00      	cmp	r4, #0
 800e372:	dd13      	ble.n	800e39c <_dtoa_r+0x6a4>
 800e374:	4639      	mov	r1, r7
 800e376:	4622      	mov	r2, r4
 800e378:	4630      	mov	r0, r6
 800e37a:	930d      	str	r3, [sp, #52]	; 0x34
 800e37c:	f000 fcde 	bl	800ed3c <__pow5mult>
 800e380:	462a      	mov	r2, r5
 800e382:	4601      	mov	r1, r0
 800e384:	4607      	mov	r7, r0
 800e386:	4630      	mov	r0, r6
 800e388:	f000 fc2e 	bl	800ebe8 <__multiply>
 800e38c:	4629      	mov	r1, r5
 800e38e:	9009      	str	r0, [sp, #36]	; 0x24
 800e390:	4630      	mov	r0, r6
 800e392:	f000 fb5d 	bl	800ea50 <_Bfree>
 800e396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e39a:	4615      	mov	r5, r2
 800e39c:	1b1a      	subs	r2, r3, r4
 800e39e:	d004      	beq.n	800e3aa <_dtoa_r+0x6b2>
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	f000 fcca 	bl	800ed3c <__pow5mult>
 800e3a8:	4605      	mov	r5, r0
 800e3aa:	2101      	movs	r1, #1
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	f000 fc05 	bl	800ebbc <__i2b>
 800e3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	f340 8081 	ble.w	800e4be <_dtoa_r+0x7c6>
 800e3bc:	461a      	mov	r2, r3
 800e3be:	4601      	mov	r1, r0
 800e3c0:	4630      	mov	r0, r6
 800e3c2:	f000 fcbb 	bl	800ed3c <__pow5mult>
 800e3c6:	9b06      	ldr	r3, [sp, #24]
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	dd7a      	ble.n	800e4c4 <_dtoa_r+0x7cc>
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	9309      	str	r3, [sp, #36]	; 0x24
 800e3d2:	6922      	ldr	r2, [r4, #16]
 800e3d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e3d8:	6910      	ldr	r0, [r2, #16]
 800e3da:	f000 fba1 	bl	800eb20 <__hi0bits>
 800e3de:	f1c0 0020 	rsb	r0, r0, #32
 800e3e2:	9b05      	ldr	r3, [sp, #20]
 800e3e4:	4418      	add	r0, r3
 800e3e6:	f010 001f 	ands.w	r0, r0, #31
 800e3ea:	f000 8093 	beq.w	800e514 <_dtoa_r+0x81c>
 800e3ee:	f1c0 0220 	rsb	r2, r0, #32
 800e3f2:	2a04      	cmp	r2, #4
 800e3f4:	f340 8085 	ble.w	800e502 <_dtoa_r+0x80a>
 800e3f8:	9b04      	ldr	r3, [sp, #16]
 800e3fa:	f1c0 001c 	rsb	r0, r0, #28
 800e3fe:	4403      	add	r3, r0
 800e400:	9304      	str	r3, [sp, #16]
 800e402:	9b05      	ldr	r3, [sp, #20]
 800e404:	4480      	add	r8, r0
 800e406:	4403      	add	r3, r0
 800e408:	9305      	str	r3, [sp, #20]
 800e40a:	9b04      	ldr	r3, [sp, #16]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	dd05      	ble.n	800e41c <_dtoa_r+0x724>
 800e410:	4629      	mov	r1, r5
 800e412:	461a      	mov	r2, r3
 800e414:	4630      	mov	r0, r6
 800e416:	f000 fceb 	bl	800edf0 <__lshift>
 800e41a:	4605      	mov	r5, r0
 800e41c:	9b05      	ldr	r3, [sp, #20]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	dd05      	ble.n	800e42e <_dtoa_r+0x736>
 800e422:	4621      	mov	r1, r4
 800e424:	461a      	mov	r2, r3
 800e426:	4630      	mov	r0, r6
 800e428:	f000 fce2 	bl	800edf0 <__lshift>
 800e42c:	4604      	mov	r4, r0
 800e42e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e430:	2b00      	cmp	r3, #0
 800e432:	d071      	beq.n	800e518 <_dtoa_r+0x820>
 800e434:	4621      	mov	r1, r4
 800e436:	4628      	mov	r0, r5
 800e438:	f000 fd46 	bl	800eec8 <__mcmp>
 800e43c:	2800      	cmp	r0, #0
 800e43e:	da6b      	bge.n	800e518 <_dtoa_r+0x820>
 800e440:	2300      	movs	r3, #0
 800e442:	4629      	mov	r1, r5
 800e444:	220a      	movs	r2, #10
 800e446:	4630      	mov	r0, r6
 800e448:	f000 fb24 	bl	800ea94 <__multadd>
 800e44c:	9b07      	ldr	r3, [sp, #28]
 800e44e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e452:	4605      	mov	r5, r0
 800e454:	2b00      	cmp	r3, #0
 800e456:	f000 8197 	beq.w	800e788 <_dtoa_r+0xa90>
 800e45a:	4639      	mov	r1, r7
 800e45c:	2300      	movs	r3, #0
 800e45e:	220a      	movs	r2, #10
 800e460:	4630      	mov	r0, r6
 800e462:	f000 fb17 	bl	800ea94 <__multadd>
 800e466:	f1ba 0f00 	cmp.w	sl, #0
 800e46a:	4607      	mov	r7, r0
 800e46c:	f300 8093 	bgt.w	800e596 <_dtoa_r+0x89e>
 800e470:	9b06      	ldr	r3, [sp, #24]
 800e472:	2b02      	cmp	r3, #2
 800e474:	dc57      	bgt.n	800e526 <_dtoa_r+0x82e>
 800e476:	e08e      	b.n	800e596 <_dtoa_r+0x89e>
 800e478:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e47a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e47e:	e751      	b.n	800e324 <_dtoa_r+0x62c>
 800e480:	f109 34ff 	add.w	r4, r9, #4294967295
 800e484:	42a3      	cmp	r3, r4
 800e486:	bfbf      	itttt	lt
 800e488:	1ae2      	sublt	r2, r4, r3
 800e48a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e48c:	189b      	addlt	r3, r3, r2
 800e48e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e490:	bfae      	itee	ge
 800e492:	1b1c      	subge	r4, r3, r4
 800e494:	4623      	movlt	r3, r4
 800e496:	2400      	movlt	r4, #0
 800e498:	f1b9 0f00 	cmp.w	r9, #0
 800e49c:	bfb5      	itete	lt
 800e49e:	9a04      	ldrlt	r2, [sp, #16]
 800e4a0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800e4a4:	eba2 0809 	sublt.w	r8, r2, r9
 800e4a8:	464a      	movge	r2, r9
 800e4aa:	bfb8      	it	lt
 800e4ac:	2200      	movlt	r2, #0
 800e4ae:	e73c      	b.n	800e32a <_dtoa_r+0x632>
 800e4b0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e4b4:	9f07      	ldr	r7, [sp, #28]
 800e4b6:	461c      	mov	r4, r3
 800e4b8:	e744      	b.n	800e344 <_dtoa_r+0x64c>
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	e770      	b.n	800e3a0 <_dtoa_r+0x6a8>
 800e4be:	9b06      	ldr	r3, [sp, #24]
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	dc18      	bgt.n	800e4f6 <_dtoa_r+0x7fe>
 800e4c4:	9b02      	ldr	r3, [sp, #8]
 800e4c6:	b9b3      	cbnz	r3, 800e4f6 <_dtoa_r+0x7fe>
 800e4c8:	9b03      	ldr	r3, [sp, #12]
 800e4ca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e4ce:	b9a2      	cbnz	r2, 800e4fa <_dtoa_r+0x802>
 800e4d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e4d4:	0d12      	lsrs	r2, r2, #20
 800e4d6:	0512      	lsls	r2, r2, #20
 800e4d8:	b18a      	cbz	r2, 800e4fe <_dtoa_r+0x806>
 800e4da:	9b04      	ldr	r3, [sp, #16]
 800e4dc:	3301      	adds	r3, #1
 800e4de:	9304      	str	r3, [sp, #16]
 800e4e0:	9b05      	ldr	r3, [sp, #20]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	9305      	str	r3, [sp, #20]
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e4ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	f47f af70 	bne.w	800e3d2 <_dtoa_r+0x6da>
 800e4f2:	2001      	movs	r0, #1
 800e4f4:	e775      	b.n	800e3e2 <_dtoa_r+0x6ea>
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	e7f6      	b.n	800e4e8 <_dtoa_r+0x7f0>
 800e4fa:	9b02      	ldr	r3, [sp, #8]
 800e4fc:	e7f4      	b.n	800e4e8 <_dtoa_r+0x7f0>
 800e4fe:	9209      	str	r2, [sp, #36]	; 0x24
 800e500:	e7f3      	b.n	800e4ea <_dtoa_r+0x7f2>
 800e502:	d082      	beq.n	800e40a <_dtoa_r+0x712>
 800e504:	9b04      	ldr	r3, [sp, #16]
 800e506:	321c      	adds	r2, #28
 800e508:	4413      	add	r3, r2
 800e50a:	9304      	str	r3, [sp, #16]
 800e50c:	9b05      	ldr	r3, [sp, #20]
 800e50e:	4490      	add	r8, r2
 800e510:	4413      	add	r3, r2
 800e512:	e779      	b.n	800e408 <_dtoa_r+0x710>
 800e514:	4602      	mov	r2, r0
 800e516:	e7f5      	b.n	800e504 <_dtoa_r+0x80c>
 800e518:	f1b9 0f00 	cmp.w	r9, #0
 800e51c:	dc36      	bgt.n	800e58c <_dtoa_r+0x894>
 800e51e:	9b06      	ldr	r3, [sp, #24]
 800e520:	2b02      	cmp	r3, #2
 800e522:	dd33      	ble.n	800e58c <_dtoa_r+0x894>
 800e524:	46ca      	mov	sl, r9
 800e526:	f1ba 0f00 	cmp.w	sl, #0
 800e52a:	d10d      	bne.n	800e548 <_dtoa_r+0x850>
 800e52c:	4621      	mov	r1, r4
 800e52e:	4653      	mov	r3, sl
 800e530:	2205      	movs	r2, #5
 800e532:	4630      	mov	r0, r6
 800e534:	f000 faae 	bl	800ea94 <__multadd>
 800e538:	4601      	mov	r1, r0
 800e53a:	4604      	mov	r4, r0
 800e53c:	4628      	mov	r0, r5
 800e53e:	f000 fcc3 	bl	800eec8 <__mcmp>
 800e542:	2800      	cmp	r0, #0
 800e544:	f73f ade4 	bgt.w	800e110 <_dtoa_r+0x418>
 800e548:	9b08      	ldr	r3, [sp, #32]
 800e54a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e54e:	ea6f 0b03 	mvn.w	fp, r3
 800e552:	f04f 0900 	mov.w	r9, #0
 800e556:	4621      	mov	r1, r4
 800e558:	4630      	mov	r0, r6
 800e55a:	f000 fa79 	bl	800ea50 <_Bfree>
 800e55e:	2f00      	cmp	r7, #0
 800e560:	f43f aea1 	beq.w	800e2a6 <_dtoa_r+0x5ae>
 800e564:	f1b9 0f00 	cmp.w	r9, #0
 800e568:	d005      	beq.n	800e576 <_dtoa_r+0x87e>
 800e56a:	45b9      	cmp	r9, r7
 800e56c:	d003      	beq.n	800e576 <_dtoa_r+0x87e>
 800e56e:	4649      	mov	r1, r9
 800e570:	4630      	mov	r0, r6
 800e572:	f000 fa6d 	bl	800ea50 <_Bfree>
 800e576:	4639      	mov	r1, r7
 800e578:	4630      	mov	r0, r6
 800e57a:	f000 fa69 	bl	800ea50 <_Bfree>
 800e57e:	e692      	b.n	800e2a6 <_dtoa_r+0x5ae>
 800e580:	2400      	movs	r4, #0
 800e582:	4627      	mov	r7, r4
 800e584:	e7e0      	b.n	800e548 <_dtoa_r+0x850>
 800e586:	4693      	mov	fp, r2
 800e588:	4627      	mov	r7, r4
 800e58a:	e5c1      	b.n	800e110 <_dtoa_r+0x418>
 800e58c:	9b07      	ldr	r3, [sp, #28]
 800e58e:	46ca      	mov	sl, r9
 800e590:	2b00      	cmp	r3, #0
 800e592:	f000 8100 	beq.w	800e796 <_dtoa_r+0xa9e>
 800e596:	f1b8 0f00 	cmp.w	r8, #0
 800e59a:	dd05      	ble.n	800e5a8 <_dtoa_r+0x8b0>
 800e59c:	4639      	mov	r1, r7
 800e59e:	4642      	mov	r2, r8
 800e5a0:	4630      	mov	r0, r6
 800e5a2:	f000 fc25 	bl	800edf0 <__lshift>
 800e5a6:	4607      	mov	r7, r0
 800e5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d05d      	beq.n	800e66a <_dtoa_r+0x972>
 800e5ae:	6879      	ldr	r1, [r7, #4]
 800e5b0:	4630      	mov	r0, r6
 800e5b2:	f000 fa0d 	bl	800e9d0 <_Balloc>
 800e5b6:	4680      	mov	r8, r0
 800e5b8:	b928      	cbnz	r0, 800e5c6 <_dtoa_r+0x8ce>
 800e5ba:	4b82      	ldr	r3, [pc, #520]	; (800e7c4 <_dtoa_r+0xacc>)
 800e5bc:	4602      	mov	r2, r0
 800e5be:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e5c2:	f7ff bbb1 	b.w	800dd28 <_dtoa_r+0x30>
 800e5c6:	693a      	ldr	r2, [r7, #16]
 800e5c8:	3202      	adds	r2, #2
 800e5ca:	0092      	lsls	r2, r2, #2
 800e5cc:	f107 010c 	add.w	r1, r7, #12
 800e5d0:	300c      	adds	r0, #12
 800e5d2:	f001 f971 	bl	800f8b8 <memcpy>
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	4641      	mov	r1, r8
 800e5da:	4630      	mov	r0, r6
 800e5dc:	f000 fc08 	bl	800edf0 <__lshift>
 800e5e0:	9b01      	ldr	r3, [sp, #4]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	9304      	str	r3, [sp, #16]
 800e5e6:	9b01      	ldr	r3, [sp, #4]
 800e5e8:	4453      	add	r3, sl
 800e5ea:	9308      	str	r3, [sp, #32]
 800e5ec:	9b02      	ldr	r3, [sp, #8]
 800e5ee:	f003 0301 	and.w	r3, r3, #1
 800e5f2:	46b9      	mov	r9, r7
 800e5f4:	9307      	str	r3, [sp, #28]
 800e5f6:	4607      	mov	r7, r0
 800e5f8:	9b04      	ldr	r3, [sp, #16]
 800e5fa:	4621      	mov	r1, r4
 800e5fc:	3b01      	subs	r3, #1
 800e5fe:	4628      	mov	r0, r5
 800e600:	9302      	str	r3, [sp, #8]
 800e602:	f7ff faee 	bl	800dbe2 <quorem>
 800e606:	4603      	mov	r3, r0
 800e608:	3330      	adds	r3, #48	; 0x30
 800e60a:	9005      	str	r0, [sp, #20]
 800e60c:	4649      	mov	r1, r9
 800e60e:	4628      	mov	r0, r5
 800e610:	9309      	str	r3, [sp, #36]	; 0x24
 800e612:	f000 fc59 	bl	800eec8 <__mcmp>
 800e616:	463a      	mov	r2, r7
 800e618:	4682      	mov	sl, r0
 800e61a:	4621      	mov	r1, r4
 800e61c:	4630      	mov	r0, r6
 800e61e:	f000 fc6f 	bl	800ef00 <__mdiff>
 800e622:	68c2      	ldr	r2, [r0, #12]
 800e624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e626:	4680      	mov	r8, r0
 800e628:	bb0a      	cbnz	r2, 800e66e <_dtoa_r+0x976>
 800e62a:	4601      	mov	r1, r0
 800e62c:	4628      	mov	r0, r5
 800e62e:	f000 fc4b 	bl	800eec8 <__mcmp>
 800e632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e634:	4602      	mov	r2, r0
 800e636:	4641      	mov	r1, r8
 800e638:	4630      	mov	r0, r6
 800e63a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800e63e:	f000 fa07 	bl	800ea50 <_Bfree>
 800e642:	9b06      	ldr	r3, [sp, #24]
 800e644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e646:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e64a:	ea43 0102 	orr.w	r1, r3, r2
 800e64e:	9b07      	ldr	r3, [sp, #28]
 800e650:	4319      	orrs	r1, r3
 800e652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e654:	d10d      	bne.n	800e672 <_dtoa_r+0x97a>
 800e656:	2b39      	cmp	r3, #57	; 0x39
 800e658:	d029      	beq.n	800e6ae <_dtoa_r+0x9b6>
 800e65a:	f1ba 0f00 	cmp.w	sl, #0
 800e65e:	dd01      	ble.n	800e664 <_dtoa_r+0x96c>
 800e660:	9b05      	ldr	r3, [sp, #20]
 800e662:	3331      	adds	r3, #49	; 0x31
 800e664:	9a02      	ldr	r2, [sp, #8]
 800e666:	7013      	strb	r3, [r2, #0]
 800e668:	e775      	b.n	800e556 <_dtoa_r+0x85e>
 800e66a:	4638      	mov	r0, r7
 800e66c:	e7b8      	b.n	800e5e0 <_dtoa_r+0x8e8>
 800e66e:	2201      	movs	r2, #1
 800e670:	e7e1      	b.n	800e636 <_dtoa_r+0x93e>
 800e672:	f1ba 0f00 	cmp.w	sl, #0
 800e676:	db06      	blt.n	800e686 <_dtoa_r+0x98e>
 800e678:	9906      	ldr	r1, [sp, #24]
 800e67a:	ea41 0a0a 	orr.w	sl, r1, sl
 800e67e:	9907      	ldr	r1, [sp, #28]
 800e680:	ea5a 0a01 	orrs.w	sl, sl, r1
 800e684:	d120      	bne.n	800e6c8 <_dtoa_r+0x9d0>
 800e686:	2a00      	cmp	r2, #0
 800e688:	ddec      	ble.n	800e664 <_dtoa_r+0x96c>
 800e68a:	4629      	mov	r1, r5
 800e68c:	2201      	movs	r2, #1
 800e68e:	4630      	mov	r0, r6
 800e690:	9304      	str	r3, [sp, #16]
 800e692:	f000 fbad 	bl	800edf0 <__lshift>
 800e696:	4621      	mov	r1, r4
 800e698:	4605      	mov	r5, r0
 800e69a:	f000 fc15 	bl	800eec8 <__mcmp>
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	9b04      	ldr	r3, [sp, #16]
 800e6a2:	dc02      	bgt.n	800e6aa <_dtoa_r+0x9b2>
 800e6a4:	d1de      	bne.n	800e664 <_dtoa_r+0x96c>
 800e6a6:	07da      	lsls	r2, r3, #31
 800e6a8:	d5dc      	bpl.n	800e664 <_dtoa_r+0x96c>
 800e6aa:	2b39      	cmp	r3, #57	; 0x39
 800e6ac:	d1d8      	bne.n	800e660 <_dtoa_r+0x968>
 800e6ae:	9a02      	ldr	r2, [sp, #8]
 800e6b0:	2339      	movs	r3, #57	; 0x39
 800e6b2:	7013      	strb	r3, [r2, #0]
 800e6b4:	4643      	mov	r3, r8
 800e6b6:	4698      	mov	r8, r3
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e6be:	2a39      	cmp	r2, #57	; 0x39
 800e6c0:	d051      	beq.n	800e766 <_dtoa_r+0xa6e>
 800e6c2:	3201      	adds	r2, #1
 800e6c4:	701a      	strb	r2, [r3, #0]
 800e6c6:	e746      	b.n	800e556 <_dtoa_r+0x85e>
 800e6c8:	2a00      	cmp	r2, #0
 800e6ca:	dd03      	ble.n	800e6d4 <_dtoa_r+0x9dc>
 800e6cc:	2b39      	cmp	r3, #57	; 0x39
 800e6ce:	d0ee      	beq.n	800e6ae <_dtoa_r+0x9b6>
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	e7c7      	b.n	800e664 <_dtoa_r+0x96c>
 800e6d4:	9a04      	ldr	r2, [sp, #16]
 800e6d6:	9908      	ldr	r1, [sp, #32]
 800e6d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e6dc:	428a      	cmp	r2, r1
 800e6de:	d02b      	beq.n	800e738 <_dtoa_r+0xa40>
 800e6e0:	4629      	mov	r1, r5
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	220a      	movs	r2, #10
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	f000 f9d4 	bl	800ea94 <__multadd>
 800e6ec:	45b9      	cmp	r9, r7
 800e6ee:	4605      	mov	r5, r0
 800e6f0:	f04f 0300 	mov.w	r3, #0
 800e6f4:	f04f 020a 	mov.w	r2, #10
 800e6f8:	4649      	mov	r1, r9
 800e6fa:	4630      	mov	r0, r6
 800e6fc:	d107      	bne.n	800e70e <_dtoa_r+0xa16>
 800e6fe:	f000 f9c9 	bl	800ea94 <__multadd>
 800e702:	4681      	mov	r9, r0
 800e704:	4607      	mov	r7, r0
 800e706:	9b04      	ldr	r3, [sp, #16]
 800e708:	3301      	adds	r3, #1
 800e70a:	9304      	str	r3, [sp, #16]
 800e70c:	e774      	b.n	800e5f8 <_dtoa_r+0x900>
 800e70e:	f000 f9c1 	bl	800ea94 <__multadd>
 800e712:	4639      	mov	r1, r7
 800e714:	4681      	mov	r9, r0
 800e716:	2300      	movs	r3, #0
 800e718:	220a      	movs	r2, #10
 800e71a:	4630      	mov	r0, r6
 800e71c:	f000 f9ba 	bl	800ea94 <__multadd>
 800e720:	4607      	mov	r7, r0
 800e722:	e7f0      	b.n	800e706 <_dtoa_r+0xa0e>
 800e724:	f1ba 0f00 	cmp.w	sl, #0
 800e728:	9a01      	ldr	r2, [sp, #4]
 800e72a:	bfcc      	ite	gt
 800e72c:	46d0      	movgt	r8, sl
 800e72e:	f04f 0801 	movle.w	r8, #1
 800e732:	4490      	add	r8, r2
 800e734:	f04f 0900 	mov.w	r9, #0
 800e738:	4629      	mov	r1, r5
 800e73a:	2201      	movs	r2, #1
 800e73c:	4630      	mov	r0, r6
 800e73e:	9302      	str	r3, [sp, #8]
 800e740:	f000 fb56 	bl	800edf0 <__lshift>
 800e744:	4621      	mov	r1, r4
 800e746:	4605      	mov	r5, r0
 800e748:	f000 fbbe 	bl	800eec8 <__mcmp>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	dcb1      	bgt.n	800e6b4 <_dtoa_r+0x9bc>
 800e750:	d102      	bne.n	800e758 <_dtoa_r+0xa60>
 800e752:	9b02      	ldr	r3, [sp, #8]
 800e754:	07db      	lsls	r3, r3, #31
 800e756:	d4ad      	bmi.n	800e6b4 <_dtoa_r+0x9bc>
 800e758:	4643      	mov	r3, r8
 800e75a:	4698      	mov	r8, r3
 800e75c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e760:	2a30      	cmp	r2, #48	; 0x30
 800e762:	d0fa      	beq.n	800e75a <_dtoa_r+0xa62>
 800e764:	e6f7      	b.n	800e556 <_dtoa_r+0x85e>
 800e766:	9a01      	ldr	r2, [sp, #4]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d1a4      	bne.n	800e6b6 <_dtoa_r+0x9be>
 800e76c:	f10b 0b01 	add.w	fp, fp, #1
 800e770:	2331      	movs	r3, #49	; 0x31
 800e772:	e778      	b.n	800e666 <_dtoa_r+0x96e>
 800e774:	4b14      	ldr	r3, [pc, #80]	; (800e7c8 <_dtoa_r+0xad0>)
 800e776:	f7ff bb2a 	b.w	800ddce <_dtoa_r+0xd6>
 800e77a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	f47f ab05 	bne.w	800dd8c <_dtoa_r+0x94>
 800e782:	4b12      	ldr	r3, [pc, #72]	; (800e7cc <_dtoa_r+0xad4>)
 800e784:	f7ff bb23 	b.w	800ddce <_dtoa_r+0xd6>
 800e788:	f1ba 0f00 	cmp.w	sl, #0
 800e78c:	dc03      	bgt.n	800e796 <_dtoa_r+0xa9e>
 800e78e:	9b06      	ldr	r3, [sp, #24]
 800e790:	2b02      	cmp	r3, #2
 800e792:	f73f aec8 	bgt.w	800e526 <_dtoa_r+0x82e>
 800e796:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e79a:	4621      	mov	r1, r4
 800e79c:	4628      	mov	r0, r5
 800e79e:	f7ff fa20 	bl	800dbe2 <quorem>
 800e7a2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e7a6:	f808 3b01 	strb.w	r3, [r8], #1
 800e7aa:	9a01      	ldr	r2, [sp, #4]
 800e7ac:	eba8 0202 	sub.w	r2, r8, r2
 800e7b0:	4592      	cmp	sl, r2
 800e7b2:	ddb7      	ble.n	800e724 <_dtoa_r+0xa2c>
 800e7b4:	4629      	mov	r1, r5
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	220a      	movs	r2, #10
 800e7ba:	4630      	mov	r0, r6
 800e7bc:	f000 f96a 	bl	800ea94 <__multadd>
 800e7c0:	4605      	mov	r5, r0
 800e7c2:	e7ea      	b.n	800e79a <_dtoa_r+0xaa2>
 800e7c4:	0800fbe0 	.word	0x0800fbe0
 800e7c8:	0800fb40 	.word	0x0800fb40
 800e7cc:	0800fb64 	.word	0x0800fb64

0800e7d0 <_free_r>:
 800e7d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7d2:	2900      	cmp	r1, #0
 800e7d4:	d044      	beq.n	800e860 <_free_r+0x90>
 800e7d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7da:	9001      	str	r0, [sp, #4]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	f1a1 0404 	sub.w	r4, r1, #4
 800e7e2:	bfb8      	it	lt
 800e7e4:	18e4      	addlt	r4, r4, r3
 800e7e6:	f000 f8e7 	bl	800e9b8 <__malloc_lock>
 800e7ea:	4a1e      	ldr	r2, [pc, #120]	; (800e864 <_free_r+0x94>)
 800e7ec:	9801      	ldr	r0, [sp, #4]
 800e7ee:	6813      	ldr	r3, [r2, #0]
 800e7f0:	b933      	cbnz	r3, 800e800 <_free_r+0x30>
 800e7f2:	6063      	str	r3, [r4, #4]
 800e7f4:	6014      	str	r4, [r2, #0]
 800e7f6:	b003      	add	sp, #12
 800e7f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7fc:	f000 b8e2 	b.w	800e9c4 <__malloc_unlock>
 800e800:	42a3      	cmp	r3, r4
 800e802:	d908      	bls.n	800e816 <_free_r+0x46>
 800e804:	6825      	ldr	r5, [r4, #0]
 800e806:	1961      	adds	r1, r4, r5
 800e808:	428b      	cmp	r3, r1
 800e80a:	bf01      	itttt	eq
 800e80c:	6819      	ldreq	r1, [r3, #0]
 800e80e:	685b      	ldreq	r3, [r3, #4]
 800e810:	1949      	addeq	r1, r1, r5
 800e812:	6021      	streq	r1, [r4, #0]
 800e814:	e7ed      	b.n	800e7f2 <_free_r+0x22>
 800e816:	461a      	mov	r2, r3
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	b10b      	cbz	r3, 800e820 <_free_r+0x50>
 800e81c:	42a3      	cmp	r3, r4
 800e81e:	d9fa      	bls.n	800e816 <_free_r+0x46>
 800e820:	6811      	ldr	r1, [r2, #0]
 800e822:	1855      	adds	r5, r2, r1
 800e824:	42a5      	cmp	r5, r4
 800e826:	d10b      	bne.n	800e840 <_free_r+0x70>
 800e828:	6824      	ldr	r4, [r4, #0]
 800e82a:	4421      	add	r1, r4
 800e82c:	1854      	adds	r4, r2, r1
 800e82e:	42a3      	cmp	r3, r4
 800e830:	6011      	str	r1, [r2, #0]
 800e832:	d1e0      	bne.n	800e7f6 <_free_r+0x26>
 800e834:	681c      	ldr	r4, [r3, #0]
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	6053      	str	r3, [r2, #4]
 800e83a:	440c      	add	r4, r1
 800e83c:	6014      	str	r4, [r2, #0]
 800e83e:	e7da      	b.n	800e7f6 <_free_r+0x26>
 800e840:	d902      	bls.n	800e848 <_free_r+0x78>
 800e842:	230c      	movs	r3, #12
 800e844:	6003      	str	r3, [r0, #0]
 800e846:	e7d6      	b.n	800e7f6 <_free_r+0x26>
 800e848:	6825      	ldr	r5, [r4, #0]
 800e84a:	1961      	adds	r1, r4, r5
 800e84c:	428b      	cmp	r3, r1
 800e84e:	bf04      	itt	eq
 800e850:	6819      	ldreq	r1, [r3, #0]
 800e852:	685b      	ldreq	r3, [r3, #4]
 800e854:	6063      	str	r3, [r4, #4]
 800e856:	bf04      	itt	eq
 800e858:	1949      	addeq	r1, r1, r5
 800e85a:	6021      	streq	r1, [r4, #0]
 800e85c:	6054      	str	r4, [r2, #4]
 800e85e:	e7ca      	b.n	800e7f6 <_free_r+0x26>
 800e860:	b003      	add	sp, #12
 800e862:	bd30      	pop	{r4, r5, pc}
 800e864:	24062080 	.word	0x24062080

0800e868 <malloc>:
 800e868:	4b02      	ldr	r3, [pc, #8]	; (800e874 <malloc+0xc>)
 800e86a:	4601      	mov	r1, r0
 800e86c:	6818      	ldr	r0, [r3, #0]
 800e86e:	f000 b823 	b.w	800e8b8 <_malloc_r>
 800e872:	bf00      	nop
 800e874:	24000070 	.word	0x24000070

0800e878 <sbrk_aligned>:
 800e878:	b570      	push	{r4, r5, r6, lr}
 800e87a:	4e0e      	ldr	r6, [pc, #56]	; (800e8b4 <sbrk_aligned+0x3c>)
 800e87c:	460c      	mov	r4, r1
 800e87e:	6831      	ldr	r1, [r6, #0]
 800e880:	4605      	mov	r5, r0
 800e882:	b911      	cbnz	r1, 800e88a <sbrk_aligned+0x12>
 800e884:	f001 f808 	bl	800f898 <_sbrk_r>
 800e888:	6030      	str	r0, [r6, #0]
 800e88a:	4621      	mov	r1, r4
 800e88c:	4628      	mov	r0, r5
 800e88e:	f001 f803 	bl	800f898 <_sbrk_r>
 800e892:	1c43      	adds	r3, r0, #1
 800e894:	d00a      	beq.n	800e8ac <sbrk_aligned+0x34>
 800e896:	1cc4      	adds	r4, r0, #3
 800e898:	f024 0403 	bic.w	r4, r4, #3
 800e89c:	42a0      	cmp	r0, r4
 800e89e:	d007      	beq.n	800e8b0 <sbrk_aligned+0x38>
 800e8a0:	1a21      	subs	r1, r4, r0
 800e8a2:	4628      	mov	r0, r5
 800e8a4:	f000 fff8 	bl	800f898 <_sbrk_r>
 800e8a8:	3001      	adds	r0, #1
 800e8aa:	d101      	bne.n	800e8b0 <sbrk_aligned+0x38>
 800e8ac:	f04f 34ff 	mov.w	r4, #4294967295
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	bd70      	pop	{r4, r5, r6, pc}
 800e8b4:	24062084 	.word	0x24062084

0800e8b8 <_malloc_r>:
 800e8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8bc:	1ccd      	adds	r5, r1, #3
 800e8be:	f025 0503 	bic.w	r5, r5, #3
 800e8c2:	3508      	adds	r5, #8
 800e8c4:	2d0c      	cmp	r5, #12
 800e8c6:	bf38      	it	cc
 800e8c8:	250c      	movcc	r5, #12
 800e8ca:	2d00      	cmp	r5, #0
 800e8cc:	4607      	mov	r7, r0
 800e8ce:	db01      	blt.n	800e8d4 <_malloc_r+0x1c>
 800e8d0:	42a9      	cmp	r1, r5
 800e8d2:	d905      	bls.n	800e8e0 <_malloc_r+0x28>
 800e8d4:	230c      	movs	r3, #12
 800e8d6:	603b      	str	r3, [r7, #0]
 800e8d8:	2600      	movs	r6, #0
 800e8da:	4630      	mov	r0, r6
 800e8dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e9b4 <_malloc_r+0xfc>
 800e8e4:	f000 f868 	bl	800e9b8 <__malloc_lock>
 800e8e8:	f8d8 3000 	ldr.w	r3, [r8]
 800e8ec:	461c      	mov	r4, r3
 800e8ee:	bb5c      	cbnz	r4, 800e948 <_malloc_r+0x90>
 800e8f0:	4629      	mov	r1, r5
 800e8f2:	4638      	mov	r0, r7
 800e8f4:	f7ff ffc0 	bl	800e878 <sbrk_aligned>
 800e8f8:	1c43      	adds	r3, r0, #1
 800e8fa:	4604      	mov	r4, r0
 800e8fc:	d155      	bne.n	800e9aa <_malloc_r+0xf2>
 800e8fe:	f8d8 4000 	ldr.w	r4, [r8]
 800e902:	4626      	mov	r6, r4
 800e904:	2e00      	cmp	r6, #0
 800e906:	d145      	bne.n	800e994 <_malloc_r+0xdc>
 800e908:	2c00      	cmp	r4, #0
 800e90a:	d048      	beq.n	800e99e <_malloc_r+0xe6>
 800e90c:	6823      	ldr	r3, [r4, #0]
 800e90e:	4631      	mov	r1, r6
 800e910:	4638      	mov	r0, r7
 800e912:	eb04 0903 	add.w	r9, r4, r3
 800e916:	f000 ffbf 	bl	800f898 <_sbrk_r>
 800e91a:	4581      	cmp	r9, r0
 800e91c:	d13f      	bne.n	800e99e <_malloc_r+0xe6>
 800e91e:	6821      	ldr	r1, [r4, #0]
 800e920:	1a6d      	subs	r5, r5, r1
 800e922:	4629      	mov	r1, r5
 800e924:	4638      	mov	r0, r7
 800e926:	f7ff ffa7 	bl	800e878 <sbrk_aligned>
 800e92a:	3001      	adds	r0, #1
 800e92c:	d037      	beq.n	800e99e <_malloc_r+0xe6>
 800e92e:	6823      	ldr	r3, [r4, #0]
 800e930:	442b      	add	r3, r5
 800e932:	6023      	str	r3, [r4, #0]
 800e934:	f8d8 3000 	ldr.w	r3, [r8]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d038      	beq.n	800e9ae <_malloc_r+0xf6>
 800e93c:	685a      	ldr	r2, [r3, #4]
 800e93e:	42a2      	cmp	r2, r4
 800e940:	d12b      	bne.n	800e99a <_malloc_r+0xe2>
 800e942:	2200      	movs	r2, #0
 800e944:	605a      	str	r2, [r3, #4]
 800e946:	e00f      	b.n	800e968 <_malloc_r+0xb0>
 800e948:	6822      	ldr	r2, [r4, #0]
 800e94a:	1b52      	subs	r2, r2, r5
 800e94c:	d41f      	bmi.n	800e98e <_malloc_r+0xd6>
 800e94e:	2a0b      	cmp	r2, #11
 800e950:	d917      	bls.n	800e982 <_malloc_r+0xca>
 800e952:	1961      	adds	r1, r4, r5
 800e954:	42a3      	cmp	r3, r4
 800e956:	6025      	str	r5, [r4, #0]
 800e958:	bf18      	it	ne
 800e95a:	6059      	strne	r1, [r3, #4]
 800e95c:	6863      	ldr	r3, [r4, #4]
 800e95e:	bf08      	it	eq
 800e960:	f8c8 1000 	streq.w	r1, [r8]
 800e964:	5162      	str	r2, [r4, r5]
 800e966:	604b      	str	r3, [r1, #4]
 800e968:	4638      	mov	r0, r7
 800e96a:	f104 060b 	add.w	r6, r4, #11
 800e96e:	f000 f829 	bl	800e9c4 <__malloc_unlock>
 800e972:	f026 0607 	bic.w	r6, r6, #7
 800e976:	1d23      	adds	r3, r4, #4
 800e978:	1af2      	subs	r2, r6, r3
 800e97a:	d0ae      	beq.n	800e8da <_malloc_r+0x22>
 800e97c:	1b9b      	subs	r3, r3, r6
 800e97e:	50a3      	str	r3, [r4, r2]
 800e980:	e7ab      	b.n	800e8da <_malloc_r+0x22>
 800e982:	42a3      	cmp	r3, r4
 800e984:	6862      	ldr	r2, [r4, #4]
 800e986:	d1dd      	bne.n	800e944 <_malloc_r+0x8c>
 800e988:	f8c8 2000 	str.w	r2, [r8]
 800e98c:	e7ec      	b.n	800e968 <_malloc_r+0xb0>
 800e98e:	4623      	mov	r3, r4
 800e990:	6864      	ldr	r4, [r4, #4]
 800e992:	e7ac      	b.n	800e8ee <_malloc_r+0x36>
 800e994:	4634      	mov	r4, r6
 800e996:	6876      	ldr	r6, [r6, #4]
 800e998:	e7b4      	b.n	800e904 <_malloc_r+0x4c>
 800e99a:	4613      	mov	r3, r2
 800e99c:	e7cc      	b.n	800e938 <_malloc_r+0x80>
 800e99e:	230c      	movs	r3, #12
 800e9a0:	603b      	str	r3, [r7, #0]
 800e9a2:	4638      	mov	r0, r7
 800e9a4:	f000 f80e 	bl	800e9c4 <__malloc_unlock>
 800e9a8:	e797      	b.n	800e8da <_malloc_r+0x22>
 800e9aa:	6025      	str	r5, [r4, #0]
 800e9ac:	e7dc      	b.n	800e968 <_malloc_r+0xb0>
 800e9ae:	605b      	str	r3, [r3, #4]
 800e9b0:	deff      	udf	#255	; 0xff
 800e9b2:	bf00      	nop
 800e9b4:	24062080 	.word	0x24062080

0800e9b8 <__malloc_lock>:
 800e9b8:	4801      	ldr	r0, [pc, #4]	; (800e9c0 <__malloc_lock+0x8>)
 800e9ba:	f7ff b910 	b.w	800dbde <__retarget_lock_acquire_recursive>
 800e9be:	bf00      	nop
 800e9c0:	2406207c 	.word	0x2406207c

0800e9c4 <__malloc_unlock>:
 800e9c4:	4801      	ldr	r0, [pc, #4]	; (800e9cc <__malloc_unlock+0x8>)
 800e9c6:	f7ff b90b 	b.w	800dbe0 <__retarget_lock_release_recursive>
 800e9ca:	bf00      	nop
 800e9cc:	2406207c 	.word	0x2406207c

0800e9d0 <_Balloc>:
 800e9d0:	b570      	push	{r4, r5, r6, lr}
 800e9d2:	69c6      	ldr	r6, [r0, #28]
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	460d      	mov	r5, r1
 800e9d8:	b976      	cbnz	r6, 800e9f8 <_Balloc+0x28>
 800e9da:	2010      	movs	r0, #16
 800e9dc:	f7ff ff44 	bl	800e868 <malloc>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	61e0      	str	r0, [r4, #28]
 800e9e4:	b920      	cbnz	r0, 800e9f0 <_Balloc+0x20>
 800e9e6:	4b18      	ldr	r3, [pc, #96]	; (800ea48 <_Balloc+0x78>)
 800e9e8:	4818      	ldr	r0, [pc, #96]	; (800ea4c <_Balloc+0x7c>)
 800e9ea:	216b      	movs	r1, #107	; 0x6b
 800e9ec:	f000 ff72 	bl	800f8d4 <__assert_func>
 800e9f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9f4:	6006      	str	r6, [r0, #0]
 800e9f6:	60c6      	str	r6, [r0, #12]
 800e9f8:	69e6      	ldr	r6, [r4, #28]
 800e9fa:	68f3      	ldr	r3, [r6, #12]
 800e9fc:	b183      	cbz	r3, 800ea20 <_Balloc+0x50>
 800e9fe:	69e3      	ldr	r3, [r4, #28]
 800ea00:	68db      	ldr	r3, [r3, #12]
 800ea02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ea06:	b9b8      	cbnz	r0, 800ea38 <_Balloc+0x68>
 800ea08:	2101      	movs	r1, #1
 800ea0a:	fa01 f605 	lsl.w	r6, r1, r5
 800ea0e:	1d72      	adds	r2, r6, #5
 800ea10:	0092      	lsls	r2, r2, #2
 800ea12:	4620      	mov	r0, r4
 800ea14:	f000 ff7c 	bl	800f910 <_calloc_r>
 800ea18:	b160      	cbz	r0, 800ea34 <_Balloc+0x64>
 800ea1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ea1e:	e00e      	b.n	800ea3e <_Balloc+0x6e>
 800ea20:	2221      	movs	r2, #33	; 0x21
 800ea22:	2104      	movs	r1, #4
 800ea24:	4620      	mov	r0, r4
 800ea26:	f000 ff73 	bl	800f910 <_calloc_r>
 800ea2a:	69e3      	ldr	r3, [r4, #28]
 800ea2c:	60f0      	str	r0, [r6, #12]
 800ea2e:	68db      	ldr	r3, [r3, #12]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d1e4      	bne.n	800e9fe <_Balloc+0x2e>
 800ea34:	2000      	movs	r0, #0
 800ea36:	bd70      	pop	{r4, r5, r6, pc}
 800ea38:	6802      	ldr	r2, [r0, #0]
 800ea3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ea3e:	2300      	movs	r3, #0
 800ea40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea44:	e7f7      	b.n	800ea36 <_Balloc+0x66>
 800ea46:	bf00      	nop
 800ea48:	0800fb71 	.word	0x0800fb71
 800ea4c:	0800fbf1 	.word	0x0800fbf1

0800ea50 <_Bfree>:
 800ea50:	b570      	push	{r4, r5, r6, lr}
 800ea52:	69c6      	ldr	r6, [r0, #28]
 800ea54:	4605      	mov	r5, r0
 800ea56:	460c      	mov	r4, r1
 800ea58:	b976      	cbnz	r6, 800ea78 <_Bfree+0x28>
 800ea5a:	2010      	movs	r0, #16
 800ea5c:	f7ff ff04 	bl	800e868 <malloc>
 800ea60:	4602      	mov	r2, r0
 800ea62:	61e8      	str	r0, [r5, #28]
 800ea64:	b920      	cbnz	r0, 800ea70 <_Bfree+0x20>
 800ea66:	4b09      	ldr	r3, [pc, #36]	; (800ea8c <_Bfree+0x3c>)
 800ea68:	4809      	ldr	r0, [pc, #36]	; (800ea90 <_Bfree+0x40>)
 800ea6a:	218f      	movs	r1, #143	; 0x8f
 800ea6c:	f000 ff32 	bl	800f8d4 <__assert_func>
 800ea70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea74:	6006      	str	r6, [r0, #0]
 800ea76:	60c6      	str	r6, [r0, #12]
 800ea78:	b13c      	cbz	r4, 800ea8a <_Bfree+0x3a>
 800ea7a:	69eb      	ldr	r3, [r5, #28]
 800ea7c:	6862      	ldr	r2, [r4, #4]
 800ea7e:	68db      	ldr	r3, [r3, #12]
 800ea80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea84:	6021      	str	r1, [r4, #0]
 800ea86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea8a:	bd70      	pop	{r4, r5, r6, pc}
 800ea8c:	0800fb71 	.word	0x0800fb71
 800ea90:	0800fbf1 	.word	0x0800fbf1

0800ea94 <__multadd>:
 800ea94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea98:	690d      	ldr	r5, [r1, #16]
 800ea9a:	4607      	mov	r7, r0
 800ea9c:	460c      	mov	r4, r1
 800ea9e:	461e      	mov	r6, r3
 800eaa0:	f101 0c14 	add.w	ip, r1, #20
 800eaa4:	2000      	movs	r0, #0
 800eaa6:	f8dc 3000 	ldr.w	r3, [ip]
 800eaaa:	b299      	uxth	r1, r3
 800eaac:	fb02 6101 	mla	r1, r2, r1, r6
 800eab0:	0c1e      	lsrs	r6, r3, #16
 800eab2:	0c0b      	lsrs	r3, r1, #16
 800eab4:	fb02 3306 	mla	r3, r2, r6, r3
 800eab8:	b289      	uxth	r1, r1
 800eaba:	3001      	adds	r0, #1
 800eabc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eac0:	4285      	cmp	r5, r0
 800eac2:	f84c 1b04 	str.w	r1, [ip], #4
 800eac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eaca:	dcec      	bgt.n	800eaa6 <__multadd+0x12>
 800eacc:	b30e      	cbz	r6, 800eb12 <__multadd+0x7e>
 800eace:	68a3      	ldr	r3, [r4, #8]
 800ead0:	42ab      	cmp	r3, r5
 800ead2:	dc19      	bgt.n	800eb08 <__multadd+0x74>
 800ead4:	6861      	ldr	r1, [r4, #4]
 800ead6:	4638      	mov	r0, r7
 800ead8:	3101      	adds	r1, #1
 800eada:	f7ff ff79 	bl	800e9d0 <_Balloc>
 800eade:	4680      	mov	r8, r0
 800eae0:	b928      	cbnz	r0, 800eaee <__multadd+0x5a>
 800eae2:	4602      	mov	r2, r0
 800eae4:	4b0c      	ldr	r3, [pc, #48]	; (800eb18 <__multadd+0x84>)
 800eae6:	480d      	ldr	r0, [pc, #52]	; (800eb1c <__multadd+0x88>)
 800eae8:	21ba      	movs	r1, #186	; 0xba
 800eaea:	f000 fef3 	bl	800f8d4 <__assert_func>
 800eaee:	6922      	ldr	r2, [r4, #16]
 800eaf0:	3202      	adds	r2, #2
 800eaf2:	f104 010c 	add.w	r1, r4, #12
 800eaf6:	0092      	lsls	r2, r2, #2
 800eaf8:	300c      	adds	r0, #12
 800eafa:	f000 fedd 	bl	800f8b8 <memcpy>
 800eafe:	4621      	mov	r1, r4
 800eb00:	4638      	mov	r0, r7
 800eb02:	f7ff ffa5 	bl	800ea50 <_Bfree>
 800eb06:	4644      	mov	r4, r8
 800eb08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eb0c:	3501      	adds	r5, #1
 800eb0e:	615e      	str	r6, [r3, #20]
 800eb10:	6125      	str	r5, [r4, #16]
 800eb12:	4620      	mov	r0, r4
 800eb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb18:	0800fbe0 	.word	0x0800fbe0
 800eb1c:	0800fbf1 	.word	0x0800fbf1

0800eb20 <__hi0bits>:
 800eb20:	0c03      	lsrs	r3, r0, #16
 800eb22:	041b      	lsls	r3, r3, #16
 800eb24:	b9d3      	cbnz	r3, 800eb5c <__hi0bits+0x3c>
 800eb26:	0400      	lsls	r0, r0, #16
 800eb28:	2310      	movs	r3, #16
 800eb2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eb2e:	bf04      	itt	eq
 800eb30:	0200      	lsleq	r0, r0, #8
 800eb32:	3308      	addeq	r3, #8
 800eb34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eb38:	bf04      	itt	eq
 800eb3a:	0100      	lsleq	r0, r0, #4
 800eb3c:	3304      	addeq	r3, #4
 800eb3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eb42:	bf04      	itt	eq
 800eb44:	0080      	lsleq	r0, r0, #2
 800eb46:	3302      	addeq	r3, #2
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	db05      	blt.n	800eb58 <__hi0bits+0x38>
 800eb4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eb50:	f103 0301 	add.w	r3, r3, #1
 800eb54:	bf08      	it	eq
 800eb56:	2320      	moveq	r3, #32
 800eb58:	4618      	mov	r0, r3
 800eb5a:	4770      	bx	lr
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	e7e4      	b.n	800eb2a <__hi0bits+0xa>

0800eb60 <__lo0bits>:
 800eb60:	6803      	ldr	r3, [r0, #0]
 800eb62:	f013 0207 	ands.w	r2, r3, #7
 800eb66:	d00c      	beq.n	800eb82 <__lo0bits+0x22>
 800eb68:	07d9      	lsls	r1, r3, #31
 800eb6a:	d422      	bmi.n	800ebb2 <__lo0bits+0x52>
 800eb6c:	079a      	lsls	r2, r3, #30
 800eb6e:	bf49      	itett	mi
 800eb70:	085b      	lsrmi	r3, r3, #1
 800eb72:	089b      	lsrpl	r3, r3, #2
 800eb74:	6003      	strmi	r3, [r0, #0]
 800eb76:	2201      	movmi	r2, #1
 800eb78:	bf5c      	itt	pl
 800eb7a:	6003      	strpl	r3, [r0, #0]
 800eb7c:	2202      	movpl	r2, #2
 800eb7e:	4610      	mov	r0, r2
 800eb80:	4770      	bx	lr
 800eb82:	b299      	uxth	r1, r3
 800eb84:	b909      	cbnz	r1, 800eb8a <__lo0bits+0x2a>
 800eb86:	0c1b      	lsrs	r3, r3, #16
 800eb88:	2210      	movs	r2, #16
 800eb8a:	b2d9      	uxtb	r1, r3
 800eb8c:	b909      	cbnz	r1, 800eb92 <__lo0bits+0x32>
 800eb8e:	3208      	adds	r2, #8
 800eb90:	0a1b      	lsrs	r3, r3, #8
 800eb92:	0719      	lsls	r1, r3, #28
 800eb94:	bf04      	itt	eq
 800eb96:	091b      	lsreq	r3, r3, #4
 800eb98:	3204      	addeq	r2, #4
 800eb9a:	0799      	lsls	r1, r3, #30
 800eb9c:	bf04      	itt	eq
 800eb9e:	089b      	lsreq	r3, r3, #2
 800eba0:	3202      	addeq	r2, #2
 800eba2:	07d9      	lsls	r1, r3, #31
 800eba4:	d403      	bmi.n	800ebae <__lo0bits+0x4e>
 800eba6:	085b      	lsrs	r3, r3, #1
 800eba8:	f102 0201 	add.w	r2, r2, #1
 800ebac:	d003      	beq.n	800ebb6 <__lo0bits+0x56>
 800ebae:	6003      	str	r3, [r0, #0]
 800ebb0:	e7e5      	b.n	800eb7e <__lo0bits+0x1e>
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	e7e3      	b.n	800eb7e <__lo0bits+0x1e>
 800ebb6:	2220      	movs	r2, #32
 800ebb8:	e7e1      	b.n	800eb7e <__lo0bits+0x1e>
	...

0800ebbc <__i2b>:
 800ebbc:	b510      	push	{r4, lr}
 800ebbe:	460c      	mov	r4, r1
 800ebc0:	2101      	movs	r1, #1
 800ebc2:	f7ff ff05 	bl	800e9d0 <_Balloc>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	b928      	cbnz	r0, 800ebd6 <__i2b+0x1a>
 800ebca:	4b05      	ldr	r3, [pc, #20]	; (800ebe0 <__i2b+0x24>)
 800ebcc:	4805      	ldr	r0, [pc, #20]	; (800ebe4 <__i2b+0x28>)
 800ebce:	f240 1145 	movw	r1, #325	; 0x145
 800ebd2:	f000 fe7f 	bl	800f8d4 <__assert_func>
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	6144      	str	r4, [r0, #20]
 800ebda:	6103      	str	r3, [r0, #16]
 800ebdc:	bd10      	pop	{r4, pc}
 800ebde:	bf00      	nop
 800ebe0:	0800fbe0 	.word	0x0800fbe0
 800ebe4:	0800fbf1 	.word	0x0800fbf1

0800ebe8 <__multiply>:
 800ebe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebec:	4691      	mov	r9, r2
 800ebee:	690a      	ldr	r2, [r1, #16]
 800ebf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	bfb8      	it	lt
 800ebf8:	460b      	movlt	r3, r1
 800ebfa:	460c      	mov	r4, r1
 800ebfc:	bfbc      	itt	lt
 800ebfe:	464c      	movlt	r4, r9
 800ec00:	4699      	movlt	r9, r3
 800ec02:	6927      	ldr	r7, [r4, #16]
 800ec04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ec08:	68a3      	ldr	r3, [r4, #8]
 800ec0a:	6861      	ldr	r1, [r4, #4]
 800ec0c:	eb07 060a 	add.w	r6, r7, sl
 800ec10:	42b3      	cmp	r3, r6
 800ec12:	b085      	sub	sp, #20
 800ec14:	bfb8      	it	lt
 800ec16:	3101      	addlt	r1, #1
 800ec18:	f7ff feda 	bl	800e9d0 <_Balloc>
 800ec1c:	b930      	cbnz	r0, 800ec2c <__multiply+0x44>
 800ec1e:	4602      	mov	r2, r0
 800ec20:	4b44      	ldr	r3, [pc, #272]	; (800ed34 <__multiply+0x14c>)
 800ec22:	4845      	ldr	r0, [pc, #276]	; (800ed38 <__multiply+0x150>)
 800ec24:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ec28:	f000 fe54 	bl	800f8d4 <__assert_func>
 800ec2c:	f100 0514 	add.w	r5, r0, #20
 800ec30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ec34:	462b      	mov	r3, r5
 800ec36:	2200      	movs	r2, #0
 800ec38:	4543      	cmp	r3, r8
 800ec3a:	d321      	bcc.n	800ec80 <__multiply+0x98>
 800ec3c:	f104 0314 	add.w	r3, r4, #20
 800ec40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ec44:	f109 0314 	add.w	r3, r9, #20
 800ec48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ec4c:	9202      	str	r2, [sp, #8]
 800ec4e:	1b3a      	subs	r2, r7, r4
 800ec50:	3a15      	subs	r2, #21
 800ec52:	f022 0203 	bic.w	r2, r2, #3
 800ec56:	3204      	adds	r2, #4
 800ec58:	f104 0115 	add.w	r1, r4, #21
 800ec5c:	428f      	cmp	r7, r1
 800ec5e:	bf38      	it	cc
 800ec60:	2204      	movcc	r2, #4
 800ec62:	9201      	str	r2, [sp, #4]
 800ec64:	9a02      	ldr	r2, [sp, #8]
 800ec66:	9303      	str	r3, [sp, #12]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d80c      	bhi.n	800ec86 <__multiply+0x9e>
 800ec6c:	2e00      	cmp	r6, #0
 800ec6e:	dd03      	ble.n	800ec78 <__multiply+0x90>
 800ec70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d05b      	beq.n	800ed30 <__multiply+0x148>
 800ec78:	6106      	str	r6, [r0, #16]
 800ec7a:	b005      	add	sp, #20
 800ec7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec80:	f843 2b04 	str.w	r2, [r3], #4
 800ec84:	e7d8      	b.n	800ec38 <__multiply+0x50>
 800ec86:	f8b3 a000 	ldrh.w	sl, [r3]
 800ec8a:	f1ba 0f00 	cmp.w	sl, #0
 800ec8e:	d024      	beq.n	800ecda <__multiply+0xf2>
 800ec90:	f104 0e14 	add.w	lr, r4, #20
 800ec94:	46a9      	mov	r9, r5
 800ec96:	f04f 0c00 	mov.w	ip, #0
 800ec9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ec9e:	f8d9 1000 	ldr.w	r1, [r9]
 800eca2:	fa1f fb82 	uxth.w	fp, r2
 800eca6:	b289      	uxth	r1, r1
 800eca8:	fb0a 110b 	mla	r1, sl, fp, r1
 800ecac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ecb0:	f8d9 2000 	ldr.w	r2, [r9]
 800ecb4:	4461      	add	r1, ip
 800ecb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ecba:	fb0a c20b 	mla	r2, sl, fp, ip
 800ecbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ecc2:	b289      	uxth	r1, r1
 800ecc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ecc8:	4577      	cmp	r7, lr
 800ecca:	f849 1b04 	str.w	r1, [r9], #4
 800ecce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ecd2:	d8e2      	bhi.n	800ec9a <__multiply+0xb2>
 800ecd4:	9a01      	ldr	r2, [sp, #4]
 800ecd6:	f845 c002 	str.w	ip, [r5, r2]
 800ecda:	9a03      	ldr	r2, [sp, #12]
 800ecdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ece0:	3304      	adds	r3, #4
 800ece2:	f1b9 0f00 	cmp.w	r9, #0
 800ece6:	d021      	beq.n	800ed2c <__multiply+0x144>
 800ece8:	6829      	ldr	r1, [r5, #0]
 800ecea:	f104 0c14 	add.w	ip, r4, #20
 800ecee:	46ae      	mov	lr, r5
 800ecf0:	f04f 0a00 	mov.w	sl, #0
 800ecf4:	f8bc b000 	ldrh.w	fp, [ip]
 800ecf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ecfc:	fb09 220b 	mla	r2, r9, fp, r2
 800ed00:	4452      	add	r2, sl
 800ed02:	b289      	uxth	r1, r1
 800ed04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ed08:	f84e 1b04 	str.w	r1, [lr], #4
 800ed0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ed10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ed14:	f8be 1000 	ldrh.w	r1, [lr]
 800ed18:	fb09 110a 	mla	r1, r9, sl, r1
 800ed1c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ed20:	4567      	cmp	r7, ip
 800ed22:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ed26:	d8e5      	bhi.n	800ecf4 <__multiply+0x10c>
 800ed28:	9a01      	ldr	r2, [sp, #4]
 800ed2a:	50a9      	str	r1, [r5, r2]
 800ed2c:	3504      	adds	r5, #4
 800ed2e:	e799      	b.n	800ec64 <__multiply+0x7c>
 800ed30:	3e01      	subs	r6, #1
 800ed32:	e79b      	b.n	800ec6c <__multiply+0x84>
 800ed34:	0800fbe0 	.word	0x0800fbe0
 800ed38:	0800fbf1 	.word	0x0800fbf1

0800ed3c <__pow5mult>:
 800ed3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed40:	4615      	mov	r5, r2
 800ed42:	f012 0203 	ands.w	r2, r2, #3
 800ed46:	4606      	mov	r6, r0
 800ed48:	460f      	mov	r7, r1
 800ed4a:	d007      	beq.n	800ed5c <__pow5mult+0x20>
 800ed4c:	4c25      	ldr	r4, [pc, #148]	; (800ede4 <__pow5mult+0xa8>)
 800ed4e:	3a01      	subs	r2, #1
 800ed50:	2300      	movs	r3, #0
 800ed52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed56:	f7ff fe9d 	bl	800ea94 <__multadd>
 800ed5a:	4607      	mov	r7, r0
 800ed5c:	10ad      	asrs	r5, r5, #2
 800ed5e:	d03d      	beq.n	800eddc <__pow5mult+0xa0>
 800ed60:	69f4      	ldr	r4, [r6, #28]
 800ed62:	b97c      	cbnz	r4, 800ed84 <__pow5mult+0x48>
 800ed64:	2010      	movs	r0, #16
 800ed66:	f7ff fd7f 	bl	800e868 <malloc>
 800ed6a:	4602      	mov	r2, r0
 800ed6c:	61f0      	str	r0, [r6, #28]
 800ed6e:	b928      	cbnz	r0, 800ed7c <__pow5mult+0x40>
 800ed70:	4b1d      	ldr	r3, [pc, #116]	; (800ede8 <__pow5mult+0xac>)
 800ed72:	481e      	ldr	r0, [pc, #120]	; (800edec <__pow5mult+0xb0>)
 800ed74:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ed78:	f000 fdac 	bl	800f8d4 <__assert_func>
 800ed7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed80:	6004      	str	r4, [r0, #0]
 800ed82:	60c4      	str	r4, [r0, #12]
 800ed84:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ed88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed8c:	b94c      	cbnz	r4, 800eda2 <__pow5mult+0x66>
 800ed8e:	f240 2171 	movw	r1, #625	; 0x271
 800ed92:	4630      	mov	r0, r6
 800ed94:	f7ff ff12 	bl	800ebbc <__i2b>
 800ed98:	2300      	movs	r3, #0
 800ed9a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ed9e:	4604      	mov	r4, r0
 800eda0:	6003      	str	r3, [r0, #0]
 800eda2:	f04f 0900 	mov.w	r9, #0
 800eda6:	07eb      	lsls	r3, r5, #31
 800eda8:	d50a      	bpl.n	800edc0 <__pow5mult+0x84>
 800edaa:	4639      	mov	r1, r7
 800edac:	4622      	mov	r2, r4
 800edae:	4630      	mov	r0, r6
 800edb0:	f7ff ff1a 	bl	800ebe8 <__multiply>
 800edb4:	4639      	mov	r1, r7
 800edb6:	4680      	mov	r8, r0
 800edb8:	4630      	mov	r0, r6
 800edba:	f7ff fe49 	bl	800ea50 <_Bfree>
 800edbe:	4647      	mov	r7, r8
 800edc0:	106d      	asrs	r5, r5, #1
 800edc2:	d00b      	beq.n	800eddc <__pow5mult+0xa0>
 800edc4:	6820      	ldr	r0, [r4, #0]
 800edc6:	b938      	cbnz	r0, 800edd8 <__pow5mult+0x9c>
 800edc8:	4622      	mov	r2, r4
 800edca:	4621      	mov	r1, r4
 800edcc:	4630      	mov	r0, r6
 800edce:	f7ff ff0b 	bl	800ebe8 <__multiply>
 800edd2:	6020      	str	r0, [r4, #0]
 800edd4:	f8c0 9000 	str.w	r9, [r0]
 800edd8:	4604      	mov	r4, r0
 800edda:	e7e4      	b.n	800eda6 <__pow5mult+0x6a>
 800eddc:	4638      	mov	r0, r7
 800edde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ede2:	bf00      	nop
 800ede4:	0800fd40 	.word	0x0800fd40
 800ede8:	0800fb71 	.word	0x0800fb71
 800edec:	0800fbf1 	.word	0x0800fbf1

0800edf0 <__lshift>:
 800edf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edf4:	460c      	mov	r4, r1
 800edf6:	6849      	ldr	r1, [r1, #4]
 800edf8:	6923      	ldr	r3, [r4, #16]
 800edfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800edfe:	68a3      	ldr	r3, [r4, #8]
 800ee00:	4607      	mov	r7, r0
 800ee02:	4691      	mov	r9, r2
 800ee04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee08:	f108 0601 	add.w	r6, r8, #1
 800ee0c:	42b3      	cmp	r3, r6
 800ee0e:	db0b      	blt.n	800ee28 <__lshift+0x38>
 800ee10:	4638      	mov	r0, r7
 800ee12:	f7ff fddd 	bl	800e9d0 <_Balloc>
 800ee16:	4605      	mov	r5, r0
 800ee18:	b948      	cbnz	r0, 800ee2e <__lshift+0x3e>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	4b28      	ldr	r3, [pc, #160]	; (800eec0 <__lshift+0xd0>)
 800ee1e:	4829      	ldr	r0, [pc, #164]	; (800eec4 <__lshift+0xd4>)
 800ee20:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ee24:	f000 fd56 	bl	800f8d4 <__assert_func>
 800ee28:	3101      	adds	r1, #1
 800ee2a:	005b      	lsls	r3, r3, #1
 800ee2c:	e7ee      	b.n	800ee0c <__lshift+0x1c>
 800ee2e:	2300      	movs	r3, #0
 800ee30:	f100 0114 	add.w	r1, r0, #20
 800ee34:	f100 0210 	add.w	r2, r0, #16
 800ee38:	4618      	mov	r0, r3
 800ee3a:	4553      	cmp	r3, sl
 800ee3c:	db33      	blt.n	800eea6 <__lshift+0xb6>
 800ee3e:	6920      	ldr	r0, [r4, #16]
 800ee40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee44:	f104 0314 	add.w	r3, r4, #20
 800ee48:	f019 091f 	ands.w	r9, r9, #31
 800ee4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ee54:	d02b      	beq.n	800eeae <__lshift+0xbe>
 800ee56:	f1c9 0e20 	rsb	lr, r9, #32
 800ee5a:	468a      	mov	sl, r1
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	6818      	ldr	r0, [r3, #0]
 800ee60:	fa00 f009 	lsl.w	r0, r0, r9
 800ee64:	4310      	orrs	r0, r2
 800ee66:	f84a 0b04 	str.w	r0, [sl], #4
 800ee6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee6e:	459c      	cmp	ip, r3
 800ee70:	fa22 f20e 	lsr.w	r2, r2, lr
 800ee74:	d8f3      	bhi.n	800ee5e <__lshift+0x6e>
 800ee76:	ebac 0304 	sub.w	r3, ip, r4
 800ee7a:	3b15      	subs	r3, #21
 800ee7c:	f023 0303 	bic.w	r3, r3, #3
 800ee80:	3304      	adds	r3, #4
 800ee82:	f104 0015 	add.w	r0, r4, #21
 800ee86:	4584      	cmp	ip, r0
 800ee88:	bf38      	it	cc
 800ee8a:	2304      	movcc	r3, #4
 800ee8c:	50ca      	str	r2, [r1, r3]
 800ee8e:	b10a      	cbz	r2, 800ee94 <__lshift+0xa4>
 800ee90:	f108 0602 	add.w	r6, r8, #2
 800ee94:	3e01      	subs	r6, #1
 800ee96:	4638      	mov	r0, r7
 800ee98:	612e      	str	r6, [r5, #16]
 800ee9a:	4621      	mov	r1, r4
 800ee9c:	f7ff fdd8 	bl	800ea50 <_Bfree>
 800eea0:	4628      	mov	r0, r5
 800eea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eea6:	f842 0f04 	str.w	r0, [r2, #4]!
 800eeaa:	3301      	adds	r3, #1
 800eeac:	e7c5      	b.n	800ee3a <__lshift+0x4a>
 800eeae:	3904      	subs	r1, #4
 800eeb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800eeb4:	f841 2f04 	str.w	r2, [r1, #4]!
 800eeb8:	459c      	cmp	ip, r3
 800eeba:	d8f9      	bhi.n	800eeb0 <__lshift+0xc0>
 800eebc:	e7ea      	b.n	800ee94 <__lshift+0xa4>
 800eebe:	bf00      	nop
 800eec0:	0800fbe0 	.word	0x0800fbe0
 800eec4:	0800fbf1 	.word	0x0800fbf1

0800eec8 <__mcmp>:
 800eec8:	b530      	push	{r4, r5, lr}
 800eeca:	6902      	ldr	r2, [r0, #16]
 800eecc:	690c      	ldr	r4, [r1, #16]
 800eece:	1b12      	subs	r2, r2, r4
 800eed0:	d10e      	bne.n	800eef0 <__mcmp+0x28>
 800eed2:	f100 0314 	add.w	r3, r0, #20
 800eed6:	3114      	adds	r1, #20
 800eed8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eedc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eee0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eee4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eee8:	42a5      	cmp	r5, r4
 800eeea:	d003      	beq.n	800eef4 <__mcmp+0x2c>
 800eeec:	d305      	bcc.n	800eefa <__mcmp+0x32>
 800eeee:	2201      	movs	r2, #1
 800eef0:	4610      	mov	r0, r2
 800eef2:	bd30      	pop	{r4, r5, pc}
 800eef4:	4283      	cmp	r3, r0
 800eef6:	d3f3      	bcc.n	800eee0 <__mcmp+0x18>
 800eef8:	e7fa      	b.n	800eef0 <__mcmp+0x28>
 800eefa:	f04f 32ff 	mov.w	r2, #4294967295
 800eefe:	e7f7      	b.n	800eef0 <__mcmp+0x28>

0800ef00 <__mdiff>:
 800ef00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef04:	460c      	mov	r4, r1
 800ef06:	4606      	mov	r6, r0
 800ef08:	4611      	mov	r1, r2
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	4690      	mov	r8, r2
 800ef0e:	f7ff ffdb 	bl	800eec8 <__mcmp>
 800ef12:	1e05      	subs	r5, r0, #0
 800ef14:	d110      	bne.n	800ef38 <__mdiff+0x38>
 800ef16:	4629      	mov	r1, r5
 800ef18:	4630      	mov	r0, r6
 800ef1a:	f7ff fd59 	bl	800e9d0 <_Balloc>
 800ef1e:	b930      	cbnz	r0, 800ef2e <__mdiff+0x2e>
 800ef20:	4b3a      	ldr	r3, [pc, #232]	; (800f00c <__mdiff+0x10c>)
 800ef22:	4602      	mov	r2, r0
 800ef24:	f240 2137 	movw	r1, #567	; 0x237
 800ef28:	4839      	ldr	r0, [pc, #228]	; (800f010 <__mdiff+0x110>)
 800ef2a:	f000 fcd3 	bl	800f8d4 <__assert_func>
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ef34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef38:	bfa4      	itt	ge
 800ef3a:	4643      	movge	r3, r8
 800ef3c:	46a0      	movge	r8, r4
 800ef3e:	4630      	mov	r0, r6
 800ef40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ef44:	bfa6      	itte	ge
 800ef46:	461c      	movge	r4, r3
 800ef48:	2500      	movge	r5, #0
 800ef4a:	2501      	movlt	r5, #1
 800ef4c:	f7ff fd40 	bl	800e9d0 <_Balloc>
 800ef50:	b920      	cbnz	r0, 800ef5c <__mdiff+0x5c>
 800ef52:	4b2e      	ldr	r3, [pc, #184]	; (800f00c <__mdiff+0x10c>)
 800ef54:	4602      	mov	r2, r0
 800ef56:	f240 2145 	movw	r1, #581	; 0x245
 800ef5a:	e7e5      	b.n	800ef28 <__mdiff+0x28>
 800ef5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ef60:	6926      	ldr	r6, [r4, #16]
 800ef62:	60c5      	str	r5, [r0, #12]
 800ef64:	f104 0914 	add.w	r9, r4, #20
 800ef68:	f108 0514 	add.w	r5, r8, #20
 800ef6c:	f100 0e14 	add.w	lr, r0, #20
 800ef70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ef74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ef78:	f108 0210 	add.w	r2, r8, #16
 800ef7c:	46f2      	mov	sl, lr
 800ef7e:	2100      	movs	r1, #0
 800ef80:	f859 3b04 	ldr.w	r3, [r9], #4
 800ef84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ef88:	fa11 f88b 	uxtah	r8, r1, fp
 800ef8c:	b299      	uxth	r1, r3
 800ef8e:	0c1b      	lsrs	r3, r3, #16
 800ef90:	eba8 0801 	sub.w	r8, r8, r1
 800ef94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ef98:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ef9c:	fa1f f888 	uxth.w	r8, r8
 800efa0:	1419      	asrs	r1, r3, #16
 800efa2:	454e      	cmp	r6, r9
 800efa4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800efa8:	f84a 3b04 	str.w	r3, [sl], #4
 800efac:	d8e8      	bhi.n	800ef80 <__mdiff+0x80>
 800efae:	1b33      	subs	r3, r6, r4
 800efb0:	3b15      	subs	r3, #21
 800efb2:	f023 0303 	bic.w	r3, r3, #3
 800efb6:	3304      	adds	r3, #4
 800efb8:	3415      	adds	r4, #21
 800efba:	42a6      	cmp	r6, r4
 800efbc:	bf38      	it	cc
 800efbe:	2304      	movcc	r3, #4
 800efc0:	441d      	add	r5, r3
 800efc2:	4473      	add	r3, lr
 800efc4:	469e      	mov	lr, r3
 800efc6:	462e      	mov	r6, r5
 800efc8:	4566      	cmp	r6, ip
 800efca:	d30e      	bcc.n	800efea <__mdiff+0xea>
 800efcc:	f10c 0203 	add.w	r2, ip, #3
 800efd0:	1b52      	subs	r2, r2, r5
 800efd2:	f022 0203 	bic.w	r2, r2, #3
 800efd6:	3d03      	subs	r5, #3
 800efd8:	45ac      	cmp	ip, r5
 800efda:	bf38      	it	cc
 800efdc:	2200      	movcc	r2, #0
 800efde:	4413      	add	r3, r2
 800efe0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800efe4:	b17a      	cbz	r2, 800f006 <__mdiff+0x106>
 800efe6:	6107      	str	r7, [r0, #16]
 800efe8:	e7a4      	b.n	800ef34 <__mdiff+0x34>
 800efea:	f856 8b04 	ldr.w	r8, [r6], #4
 800efee:	fa11 f288 	uxtah	r2, r1, r8
 800eff2:	1414      	asrs	r4, r2, #16
 800eff4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eff8:	b292      	uxth	r2, r2
 800effa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800effe:	f84e 2b04 	str.w	r2, [lr], #4
 800f002:	1421      	asrs	r1, r4, #16
 800f004:	e7e0      	b.n	800efc8 <__mdiff+0xc8>
 800f006:	3f01      	subs	r7, #1
 800f008:	e7ea      	b.n	800efe0 <__mdiff+0xe0>
 800f00a:	bf00      	nop
 800f00c:	0800fbe0 	.word	0x0800fbe0
 800f010:	0800fbf1 	.word	0x0800fbf1

0800f014 <__d2b>:
 800f014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f018:	460f      	mov	r7, r1
 800f01a:	2101      	movs	r1, #1
 800f01c:	ec59 8b10 	vmov	r8, r9, d0
 800f020:	4616      	mov	r6, r2
 800f022:	f7ff fcd5 	bl	800e9d0 <_Balloc>
 800f026:	4604      	mov	r4, r0
 800f028:	b930      	cbnz	r0, 800f038 <__d2b+0x24>
 800f02a:	4602      	mov	r2, r0
 800f02c:	4b24      	ldr	r3, [pc, #144]	; (800f0c0 <__d2b+0xac>)
 800f02e:	4825      	ldr	r0, [pc, #148]	; (800f0c4 <__d2b+0xb0>)
 800f030:	f240 310f 	movw	r1, #783	; 0x30f
 800f034:	f000 fc4e 	bl	800f8d4 <__assert_func>
 800f038:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f03c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f040:	bb2d      	cbnz	r5, 800f08e <__d2b+0x7a>
 800f042:	9301      	str	r3, [sp, #4]
 800f044:	f1b8 0300 	subs.w	r3, r8, #0
 800f048:	d026      	beq.n	800f098 <__d2b+0x84>
 800f04a:	4668      	mov	r0, sp
 800f04c:	9300      	str	r3, [sp, #0]
 800f04e:	f7ff fd87 	bl	800eb60 <__lo0bits>
 800f052:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f056:	b1e8      	cbz	r0, 800f094 <__d2b+0x80>
 800f058:	f1c0 0320 	rsb	r3, r0, #32
 800f05c:	fa02 f303 	lsl.w	r3, r2, r3
 800f060:	430b      	orrs	r3, r1
 800f062:	40c2      	lsrs	r2, r0
 800f064:	6163      	str	r3, [r4, #20]
 800f066:	9201      	str	r2, [sp, #4]
 800f068:	9b01      	ldr	r3, [sp, #4]
 800f06a:	61a3      	str	r3, [r4, #24]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	bf14      	ite	ne
 800f070:	2202      	movne	r2, #2
 800f072:	2201      	moveq	r2, #1
 800f074:	6122      	str	r2, [r4, #16]
 800f076:	b1bd      	cbz	r5, 800f0a8 <__d2b+0x94>
 800f078:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f07c:	4405      	add	r5, r0
 800f07e:	603d      	str	r5, [r7, #0]
 800f080:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f084:	6030      	str	r0, [r6, #0]
 800f086:	4620      	mov	r0, r4
 800f088:	b003      	add	sp, #12
 800f08a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f08e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f092:	e7d6      	b.n	800f042 <__d2b+0x2e>
 800f094:	6161      	str	r1, [r4, #20]
 800f096:	e7e7      	b.n	800f068 <__d2b+0x54>
 800f098:	a801      	add	r0, sp, #4
 800f09a:	f7ff fd61 	bl	800eb60 <__lo0bits>
 800f09e:	9b01      	ldr	r3, [sp, #4]
 800f0a0:	6163      	str	r3, [r4, #20]
 800f0a2:	3020      	adds	r0, #32
 800f0a4:	2201      	movs	r2, #1
 800f0a6:	e7e5      	b.n	800f074 <__d2b+0x60>
 800f0a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f0ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f0b0:	6038      	str	r0, [r7, #0]
 800f0b2:	6918      	ldr	r0, [r3, #16]
 800f0b4:	f7ff fd34 	bl	800eb20 <__hi0bits>
 800f0b8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f0bc:	e7e2      	b.n	800f084 <__d2b+0x70>
 800f0be:	bf00      	nop
 800f0c0:	0800fbe0 	.word	0x0800fbe0
 800f0c4:	0800fbf1 	.word	0x0800fbf1

0800f0c8 <__ssputs_r>:
 800f0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0cc:	688e      	ldr	r6, [r1, #8]
 800f0ce:	461f      	mov	r7, r3
 800f0d0:	42be      	cmp	r6, r7
 800f0d2:	680b      	ldr	r3, [r1, #0]
 800f0d4:	4682      	mov	sl, r0
 800f0d6:	460c      	mov	r4, r1
 800f0d8:	4690      	mov	r8, r2
 800f0da:	d82c      	bhi.n	800f136 <__ssputs_r+0x6e>
 800f0dc:	898a      	ldrh	r2, [r1, #12]
 800f0de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f0e2:	d026      	beq.n	800f132 <__ssputs_r+0x6a>
 800f0e4:	6965      	ldr	r5, [r4, #20]
 800f0e6:	6909      	ldr	r1, [r1, #16]
 800f0e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0ec:	eba3 0901 	sub.w	r9, r3, r1
 800f0f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0f4:	1c7b      	adds	r3, r7, #1
 800f0f6:	444b      	add	r3, r9
 800f0f8:	106d      	asrs	r5, r5, #1
 800f0fa:	429d      	cmp	r5, r3
 800f0fc:	bf38      	it	cc
 800f0fe:	461d      	movcc	r5, r3
 800f100:	0553      	lsls	r3, r2, #21
 800f102:	d527      	bpl.n	800f154 <__ssputs_r+0x8c>
 800f104:	4629      	mov	r1, r5
 800f106:	f7ff fbd7 	bl	800e8b8 <_malloc_r>
 800f10a:	4606      	mov	r6, r0
 800f10c:	b360      	cbz	r0, 800f168 <__ssputs_r+0xa0>
 800f10e:	6921      	ldr	r1, [r4, #16]
 800f110:	464a      	mov	r2, r9
 800f112:	f000 fbd1 	bl	800f8b8 <memcpy>
 800f116:	89a3      	ldrh	r3, [r4, #12]
 800f118:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f11c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f120:	81a3      	strh	r3, [r4, #12]
 800f122:	6126      	str	r6, [r4, #16]
 800f124:	6165      	str	r5, [r4, #20]
 800f126:	444e      	add	r6, r9
 800f128:	eba5 0509 	sub.w	r5, r5, r9
 800f12c:	6026      	str	r6, [r4, #0]
 800f12e:	60a5      	str	r5, [r4, #8]
 800f130:	463e      	mov	r6, r7
 800f132:	42be      	cmp	r6, r7
 800f134:	d900      	bls.n	800f138 <__ssputs_r+0x70>
 800f136:	463e      	mov	r6, r7
 800f138:	6820      	ldr	r0, [r4, #0]
 800f13a:	4632      	mov	r2, r6
 800f13c:	4641      	mov	r1, r8
 800f13e:	f000 fb6f 	bl	800f820 <memmove>
 800f142:	68a3      	ldr	r3, [r4, #8]
 800f144:	1b9b      	subs	r3, r3, r6
 800f146:	60a3      	str	r3, [r4, #8]
 800f148:	6823      	ldr	r3, [r4, #0]
 800f14a:	4433      	add	r3, r6
 800f14c:	6023      	str	r3, [r4, #0]
 800f14e:	2000      	movs	r0, #0
 800f150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f154:	462a      	mov	r2, r5
 800f156:	f000 fc03 	bl	800f960 <_realloc_r>
 800f15a:	4606      	mov	r6, r0
 800f15c:	2800      	cmp	r0, #0
 800f15e:	d1e0      	bne.n	800f122 <__ssputs_r+0x5a>
 800f160:	6921      	ldr	r1, [r4, #16]
 800f162:	4650      	mov	r0, sl
 800f164:	f7ff fb34 	bl	800e7d0 <_free_r>
 800f168:	230c      	movs	r3, #12
 800f16a:	f8ca 3000 	str.w	r3, [sl]
 800f16e:	89a3      	ldrh	r3, [r4, #12]
 800f170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f174:	81a3      	strh	r3, [r4, #12]
 800f176:	f04f 30ff 	mov.w	r0, #4294967295
 800f17a:	e7e9      	b.n	800f150 <__ssputs_r+0x88>

0800f17c <_svfiprintf_r>:
 800f17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f180:	4698      	mov	r8, r3
 800f182:	898b      	ldrh	r3, [r1, #12]
 800f184:	061b      	lsls	r3, r3, #24
 800f186:	b09d      	sub	sp, #116	; 0x74
 800f188:	4607      	mov	r7, r0
 800f18a:	460d      	mov	r5, r1
 800f18c:	4614      	mov	r4, r2
 800f18e:	d50e      	bpl.n	800f1ae <_svfiprintf_r+0x32>
 800f190:	690b      	ldr	r3, [r1, #16]
 800f192:	b963      	cbnz	r3, 800f1ae <_svfiprintf_r+0x32>
 800f194:	2140      	movs	r1, #64	; 0x40
 800f196:	f7ff fb8f 	bl	800e8b8 <_malloc_r>
 800f19a:	6028      	str	r0, [r5, #0]
 800f19c:	6128      	str	r0, [r5, #16]
 800f19e:	b920      	cbnz	r0, 800f1aa <_svfiprintf_r+0x2e>
 800f1a0:	230c      	movs	r3, #12
 800f1a2:	603b      	str	r3, [r7, #0]
 800f1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a8:	e0d0      	b.n	800f34c <_svfiprintf_r+0x1d0>
 800f1aa:	2340      	movs	r3, #64	; 0x40
 800f1ac:	616b      	str	r3, [r5, #20]
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800f1b2:	2320      	movs	r3, #32
 800f1b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1bc:	2330      	movs	r3, #48	; 0x30
 800f1be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f364 <_svfiprintf_r+0x1e8>
 800f1c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1c6:	f04f 0901 	mov.w	r9, #1
 800f1ca:	4623      	mov	r3, r4
 800f1cc:	469a      	mov	sl, r3
 800f1ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1d2:	b10a      	cbz	r2, 800f1d8 <_svfiprintf_r+0x5c>
 800f1d4:	2a25      	cmp	r2, #37	; 0x25
 800f1d6:	d1f9      	bne.n	800f1cc <_svfiprintf_r+0x50>
 800f1d8:	ebba 0b04 	subs.w	fp, sl, r4
 800f1dc:	d00b      	beq.n	800f1f6 <_svfiprintf_r+0x7a>
 800f1de:	465b      	mov	r3, fp
 800f1e0:	4622      	mov	r2, r4
 800f1e2:	4629      	mov	r1, r5
 800f1e4:	4638      	mov	r0, r7
 800f1e6:	f7ff ff6f 	bl	800f0c8 <__ssputs_r>
 800f1ea:	3001      	adds	r0, #1
 800f1ec:	f000 80a9 	beq.w	800f342 <_svfiprintf_r+0x1c6>
 800f1f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1f2:	445a      	add	r2, fp
 800f1f4:	9209      	str	r2, [sp, #36]	; 0x24
 800f1f6:	f89a 3000 	ldrb.w	r3, [sl]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	f000 80a1 	beq.w	800f342 <_svfiprintf_r+0x1c6>
 800f200:	2300      	movs	r3, #0
 800f202:	f04f 32ff 	mov.w	r2, #4294967295
 800f206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f20a:	f10a 0a01 	add.w	sl, sl, #1
 800f20e:	9304      	str	r3, [sp, #16]
 800f210:	9307      	str	r3, [sp, #28]
 800f212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f216:	931a      	str	r3, [sp, #104]	; 0x68
 800f218:	4654      	mov	r4, sl
 800f21a:	2205      	movs	r2, #5
 800f21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f220:	4850      	ldr	r0, [pc, #320]	; (800f364 <_svfiprintf_r+0x1e8>)
 800f222:	f7f1 f865 	bl	80002f0 <memchr>
 800f226:	9a04      	ldr	r2, [sp, #16]
 800f228:	b9d8      	cbnz	r0, 800f262 <_svfiprintf_r+0xe6>
 800f22a:	06d0      	lsls	r0, r2, #27
 800f22c:	bf44      	itt	mi
 800f22e:	2320      	movmi	r3, #32
 800f230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f234:	0711      	lsls	r1, r2, #28
 800f236:	bf44      	itt	mi
 800f238:	232b      	movmi	r3, #43	; 0x2b
 800f23a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f23e:	f89a 3000 	ldrb.w	r3, [sl]
 800f242:	2b2a      	cmp	r3, #42	; 0x2a
 800f244:	d015      	beq.n	800f272 <_svfiprintf_r+0xf6>
 800f246:	9a07      	ldr	r2, [sp, #28]
 800f248:	4654      	mov	r4, sl
 800f24a:	2000      	movs	r0, #0
 800f24c:	f04f 0c0a 	mov.w	ip, #10
 800f250:	4621      	mov	r1, r4
 800f252:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f256:	3b30      	subs	r3, #48	; 0x30
 800f258:	2b09      	cmp	r3, #9
 800f25a:	d94d      	bls.n	800f2f8 <_svfiprintf_r+0x17c>
 800f25c:	b1b0      	cbz	r0, 800f28c <_svfiprintf_r+0x110>
 800f25e:	9207      	str	r2, [sp, #28]
 800f260:	e014      	b.n	800f28c <_svfiprintf_r+0x110>
 800f262:	eba0 0308 	sub.w	r3, r0, r8
 800f266:	fa09 f303 	lsl.w	r3, r9, r3
 800f26a:	4313      	orrs	r3, r2
 800f26c:	9304      	str	r3, [sp, #16]
 800f26e:	46a2      	mov	sl, r4
 800f270:	e7d2      	b.n	800f218 <_svfiprintf_r+0x9c>
 800f272:	9b03      	ldr	r3, [sp, #12]
 800f274:	1d19      	adds	r1, r3, #4
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	9103      	str	r1, [sp, #12]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	bfbb      	ittet	lt
 800f27e:	425b      	neglt	r3, r3
 800f280:	f042 0202 	orrlt.w	r2, r2, #2
 800f284:	9307      	strge	r3, [sp, #28]
 800f286:	9307      	strlt	r3, [sp, #28]
 800f288:	bfb8      	it	lt
 800f28a:	9204      	strlt	r2, [sp, #16]
 800f28c:	7823      	ldrb	r3, [r4, #0]
 800f28e:	2b2e      	cmp	r3, #46	; 0x2e
 800f290:	d10c      	bne.n	800f2ac <_svfiprintf_r+0x130>
 800f292:	7863      	ldrb	r3, [r4, #1]
 800f294:	2b2a      	cmp	r3, #42	; 0x2a
 800f296:	d134      	bne.n	800f302 <_svfiprintf_r+0x186>
 800f298:	9b03      	ldr	r3, [sp, #12]
 800f29a:	1d1a      	adds	r2, r3, #4
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	9203      	str	r2, [sp, #12]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	bfb8      	it	lt
 800f2a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2a8:	3402      	adds	r4, #2
 800f2aa:	9305      	str	r3, [sp, #20]
 800f2ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f374 <_svfiprintf_r+0x1f8>
 800f2b0:	7821      	ldrb	r1, [r4, #0]
 800f2b2:	2203      	movs	r2, #3
 800f2b4:	4650      	mov	r0, sl
 800f2b6:	f7f1 f81b 	bl	80002f0 <memchr>
 800f2ba:	b138      	cbz	r0, 800f2cc <_svfiprintf_r+0x150>
 800f2bc:	9b04      	ldr	r3, [sp, #16]
 800f2be:	eba0 000a 	sub.w	r0, r0, sl
 800f2c2:	2240      	movs	r2, #64	; 0x40
 800f2c4:	4082      	lsls	r2, r0
 800f2c6:	4313      	orrs	r3, r2
 800f2c8:	3401      	adds	r4, #1
 800f2ca:	9304      	str	r3, [sp, #16]
 800f2cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2d0:	4825      	ldr	r0, [pc, #148]	; (800f368 <_svfiprintf_r+0x1ec>)
 800f2d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2d6:	2206      	movs	r2, #6
 800f2d8:	f7f1 f80a 	bl	80002f0 <memchr>
 800f2dc:	2800      	cmp	r0, #0
 800f2de:	d038      	beq.n	800f352 <_svfiprintf_r+0x1d6>
 800f2e0:	4b22      	ldr	r3, [pc, #136]	; (800f36c <_svfiprintf_r+0x1f0>)
 800f2e2:	bb1b      	cbnz	r3, 800f32c <_svfiprintf_r+0x1b0>
 800f2e4:	9b03      	ldr	r3, [sp, #12]
 800f2e6:	3307      	adds	r3, #7
 800f2e8:	f023 0307 	bic.w	r3, r3, #7
 800f2ec:	3308      	adds	r3, #8
 800f2ee:	9303      	str	r3, [sp, #12]
 800f2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2f2:	4433      	add	r3, r6
 800f2f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f2f6:	e768      	b.n	800f1ca <_svfiprintf_r+0x4e>
 800f2f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2fc:	460c      	mov	r4, r1
 800f2fe:	2001      	movs	r0, #1
 800f300:	e7a6      	b.n	800f250 <_svfiprintf_r+0xd4>
 800f302:	2300      	movs	r3, #0
 800f304:	3401      	adds	r4, #1
 800f306:	9305      	str	r3, [sp, #20]
 800f308:	4619      	mov	r1, r3
 800f30a:	f04f 0c0a 	mov.w	ip, #10
 800f30e:	4620      	mov	r0, r4
 800f310:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f314:	3a30      	subs	r2, #48	; 0x30
 800f316:	2a09      	cmp	r2, #9
 800f318:	d903      	bls.n	800f322 <_svfiprintf_r+0x1a6>
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d0c6      	beq.n	800f2ac <_svfiprintf_r+0x130>
 800f31e:	9105      	str	r1, [sp, #20]
 800f320:	e7c4      	b.n	800f2ac <_svfiprintf_r+0x130>
 800f322:	fb0c 2101 	mla	r1, ip, r1, r2
 800f326:	4604      	mov	r4, r0
 800f328:	2301      	movs	r3, #1
 800f32a:	e7f0      	b.n	800f30e <_svfiprintf_r+0x192>
 800f32c:	ab03      	add	r3, sp, #12
 800f32e:	9300      	str	r3, [sp, #0]
 800f330:	462a      	mov	r2, r5
 800f332:	4b0f      	ldr	r3, [pc, #60]	; (800f370 <_svfiprintf_r+0x1f4>)
 800f334:	a904      	add	r1, sp, #16
 800f336:	4638      	mov	r0, r7
 800f338:	f7fd fe02 	bl	800cf40 <_printf_float>
 800f33c:	1c42      	adds	r2, r0, #1
 800f33e:	4606      	mov	r6, r0
 800f340:	d1d6      	bne.n	800f2f0 <_svfiprintf_r+0x174>
 800f342:	89ab      	ldrh	r3, [r5, #12]
 800f344:	065b      	lsls	r3, r3, #25
 800f346:	f53f af2d 	bmi.w	800f1a4 <_svfiprintf_r+0x28>
 800f34a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f34c:	b01d      	add	sp, #116	; 0x74
 800f34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f352:	ab03      	add	r3, sp, #12
 800f354:	9300      	str	r3, [sp, #0]
 800f356:	462a      	mov	r2, r5
 800f358:	4b05      	ldr	r3, [pc, #20]	; (800f370 <_svfiprintf_r+0x1f4>)
 800f35a:	a904      	add	r1, sp, #16
 800f35c:	4638      	mov	r0, r7
 800f35e:	f7fe f877 	bl	800d450 <_printf_i>
 800f362:	e7eb      	b.n	800f33c <_svfiprintf_r+0x1c0>
 800f364:	0800fd4c 	.word	0x0800fd4c
 800f368:	0800fd56 	.word	0x0800fd56
 800f36c:	0800cf41 	.word	0x0800cf41
 800f370:	0800f0c9 	.word	0x0800f0c9
 800f374:	0800fd52 	.word	0x0800fd52

0800f378 <__sfputc_r>:
 800f378:	6893      	ldr	r3, [r2, #8]
 800f37a:	3b01      	subs	r3, #1
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	b410      	push	{r4}
 800f380:	6093      	str	r3, [r2, #8]
 800f382:	da08      	bge.n	800f396 <__sfputc_r+0x1e>
 800f384:	6994      	ldr	r4, [r2, #24]
 800f386:	42a3      	cmp	r3, r4
 800f388:	db01      	blt.n	800f38e <__sfputc_r+0x16>
 800f38a:	290a      	cmp	r1, #10
 800f38c:	d103      	bne.n	800f396 <__sfputc_r+0x1e>
 800f38e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f392:	f7fe bb12 	b.w	800d9ba <__swbuf_r>
 800f396:	6813      	ldr	r3, [r2, #0]
 800f398:	1c58      	adds	r0, r3, #1
 800f39a:	6010      	str	r0, [r2, #0]
 800f39c:	7019      	strb	r1, [r3, #0]
 800f39e:	4608      	mov	r0, r1
 800f3a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3a4:	4770      	bx	lr

0800f3a6 <__sfputs_r>:
 800f3a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3a8:	4606      	mov	r6, r0
 800f3aa:	460f      	mov	r7, r1
 800f3ac:	4614      	mov	r4, r2
 800f3ae:	18d5      	adds	r5, r2, r3
 800f3b0:	42ac      	cmp	r4, r5
 800f3b2:	d101      	bne.n	800f3b8 <__sfputs_r+0x12>
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	e007      	b.n	800f3c8 <__sfputs_r+0x22>
 800f3b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3bc:	463a      	mov	r2, r7
 800f3be:	4630      	mov	r0, r6
 800f3c0:	f7ff ffda 	bl	800f378 <__sfputc_r>
 800f3c4:	1c43      	adds	r3, r0, #1
 800f3c6:	d1f3      	bne.n	800f3b0 <__sfputs_r+0xa>
 800f3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f3cc <_vfiprintf_r>:
 800f3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d0:	460d      	mov	r5, r1
 800f3d2:	b09d      	sub	sp, #116	; 0x74
 800f3d4:	4614      	mov	r4, r2
 800f3d6:	4698      	mov	r8, r3
 800f3d8:	4606      	mov	r6, r0
 800f3da:	b118      	cbz	r0, 800f3e4 <_vfiprintf_r+0x18>
 800f3dc:	6a03      	ldr	r3, [r0, #32]
 800f3de:	b90b      	cbnz	r3, 800f3e4 <_vfiprintf_r+0x18>
 800f3e0:	f7fe f9e4 	bl	800d7ac <__sinit>
 800f3e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3e6:	07d9      	lsls	r1, r3, #31
 800f3e8:	d405      	bmi.n	800f3f6 <_vfiprintf_r+0x2a>
 800f3ea:	89ab      	ldrh	r3, [r5, #12]
 800f3ec:	059a      	lsls	r2, r3, #22
 800f3ee:	d402      	bmi.n	800f3f6 <_vfiprintf_r+0x2a>
 800f3f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3f2:	f7fe fbf4 	bl	800dbde <__retarget_lock_acquire_recursive>
 800f3f6:	89ab      	ldrh	r3, [r5, #12]
 800f3f8:	071b      	lsls	r3, r3, #28
 800f3fa:	d501      	bpl.n	800f400 <_vfiprintf_r+0x34>
 800f3fc:	692b      	ldr	r3, [r5, #16]
 800f3fe:	b99b      	cbnz	r3, 800f428 <_vfiprintf_r+0x5c>
 800f400:	4629      	mov	r1, r5
 800f402:	4630      	mov	r0, r6
 800f404:	f7fe fb16 	bl	800da34 <__swsetup_r>
 800f408:	b170      	cbz	r0, 800f428 <_vfiprintf_r+0x5c>
 800f40a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f40c:	07dc      	lsls	r4, r3, #31
 800f40e:	d504      	bpl.n	800f41a <_vfiprintf_r+0x4e>
 800f410:	f04f 30ff 	mov.w	r0, #4294967295
 800f414:	b01d      	add	sp, #116	; 0x74
 800f416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f41a:	89ab      	ldrh	r3, [r5, #12]
 800f41c:	0598      	lsls	r0, r3, #22
 800f41e:	d4f7      	bmi.n	800f410 <_vfiprintf_r+0x44>
 800f420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f422:	f7fe fbdd 	bl	800dbe0 <__retarget_lock_release_recursive>
 800f426:	e7f3      	b.n	800f410 <_vfiprintf_r+0x44>
 800f428:	2300      	movs	r3, #0
 800f42a:	9309      	str	r3, [sp, #36]	; 0x24
 800f42c:	2320      	movs	r3, #32
 800f42e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f432:	f8cd 800c 	str.w	r8, [sp, #12]
 800f436:	2330      	movs	r3, #48	; 0x30
 800f438:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f5ec <_vfiprintf_r+0x220>
 800f43c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f440:	f04f 0901 	mov.w	r9, #1
 800f444:	4623      	mov	r3, r4
 800f446:	469a      	mov	sl, r3
 800f448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f44c:	b10a      	cbz	r2, 800f452 <_vfiprintf_r+0x86>
 800f44e:	2a25      	cmp	r2, #37	; 0x25
 800f450:	d1f9      	bne.n	800f446 <_vfiprintf_r+0x7a>
 800f452:	ebba 0b04 	subs.w	fp, sl, r4
 800f456:	d00b      	beq.n	800f470 <_vfiprintf_r+0xa4>
 800f458:	465b      	mov	r3, fp
 800f45a:	4622      	mov	r2, r4
 800f45c:	4629      	mov	r1, r5
 800f45e:	4630      	mov	r0, r6
 800f460:	f7ff ffa1 	bl	800f3a6 <__sfputs_r>
 800f464:	3001      	adds	r0, #1
 800f466:	f000 80a9 	beq.w	800f5bc <_vfiprintf_r+0x1f0>
 800f46a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f46c:	445a      	add	r2, fp
 800f46e:	9209      	str	r2, [sp, #36]	; 0x24
 800f470:	f89a 3000 	ldrb.w	r3, [sl]
 800f474:	2b00      	cmp	r3, #0
 800f476:	f000 80a1 	beq.w	800f5bc <_vfiprintf_r+0x1f0>
 800f47a:	2300      	movs	r3, #0
 800f47c:	f04f 32ff 	mov.w	r2, #4294967295
 800f480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f484:	f10a 0a01 	add.w	sl, sl, #1
 800f488:	9304      	str	r3, [sp, #16]
 800f48a:	9307      	str	r3, [sp, #28]
 800f48c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f490:	931a      	str	r3, [sp, #104]	; 0x68
 800f492:	4654      	mov	r4, sl
 800f494:	2205      	movs	r2, #5
 800f496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f49a:	4854      	ldr	r0, [pc, #336]	; (800f5ec <_vfiprintf_r+0x220>)
 800f49c:	f7f0 ff28 	bl	80002f0 <memchr>
 800f4a0:	9a04      	ldr	r2, [sp, #16]
 800f4a2:	b9d8      	cbnz	r0, 800f4dc <_vfiprintf_r+0x110>
 800f4a4:	06d1      	lsls	r1, r2, #27
 800f4a6:	bf44      	itt	mi
 800f4a8:	2320      	movmi	r3, #32
 800f4aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4ae:	0713      	lsls	r3, r2, #28
 800f4b0:	bf44      	itt	mi
 800f4b2:	232b      	movmi	r3, #43	; 0x2b
 800f4b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4b8:	f89a 3000 	ldrb.w	r3, [sl]
 800f4bc:	2b2a      	cmp	r3, #42	; 0x2a
 800f4be:	d015      	beq.n	800f4ec <_vfiprintf_r+0x120>
 800f4c0:	9a07      	ldr	r2, [sp, #28]
 800f4c2:	4654      	mov	r4, sl
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	f04f 0c0a 	mov.w	ip, #10
 800f4ca:	4621      	mov	r1, r4
 800f4cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4d0:	3b30      	subs	r3, #48	; 0x30
 800f4d2:	2b09      	cmp	r3, #9
 800f4d4:	d94d      	bls.n	800f572 <_vfiprintf_r+0x1a6>
 800f4d6:	b1b0      	cbz	r0, 800f506 <_vfiprintf_r+0x13a>
 800f4d8:	9207      	str	r2, [sp, #28]
 800f4da:	e014      	b.n	800f506 <_vfiprintf_r+0x13a>
 800f4dc:	eba0 0308 	sub.w	r3, r0, r8
 800f4e0:	fa09 f303 	lsl.w	r3, r9, r3
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	9304      	str	r3, [sp, #16]
 800f4e8:	46a2      	mov	sl, r4
 800f4ea:	e7d2      	b.n	800f492 <_vfiprintf_r+0xc6>
 800f4ec:	9b03      	ldr	r3, [sp, #12]
 800f4ee:	1d19      	adds	r1, r3, #4
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	9103      	str	r1, [sp, #12]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	bfbb      	ittet	lt
 800f4f8:	425b      	neglt	r3, r3
 800f4fa:	f042 0202 	orrlt.w	r2, r2, #2
 800f4fe:	9307      	strge	r3, [sp, #28]
 800f500:	9307      	strlt	r3, [sp, #28]
 800f502:	bfb8      	it	lt
 800f504:	9204      	strlt	r2, [sp, #16]
 800f506:	7823      	ldrb	r3, [r4, #0]
 800f508:	2b2e      	cmp	r3, #46	; 0x2e
 800f50a:	d10c      	bne.n	800f526 <_vfiprintf_r+0x15a>
 800f50c:	7863      	ldrb	r3, [r4, #1]
 800f50e:	2b2a      	cmp	r3, #42	; 0x2a
 800f510:	d134      	bne.n	800f57c <_vfiprintf_r+0x1b0>
 800f512:	9b03      	ldr	r3, [sp, #12]
 800f514:	1d1a      	adds	r2, r3, #4
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	9203      	str	r2, [sp, #12]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	bfb8      	it	lt
 800f51e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f522:	3402      	adds	r4, #2
 800f524:	9305      	str	r3, [sp, #20]
 800f526:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f5fc <_vfiprintf_r+0x230>
 800f52a:	7821      	ldrb	r1, [r4, #0]
 800f52c:	2203      	movs	r2, #3
 800f52e:	4650      	mov	r0, sl
 800f530:	f7f0 fede 	bl	80002f0 <memchr>
 800f534:	b138      	cbz	r0, 800f546 <_vfiprintf_r+0x17a>
 800f536:	9b04      	ldr	r3, [sp, #16]
 800f538:	eba0 000a 	sub.w	r0, r0, sl
 800f53c:	2240      	movs	r2, #64	; 0x40
 800f53e:	4082      	lsls	r2, r0
 800f540:	4313      	orrs	r3, r2
 800f542:	3401      	adds	r4, #1
 800f544:	9304      	str	r3, [sp, #16]
 800f546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f54a:	4829      	ldr	r0, [pc, #164]	; (800f5f0 <_vfiprintf_r+0x224>)
 800f54c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f550:	2206      	movs	r2, #6
 800f552:	f7f0 fecd 	bl	80002f0 <memchr>
 800f556:	2800      	cmp	r0, #0
 800f558:	d03f      	beq.n	800f5da <_vfiprintf_r+0x20e>
 800f55a:	4b26      	ldr	r3, [pc, #152]	; (800f5f4 <_vfiprintf_r+0x228>)
 800f55c:	bb1b      	cbnz	r3, 800f5a6 <_vfiprintf_r+0x1da>
 800f55e:	9b03      	ldr	r3, [sp, #12]
 800f560:	3307      	adds	r3, #7
 800f562:	f023 0307 	bic.w	r3, r3, #7
 800f566:	3308      	adds	r3, #8
 800f568:	9303      	str	r3, [sp, #12]
 800f56a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f56c:	443b      	add	r3, r7
 800f56e:	9309      	str	r3, [sp, #36]	; 0x24
 800f570:	e768      	b.n	800f444 <_vfiprintf_r+0x78>
 800f572:	fb0c 3202 	mla	r2, ip, r2, r3
 800f576:	460c      	mov	r4, r1
 800f578:	2001      	movs	r0, #1
 800f57a:	e7a6      	b.n	800f4ca <_vfiprintf_r+0xfe>
 800f57c:	2300      	movs	r3, #0
 800f57e:	3401      	adds	r4, #1
 800f580:	9305      	str	r3, [sp, #20]
 800f582:	4619      	mov	r1, r3
 800f584:	f04f 0c0a 	mov.w	ip, #10
 800f588:	4620      	mov	r0, r4
 800f58a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f58e:	3a30      	subs	r2, #48	; 0x30
 800f590:	2a09      	cmp	r2, #9
 800f592:	d903      	bls.n	800f59c <_vfiprintf_r+0x1d0>
 800f594:	2b00      	cmp	r3, #0
 800f596:	d0c6      	beq.n	800f526 <_vfiprintf_r+0x15a>
 800f598:	9105      	str	r1, [sp, #20]
 800f59a:	e7c4      	b.n	800f526 <_vfiprintf_r+0x15a>
 800f59c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5a0:	4604      	mov	r4, r0
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	e7f0      	b.n	800f588 <_vfiprintf_r+0x1bc>
 800f5a6:	ab03      	add	r3, sp, #12
 800f5a8:	9300      	str	r3, [sp, #0]
 800f5aa:	462a      	mov	r2, r5
 800f5ac:	4b12      	ldr	r3, [pc, #72]	; (800f5f8 <_vfiprintf_r+0x22c>)
 800f5ae:	a904      	add	r1, sp, #16
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	f7fd fcc5 	bl	800cf40 <_printf_float>
 800f5b6:	4607      	mov	r7, r0
 800f5b8:	1c78      	adds	r0, r7, #1
 800f5ba:	d1d6      	bne.n	800f56a <_vfiprintf_r+0x19e>
 800f5bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5be:	07d9      	lsls	r1, r3, #31
 800f5c0:	d405      	bmi.n	800f5ce <_vfiprintf_r+0x202>
 800f5c2:	89ab      	ldrh	r3, [r5, #12]
 800f5c4:	059a      	lsls	r2, r3, #22
 800f5c6:	d402      	bmi.n	800f5ce <_vfiprintf_r+0x202>
 800f5c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5ca:	f7fe fb09 	bl	800dbe0 <__retarget_lock_release_recursive>
 800f5ce:	89ab      	ldrh	r3, [r5, #12]
 800f5d0:	065b      	lsls	r3, r3, #25
 800f5d2:	f53f af1d 	bmi.w	800f410 <_vfiprintf_r+0x44>
 800f5d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5d8:	e71c      	b.n	800f414 <_vfiprintf_r+0x48>
 800f5da:	ab03      	add	r3, sp, #12
 800f5dc:	9300      	str	r3, [sp, #0]
 800f5de:	462a      	mov	r2, r5
 800f5e0:	4b05      	ldr	r3, [pc, #20]	; (800f5f8 <_vfiprintf_r+0x22c>)
 800f5e2:	a904      	add	r1, sp, #16
 800f5e4:	4630      	mov	r0, r6
 800f5e6:	f7fd ff33 	bl	800d450 <_printf_i>
 800f5ea:	e7e4      	b.n	800f5b6 <_vfiprintf_r+0x1ea>
 800f5ec:	0800fd4c 	.word	0x0800fd4c
 800f5f0:	0800fd56 	.word	0x0800fd56
 800f5f4:	0800cf41 	.word	0x0800cf41
 800f5f8:	0800f3a7 	.word	0x0800f3a7
 800f5fc:	0800fd52 	.word	0x0800fd52

0800f600 <__sflush_r>:
 800f600:	898a      	ldrh	r2, [r1, #12]
 800f602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f606:	4605      	mov	r5, r0
 800f608:	0710      	lsls	r0, r2, #28
 800f60a:	460c      	mov	r4, r1
 800f60c:	d458      	bmi.n	800f6c0 <__sflush_r+0xc0>
 800f60e:	684b      	ldr	r3, [r1, #4]
 800f610:	2b00      	cmp	r3, #0
 800f612:	dc05      	bgt.n	800f620 <__sflush_r+0x20>
 800f614:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f616:	2b00      	cmp	r3, #0
 800f618:	dc02      	bgt.n	800f620 <__sflush_r+0x20>
 800f61a:	2000      	movs	r0, #0
 800f61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f622:	2e00      	cmp	r6, #0
 800f624:	d0f9      	beq.n	800f61a <__sflush_r+0x1a>
 800f626:	2300      	movs	r3, #0
 800f628:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f62c:	682f      	ldr	r7, [r5, #0]
 800f62e:	6a21      	ldr	r1, [r4, #32]
 800f630:	602b      	str	r3, [r5, #0]
 800f632:	d032      	beq.n	800f69a <__sflush_r+0x9a>
 800f634:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f636:	89a3      	ldrh	r3, [r4, #12]
 800f638:	075a      	lsls	r2, r3, #29
 800f63a:	d505      	bpl.n	800f648 <__sflush_r+0x48>
 800f63c:	6863      	ldr	r3, [r4, #4]
 800f63e:	1ac0      	subs	r0, r0, r3
 800f640:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f642:	b10b      	cbz	r3, 800f648 <__sflush_r+0x48>
 800f644:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f646:	1ac0      	subs	r0, r0, r3
 800f648:	2300      	movs	r3, #0
 800f64a:	4602      	mov	r2, r0
 800f64c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f64e:	6a21      	ldr	r1, [r4, #32]
 800f650:	4628      	mov	r0, r5
 800f652:	47b0      	blx	r6
 800f654:	1c43      	adds	r3, r0, #1
 800f656:	89a3      	ldrh	r3, [r4, #12]
 800f658:	d106      	bne.n	800f668 <__sflush_r+0x68>
 800f65a:	6829      	ldr	r1, [r5, #0]
 800f65c:	291d      	cmp	r1, #29
 800f65e:	d82b      	bhi.n	800f6b8 <__sflush_r+0xb8>
 800f660:	4a29      	ldr	r2, [pc, #164]	; (800f708 <__sflush_r+0x108>)
 800f662:	410a      	asrs	r2, r1
 800f664:	07d6      	lsls	r6, r2, #31
 800f666:	d427      	bmi.n	800f6b8 <__sflush_r+0xb8>
 800f668:	2200      	movs	r2, #0
 800f66a:	6062      	str	r2, [r4, #4]
 800f66c:	04d9      	lsls	r1, r3, #19
 800f66e:	6922      	ldr	r2, [r4, #16]
 800f670:	6022      	str	r2, [r4, #0]
 800f672:	d504      	bpl.n	800f67e <__sflush_r+0x7e>
 800f674:	1c42      	adds	r2, r0, #1
 800f676:	d101      	bne.n	800f67c <__sflush_r+0x7c>
 800f678:	682b      	ldr	r3, [r5, #0]
 800f67a:	b903      	cbnz	r3, 800f67e <__sflush_r+0x7e>
 800f67c:	6560      	str	r0, [r4, #84]	; 0x54
 800f67e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f680:	602f      	str	r7, [r5, #0]
 800f682:	2900      	cmp	r1, #0
 800f684:	d0c9      	beq.n	800f61a <__sflush_r+0x1a>
 800f686:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f68a:	4299      	cmp	r1, r3
 800f68c:	d002      	beq.n	800f694 <__sflush_r+0x94>
 800f68e:	4628      	mov	r0, r5
 800f690:	f7ff f89e 	bl	800e7d0 <_free_r>
 800f694:	2000      	movs	r0, #0
 800f696:	6360      	str	r0, [r4, #52]	; 0x34
 800f698:	e7c0      	b.n	800f61c <__sflush_r+0x1c>
 800f69a:	2301      	movs	r3, #1
 800f69c:	4628      	mov	r0, r5
 800f69e:	47b0      	blx	r6
 800f6a0:	1c41      	adds	r1, r0, #1
 800f6a2:	d1c8      	bne.n	800f636 <__sflush_r+0x36>
 800f6a4:	682b      	ldr	r3, [r5, #0]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d0c5      	beq.n	800f636 <__sflush_r+0x36>
 800f6aa:	2b1d      	cmp	r3, #29
 800f6ac:	d001      	beq.n	800f6b2 <__sflush_r+0xb2>
 800f6ae:	2b16      	cmp	r3, #22
 800f6b0:	d101      	bne.n	800f6b6 <__sflush_r+0xb6>
 800f6b2:	602f      	str	r7, [r5, #0]
 800f6b4:	e7b1      	b.n	800f61a <__sflush_r+0x1a>
 800f6b6:	89a3      	ldrh	r3, [r4, #12]
 800f6b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6bc:	81a3      	strh	r3, [r4, #12]
 800f6be:	e7ad      	b.n	800f61c <__sflush_r+0x1c>
 800f6c0:	690f      	ldr	r7, [r1, #16]
 800f6c2:	2f00      	cmp	r7, #0
 800f6c4:	d0a9      	beq.n	800f61a <__sflush_r+0x1a>
 800f6c6:	0793      	lsls	r3, r2, #30
 800f6c8:	680e      	ldr	r6, [r1, #0]
 800f6ca:	bf08      	it	eq
 800f6cc:	694b      	ldreq	r3, [r1, #20]
 800f6ce:	600f      	str	r7, [r1, #0]
 800f6d0:	bf18      	it	ne
 800f6d2:	2300      	movne	r3, #0
 800f6d4:	eba6 0807 	sub.w	r8, r6, r7
 800f6d8:	608b      	str	r3, [r1, #8]
 800f6da:	f1b8 0f00 	cmp.w	r8, #0
 800f6de:	dd9c      	ble.n	800f61a <__sflush_r+0x1a>
 800f6e0:	6a21      	ldr	r1, [r4, #32]
 800f6e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f6e4:	4643      	mov	r3, r8
 800f6e6:	463a      	mov	r2, r7
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	47b0      	blx	r6
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	dc06      	bgt.n	800f6fe <__sflush_r+0xfe>
 800f6f0:	89a3      	ldrh	r3, [r4, #12]
 800f6f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6f6:	81a3      	strh	r3, [r4, #12]
 800f6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f6fc:	e78e      	b.n	800f61c <__sflush_r+0x1c>
 800f6fe:	4407      	add	r7, r0
 800f700:	eba8 0800 	sub.w	r8, r8, r0
 800f704:	e7e9      	b.n	800f6da <__sflush_r+0xda>
 800f706:	bf00      	nop
 800f708:	dfbffffe 	.word	0xdfbffffe

0800f70c <_fflush_r>:
 800f70c:	b538      	push	{r3, r4, r5, lr}
 800f70e:	690b      	ldr	r3, [r1, #16]
 800f710:	4605      	mov	r5, r0
 800f712:	460c      	mov	r4, r1
 800f714:	b913      	cbnz	r3, 800f71c <_fflush_r+0x10>
 800f716:	2500      	movs	r5, #0
 800f718:	4628      	mov	r0, r5
 800f71a:	bd38      	pop	{r3, r4, r5, pc}
 800f71c:	b118      	cbz	r0, 800f726 <_fflush_r+0x1a>
 800f71e:	6a03      	ldr	r3, [r0, #32]
 800f720:	b90b      	cbnz	r3, 800f726 <_fflush_r+0x1a>
 800f722:	f7fe f843 	bl	800d7ac <__sinit>
 800f726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d0f3      	beq.n	800f716 <_fflush_r+0xa>
 800f72e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f730:	07d0      	lsls	r0, r2, #31
 800f732:	d404      	bmi.n	800f73e <_fflush_r+0x32>
 800f734:	0599      	lsls	r1, r3, #22
 800f736:	d402      	bmi.n	800f73e <_fflush_r+0x32>
 800f738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f73a:	f7fe fa50 	bl	800dbde <__retarget_lock_acquire_recursive>
 800f73e:	4628      	mov	r0, r5
 800f740:	4621      	mov	r1, r4
 800f742:	f7ff ff5d 	bl	800f600 <__sflush_r>
 800f746:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f748:	07da      	lsls	r2, r3, #31
 800f74a:	4605      	mov	r5, r0
 800f74c:	d4e4      	bmi.n	800f718 <_fflush_r+0xc>
 800f74e:	89a3      	ldrh	r3, [r4, #12]
 800f750:	059b      	lsls	r3, r3, #22
 800f752:	d4e1      	bmi.n	800f718 <_fflush_r+0xc>
 800f754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f756:	f7fe fa43 	bl	800dbe0 <__retarget_lock_release_recursive>
 800f75a:	e7dd      	b.n	800f718 <_fflush_r+0xc>

0800f75c <__swhatbuf_r>:
 800f75c:	b570      	push	{r4, r5, r6, lr}
 800f75e:	460c      	mov	r4, r1
 800f760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f764:	2900      	cmp	r1, #0
 800f766:	b096      	sub	sp, #88	; 0x58
 800f768:	4615      	mov	r5, r2
 800f76a:	461e      	mov	r6, r3
 800f76c:	da0d      	bge.n	800f78a <__swhatbuf_r+0x2e>
 800f76e:	89a3      	ldrh	r3, [r4, #12]
 800f770:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f774:	f04f 0100 	mov.w	r1, #0
 800f778:	bf0c      	ite	eq
 800f77a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f77e:	2340      	movne	r3, #64	; 0x40
 800f780:	2000      	movs	r0, #0
 800f782:	6031      	str	r1, [r6, #0]
 800f784:	602b      	str	r3, [r5, #0]
 800f786:	b016      	add	sp, #88	; 0x58
 800f788:	bd70      	pop	{r4, r5, r6, pc}
 800f78a:	466a      	mov	r2, sp
 800f78c:	f000 f862 	bl	800f854 <_fstat_r>
 800f790:	2800      	cmp	r0, #0
 800f792:	dbec      	blt.n	800f76e <__swhatbuf_r+0x12>
 800f794:	9901      	ldr	r1, [sp, #4]
 800f796:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f79a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f79e:	4259      	negs	r1, r3
 800f7a0:	4159      	adcs	r1, r3
 800f7a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7a6:	e7eb      	b.n	800f780 <__swhatbuf_r+0x24>

0800f7a8 <__smakebuf_r>:
 800f7a8:	898b      	ldrh	r3, [r1, #12]
 800f7aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f7ac:	079d      	lsls	r5, r3, #30
 800f7ae:	4606      	mov	r6, r0
 800f7b0:	460c      	mov	r4, r1
 800f7b2:	d507      	bpl.n	800f7c4 <__smakebuf_r+0x1c>
 800f7b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f7b8:	6023      	str	r3, [r4, #0]
 800f7ba:	6123      	str	r3, [r4, #16]
 800f7bc:	2301      	movs	r3, #1
 800f7be:	6163      	str	r3, [r4, #20]
 800f7c0:	b002      	add	sp, #8
 800f7c2:	bd70      	pop	{r4, r5, r6, pc}
 800f7c4:	ab01      	add	r3, sp, #4
 800f7c6:	466a      	mov	r2, sp
 800f7c8:	f7ff ffc8 	bl	800f75c <__swhatbuf_r>
 800f7cc:	9900      	ldr	r1, [sp, #0]
 800f7ce:	4605      	mov	r5, r0
 800f7d0:	4630      	mov	r0, r6
 800f7d2:	f7ff f871 	bl	800e8b8 <_malloc_r>
 800f7d6:	b948      	cbnz	r0, 800f7ec <__smakebuf_r+0x44>
 800f7d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7dc:	059a      	lsls	r2, r3, #22
 800f7de:	d4ef      	bmi.n	800f7c0 <__smakebuf_r+0x18>
 800f7e0:	f023 0303 	bic.w	r3, r3, #3
 800f7e4:	f043 0302 	orr.w	r3, r3, #2
 800f7e8:	81a3      	strh	r3, [r4, #12]
 800f7ea:	e7e3      	b.n	800f7b4 <__smakebuf_r+0xc>
 800f7ec:	89a3      	ldrh	r3, [r4, #12]
 800f7ee:	6020      	str	r0, [r4, #0]
 800f7f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7f4:	81a3      	strh	r3, [r4, #12]
 800f7f6:	9b00      	ldr	r3, [sp, #0]
 800f7f8:	6163      	str	r3, [r4, #20]
 800f7fa:	9b01      	ldr	r3, [sp, #4]
 800f7fc:	6120      	str	r0, [r4, #16]
 800f7fe:	b15b      	cbz	r3, 800f818 <__smakebuf_r+0x70>
 800f800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f804:	4630      	mov	r0, r6
 800f806:	f000 f837 	bl	800f878 <_isatty_r>
 800f80a:	b128      	cbz	r0, 800f818 <__smakebuf_r+0x70>
 800f80c:	89a3      	ldrh	r3, [r4, #12]
 800f80e:	f023 0303 	bic.w	r3, r3, #3
 800f812:	f043 0301 	orr.w	r3, r3, #1
 800f816:	81a3      	strh	r3, [r4, #12]
 800f818:	89a3      	ldrh	r3, [r4, #12]
 800f81a:	431d      	orrs	r5, r3
 800f81c:	81a5      	strh	r5, [r4, #12]
 800f81e:	e7cf      	b.n	800f7c0 <__smakebuf_r+0x18>

0800f820 <memmove>:
 800f820:	4288      	cmp	r0, r1
 800f822:	b510      	push	{r4, lr}
 800f824:	eb01 0402 	add.w	r4, r1, r2
 800f828:	d902      	bls.n	800f830 <memmove+0x10>
 800f82a:	4284      	cmp	r4, r0
 800f82c:	4623      	mov	r3, r4
 800f82e:	d807      	bhi.n	800f840 <memmove+0x20>
 800f830:	1e43      	subs	r3, r0, #1
 800f832:	42a1      	cmp	r1, r4
 800f834:	d008      	beq.n	800f848 <memmove+0x28>
 800f836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f83a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f83e:	e7f8      	b.n	800f832 <memmove+0x12>
 800f840:	4402      	add	r2, r0
 800f842:	4601      	mov	r1, r0
 800f844:	428a      	cmp	r2, r1
 800f846:	d100      	bne.n	800f84a <memmove+0x2a>
 800f848:	bd10      	pop	{r4, pc}
 800f84a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f84e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f852:	e7f7      	b.n	800f844 <memmove+0x24>

0800f854 <_fstat_r>:
 800f854:	b538      	push	{r3, r4, r5, lr}
 800f856:	4d07      	ldr	r5, [pc, #28]	; (800f874 <_fstat_r+0x20>)
 800f858:	2300      	movs	r3, #0
 800f85a:	4604      	mov	r4, r0
 800f85c:	4608      	mov	r0, r1
 800f85e:	4611      	mov	r1, r2
 800f860:	602b      	str	r3, [r5, #0]
 800f862:	f7f2 fd0c 	bl	800227e <_fstat>
 800f866:	1c43      	adds	r3, r0, #1
 800f868:	d102      	bne.n	800f870 <_fstat_r+0x1c>
 800f86a:	682b      	ldr	r3, [r5, #0]
 800f86c:	b103      	cbz	r3, 800f870 <_fstat_r+0x1c>
 800f86e:	6023      	str	r3, [r4, #0]
 800f870:	bd38      	pop	{r3, r4, r5, pc}
 800f872:	bf00      	nop
 800f874:	24062078 	.word	0x24062078

0800f878 <_isatty_r>:
 800f878:	b538      	push	{r3, r4, r5, lr}
 800f87a:	4d06      	ldr	r5, [pc, #24]	; (800f894 <_isatty_r+0x1c>)
 800f87c:	2300      	movs	r3, #0
 800f87e:	4604      	mov	r4, r0
 800f880:	4608      	mov	r0, r1
 800f882:	602b      	str	r3, [r5, #0]
 800f884:	f7f2 fd0b 	bl	800229e <_isatty>
 800f888:	1c43      	adds	r3, r0, #1
 800f88a:	d102      	bne.n	800f892 <_isatty_r+0x1a>
 800f88c:	682b      	ldr	r3, [r5, #0]
 800f88e:	b103      	cbz	r3, 800f892 <_isatty_r+0x1a>
 800f890:	6023      	str	r3, [r4, #0]
 800f892:	bd38      	pop	{r3, r4, r5, pc}
 800f894:	24062078 	.word	0x24062078

0800f898 <_sbrk_r>:
 800f898:	b538      	push	{r3, r4, r5, lr}
 800f89a:	4d06      	ldr	r5, [pc, #24]	; (800f8b4 <_sbrk_r+0x1c>)
 800f89c:	2300      	movs	r3, #0
 800f89e:	4604      	mov	r4, r0
 800f8a0:	4608      	mov	r0, r1
 800f8a2:	602b      	str	r3, [r5, #0]
 800f8a4:	f7f2 fd14 	bl	80022d0 <_sbrk>
 800f8a8:	1c43      	adds	r3, r0, #1
 800f8aa:	d102      	bne.n	800f8b2 <_sbrk_r+0x1a>
 800f8ac:	682b      	ldr	r3, [r5, #0]
 800f8ae:	b103      	cbz	r3, 800f8b2 <_sbrk_r+0x1a>
 800f8b0:	6023      	str	r3, [r4, #0]
 800f8b2:	bd38      	pop	{r3, r4, r5, pc}
 800f8b4:	24062078 	.word	0x24062078

0800f8b8 <memcpy>:
 800f8b8:	440a      	add	r2, r1
 800f8ba:	4291      	cmp	r1, r2
 800f8bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f8c0:	d100      	bne.n	800f8c4 <memcpy+0xc>
 800f8c2:	4770      	bx	lr
 800f8c4:	b510      	push	{r4, lr}
 800f8c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8ce:	4291      	cmp	r1, r2
 800f8d0:	d1f9      	bne.n	800f8c6 <memcpy+0xe>
 800f8d2:	bd10      	pop	{r4, pc}

0800f8d4 <__assert_func>:
 800f8d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8d6:	4614      	mov	r4, r2
 800f8d8:	461a      	mov	r2, r3
 800f8da:	4b09      	ldr	r3, [pc, #36]	; (800f900 <__assert_func+0x2c>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	4605      	mov	r5, r0
 800f8e0:	68d8      	ldr	r0, [r3, #12]
 800f8e2:	b14c      	cbz	r4, 800f8f8 <__assert_func+0x24>
 800f8e4:	4b07      	ldr	r3, [pc, #28]	; (800f904 <__assert_func+0x30>)
 800f8e6:	9100      	str	r1, [sp, #0]
 800f8e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8ec:	4906      	ldr	r1, [pc, #24]	; (800f908 <__assert_func+0x34>)
 800f8ee:	462b      	mov	r3, r5
 800f8f0:	f000 f872 	bl	800f9d8 <fiprintf>
 800f8f4:	f000 f882 	bl	800f9fc <abort>
 800f8f8:	4b04      	ldr	r3, [pc, #16]	; (800f90c <__assert_func+0x38>)
 800f8fa:	461c      	mov	r4, r3
 800f8fc:	e7f3      	b.n	800f8e6 <__assert_func+0x12>
 800f8fe:	bf00      	nop
 800f900:	24000070 	.word	0x24000070
 800f904:	0800fd67 	.word	0x0800fd67
 800f908:	0800fd74 	.word	0x0800fd74
 800f90c:	0800fda2 	.word	0x0800fda2

0800f910 <_calloc_r>:
 800f910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f912:	fba1 2402 	umull	r2, r4, r1, r2
 800f916:	b94c      	cbnz	r4, 800f92c <_calloc_r+0x1c>
 800f918:	4611      	mov	r1, r2
 800f91a:	9201      	str	r2, [sp, #4]
 800f91c:	f7fe ffcc 	bl	800e8b8 <_malloc_r>
 800f920:	9a01      	ldr	r2, [sp, #4]
 800f922:	4605      	mov	r5, r0
 800f924:	b930      	cbnz	r0, 800f934 <_calloc_r+0x24>
 800f926:	4628      	mov	r0, r5
 800f928:	b003      	add	sp, #12
 800f92a:	bd30      	pop	{r4, r5, pc}
 800f92c:	220c      	movs	r2, #12
 800f92e:	6002      	str	r2, [r0, #0]
 800f930:	2500      	movs	r5, #0
 800f932:	e7f8      	b.n	800f926 <_calloc_r+0x16>
 800f934:	4621      	mov	r1, r4
 800f936:	f7fe f8d5 	bl	800dae4 <memset>
 800f93a:	e7f4      	b.n	800f926 <_calloc_r+0x16>

0800f93c <__ascii_mbtowc>:
 800f93c:	b082      	sub	sp, #8
 800f93e:	b901      	cbnz	r1, 800f942 <__ascii_mbtowc+0x6>
 800f940:	a901      	add	r1, sp, #4
 800f942:	b142      	cbz	r2, 800f956 <__ascii_mbtowc+0x1a>
 800f944:	b14b      	cbz	r3, 800f95a <__ascii_mbtowc+0x1e>
 800f946:	7813      	ldrb	r3, [r2, #0]
 800f948:	600b      	str	r3, [r1, #0]
 800f94a:	7812      	ldrb	r2, [r2, #0]
 800f94c:	1e10      	subs	r0, r2, #0
 800f94e:	bf18      	it	ne
 800f950:	2001      	movne	r0, #1
 800f952:	b002      	add	sp, #8
 800f954:	4770      	bx	lr
 800f956:	4610      	mov	r0, r2
 800f958:	e7fb      	b.n	800f952 <__ascii_mbtowc+0x16>
 800f95a:	f06f 0001 	mvn.w	r0, #1
 800f95e:	e7f8      	b.n	800f952 <__ascii_mbtowc+0x16>

0800f960 <_realloc_r>:
 800f960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f964:	4680      	mov	r8, r0
 800f966:	4614      	mov	r4, r2
 800f968:	460e      	mov	r6, r1
 800f96a:	b921      	cbnz	r1, 800f976 <_realloc_r+0x16>
 800f96c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f970:	4611      	mov	r1, r2
 800f972:	f7fe bfa1 	b.w	800e8b8 <_malloc_r>
 800f976:	b92a      	cbnz	r2, 800f984 <_realloc_r+0x24>
 800f978:	f7fe ff2a 	bl	800e7d0 <_free_r>
 800f97c:	4625      	mov	r5, r4
 800f97e:	4628      	mov	r0, r5
 800f980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f984:	f000 f841 	bl	800fa0a <_malloc_usable_size_r>
 800f988:	4284      	cmp	r4, r0
 800f98a:	4607      	mov	r7, r0
 800f98c:	d802      	bhi.n	800f994 <_realloc_r+0x34>
 800f98e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f992:	d812      	bhi.n	800f9ba <_realloc_r+0x5a>
 800f994:	4621      	mov	r1, r4
 800f996:	4640      	mov	r0, r8
 800f998:	f7fe ff8e 	bl	800e8b8 <_malloc_r>
 800f99c:	4605      	mov	r5, r0
 800f99e:	2800      	cmp	r0, #0
 800f9a0:	d0ed      	beq.n	800f97e <_realloc_r+0x1e>
 800f9a2:	42bc      	cmp	r4, r7
 800f9a4:	4622      	mov	r2, r4
 800f9a6:	4631      	mov	r1, r6
 800f9a8:	bf28      	it	cs
 800f9aa:	463a      	movcs	r2, r7
 800f9ac:	f7ff ff84 	bl	800f8b8 <memcpy>
 800f9b0:	4631      	mov	r1, r6
 800f9b2:	4640      	mov	r0, r8
 800f9b4:	f7fe ff0c 	bl	800e7d0 <_free_r>
 800f9b8:	e7e1      	b.n	800f97e <_realloc_r+0x1e>
 800f9ba:	4635      	mov	r5, r6
 800f9bc:	e7df      	b.n	800f97e <_realloc_r+0x1e>

0800f9be <__ascii_wctomb>:
 800f9be:	b149      	cbz	r1, 800f9d4 <__ascii_wctomb+0x16>
 800f9c0:	2aff      	cmp	r2, #255	; 0xff
 800f9c2:	bf85      	ittet	hi
 800f9c4:	238a      	movhi	r3, #138	; 0x8a
 800f9c6:	6003      	strhi	r3, [r0, #0]
 800f9c8:	700a      	strbls	r2, [r1, #0]
 800f9ca:	f04f 30ff 	movhi.w	r0, #4294967295
 800f9ce:	bf98      	it	ls
 800f9d0:	2001      	movls	r0, #1
 800f9d2:	4770      	bx	lr
 800f9d4:	4608      	mov	r0, r1
 800f9d6:	4770      	bx	lr

0800f9d8 <fiprintf>:
 800f9d8:	b40e      	push	{r1, r2, r3}
 800f9da:	b503      	push	{r0, r1, lr}
 800f9dc:	4601      	mov	r1, r0
 800f9de:	ab03      	add	r3, sp, #12
 800f9e0:	4805      	ldr	r0, [pc, #20]	; (800f9f8 <fiprintf+0x20>)
 800f9e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9e6:	6800      	ldr	r0, [r0, #0]
 800f9e8:	9301      	str	r3, [sp, #4]
 800f9ea:	f7ff fcef 	bl	800f3cc <_vfiprintf_r>
 800f9ee:	b002      	add	sp, #8
 800f9f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9f4:	b003      	add	sp, #12
 800f9f6:	4770      	bx	lr
 800f9f8:	24000070 	.word	0x24000070

0800f9fc <abort>:
 800f9fc:	b508      	push	{r3, lr}
 800f9fe:	2006      	movs	r0, #6
 800fa00:	f000 f834 	bl	800fa6c <raise>
 800fa04:	2001      	movs	r0, #1
 800fa06:	f7f2 fbeb 	bl	80021e0 <_exit>

0800fa0a <_malloc_usable_size_r>:
 800fa0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa0e:	1f18      	subs	r0, r3, #4
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	bfbc      	itt	lt
 800fa14:	580b      	ldrlt	r3, [r1, r0]
 800fa16:	18c0      	addlt	r0, r0, r3
 800fa18:	4770      	bx	lr

0800fa1a <_raise_r>:
 800fa1a:	291f      	cmp	r1, #31
 800fa1c:	b538      	push	{r3, r4, r5, lr}
 800fa1e:	4604      	mov	r4, r0
 800fa20:	460d      	mov	r5, r1
 800fa22:	d904      	bls.n	800fa2e <_raise_r+0x14>
 800fa24:	2316      	movs	r3, #22
 800fa26:	6003      	str	r3, [r0, #0]
 800fa28:	f04f 30ff 	mov.w	r0, #4294967295
 800fa2c:	bd38      	pop	{r3, r4, r5, pc}
 800fa2e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fa30:	b112      	cbz	r2, 800fa38 <_raise_r+0x1e>
 800fa32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa36:	b94b      	cbnz	r3, 800fa4c <_raise_r+0x32>
 800fa38:	4620      	mov	r0, r4
 800fa3a:	f000 f831 	bl	800faa0 <_getpid_r>
 800fa3e:	462a      	mov	r2, r5
 800fa40:	4601      	mov	r1, r0
 800fa42:	4620      	mov	r0, r4
 800fa44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa48:	f000 b818 	b.w	800fa7c <_kill_r>
 800fa4c:	2b01      	cmp	r3, #1
 800fa4e:	d00a      	beq.n	800fa66 <_raise_r+0x4c>
 800fa50:	1c59      	adds	r1, r3, #1
 800fa52:	d103      	bne.n	800fa5c <_raise_r+0x42>
 800fa54:	2316      	movs	r3, #22
 800fa56:	6003      	str	r3, [r0, #0]
 800fa58:	2001      	movs	r0, #1
 800fa5a:	e7e7      	b.n	800fa2c <_raise_r+0x12>
 800fa5c:	2400      	movs	r4, #0
 800fa5e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fa62:	4628      	mov	r0, r5
 800fa64:	4798      	blx	r3
 800fa66:	2000      	movs	r0, #0
 800fa68:	e7e0      	b.n	800fa2c <_raise_r+0x12>
	...

0800fa6c <raise>:
 800fa6c:	4b02      	ldr	r3, [pc, #8]	; (800fa78 <raise+0xc>)
 800fa6e:	4601      	mov	r1, r0
 800fa70:	6818      	ldr	r0, [r3, #0]
 800fa72:	f7ff bfd2 	b.w	800fa1a <_raise_r>
 800fa76:	bf00      	nop
 800fa78:	24000070 	.word	0x24000070

0800fa7c <_kill_r>:
 800fa7c:	b538      	push	{r3, r4, r5, lr}
 800fa7e:	4d07      	ldr	r5, [pc, #28]	; (800fa9c <_kill_r+0x20>)
 800fa80:	2300      	movs	r3, #0
 800fa82:	4604      	mov	r4, r0
 800fa84:	4608      	mov	r0, r1
 800fa86:	4611      	mov	r1, r2
 800fa88:	602b      	str	r3, [r5, #0]
 800fa8a:	f7f2 fb99 	bl	80021c0 <_kill>
 800fa8e:	1c43      	adds	r3, r0, #1
 800fa90:	d102      	bne.n	800fa98 <_kill_r+0x1c>
 800fa92:	682b      	ldr	r3, [r5, #0]
 800fa94:	b103      	cbz	r3, 800fa98 <_kill_r+0x1c>
 800fa96:	6023      	str	r3, [r4, #0]
 800fa98:	bd38      	pop	{r3, r4, r5, pc}
 800fa9a:	bf00      	nop
 800fa9c:	24062078 	.word	0x24062078

0800faa0 <_getpid_r>:
 800faa0:	f7f2 bb86 	b.w	80021b0 <_getpid>

0800faa4 <_init>:
 800faa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faa6:	bf00      	nop
 800faa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800faaa:	bc08      	pop	{r3}
 800faac:	469e      	mov	lr, r3
 800faae:	4770      	bx	lr

0800fab0 <_fini>:
 800fab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fab2:	bf00      	nop
 800fab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fab6:	bc08      	pop	{r3}
 800fab8:	469e      	mov	lr, r3
 800faba:	4770      	bx	lr
